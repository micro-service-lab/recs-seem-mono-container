// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package service

import (
	"context"
	"github.com/google/uuid"
	"github.com/micro-service-lab/recs-seem-mono-container/app/entity"
	"github.com/micro-service-lab/recs-seem-mono-container/app/parameter"
	"github.com/micro-service-lab/recs-seem-mono-container/app/store"
	"sync"
)

// Ensure, that ManagerInterfaceMock does implement ManagerInterface.
// If this is not the case, regenerate this file with moq.
var _ ManagerInterface = &ManagerInterfaceMock{}

// ManagerInterfaceMock is a mock implementation of ManagerInterface.
//
//	func TestSomethingThatUsesManagerInterface(t *testing.T) {
//
//		// make and configure a mocked ManagerInterface
//		mockedManagerInterface := &ManagerInterfaceMock{
//			CreateAttendStatusFunc: func(ctx context.Context, name string, key string) (entity.AttendStatus, error) {
//				panic("mock out the CreateAttendStatus method")
//			},
//			CreateAttendStatusesFunc: func(ctx context.Context, ps []parameter.CreateAttendStatusParam) (int64, error) {
//				panic("mock out the CreateAttendStatuses method")
//			},
//			DeleteAttendStatusFunc: func(ctx context.Context, id uuid.UUID) error {
//				panic("mock out the DeleteAttendStatus method")
//			},
//			FindAttendStatusByIDFunc: func(ctx context.Context, id uuid.UUID) (entity.AttendStatus, error) {
//				panic("mock out the FindAttendStatusByID method")
//			},
//			FindAttendStatusByKeyFunc: func(ctx context.Context, key string) (entity.AttendStatus, error) {
//				panic("mock out the FindAttendStatusByKey method")
//			},
//			GetAttendStatusesFunc: func(ctx context.Context, whereSearchName string, order parameter.AttendStatusOrderMethod, pg parameter.Pagination, limit parameter.Limit, cursor parameter.Cursor, offset parameter.Offset, withCount parameter.WithCount) (store.ListResult[entity.AttendStatus], error) {
//				panic("mock out the GetAttendStatuses method")
//			},
//			GetAttendStatusesCountFunc: func(ctx context.Context, whereSearchName string) (int64, error) {
//				panic("mock out the GetAttendStatusesCount method")
//			},
//			UpdateAttendStatusFunc: func(ctx context.Context, id uuid.UUID, name string, key string) (entity.AttendStatus, error) {
//				panic("mock out the UpdateAttendStatus method")
//			},
//		}
//
//		// use mockedManagerInterface in code that requires ManagerInterface
//		// and then make assertions.
//
//	}
type ManagerInterfaceMock struct {
	// CreateAttendStatusFunc mocks the CreateAttendStatus method.
	CreateAttendStatusFunc func(ctx context.Context, name string, key string) (entity.AttendStatus, error)

	// CreateAttendStatusesFunc mocks the CreateAttendStatuses method.
	CreateAttendStatusesFunc func(ctx context.Context, ps []parameter.CreateAttendStatusParam) (int64, error)

	// DeleteAttendStatusFunc mocks the DeleteAttendStatus method.
	DeleteAttendStatusFunc func(ctx context.Context, id uuid.UUID) error

	// FindAttendStatusByIDFunc mocks the FindAttendStatusByID method.
	FindAttendStatusByIDFunc func(ctx context.Context, id uuid.UUID) (entity.AttendStatus, error)

	// FindAttendStatusByKeyFunc mocks the FindAttendStatusByKey method.
	FindAttendStatusByKeyFunc func(ctx context.Context, key string) (entity.AttendStatus, error)

	// GetAttendStatusesFunc mocks the GetAttendStatuses method.
	GetAttendStatusesFunc func(ctx context.Context, whereSearchName string, order parameter.AttendStatusOrderMethod, pg parameter.Pagination, limit parameter.Limit, cursor parameter.Cursor, offset parameter.Offset, withCount parameter.WithCount) (store.ListResult[entity.AttendStatus], error)

	// GetAttendStatusesCountFunc mocks the GetAttendStatusesCount method.
	GetAttendStatusesCountFunc func(ctx context.Context, whereSearchName string) (int64, error)

	// UpdateAttendStatusFunc mocks the UpdateAttendStatus method.
	UpdateAttendStatusFunc func(ctx context.Context, id uuid.UUID, name string, key string) (entity.AttendStatus, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateAttendStatus holds details about calls to the CreateAttendStatus method.
		CreateAttendStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Key is the key argument value.
			Key string
		}
		// CreateAttendStatuses holds details about calls to the CreateAttendStatuses method.
		CreateAttendStatuses []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Ps is the ps argument value.
			Ps []parameter.CreateAttendStatusParam
		}
		// DeleteAttendStatus holds details about calls to the DeleteAttendStatus method.
		DeleteAttendStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// FindAttendStatusByID holds details about calls to the FindAttendStatusByID method.
		FindAttendStatusByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// FindAttendStatusByKey holds details about calls to the FindAttendStatusByKey method.
		FindAttendStatusByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// GetAttendStatuses holds details about calls to the GetAttendStatuses method.
		GetAttendStatuses []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// WhereSearchName is the whereSearchName argument value.
			WhereSearchName string
			// Order is the order argument value.
			Order parameter.AttendStatusOrderMethod
			// Pg is the pg argument value.
			Pg parameter.Pagination
			// Limit is the limit argument value.
			Limit parameter.Limit
			// Cursor is the cursor argument value.
			Cursor parameter.Cursor
			// Offset is the offset argument value.
			Offset parameter.Offset
			// WithCount is the withCount argument value.
			WithCount parameter.WithCount
		}
		// GetAttendStatusesCount holds details about calls to the GetAttendStatusesCount method.
		GetAttendStatusesCount []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// WhereSearchName is the whereSearchName argument value.
			WhereSearchName string
		}
		// UpdateAttendStatus holds details about calls to the UpdateAttendStatus method.
		UpdateAttendStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
			// Name is the name argument value.
			Name string
			// Key is the key argument value.
			Key string
		}
	}
	lockCreateAttendStatus     sync.RWMutex
	lockCreateAttendStatuses   sync.RWMutex
	lockDeleteAttendStatus     sync.RWMutex
	lockFindAttendStatusByID   sync.RWMutex
	lockFindAttendStatusByKey  sync.RWMutex
	lockGetAttendStatuses      sync.RWMutex
	lockGetAttendStatusesCount sync.RWMutex
	lockUpdateAttendStatus     sync.RWMutex
}

// CreateAttendStatus calls CreateAttendStatusFunc.
func (mock *ManagerInterfaceMock) CreateAttendStatus(ctx context.Context, name string, key string) (entity.AttendStatus, error) {
	if mock.CreateAttendStatusFunc == nil {
		panic("ManagerInterfaceMock.CreateAttendStatusFunc: method is nil but ManagerInterface.CreateAttendStatus was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Key  string
	}{
		Ctx:  ctx,
		Name: name,
		Key:  key,
	}
	mock.lockCreateAttendStatus.Lock()
	mock.calls.CreateAttendStatus = append(mock.calls.CreateAttendStatus, callInfo)
	mock.lockCreateAttendStatus.Unlock()
	return mock.CreateAttendStatusFunc(ctx, name, key)
}

// CreateAttendStatusCalls gets all the calls that were made to CreateAttendStatus.
// Check the length with:
//
//	len(mockedManagerInterface.CreateAttendStatusCalls())
func (mock *ManagerInterfaceMock) CreateAttendStatusCalls() []struct {
	Ctx  context.Context
	Name string
	Key  string
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Key  string
	}
	mock.lockCreateAttendStatus.RLock()
	calls = mock.calls.CreateAttendStatus
	mock.lockCreateAttendStatus.RUnlock()
	return calls
}

// CreateAttendStatuses calls CreateAttendStatusesFunc.
func (mock *ManagerInterfaceMock) CreateAttendStatuses(ctx context.Context, ps []parameter.CreateAttendStatusParam) (int64, error) {
	if mock.CreateAttendStatusesFunc == nil {
		panic("ManagerInterfaceMock.CreateAttendStatusesFunc: method is nil but ManagerInterface.CreateAttendStatuses was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Ps  []parameter.CreateAttendStatusParam
	}{
		Ctx: ctx,
		Ps:  ps,
	}
	mock.lockCreateAttendStatuses.Lock()
	mock.calls.CreateAttendStatuses = append(mock.calls.CreateAttendStatuses, callInfo)
	mock.lockCreateAttendStatuses.Unlock()
	return mock.CreateAttendStatusesFunc(ctx, ps)
}

// CreateAttendStatusesCalls gets all the calls that were made to CreateAttendStatuses.
// Check the length with:
//
//	len(mockedManagerInterface.CreateAttendStatusesCalls())
func (mock *ManagerInterfaceMock) CreateAttendStatusesCalls() []struct {
	Ctx context.Context
	Ps  []parameter.CreateAttendStatusParam
} {
	var calls []struct {
		Ctx context.Context
		Ps  []parameter.CreateAttendStatusParam
	}
	mock.lockCreateAttendStatuses.RLock()
	calls = mock.calls.CreateAttendStatuses
	mock.lockCreateAttendStatuses.RUnlock()
	return calls
}

// DeleteAttendStatus calls DeleteAttendStatusFunc.
func (mock *ManagerInterfaceMock) DeleteAttendStatus(ctx context.Context, id uuid.UUID) error {
	if mock.DeleteAttendStatusFunc == nil {
		panic("ManagerInterfaceMock.DeleteAttendStatusFunc: method is nil but ManagerInterface.DeleteAttendStatus was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeleteAttendStatus.Lock()
	mock.calls.DeleteAttendStatus = append(mock.calls.DeleteAttendStatus, callInfo)
	mock.lockDeleteAttendStatus.Unlock()
	return mock.DeleteAttendStatusFunc(ctx, id)
}

// DeleteAttendStatusCalls gets all the calls that were made to DeleteAttendStatus.
// Check the length with:
//
//	len(mockedManagerInterface.DeleteAttendStatusCalls())
func (mock *ManagerInterfaceMock) DeleteAttendStatusCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockDeleteAttendStatus.RLock()
	calls = mock.calls.DeleteAttendStatus
	mock.lockDeleteAttendStatus.RUnlock()
	return calls
}

// FindAttendStatusByID calls FindAttendStatusByIDFunc.
func (mock *ManagerInterfaceMock) FindAttendStatusByID(ctx context.Context, id uuid.UUID) (entity.AttendStatus, error) {
	if mock.FindAttendStatusByIDFunc == nil {
		panic("ManagerInterfaceMock.FindAttendStatusByIDFunc: method is nil but ManagerInterface.FindAttendStatusByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockFindAttendStatusByID.Lock()
	mock.calls.FindAttendStatusByID = append(mock.calls.FindAttendStatusByID, callInfo)
	mock.lockFindAttendStatusByID.Unlock()
	return mock.FindAttendStatusByIDFunc(ctx, id)
}

// FindAttendStatusByIDCalls gets all the calls that were made to FindAttendStatusByID.
// Check the length with:
//
//	len(mockedManagerInterface.FindAttendStatusByIDCalls())
func (mock *ManagerInterfaceMock) FindAttendStatusByIDCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockFindAttendStatusByID.RLock()
	calls = mock.calls.FindAttendStatusByID
	mock.lockFindAttendStatusByID.RUnlock()
	return calls
}

// FindAttendStatusByKey calls FindAttendStatusByKeyFunc.
func (mock *ManagerInterfaceMock) FindAttendStatusByKey(ctx context.Context, key string) (entity.AttendStatus, error) {
	if mock.FindAttendStatusByKeyFunc == nil {
		panic("ManagerInterfaceMock.FindAttendStatusByKeyFunc: method is nil but ManagerInterface.FindAttendStatusByKey was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockFindAttendStatusByKey.Lock()
	mock.calls.FindAttendStatusByKey = append(mock.calls.FindAttendStatusByKey, callInfo)
	mock.lockFindAttendStatusByKey.Unlock()
	return mock.FindAttendStatusByKeyFunc(ctx, key)
}

// FindAttendStatusByKeyCalls gets all the calls that were made to FindAttendStatusByKey.
// Check the length with:
//
//	len(mockedManagerInterface.FindAttendStatusByKeyCalls())
func (mock *ManagerInterfaceMock) FindAttendStatusByKeyCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockFindAttendStatusByKey.RLock()
	calls = mock.calls.FindAttendStatusByKey
	mock.lockFindAttendStatusByKey.RUnlock()
	return calls
}

// GetAttendStatuses calls GetAttendStatusesFunc.
func (mock *ManagerInterfaceMock) GetAttendStatuses(ctx context.Context, whereSearchName string, order parameter.AttendStatusOrderMethod, pg parameter.Pagination, limit parameter.Limit, cursor parameter.Cursor, offset parameter.Offset, withCount parameter.WithCount) (store.ListResult[entity.AttendStatus], error) {
	if mock.GetAttendStatusesFunc == nil {
		panic("ManagerInterfaceMock.GetAttendStatusesFunc: method is nil but ManagerInterface.GetAttendStatuses was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		WhereSearchName string
		Order           parameter.AttendStatusOrderMethod
		Pg              parameter.Pagination
		Limit           parameter.Limit
		Cursor          parameter.Cursor
		Offset          parameter.Offset
		WithCount       parameter.WithCount
	}{
		Ctx:             ctx,
		WhereSearchName: whereSearchName,
		Order:           order,
		Pg:              pg,
		Limit:           limit,
		Cursor:          cursor,
		Offset:          offset,
		WithCount:       withCount,
	}
	mock.lockGetAttendStatuses.Lock()
	mock.calls.GetAttendStatuses = append(mock.calls.GetAttendStatuses, callInfo)
	mock.lockGetAttendStatuses.Unlock()
	return mock.GetAttendStatusesFunc(ctx, whereSearchName, order, pg, limit, cursor, offset, withCount)
}

// GetAttendStatusesCalls gets all the calls that were made to GetAttendStatuses.
// Check the length with:
//
//	len(mockedManagerInterface.GetAttendStatusesCalls())
func (mock *ManagerInterfaceMock) GetAttendStatusesCalls() []struct {
	Ctx             context.Context
	WhereSearchName string
	Order           parameter.AttendStatusOrderMethod
	Pg              parameter.Pagination
	Limit           parameter.Limit
	Cursor          parameter.Cursor
	Offset          parameter.Offset
	WithCount       parameter.WithCount
} {
	var calls []struct {
		Ctx             context.Context
		WhereSearchName string
		Order           parameter.AttendStatusOrderMethod
		Pg              parameter.Pagination
		Limit           parameter.Limit
		Cursor          parameter.Cursor
		Offset          parameter.Offset
		WithCount       parameter.WithCount
	}
	mock.lockGetAttendStatuses.RLock()
	calls = mock.calls.GetAttendStatuses
	mock.lockGetAttendStatuses.RUnlock()
	return calls
}

// GetAttendStatusesCount calls GetAttendStatusesCountFunc.
func (mock *ManagerInterfaceMock) GetAttendStatusesCount(ctx context.Context, whereSearchName string) (int64, error) {
	if mock.GetAttendStatusesCountFunc == nil {
		panic("ManagerInterfaceMock.GetAttendStatusesCountFunc: method is nil but ManagerInterface.GetAttendStatusesCount was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		WhereSearchName string
	}{
		Ctx:             ctx,
		WhereSearchName: whereSearchName,
	}
	mock.lockGetAttendStatusesCount.Lock()
	mock.calls.GetAttendStatusesCount = append(mock.calls.GetAttendStatusesCount, callInfo)
	mock.lockGetAttendStatusesCount.Unlock()
	return mock.GetAttendStatusesCountFunc(ctx, whereSearchName)
}

// GetAttendStatusesCountCalls gets all the calls that were made to GetAttendStatusesCount.
// Check the length with:
//
//	len(mockedManagerInterface.GetAttendStatusesCountCalls())
func (mock *ManagerInterfaceMock) GetAttendStatusesCountCalls() []struct {
	Ctx             context.Context
	WhereSearchName string
} {
	var calls []struct {
		Ctx             context.Context
		WhereSearchName string
	}
	mock.lockGetAttendStatusesCount.RLock()
	calls = mock.calls.GetAttendStatusesCount
	mock.lockGetAttendStatusesCount.RUnlock()
	return calls
}

// UpdateAttendStatus calls UpdateAttendStatusFunc.
func (mock *ManagerInterfaceMock) UpdateAttendStatus(ctx context.Context, id uuid.UUID, name string, key string) (entity.AttendStatus, error) {
	if mock.UpdateAttendStatusFunc == nil {
		panic("ManagerInterfaceMock.UpdateAttendStatusFunc: method is nil but ManagerInterface.UpdateAttendStatus was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		ID   uuid.UUID
		Name string
		Key  string
	}{
		Ctx:  ctx,
		ID:   id,
		Name: name,
		Key:  key,
	}
	mock.lockUpdateAttendStatus.Lock()
	mock.calls.UpdateAttendStatus = append(mock.calls.UpdateAttendStatus, callInfo)
	mock.lockUpdateAttendStatus.Unlock()
	return mock.UpdateAttendStatusFunc(ctx, id, name, key)
}

// UpdateAttendStatusCalls gets all the calls that were made to UpdateAttendStatus.
// Check the length with:
//
//	len(mockedManagerInterface.UpdateAttendStatusCalls())
func (mock *ManagerInterfaceMock) UpdateAttendStatusCalls() []struct {
	Ctx  context.Context
	ID   uuid.UUID
	Name string
	Key  string
} {
	var calls []struct {
		Ctx  context.Context
		ID   uuid.UUID
		Name string
		Key  string
	}
	mock.lockUpdateAttendStatus.RLock()
	calls = mock.calls.UpdateAttendStatus
	mock.lockUpdateAttendStatus.RUnlock()
	return calls
}
