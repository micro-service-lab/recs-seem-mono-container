// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: chat_room_action_type.sql

package query

import (
	"context"

	"github.com/google/uuid"
)

const countChatRoomActionTypes = `-- name: CountChatRoomActionTypes :one
SELECT COUNT(*) FROM m_chat_room_action_types
WHERE
	CASE WHEN $1::boolean = true THEN name LIKE '%' || $2::text || '%' ELSE TRUE END
`

type CountChatRoomActionTypesParams struct {
	WhereLikeName bool   `json:"where_like_name"`
	SearchName    string `json:"search_name"`
}

func (q *Queries) CountChatRoomActionTypes(ctx context.Context, arg CountChatRoomActionTypesParams) (int64, error) {
	row := q.db.QueryRow(ctx, countChatRoomActionTypes, arg.WhereLikeName, arg.SearchName)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createChatRoomActionType = `-- name: CreateChatRoomActionType :one
INSERT INTO m_chat_room_action_types (name, key) VALUES ($1, $2) RETURNING m_chat_room_action_types_pkey, chat_room_action_type_id, name, key
`

type CreateChatRoomActionTypeParams struct {
	Name string `json:"name"`
	Key  string `json:"key"`
}

func (q *Queries) CreateChatRoomActionType(ctx context.Context, arg CreateChatRoomActionTypeParams) (ChatRoomActionType, error) {
	row := q.db.QueryRow(ctx, createChatRoomActionType, arg.Name, arg.Key)
	var i ChatRoomActionType
	err := row.Scan(
		&i.MChatRoomActionTypesPkey,
		&i.ChatRoomActionTypeID,
		&i.Name,
		&i.Key,
	)
	return i, err
}

type CreateChatRoomActionTypesParams struct {
	Name string `json:"name"`
	Key  string `json:"key"`
}

const deleteChatRoomActionType = `-- name: DeleteChatRoomActionType :execrows
DELETE FROM m_chat_room_action_types WHERE chat_room_action_type_id = $1
`

func (q *Queries) DeleteChatRoomActionType(ctx context.Context, chatRoomActionTypeID uuid.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, deleteChatRoomActionType, chatRoomActionTypeID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const deleteChatRoomActionTypeByKey = `-- name: DeleteChatRoomActionTypeByKey :execrows
DELETE FROM m_chat_room_action_types WHERE key = $1
`

func (q *Queries) DeleteChatRoomActionTypeByKey(ctx context.Context, key string) (int64, error) {
	result, err := q.db.Exec(ctx, deleteChatRoomActionTypeByKey, key)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const findChatRoomActionTypeByID = `-- name: FindChatRoomActionTypeByID :one
SELECT m_chat_room_action_types_pkey, chat_room_action_type_id, name, key FROM m_chat_room_action_types WHERE chat_room_action_type_id = $1
`

func (q *Queries) FindChatRoomActionTypeByID(ctx context.Context, chatRoomActionTypeID uuid.UUID) (ChatRoomActionType, error) {
	row := q.db.QueryRow(ctx, findChatRoomActionTypeByID, chatRoomActionTypeID)
	var i ChatRoomActionType
	err := row.Scan(
		&i.MChatRoomActionTypesPkey,
		&i.ChatRoomActionTypeID,
		&i.Name,
		&i.Key,
	)
	return i, err
}

const findChatRoomActionTypeByKey = `-- name: FindChatRoomActionTypeByKey :one
SELECT m_chat_room_action_types_pkey, chat_room_action_type_id, name, key FROM m_chat_room_action_types WHERE key = $1
`

func (q *Queries) FindChatRoomActionTypeByKey(ctx context.Context, key string) (ChatRoomActionType, error) {
	row := q.db.QueryRow(ctx, findChatRoomActionTypeByKey, key)
	var i ChatRoomActionType
	err := row.Scan(
		&i.MChatRoomActionTypesPkey,
		&i.ChatRoomActionTypeID,
		&i.Name,
		&i.Key,
	)
	return i, err
}

const getChatRoomActionTypes = `-- name: GetChatRoomActionTypes :many
SELECT m_chat_room_action_types_pkey, chat_room_action_type_id, name, key FROM m_chat_room_action_types
WHERE
	CASE WHEN $1::boolean = true THEN m_chat_room_action_types.name LIKE '%' || $2::text || '%' ELSE TRUE END
ORDER BY
	CASE WHEN $3::text = 'name' THEN name END ASC,
	CASE WHEN $3::text = 'r_name' THEN name END DESC,
	m_chat_room_action_types_pkey ASC
`

type GetChatRoomActionTypesParams struct {
	WhereLikeName bool   `json:"where_like_name"`
	SearchName    string `json:"search_name"`
	OrderMethod   string `json:"order_method"`
}

func (q *Queries) GetChatRoomActionTypes(ctx context.Context, arg GetChatRoomActionTypesParams) ([]ChatRoomActionType, error) {
	rows, err := q.db.Query(ctx, getChatRoomActionTypes, arg.WhereLikeName, arg.SearchName, arg.OrderMethod)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ChatRoomActionType{}
	for rows.Next() {
		var i ChatRoomActionType
		if err := rows.Scan(
			&i.MChatRoomActionTypesPkey,
			&i.ChatRoomActionTypeID,
			&i.Name,
			&i.Key,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChatRoomActionTypesUseKeysetPaginate = `-- name: GetChatRoomActionTypesUseKeysetPaginate :many
SELECT m_chat_room_action_types_pkey, chat_room_action_type_id, name, key FROM m_chat_room_action_types
WHERE
	CASE WHEN $2::boolean = true THEN m_chat_room_action_types.name LIKE '%' || $3::text || '%' ELSE TRUE END
AND
	CASE $4::text
		WHEN 'next' THEN
			CASE $5::text
				WHEN 'name' THEN name > $6 OR (name = $6 AND m_chat_room_action_types_pkey > $7::int)
				WHEN 'r_name' THEN name < $6 OR (name = $6 AND m_chat_room_action_types_pkey > $7::int)
				ELSE m_chat_room_action_types_pkey > $7::int
			END
		WHEN 'prev' THEN
			CASE $5::text
				WHEN 'name' THEN name < $6 OR (name = $6 AND m_chat_room_action_types_pkey < $7::int)
				WHEN 'r_name' THEN name > $6 OR (name = $6 AND m_chat_room_action_types_pkey < $7::int)
				ELSE m_chat_room_action_types_pkey < $7::int
			END
	END
ORDER BY
	CASE WHEN $5::text = 'name' AND $4::text = 'next' THEN name END ASC,
	CASE WHEN $5::text = 'name' AND $4::text = 'prev' THEN name END DESC,
	CASE WHEN $5::text = 'r_name' AND $4::text = 'next' THEN name END DESC,
	CASE WHEN $5::text = 'r_name' AND $4::text = 'prev' THEN name END ASC,
	CASE WHEN $4::text = 'next' THEN m_chat_room_action_types_pkey END ASC,
	CASE WHEN $4::text = 'prev' THEN m_chat_room_action_types_pkey END DESC
LIMIT $1
`

type GetChatRoomActionTypesUseKeysetPaginateParams struct {
	Limit           int32  `json:"limit"`
	WhereLikeName   bool   `json:"where_like_name"`
	SearchName      string `json:"search_name"`
	CursorDirection string `json:"cursor_direction"`
	OrderMethod     string `json:"order_method"`
	NameCursor      string `json:"name_cursor"`
	Cursor          int32  `json:"cursor"`
}

func (q *Queries) GetChatRoomActionTypesUseKeysetPaginate(ctx context.Context, arg GetChatRoomActionTypesUseKeysetPaginateParams) ([]ChatRoomActionType, error) {
	rows, err := q.db.Query(ctx, getChatRoomActionTypesUseKeysetPaginate,
		arg.Limit,
		arg.WhereLikeName,
		arg.SearchName,
		arg.CursorDirection,
		arg.OrderMethod,
		arg.NameCursor,
		arg.Cursor,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ChatRoomActionType{}
	for rows.Next() {
		var i ChatRoomActionType
		if err := rows.Scan(
			&i.MChatRoomActionTypesPkey,
			&i.ChatRoomActionTypeID,
			&i.Name,
			&i.Key,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChatRoomActionTypesUseNumberedPaginate = `-- name: GetChatRoomActionTypesUseNumberedPaginate :many
SELECT m_chat_room_action_types_pkey, chat_room_action_type_id, name, key FROM m_chat_room_action_types
WHERE
	CASE WHEN $3::boolean = true THEN m_chat_room_action_types.name LIKE '%' || $4::text || '%' ELSE TRUE END
ORDER BY
	CASE WHEN $5::text = 'name' THEN name END ASC,
	CASE WHEN $5::text = 'r_name' THEN name END DESC,
	m_chat_room_action_types_pkey ASC
LIMIT $1 OFFSET $2
`

type GetChatRoomActionTypesUseNumberedPaginateParams struct {
	Limit         int32  `json:"limit"`
	Offset        int32  `json:"offset"`
	WhereLikeName bool   `json:"where_like_name"`
	SearchName    string `json:"search_name"`
	OrderMethod   string `json:"order_method"`
}

func (q *Queries) GetChatRoomActionTypesUseNumberedPaginate(ctx context.Context, arg GetChatRoomActionTypesUseNumberedPaginateParams) ([]ChatRoomActionType, error) {
	rows, err := q.db.Query(ctx, getChatRoomActionTypesUseNumberedPaginate,
		arg.Limit,
		arg.Offset,
		arg.WhereLikeName,
		arg.SearchName,
		arg.OrderMethod,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ChatRoomActionType{}
	for rows.Next() {
		var i ChatRoomActionType
		if err := rows.Scan(
			&i.MChatRoomActionTypesPkey,
			&i.ChatRoomActionTypeID,
			&i.Name,
			&i.Key,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPluralChatRoomActionTypes = `-- name: GetPluralChatRoomActionTypes :many
SELECT m_chat_room_action_types_pkey, chat_room_action_type_id, name, key FROM m_chat_room_action_types
WHERE
	chat_room_action_type_id = ANY($1::uuid[])
ORDER BY
	CASE WHEN $2::text = 'name' THEN name END ASC,
	CASE WHEN $2::text = 'r_name' THEN name END DESC,
	m_chat_room_action_types_pkey ASC
`

type GetPluralChatRoomActionTypesParams struct {
	ChatRoomActionTypeIds []uuid.UUID `json:"chat_room_action_type_ids"`
	OrderMethod           string      `json:"order_method"`
}

func (q *Queries) GetPluralChatRoomActionTypes(ctx context.Context, arg GetPluralChatRoomActionTypesParams) ([]ChatRoomActionType, error) {
	rows, err := q.db.Query(ctx, getPluralChatRoomActionTypes, arg.ChatRoomActionTypeIds, arg.OrderMethod)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ChatRoomActionType{}
	for rows.Next() {
		var i ChatRoomActionType
		if err := rows.Scan(
			&i.MChatRoomActionTypesPkey,
			&i.ChatRoomActionTypeID,
			&i.Name,
			&i.Key,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPluralChatRoomActionTypesUseNumberedPaginate = `-- name: GetPluralChatRoomActionTypesUseNumberedPaginate :many
SELECT m_chat_room_action_types_pkey, chat_room_action_type_id, name, key FROM m_chat_room_action_types
WHERE
	chat_room_action_type_id = ANY($3::uuid[])
ORDER BY
	CASE WHEN $4::text = 'name' THEN name END ASC,
	CASE WHEN $4::text = 'r_name' THEN name END DESC,
	m_chat_room_action_types_pkey ASC
LIMIT $1 OFFSET $2
`

type GetPluralChatRoomActionTypesUseNumberedPaginateParams struct {
	Limit                 int32       `json:"limit"`
	Offset                int32       `json:"offset"`
	ChatRoomActionTypeIds []uuid.UUID `json:"chat_room_action_type_ids"`
	OrderMethod           string      `json:"order_method"`
}

func (q *Queries) GetPluralChatRoomActionTypesUseNumberedPaginate(ctx context.Context, arg GetPluralChatRoomActionTypesUseNumberedPaginateParams) ([]ChatRoomActionType, error) {
	rows, err := q.db.Query(ctx, getPluralChatRoomActionTypesUseNumberedPaginate,
		arg.Limit,
		arg.Offset,
		arg.ChatRoomActionTypeIds,
		arg.OrderMethod,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ChatRoomActionType{}
	for rows.Next() {
		var i ChatRoomActionType
		if err := rows.Scan(
			&i.MChatRoomActionTypesPkey,
			&i.ChatRoomActionTypeID,
			&i.Name,
			&i.Key,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const pluralDeleteChatRoomActionTypes = `-- name: PluralDeleteChatRoomActionTypes :execrows
DELETE FROM m_chat_room_action_types WHERE chat_room_action_type_id = ANY($1::uuid[])
`

func (q *Queries) PluralDeleteChatRoomActionTypes(ctx context.Context, chatRoomActionTypeIds []uuid.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, pluralDeleteChatRoomActionTypes, chatRoomActionTypeIds)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const updateChatRoomActionType = `-- name: UpdateChatRoomActionType :one
UPDATE m_chat_room_action_types SET name = $2, key = $3 WHERE chat_room_action_type_id = $1 RETURNING m_chat_room_action_types_pkey, chat_room_action_type_id, name, key
`

type UpdateChatRoomActionTypeParams struct {
	ChatRoomActionTypeID uuid.UUID `json:"chat_room_action_type_id"`
	Name                 string    `json:"name"`
	Key                  string    `json:"key"`
}

func (q *Queries) UpdateChatRoomActionType(ctx context.Context, arg UpdateChatRoomActionTypeParams) (ChatRoomActionType, error) {
	row := q.db.QueryRow(ctx, updateChatRoomActionType, arg.ChatRoomActionTypeID, arg.Name, arg.Key)
	var i ChatRoomActionType
	err := row.Scan(
		&i.MChatRoomActionTypesPkey,
		&i.ChatRoomActionTypeID,
		&i.Name,
		&i.Key,
	)
	return i, err
}

const updateChatRoomActionTypeByKey = `-- name: UpdateChatRoomActionTypeByKey :one
UPDATE m_chat_room_action_types SET name = $2 WHERE key = $1 RETURNING m_chat_room_action_types_pkey, chat_room_action_type_id, name, key
`

type UpdateChatRoomActionTypeByKeyParams struct {
	Key  string `json:"key"`
	Name string `json:"name"`
}

func (q *Queries) UpdateChatRoomActionTypeByKey(ctx context.Context, arg UpdateChatRoomActionTypeByKeyParams) (ChatRoomActionType, error) {
	row := q.db.QueryRow(ctx, updateChatRoomActionTypeByKey, arg.Key, arg.Name)
	var i ChatRoomActionType
	err := row.Scan(
		&i.MChatRoomActionTypesPkey,
		&i.ChatRoomActionTypeID,
		&i.Name,
		&i.Key,
	)
	return i, err
}
