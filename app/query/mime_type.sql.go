// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: mime_type.sql

package query

import (
	"context"

	"github.com/google/uuid"
)

const countMimeTypes = `-- name: CountMimeTypes :one
SELECT COUNT(*) FROM m_mime_types
WHERE
	CASE WHEN $1::boolean = true THEN name LIKE '%' || $2::text || '%' ELSE TRUE END
`

type CountMimeTypesParams struct {
	WhereLikeName bool   `json:"where_like_name"`
	SearchName    string `json:"search_name"`
}

func (q *Queries) CountMimeTypes(ctx context.Context, arg CountMimeTypesParams) (int64, error) {
	row := q.db.QueryRow(ctx, countMimeTypes, arg.WhereLikeName, arg.SearchName)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createMimeType = `-- name: CreateMimeType :one
INSERT INTO m_mime_types (name, key, kind) VALUES ($1, $2, $3) RETURNING m_mime_types_pkey, mime_type_id, name, kind, key
`

type CreateMimeTypeParams struct {
	Name string `json:"name"`
	Key  string `json:"key"`
	Kind string `json:"kind"`
}

func (q *Queries) CreateMimeType(ctx context.Context, arg CreateMimeTypeParams) (MimeType, error) {
	row := q.db.QueryRow(ctx, createMimeType, arg.Name, arg.Key, arg.Kind)
	var i MimeType
	err := row.Scan(
		&i.MMimeTypesPkey,
		&i.MimeTypeID,
		&i.Name,
		&i.Kind,
		&i.Key,
	)
	return i, err
}

type CreateMimeTypesParams struct {
	Name string `json:"name"`
	Key  string `json:"key"`
	Kind string `json:"kind"`
}

const deleteMimeType = `-- name: DeleteMimeType :execrows
DELETE FROM m_mime_types WHERE mime_type_id = $1
`

func (q *Queries) DeleteMimeType(ctx context.Context, mimeTypeID uuid.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, deleteMimeType, mimeTypeID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const deleteMimeTypeByKey = `-- name: DeleteMimeTypeByKey :execrows
DELETE FROM m_mime_types WHERE key = $1
`

func (q *Queries) DeleteMimeTypeByKey(ctx context.Context, key string) (int64, error) {
	result, err := q.db.Exec(ctx, deleteMimeTypeByKey, key)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const findMimeTypeByID = `-- name: FindMimeTypeByID :one
SELECT m_mime_types_pkey, mime_type_id, name, kind, key FROM m_mime_types WHERE mime_type_id = $1
`

func (q *Queries) FindMimeTypeByID(ctx context.Context, mimeTypeID uuid.UUID) (MimeType, error) {
	row := q.db.QueryRow(ctx, findMimeTypeByID, mimeTypeID)
	var i MimeType
	err := row.Scan(
		&i.MMimeTypesPkey,
		&i.MimeTypeID,
		&i.Name,
		&i.Kind,
		&i.Key,
	)
	return i, err
}

const findMimeTypeByKey = `-- name: FindMimeTypeByKey :one
SELECT m_mime_types_pkey, mime_type_id, name, kind, key FROM m_mime_types WHERE key = $1
`

func (q *Queries) FindMimeTypeByKey(ctx context.Context, key string) (MimeType, error) {
	row := q.db.QueryRow(ctx, findMimeTypeByKey, key)
	var i MimeType
	err := row.Scan(
		&i.MMimeTypesPkey,
		&i.MimeTypeID,
		&i.Name,
		&i.Kind,
		&i.Key,
	)
	return i, err
}

const findMimeTypeByKind = `-- name: FindMimeTypeByKind :one
SELECT m_mime_types_pkey, mime_type_id, name, kind, key FROM m_mime_types WHERE kind = $1
`

func (q *Queries) FindMimeTypeByKind(ctx context.Context, kind string) (MimeType, error) {
	row := q.db.QueryRow(ctx, findMimeTypeByKind, kind)
	var i MimeType
	err := row.Scan(
		&i.MMimeTypesPkey,
		&i.MimeTypeID,
		&i.Name,
		&i.Kind,
		&i.Key,
	)
	return i, err
}

const getMimeTypes = `-- name: GetMimeTypes :many
SELECT m_mime_types_pkey, mime_type_id, name, kind, key FROM m_mime_types
WHERE
	CASE WHEN $1::boolean = true THEN m_mime_types.name LIKE '%' || $2::text || '%' ELSE TRUE END
ORDER BY
	CASE WHEN $3::text = 'name' THEN name END ASC,
	CASE WHEN $3::text = 'r_name' THEN name END DESC,
	m_mime_types_pkey ASC
`

type GetMimeTypesParams struct {
	WhereLikeName bool   `json:"where_like_name"`
	SearchName    string `json:"search_name"`
	OrderMethod   string `json:"order_method"`
}

func (q *Queries) GetMimeTypes(ctx context.Context, arg GetMimeTypesParams) ([]MimeType, error) {
	rows, err := q.db.Query(ctx, getMimeTypes, arg.WhereLikeName, arg.SearchName, arg.OrderMethod)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MimeType{}
	for rows.Next() {
		var i MimeType
		if err := rows.Scan(
			&i.MMimeTypesPkey,
			&i.MimeTypeID,
			&i.Name,
			&i.Kind,
			&i.Key,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMimeTypesUseKeysetPaginate = `-- name: GetMimeTypesUseKeysetPaginate :many
SELECT m_mime_types_pkey, mime_type_id, name, kind, key FROM m_mime_types
WHERE
	CASE WHEN $2::boolean = true THEN m_mime_types.name LIKE '%' || $3::text || '%' ELSE TRUE END
AND
	CASE $4::text
		WHEN 'next' THEN
			CASE $5::text
				WHEN 'name' THEN name > $6 OR (name = $6 AND m_mime_types_pkey > $7::int)
				WHEN 'r_name' THEN name < $6 OR (name = $6 AND m_mime_types_pkey > $7::int)
				ELSE m_mime_types_pkey > $7::int
			END
		WHEN 'prev' THEN
			CASE $5::text
				WHEN 'name' THEN name < $6 OR (name = $6 AND m_mime_types_pkey < $7::int)
				WHEN 'r_name' THEN name > $6 OR (name = $6 AND m_mime_types_pkey < $7::int)
				ELSE m_mime_types_pkey < $7::int
			END
	END
ORDER BY
	CASE WHEN $5::text = 'name' AND $4::text = 'next' THEN name END ASC,
	CASE WHEN $5::text = 'name' AND $4::text = 'prev' THEN name END DESC,
	CASE WHEN $5::text = 'r_name' AND $4::text = 'next' THEN name END DESC,
	CASE WHEN $5::text = 'r_name' AND $4::text = 'prev' THEN name END ASC,
	CASE WHEN $4::text = 'next' THEN m_mime_types_pkey END ASC,
	CASE WHEN $4::text = 'prev' THEN m_mime_types_pkey END DESC
LIMIT $1
`

type GetMimeTypesUseKeysetPaginateParams struct {
	Limit           int32  `json:"limit"`
	WhereLikeName   bool   `json:"where_like_name"`
	SearchName      string `json:"search_name"`
	CursorDirection string `json:"cursor_direction"`
	OrderMethod     string `json:"order_method"`
	NameCursor      string `json:"name_cursor"`
	Cursor          int32  `json:"cursor"`
}

func (q *Queries) GetMimeTypesUseKeysetPaginate(ctx context.Context, arg GetMimeTypesUseKeysetPaginateParams) ([]MimeType, error) {
	rows, err := q.db.Query(ctx, getMimeTypesUseKeysetPaginate,
		arg.Limit,
		arg.WhereLikeName,
		arg.SearchName,
		arg.CursorDirection,
		arg.OrderMethod,
		arg.NameCursor,
		arg.Cursor,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MimeType{}
	for rows.Next() {
		var i MimeType
		if err := rows.Scan(
			&i.MMimeTypesPkey,
			&i.MimeTypeID,
			&i.Name,
			&i.Kind,
			&i.Key,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMimeTypesUseNumberedPaginate = `-- name: GetMimeTypesUseNumberedPaginate :many
SELECT m_mime_types_pkey, mime_type_id, name, kind, key FROM m_mime_types
WHERE
	CASE WHEN $3::boolean = true THEN m_mime_types.name LIKE '%' || $4::text || '%' ELSE TRUE END
ORDER BY
	CASE WHEN $5::text = 'name' THEN name END ASC,
	CASE WHEN $5::text = 'r_name' THEN name END DESC,
	m_mime_types_pkey ASC
LIMIT $1 OFFSET $2
`

type GetMimeTypesUseNumberedPaginateParams struct {
	Limit         int32  `json:"limit"`
	Offset        int32  `json:"offset"`
	WhereLikeName bool   `json:"where_like_name"`
	SearchName    string `json:"search_name"`
	OrderMethod   string `json:"order_method"`
}

func (q *Queries) GetMimeTypesUseNumberedPaginate(ctx context.Context, arg GetMimeTypesUseNumberedPaginateParams) ([]MimeType, error) {
	rows, err := q.db.Query(ctx, getMimeTypesUseNumberedPaginate,
		arg.Limit,
		arg.Offset,
		arg.WhereLikeName,
		arg.SearchName,
		arg.OrderMethod,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MimeType{}
	for rows.Next() {
		var i MimeType
		if err := rows.Scan(
			&i.MMimeTypesPkey,
			&i.MimeTypeID,
			&i.Name,
			&i.Kind,
			&i.Key,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPluralMimeTypes = `-- name: GetPluralMimeTypes :many
SELECT m_mime_types_pkey, mime_type_id, name, kind, key FROM m_mime_types
WHERE mime_type_id = ANY($1::uuid[])
ORDER BY
	CASE WHEN $2::text = 'name' THEN name END ASC,
	CASE WHEN $2::text = 'r_name' THEN name END DESC,
	m_mime_types_pkey ASC
`

type GetPluralMimeTypesParams struct {
	MimeTypeIds []uuid.UUID `json:"mime_type_ids"`
	OrderMethod string      `json:"order_method"`
}

func (q *Queries) GetPluralMimeTypes(ctx context.Context, arg GetPluralMimeTypesParams) ([]MimeType, error) {
	rows, err := q.db.Query(ctx, getPluralMimeTypes, arg.MimeTypeIds, arg.OrderMethod)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MimeType{}
	for rows.Next() {
		var i MimeType
		if err := rows.Scan(
			&i.MMimeTypesPkey,
			&i.MimeTypeID,
			&i.Name,
			&i.Kind,
			&i.Key,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPluralMimeTypesUseNumberedPaginate = `-- name: GetPluralMimeTypesUseNumberedPaginate :many
SELECT m_mime_types_pkey, mime_type_id, name, kind, key FROM m_mime_types
WHERE mime_type_id = ANY($3::uuid[])
ORDER BY
	CASE WHEN $4::text = 'name' THEN name END ASC,
	CASE WHEN $4::text = 'r_name' THEN name END DESC,
	m_mime_types_pkey ASC
LIMIT $1 OFFSET $2
`

type GetPluralMimeTypesUseNumberedPaginateParams struct {
	Limit       int32       `json:"limit"`
	Offset      int32       `json:"offset"`
	MimeTypeIds []uuid.UUID `json:"mime_type_ids"`
	OrderMethod string      `json:"order_method"`
}

func (q *Queries) GetPluralMimeTypesUseNumberedPaginate(ctx context.Context, arg GetPluralMimeTypesUseNumberedPaginateParams) ([]MimeType, error) {
	rows, err := q.db.Query(ctx, getPluralMimeTypesUseNumberedPaginate,
		arg.Limit,
		arg.Offset,
		arg.MimeTypeIds,
		arg.OrderMethod,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MimeType{}
	for rows.Next() {
		var i MimeType
		if err := rows.Scan(
			&i.MMimeTypesPkey,
			&i.MimeTypeID,
			&i.Name,
			&i.Kind,
			&i.Key,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const pluralDeleteMimeTypes = `-- name: PluralDeleteMimeTypes :execrows
DELETE FROM m_mime_types WHERE mime_type_id = ANY($1::uuid[])
`

func (q *Queries) PluralDeleteMimeTypes(ctx context.Context, mimeTypeIds []uuid.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, pluralDeleteMimeTypes, mimeTypeIds)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const updateMimeType = `-- name: UpdateMimeType :one
UPDATE m_mime_types SET name = $2, key = $3, kind = $4 WHERE mime_type_id = $1 RETURNING m_mime_types_pkey, mime_type_id, name, kind, key
`

type UpdateMimeTypeParams struct {
	MimeTypeID uuid.UUID `json:"mime_type_id"`
	Name       string    `json:"name"`
	Key        string    `json:"key"`
	Kind       string    `json:"kind"`
}

func (q *Queries) UpdateMimeType(ctx context.Context, arg UpdateMimeTypeParams) (MimeType, error) {
	row := q.db.QueryRow(ctx, updateMimeType,
		arg.MimeTypeID,
		arg.Name,
		arg.Key,
		arg.Kind,
	)
	var i MimeType
	err := row.Scan(
		&i.MMimeTypesPkey,
		&i.MimeTypeID,
		&i.Name,
		&i.Kind,
		&i.Key,
	)
	return i, err
}

const updateMimeTypeByKey = `-- name: UpdateMimeTypeByKey :one
UPDATE m_mime_types SET name = $2, kind = $3 WHERE key = $1 RETURNING m_mime_types_pkey, mime_type_id, name, kind, key
`

type UpdateMimeTypeByKeyParams struct {
	Key  string `json:"key"`
	Name string `json:"name"`
	Kind string `json:"kind"`
}

func (q *Queries) UpdateMimeTypeByKey(ctx context.Context, arg UpdateMimeTypeByKeyParams) (MimeType, error) {
	row := q.db.QueryRow(ctx, updateMimeTypeByKey, arg.Key, arg.Name, arg.Kind)
	var i MimeType
	err := row.Scan(
		&i.MMimeTypesPkey,
		&i.MimeTypeID,
		&i.Name,
		&i.Kind,
		&i.Key,
	)
	return i, err
}
