// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: event_type.sql

package query

import (
	"context"

	"github.com/google/uuid"
)

const createEventType = `-- name: CreateEventType :one
INSERT INTO m_event_types (name, key, color) VALUES ($1, $2, $3) RETURNING m_event_types_pkey, event_type_id, name, key, color
`

type CreateEventTypeParams struct {
	Name  string `json:"name"`
	Key   string `json:"key"`
	Color string `json:"color"`
}

func (q *Queries) CreateEventType(ctx context.Context, arg CreateEventTypeParams) (EventType, error) {
	row := q.db.QueryRow(ctx, createEventType, arg.Name, arg.Key, arg.Color)
	var i EventType
	err := row.Scan(
		&i.MEventTypesPkey,
		&i.EventTypeID,
		&i.Name,
		&i.Key,
		&i.Color,
	)
	return i, err
}

type CreateEventTypesParams struct {
	Name  string `json:"name"`
	Key   string `json:"key"`
	Color string `json:"color"`
}

const deleteEventType = `-- name: DeleteEventType :exec
DELETE FROM m_event_types WHERE event_type_id = $1
`

func (q *Queries) DeleteEventType(ctx context.Context, eventTypeID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteEventType, eventTypeID)
	return err
}

const deleteEventTypeByKey = `-- name: DeleteEventTypeByKey :exec
DELETE FROM m_event_types WHERE key = $1
`

func (q *Queries) DeleteEventTypeByKey(ctx context.Context, key string) error {
	_, err := q.db.Exec(ctx, deleteEventTypeByKey, key)
	return err
}

const findEventTypeByID = `-- name: FindEventTypeByID :one
SELECT m_event_types_pkey, event_type_id, name, key, color FROM m_event_types WHERE event_type_id = $1
`

func (q *Queries) FindEventTypeByID(ctx context.Context, eventTypeID uuid.UUID) (EventType, error) {
	row := q.db.QueryRow(ctx, findEventTypeByID, eventTypeID)
	var i EventType
	err := row.Scan(
		&i.MEventTypesPkey,
		&i.EventTypeID,
		&i.Name,
		&i.Key,
		&i.Color,
	)
	return i, err
}

const findEventTypeByKey = `-- name: FindEventTypeByKey :one
SELECT m_event_types_pkey, event_type_id, name, key, color FROM m_event_types WHERE key = $1
`

func (q *Queries) FindEventTypeByKey(ctx context.Context, key string) (EventType, error) {
	row := q.db.QueryRow(ctx, findEventTypeByKey, key)
	var i EventType
	err := row.Scan(
		&i.MEventTypesPkey,
		&i.EventTypeID,
		&i.Name,
		&i.Key,
		&i.Color,
	)
	return i, err
}

const getEventTypes = `-- name: GetEventTypes :many
SELECT m_event_types_pkey, event_type_id, name, key, color FROM m_event_types
ORDER BY
	CASE WHEN $3::text = 'name' THEN name END ASC,
	m_event_types_pkey DESC
LIMIT $1 OFFSET $2
`

type GetEventTypesParams struct {
	Limit       int32  `json:"limit"`
	Offset      int32  `json:"offset"`
	OrderMethod string `json:"order_method"`
}

func (q *Queries) GetEventTypes(ctx context.Context, arg GetEventTypesParams) ([]EventType, error) {
	rows, err := q.db.Query(ctx, getEventTypes, arg.Limit, arg.Offset, arg.OrderMethod)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EventType{}
	for rows.Next() {
		var i EventType
		if err := rows.Scan(
			&i.MEventTypesPkey,
			&i.EventTypeID,
			&i.Name,
			&i.Key,
			&i.Color,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEventType = `-- name: UpdateEventType :one
UPDATE m_event_types SET name = $2, color = $3 WHERE event_type_id = $1 RETURNING m_event_types_pkey, event_type_id, name, key, color
`

type UpdateEventTypeParams struct {
	EventTypeID uuid.UUID `json:"event_type_id"`
	Name        string    `json:"name"`
	Color       string    `json:"color"`
}

func (q *Queries) UpdateEventType(ctx context.Context, arg UpdateEventTypeParams) (EventType, error) {
	row := q.db.QueryRow(ctx, updateEventType, arg.EventTypeID, arg.Name, arg.Color)
	var i EventType
	err := row.Scan(
		&i.MEventTypesPkey,
		&i.EventTypeID,
		&i.Name,
		&i.Key,
		&i.Color,
	)
	return i, err
}

const updateEventTypeByKey = `-- name: UpdateEventTypeByKey :one
UPDATE m_event_types SET name = $2, color = $3 WHERE key = $1 RETURNING m_event_types_pkey, event_type_id, name, key, color
`

type UpdateEventTypeByKeyParams struct {
	Key   string `json:"key"`
	Name  string `json:"name"`
	Color string `json:"color"`
}

func (q *Queries) UpdateEventTypeByKey(ctx context.Context, arg UpdateEventTypeByKeyParams) (EventType, error) {
	row := q.db.QueryRow(ctx, updateEventTypeByKey, arg.Key, arg.Name, arg.Color)
	var i EventType
	err := row.Scan(
		&i.MEventTypesPkey,
		&i.EventTypeID,
		&i.Name,
		&i.Key,
		&i.Color,
	)
	return i, err
}

const updateEventTypeKey = `-- name: UpdateEventTypeKey :one
UPDATE m_event_types SET key = $2 WHERE event_type_id = $1 RETURNING m_event_types_pkey, event_type_id, name, key, color
`

type UpdateEventTypeKeyParams struct {
	EventTypeID uuid.UUID `json:"event_type_id"`
	Key         string    `json:"key"`
}

func (q *Queries) UpdateEventTypeKey(ctx context.Context, arg UpdateEventTypeKeyParams) (EventType, error) {
	row := q.db.QueryRow(ctx, updateEventTypeKey, arg.EventTypeID, arg.Key)
	var i EventType
	err := row.Scan(
		&i.MEventTypesPkey,
		&i.EventTypeID,
		&i.Name,
		&i.Key,
		&i.Color,
	)
	return i, err
}
