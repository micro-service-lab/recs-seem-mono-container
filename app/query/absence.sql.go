// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: absence.sql

package query

import (
	"context"

	"github.com/google/uuid"
)

const countAbsences = `-- name: CountAbsences :one
SELECT COUNT(*) FROM t_absences
`

func (q *Queries) CountAbsences(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countAbsences)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAbsence = `-- name: CreateAbsence :one
INSERT INTO t_absences (attendance_id) VALUES ($1) RETURNING t_absences_pkey, absence_id, attendance_id
`

func (q *Queries) CreateAbsence(ctx context.Context, attendanceID uuid.UUID) (Absence, error) {
	row := q.db.QueryRow(ctx, createAbsence, attendanceID)
	var i Absence
	err := row.Scan(&i.TAbsencesPkey, &i.AbsenceID, &i.AttendanceID)
	return i, err
}

const deleteAbsence = `-- name: DeleteAbsence :exec
DELETE FROM t_absences WHERE absence_id = $1
`

func (q *Queries) DeleteAbsence(ctx context.Context, absenceID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteAbsence, absenceID)
	return err
}

const findAbsenceByID = `-- name: FindAbsenceByID :one
SELECT t_absences_pkey, absence_id, attendance_id FROM t_absences WHERE absence_id = $1
`

func (q *Queries) FindAbsenceByID(ctx context.Context, absenceID uuid.UUID) (Absence, error) {
	row := q.db.QueryRow(ctx, findAbsenceByID, absenceID)
	var i Absence
	err := row.Scan(&i.TAbsencesPkey, &i.AbsenceID, &i.AttendanceID)
	return i, err
}

const getAbsences = `-- name: GetAbsences :many
SELECT t_absences_pkey, absence_id, attendance_id FROM t_absences
ORDER BY
	t_absences_pkey DESC
LIMIT $1 OFFSET $2
`

type GetAbsencesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAbsences(ctx context.Context, arg GetAbsencesParams) ([]Absence, error) {
	rows, err := q.db.Query(ctx, getAbsences, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Absence{}
	for rows.Next() {
		var i Absence
		if err := rows.Scan(&i.TAbsencesPkey, &i.AbsenceID, &i.AttendanceID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
