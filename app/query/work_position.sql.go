// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: work_position.sql

package query

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const countWorkPositions = `-- name: CountWorkPositions :one
SELECT COUNT(*) FROM m_work_positions
WHERE
	CASE WHEN $1::boolean = true THEN name LIKE '%' || $2::text || '%' ELSE TRUE END
AND
	CASE WHEN $3::boolean = true THEN m_work_positions.organization_id = ANY($4::uuid[]) ELSE TRUE END
`

type CountWorkPositionsParams struct {
	WhereLikeName         bool        `json:"where_like_name"`
	SearchName            string      `json:"search_name"`
	WhereInOrganizationID bool        `json:"where_in_organization_id"`
	OrganizationIds       []uuid.UUID `json:"organization_ids"`
}

func (q *Queries) CountWorkPositions(ctx context.Context, arg CountWorkPositionsParams) (int64, error) {
	row := q.db.QueryRow(ctx, countWorkPositions,
		arg.WhereLikeName,
		arg.SearchName,
		arg.WhereInOrganizationID,
		arg.OrganizationIds,
	)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createWorkPosition = `-- name: CreateWorkPosition :one
INSERT INTO m_work_positions (name, organization_id, description, created_at, updated_at) VALUES ($1, $2, $3, $4, $5) RETURNING m_work_positions_pkey, work_position_id, organization_id, name, description, created_at, updated_at
`

type CreateWorkPositionParams struct {
	Name           string    `json:"name"`
	OrganizationID uuid.UUID `json:"organization_id"`
	Description    string    `json:"description"`
	CreatedAt      time.Time `json:"created_at"`
	UpdatedAt      time.Time `json:"updated_at"`
}

func (q *Queries) CreateWorkPosition(ctx context.Context, arg CreateWorkPositionParams) (WorkPosition, error) {
	row := q.db.QueryRow(ctx, createWorkPosition,
		arg.Name,
		arg.OrganizationID,
		arg.Description,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i WorkPosition
	err := row.Scan(
		&i.MWorkPositionsPkey,
		&i.WorkPositionID,
		&i.OrganizationID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

type CreateWorkPositionsParams struct {
	Name           string    `json:"name"`
	OrganizationID uuid.UUID `json:"organization_id"`
	Description    string    `json:"description"`
	CreatedAt      time.Time `json:"created_at"`
	UpdatedAt      time.Time `json:"updated_at"`
}

const deleteWorkPosition = `-- name: DeleteWorkPosition :execrows
DELETE FROM m_work_positions WHERE work_position_id = $1
`

func (q *Queries) DeleteWorkPosition(ctx context.Context, workPositionID uuid.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, deleteWorkPosition, workPositionID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const findWorkPositionByID = `-- name: FindWorkPositionByID :one
SELECT m_work_positions_pkey, work_position_id, organization_id, name, description, created_at, updated_at FROM m_work_positions WHERE work_position_id = $1
`

func (q *Queries) FindWorkPositionByID(ctx context.Context, workPositionID uuid.UUID) (WorkPosition, error) {
	row := q.db.QueryRow(ctx, findWorkPositionByID, workPositionID)
	var i WorkPosition
	err := row.Scan(
		&i.MWorkPositionsPkey,
		&i.WorkPositionID,
		&i.OrganizationID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPluckWorkPositions = `-- name: GetPluckWorkPositions :many
SELECT work_position_id, name FROM m_work_positions
WHERE
	work_position_id = ANY($3::uuid[])
ORDER BY
	m_work_positions_pkey ASC
LIMIT $1 OFFSET $2
`

type GetPluckWorkPositionsParams struct {
	Limit           int32       `json:"limit"`
	Offset          int32       `json:"offset"`
	WorkPositionIds []uuid.UUID `json:"work_position_ids"`
}

type GetPluckWorkPositionsRow struct {
	WorkPositionID uuid.UUID `json:"work_position_id"`
	Name           string    `json:"name"`
}

func (q *Queries) GetPluckWorkPositions(ctx context.Context, arg GetPluckWorkPositionsParams) ([]GetPluckWorkPositionsRow, error) {
	rows, err := q.db.Query(ctx, getPluckWorkPositions, arg.Limit, arg.Offset, arg.WorkPositionIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPluckWorkPositionsRow{}
	for rows.Next() {
		var i GetPluckWorkPositionsRow
		if err := rows.Scan(&i.WorkPositionID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWorkPositions = `-- name: GetWorkPositions :many
SELECT m_work_positions_pkey, work_position_id, organization_id, name, description, created_at, updated_at FROM m_work_positions
WHERE
	CASE WHEN $1::boolean = true THEN m_work_positions.name LIKE '%' || $2::text || '%' ELSE TRUE END
AND
	CASE WHEN $3::boolean = true THEN m_work_positions.organization_id = ANY($4::uuid[]) ELSE TRUE END
ORDER BY
	CASE WHEN $5::text = 'name' THEN m_work_positions.name END ASC,
	CASE WHEN $5::text = 'r_name' THEN m_work_positions.name END DESC,
	m_work_positions_pkey ASC
`

type GetWorkPositionsParams struct {
	WhereLikeName         bool        `json:"where_like_name"`
	SearchName            string      `json:"search_name"`
	WhereInOrganizationID bool        `json:"where_in_organization_id"`
	OrganizationIds       []uuid.UUID `json:"organization_ids"`
	OrderMethod           string      `json:"order_method"`
}

func (q *Queries) GetWorkPositions(ctx context.Context, arg GetWorkPositionsParams) ([]WorkPosition, error) {
	rows, err := q.db.Query(ctx, getWorkPositions,
		arg.WhereLikeName,
		arg.SearchName,
		arg.WhereInOrganizationID,
		arg.OrganizationIds,
		arg.OrderMethod,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []WorkPosition{}
	for rows.Next() {
		var i WorkPosition
		if err := rows.Scan(
			&i.MWorkPositionsPkey,
			&i.WorkPositionID,
			&i.OrganizationID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWorkPositionsUseKeysetPaginate = `-- name: GetWorkPositionsUseKeysetPaginate :many
SELECT m_work_positions_pkey, work_position_id, organization_id, name, description, created_at, updated_at FROM m_work_positions
WHERE
	CASE WHEN $2::boolean = true THEN m_work_positions.name LIKE '%' || $3::text || '%' ELSE TRUE END
AND
	CASE WHEN $4::boolean = true THEN m_work_positions.organization_id = ANY($5::uuid[]) ELSE TRUE END
AND
	CASE $6::text
		WHEN 'next' THEN
			CASE $7::text
				WHEN 'name' THEN name > $8 OR (name = $8 AND m_work_positions_pkey > $9::int)
				WHEN 'r_name' THEN name < $8 OR (name = $8 AND m_work_positions_pkey > $9::int)
				ELSE m_work_positions_pkey > $9::int
			END
		WHEN 'prev' THEN
			CASE $7::text
				WHEN 'name' THEN name < $8 OR (name = $8 AND m_work_positions_pkey < $9::int)
				WHEN 'r_name' THEN name > $8 OR (name = $8 AND m_work_positions_pkey < $9::int)
				ELSE m_work_positions_pkey < $9::int
			END
	END
ORDER BY
	CASE WHEN $7::text = 'name' AND $6::text = 'next' THEN m_work_positions.name END ASC,
	CASE WHEN $7::text = 'name' AND $6::text = 'prev' THEN m_work_positions.name END DESC,
	CASE WHEN $7::text = 'r_name' AND $6::text = 'next' THEN m_work_positions.name END DESC,
	CASE WHEN $7::text = 'r_name' AND $6::text = 'prev' THEN m_work_positions.name END ASC,
	CASE WHEN $6::text = 'next' THEN m_work_positions_pkey END ASC,
	CASE WHEN $6::text = 'prev' THEN m_work_positions_pkey END DESC
LIMIT $1
`

type GetWorkPositionsUseKeysetPaginateParams struct {
	Limit                 int32       `json:"limit"`
	WhereLikeName         bool        `json:"where_like_name"`
	SearchName            string      `json:"search_name"`
	WhereInOrganizationID bool        `json:"where_in_organization_id"`
	OrganizationIds       []uuid.UUID `json:"organization_ids"`
	CursorDirection       string      `json:"cursor_direction"`
	OrderMethod           string      `json:"order_method"`
	NameCursor            string      `json:"name_cursor"`
	Cursor                int32       `json:"cursor"`
}

func (q *Queries) GetWorkPositionsUseKeysetPaginate(ctx context.Context, arg GetWorkPositionsUseKeysetPaginateParams) ([]WorkPosition, error) {
	rows, err := q.db.Query(ctx, getWorkPositionsUseKeysetPaginate,
		arg.Limit,
		arg.WhereLikeName,
		arg.SearchName,
		arg.WhereInOrganizationID,
		arg.OrganizationIds,
		arg.CursorDirection,
		arg.OrderMethod,
		arg.NameCursor,
		arg.Cursor,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []WorkPosition{}
	for rows.Next() {
		var i WorkPosition
		if err := rows.Scan(
			&i.MWorkPositionsPkey,
			&i.WorkPositionID,
			&i.OrganizationID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWorkPositionsUseNumberedPaginate = `-- name: GetWorkPositionsUseNumberedPaginate :many
SELECT m_work_positions_pkey, work_position_id, organization_id, name, description, created_at, updated_at FROM m_work_positions
WHERE
	CASE WHEN $3::boolean = true THEN m_work_positions.name LIKE '%' || $4::text || '%' ELSE TRUE END
AND
	CASE WHEN $5::boolean = true THEN m_work_positions.organization_id = ANY($6::uuid[]) ELSE TRUE END
ORDER BY
	CASE WHEN $7::text = 'name' THEN m_work_positions.name END ASC,
	CASE WHEN $7::text = 'r_name' THEN m_work_positions.name END DESC,
	m_work_positions_pkey ASC
LIMIT $1 OFFSET $2
`

type GetWorkPositionsUseNumberedPaginateParams struct {
	Limit                 int32       `json:"limit"`
	Offset                int32       `json:"offset"`
	WhereLikeName         bool        `json:"where_like_name"`
	SearchName            string      `json:"search_name"`
	WhereInOrganizationID bool        `json:"where_in_organization_id"`
	OrganizationIds       []uuid.UUID `json:"organization_ids"`
	OrderMethod           string      `json:"order_method"`
}

func (q *Queries) GetWorkPositionsUseNumberedPaginate(ctx context.Context, arg GetWorkPositionsUseNumberedPaginateParams) ([]WorkPosition, error) {
	rows, err := q.db.Query(ctx, getWorkPositionsUseNumberedPaginate,
		arg.Limit,
		arg.Offset,
		arg.WhereLikeName,
		arg.SearchName,
		arg.WhereInOrganizationID,
		arg.OrganizationIds,
		arg.OrderMethod,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []WorkPosition{}
	for rows.Next() {
		var i WorkPosition
		if err := rows.Scan(
			&i.MWorkPositionsPkey,
			&i.WorkPositionID,
			&i.OrganizationID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const pluralDeleteWorkPositions = `-- name: PluralDeleteWorkPositions :execrows
DELETE FROM m_work_positions WHERE work_position_id = ANY($1::uuid[])
`

func (q *Queries) PluralDeleteWorkPositions(ctx context.Context, dollar_1 []uuid.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, pluralDeleteWorkPositions, dollar_1)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const updateWorkPosition = `-- name: UpdateWorkPosition :one
UPDATE m_work_positions SET name = $2, description = $3, updated_at = $4 WHERE work_position_id = $1 RETURNING m_work_positions_pkey, work_position_id, organization_id, name, description, created_at, updated_at
`

type UpdateWorkPositionParams struct {
	WorkPositionID uuid.UUID `json:"work_position_id"`
	Name           string    `json:"name"`
	Description    string    `json:"description"`
	UpdatedAt      time.Time `json:"updated_at"`
}

func (q *Queries) UpdateWorkPosition(ctx context.Context, arg UpdateWorkPositionParams) (WorkPosition, error) {
	row := q.db.QueryRow(ctx, updateWorkPosition,
		arg.WorkPositionID,
		arg.Name,
		arg.Description,
		arg.UpdatedAt,
	)
	var i WorkPosition
	err := row.Scan(
		&i.MWorkPositionsPkey,
		&i.WorkPositionID,
		&i.OrganizationID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
