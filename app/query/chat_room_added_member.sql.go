// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: chat_room_added_member.sql

package query

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const countMembersOnChatRoomAddMemberAction = `-- name: CountMembersOnChatRoomAddMemberAction :one
SELECT COUNT(*) FROM t_chat_room_added_members WHERE chat_room_add_member_action_id = $1
`

func (q *Queries) CountMembersOnChatRoomAddMemberAction(ctx context.Context, chatRoomAddMemberActionID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countMembersOnChatRoomAddMemberAction, chatRoomAddMemberActionID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createChatRoomAddedMember = `-- name: CreateChatRoomAddedMember :one
INSERT INTO t_chat_room_added_members (member_id, chat_room_add_member_action_id) VALUES ($1, $2) RETURNING t_chat_room_added_members_pkey, chat_room_add_member_action_id, member_id
`

type CreateChatRoomAddedMemberParams struct {
	MemberID                  pgtype.UUID `json:"member_id"`
	ChatRoomAddMemberActionID uuid.UUID   `json:"chat_room_add_member_action_id"`
}

func (q *Queries) CreateChatRoomAddedMember(ctx context.Context, arg CreateChatRoomAddedMemberParams) (ChatRoomAddedMember, error) {
	row := q.db.QueryRow(ctx, createChatRoomAddedMember, arg.MemberID, arg.ChatRoomAddMemberActionID)
	var i ChatRoomAddedMember
	err := row.Scan(&i.TChatRoomAddedMembersPkey, &i.ChatRoomAddMemberActionID, &i.MemberID)
	return i, err
}

type CreateChatRoomAddedMembersParams struct {
	MemberID                  pgtype.UUID `json:"member_id"`
	ChatRoomAddMemberActionID uuid.UUID   `json:"chat_room_add_member_action_id"`
}

const deleteChatRoomAddedMember = `-- name: DeleteChatRoomAddedMember :execrows
DELETE FROM t_chat_room_added_members WHERE member_id = $1 AND chat_room_add_member_action_id = $2
`

type DeleteChatRoomAddedMemberParams struct {
	MemberID                  pgtype.UUID `json:"member_id"`
	ChatRoomAddMemberActionID uuid.UUID   `json:"chat_room_add_member_action_id"`
}

func (q *Queries) DeleteChatRoomAddedMember(ctx context.Context, arg DeleteChatRoomAddedMemberParams) (int64, error) {
	result, err := q.db.Exec(ctx, deleteChatRoomAddedMember, arg.MemberID, arg.ChatRoomAddMemberActionID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const deleteChatRoomAddedMembersOnChatRoomAddMemberAction = `-- name: DeleteChatRoomAddedMembersOnChatRoomAddMemberAction :execrows
DELETE FROM t_chat_room_added_members WHERE chat_room_add_member_action_id = $1
`

func (q *Queries) DeleteChatRoomAddedMembersOnChatRoomAddMemberAction(ctx context.Context, chatRoomAddMemberActionID uuid.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, deleteChatRoomAddedMembersOnChatRoomAddMemberAction, chatRoomAddMemberActionID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const deleteChatRoomAddedMembersOnChatRoomAddMemberActions = `-- name: DeleteChatRoomAddedMembersOnChatRoomAddMemberActions :execrows
DELETE FROM t_chat_room_added_members WHERE chat_room_add_member_action_id = ANY($1::uuid[])
`

func (q *Queries) DeleteChatRoomAddedMembersOnChatRoomAddMemberActions(ctx context.Context, chatRoomAddMemberActionIds []uuid.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, deleteChatRoomAddedMembersOnChatRoomAddMemberActions, chatRoomAddMemberActionIds)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const deleteChatRoomAddedMembersOnMember = `-- name: DeleteChatRoomAddedMembersOnMember :execrows
DELETE FROM t_chat_room_added_members WHERE member_id = $1
`

func (q *Queries) DeleteChatRoomAddedMembersOnMember(ctx context.Context, memberID pgtype.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, deleteChatRoomAddedMembersOnMember, memberID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const deleteChatRoomAddedMembersOnMembers = `-- name: DeleteChatRoomAddedMembersOnMembers :execrows
DELETE FROM t_chat_room_added_members WHERE member_id = ANY($1::uuid[])
`

func (q *Queries) DeleteChatRoomAddedMembersOnMembers(ctx context.Context, memberIds []uuid.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, deleteChatRoomAddedMembersOnMembers, memberIds)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getMembersOnChatRoomAddMemberAction = `-- name: GetMembersOnChatRoomAddMemberAction :many
SELECT t_chat_room_added_members.t_chat_room_added_members_pkey, t_chat_room_added_members.chat_room_add_member_action_id, t_chat_room_added_members.member_id, m_members.name member_name, m_members.first_name member_first_name, m_members.last_name member_last_name, m_members.email member_email,
m_members.profile_image_id member_profile_image_id
FROM t_chat_room_added_members
LEFT JOIN m_members ON t_chat_room_added_members.member_id = m_members.member_id
WHERE chat_room_add_member_action_id = $1
ORDER BY
	t_chat_room_added_members_pkey ASC
`

type GetMembersOnChatRoomAddMemberActionRow struct {
	TChatRoomAddedMembersPkey pgtype.Int8 `json:"t_chat_room_added_members_pkey"`
	ChatRoomAddMemberActionID uuid.UUID   `json:"chat_room_add_member_action_id"`
	MemberID                  pgtype.UUID `json:"member_id"`
	MemberName                pgtype.Text `json:"member_name"`
	MemberFirstName           pgtype.Text `json:"member_first_name"`
	MemberLastName            pgtype.Text `json:"member_last_name"`
	MemberEmail               pgtype.Text `json:"member_email"`
	MemberProfileImageID      pgtype.UUID `json:"member_profile_image_id"`
}

func (q *Queries) GetMembersOnChatRoomAddMemberAction(ctx context.Context, chatRoomAddMemberActionID uuid.UUID) ([]GetMembersOnChatRoomAddMemberActionRow, error) {
	rows, err := q.db.Query(ctx, getMembersOnChatRoomAddMemberAction, chatRoomAddMemberActionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetMembersOnChatRoomAddMemberActionRow{}
	for rows.Next() {
		var i GetMembersOnChatRoomAddMemberActionRow
		if err := rows.Scan(
			&i.TChatRoomAddedMembersPkey,
			&i.ChatRoomAddMemberActionID,
			&i.MemberID,
			&i.MemberName,
			&i.MemberFirstName,
			&i.MemberLastName,
			&i.MemberEmail,
			&i.MemberProfileImageID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMembersOnChatRoomAddMemberActionUseKeysetPaginate = `-- name: GetMembersOnChatRoomAddMemberActionUseKeysetPaginate :many
SELECT t_chat_room_added_members.t_chat_room_added_members_pkey, t_chat_room_added_members.chat_room_add_member_action_id, t_chat_room_added_members.member_id, m_members.name member_name, m_members.first_name member_first_name, m_members.last_name member_last_name, m_members.email member_email,
m_members.profile_image_id member_profile_image_id
FROM t_chat_room_added_members
LEFT JOIN m_members ON t_chat_room_added_members.member_id = m_members.member_id
WHERE chat_room_add_member_action_id = $1
AND CASE $3::text
	WHEN 'next' THEN
			t_chat_room_added_members_pkey > $4::int
	WHEN 'prev' THEN
			t_chat_room_added_members_pkey < $4::int
END
ORDER BY
	CASE WHEN $3::text = 'next' THEN t_chat_room_added_members_pkey END ASC,
	CASE WHEN $3::text = 'prev' THEN t_chat_room_added_members_pkey END DESC
LIMIT $2
`

type GetMembersOnChatRoomAddMemberActionUseKeysetPaginateParams struct {
	ChatRoomAddMemberActionID uuid.UUID `json:"chat_room_add_member_action_id"`
	Limit                     int32     `json:"limit"`
	CursorDirection           string    `json:"cursor_direction"`
	Cursor                    int32     `json:"cursor"`
}

type GetMembersOnChatRoomAddMemberActionUseKeysetPaginateRow struct {
	TChatRoomAddedMembersPkey pgtype.Int8 `json:"t_chat_room_added_members_pkey"`
	ChatRoomAddMemberActionID uuid.UUID   `json:"chat_room_add_member_action_id"`
	MemberID                  pgtype.UUID `json:"member_id"`
	MemberName                pgtype.Text `json:"member_name"`
	MemberFirstName           pgtype.Text `json:"member_first_name"`
	MemberLastName            pgtype.Text `json:"member_last_name"`
	MemberEmail               pgtype.Text `json:"member_email"`
	MemberProfileImageID      pgtype.UUID `json:"member_profile_image_id"`
}

func (q *Queries) GetMembersOnChatRoomAddMemberActionUseKeysetPaginate(ctx context.Context, arg GetMembersOnChatRoomAddMemberActionUseKeysetPaginateParams) ([]GetMembersOnChatRoomAddMemberActionUseKeysetPaginateRow, error) {
	rows, err := q.db.Query(ctx, getMembersOnChatRoomAddMemberActionUseKeysetPaginate,
		arg.ChatRoomAddMemberActionID,
		arg.Limit,
		arg.CursorDirection,
		arg.Cursor,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetMembersOnChatRoomAddMemberActionUseKeysetPaginateRow{}
	for rows.Next() {
		var i GetMembersOnChatRoomAddMemberActionUseKeysetPaginateRow
		if err := rows.Scan(
			&i.TChatRoomAddedMembersPkey,
			&i.ChatRoomAddMemberActionID,
			&i.MemberID,
			&i.MemberName,
			&i.MemberFirstName,
			&i.MemberLastName,
			&i.MemberEmail,
			&i.MemberProfileImageID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMembersOnChatRoomAddMemberActionUseNumberedPaginate = `-- name: GetMembersOnChatRoomAddMemberActionUseNumberedPaginate :many
SELECT t_chat_room_added_members.t_chat_room_added_members_pkey, t_chat_room_added_members.chat_room_add_member_action_id, t_chat_room_added_members.member_id, m_members.name member_name, m_members.first_name member_first_name, m_members.last_name member_last_name, m_members.email member_email,
m_members.profile_image_id member_profile_image_id
FROM t_chat_room_added_members
LEFT JOIN m_members ON t_chat_room_added_members.member_id = m_members.member_id
WHERE chat_room_add_member_action_id = $1
ORDER BY
	t_chat_room_added_members_pkey ASC
LIMIT $2 OFFSET $3
`

type GetMembersOnChatRoomAddMemberActionUseNumberedPaginateParams struct {
	ChatRoomAddMemberActionID uuid.UUID `json:"chat_room_add_member_action_id"`
	Limit                     int32     `json:"limit"`
	Offset                    int32     `json:"offset"`
}

type GetMembersOnChatRoomAddMemberActionUseNumberedPaginateRow struct {
	TChatRoomAddedMembersPkey pgtype.Int8 `json:"t_chat_room_added_members_pkey"`
	ChatRoomAddMemberActionID uuid.UUID   `json:"chat_room_add_member_action_id"`
	MemberID                  pgtype.UUID `json:"member_id"`
	MemberName                pgtype.Text `json:"member_name"`
	MemberFirstName           pgtype.Text `json:"member_first_name"`
	MemberLastName            pgtype.Text `json:"member_last_name"`
	MemberEmail               pgtype.Text `json:"member_email"`
	MemberProfileImageID      pgtype.UUID `json:"member_profile_image_id"`
}

func (q *Queries) GetMembersOnChatRoomAddMemberActionUseNumberedPaginate(ctx context.Context, arg GetMembersOnChatRoomAddMemberActionUseNumberedPaginateParams) ([]GetMembersOnChatRoomAddMemberActionUseNumberedPaginateRow, error) {
	rows, err := q.db.Query(ctx, getMembersOnChatRoomAddMemberActionUseNumberedPaginate, arg.ChatRoomAddMemberActionID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetMembersOnChatRoomAddMemberActionUseNumberedPaginateRow{}
	for rows.Next() {
		var i GetMembersOnChatRoomAddMemberActionUseNumberedPaginateRow
		if err := rows.Scan(
			&i.TChatRoomAddedMembersPkey,
			&i.ChatRoomAddMemberActionID,
			&i.MemberID,
			&i.MemberName,
			&i.MemberFirstName,
			&i.MemberLastName,
			&i.MemberEmail,
			&i.MemberProfileImageID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPluralMembersOnChatRoomAddMemberAction = `-- name: GetPluralMembersOnChatRoomAddMemberAction :many
SELECT t_chat_room_added_members.t_chat_room_added_members_pkey, t_chat_room_added_members.chat_room_add_member_action_id, t_chat_room_added_members.member_id, m_members.name member_name, m_members.first_name member_first_name, m_members.last_name member_last_name, m_members.email member_email,
m_members.profile_image_id member_profile_image_id
FROM t_chat_room_added_members
LEFT JOIN m_members ON t_chat_room_added_members.member_id = m_members.member_id
WHERE chat_room_add_member_action_id = ANY($1::uuid[])
ORDER BY
	t_chat_room_added_members_pkey ASC
`

type GetPluralMembersOnChatRoomAddMemberActionRow struct {
	TChatRoomAddedMembersPkey pgtype.Int8 `json:"t_chat_room_added_members_pkey"`
	ChatRoomAddMemberActionID uuid.UUID   `json:"chat_room_add_member_action_id"`
	MemberID                  pgtype.UUID `json:"member_id"`
	MemberName                pgtype.Text `json:"member_name"`
	MemberFirstName           pgtype.Text `json:"member_first_name"`
	MemberLastName            pgtype.Text `json:"member_last_name"`
	MemberEmail               pgtype.Text `json:"member_email"`
	MemberProfileImageID      pgtype.UUID `json:"member_profile_image_id"`
}

func (q *Queries) GetPluralMembersOnChatRoomAddMemberAction(ctx context.Context, chatRoomAddMemberActionIds []uuid.UUID) ([]GetPluralMembersOnChatRoomAddMemberActionRow, error) {
	rows, err := q.db.Query(ctx, getPluralMembersOnChatRoomAddMemberAction, chatRoomAddMemberActionIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPluralMembersOnChatRoomAddMemberActionRow{}
	for rows.Next() {
		var i GetPluralMembersOnChatRoomAddMemberActionRow
		if err := rows.Scan(
			&i.TChatRoomAddedMembersPkey,
			&i.ChatRoomAddMemberActionID,
			&i.MemberID,
			&i.MemberName,
			&i.MemberFirstName,
			&i.MemberLastName,
			&i.MemberEmail,
			&i.MemberProfileImageID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPluralMembersOnChatRoomAddMemberActionUseNumberedPaginate = `-- name: GetPluralMembersOnChatRoomAddMemberActionUseNumberedPaginate :many
SELECT t_chat_room_added_members.t_chat_room_added_members_pkey, t_chat_room_added_members.chat_room_add_member_action_id, t_chat_room_added_members.member_id, m_members.name member_name, m_members.first_name member_first_name, m_members.last_name member_last_name, m_members.email member_email,
m_members.profile_image_id member_profile_image_id
FROM t_chat_room_added_members
LEFT JOIN m_members ON t_chat_room_added_members.member_id = m_members.member_id
WHERE chat_room_add_member_action_id = ANY($3::uuid[])
ORDER BY
	t_chat_room_added_members_pkey ASC
LIMIT $1 OFFSET $2
`

type GetPluralMembersOnChatRoomAddMemberActionUseNumberedPaginateParams struct {
	Limit                      int32       `json:"limit"`
	Offset                     int32       `json:"offset"`
	ChatRoomAddMemberActionIds []uuid.UUID `json:"chat_room_add_member_action_ids"`
}

type GetPluralMembersOnChatRoomAddMemberActionUseNumberedPaginateRow struct {
	TChatRoomAddedMembersPkey pgtype.Int8 `json:"t_chat_room_added_members_pkey"`
	ChatRoomAddMemberActionID uuid.UUID   `json:"chat_room_add_member_action_id"`
	MemberID                  pgtype.UUID `json:"member_id"`
	MemberName                pgtype.Text `json:"member_name"`
	MemberFirstName           pgtype.Text `json:"member_first_name"`
	MemberLastName            pgtype.Text `json:"member_last_name"`
	MemberEmail               pgtype.Text `json:"member_email"`
	MemberProfileImageID      pgtype.UUID `json:"member_profile_image_id"`
}

func (q *Queries) GetPluralMembersOnChatRoomAddMemberActionUseNumberedPaginate(ctx context.Context, arg GetPluralMembersOnChatRoomAddMemberActionUseNumberedPaginateParams) ([]GetPluralMembersOnChatRoomAddMemberActionUseNumberedPaginateRow, error) {
	rows, err := q.db.Query(ctx, getPluralMembersOnChatRoomAddMemberActionUseNumberedPaginate, arg.Limit, arg.Offset, arg.ChatRoomAddMemberActionIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPluralMembersOnChatRoomAddMemberActionUseNumberedPaginateRow{}
	for rows.Next() {
		var i GetPluralMembersOnChatRoomAddMemberActionUseNumberedPaginateRow
		if err := rows.Scan(
			&i.TChatRoomAddedMembersPkey,
			&i.ChatRoomAddMemberActionID,
			&i.MemberID,
			&i.MemberName,
			&i.MemberFirstName,
			&i.MemberLastName,
			&i.MemberEmail,
			&i.MemberProfileImageID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
