// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: permission.sql

package query

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createPermission = `-- name: CreatePermission :one
INSERT INTO m_permissions (name, description, key, permission_category_id) VALUES ($1, $2, $3, $4) RETURNING m_permissions_pkey, permission_id, name, description, key, permission_category_id
`

type CreatePermissionParams struct {
	Name                 string    `json:"name"`
	Description          string    `json:"description"`
	Key                  string    `json:"key"`
	PermissionCategoryID uuid.UUID `json:"permission_category_id"`
}

func (q *Queries) CreatePermission(ctx context.Context, arg CreatePermissionParams) (Permission, error) {
	row := q.db.QueryRow(ctx, createPermission,
		arg.Name,
		arg.Description,
		arg.Key,
		arg.PermissionCategoryID,
	)
	var i Permission
	err := row.Scan(
		&i.MPermissionsPkey,
		&i.PermissionID,
		&i.Name,
		&i.Description,
		&i.Key,
		&i.PermissionCategoryID,
	)
	return i, err
}

type CreatePermissionsParams struct {
	Name                 string    `json:"name"`
	Description          string    `json:"description"`
	Key                  string    `json:"key"`
	PermissionCategoryID uuid.UUID `json:"permission_category_id"`
}

const deletePermission = `-- name: DeletePermission :exec
DELETE FROM m_permissions WHERE permission_id = $1
`

func (q *Queries) DeletePermission(ctx context.Context, permissionID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deletePermission, permissionID)
	return err
}

const deletePermissionByKey = `-- name: DeletePermissionByKey :exec
DELETE FROM m_permissions WHERE key = $1
`

func (q *Queries) DeletePermissionByKey(ctx context.Context, key string) error {
	_, err := q.db.Exec(ctx, deletePermissionByKey, key)
	return err
}

const findPermissionByIDWithCategory = `-- name: FindPermissionByIDWithCategory :one
SELECT m_permissions.m_permissions_pkey, m_permissions.permission_id, m_permissions.name, m_permissions.description, m_permissions.key, m_permissions.permission_category_id, m_permission_categories.m_permission_categories_pkey, m_permission_categories.permission_category_id, m_permission_categories.name, m_permission_categories.description, m_permission_categories.key FROM m_permissions
JOIN m_permission_categories ON m_permissions.permission_category_id = m_permission_categories.permission_category_id
WHERE m_permissions.permission_id = $1
`

type FindPermissionByIDWithCategoryRow struct {
	MPermissionsPkey          pgtype.Int8 `json:"m_permissions_pkey"`
	PermissionID              uuid.UUID   `json:"permission_id"`
	Name                      string      `json:"name"`
	Description               string      `json:"description"`
	Key                       string      `json:"key"`
	PermissionCategoryID      uuid.UUID   `json:"permission_category_id"`
	MPermissionCategoriesPkey pgtype.Int8 `json:"m_permission_categories_pkey"`
	PermissionCategoryID_2    uuid.UUID   `json:"permission_category_id_2"`
	Name_2                    string      `json:"name_2"`
	Description_2             string      `json:"description_2"`
	Key_2                     string      `json:"key_2"`
}

func (q *Queries) FindPermissionByIDWithCategory(ctx context.Context, permissionID uuid.UUID) (FindPermissionByIDWithCategoryRow, error) {
	row := q.db.QueryRow(ctx, findPermissionByIDWithCategory, permissionID)
	var i FindPermissionByIDWithCategoryRow
	err := row.Scan(
		&i.MPermissionsPkey,
		&i.PermissionID,
		&i.Name,
		&i.Description,
		&i.Key,
		&i.PermissionCategoryID,
		&i.MPermissionCategoriesPkey,
		&i.PermissionCategoryID_2,
		&i.Name_2,
		&i.Description_2,
		&i.Key_2,
	)
	return i, err
}

const findPermissionById = `-- name: FindPermissionById :one
SELECT m_permissions_pkey, permission_id, name, description, key, permission_category_id FROM m_permissions WHERE permission_id = $1
`

func (q *Queries) FindPermissionById(ctx context.Context, permissionID uuid.UUID) (Permission, error) {
	row := q.db.QueryRow(ctx, findPermissionById, permissionID)
	var i Permission
	err := row.Scan(
		&i.MPermissionsPkey,
		&i.PermissionID,
		&i.Name,
		&i.Description,
		&i.Key,
		&i.PermissionCategoryID,
	)
	return i, err
}

const findPermissionByKey = `-- name: FindPermissionByKey :one
SELECT m_permissions_pkey, permission_id, name, description, key, permission_category_id FROM m_permissions WHERE key = $1
`

func (q *Queries) FindPermissionByKey(ctx context.Context, key string) (Permission, error) {
	row := q.db.QueryRow(ctx, findPermissionByKey, key)
	var i Permission
	err := row.Scan(
		&i.MPermissionsPkey,
		&i.PermissionID,
		&i.Name,
		&i.Description,
		&i.Key,
		&i.PermissionCategoryID,
	)
	return i, err
}

const getPermissionByKeyWithCategory = `-- name: GetPermissionByKeyWithCategory :one
SELECT m_permissions.m_permissions_pkey, m_permissions.permission_id, m_permissions.name, m_permissions.description, m_permissions.key, m_permissions.permission_category_id, m_permission_categories.m_permission_categories_pkey, m_permission_categories.permission_category_id, m_permission_categories.name, m_permission_categories.description, m_permission_categories.key FROM m_permissions
JOIN m_permission_categories ON m_permissions.permission_category_id = m_permission_categories.permission_category_id
WHERE m_permissions.key = $1
`

type GetPermissionByKeyWithCategoryRow struct {
	MPermissionsPkey          pgtype.Int8 `json:"m_permissions_pkey"`
	PermissionID              uuid.UUID   `json:"permission_id"`
	Name                      string      `json:"name"`
	Description               string      `json:"description"`
	Key                       string      `json:"key"`
	PermissionCategoryID      uuid.UUID   `json:"permission_category_id"`
	MPermissionCategoriesPkey pgtype.Int8 `json:"m_permission_categories_pkey"`
	PermissionCategoryID_2    uuid.UUID   `json:"permission_category_id_2"`
	Name_2                    string      `json:"name_2"`
	Description_2             string      `json:"description_2"`
	Key_2                     string      `json:"key_2"`
}

func (q *Queries) GetPermissionByKeyWithCategory(ctx context.Context, key string) (GetPermissionByKeyWithCategoryRow, error) {
	row := q.db.QueryRow(ctx, getPermissionByKeyWithCategory, key)
	var i GetPermissionByKeyWithCategoryRow
	err := row.Scan(
		&i.MPermissionsPkey,
		&i.PermissionID,
		&i.Name,
		&i.Description,
		&i.Key,
		&i.PermissionCategoryID,
		&i.MPermissionCategoriesPkey,
		&i.PermissionCategoryID_2,
		&i.Name_2,
		&i.Description_2,
		&i.Key_2,
	)
	return i, err
}

const getPermissions = `-- name: GetPermissions :many
SELECT m_permissions_pkey, permission_id, name, description, key, permission_category_id FROM m_permissions
WHERE CASE
	WHEN $3::boolean = true THEN m_permissions.name LIKE '%' || $4::text || '%'
END
ORDER BY
	CASE WHEN $5::text = 'name' THEN m_permissions.name END ASC,
	m_permissions_pkey DESC
LIMIT $1 OFFSET $2
`

type GetPermissionsParams struct {
	Limit         int32  `json:"limit"`
	Offset        int32  `json:"offset"`
	WhereLikeName bool   `json:"where_like_name"`
	SearchName    string `json:"search_name"`
	OrderMethod   string `json:"order_method"`
}

func (q *Queries) GetPermissions(ctx context.Context, arg GetPermissionsParams) ([]Permission, error) {
	rows, err := q.db.Query(ctx, getPermissions,
		arg.Limit,
		arg.Offset,
		arg.WhereLikeName,
		arg.SearchName,
		arg.OrderMethod,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Permission{}
	for rows.Next() {
		var i Permission
		if err := rows.Scan(
			&i.MPermissionsPkey,
			&i.PermissionID,
			&i.Name,
			&i.Description,
			&i.Key,
			&i.PermissionCategoryID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPermissionsByCategories = `-- name: GetPermissionsByCategories :many
SELECT m_permissions_pkey, permission_id, name, description, key, permission_category_id FROM m_permissions
WHERE permission_category_id = ANY($1::uuid[])
AND CASE
	WHEN $4::boolean = true THEN m_permissions.name LIKE '%' || $5::text || '%'
END
ORDER BY
	CASE WHEN $6::text = 'name' THEN m_permissions.name END ASC,
	m_permissions_pkey DESC
LIMIT $2 OFFSET $3
`

type GetPermissionsByCategoriesParams struct {
	Column1       []uuid.UUID `json:"column_1"`
	Limit         int32       `json:"limit"`
	Offset        int32       `json:"offset"`
	WhereLikeName bool        `json:"where_like_name"`
	SearchName    string      `json:"search_name"`
	OrderMethod   string      `json:"order_method"`
}

func (q *Queries) GetPermissionsByCategories(ctx context.Context, arg GetPermissionsByCategoriesParams) ([]Permission, error) {
	rows, err := q.db.Query(ctx, getPermissionsByCategories,
		arg.Column1,
		arg.Limit,
		arg.Offset,
		arg.WhereLikeName,
		arg.SearchName,
		arg.OrderMethod,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Permission{}
	for rows.Next() {
		var i Permission
		if err := rows.Scan(
			&i.MPermissionsPkey,
			&i.PermissionID,
			&i.Name,
			&i.Description,
			&i.Key,
			&i.PermissionCategoryID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPermissionsByCategory = `-- name: GetPermissionsByCategory :many
SELECT m_permissions_pkey, permission_id, name, description, key, permission_category_id FROM m_permissions
WHERE permission_category_id = $1
AND CASE
	WHEN $4::boolean = true THEN m_permissions.name LIKE '%' || $5::text || '%'
END
ORDER BY
	CASE WHEN $6::text = 'name' THEN m_permissions.name END ASC,
	m_permissions_pkey DESC
LIMIT $2 OFFSET $3
`

type GetPermissionsByCategoryParams struct {
	PermissionCategoryID uuid.UUID `json:"permission_category_id"`
	Limit                int32     `json:"limit"`
	Offset               int32     `json:"offset"`
	WhereLikeName        bool      `json:"where_like_name"`
	SearchName           string    `json:"search_name"`
	OrderMethod          string    `json:"order_method"`
}

func (q *Queries) GetPermissionsByCategory(ctx context.Context, arg GetPermissionsByCategoryParams) ([]Permission, error) {
	rows, err := q.db.Query(ctx, getPermissionsByCategory,
		arg.PermissionCategoryID,
		arg.Limit,
		arg.Offset,
		arg.WhereLikeName,
		arg.SearchName,
		arg.OrderMethod,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Permission{}
	for rows.Next() {
		var i Permission
		if err := rows.Scan(
			&i.MPermissionsPkey,
			&i.PermissionID,
			&i.Name,
			&i.Description,
			&i.Key,
			&i.PermissionCategoryID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPermissionsWithCategory = `-- name: GetPermissionsWithCategory :many
SELECT m_permissions.m_permissions_pkey, m_permissions.permission_id, m_permissions.name, m_permissions.description, m_permissions.key, m_permissions.permission_category_id, m_permission_categories.m_permission_categories_pkey, m_permission_categories.permission_category_id, m_permission_categories.name, m_permission_categories.description, m_permission_categories.key FROM m_permissions
JOIN m_permission_categories ON m_permissions.permission_category_id = m_permission_categories.permission_category_id
WHERE CASE
	WHEN $3::boolean = true THEN m_permissions.name LIKE '%' || $4::text || '%'
END
ORDER BY
	CASE WHEN $5::text = 'name' THEN m_permissions.name END ASC,
	m_permissions_pkey DESC
LIMIT $1 OFFSET $2
`

type GetPermissionsWithCategoryParams struct {
	Limit         int32  `json:"limit"`
	Offset        int32  `json:"offset"`
	WhereLikeName bool   `json:"where_like_name"`
	SearchName    string `json:"search_name"`
	OrderMethod   string `json:"order_method"`
}

type GetPermissionsWithCategoryRow struct {
	MPermissionsPkey          pgtype.Int8 `json:"m_permissions_pkey"`
	PermissionID              uuid.UUID   `json:"permission_id"`
	Name                      string      `json:"name"`
	Description               string      `json:"description"`
	Key                       string      `json:"key"`
	PermissionCategoryID      uuid.UUID   `json:"permission_category_id"`
	MPermissionCategoriesPkey pgtype.Int8 `json:"m_permission_categories_pkey"`
	PermissionCategoryID_2    uuid.UUID   `json:"permission_category_id_2"`
	Name_2                    string      `json:"name_2"`
	Description_2             string      `json:"description_2"`
	Key_2                     string      `json:"key_2"`
}

func (q *Queries) GetPermissionsWithCategory(ctx context.Context, arg GetPermissionsWithCategoryParams) ([]GetPermissionsWithCategoryRow, error) {
	rows, err := q.db.Query(ctx, getPermissionsWithCategory,
		arg.Limit,
		arg.Offset,
		arg.WhereLikeName,
		arg.SearchName,
		arg.OrderMethod,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPermissionsWithCategoryRow{}
	for rows.Next() {
		var i GetPermissionsWithCategoryRow
		if err := rows.Scan(
			&i.MPermissionsPkey,
			&i.PermissionID,
			&i.Name,
			&i.Description,
			&i.Key,
			&i.PermissionCategoryID,
			&i.MPermissionCategoriesPkey,
			&i.PermissionCategoryID_2,
			&i.Name_2,
			&i.Description_2,
			&i.Key_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePermission = `-- name: UpdatePermission :one
UPDATE m_permissions SET name = $2, description = $3 WHERE permission_id = $1 RETURNING m_permissions_pkey, permission_id, name, description, key, permission_category_id
`

type UpdatePermissionParams struct {
	PermissionID uuid.UUID `json:"permission_id"`
	Name         string    `json:"name"`
	Description  string    `json:"description"`
}

func (q *Queries) UpdatePermission(ctx context.Context, arg UpdatePermissionParams) (Permission, error) {
	row := q.db.QueryRow(ctx, updatePermission, arg.PermissionID, arg.Name, arg.Description)
	var i Permission
	err := row.Scan(
		&i.MPermissionsPkey,
		&i.PermissionID,
		&i.Name,
		&i.Description,
		&i.Key,
		&i.PermissionCategoryID,
	)
	return i, err
}

const updatePermissionByKey = `-- name: UpdatePermissionByKey :one
UPDATE m_permissions SET name = $2, description = $3 WHERE key = $1 RETURNING m_permissions_pkey, permission_id, name, description, key, permission_category_id
`

type UpdatePermissionByKeyParams struct {
	Key         string `json:"key"`
	Name        string `json:"name"`
	Description string `json:"description"`
}

func (q *Queries) UpdatePermissionByKey(ctx context.Context, arg UpdatePermissionByKeyParams) (Permission, error) {
	row := q.db.QueryRow(ctx, updatePermissionByKey, arg.Key, arg.Name, arg.Description)
	var i Permission
	err := row.Scan(
		&i.MPermissionsPkey,
		&i.PermissionID,
		&i.Name,
		&i.Description,
		&i.Key,
		&i.PermissionCategoryID,
	)
	return i, err
}

const updatePermissionCategoryID = `-- name: UpdatePermissionCategoryID :one
UPDATE m_permissions SET permission_category_id = $2 WHERE permission_id = $1 RETURNING m_permissions_pkey, permission_id, name, description, key, permission_category_id
`

type UpdatePermissionCategoryIDParams struct {
	PermissionID         uuid.UUID `json:"permission_id"`
	PermissionCategoryID uuid.UUID `json:"permission_category_id"`
}

func (q *Queries) UpdatePermissionCategoryID(ctx context.Context, arg UpdatePermissionCategoryIDParams) (Permission, error) {
	row := q.db.QueryRow(ctx, updatePermissionCategoryID, arg.PermissionID, arg.PermissionCategoryID)
	var i Permission
	err := row.Scan(
		&i.MPermissionsPkey,
		&i.PermissionID,
		&i.Name,
		&i.Description,
		&i.Key,
		&i.PermissionCategoryID,
	)
	return i, err
}

const updatePermissionKey = `-- name: UpdatePermissionKey :one
UPDATE m_permissions SET key = $2 WHERE permission_id = $1 RETURNING m_permissions_pkey, permission_id, name, description, key, permission_category_id
`

type UpdatePermissionKeyParams struct {
	PermissionID uuid.UUID `json:"permission_id"`
	Key          string    `json:"key"`
}

func (q *Queries) UpdatePermissionKey(ctx context.Context, arg UpdatePermissionKeyParams) (Permission, error) {
	row := q.db.QueryRow(ctx, updatePermissionKey, arg.PermissionID, arg.Key)
	var i Permission
	err := row.Scan(
		&i.MPermissionsPkey,
		&i.PermissionID,
		&i.Name,
		&i.Description,
		&i.Key,
		&i.PermissionCategoryID,
	)
	return i, err
}
