// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package store

import (
	"context"
	"github.com/google/uuid"
	"github.com/micro-service-lab/recs-seem-mono-container/app/entity"
	"github.com/micro-service-lab/recs-seem-mono-container/app/parameter"
	"sync"
	"time"
)

// Ensure, that StoreMock does implement Store.
// If this is not the case, regenerate this file with moq.
var _ Store = &StoreMock{}

// StoreMock is a mock implementation of Store.
//
//	func TestSomethingThatUsesStore(t *testing.T) {
//
//		// make and configure a mocked Store
//		mockedStore := &StoreMock{
//			AddMemberToChatRoomAddMemberActionFunc: func(ctx context.Context, param parameter.CreateChatRoomAddedMemberParam) (entity.ChatRoomAddedMember, error) {
//				panic("mock out the AddMemberToChatRoomAddMemberAction method")
//			},
//			AddMemberToChatRoomAddMemberActionWithSdFunc: func(ctx context.Context, sd Sd, param parameter.CreateChatRoomAddedMemberParam) (entity.ChatRoomAddedMember, error) {
//				panic("mock out the AddMemberToChatRoomAddMemberActionWithSd method")
//			},
//			AddMembersToChatRoomAddMemberActionFunc: func(ctx context.Context, params []parameter.CreateChatRoomAddedMemberParam) (int64, error) {
//				panic("mock out the AddMembersToChatRoomAddMemberAction method")
//			},
//			AddMembersToChatRoomAddMemberActionWithSdFunc: func(ctx context.Context, sd Sd, params []parameter.CreateChatRoomAddedMemberParam) (int64, error) {
//				panic("mock out the AddMembersToChatRoomAddMemberActionWithSd method")
//			},
//			AssociateRoleFunc: func(ctx context.Context, param parameter.AssociationRoleParam) (entity.RoleAssociation, error) {
//				panic("mock out the AssociateRole method")
//			},
//			AssociateRoleWithSdFunc: func(ctx context.Context, sd Sd, param parameter.AssociationRoleParam) (entity.RoleAssociation, error) {
//				panic("mock out the AssociateRoleWithSd method")
//			},
//			AssociateRolesFunc: func(ctx context.Context, params []parameter.AssociationRoleParam) (int64, error) {
//				panic("mock out the AssociateRoles method")
//			},
//			AssociateRolesWithSdFunc: func(ctx context.Context, sd Sd, params []parameter.AssociationRoleParam) (int64, error) {
//				panic("mock out the AssociateRolesWithSd method")
//			},
//			AttacheItemOnMessageFunc: func(ctx context.Context, param parameter.AttachItemMessageParam) (entity.AttachedMessage, error) {
//				panic("mock out the AttacheItemOnMessage method")
//			},
//			AttacheItemOnMessageWithSdFunc: func(ctx context.Context, sd Sd, param parameter.AttachItemMessageParam) (entity.AttachedMessage, error) {
//				panic("mock out the AttacheItemOnMessageWithSd method")
//			},
//			AttacheItemsOnMessagesFunc: func(ctx context.Context, params []parameter.AttachItemMessageParam) (int64, error) {
//				panic("mock out the AttacheItemsOnMessages method")
//			},
//			AttacheItemsOnMessagesWithSdFunc: func(ctx context.Context, sd Sd, params []parameter.AttachItemMessageParam) (int64, error) {
//				panic("mock out the AttacheItemsOnMessagesWithSd method")
//			},
//			BeginFunc: func(contextMoqParam context.Context) (Sd, error) {
//				panic("mock out the Begin method")
//			},
//			BelongChatRoomFunc: func(ctx context.Context, param parameter.BelongChatRoomParam) (entity.ChatRoomBelonging, error) {
//				panic("mock out the BelongChatRoom method")
//			},
//			BelongChatRoomWithSdFunc: func(ctx context.Context, sd Sd, param parameter.BelongChatRoomParam) (entity.ChatRoomBelonging, error) {
//				panic("mock out the BelongChatRoomWithSd method")
//			},
//			BelongChatRoomsFunc: func(ctx context.Context, params []parameter.BelongChatRoomParam) (int64, error) {
//				panic("mock out the BelongChatRooms method")
//			},
//			BelongChatRoomsWithSdFunc: func(ctx context.Context, sd Sd, params []parameter.BelongChatRoomParam) (int64, error) {
//				panic("mock out the BelongChatRoomsWithSd method")
//			},
//			BelongOrganizationFunc: func(ctx context.Context, param parameter.BelongOrganizationParam) (entity.Membership, error) {
//				panic("mock out the BelongOrganization method")
//			},
//			BelongOrganizationWithSdFunc: func(ctx context.Context, sd Sd, param parameter.BelongOrganizationParam) (entity.Membership, error) {
//				panic("mock out the BelongOrganizationWithSd method")
//			},
//			BelongOrganizationsFunc: func(ctx context.Context, params []parameter.BelongOrganizationParam) (int64, error) {
//				panic("mock out the BelongOrganizations method")
//			},
//			BelongOrganizationsWithSdFunc: func(ctx context.Context, sd Sd, params []parameter.BelongOrganizationParam) (int64, error) {
//				panic("mock out the BelongOrganizationsWithSd method")
//			},
//			CleanupFunc: func(contextMoqParam context.Context) error {
//				panic("mock out the Cleanup method")
//			},
//			CommitFunc: func(contextMoqParam context.Context, sd Sd) error {
//				panic("mock out the Commit method")
//			},
//			CountAbsencesFunc: func(ctx context.Context) (int64, error) {
//				panic("mock out the CountAbsences method")
//			},
//			CountAbsencesWithSdFunc: func(ctx context.Context, sd Sd) (int64, error) {
//				panic("mock out the CountAbsencesWithSd method")
//			},
//			CountAttachableItemsFunc: func(ctx context.Context, where parameter.WhereAttachableItemParam) (int64, error) {
//				panic("mock out the CountAttachableItems method")
//			},
//			CountAttachableItemsWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereAttachableItemParam) (int64, error) {
//				panic("mock out the CountAttachableItemsWithSd method")
//			},
//			CountAttachedItemsOnChatRoomFunc: func(ctx context.Context, chatRoomID uuid.UUID, where parameter.WhereAttachedItemOnChatRoomParam) (int64, error) {
//				panic("mock out the CountAttachedItemsOnChatRoom method")
//			},
//			CountAttachedItemsOnChatRoomWithSdFunc: func(ctx context.Context, sd Sd, chatRoomID uuid.UUID, where parameter.WhereAttachedItemOnChatRoomParam) (int64, error) {
//				panic("mock out the CountAttachedItemsOnChatRoomWithSd method")
//			},
//			CountAttachedItemsOnMessageFunc: func(ctx context.Context, messageID uuid.UUID, where parameter.WhereAttachedItemOnMessageParam) (int64, error) {
//				panic("mock out the CountAttachedItemsOnMessage method")
//			},
//			CountAttachedItemsOnMessageWithSdFunc: func(ctx context.Context, sd Sd, messageID uuid.UUID, where parameter.WhereAttachedItemOnMessageParam) (int64, error) {
//				panic("mock out the CountAttachedItemsOnMessageWithSd method")
//			},
//			CountAttendStatusesFunc: func(ctx context.Context, where parameter.WhereAttendStatusParam) (int64, error) {
//				panic("mock out the CountAttendStatuses method")
//			},
//			CountAttendStatusesWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereAttendStatusParam) (int64, error) {
//				panic("mock out the CountAttendStatusesWithSd method")
//			},
//			CountAttendanceTypesFunc: func(ctx context.Context, where parameter.WhereAttendanceTypeParam) (int64, error) {
//				panic("mock out the CountAttendanceTypes method")
//			},
//			CountAttendanceTypesWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereAttendanceTypeParam) (int64, error) {
//				panic("mock out the CountAttendanceTypesWithSd method")
//			},
//			CountChatRoomActionTypesFunc: func(ctx context.Context, where parameter.WhereChatRoomActionTypeParam) (int64, error) {
//				panic("mock out the CountChatRoomActionTypes method")
//			},
//			CountChatRoomActionTypesWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereChatRoomActionTypeParam) (int64, error) {
//				panic("mock out the CountChatRoomActionTypesWithSd method")
//			},
//			CountChatRoomActionsFunc: func(ctx context.Context, where parameter.WhereChatRoomActionParam) (int64, error) {
//				panic("mock out the CountChatRoomActions method")
//			},
//			CountChatRoomActionsWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereChatRoomActionParam) (int64, error) {
//				panic("mock out the CountChatRoomActionsWithSd method")
//			},
//			CountChatRoomAddMemberActionsFunc: func(ctx context.Context, where parameter.WhereChatRoomAddMemberActionParam) (int64, error) {
//				panic("mock out the CountChatRoomAddMemberActions method")
//			},
//			CountChatRoomAddMemberActionsWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereChatRoomAddMemberActionParam) (int64, error) {
//				panic("mock out the CountChatRoomAddMemberActionsWithSd method")
//			},
//			CountChatRoomCreateActionsFunc: func(ctx context.Context, where parameter.WhereChatRoomCreateActionParam) (int64, error) {
//				panic("mock out the CountChatRoomCreateActions method")
//			},
//			CountChatRoomCreateActionsWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereChatRoomCreateActionParam) (int64, error) {
//				panic("mock out the CountChatRoomCreateActionsWithSd method")
//			},
//			CountChatRoomDeleteMessageActionsFunc: func(ctx context.Context, where parameter.WhereChatRoomDeleteMessageActionParam) (int64, error) {
//				panic("mock out the CountChatRoomDeleteMessageActions method")
//			},
//			CountChatRoomDeleteMessageActionsWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereChatRoomDeleteMessageActionParam) (int64, error) {
//				panic("mock out the CountChatRoomDeleteMessageActionsWithSd method")
//			},
//			CountChatRoomRemoveMemberActionsFunc: func(ctx context.Context, where parameter.WhereChatRoomRemoveMemberActionParam) (int64, error) {
//				panic("mock out the CountChatRoomRemoveMemberActions method")
//			},
//			CountChatRoomRemoveMemberActionsWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereChatRoomRemoveMemberActionParam) (int64, error) {
//				panic("mock out the CountChatRoomRemoveMemberActionsWithSd method")
//			},
//			CountChatRoomUpdateNameActionsFunc: func(ctx context.Context, where parameter.WhereChatRoomUpdateNameActionParam) (int64, error) {
//				panic("mock out the CountChatRoomUpdateNameActions method")
//			},
//			CountChatRoomUpdateNameActionsWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereChatRoomUpdateNameActionParam) (int64, error) {
//				panic("mock out the CountChatRoomUpdateNameActionsWithSd method")
//			},
//			CountChatRoomWithdrawActionsFunc: func(ctx context.Context, where parameter.WhereChatRoomWithdrawActionParam) (int64, error) {
//				panic("mock out the CountChatRoomWithdrawActions method")
//			},
//			CountChatRoomWithdrawActionsWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereChatRoomWithdrawActionParam) (int64, error) {
//				panic("mock out the CountChatRoomWithdrawActionsWithSd method")
//			},
//			CountChatRoomsFunc: func(ctx context.Context, where parameter.WhereChatRoomParam) (int64, error) {
//				panic("mock out the CountChatRooms method")
//			},
//			CountChatRoomsOnMemberFunc: func(ctx context.Context, memberID uuid.UUID, where parameter.WhereChatRoomOnMemberParam) (int64, error) {
//				panic("mock out the CountChatRoomsOnMember method")
//			},
//			CountChatRoomsOnMemberWithSdFunc: func(ctx context.Context, sd Sd, memberID uuid.UUID, where parameter.WhereChatRoomOnMemberParam) (int64, error) {
//				panic("mock out the CountChatRoomsOnMemberWithSd method")
//			},
//			CountChatRoomsWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereChatRoomParam) (int64, error) {
//				panic("mock out the CountChatRoomsWithSd method")
//			},
//			CountEventTypesFunc: func(ctx context.Context, where parameter.WhereEventTypeParam) (int64, error) {
//				panic("mock out the CountEventTypes method")
//			},
//			CountEventTypesWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereEventTypeParam) (int64, error) {
//				panic("mock out the CountEventTypesWithSd method")
//			},
//			CountFilesFunc: func(ctx context.Context, where parameter.WhereFileParam) (int64, error) {
//				panic("mock out the CountFiles method")
//			},
//			CountFilesWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereFileParam) (int64, error) {
//				panic("mock out the CountFilesWithSd method")
//			},
//			CountGradesFunc: func(ctx context.Context, where parameter.WhereGradeParam) (int64, error) {
//				panic("mock out the CountGrades method")
//			},
//			CountGradesWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereGradeParam) (int64, error) {
//				panic("mock out the CountGradesWithSd method")
//			},
//			CountGroupsFunc: func(ctx context.Context, where parameter.WhereGroupParam) (int64, error) {
//				panic("mock out the CountGroups method")
//			},
//			CountGroupsWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereGroupParam) (int64, error) {
//				panic("mock out the CountGroupsWithSd method")
//			},
//			CountImagesFunc: func(ctx context.Context, where parameter.WhereImageParam) (int64, error) {
//				panic("mock out the CountImages method")
//			},
//			CountImagesWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereImageParam) (int64, error) {
//				panic("mock out the CountImagesWithSd method")
//			},
//			CountMembersFunc: func(ctx context.Context, where parameter.WhereMemberParam) (int64, error) {
//				panic("mock out the CountMembers method")
//			},
//			CountMembersOnChatRoomFunc: func(ctx context.Context, chatRoomID uuid.UUID, where parameter.WhereMemberOnChatRoomParam) (int64, error) {
//				panic("mock out the CountMembersOnChatRoom method")
//			},
//			CountMembersOnChatRoomAddMemberActionFunc: func(ctx context.Context, chatRoomAddMemberActionID uuid.UUID, where parameter.WhereMemberOnChatRoomAddMemberActionParam) (int64, error) {
//				panic("mock out the CountMembersOnChatRoomAddMemberAction method")
//			},
//			CountMembersOnChatRoomAddMemberActionWithSdFunc: func(ctx context.Context, sd Sd, chatRoomAddMemberActionID uuid.UUID, where parameter.WhereMemberOnChatRoomAddMemberActionParam) (int64, error) {
//				panic("mock out the CountMembersOnChatRoomAddMemberActionWithSd method")
//			},
//			CountMembersOnChatRoomRemoveMemberActionFunc: func(ctx context.Context, chatRoomRemoveMemberActionID uuid.UUID, where parameter.WhereMemberOnChatRoomRemoveMemberActionParam) (int64, error) {
//				panic("mock out the CountMembersOnChatRoomRemoveMemberAction method")
//			},
//			CountMembersOnChatRoomRemoveMemberActionWithSdFunc: func(ctx context.Context, sd Sd, chatRoomRemoveMemberActionID uuid.UUID, where parameter.WhereMemberOnChatRoomRemoveMemberActionParam) (int64, error) {
//				panic("mock out the CountMembersOnChatRoomRemoveMemberActionWithSd method")
//			},
//			CountMembersOnChatRoomWithSdFunc: func(ctx context.Context, sd Sd, chatRoomID uuid.UUID, where parameter.WhereMemberOnChatRoomParam) (int64, error) {
//				panic("mock out the CountMembersOnChatRoomWithSd method")
//			},
//			CountMembersOnOrganizationFunc: func(ctx context.Context, organizationID uuid.UUID, where parameter.WhereMemberOnOrganizationParam) (int64, error) {
//				panic("mock out the CountMembersOnOrganization method")
//			},
//			CountMembersOnOrganizationWithSdFunc: func(ctx context.Context, sd Sd, organizationID uuid.UUID, where parameter.WhereMemberOnOrganizationParam) (int64, error) {
//				panic("mock out the CountMembersOnOrganizationWithSd method")
//			},
//			CountMembersWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereMemberParam) (int64, error) {
//				panic("mock out the CountMembersWithSd method")
//			},
//			CountMessagesFunc: func(ctx context.Context, where parameter.WhereMessageParam) (int64, error) {
//				panic("mock out the CountMessages method")
//			},
//			CountMessagesWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereMessageParam) (int64, error) {
//				panic("mock out the CountMessagesWithSd method")
//			},
//			CountMimeTypesFunc: func(ctx context.Context, where parameter.WhereMimeTypeParam) (int64, error) {
//				panic("mock out the CountMimeTypes method")
//			},
//			CountMimeTypesWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereMimeTypeParam) (int64, error) {
//				panic("mock out the CountMimeTypesWithSd method")
//			},
//			CountOrganizationsFunc: func(ctx context.Context, where parameter.WhereOrganizationParam) (int64, error) {
//				panic("mock out the CountOrganizations method")
//			},
//			CountOrganizationsOnMemberFunc: func(ctx context.Context, memberID uuid.UUID, where parameter.WhereOrganizationOnMemberParam) (int64, error) {
//				panic("mock out the CountOrganizationsOnMember method")
//			},
//			CountOrganizationsOnMemberWithSdFunc: func(ctx context.Context, sd Sd, memberID uuid.UUID, where parameter.WhereOrganizationOnMemberParam) (int64, error) {
//				panic("mock out the CountOrganizationsOnMemberWithSd method")
//			},
//			CountOrganizationsWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereOrganizationParam) (int64, error) {
//				panic("mock out the CountOrganizationsWithSd method")
//			},
//			CountPermissionCategoriesFunc: func(ctx context.Context, where parameter.WherePermissionCategoryParam) (int64, error) {
//				panic("mock out the CountPermissionCategories method")
//			},
//			CountPermissionCategoriesWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WherePermissionCategoryParam) (int64, error) {
//				panic("mock out the CountPermissionCategoriesWithSd method")
//			},
//			CountPermissionsFunc: func(ctx context.Context, where parameter.WherePermissionParam) (int64, error) {
//				panic("mock out the CountPermissions method")
//			},
//			CountPermissionsWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WherePermissionParam) (int64, error) {
//				panic("mock out the CountPermissionsWithSd method")
//			},
//			CountPoliciesFunc: func(ctx context.Context, where parameter.WherePolicyParam) (int64, error) {
//				panic("mock out the CountPolicies method")
//			},
//			CountPoliciesOnRoleFunc: func(ctx context.Context, roleID uuid.UUID, where parameter.WherePolicyOnRoleParam) (int64, error) {
//				panic("mock out the CountPoliciesOnRole method")
//			},
//			CountPoliciesOnRoleWithSdFunc: func(ctx context.Context, sd Sd, roleID uuid.UUID, where parameter.WherePolicyOnRoleParam) (int64, error) {
//				panic("mock out the CountPoliciesOnRoleWithSd method")
//			},
//			CountPoliciesWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WherePolicyParam) (int64, error) {
//				panic("mock out the CountPoliciesWithSd method")
//			},
//			CountPolicyCategoriesFunc: func(ctx context.Context, where parameter.WherePolicyCategoryParam) (int64, error) {
//				panic("mock out the CountPolicyCategories method")
//			},
//			CountPolicyCategoriesWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WherePolicyCategoryParam) (int64, error) {
//				panic("mock out the CountPolicyCategoriesWithSd method")
//			},
//			CountProfessorsFunc: func(ctx context.Context, where parameter.WhereProfessorParam) (int64, error) {
//				panic("mock out the CountProfessors method")
//			},
//			CountProfessorsWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereProfessorParam) (int64, error) {
//				panic("mock out the CountProfessorsWithSd method")
//			},
//			CountReadableMembersOnMessageFunc: func(ctx context.Context, messageID uuid.UUID, where parameter.WhereReadableMemberOnMessageParam) (int64, error) {
//				panic("mock out the CountReadableMembersOnMessage method")
//			},
//			CountReadableMembersOnMessageWithSdFunc: func(ctx context.Context, sd Sd, messageID uuid.UUID, where parameter.WhereReadableMemberOnMessageParam) (int64, error) {
//				panic("mock out the CountReadableMembersOnMessageWithSd method")
//			},
//			CountReadableMessagesOnChatRoomAndMemberFunc: func(ctx context.Context, chatRoomID uuid.UUID, memberID uuid.UUID, where parameter.WhereReadableMessageOnChatRoomAndMemberParam) (int64, error) {
//				panic("mock out the CountReadableMessagesOnChatRoomAndMember method")
//			},
//			CountReadableMessagesOnChatRoomAndMemberWithSdFunc: func(ctx context.Context, sd Sd, chatRoomID uuid.UUID, memberID uuid.UUID, where parameter.WhereReadableMessageOnChatRoomAndMemberParam) (int64, error) {
//				panic("mock out the CountReadableMessagesOnChatRoomAndMemberWithSd method")
//			},
//			CountReadableMessagesOnChatRoomsFunc: func(ctx context.Context, chatRoomIDs []uuid.UUID, where parameter.WhereReadableMessageOnChatRoomAndMemberParam) ([]entity.ReadReceiptGroupByChatRoom, error) {
//				panic("mock out the CountReadableMessagesOnChatRooms method")
//			},
//			CountReadableMessagesOnChatRoomsAndMemberFunc: func(ctx context.Context, chatRoomIDs []uuid.UUID, memberID uuid.UUID, where parameter.WhereReadableMessageOnChatRoomAndMemberParam) ([]entity.ReadReceiptGroupByChatRoom, error) {
//				panic("mock out the CountReadableMessagesOnChatRoomsAndMember method")
//			},
//			CountReadableMessagesOnChatRoomsAndMemberWithSdFunc: func(ctx context.Context, sd Sd, chatRoomIDs []uuid.UUID, memberID uuid.UUID, where parameter.WhereReadableMessageOnChatRoomAndMemberParam) ([]entity.ReadReceiptGroupByChatRoom, error) {
//				panic("mock out the CountReadableMessagesOnChatRoomsAndMemberWithSd method")
//			},
//			CountReadableMessagesOnChatRoomsWithSdFunc: func(ctx context.Context, sd Sd, chatRoomIDs []uuid.UUID, where parameter.WhereReadableMessageOnChatRoomAndMemberParam) ([]entity.ReadReceiptGroupByChatRoom, error) {
//				panic("mock out the CountReadableMessagesOnChatRoomsWithSd method")
//			},
//			CountReadableMessagesOnMemberFunc: func(ctx context.Context, memberID uuid.UUID, where parameter.WhereReadableMessageOnChatRoomAndMemberParam) (int64, error) {
//				panic("mock out the CountReadableMessagesOnMember method")
//			},
//			CountReadableMessagesOnMemberWithSdFunc: func(ctx context.Context, sd Sd, memberID uuid.UUID, where parameter.WhereReadableMessageOnChatRoomAndMemberParam) (int64, error) {
//				panic("mock out the CountReadableMessagesOnMemberWithSd method")
//			},
//			CountReadsOnMessagesFunc: func(ctx context.Context, messageIDs []uuid.UUID, where parameter.WhereReadsOnMessageParam) ([]entity.ReadReceiptGroupByMessage, error) {
//				panic("mock out the CountReadsOnMessages method")
//			},
//			CountReadsOnMessagesWithSdFunc: func(ctx context.Context, sd Sd, messageIDs []uuid.UUID, where parameter.WhereReadsOnMessageParam) ([]entity.ReadReceiptGroupByMessage, error) {
//				panic("mock out the CountReadsOnMessagesWithSd method")
//			},
//			CountRecordTypesFunc: func(ctx context.Context, where parameter.WhereRecordTypeParam) (int64, error) {
//				panic("mock out the CountRecordTypes method")
//			},
//			CountRecordTypesWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereRecordTypeParam) (int64, error) {
//				panic("mock out the CountRecordTypesWithSd method")
//			},
//			CountRolesFunc: func(ctx context.Context, where parameter.WhereRoleParam) (int64, error) {
//				panic("mock out the CountRoles method")
//			},
//			CountRolesOnPolicyFunc: func(ctx context.Context, policyID uuid.UUID, where parameter.WhereRoleOnPolicyParam) (int64, error) {
//				panic("mock out the CountRolesOnPolicy method")
//			},
//			CountRolesOnPolicyWithSdFunc: func(ctx context.Context, sd Sd, policyID uuid.UUID, where parameter.WhereRoleOnPolicyParam) (int64, error) {
//				panic("mock out the CountRolesOnPolicyWithSd method")
//			},
//			CountRolesWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereRoleParam) (int64, error) {
//				panic("mock out the CountRolesWithSd method")
//			},
//			CountStudentsFunc: func(ctx context.Context, where parameter.WhereStudentParam) (int64, error) {
//				panic("mock out the CountStudents method")
//			},
//			CountStudentsWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereStudentParam) (int64, error) {
//				panic("mock out the CountStudentsWithSd method")
//			},
//			CreateAbsenceFunc: func(ctx context.Context, param parameter.CreateAbsenceParam) (entity.Absence, error) {
//				panic("mock out the CreateAbsence method")
//			},
//			CreateAbsenceWithSdFunc: func(ctx context.Context, sd Sd, param parameter.CreateAbsenceParam) (entity.Absence, error) {
//				panic("mock out the CreateAbsenceWithSd method")
//			},
//			CreateAbsencesFunc: func(ctx context.Context, params []parameter.CreateAbsenceParam) (int64, error) {
//				panic("mock out the CreateAbsences method")
//			},
//			CreateAbsencesWithSdFunc: func(ctx context.Context, sd Sd, params []parameter.CreateAbsenceParam) (int64, error) {
//				panic("mock out the CreateAbsencesWithSd method")
//			},
//			CreateAttachableItemFunc: func(ctx context.Context, param parameter.CreateAttachableItemParam) (entity.AttachableItem, error) {
//				panic("mock out the CreateAttachableItem method")
//			},
//			CreateAttachableItemWithSdFunc: func(ctx context.Context, sd Sd, param parameter.CreateAttachableItemParam) (entity.AttachableItem, error) {
//				panic("mock out the CreateAttachableItemWithSd method")
//			},
//			CreateAttachableItemsFunc: func(ctx context.Context, params []parameter.CreateAttachableItemParam) (int64, error) {
//				panic("mock out the CreateAttachableItems method")
//			},
//			CreateAttachableItemsWithSdFunc: func(ctx context.Context, sd Sd, params []parameter.CreateAttachableItemParam) (int64, error) {
//				panic("mock out the CreateAttachableItemsWithSd method")
//			},
//			CreateAttendStatusFunc: func(ctx context.Context, param parameter.CreateAttendStatusParam) (entity.AttendStatus, error) {
//				panic("mock out the CreateAttendStatus method")
//			},
//			CreateAttendStatusWithSdFunc: func(ctx context.Context, sd Sd, param parameter.CreateAttendStatusParam) (entity.AttendStatus, error) {
//				panic("mock out the CreateAttendStatusWithSd method")
//			},
//			CreateAttendStatusesFunc: func(ctx context.Context, params []parameter.CreateAttendStatusParam) (int64, error) {
//				panic("mock out the CreateAttendStatuses method")
//			},
//			CreateAttendStatusesWithSdFunc: func(ctx context.Context, sd Sd, params []parameter.CreateAttendStatusParam) (int64, error) {
//				panic("mock out the CreateAttendStatusesWithSd method")
//			},
//			CreateAttendanceTypeFunc: func(ctx context.Context, param parameter.CreateAttendanceTypeParam) (entity.AttendanceType, error) {
//				panic("mock out the CreateAttendanceType method")
//			},
//			CreateAttendanceTypeWithSdFunc: func(ctx context.Context, sd Sd, param parameter.CreateAttendanceTypeParam) (entity.AttendanceType, error) {
//				panic("mock out the CreateAttendanceTypeWithSd method")
//			},
//			CreateAttendanceTypesFunc: func(ctx context.Context, params []parameter.CreateAttendanceTypeParam) (int64, error) {
//				panic("mock out the CreateAttendanceTypes method")
//			},
//			CreateAttendanceTypesWithSdFunc: func(ctx context.Context, sd Sd, params []parameter.CreateAttendanceTypeParam) (int64, error) {
//				panic("mock out the CreateAttendanceTypesWithSd method")
//			},
//			CreateChatRoomFunc: func(ctx context.Context, param parameter.CreateChatRoomParam) (entity.ChatRoom, error) {
//				panic("mock out the CreateChatRoom method")
//			},
//			CreateChatRoomActionFunc: func(ctx context.Context, param parameter.CreateChatRoomActionParam) (entity.ChatRoomAction, error) {
//				panic("mock out the CreateChatRoomAction method")
//			},
//			CreateChatRoomActionTypeFunc: func(ctx context.Context, param parameter.CreateChatRoomActionTypeParam) (entity.ChatRoomActionType, error) {
//				panic("mock out the CreateChatRoomActionType method")
//			},
//			CreateChatRoomActionTypeWithSdFunc: func(ctx context.Context, sd Sd, param parameter.CreateChatRoomActionTypeParam) (entity.ChatRoomActionType, error) {
//				panic("mock out the CreateChatRoomActionTypeWithSd method")
//			},
//			CreateChatRoomActionTypesFunc: func(ctx context.Context, params []parameter.CreateChatRoomActionTypeParam) (int64, error) {
//				panic("mock out the CreateChatRoomActionTypes method")
//			},
//			CreateChatRoomActionTypesWithSdFunc: func(ctx context.Context, sd Sd, params []parameter.CreateChatRoomActionTypeParam) (int64, error) {
//				panic("mock out the CreateChatRoomActionTypesWithSd method")
//			},
//			CreateChatRoomActionWithSdFunc: func(ctx context.Context, sd Sd, param parameter.CreateChatRoomActionParam) (entity.ChatRoomAction, error) {
//				panic("mock out the CreateChatRoomActionWithSd method")
//			},
//			CreateChatRoomActionsFunc: func(ctx context.Context, params []parameter.CreateChatRoomActionParam) (int64, error) {
//				panic("mock out the CreateChatRoomActions method")
//			},
//			CreateChatRoomActionsWithSdFunc: func(ctx context.Context, sd Sd, params []parameter.CreateChatRoomActionParam) (int64, error) {
//				panic("mock out the CreateChatRoomActionsWithSd method")
//			},
//			CreateChatRoomAddMemberActionFunc: func(ctx context.Context, param parameter.CreateChatRoomAddMemberActionParam) (entity.ChatRoomAddMemberAction, error) {
//				panic("mock out the CreateChatRoomAddMemberAction method")
//			},
//			CreateChatRoomAddMemberActionWithSdFunc: func(ctx context.Context, sd Sd, param parameter.CreateChatRoomAddMemberActionParam) (entity.ChatRoomAddMemberAction, error) {
//				panic("mock out the CreateChatRoomAddMemberActionWithSd method")
//			},
//			CreateChatRoomAddMemberActionsFunc: func(ctx context.Context, params []parameter.CreateChatRoomAddMemberActionParam) (int64, error) {
//				panic("mock out the CreateChatRoomAddMemberActions method")
//			},
//			CreateChatRoomAddMemberActionsWithSdFunc: func(ctx context.Context, sd Sd, params []parameter.CreateChatRoomAddMemberActionParam) (int64, error) {
//				panic("mock out the CreateChatRoomAddMemberActionsWithSd method")
//			},
//			CreateChatRoomCreateActionFunc: func(ctx context.Context, param parameter.CreateChatRoomCreateActionParam) (entity.ChatRoomCreateAction, error) {
//				panic("mock out the CreateChatRoomCreateAction method")
//			},
//			CreateChatRoomCreateActionWithSdFunc: func(ctx context.Context, sd Sd, param parameter.CreateChatRoomCreateActionParam) (entity.ChatRoomCreateAction, error) {
//				panic("mock out the CreateChatRoomCreateActionWithSd method")
//			},
//			CreateChatRoomCreateActionsFunc: func(ctx context.Context, params []parameter.CreateChatRoomCreateActionParam) (int64, error) {
//				panic("mock out the CreateChatRoomCreateActions method")
//			},
//			CreateChatRoomCreateActionsWithSdFunc: func(ctx context.Context, sd Sd, params []parameter.CreateChatRoomCreateActionParam) (int64, error) {
//				panic("mock out the CreateChatRoomCreateActionsWithSd method")
//			},
//			CreateChatRoomDeleteMessageActionFunc: func(ctx context.Context, param parameter.CreateChatRoomDeleteMessageActionParam) (entity.ChatRoomDeleteMessageAction, error) {
//				panic("mock out the CreateChatRoomDeleteMessageAction method")
//			},
//			CreateChatRoomDeleteMessageActionWithSdFunc: func(ctx context.Context, sd Sd, param parameter.CreateChatRoomDeleteMessageActionParam) (entity.ChatRoomDeleteMessageAction, error) {
//				panic("mock out the CreateChatRoomDeleteMessageActionWithSd method")
//			},
//			CreateChatRoomDeleteMessageActionsFunc: func(ctx context.Context, params []parameter.CreateChatRoomDeleteMessageActionParam) (int64, error) {
//				panic("mock out the CreateChatRoomDeleteMessageActions method")
//			},
//			CreateChatRoomDeleteMessageActionsWithSdFunc: func(ctx context.Context, sd Sd, params []parameter.CreateChatRoomDeleteMessageActionParam) (int64, error) {
//				panic("mock out the CreateChatRoomDeleteMessageActionsWithSd method")
//			},
//			CreateChatRoomRemoveMemberActionFunc: func(ctx context.Context, param parameter.CreateChatRoomRemoveMemberActionParam) (entity.ChatRoomRemoveMemberAction, error) {
//				panic("mock out the CreateChatRoomRemoveMemberAction method")
//			},
//			CreateChatRoomRemoveMemberActionWithSdFunc: func(ctx context.Context, sd Sd, param parameter.CreateChatRoomRemoveMemberActionParam) (entity.ChatRoomRemoveMemberAction, error) {
//				panic("mock out the CreateChatRoomRemoveMemberActionWithSd method")
//			},
//			CreateChatRoomRemoveMemberActionsFunc: func(ctx context.Context, params []parameter.CreateChatRoomRemoveMemberActionParam) (int64, error) {
//				panic("mock out the CreateChatRoomRemoveMemberActions method")
//			},
//			CreateChatRoomRemoveMemberActionsWithSdFunc: func(ctx context.Context, sd Sd, params []parameter.CreateChatRoomRemoveMemberActionParam) (int64, error) {
//				panic("mock out the CreateChatRoomRemoveMemberActionsWithSd method")
//			},
//			CreateChatRoomUpdateNameActionFunc: func(ctx context.Context, param parameter.CreateChatRoomUpdateNameActionParam) (entity.ChatRoomUpdateNameAction, error) {
//				panic("mock out the CreateChatRoomUpdateNameAction method")
//			},
//			CreateChatRoomUpdateNameActionWithSdFunc: func(ctx context.Context, sd Sd, param parameter.CreateChatRoomUpdateNameActionParam) (entity.ChatRoomUpdateNameAction, error) {
//				panic("mock out the CreateChatRoomUpdateNameActionWithSd method")
//			},
//			CreateChatRoomUpdateNameActionsFunc: func(ctx context.Context, params []parameter.CreateChatRoomUpdateNameActionParam) (int64, error) {
//				panic("mock out the CreateChatRoomUpdateNameActions method")
//			},
//			CreateChatRoomUpdateNameActionsWithSdFunc: func(ctx context.Context, sd Sd, params []parameter.CreateChatRoomUpdateNameActionParam) (int64, error) {
//				panic("mock out the CreateChatRoomUpdateNameActionsWithSd method")
//			},
//			CreateChatRoomWithSdFunc: func(ctx context.Context, sd Sd, param parameter.CreateChatRoomParam) (entity.ChatRoom, error) {
//				panic("mock out the CreateChatRoomWithSd method")
//			},
//			CreateChatRoomWithdrawActionFunc: func(ctx context.Context, param parameter.CreateChatRoomWithdrawActionParam) (entity.ChatRoomWithdrawAction, error) {
//				panic("mock out the CreateChatRoomWithdrawAction method")
//			},
//			CreateChatRoomWithdrawActionWithSdFunc: func(ctx context.Context, sd Sd, param parameter.CreateChatRoomWithdrawActionParam) (entity.ChatRoomWithdrawAction, error) {
//				panic("mock out the CreateChatRoomWithdrawActionWithSd method")
//			},
//			CreateChatRoomWithdrawActionsFunc: func(ctx context.Context, params []parameter.CreateChatRoomWithdrawActionParam) (int64, error) {
//				panic("mock out the CreateChatRoomWithdrawActions method")
//			},
//			CreateChatRoomWithdrawActionsWithSdFunc: func(ctx context.Context, sd Sd, params []parameter.CreateChatRoomWithdrawActionParam) (int64, error) {
//				panic("mock out the CreateChatRoomWithdrawActionsWithSd method")
//			},
//			CreateChatRoomsFunc: func(ctx context.Context, params []parameter.CreateChatRoomParam) (int64, error) {
//				panic("mock out the CreateChatRooms method")
//			},
//			CreateChatRoomsWithSdFunc: func(ctx context.Context, sd Sd, params []parameter.CreateChatRoomParam) (int64, error) {
//				panic("mock out the CreateChatRoomsWithSd method")
//			},
//			CreateEventTypeFunc: func(ctx context.Context, param parameter.CreateEventTypeParam) (entity.EventType, error) {
//				panic("mock out the CreateEventType method")
//			},
//			CreateEventTypeWithSdFunc: func(ctx context.Context, sd Sd, param parameter.CreateEventTypeParam) (entity.EventType, error) {
//				panic("mock out the CreateEventTypeWithSd method")
//			},
//			CreateEventTypesFunc: func(ctx context.Context, params []parameter.CreateEventTypeParam) (int64, error) {
//				panic("mock out the CreateEventTypes method")
//			},
//			CreateEventTypesWithSdFunc: func(ctx context.Context, sd Sd, params []parameter.CreateEventTypeParam) (int64, error) {
//				panic("mock out the CreateEventTypesWithSd method")
//			},
//			CreateFileFunc: func(ctx context.Context, param parameter.CreateFileParam) (entity.File, error) {
//				panic("mock out the CreateFile method")
//			},
//			CreateFileWithSdFunc: func(ctx context.Context, sd Sd, param parameter.CreateFileParam) (entity.File, error) {
//				panic("mock out the CreateFileWithSd method")
//			},
//			CreateFilesFunc: func(ctx context.Context, params []parameter.CreateFileParam) (int64, error) {
//				panic("mock out the CreateFiles method")
//			},
//			CreateFilesWithSdFunc: func(ctx context.Context, sd Sd, params []parameter.CreateFileParam) (int64, error) {
//				panic("mock out the CreateFilesWithSd method")
//			},
//			CreateGradeFunc: func(ctx context.Context, param parameter.CreateGradeParam) (entity.Grade, error) {
//				panic("mock out the CreateGrade method")
//			},
//			CreateGradeWithSdFunc: func(ctx context.Context, sd Sd, param parameter.CreateGradeParam) (entity.Grade, error) {
//				panic("mock out the CreateGradeWithSd method")
//			},
//			CreateGradesFunc: func(ctx context.Context, params []parameter.CreateGradeParam) (int64, error) {
//				panic("mock out the CreateGrades method")
//			},
//			CreateGradesWithSdFunc: func(ctx context.Context, sd Sd, params []parameter.CreateGradeParam) (int64, error) {
//				panic("mock out the CreateGradesWithSd method")
//			},
//			CreateGroupFunc: func(ctx context.Context, param parameter.CreateGroupParam) (entity.Group, error) {
//				panic("mock out the CreateGroup method")
//			},
//			CreateGroupWithSdFunc: func(ctx context.Context, sd Sd, param parameter.CreateGroupParam) (entity.Group, error) {
//				panic("mock out the CreateGroupWithSd method")
//			},
//			CreateGroupsFunc: func(ctx context.Context, params []parameter.CreateGroupParam) (int64, error) {
//				panic("mock out the CreateGroups method")
//			},
//			CreateGroupsWithSdFunc: func(ctx context.Context, sd Sd, params []parameter.CreateGroupParam) (int64, error) {
//				panic("mock out the CreateGroupsWithSd method")
//			},
//			CreateImageFunc: func(ctx context.Context, param parameter.CreateImageParam) (entity.Image, error) {
//				panic("mock out the CreateImage method")
//			},
//			CreateImageWithSdFunc: func(ctx context.Context, sd Sd, param parameter.CreateImageParam) (entity.Image, error) {
//				panic("mock out the CreateImageWithSd method")
//			},
//			CreateImagesFunc: func(ctx context.Context, params []parameter.CreateImageParam) (int64, error) {
//				panic("mock out the CreateImages method")
//			},
//			CreateImagesWithSdFunc: func(ctx context.Context, sd Sd, params []parameter.CreateImageParam) (int64, error) {
//				panic("mock out the CreateImagesWithSd method")
//			},
//			CreateMemberFunc: func(ctx context.Context, param parameter.CreateMemberParam) (entity.Member, error) {
//				panic("mock out the CreateMember method")
//			},
//			CreateMemberWithSdFunc: func(ctx context.Context, sd Sd, param parameter.CreateMemberParam) (entity.Member, error) {
//				panic("mock out the CreateMemberWithSd method")
//			},
//			CreateMembersFunc: func(ctx context.Context, params []parameter.CreateMemberParam) (int64, error) {
//				panic("mock out the CreateMembers method")
//			},
//			CreateMembersWithSdFunc: func(ctx context.Context, sd Sd, params []parameter.CreateMemberParam) (int64, error) {
//				panic("mock out the CreateMembersWithSd method")
//			},
//			CreateMessageFunc: func(ctx context.Context, param parameter.CreateMessageParam) (entity.Message, error) {
//				panic("mock out the CreateMessage method")
//			},
//			CreateMessageWithSdFunc: func(ctx context.Context, sd Sd, param parameter.CreateMessageParam) (entity.Message, error) {
//				panic("mock out the CreateMessageWithSd method")
//			},
//			CreateMessagesFunc: func(ctx context.Context, params []parameter.CreateMessageParam) (int64, error) {
//				panic("mock out the CreateMessages method")
//			},
//			CreateMessagesWithSdFunc: func(ctx context.Context, sd Sd, params []parameter.CreateMessageParam) (int64, error) {
//				panic("mock out the CreateMessagesWithSd method")
//			},
//			CreateMimeTypeFunc: func(ctx context.Context, param parameter.CreateMimeTypeParam) (entity.MimeType, error) {
//				panic("mock out the CreateMimeType method")
//			},
//			CreateMimeTypeWithSdFunc: func(ctx context.Context, sd Sd, param parameter.CreateMimeTypeParam) (entity.MimeType, error) {
//				panic("mock out the CreateMimeTypeWithSd method")
//			},
//			CreateMimeTypesFunc: func(ctx context.Context, params []parameter.CreateMimeTypeParam) (int64, error) {
//				panic("mock out the CreateMimeTypes method")
//			},
//			CreateMimeTypesWithSdFunc: func(ctx context.Context, sd Sd, params []parameter.CreateMimeTypeParam) (int64, error) {
//				panic("mock out the CreateMimeTypesWithSd method")
//			},
//			CreateOrganizationFunc: func(ctx context.Context, param parameter.CreateOrganizationParam) (entity.Organization, error) {
//				panic("mock out the CreateOrganization method")
//			},
//			CreateOrganizationWithSdFunc: func(ctx context.Context, sd Sd, param parameter.CreateOrganizationParam) (entity.Organization, error) {
//				panic("mock out the CreateOrganizationWithSd method")
//			},
//			CreateOrganizationsFunc: func(ctx context.Context, params []parameter.CreateOrganizationParam) (int64, error) {
//				panic("mock out the CreateOrganizations method")
//			},
//			CreateOrganizationsWithSdFunc: func(ctx context.Context, sd Sd, params []parameter.CreateOrganizationParam) (int64, error) {
//				panic("mock out the CreateOrganizationsWithSd method")
//			},
//			CreatePermissionFunc: func(ctx context.Context, param parameter.CreatePermissionParam) (entity.Permission, error) {
//				panic("mock out the CreatePermission method")
//			},
//			CreatePermissionCategoriesFunc: func(ctx context.Context, params []parameter.CreatePermissionCategoryParam) (int64, error) {
//				panic("mock out the CreatePermissionCategories method")
//			},
//			CreatePermissionCategoriesWithSdFunc: func(ctx context.Context, sd Sd, params []parameter.CreatePermissionCategoryParam) (int64, error) {
//				panic("mock out the CreatePermissionCategoriesWithSd method")
//			},
//			CreatePermissionCategoryFunc: func(ctx context.Context, param parameter.CreatePermissionCategoryParam) (entity.PermissionCategory, error) {
//				panic("mock out the CreatePermissionCategory method")
//			},
//			CreatePermissionCategoryWithSdFunc: func(ctx context.Context, sd Sd, param parameter.CreatePermissionCategoryParam) (entity.PermissionCategory, error) {
//				panic("mock out the CreatePermissionCategoryWithSd method")
//			},
//			CreatePermissionWithSdFunc: func(ctx context.Context, sd Sd, param parameter.CreatePermissionParam) (entity.Permission, error) {
//				panic("mock out the CreatePermissionWithSd method")
//			},
//			CreatePermissionsFunc: func(ctx context.Context, params []parameter.CreatePermissionParam) (int64, error) {
//				panic("mock out the CreatePermissions method")
//			},
//			CreatePermissionsWithSdFunc: func(ctx context.Context, sd Sd, params []parameter.CreatePermissionParam) (int64, error) {
//				panic("mock out the CreatePermissionsWithSd method")
//			},
//			CreatePoliciesFunc: func(ctx context.Context, params []parameter.CreatePolicyParam) (int64, error) {
//				panic("mock out the CreatePolicies method")
//			},
//			CreatePoliciesWithSdFunc: func(ctx context.Context, sd Sd, params []parameter.CreatePolicyParam) (int64, error) {
//				panic("mock out the CreatePoliciesWithSd method")
//			},
//			CreatePolicyFunc: func(ctx context.Context, param parameter.CreatePolicyParam) (entity.Policy, error) {
//				panic("mock out the CreatePolicy method")
//			},
//			CreatePolicyCategoriesFunc: func(ctx context.Context, params []parameter.CreatePolicyCategoryParam) (int64, error) {
//				panic("mock out the CreatePolicyCategories method")
//			},
//			CreatePolicyCategoriesWithSdFunc: func(ctx context.Context, sd Sd, params []parameter.CreatePolicyCategoryParam) (int64, error) {
//				panic("mock out the CreatePolicyCategoriesWithSd method")
//			},
//			CreatePolicyCategoryFunc: func(ctx context.Context, param parameter.CreatePolicyCategoryParam) (entity.PolicyCategory, error) {
//				panic("mock out the CreatePolicyCategory method")
//			},
//			CreatePolicyCategoryWithSdFunc: func(ctx context.Context, sd Sd, param parameter.CreatePolicyCategoryParam) (entity.PolicyCategory, error) {
//				panic("mock out the CreatePolicyCategoryWithSd method")
//			},
//			CreatePolicyWithSdFunc: func(ctx context.Context, sd Sd, param parameter.CreatePolicyParam) (entity.Policy, error) {
//				panic("mock out the CreatePolicyWithSd method")
//			},
//			CreateProfessorFunc: func(ctx context.Context, param parameter.CreateProfessorParam) (entity.Professor, error) {
//				panic("mock out the CreateProfessor method")
//			},
//			CreateProfessorWithSdFunc: func(ctx context.Context, sd Sd, param parameter.CreateProfessorParam) (entity.Professor, error) {
//				panic("mock out the CreateProfessorWithSd method")
//			},
//			CreateProfessorsFunc: func(ctx context.Context, params []parameter.CreateProfessorParam) (int64, error) {
//				panic("mock out the CreateProfessors method")
//			},
//			CreateProfessorsWithSdFunc: func(ctx context.Context, sd Sd, params []parameter.CreateProfessorParam) (int64, error) {
//				panic("mock out the CreateProfessorsWithSd method")
//			},
//			CreateReadReceiptFunc: func(ctx context.Context, param parameter.CreateReadReceiptParam) (entity.ReadReceipt, error) {
//				panic("mock out the CreateReadReceipt method")
//			},
//			CreateReadReceiptWithSdFunc: func(ctx context.Context, sd Sd, param parameter.CreateReadReceiptParam) (entity.ReadReceipt, error) {
//				panic("mock out the CreateReadReceiptWithSd method")
//			},
//			CreateReadReceiptsFunc: func(ctx context.Context, params []parameter.CreateReadReceiptParam) (int64, error) {
//				panic("mock out the CreateReadReceipts method")
//			},
//			CreateReadReceiptsWithSdFunc: func(ctx context.Context, sd Sd, params []parameter.CreateReadReceiptParam) (int64, error) {
//				panic("mock out the CreateReadReceiptsWithSd method")
//			},
//			CreateRecordTypeFunc: func(ctx context.Context, param parameter.CreateRecordTypeParam) (entity.RecordType, error) {
//				panic("mock out the CreateRecordType method")
//			},
//			CreateRecordTypeWithSdFunc: func(ctx context.Context, sd Sd, param parameter.CreateRecordTypeParam) (entity.RecordType, error) {
//				panic("mock out the CreateRecordTypeWithSd method")
//			},
//			CreateRecordTypesFunc: func(ctx context.Context, params []parameter.CreateRecordTypeParam) (int64, error) {
//				panic("mock out the CreateRecordTypes method")
//			},
//			CreateRecordTypesWithSdFunc: func(ctx context.Context, sd Sd, params []parameter.CreateRecordTypeParam) (int64, error) {
//				panic("mock out the CreateRecordTypesWithSd method")
//			},
//			CreateRoleFunc: func(ctx context.Context, param parameter.CreateRoleParam) (entity.Role, error) {
//				panic("mock out the CreateRole method")
//			},
//			CreateRoleWithSdFunc: func(ctx context.Context, sd Sd, param parameter.CreateRoleParam) (entity.Role, error) {
//				panic("mock out the CreateRoleWithSd method")
//			},
//			CreateRolesFunc: func(ctx context.Context, params []parameter.CreateRoleParam) (int64, error) {
//				panic("mock out the CreateRoles method")
//			},
//			CreateRolesWithSdFunc: func(ctx context.Context, sd Sd, params []parameter.CreateRoleParam) (int64, error) {
//				panic("mock out the CreateRolesWithSd method")
//			},
//			CreateStudentFunc: func(ctx context.Context, param parameter.CreateStudentParam) (entity.Student, error) {
//				panic("mock out the CreateStudent method")
//			},
//			CreateStudentWithSdFunc: func(ctx context.Context, sd Sd, param parameter.CreateStudentParam) (entity.Student, error) {
//				panic("mock out the CreateStudentWithSd method")
//			},
//			CreateStudentsFunc: func(ctx context.Context, params []parameter.CreateStudentParam) (int64, error) {
//				panic("mock out the CreateStudents method")
//			},
//			CreateStudentsWithSdFunc: func(ctx context.Context, sd Sd, params []parameter.CreateStudentParam) (int64, error) {
//				panic("mock out the CreateStudentsWithSd method")
//			},
//			DeleteAbsenceFunc: func(ctx context.Context, absenceID uuid.UUID) (int64, error) {
//				panic("mock out the DeleteAbsence method")
//			},
//			DeleteAbsenceWithSdFunc: func(ctx context.Context, sd Sd, absenceID uuid.UUID) (int64, error) {
//				panic("mock out the DeleteAbsenceWithSd method")
//			},
//			DeleteAttachableItemFunc: func(ctx context.Context, attachableItemID uuid.UUID) (int64, error) {
//				panic("mock out the DeleteAttachableItem method")
//			},
//			DeleteAttachableItemWithSdFunc: func(ctx context.Context, sd Sd, attachableItemID uuid.UUID) (int64, error) {
//				panic("mock out the DeleteAttachableItemWithSd method")
//			},
//			DeleteAttendStatusFunc: func(ctx context.Context, attendStatusID uuid.UUID) (int64, error) {
//				panic("mock out the DeleteAttendStatus method")
//			},
//			DeleteAttendStatusByKeyFunc: func(ctx context.Context, key string) (int64, error) {
//				panic("mock out the DeleteAttendStatusByKey method")
//			},
//			DeleteAttendStatusByKeyWithSdFunc: func(ctx context.Context, sd Sd, key string) (int64, error) {
//				panic("mock out the DeleteAttendStatusByKeyWithSd method")
//			},
//			DeleteAttendStatusWithSdFunc: func(ctx context.Context, sd Sd, attendStatusID uuid.UUID) (int64, error) {
//				panic("mock out the DeleteAttendStatusWithSd method")
//			},
//			DeleteAttendanceTypeFunc: func(ctx context.Context, attendanceTypeID uuid.UUID) (int64, error) {
//				panic("mock out the DeleteAttendanceType method")
//			},
//			DeleteAttendanceTypeByKeyFunc: func(ctx context.Context, key string) (int64, error) {
//				panic("mock out the DeleteAttendanceTypeByKey method")
//			},
//			DeleteAttendanceTypeByKeyWithSdFunc: func(ctx context.Context, sd Sd, key string) (int64, error) {
//				panic("mock out the DeleteAttendanceTypeByKeyWithSd method")
//			},
//			DeleteAttendanceTypeWithSdFunc: func(ctx context.Context, sd Sd, attendanceTypeID uuid.UUID) (int64, error) {
//				panic("mock out the DeleteAttendanceTypeWithSd method")
//			},
//			DeleteChatRoomFunc: func(ctx context.Context, chatRoomID uuid.UUID) (int64, error) {
//				panic("mock out the DeleteChatRoom method")
//			},
//			DeleteChatRoomActionFunc: func(ctx context.Context, chatRoomActionID uuid.UUID) (int64, error) {
//				panic("mock out the DeleteChatRoomAction method")
//			},
//			DeleteChatRoomActionTypeFunc: func(ctx context.Context, recordTypeID uuid.UUID) (int64, error) {
//				panic("mock out the DeleteChatRoomActionType method")
//			},
//			DeleteChatRoomActionTypeByKeyFunc: func(ctx context.Context, key string) (int64, error) {
//				panic("mock out the DeleteChatRoomActionTypeByKey method")
//			},
//			DeleteChatRoomActionTypeByKeyWithSdFunc: func(ctx context.Context, sd Sd, key string) (int64, error) {
//				panic("mock out the DeleteChatRoomActionTypeByKeyWithSd method")
//			},
//			DeleteChatRoomActionTypeWithSdFunc: func(ctx context.Context, sd Sd, recordTypeID uuid.UUID) (int64, error) {
//				panic("mock out the DeleteChatRoomActionTypeWithSd method")
//			},
//			DeleteChatRoomActionWithSdFunc: func(ctx context.Context, sd Sd, chatRoomActionID uuid.UUID) (int64, error) {
//				panic("mock out the DeleteChatRoomActionWithSd method")
//			},
//			DeleteChatRoomAddMemberActionFunc: func(ctx context.Context, chatRoomAddMemberActionID uuid.UUID) (int64, error) {
//				panic("mock out the DeleteChatRoomAddMemberAction method")
//			},
//			DeleteChatRoomAddMemberActionWithSdFunc: func(ctx context.Context, sd Sd, chatRoomAddMemberActionID uuid.UUID) (int64, error) {
//				panic("mock out the DeleteChatRoomAddMemberActionWithSd method")
//			},
//			DeleteChatRoomAddedMemberFunc: func(ctx context.Context, chatRoomAddMemberActionID uuid.UUID, memberID uuid.UUID) (int64, error) {
//				panic("mock out the DeleteChatRoomAddedMember method")
//			},
//			DeleteChatRoomAddedMemberOnChatRoomAddMemberActionWithSdFunc: func(ctx context.Context, sd Sd, chatRoomAddMemberActionID uuid.UUID) (int64, error) {
//				panic("mock out the DeleteChatRoomAddedMemberOnChatRoomAddMemberActionWithSd method")
//			},
//			DeleteChatRoomAddedMemberWithSdFunc: func(ctx context.Context, sd Sd, chatRoomAddMemberActionID uuid.UUID, memberID uuid.UUID) (int64, error) {
//				panic("mock out the DeleteChatRoomAddedMemberWithSd method")
//			},
//			DeleteChatRoomAddedMembersOnChatRoomAddMemberActionFunc: func(ctx context.Context, chatRoomAddMemberActionID uuid.UUID) (int64, error) {
//				panic("mock out the DeleteChatRoomAddedMembersOnChatRoomAddMemberAction method")
//			},
//			DeleteChatRoomAddedMembersOnChatRoomAddMemberActionsFunc: func(ctx context.Context, chatRoomAddMemberActionIDs []uuid.UUID) (int64, error) {
//				panic("mock out the DeleteChatRoomAddedMembersOnChatRoomAddMemberActions method")
//			},
//			DeleteChatRoomAddedMembersOnChatRoomAddMemberActionsWithSdFunc: func(ctx context.Context, sd Sd, chatRoomAddMemberActionIDs []uuid.UUID) (int64, error) {
//				panic("mock out the DeleteChatRoomAddedMembersOnChatRoomAddMemberActionsWithSd method")
//			},
//			DeleteChatRoomAddedMembersOnMemberFunc: func(ctx context.Context, memberID uuid.UUID) (int64, error) {
//				panic("mock out the DeleteChatRoomAddedMembersOnMember method")
//			},
//			DeleteChatRoomAddedMembersOnMemberWithSdFunc: func(ctx context.Context, sd Sd, memberID uuid.UUID) (int64, error) {
//				panic("mock out the DeleteChatRoomAddedMembersOnMemberWithSd method")
//			},
//			DeleteChatRoomAddedMembersOnMembersFunc: func(ctx context.Context, memberIDs []uuid.UUID) (int64, error) {
//				panic("mock out the DeleteChatRoomAddedMembersOnMembers method")
//			},
//			DeleteChatRoomAddedMembersOnMembersWithSdFunc: func(ctx context.Context, sd Sd, memberIDs []uuid.UUID) (int64, error) {
//				panic("mock out the DeleteChatRoomAddedMembersOnMembersWithSd method")
//			},
//			DeleteChatRoomCreateActionFunc: func(ctx context.Context, chatRoomCreateActionID uuid.UUID) (int64, error) {
//				panic("mock out the DeleteChatRoomCreateAction method")
//			},
//			DeleteChatRoomCreateActionWithSdFunc: func(ctx context.Context, sd Sd, chatRoomCreateActionID uuid.UUID) (int64, error) {
//				panic("mock out the DeleteChatRoomCreateActionWithSd method")
//			},
//			DeleteChatRoomDeleteMessageActionFunc: func(ctx context.Context, chatRoomDeleteMessageActionID uuid.UUID) (int64, error) {
//				panic("mock out the DeleteChatRoomDeleteMessageAction method")
//			},
//			DeleteChatRoomDeleteMessageActionWithSdFunc: func(ctx context.Context, sd Sd, chatRoomDeleteMessageActionID uuid.UUID) (int64, error) {
//				panic("mock out the DeleteChatRoomDeleteMessageActionWithSd method")
//			},
//			DeleteChatRoomRemoveMemberActionFunc: func(ctx context.Context, chatRoomRemoveMemberActionID uuid.UUID) (int64, error) {
//				panic("mock out the DeleteChatRoomRemoveMemberAction method")
//			},
//			DeleteChatRoomRemoveMemberActionWithSdFunc: func(ctx context.Context, sd Sd, chatRoomRemoveMemberActionID uuid.UUID) (int64, error) {
//				panic("mock out the DeleteChatRoomRemoveMemberActionWithSd method")
//			},
//			DeleteChatRoomRemovedMemberFunc: func(ctx context.Context, chatRoomRemoveMemberActionID uuid.UUID, memberID uuid.UUID) (int64, error) {
//				panic("mock out the DeleteChatRoomRemovedMember method")
//			},
//			DeleteChatRoomRemovedMemberOnChatRoomRemoveMemberActionWithSdFunc: func(ctx context.Context, sd Sd, chatRoomRemoveMemberActionID uuid.UUID) (int64, error) {
//				panic("mock out the DeleteChatRoomRemovedMemberOnChatRoomRemoveMemberActionWithSd method")
//			},
//			DeleteChatRoomRemovedMemberWithSdFunc: func(ctx context.Context, sd Sd, chatRoomRemoveMemberActionID uuid.UUID, memberID uuid.UUID) (int64, error) {
//				panic("mock out the DeleteChatRoomRemovedMemberWithSd method")
//			},
//			DeleteChatRoomRemovedMembersOnChatRoomRemoveMemberActionFunc: func(ctx context.Context, chatRoomRemoveMemberActionID uuid.UUID) (int64, error) {
//				panic("mock out the DeleteChatRoomRemovedMembersOnChatRoomRemoveMemberAction method")
//			},
//			DeleteChatRoomRemovedMembersOnChatRoomRemoveMemberActionsFunc: func(ctx context.Context, chatRoomRemoveMemberActionIDs []uuid.UUID) (int64, error) {
//				panic("mock out the DeleteChatRoomRemovedMembersOnChatRoomRemoveMemberActions method")
//			},
//			DeleteChatRoomRemovedMembersOnChatRoomRemoveMemberActionsWithSdFunc: func(ctx context.Context, sd Sd, chatRoomRemoveMemberActionIDs []uuid.UUID) (int64, error) {
//				panic("mock out the DeleteChatRoomRemovedMembersOnChatRoomRemoveMemberActionsWithSd method")
//			},
//			DeleteChatRoomRemovedMembersOnMemberFunc: func(ctx context.Context, memberID uuid.UUID) (int64, error) {
//				panic("mock out the DeleteChatRoomRemovedMembersOnMember method")
//			},
//			DeleteChatRoomRemovedMembersOnMemberWithSdFunc: func(ctx context.Context, sd Sd, memberID uuid.UUID) (int64, error) {
//				panic("mock out the DeleteChatRoomRemovedMembersOnMemberWithSd method")
//			},
//			DeleteChatRoomRemovedMembersOnMembersFunc: func(ctx context.Context, memberIDs []uuid.UUID) (int64, error) {
//				panic("mock out the DeleteChatRoomRemovedMembersOnMembers method")
//			},
//			DeleteChatRoomRemovedMembersOnMembersWithSdFunc: func(ctx context.Context, sd Sd, memberIDs []uuid.UUID) (int64, error) {
//				panic("mock out the DeleteChatRoomRemovedMembersOnMembersWithSd method")
//			},
//			DeleteChatRoomUpdateNameActionFunc: func(ctx context.Context, chatRoomUpdateNameActionID uuid.UUID) (int64, error) {
//				panic("mock out the DeleteChatRoomUpdateNameAction method")
//			},
//			DeleteChatRoomUpdateNameActionWithSdFunc: func(ctx context.Context, sd Sd, chatRoomUpdateNameActionID uuid.UUID) (int64, error) {
//				panic("mock out the DeleteChatRoomUpdateNameActionWithSd method")
//			},
//			DeleteChatRoomWithSdFunc: func(ctx context.Context, sd Sd, chatRoomID uuid.UUID) (int64, error) {
//				panic("mock out the DeleteChatRoomWithSd method")
//			},
//			DeleteChatRoomWithdrawActionFunc: func(ctx context.Context, chatRoomWithdrawActionID uuid.UUID) (int64, error) {
//				panic("mock out the DeleteChatRoomWithdrawAction method")
//			},
//			DeleteChatRoomWithdrawActionWithSdFunc: func(ctx context.Context, sd Sd, chatRoomWithdrawActionID uuid.UUID) (int64, error) {
//				panic("mock out the DeleteChatRoomWithdrawActionWithSd method")
//			},
//			DeleteEventTypeFunc: func(ctx context.Context, eventTypeID uuid.UUID) (int64, error) {
//				panic("mock out the DeleteEventType method")
//			},
//			DeleteEventTypeByKeyFunc: func(ctx context.Context, key string) (int64, error) {
//				panic("mock out the DeleteEventTypeByKey method")
//			},
//			DeleteEventTypeByKeyWithSdFunc: func(ctx context.Context, sd Sd, key string) (int64, error) {
//				panic("mock out the DeleteEventTypeByKeyWithSd method")
//			},
//			DeleteEventTypeWithSdFunc: func(ctx context.Context, sd Sd, eventTypeID uuid.UUID) (int64, error) {
//				panic("mock out the DeleteEventTypeWithSd method")
//			},
//			DeleteFileFunc: func(ctx context.Context, fileID uuid.UUID) (int64, error) {
//				panic("mock out the DeleteFile method")
//			},
//			DeleteFileWithSdFunc: func(ctx context.Context, sd Sd, fileID uuid.UUID) (int64, error) {
//				panic("mock out the DeleteFileWithSd method")
//			},
//			DeleteGradeFunc: func(ctx context.Context, gradeID uuid.UUID) (int64, error) {
//				panic("mock out the DeleteGrade method")
//			},
//			DeleteGradeWithSdFunc: func(ctx context.Context, sd Sd, gradeID uuid.UUID) (int64, error) {
//				panic("mock out the DeleteGradeWithSd method")
//			},
//			DeleteGroupFunc: func(ctx context.Context, groupID uuid.UUID) (int64, error) {
//				panic("mock out the DeleteGroup method")
//			},
//			DeleteGroupWithSdFunc: func(ctx context.Context, sd Sd, groupID uuid.UUID) (int64, error) {
//				panic("mock out the DeleteGroupWithSd method")
//			},
//			DeleteImageFunc: func(ctx context.Context, imageID uuid.UUID) (int64, error) {
//				panic("mock out the DeleteImage method")
//			},
//			DeleteImageWithSdFunc: func(ctx context.Context, sd Sd, imageID uuid.UUID) (int64, error) {
//				panic("mock out the DeleteImageWithSd method")
//			},
//			DeleteMemberFunc: func(ctx context.Context, memberID uuid.UUID) (int64, error) {
//				panic("mock out the DeleteMember method")
//			},
//			DeleteMemberWithSdFunc: func(ctx context.Context, sd Sd, memberID uuid.UUID) (int64, error) {
//				panic("mock out the DeleteMemberWithSd method")
//			},
//			DeleteMessageFunc: func(ctx context.Context, messageID uuid.UUID) (int64, error) {
//				panic("mock out the DeleteMessage method")
//			},
//			DeleteMessageWithSdFunc: func(ctx context.Context, sd Sd, messageID uuid.UUID) (int64, error) {
//				panic("mock out the DeleteMessageWithSd method")
//			},
//			DeleteMessagesOnChatRoomFunc: func(ctx context.Context, chatRoomID uuid.UUID) (int64, error) {
//				panic("mock out the DeleteMessagesOnChatRoom method")
//			},
//			DeleteMessagesOnChatRoomWithSdFunc: func(ctx context.Context, sd Sd, chatRoomID uuid.UUID) (int64, error) {
//				panic("mock out the DeleteMessagesOnChatRoomWithSd method")
//			},
//			DeleteMimeTypeFunc: func(ctx context.Context, mimeTypeID uuid.UUID) (int64, error) {
//				panic("mock out the DeleteMimeType method")
//			},
//			DeleteMimeTypeByKeyFunc: func(ctx context.Context, key string) (int64, error) {
//				panic("mock out the DeleteMimeTypeByKey method")
//			},
//			DeleteMimeTypeByKeyWithSdFunc: func(ctx context.Context, sd Sd, key string) (int64, error) {
//				panic("mock out the DeleteMimeTypeByKeyWithSd method")
//			},
//			DeleteMimeTypeWithSdFunc: func(ctx context.Context, sd Sd, mimeTypeID uuid.UUID) (int64, error) {
//				panic("mock out the DeleteMimeTypeWithSd method")
//			},
//			DeleteOrganizationFunc: func(ctx context.Context, organizationID uuid.UUID) (int64, error) {
//				panic("mock out the DeleteOrganization method")
//			},
//			DeleteOrganizationWithSdFunc: func(ctx context.Context, sd Sd, organizationID uuid.UUID) (int64, error) {
//				panic("mock out the DeleteOrganizationWithSd method")
//			},
//			DeletePermissionFunc: func(ctx context.Context, permissionID uuid.UUID) (int64, error) {
//				panic("mock out the DeletePermission method")
//			},
//			DeletePermissionByKeyFunc: func(ctx context.Context, key string) (int64, error) {
//				panic("mock out the DeletePermissionByKey method")
//			},
//			DeletePermissionByKeyWithSdFunc: func(ctx context.Context, sd Sd, key string) (int64, error) {
//				panic("mock out the DeletePermissionByKeyWithSd method")
//			},
//			DeletePermissionCategoryFunc: func(ctx context.Context, permissionCategoryID uuid.UUID) (int64, error) {
//				panic("mock out the DeletePermissionCategory method")
//			},
//			DeletePermissionCategoryByKeyFunc: func(ctx context.Context, key string) (int64, error) {
//				panic("mock out the DeletePermissionCategoryByKey method")
//			},
//			DeletePermissionCategoryByKeyWithSdFunc: func(ctx context.Context, sd Sd, key string) (int64, error) {
//				panic("mock out the DeletePermissionCategoryByKeyWithSd method")
//			},
//			DeletePermissionCategoryWithSdFunc: func(ctx context.Context, sd Sd, permissionCategoryID uuid.UUID) (int64, error) {
//				panic("mock out the DeletePermissionCategoryWithSd method")
//			},
//			DeletePermissionWithSdFunc: func(ctx context.Context, sd Sd, permissionID uuid.UUID) (int64, error) {
//				panic("mock out the DeletePermissionWithSd method")
//			},
//			DeletePolicyFunc: func(ctx context.Context, policyID uuid.UUID) (int64, error) {
//				panic("mock out the DeletePolicy method")
//			},
//			DeletePolicyByKeyFunc: func(ctx context.Context, key string) (int64, error) {
//				panic("mock out the DeletePolicyByKey method")
//			},
//			DeletePolicyByKeyWithSdFunc: func(ctx context.Context, sd Sd, key string) (int64, error) {
//				panic("mock out the DeletePolicyByKeyWithSd method")
//			},
//			DeletePolicyCategoryFunc: func(ctx context.Context, policyCategoryID uuid.UUID) (int64, error) {
//				panic("mock out the DeletePolicyCategory method")
//			},
//			DeletePolicyCategoryByKeyFunc: func(ctx context.Context, key string) (int64, error) {
//				panic("mock out the DeletePolicyCategoryByKey method")
//			},
//			DeletePolicyCategoryByKeyWithSdFunc: func(ctx context.Context, sd Sd, key string) (int64, error) {
//				panic("mock out the DeletePolicyCategoryByKeyWithSd method")
//			},
//			DeletePolicyCategoryWithSdFunc: func(ctx context.Context, sd Sd, policyCategoryID uuid.UUID) (int64, error) {
//				panic("mock out the DeletePolicyCategoryWithSd method")
//			},
//			DeletePolicyWithSdFunc: func(ctx context.Context, sd Sd, policyID uuid.UUID) (int64, error) {
//				panic("mock out the DeletePolicyWithSd method")
//			},
//			DeleteProfessorFunc: func(ctx context.Context, professorID uuid.UUID) (int64, error) {
//				panic("mock out the DeleteProfessor method")
//			},
//			DeleteProfessorWithSdFunc: func(ctx context.Context, sd Sd, professorID uuid.UUID) (int64, error) {
//				panic("mock out the DeleteProfessorWithSd method")
//			},
//			DeleteRecordTypeFunc: func(ctx context.Context, recordTypeID uuid.UUID) (int64, error) {
//				panic("mock out the DeleteRecordType method")
//			},
//			DeleteRecordTypeByKeyFunc: func(ctx context.Context, key string) (int64, error) {
//				panic("mock out the DeleteRecordTypeByKey method")
//			},
//			DeleteRecordTypeByKeyWithSdFunc: func(ctx context.Context, sd Sd, key string) (int64, error) {
//				panic("mock out the DeleteRecordTypeByKeyWithSd method")
//			},
//			DeleteRecordTypeWithSdFunc: func(ctx context.Context, sd Sd, recordTypeID uuid.UUID) (int64, error) {
//				panic("mock out the DeleteRecordTypeWithSd method")
//			},
//			DeleteRoleFunc: func(ctx context.Context, roleID uuid.UUID) (int64, error) {
//				panic("mock out the DeleteRole method")
//			},
//			DeleteRoleWithSdFunc: func(ctx context.Context, sd Sd, roleID uuid.UUID) (int64, error) {
//				panic("mock out the DeleteRoleWithSd method")
//			},
//			DeleteStudentFunc: func(ctx context.Context, studentID uuid.UUID) (int64, error) {
//				panic("mock out the DeleteStudent method")
//			},
//			DeleteStudentWithSdFunc: func(ctx context.Context, sd Sd, studentID uuid.UUID) (int64, error) {
//				panic("mock out the DeleteStudentWithSd method")
//			},
//			DetachAttachedMessageFunc: func(ctx context.Context, attachedMessageID uuid.UUID) (int64, error) {
//				panic("mock out the DetachAttachedMessage method")
//			},
//			DetachAttachedMessageWithSdFunc: func(ctx context.Context, sd Sd, attachedMessageID uuid.UUID) (int64, error) {
//				panic("mock out the DetachAttachedMessageWithSd method")
//			},
//			DetachItemsOnMessageFunc: func(ctx context.Context, messageID uuid.UUID) (int64, error) {
//				panic("mock out the DetachItemsOnMessage method")
//			},
//			DetachItemsOnMessageWithSdFunc: func(ctx context.Context, sd Sd, messageID uuid.UUID) (int64, error) {
//				panic("mock out the DetachItemsOnMessageWithSd method")
//			},
//			DetachItemsOnMessagesFunc: func(ctx context.Context, messageIDs []uuid.UUID) (int64, error) {
//				panic("mock out the DetachItemsOnMessages method")
//			},
//			DetachItemsOnMessagesWithSdFunc: func(ctx context.Context, sd Sd, messageIDs []uuid.UUID) (int64, error) {
//				panic("mock out the DetachItemsOnMessagesWithSd method")
//			},
//			DisassociatePolicyOnRoleFunc: func(ctx context.Context, roleID uuid.UUID) (int64, error) {
//				panic("mock out the DisassociatePolicyOnRole method")
//			},
//			DisassociatePolicyOnRoleWithSdFunc: func(ctx context.Context, sd Sd, roleID uuid.UUID) (int64, error) {
//				panic("mock out the DisassociatePolicyOnRoleWithSd method")
//			},
//			DisassociatePolicyOnRolesFunc: func(ctx context.Context, roleIDs []uuid.UUID) (int64, error) {
//				panic("mock out the DisassociatePolicyOnRoles method")
//			},
//			DisassociatePolicyOnRolesWithSdFunc: func(ctx context.Context, sd Sd, roleIDs []uuid.UUID) (int64, error) {
//				panic("mock out the DisassociatePolicyOnRolesWithSd method")
//			},
//			DisassociateRoleFunc: func(ctx context.Context, roleID uuid.UUID, policyID uuid.UUID) (int64, error) {
//				panic("mock out the DisassociateRole method")
//			},
//			DisassociateRoleOnPoliciesFunc: func(ctx context.Context, policyIDs []uuid.UUID) (int64, error) {
//				panic("mock out the DisassociateRoleOnPolicies method")
//			},
//			DisassociateRoleOnPoliciesWithSdFunc: func(ctx context.Context, sd Sd, policyIDs []uuid.UUID) (int64, error) {
//				panic("mock out the DisassociateRoleOnPoliciesWithSd method")
//			},
//			DisassociateRoleOnPolicyFunc: func(ctx context.Context, policyID uuid.UUID) (int64, error) {
//				panic("mock out the DisassociateRoleOnPolicy method")
//			},
//			DisassociateRoleOnPolicyWithSdFunc: func(ctx context.Context, sd Sd, policyID uuid.UUID) (int64, error) {
//				panic("mock out the DisassociateRoleOnPolicyWithSd method")
//			},
//			DisassociateRoleWithSdFunc: func(ctx context.Context, sd Sd, roleID uuid.UUID, policyID uuid.UUID) (int64, error) {
//				panic("mock out the DisassociateRoleWithSd method")
//			},
//			DisbelongChatRoomFunc: func(ctx context.Context, memberID uuid.UUID, chatRoomID uuid.UUID) (int64, error) {
//				panic("mock out the DisbelongChatRoom method")
//			},
//			DisbelongChatRoomOnChatRoomFunc: func(ctx context.Context, chatRoomID uuid.UUID) (int64, error) {
//				panic("mock out the DisbelongChatRoomOnChatRoom method")
//			},
//			DisbelongChatRoomOnChatRoomWithSdFunc: func(ctx context.Context, sd Sd, chatRoomID uuid.UUID) (int64, error) {
//				panic("mock out the DisbelongChatRoomOnChatRoomWithSd method")
//			},
//			DisbelongChatRoomOnChatRoomsFunc: func(ctx context.Context, chatRoomIDs []uuid.UUID) (int64, error) {
//				panic("mock out the DisbelongChatRoomOnChatRooms method")
//			},
//			DisbelongChatRoomOnChatRoomsWithSdFunc: func(ctx context.Context, sd Sd, chatRoomIDs []uuid.UUID) (int64, error) {
//				panic("mock out the DisbelongChatRoomOnChatRoomsWithSd method")
//			},
//			DisbelongChatRoomOnMemberFunc: func(ctx context.Context, memberID uuid.UUID) (int64, error) {
//				panic("mock out the DisbelongChatRoomOnMember method")
//			},
//			DisbelongChatRoomOnMemberWithSdFunc: func(ctx context.Context, sd Sd, memberID uuid.UUID) (int64, error) {
//				panic("mock out the DisbelongChatRoomOnMemberWithSd method")
//			},
//			DisbelongChatRoomOnMembersFunc: func(ctx context.Context, memberIDs []uuid.UUID) (int64, error) {
//				panic("mock out the DisbelongChatRoomOnMembers method")
//			},
//			DisbelongChatRoomOnMembersWithSdFunc: func(ctx context.Context, sd Sd, memberIDs []uuid.UUID) (int64, error) {
//				panic("mock out the DisbelongChatRoomOnMembersWithSd method")
//			},
//			DisbelongChatRoomWithSdFunc: func(ctx context.Context, sd Sd, memberID uuid.UUID, chatRoomID uuid.UUID) (int64, error) {
//				panic("mock out the DisbelongChatRoomWithSd method")
//			},
//			DisbelongOrganizationFunc: func(ctx context.Context, memberID uuid.UUID, organizationID uuid.UUID) (int64, error) {
//				panic("mock out the DisbelongOrganization method")
//			},
//			DisbelongOrganizationOnMemberFunc: func(ctx context.Context, memberID uuid.UUID) (int64, error) {
//				panic("mock out the DisbelongOrganizationOnMember method")
//			},
//			DisbelongOrganizationOnMemberWithSdFunc: func(ctx context.Context, sd Sd, memberID uuid.UUID) (int64, error) {
//				panic("mock out the DisbelongOrganizationOnMemberWithSd method")
//			},
//			DisbelongOrganizationOnMembersFunc: func(ctx context.Context, memberIDs []uuid.UUID) (int64, error) {
//				panic("mock out the DisbelongOrganizationOnMembers method")
//			},
//			DisbelongOrganizationOnMembersWithSdFunc: func(ctx context.Context, sd Sd, memberIDs []uuid.UUID) (int64, error) {
//				panic("mock out the DisbelongOrganizationOnMembersWithSd method")
//			},
//			DisbelongOrganizationOnOrganizationFunc: func(ctx context.Context, organizationID uuid.UUID) (int64, error) {
//				panic("mock out the DisbelongOrganizationOnOrganization method")
//			},
//			DisbelongOrganizationOnOrganizationWithSdFunc: func(ctx context.Context, sd Sd, organizationID uuid.UUID) (int64, error) {
//				panic("mock out the DisbelongOrganizationOnOrganizationWithSd method")
//			},
//			DisbelongOrganizationOnOrganizationsFunc: func(ctx context.Context, organizationIDs []uuid.UUID) (int64, error) {
//				panic("mock out the DisbelongOrganizationOnOrganizations method")
//			},
//			DisbelongOrganizationOnOrganizationsWithSdFunc: func(ctx context.Context, sd Sd, organizationIDs []uuid.UUID) (int64, error) {
//				panic("mock out the DisbelongOrganizationOnOrganizationsWithSd method")
//			},
//			DisbelongOrganizationWithSdFunc: func(ctx context.Context, sd Sd, memberID uuid.UUID, organizationID uuid.UUID) (int64, error) {
//				panic("mock out the DisbelongOrganizationWithSd method")
//			},
//			DisbelongPluralChatRoomsOnMemberFunc: func(ctx context.Context, memberID uuid.UUID, chatRoomIDs []uuid.UUID) (int64, error) {
//				panic("mock out the DisbelongPluralChatRoomsOnMember method")
//			},
//			DisbelongPluralChatRoomsOnMemberWithSdFunc: func(ctx context.Context, sd Sd, memberID uuid.UUID, chatRoomIDs []uuid.UUID) (int64, error) {
//				panic("mock out the DisbelongPluralChatRoomsOnMemberWithSd method")
//			},
//			DisbelongPluralMembersOnChatRoomFunc: func(ctx context.Context, chatRoomID uuid.UUID, memberIDs []uuid.UUID) (int64, error) {
//				panic("mock out the DisbelongPluralMembersOnChatRoom method")
//			},
//			DisbelongPluralMembersOnChatRoomWithSdFunc: func(ctx context.Context, sd Sd, chatRoomID uuid.UUID, memberIDs []uuid.UUID) (int64, error) {
//				panic("mock out the DisbelongPluralMembersOnChatRoomWithSd method")
//			},
//			DisbelongPluralMembersOnOrganizationFunc: func(ctx context.Context, organizationID uuid.UUID, memberIDs []uuid.UUID) (int64, error) {
//				panic("mock out the DisbelongPluralMembersOnOrganization method")
//			},
//			DisbelongPluralMembersOnOrganizationWithSdFunc: func(ctx context.Context, sd Sd, organizationID uuid.UUID, memberIDs []uuid.UUID) (int64, error) {
//				panic("mock out the DisbelongPluralMembersOnOrganizationWithSd method")
//			},
//			DisbelongPluralOrganizationsOnMemberFunc: func(ctx context.Context, memberID uuid.UUID, organizationIDs []uuid.UUID) (int64, error) {
//				panic("mock out the DisbelongPluralOrganizationsOnMember method")
//			},
//			DisbelongPluralOrganizationsOnMemberWithSdFunc: func(ctx context.Context, sd Sd, memberID uuid.UUID, organizationIDs []uuid.UUID) (int64, error) {
//				panic("mock out the DisbelongPluralOrganizationsOnMemberWithSd method")
//			},
//			ExistsChatRoomBelongingFunc: func(ctx context.Context, memberID uuid.UUID, chatRoomID uuid.UUID) (bool, error) {
//				panic("mock out the ExistsChatRoomBelonging method")
//			},
//			ExistsChatRoomBelongingWithSdFunc: func(ctx context.Context, sd Sd, memberID uuid.UUID, chatRoomID uuid.UUID) (bool, error) {
//				panic("mock out the ExistsChatRoomBelongingWithSd method")
//			},
//			ExistsReadReceiptFunc: func(ctx context.Context, memberID uuid.UUID, messageID uuid.UUID, where parameter.WhereExistsReadReceiptParam) (bool, error) {
//				panic("mock out the ExistsReadReceipt method")
//			},
//			ExistsReadReceiptWithSdFunc: func(ctx context.Context, sd Sd, memberID uuid.UUID, messageID uuid.UUID, where parameter.WhereExistsReadReceiptParam) (bool, error) {
//				panic("mock out the ExistsReadReceiptWithSd method")
//			},
//			FindAbsenceByIDFunc: func(ctx context.Context, absenceID uuid.UUID) (entity.Absence, error) {
//				panic("mock out the FindAbsenceByID method")
//			},
//			FindAbsenceByIDWithSdFunc: func(ctx context.Context, sd Sd, absenceID uuid.UUID) (entity.Absence, error) {
//				panic("mock out the FindAbsenceByIDWithSd method")
//			},
//			FindAttachableItemByIDFunc: func(ctx context.Context, attachableItemID uuid.UUID) (entity.AttachableItemWithContent, error) {
//				panic("mock out the FindAttachableItemByID method")
//			},
//			FindAttachableItemByIDWithMimeTypeFunc: func(ctx context.Context, attachableItemID uuid.UUID) (entity.AttachableItemWithMimeType, error) {
//				panic("mock out the FindAttachableItemByIDWithMimeType method")
//			},
//			FindAttachableItemByIDWithMimeTypeWithSdFunc: func(ctx context.Context, sd Sd, attachableItemID uuid.UUID) (entity.AttachableItemWithMimeType, error) {
//				panic("mock out the FindAttachableItemByIDWithMimeTypeWithSd method")
//			},
//			FindAttachableItemByIDWithSdFunc: func(ctx context.Context, sd Sd, attachableItemID uuid.UUID) (entity.AttachableItemWithContent, error) {
//				panic("mock out the FindAttachableItemByIDWithSd method")
//			},
//			FindAttachableItemByURLFunc: func(ctx context.Context, url string) (entity.AttachableItemWithContent, error) {
//				panic("mock out the FindAttachableItemByURL method")
//			},
//			FindAttachableItemByURLWithMimeTypeFunc: func(ctx context.Context, url string) (entity.AttachableItemWithMimeType, error) {
//				panic("mock out the FindAttachableItemByURLWithMimeType method")
//			},
//			FindAttachableItemByURLWithMimeTypeWithSdFunc: func(ctx context.Context, sd Sd, url string) (entity.AttachableItemWithMimeType, error) {
//				panic("mock out the FindAttachableItemByURLWithMimeTypeWithSd method")
//			},
//			FindAttachableItemByURLWithSdFunc: func(ctx context.Context, sd Sd, url string) (entity.AttachableItemWithContent, error) {
//				panic("mock out the FindAttachableItemByURLWithSd method")
//			},
//			FindAttendStatusByIDFunc: func(ctx context.Context, attendStatusID uuid.UUID) (entity.AttendStatus, error) {
//				panic("mock out the FindAttendStatusByID method")
//			},
//			FindAttendStatusByIDWithSdFunc: func(ctx context.Context, sd Sd, attendStatusID uuid.UUID) (entity.AttendStatus, error) {
//				panic("mock out the FindAttendStatusByIDWithSd method")
//			},
//			FindAttendStatusByKeyFunc: func(ctx context.Context, key string) (entity.AttendStatus, error) {
//				panic("mock out the FindAttendStatusByKey method")
//			},
//			FindAttendStatusByKeyWithSdFunc: func(ctx context.Context, sd Sd, key string) (entity.AttendStatus, error) {
//				panic("mock out the FindAttendStatusByKeyWithSd method")
//			},
//			FindAttendanceTypeByIDFunc: func(ctx context.Context, attendanceTypeID uuid.UUID) (entity.AttendanceType, error) {
//				panic("mock out the FindAttendanceTypeByID method")
//			},
//			FindAttendanceTypeByIDWithSdFunc: func(ctx context.Context, sd Sd, attendanceTypeID uuid.UUID) (entity.AttendanceType, error) {
//				panic("mock out the FindAttendanceTypeByIDWithSd method")
//			},
//			FindAttendanceTypeByKeyFunc: func(ctx context.Context, key string) (entity.AttendanceType, error) {
//				panic("mock out the FindAttendanceTypeByKey method")
//			},
//			FindAttendanceTypeByKeyWithSdFunc: func(ctx context.Context, sd Sd, key string) (entity.AttendanceType, error) {
//				panic("mock out the FindAttendanceTypeByKeyWithSd method")
//			},
//			FindChatRoomActionTypeByIDFunc: func(ctx context.Context, recordTypeID uuid.UUID) (entity.ChatRoomActionType, error) {
//				panic("mock out the FindChatRoomActionTypeByID method")
//			},
//			FindChatRoomActionTypeByIDWithSdFunc: func(ctx context.Context, sd Sd, recordTypeID uuid.UUID) (entity.ChatRoomActionType, error) {
//				panic("mock out the FindChatRoomActionTypeByIDWithSd method")
//			},
//			FindChatRoomActionTypeByKeyFunc: func(ctx context.Context, key string) (entity.ChatRoomActionType, error) {
//				panic("mock out the FindChatRoomActionTypeByKey method")
//			},
//			FindChatRoomActionTypeByKeyWithSdFunc: func(ctx context.Context, sd Sd, key string) (entity.ChatRoomActionType, error) {
//				panic("mock out the FindChatRoomActionTypeByKeyWithSd method")
//			},
//			FindChatRoomByIDFunc: func(ctx context.Context, chatRoomID uuid.UUID) (entity.ChatRoom, error) {
//				panic("mock out the FindChatRoomByID method")
//			},
//			FindChatRoomByIDWithCoverImageFunc: func(ctx context.Context, chatRoomID uuid.UUID) (entity.ChatRoomWithCoverImage, error) {
//				panic("mock out the FindChatRoomByIDWithCoverImage method")
//			},
//			FindChatRoomByIDWithCoverImageWithSdFunc: func(ctx context.Context, sd Sd, chatRoomID uuid.UUID) (entity.ChatRoomWithCoverImage, error) {
//				panic("mock out the FindChatRoomByIDWithCoverImageWithSd method")
//			},
//			FindChatRoomByIDWithSdFunc: func(ctx context.Context, sd Sd, chatRoomID uuid.UUID) (entity.ChatRoom, error) {
//				panic("mock out the FindChatRoomByIDWithSd method")
//			},
//			FindChatRoomOnPrivateFunc: func(ctx context.Context, ownerID uuid.UUID, memberID uuid.UUID) (entity.ChatRoom, error) {
//				panic("mock out the FindChatRoomOnPrivate method")
//			},
//			FindChatRoomOnPrivateWithSdFunc: func(ctx context.Context, sd Sd, ownerID uuid.UUID, memberID uuid.UUID) (entity.ChatRoom, error) {
//				panic("mock out the FindChatRoomOnPrivateWithSd method")
//			},
//			FindEventTypeByIDFunc: func(ctx context.Context, eventTypeID uuid.UUID) (entity.EventType, error) {
//				panic("mock out the FindEventTypeByID method")
//			},
//			FindEventTypeByIDWithSdFunc: func(ctx context.Context, sd Sd, eventTypeID uuid.UUID) (entity.EventType, error) {
//				panic("mock out the FindEventTypeByIDWithSd method")
//			},
//			FindEventTypeByKeyFunc: func(ctx context.Context, key string) (entity.EventType, error) {
//				panic("mock out the FindEventTypeByKey method")
//			},
//			FindEventTypeByKeyWithSdFunc: func(ctx context.Context, sd Sd, key string) (entity.EventType, error) {
//				panic("mock out the FindEventTypeByKeyWithSd method")
//			},
//			FindFileByIDFunc: func(ctx context.Context, fileID uuid.UUID) (entity.File, error) {
//				panic("mock out the FindFileByID method")
//			},
//			FindFileByIDWithSdFunc: func(ctx context.Context, sd Sd, fileID uuid.UUID) (entity.File, error) {
//				panic("mock out the FindFileByIDWithSd method")
//			},
//			FindFileWithAttachableItemFunc: func(ctx context.Context, fileID uuid.UUID) (entity.FileWithAttachableItem, error) {
//				panic("mock out the FindFileWithAttachableItem method")
//			},
//			FindFileWithAttachableItemWithSdFunc: func(ctx context.Context, sd Sd, fileID uuid.UUID) (entity.FileWithAttachableItem, error) {
//				panic("mock out the FindFileWithAttachableItemWithSd method")
//			},
//			FindGradeByIDFunc: func(ctx context.Context, gradeID uuid.UUID) (entity.Grade, error) {
//				panic("mock out the FindGradeByID method")
//			},
//			FindGradeByIDWithSdFunc: func(ctx context.Context, sd Sd, gradeID uuid.UUID) (entity.Grade, error) {
//				panic("mock out the FindGradeByIDWithSd method")
//			},
//			FindGradeByKeyFunc: func(ctx context.Context, key string) (entity.Grade, error) {
//				panic("mock out the FindGradeByKey method")
//			},
//			FindGradeByKeyWithSdFunc: func(ctx context.Context, sd Sd, key string) (entity.Grade, error) {
//				panic("mock out the FindGradeByKeyWithSd method")
//			},
//			FindGradeWithOrganizationFunc: func(ctx context.Context, gradeID uuid.UUID) (entity.GradeWithOrganization, error) {
//				panic("mock out the FindGradeWithOrganization method")
//			},
//			FindGradeWithOrganizationWithSdFunc: func(ctx context.Context, sd Sd, gradeID uuid.UUID) (entity.GradeWithOrganization, error) {
//				panic("mock out the FindGradeWithOrganizationWithSd method")
//			},
//			FindGroupByIDFunc: func(ctx context.Context, groupID uuid.UUID) (entity.Group, error) {
//				panic("mock out the FindGroupByID method")
//			},
//			FindGroupByIDWithSdFunc: func(ctx context.Context, sd Sd, groupID uuid.UUID) (entity.Group, error) {
//				panic("mock out the FindGroupByIDWithSd method")
//			},
//			FindGroupByKeyFunc: func(ctx context.Context, key string) (entity.Group, error) {
//				panic("mock out the FindGroupByKey method")
//			},
//			FindGroupByKeyWithSdFunc: func(ctx context.Context, sd Sd, key string) (entity.Group, error) {
//				panic("mock out the FindGroupByKeyWithSd method")
//			},
//			FindGroupWithOrganizationFunc: func(ctx context.Context, groupID uuid.UUID) (entity.GroupWithOrganization, error) {
//				panic("mock out the FindGroupWithOrganization method")
//			},
//			FindGroupWithOrganizationWithSdFunc: func(ctx context.Context, sd Sd, groupID uuid.UUID) (entity.GroupWithOrganization, error) {
//				panic("mock out the FindGroupWithOrganizationWithSd method")
//			},
//			FindImageByIDFunc: func(ctx context.Context, imageID uuid.UUID) (entity.Image, error) {
//				panic("mock out the FindImageByID method")
//			},
//			FindImageByIDWithSdFunc: func(ctx context.Context, sd Sd, imageID uuid.UUID) (entity.Image, error) {
//				panic("mock out the FindImageByIDWithSd method")
//			},
//			FindImageWithAttachableItemFunc: func(ctx context.Context, imageID uuid.UUID) (entity.ImageWithAttachableItem, error) {
//				panic("mock out the FindImageWithAttachableItem method")
//			},
//			FindImageWithAttachableItemWithSdFunc: func(ctx context.Context, sd Sd, imageID uuid.UUID) (entity.ImageWithAttachableItem, error) {
//				panic("mock out the FindImageWithAttachableItemWithSd method")
//			},
//			FindMemberByIDFunc: func(ctx context.Context, memberID uuid.UUID) (entity.Member, error) {
//				panic("mock out the FindMemberByID method")
//			},
//			FindMemberByIDWithSdFunc: func(ctx context.Context, sd Sd, memberID uuid.UUID) (entity.Member, error) {
//				panic("mock out the FindMemberByIDWithSd method")
//			},
//			FindMemberByLoginIDFunc: func(ctx context.Context, loginID string) (entity.Member, error) {
//				panic("mock out the FindMemberByLoginID method")
//			},
//			FindMemberByLoginIDWithSdFunc: func(ctx context.Context, sd Sd, loginID string) (entity.Member, error) {
//				panic("mock out the FindMemberByLoginIDWithSd method")
//			},
//			FindMemberCredentialsByIDFunc: func(ctx context.Context, memberID uuid.UUID) (entity.MemberCredentials, error) {
//				panic("mock out the FindMemberCredentialsByID method")
//			},
//			FindMemberCredentialsByIDWithSdFunc: func(ctx context.Context, sd Sd, memberID uuid.UUID) (entity.MemberCredentials, error) {
//				panic("mock out the FindMemberCredentialsByIDWithSd method")
//			},
//			FindMemberCredentialsByLoginIDFunc: func(ctx context.Context, loginID string) (entity.MemberCredentials, error) {
//				panic("mock out the FindMemberCredentialsByLoginID method")
//			},
//			FindMemberCredentialsByLoginIDWithSdFunc: func(ctx context.Context, sd Sd, loginID string) (entity.MemberCredentials, error) {
//				panic("mock out the FindMemberCredentialsByLoginIDWithSd method")
//			},
//			FindMemberWithAttendStatusFunc: func(ctx context.Context, memberID uuid.UUID) (entity.MemberWithAttendStatus, error) {
//				panic("mock out the FindMemberWithAttendStatus method")
//			},
//			FindMemberWithAttendStatusWithSdFunc: func(ctx context.Context, sd Sd, memberID uuid.UUID) (entity.MemberWithAttendStatus, error) {
//				panic("mock out the FindMemberWithAttendStatusWithSd method")
//			},
//			FindMemberWithCrewFunc: func(ctx context.Context, memberID uuid.UUID) (entity.MemberWithCrew, error) {
//				panic("mock out the FindMemberWithCrew method")
//			},
//			FindMemberWithCrewWithSdFunc: func(ctx context.Context, sd Sd, memberID uuid.UUID) (entity.MemberWithCrew, error) {
//				panic("mock out the FindMemberWithCrewWithSd method")
//			},
//			FindMemberWithDetailFunc: func(ctx context.Context, memberID uuid.UUID) (entity.MemberWithDetail, error) {
//				panic("mock out the FindMemberWithDetail method")
//			},
//			FindMemberWithDetailWithSdFunc: func(ctx context.Context, sd Sd, memberID uuid.UUID) (entity.MemberWithDetail, error) {
//				panic("mock out the FindMemberWithDetailWithSd method")
//			},
//			FindMemberWithPersonalOrganizationFunc: func(ctx context.Context, memberID uuid.UUID) (entity.MemberWithPersonalOrganization, error) {
//				panic("mock out the FindMemberWithPersonalOrganization method")
//			},
//			FindMemberWithPersonalOrganizationWithSdFunc: func(ctx context.Context, sd Sd, memberID uuid.UUID) (entity.MemberWithPersonalOrganization, error) {
//				panic("mock out the FindMemberWithPersonalOrganizationWithSd method")
//			},
//			FindMemberWithProfileImageFunc: func(ctx context.Context, memberID uuid.UUID) (entity.MemberWithProfileImage, error) {
//				panic("mock out the FindMemberWithProfileImage method")
//			},
//			FindMemberWithProfileImageWithSdFunc: func(ctx context.Context, sd Sd, memberID uuid.UUID) (entity.MemberWithProfileImage, error) {
//				panic("mock out the FindMemberWithProfileImageWithSd method")
//			},
//			FindMemberWithRoleFunc: func(ctx context.Context, memberID uuid.UUID) (entity.MemberWithRole, error) {
//				panic("mock out the FindMemberWithRole method")
//			},
//			FindMemberWithRoleWithSdFunc: func(ctx context.Context, sd Sd, memberID uuid.UUID) (entity.MemberWithRole, error) {
//				panic("mock out the FindMemberWithRoleWithSd method")
//			},
//			FindMessageByIDFunc: func(ctx context.Context, messageID uuid.UUID) (entity.Message, error) {
//				panic("mock out the FindMessageByID method")
//			},
//			FindMessageByIDWithSdFunc: func(ctx context.Context, sd Sd, messageID uuid.UUID) (entity.Message, error) {
//				panic("mock out the FindMessageByIDWithSd method")
//			},
//			FindMessageWithChatRoomFunc: func(ctx context.Context, messageID uuid.UUID) (entity.MessageWithChatRoom, error) {
//				panic("mock out the FindMessageWithChatRoom method")
//			},
//			FindMessageWithChatRoomActionFunc: func(ctx context.Context, messageID uuid.UUID) (entity.MessageWithChatRoomAction, error) {
//				panic("mock out the FindMessageWithChatRoomAction method")
//			},
//			FindMessageWithChatRoomActionWithSdFunc: func(ctx context.Context, sd Sd, messageID uuid.UUID) (entity.MessageWithChatRoomAction, error) {
//				panic("mock out the FindMessageWithChatRoomActionWithSd method")
//			},
//			FindMessageWithChatRoomWithSdFunc: func(ctx context.Context, sd Sd, messageID uuid.UUID) (entity.MessageWithChatRoom, error) {
//				panic("mock out the FindMessageWithChatRoomWithSd method")
//			},
//			FindMessageWithSenderFunc: func(ctx context.Context, messageID uuid.UUID) (entity.MessageWithSender, error) {
//				panic("mock out the FindMessageWithSender method")
//			},
//			FindMessageWithSenderWithSdFunc: func(ctx context.Context, sd Sd, messageID uuid.UUID) (entity.MessageWithSender, error) {
//				panic("mock out the FindMessageWithSenderWithSd method")
//			},
//			FindMimeTypeByIDFunc: func(ctx context.Context, mimeTypeID uuid.UUID) (entity.MimeType, error) {
//				panic("mock out the FindMimeTypeByID method")
//			},
//			FindMimeTypeByIDWithSdFunc: func(ctx context.Context, sd Sd, mimeTypeID uuid.UUID) (entity.MimeType, error) {
//				panic("mock out the FindMimeTypeByIDWithSd method")
//			},
//			FindMimeTypeByKeyFunc: func(ctx context.Context, key string) (entity.MimeType, error) {
//				panic("mock out the FindMimeTypeByKey method")
//			},
//			FindMimeTypeByKeyWithSdFunc: func(ctx context.Context, sd Sd, key string) (entity.MimeType, error) {
//				panic("mock out the FindMimeTypeByKeyWithSd method")
//			},
//			FindMimeTypeByKindFunc: func(ctx context.Context, kind string) (entity.MimeType, error) {
//				panic("mock out the FindMimeTypeByKind method")
//			},
//			FindMimeTypeByKindWithSdFunc: func(ctx context.Context, sd Sd, kind string) (entity.MimeType, error) {
//				panic("mock out the FindMimeTypeByKindWithSd method")
//			},
//			FindOrganizationByIDFunc: func(ctx context.Context, organizationID uuid.UUID) (entity.Organization, error) {
//				panic("mock out the FindOrganizationByID method")
//			},
//			FindOrganizationByIDWithSdFunc: func(ctx context.Context, sd Sd, organizationID uuid.UUID) (entity.Organization, error) {
//				panic("mock out the FindOrganizationByIDWithSd method")
//			},
//			FindOrganizationWithChatRoomFunc: func(ctx context.Context, organizationID uuid.UUID) (entity.OrganizationWithChatRoom, error) {
//				panic("mock out the FindOrganizationWithChatRoom method")
//			},
//			FindOrganizationWithChatRoomAndDetailFunc: func(ctx context.Context, organizationID uuid.UUID) (entity.OrganizationWithChatRoomAndDetail, error) {
//				panic("mock out the FindOrganizationWithChatRoomAndDetail method")
//			},
//			FindOrganizationWithChatRoomAndDetailWithSdFunc: func(ctx context.Context, sd Sd, organizationID uuid.UUID) (entity.OrganizationWithChatRoomAndDetail, error) {
//				panic("mock out the FindOrganizationWithChatRoomAndDetailWithSd method")
//			},
//			FindOrganizationWithChatRoomWithSdFunc: func(ctx context.Context, sd Sd, organizationID uuid.UUID) (entity.OrganizationWithChatRoom, error) {
//				panic("mock out the FindOrganizationWithChatRoomWithSd method")
//			},
//			FindOrganizationWithDetailFunc: func(ctx context.Context, organizationID uuid.UUID) (entity.OrganizationWithDetail, error) {
//				panic("mock out the FindOrganizationWithDetail method")
//			},
//			FindOrganizationWithDetailWithSdFunc: func(ctx context.Context, sd Sd, organizationID uuid.UUID) (entity.OrganizationWithDetail, error) {
//				panic("mock out the FindOrganizationWithDetailWithSd method")
//			},
//			FindPermissionByIDFunc: func(ctx context.Context, permissionID uuid.UUID) (entity.Permission, error) {
//				panic("mock out the FindPermissionByID method")
//			},
//			FindPermissionByIDWithCategoryFunc: func(ctx context.Context, permissionID uuid.UUID) (entity.PermissionWithCategory, error) {
//				panic("mock out the FindPermissionByIDWithCategory method")
//			},
//			FindPermissionByIDWithCategoryWithSdFunc: func(ctx context.Context, sd Sd, permissionID uuid.UUID) (entity.PermissionWithCategory, error) {
//				panic("mock out the FindPermissionByIDWithCategoryWithSd method")
//			},
//			FindPermissionByIDWithSdFunc: func(ctx context.Context, sd Sd, permissionID uuid.UUID) (entity.Permission, error) {
//				panic("mock out the FindPermissionByIDWithSd method")
//			},
//			FindPermissionByKeyFunc: func(ctx context.Context, key string) (entity.Permission, error) {
//				panic("mock out the FindPermissionByKey method")
//			},
//			FindPermissionByKeyWithCategoryFunc: func(ctx context.Context, key string) (entity.PermissionWithCategory, error) {
//				panic("mock out the FindPermissionByKeyWithCategory method")
//			},
//			FindPermissionByKeyWithCategoryWithSdFunc: func(ctx context.Context, sd Sd, key string) (entity.PermissionWithCategory, error) {
//				panic("mock out the FindPermissionByKeyWithCategoryWithSd method")
//			},
//			FindPermissionByKeyWithSdFunc: func(ctx context.Context, sd Sd, key string) (entity.Permission, error) {
//				panic("mock out the FindPermissionByKeyWithSd method")
//			},
//			FindPermissionCategoryByIDFunc: func(ctx context.Context, permissionCategoryID uuid.UUID) (entity.PermissionCategory, error) {
//				panic("mock out the FindPermissionCategoryByID method")
//			},
//			FindPermissionCategoryByIDWithSdFunc: func(ctx context.Context, sd Sd, permissionCategoryID uuid.UUID) (entity.PermissionCategory, error) {
//				panic("mock out the FindPermissionCategoryByIDWithSd method")
//			},
//			FindPermissionCategoryByKeyFunc: func(ctx context.Context, key string) (entity.PermissionCategory, error) {
//				panic("mock out the FindPermissionCategoryByKey method")
//			},
//			FindPermissionCategoryByKeyWithSdFunc: func(ctx context.Context, sd Sd, key string) (entity.PermissionCategory, error) {
//				panic("mock out the FindPermissionCategoryByKeyWithSd method")
//			},
//			FindPersonalOrganizationFunc: func(ctx context.Context, memberID uuid.UUID) (entity.Organization, error) {
//				panic("mock out the FindPersonalOrganization method")
//			},
//			FindPersonalOrganizationWithSdFunc: func(ctx context.Context, sd Sd, memberID uuid.UUID) (entity.Organization, error) {
//				panic("mock out the FindPersonalOrganizationWithSd method")
//			},
//			FindPolicyByIDFunc: func(ctx context.Context, policyID uuid.UUID) (entity.Policy, error) {
//				panic("mock out the FindPolicyByID method")
//			},
//			FindPolicyByIDWithCategoryFunc: func(ctx context.Context, policyID uuid.UUID) (entity.PolicyWithCategory, error) {
//				panic("mock out the FindPolicyByIDWithCategory method")
//			},
//			FindPolicyByIDWithCategoryWithSdFunc: func(ctx context.Context, sd Sd, policyID uuid.UUID) (entity.PolicyWithCategory, error) {
//				panic("mock out the FindPolicyByIDWithCategoryWithSd method")
//			},
//			FindPolicyByIDWithSdFunc: func(ctx context.Context, sd Sd, policyID uuid.UUID) (entity.Policy, error) {
//				panic("mock out the FindPolicyByIDWithSd method")
//			},
//			FindPolicyByKeyFunc: func(ctx context.Context, key string) (entity.Policy, error) {
//				panic("mock out the FindPolicyByKey method")
//			},
//			FindPolicyByKeyWithCategoryFunc: func(ctx context.Context, key string) (entity.PolicyWithCategory, error) {
//				panic("mock out the FindPolicyByKeyWithCategory method")
//			},
//			FindPolicyByKeyWithCategoryWithSdFunc: func(ctx context.Context, sd Sd, key string) (entity.PolicyWithCategory, error) {
//				panic("mock out the FindPolicyByKeyWithCategoryWithSd method")
//			},
//			FindPolicyByKeyWithSdFunc: func(ctx context.Context, sd Sd, key string) (entity.Policy, error) {
//				panic("mock out the FindPolicyByKeyWithSd method")
//			},
//			FindPolicyCategoryByIDFunc: func(ctx context.Context, policyCategoryID uuid.UUID) (entity.PolicyCategory, error) {
//				panic("mock out the FindPolicyCategoryByID method")
//			},
//			FindPolicyCategoryByIDWithSdFunc: func(ctx context.Context, sd Sd, policyCategoryID uuid.UUID) (entity.PolicyCategory, error) {
//				panic("mock out the FindPolicyCategoryByIDWithSd method")
//			},
//			FindPolicyCategoryByKeyFunc: func(ctx context.Context, key string) (entity.PolicyCategory, error) {
//				panic("mock out the FindPolicyCategoryByKey method")
//			},
//			FindPolicyCategoryByKeyWithSdFunc: func(ctx context.Context, sd Sd, key string) (entity.PolicyCategory, error) {
//				panic("mock out the FindPolicyCategoryByKeyWithSd method")
//			},
//			FindProfessorByIDFunc: func(ctx context.Context, professorID uuid.UUID) (entity.Professor, error) {
//				panic("mock out the FindProfessorByID method")
//			},
//			FindProfessorByIDWithSdFunc: func(ctx context.Context, sd Sd, professorID uuid.UUID) (entity.Professor, error) {
//				panic("mock out the FindProfessorByIDWithSd method")
//			},
//			FindProfessorWithMemberFunc: func(ctx context.Context, professorID uuid.UUID) (entity.ProfessorWithMember, error) {
//				panic("mock out the FindProfessorWithMember method")
//			},
//			FindProfessorWithMemberWithSdFunc: func(ctx context.Context, sd Sd, professorID uuid.UUID) (entity.ProfessorWithMember, error) {
//				panic("mock out the FindProfessorWithMemberWithSd method")
//			},
//			FindReadReceiptFunc: func(ctx context.Context, memberID uuid.UUID, messageID uuid.UUID) (entity.ReadReceipt, error) {
//				panic("mock out the FindReadReceipt method")
//			},
//			FindReadReceiptWithSdFunc: func(ctx context.Context, sd Sd, memberID uuid.UUID, messageID uuid.UUID) (entity.ReadReceipt, error) {
//				panic("mock out the FindReadReceiptWithSd method")
//			},
//			FindRecordTypeByIDFunc: func(ctx context.Context, recordTypeID uuid.UUID) (entity.RecordType, error) {
//				panic("mock out the FindRecordTypeByID method")
//			},
//			FindRecordTypeByIDWithSdFunc: func(ctx context.Context, sd Sd, recordTypeID uuid.UUID) (entity.RecordType, error) {
//				panic("mock out the FindRecordTypeByIDWithSd method")
//			},
//			FindRecordTypeByKeyFunc: func(ctx context.Context, key string) (entity.RecordType, error) {
//				panic("mock out the FindRecordTypeByKey method")
//			},
//			FindRecordTypeByKeyWithSdFunc: func(ctx context.Context, sd Sd, key string) (entity.RecordType, error) {
//				panic("mock out the FindRecordTypeByKeyWithSd method")
//			},
//			FindRoleByIDFunc: func(ctx context.Context, roleID uuid.UUID) (entity.Role, error) {
//				panic("mock out the FindRoleByID method")
//			},
//			FindRoleByIDWithSdFunc: func(ctx context.Context, sd Sd, roleID uuid.UUID) (entity.Role, error) {
//				panic("mock out the FindRoleByIDWithSd method")
//			},
//			FindStudentByIDFunc: func(ctx context.Context, studentID uuid.UUID) (entity.Student, error) {
//				panic("mock out the FindStudentByID method")
//			},
//			FindStudentByIDWithSdFunc: func(ctx context.Context, sd Sd, studentID uuid.UUID) (entity.Student, error) {
//				panic("mock out the FindStudentByIDWithSd method")
//			},
//			FindStudentWithMemberFunc: func(ctx context.Context, studentID uuid.UUID) (entity.StudentWithMember, error) {
//				panic("mock out the FindStudentWithMember method")
//			},
//			FindStudentWithMemberWithSdFunc: func(ctx context.Context, sd Sd, studentID uuid.UUID) (entity.StudentWithMember, error) {
//				panic("mock out the FindStudentWithMemberWithSd method")
//			},
//			FindWholeOrganizationFunc: func(ctx context.Context) (entity.Organization, error) {
//				panic("mock out the FindWholeOrganization method")
//			},
//			FindWholeOrganizationWithSdFunc: func(ctx context.Context, sd Sd) (entity.Organization, error) {
//				panic("mock out the FindWholeOrganizationWithSd method")
//			},
//			GetAbsencesFunc: func(ctx context.Context, order parameter.AbsenceOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Absence], error) {
//				panic("mock out the GetAbsences method")
//			},
//			GetAbsencesWithSdFunc: func(ctx context.Context, sd Sd, order parameter.AbsenceOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Absence], error) {
//				panic("mock out the GetAbsencesWithSd method")
//			},
//			GetAttachableItemsFunc: func(ctx context.Context, where parameter.WhereAttachableItemParam, order parameter.AttachableItemOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.AttachableItemWithContent], error) {
//				panic("mock out the GetAttachableItems method")
//			},
//			GetAttachableItemsWithMimeTypeFunc: func(ctx context.Context, where parameter.WhereAttachableItemParam, order parameter.AttachableItemOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.AttachableItemWithMimeType], error) {
//				panic("mock out the GetAttachableItemsWithMimeType method")
//			},
//			GetAttachableItemsWithMimeTypeWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereAttachableItemParam, order parameter.AttachableItemOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.AttachableItemWithMimeType], error) {
//				panic("mock out the GetAttachableItemsWithMimeTypeWithSd method")
//			},
//			GetAttachableItemsWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereAttachableItemParam, order parameter.AttachableItemOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.AttachableItemWithContent], error) {
//				panic("mock out the GetAttachableItemsWithSd method")
//			},
//			GetAttachedItemsOnChatRoomFunc: func(ctx context.Context, chatRoomID uuid.UUID, where parameter.WhereAttachedItemOnChatRoomParam, order parameter.AttachedItemOnChatRoomOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.AttachedItemOnChatRoom], error) {
//				panic("mock out the GetAttachedItemsOnChatRoom method")
//			},
//			GetAttachedItemsOnChatRoomWithSdFunc: func(ctx context.Context, sd Sd, chatRoomID uuid.UUID, where parameter.WhereAttachedItemOnChatRoomParam, order parameter.AttachedItemOnChatRoomOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.AttachedItemOnChatRoom], error) {
//				panic("mock out the GetAttachedItemsOnChatRoomWithSd method")
//			},
//			GetAttachedItemsOnMessageFunc: func(ctx context.Context, messageID uuid.UUID, where parameter.WhereAttachedItemOnMessageParam, order parameter.AttachedItemOnMessageOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.AttachedItemOnMessage], error) {
//				panic("mock out the GetAttachedItemsOnMessage method")
//			},
//			GetAttachedItemsOnMessageWithMimeTypeFunc: func(ctx context.Context, messageID uuid.UUID, where parameter.WhereAttachedItemOnMessageParam, order parameter.AttachedItemOnMessageOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.AttachedItemOnMessageWithMimeType], error) {
//				panic("mock out the GetAttachedItemsOnMessageWithMimeType method")
//			},
//			GetAttachedItemsOnMessageWithMimeTypeWithSdFunc: func(ctx context.Context, sd Sd, messageID uuid.UUID, where parameter.WhereAttachedItemOnMessageParam, order parameter.AttachedItemOnMessageOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.AttachedItemOnMessageWithMimeType], error) {
//				panic("mock out the GetAttachedItemsOnMessageWithMimeTypeWithSd method")
//			},
//			GetAttachedItemsOnMessageWithSdFunc: func(ctx context.Context, sd Sd, messageID uuid.UUID, where parameter.WhereAttachedItemOnMessageParam, order parameter.AttachedItemOnMessageOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.AttachedItemOnMessage], error) {
//				panic("mock out the GetAttachedItemsOnMessageWithSd method")
//			},
//			GetAttendStatusesFunc: func(ctx context.Context, where parameter.WhereAttendStatusParam, order parameter.AttendStatusOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.AttendStatus], error) {
//				panic("mock out the GetAttendStatuses method")
//			},
//			GetAttendStatusesWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereAttendStatusParam, order parameter.AttendStatusOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.AttendStatus], error) {
//				panic("mock out the GetAttendStatusesWithSd method")
//			},
//			GetAttendanceTypesFunc: func(ctx context.Context, where parameter.WhereAttendanceTypeParam, order parameter.AttendanceTypeOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.AttendanceType], error) {
//				panic("mock out the GetAttendanceTypes method")
//			},
//			GetAttendanceTypesWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereAttendanceTypeParam, order parameter.AttendanceTypeOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.AttendanceType], error) {
//				panic("mock out the GetAttendanceTypesWithSd method")
//			},
//			GetChatRoomActionTypesFunc: func(ctx context.Context, where parameter.WhereChatRoomActionTypeParam, order parameter.ChatRoomActionTypeOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoomActionType], error) {
//				panic("mock out the GetChatRoomActionTypes method")
//			},
//			GetChatRoomActionTypesWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereChatRoomActionTypeParam, order parameter.ChatRoomActionTypeOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoomActionType], error) {
//				panic("mock out the GetChatRoomActionTypesWithSd method")
//			},
//			GetChatRoomActionsOnChatRoomFunc: func(ctx context.Context, chatRoomID uuid.UUID, where parameter.WhereChatRoomActionParam, order parameter.ChatRoomActionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoomAction], error) {
//				panic("mock out the GetChatRoomActionsOnChatRoom method")
//			},
//			GetChatRoomActionsOnChatRoomWithSdFunc: func(ctx context.Context, sd Sd, chatRoomID uuid.UUID, where parameter.WhereChatRoomActionParam, order parameter.ChatRoomActionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoomAction], error) {
//				panic("mock out the GetChatRoomActionsOnChatRoomWithSd method")
//			},
//			GetChatRoomActionsWithDetailOnChatRoomFunc: func(ctx context.Context, chatRoomID uuid.UUID, where parameter.WhereChatRoomActionParam, order parameter.ChatRoomActionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoomActionWithDetail], error) {
//				panic("mock out the GetChatRoomActionsWithDetailOnChatRoom method")
//			},
//			GetChatRoomActionsWithDetailOnChatRoomWithSdFunc: func(ctx context.Context, sd Sd, chatRoomID uuid.UUID, where parameter.WhereChatRoomActionParam, order parameter.ChatRoomActionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoomActionWithDetail], error) {
//				panic("mock out the GetChatRoomActionsWithDetailOnChatRoomWithSd method")
//			},
//			GetChatRoomAddMemberActionsOnChatRoomFunc: func(ctx context.Context, chatRoomID uuid.UUID, where parameter.WhereChatRoomAddMemberActionParam, order parameter.ChatRoomAddMemberActionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoomAddMemberActionWithAddedBy], error) {
//				panic("mock out the GetChatRoomAddMemberActionsOnChatRoom method")
//			},
//			GetChatRoomAddMemberActionsOnChatRoomWithSdFunc: func(ctx context.Context, sd Sd, chatRoomID uuid.UUID, where parameter.WhereChatRoomAddMemberActionParam, order parameter.ChatRoomAddMemberActionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoomAddMemberActionWithAddedBy], error) {
//				panic("mock out the GetChatRoomAddMemberActionsOnChatRoomWithSd method")
//			},
//			GetChatRoomCreateActionsOnChatRoomFunc: func(ctx context.Context, chatRoomID uuid.UUID, where parameter.WhereChatRoomCreateActionParam, order parameter.ChatRoomCreateActionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoomCreateActionWithCreatedBy], error) {
//				panic("mock out the GetChatRoomCreateActionsOnChatRoom method")
//			},
//			GetChatRoomCreateActionsOnChatRoomWithSdFunc: func(ctx context.Context, sd Sd, chatRoomID uuid.UUID, where parameter.WhereChatRoomCreateActionParam, order parameter.ChatRoomCreateActionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoomCreateActionWithCreatedBy], error) {
//				panic("mock out the GetChatRoomCreateActionsOnChatRoomWithSd method")
//			},
//			GetChatRoomDeleteMessageActionsOnChatRoomFunc: func(ctx context.Context, chatRoomID uuid.UUID, where parameter.WhereChatRoomDeleteMessageActionParam, order parameter.ChatRoomDeleteMessageActionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoomDeleteMessageActionWithDeletedBy], error) {
//				panic("mock out the GetChatRoomDeleteMessageActionsOnChatRoom method")
//			},
//			GetChatRoomDeleteMessageActionsOnChatRoomWithSdFunc: func(ctx context.Context, sd Sd, chatRoomID uuid.UUID, where parameter.WhereChatRoomDeleteMessageActionParam, order parameter.ChatRoomDeleteMessageActionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoomDeleteMessageActionWithDeletedBy], error) {
//				panic("mock out the GetChatRoomDeleteMessageActionsOnChatRoomWithSd method")
//			},
//			GetChatRoomRemoveMemberActionsOnChatRoomFunc: func(ctx context.Context, chatRoomID uuid.UUID, where parameter.WhereChatRoomRemoveMemberActionParam, order parameter.ChatRoomRemoveMemberActionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoomRemoveMemberActionWithRemovedBy], error) {
//				panic("mock out the GetChatRoomRemoveMemberActionsOnChatRoom method")
//			},
//			GetChatRoomRemoveMemberActionsOnChatRoomWithSdFunc: func(ctx context.Context, sd Sd, chatRoomID uuid.UUID, where parameter.WhereChatRoomRemoveMemberActionParam, order parameter.ChatRoomRemoveMemberActionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoomRemoveMemberActionWithRemovedBy], error) {
//				panic("mock out the GetChatRoomRemoveMemberActionsOnChatRoomWithSd method")
//			},
//			GetChatRoomUpdateNameActionsOnChatRoomFunc: func(ctx context.Context, chatRoomID uuid.UUID, where parameter.WhereChatRoomUpdateNameActionParam, order parameter.ChatRoomUpdateNameActionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoomUpdateNameActionWithUpdatedBy], error) {
//				panic("mock out the GetChatRoomUpdateNameActionsOnChatRoom method")
//			},
//			GetChatRoomUpdateNameActionsOnChatRoomWithSdFunc: func(ctx context.Context, sd Sd, chatRoomID uuid.UUID, where parameter.WhereChatRoomUpdateNameActionParam, order parameter.ChatRoomUpdateNameActionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoomUpdateNameActionWithUpdatedBy], error) {
//				panic("mock out the GetChatRoomUpdateNameActionsOnChatRoomWithSd method")
//			},
//			GetChatRoomWithdrawActionsOnChatRoomFunc: func(ctx context.Context, chatRoomID uuid.UUID, where parameter.WhereChatRoomWithdrawActionParam, order parameter.ChatRoomWithdrawActionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoomWithdrawActionWithMember], error) {
//				panic("mock out the GetChatRoomWithdrawActionsOnChatRoom method")
//			},
//			GetChatRoomWithdrawActionsOnChatRoomWithSdFunc: func(ctx context.Context, sd Sd, chatRoomID uuid.UUID, where parameter.WhereChatRoomWithdrawActionParam, order parameter.ChatRoomWithdrawActionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoomWithdrawActionWithMember], error) {
//				panic("mock out the GetChatRoomWithdrawActionsOnChatRoomWithSd method")
//			},
//			GetChatRoomsFunc: func(ctx context.Context, where parameter.WhereChatRoomParam, order parameter.ChatRoomOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoom], error) {
//				panic("mock out the GetChatRooms method")
//			},
//			GetChatRoomsOnMemberFunc: func(ctx context.Context, memberID uuid.UUID, where parameter.WhereChatRoomOnMemberParam, order parameter.ChatRoomOnMemberOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoomOnMember], error) {
//				panic("mock out the GetChatRoomsOnMember method")
//			},
//			GetChatRoomsOnMemberWithSdFunc: func(ctx context.Context, sd Sd, memberID uuid.UUID, where parameter.WhereChatRoomOnMemberParam, order parameter.ChatRoomOnMemberOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoomOnMember], error) {
//				panic("mock out the GetChatRoomsOnMemberWithSd method")
//			},
//			GetChatRoomsWithCoverImageFunc: func(ctx context.Context, where parameter.WhereChatRoomParam, order parameter.ChatRoomOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoomWithCoverImage], error) {
//				panic("mock out the GetChatRoomsWithCoverImage method")
//			},
//			GetChatRoomsWithCoverImageWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereChatRoomParam, order parameter.ChatRoomOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoomWithCoverImage], error) {
//				panic("mock out the GetChatRoomsWithCoverImageWithSd method")
//			},
//			GetChatRoomsWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereChatRoomParam, order parameter.ChatRoomOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoom], error) {
//				panic("mock out the GetChatRoomsWithSd method")
//			},
//			GetEventTypesFunc: func(ctx context.Context, where parameter.WhereEventTypeParam, order parameter.EventTypeOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.EventType], error) {
//				panic("mock out the GetEventTypes method")
//			},
//			GetEventTypesWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereEventTypeParam, order parameter.EventTypeOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.EventType], error) {
//				panic("mock out the GetEventTypesWithSd method")
//			},
//			GetFilesFunc: func(ctx context.Context, where parameter.WhereFileParam, order parameter.FileOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.File], error) {
//				panic("mock out the GetFiles method")
//			},
//			GetFilesWithAttachableItemFunc: func(ctx context.Context, where parameter.WhereFileParam, order parameter.FileOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.FileWithAttachableItem], error) {
//				panic("mock out the GetFilesWithAttachableItem method")
//			},
//			GetFilesWithAttachableItemWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereFileParam, order parameter.FileOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.FileWithAttachableItem], error) {
//				panic("mock out the GetFilesWithAttachableItemWithSd method")
//			},
//			GetFilesWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereFileParam, order parameter.FileOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.File], error) {
//				panic("mock out the GetFilesWithSd method")
//			},
//			GetGradesFunc: func(ctx context.Context, where parameter.WhereGradeParam, order parameter.GradeOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Grade], error) {
//				panic("mock out the GetGrades method")
//			},
//			GetGradesWithOrganizationFunc: func(ctx context.Context, where parameter.WhereGradeParam, order parameter.GradeOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.GradeWithOrganization], error) {
//				panic("mock out the GetGradesWithOrganization method")
//			},
//			GetGradesWithOrganizationWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereGradeParam, order parameter.GradeOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.GradeWithOrganization], error) {
//				panic("mock out the GetGradesWithOrganizationWithSd method")
//			},
//			GetGradesWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereGradeParam, order parameter.GradeOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Grade], error) {
//				panic("mock out the GetGradesWithSd method")
//			},
//			GetGroupsFunc: func(ctx context.Context, where parameter.WhereGroupParam, order parameter.GroupOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Group], error) {
//				panic("mock out the GetGroups method")
//			},
//			GetGroupsWithOrganizationFunc: func(ctx context.Context, where parameter.WhereGroupParam, order parameter.GroupOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.GroupWithOrganization], error) {
//				panic("mock out the GetGroupsWithOrganization method")
//			},
//			GetGroupsWithOrganizationWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereGroupParam, order parameter.GroupOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.GroupWithOrganization], error) {
//				panic("mock out the GetGroupsWithOrganizationWithSd method")
//			},
//			GetGroupsWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereGroupParam, order parameter.GroupOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Group], error) {
//				panic("mock out the GetGroupsWithSd method")
//			},
//			GetImagesFunc: func(ctx context.Context, where parameter.WhereImageParam, order parameter.ImageOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Image], error) {
//				panic("mock out the GetImages method")
//			},
//			GetImagesWithAttachableItemFunc: func(ctx context.Context, where parameter.WhereImageParam, order parameter.ImageOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ImageWithAttachableItem], error) {
//				panic("mock out the GetImagesWithAttachableItem method")
//			},
//			GetImagesWithAttachableItemWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereImageParam, order parameter.ImageOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ImageWithAttachableItem], error) {
//				panic("mock out the GetImagesWithAttachableItemWithSd method")
//			},
//			GetImagesWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereImageParam, order parameter.ImageOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Image], error) {
//				panic("mock out the GetImagesWithSd method")
//			},
//			GetMembersFunc: func(ctx context.Context, where parameter.WhereMemberParam, order parameter.MemberOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Member], error) {
//				panic("mock out the GetMembers method")
//			},
//			GetMembersOnChatRoomFunc: func(ctx context.Context, chatRoomID uuid.UUID, where parameter.WhereMemberOnChatRoomParam, order parameter.MemberOnChatRoomOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MemberOnChatRoom], error) {
//				panic("mock out the GetMembersOnChatRoom method")
//			},
//			GetMembersOnChatRoomAddMemberActionFunc: func(ctx context.Context, chatRoomAddMemberActionID uuid.UUID, where parameter.WhereMemberOnChatRoomAddMemberActionParam, order parameter.MemberOnChatRoomAddMemberActionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MemberOnChatRoomAddMemberAction], error) {
//				panic("mock out the GetMembersOnChatRoomAddMemberAction method")
//			},
//			GetMembersOnChatRoomAddMemberActionWithSdFunc: func(ctx context.Context, sd Sd, chatRoomAddMemberActionID uuid.UUID, where parameter.WhereMemberOnChatRoomAddMemberActionParam, order parameter.MemberOnChatRoomAddMemberActionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MemberOnChatRoomAddMemberAction], error) {
//				panic("mock out the GetMembersOnChatRoomAddMemberActionWithSd method")
//			},
//			GetMembersOnChatRoomRemoveMemberActionFunc: func(ctx context.Context, chatRoomRemoveMemberActionID uuid.UUID, where parameter.WhereMemberOnChatRoomRemoveMemberActionParam, order parameter.MemberOnChatRoomRemoveMemberActionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MemberOnChatRoomRemoveMemberAction], error) {
//				panic("mock out the GetMembersOnChatRoomRemoveMemberAction method")
//			},
//			GetMembersOnChatRoomRemoveMemberActionWithSdFunc: func(ctx context.Context, sd Sd, chatRoomRemoveMemberActionID uuid.UUID, where parameter.WhereMemberOnChatRoomRemoveMemberActionParam, order parameter.MemberOnChatRoomRemoveMemberActionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MemberOnChatRoomRemoveMemberAction], error) {
//				panic("mock out the GetMembersOnChatRoomRemoveMemberActionWithSd method")
//			},
//			GetMembersOnChatRoomWithSdFunc: func(ctx context.Context, sd Sd, chatRoomID uuid.UUID, where parameter.WhereMemberOnChatRoomParam, order parameter.MemberOnChatRoomOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MemberOnChatRoom], error) {
//				panic("mock out the GetMembersOnChatRoomWithSd method")
//			},
//			GetMembersOnOrganizationFunc: func(ctx context.Context, organizationID uuid.UUID, where parameter.WhereMemberOnOrganizationParam, order parameter.MemberOnOrganizationOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MemberOnOrganization], error) {
//				panic("mock out the GetMembersOnOrganization method")
//			},
//			GetMembersOnOrganizationWithSdFunc: func(ctx context.Context, sd Sd, organizationID uuid.UUID, where parameter.WhereMemberOnOrganizationParam, order parameter.MemberOnOrganizationOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MemberOnOrganization], error) {
//				panic("mock out the GetMembersOnOrganizationWithSd method")
//			},
//			GetMembersWithAttendStatusFunc: func(ctx context.Context, where parameter.WhereMemberParam, order parameter.MemberOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MemberWithAttendStatus], error) {
//				panic("mock out the GetMembersWithAttendStatus method")
//			},
//			GetMembersWithAttendStatusWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereMemberParam, order parameter.MemberOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MemberWithAttendStatus], error) {
//				panic("mock out the GetMembersWithAttendStatusWithSd method")
//			},
//			GetMembersWithCrewFunc: func(ctx context.Context, where parameter.WhereMemberParam, order parameter.MemberOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MemberWithCrew], error) {
//				panic("mock out the GetMembersWithCrew method")
//			},
//			GetMembersWithCrewWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereMemberParam, order parameter.MemberOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MemberWithCrew], error) {
//				panic("mock out the GetMembersWithCrewWithSd method")
//			},
//			GetMembersWithDetailFunc: func(ctx context.Context, where parameter.WhereMemberParam, order parameter.MemberOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MemberWithDetail], error) {
//				panic("mock out the GetMembersWithDetail method")
//			},
//			GetMembersWithDetailWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereMemberParam, order parameter.MemberOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MemberWithDetail], error) {
//				panic("mock out the GetMembersWithDetailWithSd method")
//			},
//			GetMembersWithPersonalOrganizationFunc: func(ctx context.Context, where parameter.WhereMemberParam, order parameter.MemberOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MemberWithPersonalOrganization], error) {
//				panic("mock out the GetMembersWithPersonalOrganization method")
//			},
//			GetMembersWithPersonalOrganizationWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereMemberParam, order parameter.MemberOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MemberWithPersonalOrganization], error) {
//				panic("mock out the GetMembersWithPersonalOrganizationWithSd method")
//			},
//			GetMembersWithProfileImageFunc: func(ctx context.Context, where parameter.WhereMemberParam, order parameter.MemberOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MemberWithProfileImage], error) {
//				panic("mock out the GetMembersWithProfileImage method")
//			},
//			GetMembersWithProfileImageWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereMemberParam, order parameter.MemberOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MemberWithProfileImage], error) {
//				panic("mock out the GetMembersWithProfileImageWithSd method")
//			},
//			GetMembersWithRoleFunc: func(ctx context.Context, where parameter.WhereMemberParam, order parameter.MemberOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MemberWithRole], error) {
//				panic("mock out the GetMembersWithRole method")
//			},
//			GetMembersWithRoleWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereMemberParam, order parameter.MemberOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MemberWithRole], error) {
//				panic("mock out the GetMembersWithRoleWithSd method")
//			},
//			GetMembersWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereMemberParam, order parameter.MemberOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Member], error) {
//				panic("mock out the GetMembersWithSd method")
//			},
//			GetMessagesFunc: func(ctx context.Context, where parameter.WhereMessageParam, order parameter.MessageOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Message], error) {
//				panic("mock out the GetMessages method")
//			},
//			GetMessagesWithChatRoomFunc: func(ctx context.Context, where parameter.WhereMessageParam, order parameter.MessageOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MessageWithChatRoom], error) {
//				panic("mock out the GetMessagesWithChatRoom method")
//			},
//			GetMessagesWithChatRoomWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereMessageParam, order parameter.MessageOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MessageWithChatRoom], error) {
//				panic("mock out the GetMessagesWithChatRoomWithSd method")
//			},
//			GetMessagesWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereMessageParam, order parameter.MessageOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Message], error) {
//				panic("mock out the GetMessagesWithSd method")
//			},
//			GetMessagesWithSenderFunc: func(ctx context.Context, where parameter.WhereMessageParam, order parameter.MessageOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MessageWithSender], error) {
//				panic("mock out the GetMessagesWithSender method")
//			},
//			GetMessagesWithSenderWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereMessageParam, order parameter.MessageOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MessageWithSender], error) {
//				panic("mock out the GetMessagesWithSenderWithSd method")
//			},
//			GetMimeTypesFunc: func(ctx context.Context, where parameter.WhereMimeTypeParam, order parameter.MimeTypeOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MimeType], error) {
//				panic("mock out the GetMimeTypes method")
//			},
//			GetMimeTypesWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereMimeTypeParam, order parameter.MimeTypeOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MimeType], error) {
//				panic("mock out the GetMimeTypesWithSd method")
//			},
//			GetOrganizationsFunc: func(ctx context.Context, where parameter.WhereOrganizationParam, order parameter.OrganizationOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Organization], error) {
//				panic("mock out the GetOrganizations method")
//			},
//			GetOrganizationsOnMemberFunc: func(ctx context.Context, memberID uuid.UUID, where parameter.WhereOrganizationOnMemberParam, order parameter.OrganizationOnMemberOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.OrganizationOnMember], error) {
//				panic("mock out the GetOrganizationsOnMember method")
//			},
//			GetOrganizationsOnMemberWithSdFunc: func(ctx context.Context, sd Sd, memberID uuid.UUID, where parameter.WhereOrganizationOnMemberParam, order parameter.OrganizationOnMemberOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.OrganizationOnMember], error) {
//				panic("mock out the GetOrganizationsOnMemberWithSd method")
//			},
//			GetOrganizationsWithChatRoomFunc: func(ctx context.Context, where parameter.WhereOrganizationParam, order parameter.OrganizationOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.OrganizationWithChatRoom], error) {
//				panic("mock out the GetOrganizationsWithChatRoom method")
//			},
//			GetOrganizationsWithChatRoomAndDetailFunc: func(ctx context.Context, where parameter.WhereOrganizationParam, order parameter.OrganizationOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.OrganizationWithChatRoomAndDetail], error) {
//				panic("mock out the GetOrganizationsWithChatRoomAndDetail method")
//			},
//			GetOrganizationsWithChatRoomAndDetailWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereOrganizationParam, order parameter.OrganizationOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.OrganizationWithChatRoomAndDetail], error) {
//				panic("mock out the GetOrganizationsWithChatRoomAndDetailWithSd method")
//			},
//			GetOrganizationsWithChatRoomWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereOrganizationParam, order parameter.OrganizationOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.OrganizationWithChatRoom], error) {
//				panic("mock out the GetOrganizationsWithChatRoomWithSd method")
//			},
//			GetOrganizationsWithDetailFunc: func(ctx context.Context, where parameter.WhereOrganizationParam, order parameter.OrganizationOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.OrganizationWithDetail], error) {
//				panic("mock out the GetOrganizationsWithDetail method")
//			},
//			GetOrganizationsWithDetailWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereOrganizationParam, order parameter.OrganizationOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.OrganizationWithDetail], error) {
//				panic("mock out the GetOrganizationsWithDetailWithSd method")
//			},
//			GetOrganizationsWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereOrganizationParam, order parameter.OrganizationOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Organization], error) {
//				panic("mock out the GetOrganizationsWithSd method")
//			},
//			GetPermissionCategoriesFunc: func(ctx context.Context, where parameter.WherePermissionCategoryParam, order parameter.PermissionCategoryOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.PermissionCategory], error) {
//				panic("mock out the GetPermissionCategories method")
//			},
//			GetPermissionCategoriesWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WherePermissionCategoryParam, order parameter.PermissionCategoryOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.PermissionCategory], error) {
//				panic("mock out the GetPermissionCategoriesWithSd method")
//			},
//			GetPermissionsFunc: func(ctx context.Context, where parameter.WherePermissionParam, order parameter.PermissionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Permission], error) {
//				panic("mock out the GetPermissions method")
//			},
//			GetPermissionsWithCategoryFunc: func(ctx context.Context, where parameter.WherePermissionParam, order parameter.PermissionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.PermissionWithCategory], error) {
//				panic("mock out the GetPermissionsWithCategory method")
//			},
//			GetPermissionsWithCategoryWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WherePermissionParam, order parameter.PermissionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.PermissionWithCategory], error) {
//				panic("mock out the GetPermissionsWithCategoryWithSd method")
//			},
//			GetPermissionsWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WherePermissionParam, order parameter.PermissionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Permission], error) {
//				panic("mock out the GetPermissionsWithSd method")
//			},
//			GetPluralAbsencesFunc: func(ctx context.Context, ids []uuid.UUID, order parameter.AbsenceOrderMethod, np NumberedPaginationParam) (ListResult[entity.Absence], error) {
//				panic("mock out the GetPluralAbsences method")
//			},
//			GetPluralAbsencesWithSdFunc: func(ctx context.Context, sd Sd, ids []uuid.UUID, order parameter.AbsenceOrderMethod, np NumberedPaginationParam) (ListResult[entity.Absence], error) {
//				panic("mock out the GetPluralAbsencesWithSd method")
//			},
//			GetPluralAttachableItemsFunc: func(ctx context.Context, attachableItemIDs []uuid.UUID, order parameter.AttachableItemOrderMethod, np NumberedPaginationParam) (ListResult[entity.AttachableItemWithContent], error) {
//				panic("mock out the GetPluralAttachableItems method")
//			},
//			GetPluralAttachableItemsWithMimeTypeFunc: func(ctx context.Context, attachableItemIDs []uuid.UUID, order parameter.AttachableItemOrderMethod, np NumberedPaginationParam) (ListResult[entity.AttachableItemWithMimeType], error) {
//				panic("mock out the GetPluralAttachableItemsWithMimeType method")
//			},
//			GetPluralAttachableItemsWithMimeTypeWithSdFunc: func(ctx context.Context, sd Sd, attachableItemIDs []uuid.UUID, order parameter.AttachableItemOrderMethod, np NumberedPaginationParam) (ListResult[entity.AttachableItemWithMimeType], error) {
//				panic("mock out the GetPluralAttachableItemsWithMimeTypeWithSd method")
//			},
//			GetPluralAttachableItemsWithSdFunc: func(ctx context.Context, sd Sd, attachableItemIDs []uuid.UUID, order parameter.AttachableItemOrderMethod, np NumberedPaginationParam) (ListResult[entity.AttachableItemWithContent], error) {
//				panic("mock out the GetPluralAttachableItemsWithSd method")
//			},
//			GetPluralAttachedItemsOnMessageFunc: func(ctx context.Context, messageIDs []uuid.UUID, order parameter.AttachedItemOnMessageOrderMethod, np NumberedPaginationParam) (ListResult[entity.AttachedItemOnMessage], error) {
//				panic("mock out the GetPluralAttachedItemsOnMessage method")
//			},
//			GetPluralAttachedItemsOnMessageWithMimeTypeFunc: func(ctx context.Context, messageIDs []uuid.UUID, order parameter.AttachedItemOnMessageOrderMethod, np NumberedPaginationParam) (ListResult[entity.AttachedItemOnMessageWithMimeType], error) {
//				panic("mock out the GetPluralAttachedItemsOnMessageWithMimeType method")
//			},
//			GetPluralAttachedItemsOnMessageWithMimeTypeWithSdFunc: func(ctx context.Context, sd Sd, messageIDs []uuid.UUID, order parameter.AttachedItemOnMessageOrderMethod, np NumberedPaginationParam) (ListResult[entity.AttachedItemOnMessageWithMimeType], error) {
//				panic("mock out the GetPluralAttachedItemsOnMessageWithMimeTypeWithSd method")
//			},
//			GetPluralAttachedItemsOnMessageWithSdFunc: func(ctx context.Context, sd Sd, messageIDs []uuid.UUID, order parameter.AttachedItemOnMessageOrderMethod, np NumberedPaginationParam) (ListResult[entity.AttachedItemOnMessage], error) {
//				panic("mock out the GetPluralAttachedItemsOnMessageWithSd method")
//			},
//			GetPluralAttendStatusesFunc: func(ctx context.Context, attendStatusIDs []uuid.UUID, order parameter.AttendStatusOrderMethod, np NumberedPaginationParam) (ListResult[entity.AttendStatus], error) {
//				panic("mock out the GetPluralAttendStatuses method")
//			},
//			GetPluralAttendStatusesWithSdFunc: func(ctx context.Context, sd Sd, attendStatusIDs []uuid.UUID, order parameter.AttendStatusOrderMethod, np NumberedPaginationParam) (ListResult[entity.AttendStatus], error) {
//				panic("mock out the GetPluralAttendStatusesWithSd method")
//			},
//			GetPluralAttendanceTypesFunc: func(ctx context.Context, attendanceTypeIDs []uuid.UUID, order parameter.AttendanceTypeOrderMethod, np NumberedPaginationParam) (ListResult[entity.AttendanceType], error) {
//				panic("mock out the GetPluralAttendanceTypes method")
//			},
//			GetPluralAttendanceTypesWithSdFunc: func(ctx context.Context, sd Sd, attendanceTypeIDs []uuid.UUID, order parameter.AttendanceTypeOrderMethod, np NumberedPaginationParam) (ListResult[entity.AttendanceType], error) {
//				panic("mock out the GetPluralAttendanceTypesWithSd method")
//			},
//			GetPluralChatRoomActionTypesFunc: func(ctx context.Context, recordTypeIDs []uuid.UUID, order parameter.ChatRoomActionTypeOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomActionType], error) {
//				panic("mock out the GetPluralChatRoomActionTypes method")
//			},
//			GetPluralChatRoomActionTypesWithSdFunc: func(ctx context.Context, sd Sd, recordTypeIDs []uuid.UUID, order parameter.ChatRoomActionTypeOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomActionType], error) {
//				panic("mock out the GetPluralChatRoomActionTypesWithSd method")
//			},
//			GetPluralChatRoomActionsFunc: func(ctx context.Context, chatRoomActionIDs []uuid.UUID, order parameter.ChatRoomActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomAction], error) {
//				panic("mock out the GetPluralChatRoomActions method")
//			},
//			GetPluralChatRoomActionsWithDetailFunc: func(ctx context.Context, chatRoomActionIDs []uuid.UUID, order parameter.ChatRoomActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomActionWithDetail], error) {
//				panic("mock out the GetPluralChatRoomActionsWithDetail method")
//			},
//			GetPluralChatRoomActionsWithDetailWithSdFunc: func(ctx context.Context, sd Sd, chatRoomActionIDs []uuid.UUID, order parameter.ChatRoomActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomActionWithDetail], error) {
//				panic("mock out the GetPluralChatRoomActionsWithDetailWithSd method")
//			},
//			GetPluralChatRoomActionsWithSdFunc: func(ctx context.Context, sd Sd, chatRoomActionIDs []uuid.UUID, order parameter.ChatRoomActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomAction], error) {
//				panic("mock out the GetPluralChatRoomActionsWithSd method")
//			},
//			GetPluralChatRoomAddMemberActionsFunc: func(ctx context.Context, chatRoomAddMemberActionIDs []uuid.UUID, order parameter.ChatRoomAddMemberActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomAddMemberActionWithAddedBy], error) {
//				panic("mock out the GetPluralChatRoomAddMemberActions method")
//			},
//			GetPluralChatRoomAddMemberActionsByChatRoomActionIDsFunc: func(ctx context.Context, chatRoomActionIDs []uuid.UUID, order parameter.ChatRoomAddMemberActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomAddMemberActionWithAddedBy], error) {
//				panic("mock out the GetPluralChatRoomAddMemberActionsByChatRoomActionIDs method")
//			},
//			GetPluralChatRoomAddMemberActionsByChatRoomActionIDsWithSdFunc: func(ctx context.Context, sd Sd, chatRoomActionIDs []uuid.UUID, order parameter.ChatRoomAddMemberActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomAddMemberActionWithAddedBy], error) {
//				panic("mock out the GetPluralChatRoomAddMemberActionsByChatRoomActionIDsWithSd method")
//			},
//			GetPluralChatRoomAddMemberActionsWithSdFunc: func(ctx context.Context, sd Sd, chatRoomAddMemberActionIDs []uuid.UUID, order parameter.ChatRoomAddMemberActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomAddMemberActionWithAddedBy], error) {
//				panic("mock out the GetPluralChatRoomAddMemberActionsWithSd method")
//			},
//			GetPluralChatRoomCreateActionsFunc: func(ctx context.Context, chatRoomCreateActionIDs []uuid.UUID, order parameter.ChatRoomCreateActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomCreateActionWithCreatedBy], error) {
//				panic("mock out the GetPluralChatRoomCreateActions method")
//			},
//			GetPluralChatRoomCreateActionsByChatRoomActionIDsFunc: func(ctx context.Context, chatRoomActionIDs []uuid.UUID, order parameter.ChatRoomCreateActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomCreateActionWithCreatedBy], error) {
//				panic("mock out the GetPluralChatRoomCreateActionsByChatRoomActionIDs method")
//			},
//			GetPluralChatRoomCreateActionsByChatRoomActionIDsWithSdFunc: func(ctx context.Context, sd Sd, chatRoomActionIDs []uuid.UUID, order parameter.ChatRoomCreateActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomCreateActionWithCreatedBy], error) {
//				panic("mock out the GetPluralChatRoomCreateActionsByChatRoomActionIDsWithSd method")
//			},
//			GetPluralChatRoomCreateActionsWithSdFunc: func(ctx context.Context, sd Sd, chatRoomCreateActionIDs []uuid.UUID, order parameter.ChatRoomCreateActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomCreateActionWithCreatedBy], error) {
//				panic("mock out the GetPluralChatRoomCreateActionsWithSd method")
//			},
//			GetPluralChatRoomDeleteMessageActionsFunc: func(ctx context.Context, chatRoomDeleteMessageActionIDs []uuid.UUID, order parameter.ChatRoomDeleteMessageActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomDeleteMessageActionWithDeletedBy], error) {
//				panic("mock out the GetPluralChatRoomDeleteMessageActions method")
//			},
//			GetPluralChatRoomDeleteMessageActionsByChatRoomActionIDsFunc: func(ctx context.Context, chatRoomActionIDs []uuid.UUID, order parameter.ChatRoomDeleteMessageActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomDeleteMessageActionWithDeletedBy], error) {
//				panic("mock out the GetPluralChatRoomDeleteMessageActionsByChatRoomActionIDs method")
//			},
//			GetPluralChatRoomDeleteMessageActionsByChatRoomActionIDsWithSdFunc: func(ctx context.Context, sd Sd, chatRoomActionIDs []uuid.UUID, order parameter.ChatRoomDeleteMessageActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomDeleteMessageActionWithDeletedBy], error) {
//				panic("mock out the GetPluralChatRoomDeleteMessageActionsByChatRoomActionIDsWithSd method")
//			},
//			GetPluralChatRoomDeleteMessageActionsWithSdFunc: func(ctx context.Context, sd Sd, chatRoomDeleteMessageActionIDs []uuid.UUID, order parameter.ChatRoomDeleteMessageActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomDeleteMessageActionWithDeletedBy], error) {
//				panic("mock out the GetPluralChatRoomDeleteMessageActionsWithSd method")
//			},
//			GetPluralChatRoomRemoveMemberActionsFunc: func(ctx context.Context, chatRoomRemoveMemberActionIDs []uuid.UUID, order parameter.ChatRoomRemoveMemberActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomRemoveMemberActionWithRemovedBy], error) {
//				panic("mock out the GetPluralChatRoomRemoveMemberActions method")
//			},
//			GetPluralChatRoomRemoveMemberActionsByChatRoomActionIDsFunc: func(ctx context.Context, chatRoomActionIDs []uuid.UUID, order parameter.ChatRoomRemoveMemberActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomRemoveMemberActionWithRemovedBy], error) {
//				panic("mock out the GetPluralChatRoomRemoveMemberActionsByChatRoomActionIDs method")
//			},
//			GetPluralChatRoomRemoveMemberActionsByChatRoomActionIDsWithSdFunc: func(ctx context.Context, sd Sd, chatRoomActionIDs []uuid.UUID, order parameter.ChatRoomRemoveMemberActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomRemoveMemberActionWithRemovedBy], error) {
//				panic("mock out the GetPluralChatRoomRemoveMemberActionsByChatRoomActionIDsWithSd method")
//			},
//			GetPluralChatRoomRemoveMemberActionsWithSdFunc: func(ctx context.Context, sd Sd, chatRoomRemoveMemberActionIDs []uuid.UUID, order parameter.ChatRoomRemoveMemberActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomRemoveMemberActionWithRemovedBy], error) {
//				panic("mock out the GetPluralChatRoomRemoveMemberActionsWithSd method")
//			},
//			GetPluralChatRoomUpdateNameActionsFunc: func(ctx context.Context, chatRoomUpdateNameActionIDs []uuid.UUID, order parameter.ChatRoomUpdateNameActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomUpdateNameActionWithUpdatedBy], error) {
//				panic("mock out the GetPluralChatRoomUpdateNameActions method")
//			},
//			GetPluralChatRoomUpdateNameActionsByChatRoomActionIDsFunc: func(ctx context.Context, chatRoomActionIDs []uuid.UUID, order parameter.ChatRoomUpdateNameActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomUpdateNameActionWithUpdatedBy], error) {
//				panic("mock out the GetPluralChatRoomUpdateNameActionsByChatRoomActionIDs method")
//			},
//			GetPluralChatRoomUpdateNameActionsByChatRoomActionIDsWithSdFunc: func(ctx context.Context, sd Sd, chatRoomActionIDs []uuid.UUID, order parameter.ChatRoomUpdateNameActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomUpdateNameActionWithUpdatedBy], error) {
//				panic("mock out the GetPluralChatRoomUpdateNameActionsByChatRoomActionIDsWithSd method")
//			},
//			GetPluralChatRoomUpdateNameActionsWithSdFunc: func(ctx context.Context, sd Sd, chatRoomUpdateNameActionIDs []uuid.UUID, order parameter.ChatRoomUpdateNameActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomUpdateNameActionWithUpdatedBy], error) {
//				panic("mock out the GetPluralChatRoomUpdateNameActionsWithSd method")
//			},
//			GetPluralChatRoomWithdrawActionsFunc: func(ctx context.Context, chatRoomWithdrawActionIDs []uuid.UUID, order parameter.ChatRoomWithdrawActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomWithdrawActionWithMember], error) {
//				panic("mock out the GetPluralChatRoomWithdrawActions method")
//			},
//			GetPluralChatRoomWithdrawActionsByChatRoomActionIDsFunc: func(ctx context.Context, chatRoomActionIDs []uuid.UUID, order parameter.ChatRoomWithdrawActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomWithdrawActionWithMember], error) {
//				panic("mock out the GetPluralChatRoomWithdrawActionsByChatRoomActionIDs method")
//			},
//			GetPluralChatRoomWithdrawActionsByChatRoomActionIDsWithSdFunc: func(ctx context.Context, sd Sd, chatRoomActionIDs []uuid.UUID, order parameter.ChatRoomWithdrawActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomWithdrawActionWithMember], error) {
//				panic("mock out the GetPluralChatRoomWithdrawActionsByChatRoomActionIDsWithSd method")
//			},
//			GetPluralChatRoomWithdrawActionsWithSdFunc: func(ctx context.Context, sd Sd, chatRoomWithdrawActionIDs []uuid.UUID, order parameter.ChatRoomWithdrawActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomWithdrawActionWithMember], error) {
//				panic("mock out the GetPluralChatRoomWithdrawActionsWithSd method")
//			},
//			GetPluralChatRoomsFunc: func(ctx context.Context, chatRoomIDs []uuid.UUID, order parameter.ChatRoomOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoom], error) {
//				panic("mock out the GetPluralChatRooms method")
//			},
//			GetPluralChatRoomsOnMemberFunc: func(ctx context.Context, memberIDs []uuid.UUID, np NumberedPaginationParam, order parameter.ChatRoomOnMemberOrderMethod) (ListResult[entity.ChatRoomOnMember], error) {
//				panic("mock out the GetPluralChatRoomsOnMember method")
//			},
//			GetPluralChatRoomsOnMemberWithSdFunc: func(ctx context.Context, sd Sd, memberIDs []uuid.UUID, np NumberedPaginationParam, order parameter.ChatRoomOnMemberOrderMethod) (ListResult[entity.ChatRoomOnMember], error) {
//				panic("mock out the GetPluralChatRoomsOnMemberWithSd method")
//			},
//			GetPluralChatRoomsWithCoverImageFunc: func(ctx context.Context, chatRoomIDs []uuid.UUID, order parameter.ChatRoomOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomWithCoverImage], error) {
//				panic("mock out the GetPluralChatRoomsWithCoverImage method")
//			},
//			GetPluralChatRoomsWithCoverImageWithSdFunc: func(ctx context.Context, sd Sd, chatRoomIDs []uuid.UUID, order parameter.ChatRoomOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomWithCoverImage], error) {
//				panic("mock out the GetPluralChatRoomsWithCoverImageWithSd method")
//			},
//			GetPluralChatRoomsWithSdFunc: func(ctx context.Context, sd Sd, chatRoomIDs []uuid.UUID, order parameter.ChatRoomOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoom], error) {
//				panic("mock out the GetPluralChatRoomsWithSd method")
//			},
//			GetPluralEventTypesFunc: func(ctx context.Context, eventTypeIDs []uuid.UUID, order parameter.EventTypeOrderMethod, np NumberedPaginationParam) (ListResult[entity.EventType], error) {
//				panic("mock out the GetPluralEventTypes method")
//			},
//			GetPluralEventTypesWithSdFunc: func(ctx context.Context, sd Sd, eventTypeIDs []uuid.UUID, order parameter.EventTypeOrderMethod, np NumberedPaginationParam) (ListResult[entity.EventType], error) {
//				panic("mock out the GetPluralEventTypesWithSd method")
//			},
//			GetPluralFilesFunc: func(ctx context.Context, fileIDs []uuid.UUID, order parameter.FileOrderMethod, np NumberedPaginationParam) (ListResult[entity.File], error) {
//				panic("mock out the GetPluralFiles method")
//			},
//			GetPluralFilesWithAttachableItemFunc: func(ctx context.Context, fileIDs []uuid.UUID, order parameter.FileOrderMethod, np NumberedPaginationParam) (ListResult[entity.FileWithAttachableItem], error) {
//				panic("mock out the GetPluralFilesWithAttachableItem method")
//			},
//			GetPluralFilesWithAttachableItemWithSdFunc: func(ctx context.Context, sd Sd, fileIDs []uuid.UUID, order parameter.FileOrderMethod, np NumberedPaginationParam) (ListResult[entity.FileWithAttachableItem], error) {
//				panic("mock out the GetPluralFilesWithAttachableItemWithSd method")
//			},
//			GetPluralFilesWithSdFunc: func(ctx context.Context, sd Sd, fileIDs []uuid.UUID, order parameter.FileOrderMethod, np NumberedPaginationParam) (ListResult[entity.File], error) {
//				panic("mock out the GetPluralFilesWithSd method")
//			},
//			GetPluralGradesFunc: func(ctx context.Context, gradeIDs []uuid.UUID, order parameter.GradeOrderMethod, np NumberedPaginationParam) (ListResult[entity.Grade], error) {
//				panic("mock out the GetPluralGrades method")
//			},
//			GetPluralGradesWithOrganizationFunc: func(ctx context.Context, gradeIDs []uuid.UUID, order parameter.GradeOrderMethod, np NumberedPaginationParam) (ListResult[entity.GradeWithOrganization], error) {
//				panic("mock out the GetPluralGradesWithOrganization method")
//			},
//			GetPluralGradesWithOrganizationWithSdFunc: func(ctx context.Context, sd Sd, gradeIDs []uuid.UUID, order parameter.GradeOrderMethod, np NumberedPaginationParam) (ListResult[entity.GradeWithOrganization], error) {
//				panic("mock out the GetPluralGradesWithOrganizationWithSd method")
//			},
//			GetPluralGradesWithSdFunc: func(ctx context.Context, sd Sd, gradeIDs []uuid.UUID, order parameter.GradeOrderMethod, np NumberedPaginationParam) (ListResult[entity.Grade], error) {
//				panic("mock out the GetPluralGradesWithSd method")
//			},
//			GetPluralGroupsFunc: func(ctx context.Context, groupIDs []uuid.UUID, order parameter.GroupOrderMethod, np NumberedPaginationParam) (ListResult[entity.Group], error) {
//				panic("mock out the GetPluralGroups method")
//			},
//			GetPluralGroupsWithOrganizationFunc: func(ctx context.Context, groupIDs []uuid.UUID, order parameter.GroupOrderMethod, np NumberedPaginationParam) (ListResult[entity.GroupWithOrganization], error) {
//				panic("mock out the GetPluralGroupsWithOrganization method")
//			},
//			GetPluralGroupsWithOrganizationWithSdFunc: func(ctx context.Context, sd Sd, groupIDs []uuid.UUID, order parameter.GroupOrderMethod, np NumberedPaginationParam) (ListResult[entity.GroupWithOrganization], error) {
//				panic("mock out the GetPluralGroupsWithOrganizationWithSd method")
//			},
//			GetPluralGroupsWithSdFunc: func(ctx context.Context, sd Sd, groupIDs []uuid.UUID, order parameter.GroupOrderMethod, np NumberedPaginationParam) (ListResult[entity.Group], error) {
//				panic("mock out the GetPluralGroupsWithSd method")
//			},
//			GetPluralImagesFunc: func(ctx context.Context, imageIDs []uuid.UUID, order parameter.ImageOrderMethod, np NumberedPaginationParam) (ListResult[entity.Image], error) {
//				panic("mock out the GetPluralImages method")
//			},
//			GetPluralImagesWithAttachableItemFunc: func(ctx context.Context, imageIDs []uuid.UUID, order parameter.ImageOrderMethod, np NumberedPaginationParam) (ListResult[entity.ImageWithAttachableItem], error) {
//				panic("mock out the GetPluralImagesWithAttachableItem method")
//			},
//			GetPluralImagesWithAttachableItemWithSdFunc: func(ctx context.Context, sd Sd, imageIDs []uuid.UUID, order parameter.ImageOrderMethod, np NumberedPaginationParam) (ListResult[entity.ImageWithAttachableItem], error) {
//				panic("mock out the GetPluralImagesWithAttachableItemWithSd method")
//			},
//			GetPluralImagesWithSdFunc: func(ctx context.Context, sd Sd, imageIDs []uuid.UUID, order parameter.ImageOrderMethod, np NumberedPaginationParam) (ListResult[entity.Image], error) {
//				panic("mock out the GetPluralImagesWithSd method")
//			},
//			GetPluralMembersFunc: func(ctx context.Context, memberIDs []uuid.UUID, order parameter.MemberOrderMethod, np NumberedPaginationParam) (ListResult[entity.Member], error) {
//				panic("mock out the GetPluralMembers method")
//			},
//			GetPluralMembersOnChatRoomFunc: func(ctx context.Context, chatRoomIDs []uuid.UUID, np NumberedPaginationParam, order parameter.MemberOnChatRoomOrderMethod) (ListResult[entity.MemberOnChatRoom], error) {
//				panic("mock out the GetPluralMembersOnChatRoom method")
//			},
//			GetPluralMembersOnChatRoomAddMemberActionFunc: func(ctx context.Context, chatRoomAddMemberActionIDs []uuid.UUID, order parameter.MemberOnChatRoomAddMemberActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.MemberOnChatRoomAddMemberAction], error) {
//				panic("mock out the GetPluralMembersOnChatRoomAddMemberAction method")
//			},
//			GetPluralMembersOnChatRoomAddMemberActionWithSdFunc: func(ctx context.Context, sd Sd, chatRoomAddMemberActionIDs []uuid.UUID, order parameter.MemberOnChatRoomAddMemberActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.MemberOnChatRoomAddMemberAction], error) {
//				panic("mock out the GetPluralMembersOnChatRoomAddMemberActionWithSd method")
//			},
//			GetPluralMembersOnChatRoomRemoveMemberActionFunc: func(ctx context.Context, chatRoomRemoveMemberActionIDs []uuid.UUID, order parameter.MemberOnChatRoomRemoveMemberActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.MemberOnChatRoomRemoveMemberAction], error) {
//				panic("mock out the GetPluralMembersOnChatRoomRemoveMemberAction method")
//			},
//			GetPluralMembersOnChatRoomRemoveMemberActionWithSdFunc: func(ctx context.Context, sd Sd, chatRoomRemoveMemberActionIDs []uuid.UUID, order parameter.MemberOnChatRoomRemoveMemberActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.MemberOnChatRoomRemoveMemberAction], error) {
//				panic("mock out the GetPluralMembersOnChatRoomRemoveMemberActionWithSd method")
//			},
//			GetPluralMembersOnChatRoomWithSdFunc: func(ctx context.Context, sd Sd, chatRoomIDs []uuid.UUID, np NumberedPaginationParam, order parameter.MemberOnChatRoomOrderMethod) (ListResult[entity.MemberOnChatRoom], error) {
//				panic("mock out the GetPluralMembersOnChatRoomWithSd method")
//			},
//			GetPluralMembersOnOrganizationFunc: func(ctx context.Context, organizationIDs []uuid.UUID, np NumberedPaginationParam, order parameter.MemberOnOrganizationOrderMethod) (ListResult[entity.MemberOnOrganization], error) {
//				panic("mock out the GetPluralMembersOnOrganization method")
//			},
//			GetPluralMembersOnOrganizationWithSdFunc: func(ctx context.Context, sd Sd, organizationIDs []uuid.UUID, np NumberedPaginationParam, order parameter.MemberOnOrganizationOrderMethod) (ListResult[entity.MemberOnOrganization], error) {
//				panic("mock out the GetPluralMembersOnOrganizationWithSd method")
//			},
//			GetPluralMembersWithAttendStatusFunc: func(ctx context.Context, memberIDs []uuid.UUID, order parameter.MemberOrderMethod, np NumberedPaginationParam) (ListResult[entity.MemberWithAttendStatus], error) {
//				panic("mock out the GetPluralMembersWithAttendStatus method")
//			},
//			GetPluralMembersWithAttendStatusWithSdFunc: func(ctx context.Context, sd Sd, memberIDs []uuid.UUID, order parameter.MemberOrderMethod, np NumberedPaginationParam) (ListResult[entity.MemberWithAttendStatus], error) {
//				panic("mock out the GetPluralMembersWithAttendStatusWithSd method")
//			},
//			GetPluralMembersWithCrewFunc: func(ctx context.Context, memberIDs []uuid.UUID, order parameter.MemberOrderMethod, np NumberedPaginationParam) (ListResult[entity.MemberWithCrew], error) {
//				panic("mock out the GetPluralMembersWithCrew method")
//			},
//			GetPluralMembersWithCrewWithSdFunc: func(ctx context.Context, sd Sd, memberIDs []uuid.UUID, order parameter.MemberOrderMethod, np NumberedPaginationParam) (ListResult[entity.MemberWithCrew], error) {
//				panic("mock out the GetPluralMembersWithCrewWithSd method")
//			},
//			GetPluralMembersWithDetailFunc: func(ctx context.Context, memberIDs []uuid.UUID, order parameter.MemberOrderMethod, np NumberedPaginationParam) (ListResult[entity.MemberWithDetail], error) {
//				panic("mock out the GetPluralMembersWithDetail method")
//			},
//			GetPluralMembersWithDetailWithSdFunc: func(ctx context.Context, sd Sd, memberIDs []uuid.UUID, order parameter.MemberOrderMethod, np NumberedPaginationParam) (ListResult[entity.MemberWithDetail], error) {
//				panic("mock out the GetPluralMembersWithDetailWithSd method")
//			},
//			GetPluralMembersWithPersonalOrganizationFunc: func(ctx context.Context, memberIDs []uuid.UUID, order parameter.MemberOrderMethod, np NumberedPaginationParam) (ListResult[entity.MemberWithPersonalOrganization], error) {
//				panic("mock out the GetPluralMembersWithPersonalOrganization method")
//			},
//			GetPluralMembersWithPersonalOrganizationWithSdFunc: func(ctx context.Context, sd Sd, memberIDs []uuid.UUID, order parameter.MemberOrderMethod, np NumberedPaginationParam) (ListResult[entity.MemberWithPersonalOrganization], error) {
//				panic("mock out the GetPluralMembersWithPersonalOrganizationWithSd method")
//			},
//			GetPluralMembersWithProfileImageFunc: func(ctx context.Context, memberIDs []uuid.UUID, order parameter.MemberOrderMethod, np NumberedPaginationParam) (ListResult[entity.MemberWithProfileImage], error) {
//				panic("mock out the GetPluralMembersWithProfileImage method")
//			},
//			GetPluralMembersWithProfileImageWithSdFunc: func(ctx context.Context, sd Sd, memberIDs []uuid.UUID, order parameter.MemberOrderMethod, np NumberedPaginationParam) (ListResult[entity.MemberWithProfileImage], error) {
//				panic("mock out the GetPluralMembersWithProfileImageWithSd method")
//			},
//			GetPluralMembersWithRoleFunc: func(ctx context.Context, memberIDs []uuid.UUID, order parameter.MemberOrderMethod, np NumberedPaginationParam) (ListResult[entity.MemberWithRole], error) {
//				panic("mock out the GetPluralMembersWithRole method")
//			},
//			GetPluralMembersWithRoleWithSdFunc: func(ctx context.Context, sd Sd, memberIDs []uuid.UUID, order parameter.MemberOrderMethod, np NumberedPaginationParam) (ListResult[entity.MemberWithRole], error) {
//				panic("mock out the GetPluralMembersWithRoleWithSd method")
//			},
//			GetPluralMembersWithSdFunc: func(ctx context.Context, sd Sd, memberIDs []uuid.UUID, order parameter.MemberOrderMethod, np NumberedPaginationParam) (ListResult[entity.Member], error) {
//				panic("mock out the GetPluralMembersWithSd method")
//			},
//			GetPluralMessagesFunc: func(ctx context.Context, messageIDs []uuid.UUID, order parameter.MessageOrderMethod, np NumberedPaginationParam) (ListResult[entity.Message], error) {
//				panic("mock out the GetPluralMessages method")
//			},
//			GetPluralMessagesWithChatRoomFunc: func(ctx context.Context, messageIDs []uuid.UUID, order parameter.MessageOrderMethod, np NumberedPaginationParam) (ListResult[entity.MessageWithChatRoom], error) {
//				panic("mock out the GetPluralMessagesWithChatRoom method")
//			},
//			GetPluralMessagesWithChatRoomWithSdFunc: func(ctx context.Context, sd Sd, messageIDs []uuid.UUID, order parameter.MessageOrderMethod, np NumberedPaginationParam) (ListResult[entity.MessageWithChatRoom], error) {
//				panic("mock out the GetPluralMessagesWithChatRoomWithSd method")
//			},
//			GetPluralMessagesWithSdFunc: func(ctx context.Context, sd Sd, messageIDs []uuid.UUID, order parameter.MessageOrderMethod, np NumberedPaginationParam) (ListResult[entity.Message], error) {
//				panic("mock out the GetPluralMessagesWithSd method")
//			},
//			GetPluralMessagesWithSenderFunc: func(ctx context.Context, messageIDs []uuid.UUID, order parameter.MessageOrderMethod, np NumberedPaginationParam) (ListResult[entity.MessageWithSender], error) {
//				panic("mock out the GetPluralMessagesWithSender method")
//			},
//			GetPluralMessagesWithSenderByChatRoomActionIDsFunc: func(ctx context.Context, chatRoomActionIDs []uuid.UUID, order parameter.MessageOrderMethod, np NumberedPaginationParam) (ListResult[entity.MessageWithSender], error) {
//				panic("mock out the GetPluralMessagesWithSenderByChatRoomActionIDs method")
//			},
//			GetPluralMessagesWithSenderByChatRoomActionIDsWithSdFunc: func(ctx context.Context, sd Sd, chatRoomActionIDs []uuid.UUID, order parameter.MessageOrderMethod, np NumberedPaginationParam) (ListResult[entity.MessageWithSender], error) {
//				panic("mock out the GetPluralMessagesWithSenderByChatRoomActionIDsWithSd method")
//			},
//			GetPluralMessagesWithSenderWithSdFunc: func(ctx context.Context, sd Sd, messageIDs []uuid.UUID, order parameter.MessageOrderMethod, np NumberedPaginationParam) (ListResult[entity.MessageWithSender], error) {
//				panic("mock out the GetPluralMessagesWithSenderWithSd method")
//			},
//			GetPluralMimeTypesFunc: func(ctx context.Context, mimeTypeIDs []uuid.UUID, order parameter.MimeTypeOrderMethod, np NumberedPaginationParam) (ListResult[entity.MimeType], error) {
//				panic("mock out the GetPluralMimeTypes method")
//			},
//			GetPluralMimeTypesWithSdFunc: func(ctx context.Context, sd Sd, mimeTypeIDs []uuid.UUID, order parameter.MimeTypeOrderMethod, np NumberedPaginationParam) (ListResult[entity.MimeType], error) {
//				panic("mock out the GetPluralMimeTypesWithSd method")
//			},
//			GetPluralOrganizationsFunc: func(ctx context.Context, organizationIDs []uuid.UUID, order parameter.OrganizationOrderMethod, np NumberedPaginationParam) (ListResult[entity.Organization], error) {
//				panic("mock out the GetPluralOrganizations method")
//			},
//			GetPluralOrganizationsOnMemberFunc: func(ctx context.Context, memberIDs []uuid.UUID, np NumberedPaginationParam, order parameter.OrganizationOnMemberOrderMethod) (ListResult[entity.OrganizationOnMember], error) {
//				panic("mock out the GetPluralOrganizationsOnMember method")
//			},
//			GetPluralOrganizationsOnMemberWithSdFunc: func(ctx context.Context, sd Sd, memberIDs []uuid.UUID, np NumberedPaginationParam, order parameter.OrganizationOnMemberOrderMethod) (ListResult[entity.OrganizationOnMember], error) {
//				panic("mock out the GetPluralOrganizationsOnMemberWithSd method")
//			},
//			GetPluralOrganizationsWithChatRoomFunc: func(ctx context.Context, organizationIDs []uuid.UUID, order parameter.OrganizationOrderMethod, np NumberedPaginationParam) (ListResult[entity.OrganizationWithChatRoom], error) {
//				panic("mock out the GetPluralOrganizationsWithChatRoom method")
//			},
//			GetPluralOrganizationsWithChatRoomAndDetailFunc: func(ctx context.Context, organizationIDs []uuid.UUID, order parameter.OrganizationOrderMethod, np NumberedPaginationParam) (ListResult[entity.OrganizationWithChatRoomAndDetail], error) {
//				panic("mock out the GetPluralOrganizationsWithChatRoomAndDetail method")
//			},
//			GetPluralOrganizationsWithChatRoomAndDetailWithSdFunc: func(ctx context.Context, sd Sd, organizationIDs []uuid.UUID, order parameter.OrganizationOrderMethod, np NumberedPaginationParam) (ListResult[entity.OrganizationWithChatRoomAndDetail], error) {
//				panic("mock out the GetPluralOrganizationsWithChatRoomAndDetailWithSd method")
//			},
//			GetPluralOrganizationsWithChatRoomWithSdFunc: func(ctx context.Context, sd Sd, organizationIDs []uuid.UUID, order parameter.OrganizationOrderMethod, np NumberedPaginationParam) (ListResult[entity.OrganizationWithChatRoom], error) {
//				panic("mock out the GetPluralOrganizationsWithChatRoomWithSd method")
//			},
//			GetPluralOrganizationsWithDetailFunc: func(ctx context.Context, organizationIDs []uuid.UUID, order parameter.OrganizationOrderMethod, np NumberedPaginationParam) (ListResult[entity.OrganizationWithDetail], error) {
//				panic("mock out the GetPluralOrganizationsWithDetail method")
//			},
//			GetPluralOrganizationsWithDetailWithSdFunc: func(ctx context.Context, sd Sd, organizationIDs []uuid.UUID, order parameter.OrganizationOrderMethod, np NumberedPaginationParam) (ListResult[entity.OrganizationWithDetail], error) {
//				panic("mock out the GetPluralOrganizationsWithDetailWithSd method")
//			},
//			GetPluralOrganizationsWithSdFunc: func(ctx context.Context, sd Sd, organizationIDs []uuid.UUID, order parameter.OrganizationOrderMethod, np NumberedPaginationParam) (ListResult[entity.Organization], error) {
//				panic("mock out the GetPluralOrganizationsWithSd method")
//			},
//			GetPluralPermissionCategoriesFunc: func(ctx context.Context, permissionCategoryIDs []uuid.UUID, order parameter.PermissionCategoryOrderMethod, np NumberedPaginationParam) (ListResult[entity.PermissionCategory], error) {
//				panic("mock out the GetPluralPermissionCategories method")
//			},
//			GetPluralPermissionCategoriesWithSdFunc: func(ctx context.Context, sd Sd, permissionCategoryIDs []uuid.UUID, order parameter.PermissionCategoryOrderMethod, np NumberedPaginationParam) (ListResult[entity.PermissionCategory], error) {
//				panic("mock out the GetPluralPermissionCategoriesWithSd method")
//			},
//			GetPluralPermissionsFunc: func(ctx context.Context, permissionIDs []uuid.UUID, order parameter.PermissionOrderMethod, np NumberedPaginationParam) (ListResult[entity.Permission], error) {
//				panic("mock out the GetPluralPermissions method")
//			},
//			GetPluralPermissionsWithSdFunc: func(ctx context.Context, sd Sd, permissionIDs []uuid.UUID, order parameter.PermissionOrderMethod, np NumberedPaginationParam) (ListResult[entity.Permission], error) {
//				panic("mock out the GetPluralPermissionsWithSd method")
//			},
//			GetPluralPoliciesFunc: func(ctx context.Context, policyIDs []uuid.UUID, order parameter.PolicyOrderMethod, np NumberedPaginationParam) (ListResult[entity.Policy], error) {
//				panic("mock out the GetPluralPolicies method")
//			},
//			GetPluralPoliciesWithSdFunc: func(ctx context.Context, sd Sd, policyIDs []uuid.UUID, order parameter.PolicyOrderMethod, np NumberedPaginationParam) (ListResult[entity.Policy], error) {
//				panic("mock out the GetPluralPoliciesWithSd method")
//			},
//			GetPluralPolicyCategoriesFunc: func(ctx context.Context, policyCategoryIDs []uuid.UUID, order parameter.PolicyCategoryOrderMethod, np NumberedPaginationParam) (ListResult[entity.PolicyCategory], error) {
//				panic("mock out the GetPluralPolicyCategories method")
//			},
//			GetPluralPolicyCategoriesWithSdFunc: func(ctx context.Context, sd Sd, policyCategoryIDs []uuid.UUID, order parameter.PolicyCategoryOrderMethod, np NumberedPaginationParam) (ListResult[entity.PolicyCategory], error) {
//				panic("mock out the GetPluralPolicyCategoriesWithSd method")
//			},
//			GetPluralPrivateChatRoomCompanionsFunc: func(ctx context.Context, chatRoomIDs []uuid.UUID, memberID uuid.UUID, np NumberedPaginationParam, order parameter.MemberOnChatRoomOrderMethod) (ListResult[entity.PrivateChatRoomCompanions], error) {
//				panic("mock out the GetPluralPrivateChatRoomCompanions method")
//			},
//			GetPluralPrivateChatRoomCompanionsWithSdFunc: func(ctx context.Context, sd Sd, chatRoomIDs []uuid.UUID, memberID uuid.UUID, np NumberedPaginationParam, order parameter.MemberOnChatRoomOrderMethod) (ListResult[entity.PrivateChatRoomCompanions], error) {
//				panic("mock out the GetPluralPrivateChatRoomCompanionsWithSd method")
//			},
//			GetPluralProfessorsFunc: func(ctx context.Context, professorIDs []uuid.UUID, order parameter.ProfessorOrderMethod, np NumberedPaginationParam) (ListResult[entity.Professor], error) {
//				panic("mock out the GetPluralProfessors method")
//			},
//			GetPluralProfessorsWithMemberFunc: func(ctx context.Context, professorIDs []uuid.UUID, order parameter.ProfessorOrderMethod, np NumberedPaginationParam) (ListResult[entity.ProfessorWithMember], error) {
//				panic("mock out the GetPluralProfessorsWithMember method")
//			},
//			GetPluralProfessorsWithMemberWithSdFunc: func(ctx context.Context, sd Sd, professorIDs []uuid.UUID, order parameter.ProfessorOrderMethod, np NumberedPaginationParam) (ListResult[entity.ProfessorWithMember], error) {
//				panic("mock out the GetPluralProfessorsWithMemberWithSd method")
//			},
//			GetPluralProfessorsWithSdFunc: func(ctx context.Context, sd Sd, professorIDs []uuid.UUID, order parameter.ProfessorOrderMethod, np NumberedPaginationParam) (ListResult[entity.Professor], error) {
//				panic("mock out the GetPluralProfessorsWithSd method")
//			},
//			GetPluralReadableMembersOnMessageFunc: func(ctx context.Context, messageIDs []uuid.UUID, np NumberedPaginationParam, order parameter.ReadableMemberOnMessageOrderMethod) (ListResult[entity.ReadableMemberOnMessage], error) {
//				panic("mock out the GetPluralReadableMembersOnMessage method")
//			},
//			GetPluralReadableMembersOnMessageWithSdFunc: func(ctx context.Context, sd Sd, messageIDs []uuid.UUID, np NumberedPaginationParam, order parameter.ReadableMemberOnMessageOrderMethod) (ListResult[entity.ReadableMemberOnMessage], error) {
//				panic("mock out the GetPluralReadableMembersOnMessageWithSd method")
//			},
//			GetPluralReadableMessagesOnMemberFunc: func(ctx context.Context, memberIDs []uuid.UUID, np NumberedPaginationParam, order parameter.ReadableMessageOnMemberOrderMethod) (ListResult[entity.ReadableMessageOnMember], error) {
//				panic("mock out the GetPluralReadableMessagesOnMember method")
//			},
//			GetPluralReadableMessagesOnMemberWithSdFunc: func(ctx context.Context, sd Sd, memberIDs []uuid.UUID, np NumberedPaginationParam, order parameter.ReadableMessageOnMemberOrderMethod) (ListResult[entity.ReadableMessageOnMember], error) {
//				panic("mock out the GetPluralReadableMessagesOnMemberWithSd method")
//			},
//			GetPluralRecordTypesFunc: func(ctx context.Context, recordTypeIDs []uuid.UUID, order parameter.RecordTypeOrderMethod, np NumberedPaginationParam) (ListResult[entity.RecordType], error) {
//				panic("mock out the GetPluralRecordTypes method")
//			},
//			GetPluralRecordTypesWithSdFunc: func(ctx context.Context, sd Sd, recordTypeIDs []uuid.UUID, order parameter.RecordTypeOrderMethod, np NumberedPaginationParam) (ListResult[entity.RecordType], error) {
//				panic("mock out the GetPluralRecordTypesWithSd method")
//			},
//			GetPluralRolesFunc: func(ctx context.Context, roleIDs []uuid.UUID, order parameter.RoleOrderMethod, np NumberedPaginationParam) (ListResult[entity.Role], error) {
//				panic("mock out the GetPluralRoles method")
//			},
//			GetPluralRolesWithSdFunc: func(ctx context.Context, sd Sd, roleIDs []uuid.UUID, order parameter.RoleOrderMethod, np NumberedPaginationParam) (ListResult[entity.Role], error) {
//				panic("mock out the GetPluralRolesWithSd method")
//			},
//			GetPluralStudentsFunc: func(ctx context.Context, studentIDs []uuid.UUID, order parameter.StudentOrderMethod, np NumberedPaginationParam) (ListResult[entity.Student], error) {
//				panic("mock out the GetPluralStudents method")
//			},
//			GetPluralStudentsWithMemberFunc: func(ctx context.Context, studentIDs []uuid.UUID, order parameter.StudentOrderMethod, np NumberedPaginationParam) (ListResult[entity.StudentWithMember], error) {
//				panic("mock out the GetPluralStudentsWithMember method")
//			},
//			GetPluralStudentsWithMemberWithSdFunc: func(ctx context.Context, sd Sd, studentIDs []uuid.UUID, order parameter.StudentOrderMethod, np NumberedPaginationParam) (ListResult[entity.StudentWithMember], error) {
//				panic("mock out the GetPluralStudentsWithMemberWithSd method")
//			},
//			GetPluralStudentsWithSdFunc: func(ctx context.Context, sd Sd, studentIDs []uuid.UUID, order parameter.StudentOrderMethod, np NumberedPaginationParam) (ListResult[entity.Student], error) {
//				panic("mock out the GetPluralStudentsWithSd method")
//			},
//			GetPoliciesFunc: func(ctx context.Context, where parameter.WherePolicyParam, order parameter.PolicyOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Policy], error) {
//				panic("mock out the GetPolicies method")
//			},
//			GetPoliciesOnRoleFunc: func(ctx context.Context, roleID uuid.UUID, where parameter.WherePolicyOnRoleParam, order parameter.PolicyOnRoleOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.PolicyOnRole], error) {
//				panic("mock out the GetPoliciesOnRole method")
//			},
//			GetPoliciesOnRoleWithSdFunc: func(ctx context.Context, sd Sd, roleID uuid.UUID, where parameter.WherePolicyOnRoleParam, order parameter.PolicyOnRoleOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.PolicyOnRole], error) {
//				panic("mock out the GetPoliciesOnRoleWithSd method")
//			},
//			GetPoliciesWithCategoryFunc: func(ctx context.Context, where parameter.WherePolicyParam, order parameter.PolicyOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.PolicyWithCategory], error) {
//				panic("mock out the GetPoliciesWithCategory method")
//			},
//			GetPoliciesWithCategoryWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WherePolicyParam, order parameter.PolicyOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.PolicyWithCategory], error) {
//				panic("mock out the GetPoliciesWithCategoryWithSd method")
//			},
//			GetPoliciesWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WherePolicyParam, order parameter.PolicyOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Policy], error) {
//				panic("mock out the GetPoliciesWithSd method")
//			},
//			GetPolicyCategoriesFunc: func(ctx context.Context, where parameter.WherePolicyCategoryParam, order parameter.PolicyCategoryOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.PolicyCategory], error) {
//				panic("mock out the GetPolicyCategories method")
//			},
//			GetPolicyCategoriesWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WherePolicyCategoryParam, order parameter.PolicyCategoryOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.PolicyCategory], error) {
//				panic("mock out the GetPolicyCategoriesWithSd method")
//			},
//			GetProfessorsFunc: func(ctx context.Context, where parameter.WhereProfessorParam, order parameter.ProfessorOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Professor], error) {
//				panic("mock out the GetProfessors method")
//			},
//			GetProfessorsWithMemberFunc: func(ctx context.Context, where parameter.WhereProfessorParam, order parameter.ProfessorOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ProfessorWithMember], error) {
//				panic("mock out the GetProfessorsWithMember method")
//			},
//			GetProfessorsWithMemberWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereProfessorParam, order parameter.ProfessorOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ProfessorWithMember], error) {
//				panic("mock out the GetProfessorsWithMemberWithSd method")
//			},
//			GetProfessorsWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereProfessorParam, order parameter.ProfessorOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Professor], error) {
//				panic("mock out the GetProfessorsWithSd method")
//			},
//			GetReadableMembersOnMessageFunc: func(ctx context.Context, memberID uuid.UUID, where parameter.WhereReadableMemberOnMessageParam, order parameter.ReadableMemberOnMessageOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ReadableMemberOnMessage], error) {
//				panic("mock out the GetReadableMembersOnMessage method")
//			},
//			GetReadableMembersOnMessageWithSdFunc: func(ctx context.Context, sd Sd, memberID uuid.UUID, where parameter.WhereReadableMemberOnMessageParam, order parameter.ReadableMemberOnMessageOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ReadableMemberOnMessage], error) {
//				panic("mock out the GetReadableMembersOnMessageWithSd method")
//			},
//			GetReadableMessagesOnMemberFunc: func(ctx context.Context, memberID uuid.UUID, where parameter.WhereReadableMessageOnMemberParam, order parameter.ReadableMessageOnMemberOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ReadableMessageOnMember], error) {
//				panic("mock out the GetReadableMessagesOnMember method")
//			},
//			GetReadableMessagesOnMemberWithSdFunc: func(ctx context.Context, sd Sd, memberID uuid.UUID, where parameter.WhereReadableMessageOnMemberParam, order parameter.ReadableMessageOnMemberOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ReadableMessageOnMember], error) {
//				panic("mock out the GetReadableMessagesOnMemberWithSd method")
//			},
//			GetRecordTypesFunc: func(ctx context.Context, where parameter.WhereRecordTypeParam, order parameter.RecordTypeOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.RecordType], error) {
//				panic("mock out the GetRecordTypes method")
//			},
//			GetRecordTypesWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereRecordTypeParam, order parameter.RecordTypeOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.RecordType], error) {
//				panic("mock out the GetRecordTypesWithSd method")
//			},
//			GetRolesFunc: func(ctx context.Context, where parameter.WhereRoleParam, order parameter.RoleOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Role], error) {
//				panic("mock out the GetRoles method")
//			},
//			GetRolesOnPolicyFunc: func(ctx context.Context, policyID uuid.UUID, where parameter.WhereRoleOnPolicyParam, order parameter.RoleOnPolicyOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.RoleOnPolicy], error) {
//				panic("mock out the GetRolesOnPolicy method")
//			},
//			GetRolesOnPolicyWithSdFunc: func(ctx context.Context, sd Sd, policyID uuid.UUID, where parameter.WhereRoleOnPolicyParam, order parameter.RoleOnPolicyOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.RoleOnPolicy], error) {
//				panic("mock out the GetRolesOnPolicyWithSd method")
//			},
//			GetRolesWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereRoleParam, order parameter.RoleOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Role], error) {
//				panic("mock out the GetRolesWithSd method")
//			},
//			GetStudentsFunc: func(ctx context.Context, where parameter.WhereStudentParam, order parameter.StudentOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Student], error) {
//				panic("mock out the GetStudents method")
//			},
//			GetStudentsWithMemberFunc: func(ctx context.Context, where parameter.WhereStudentParam, order parameter.StudentOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.StudentWithMember], error) {
//				panic("mock out the GetStudentsWithMember method")
//			},
//			GetStudentsWithMemberWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereStudentParam, order parameter.StudentOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.StudentWithMember], error) {
//				panic("mock out the GetStudentsWithMemberWithSd method")
//			},
//			GetStudentsWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereStudentParam, order parameter.StudentOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Student], error) {
//				panic("mock out the GetStudentsWithSd method")
//			},
//			PluralDeleteAbsencesFunc: func(ctx context.Context, absenceIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeleteAbsences method")
//			},
//			PluralDeleteAbsencesWithSdFunc: func(ctx context.Context, sd Sd, absenceIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeleteAbsencesWithSd method")
//			},
//			PluralDeleteAttachableItemsFunc: func(ctx context.Context, attachableItemIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeleteAttachableItems method")
//			},
//			PluralDeleteAttachableItemsWithSdFunc: func(ctx context.Context, sd Sd, attachableItemIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeleteAttachableItemsWithSd method")
//			},
//			PluralDeleteAttendStatusesFunc: func(ctx context.Context, attendStatusIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeleteAttendStatuses method")
//			},
//			PluralDeleteAttendStatusesWithSdFunc: func(ctx context.Context, sd Sd, attendStatusIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeleteAttendStatusesWithSd method")
//			},
//			PluralDeleteAttendanceTypesFunc: func(ctx context.Context, attendanceTypeIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeleteAttendanceTypes method")
//			},
//			PluralDeleteAttendanceTypesWithSdFunc: func(ctx context.Context, sd Sd, attendanceTypeIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeleteAttendanceTypesWithSd method")
//			},
//			PluralDeleteChatRoomActionTypesFunc: func(ctx context.Context, recordTypeIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeleteChatRoomActionTypes method")
//			},
//			PluralDeleteChatRoomActionTypesWithSdFunc: func(ctx context.Context, sd Sd, recordTypeIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeleteChatRoomActionTypesWithSd method")
//			},
//			PluralDeleteChatRoomActionsFunc: func(ctx context.Context, chatRoomActionIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeleteChatRoomActions method")
//			},
//			PluralDeleteChatRoomActionsWithSdFunc: func(ctx context.Context, sd Sd, chatRoomActionIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeleteChatRoomActionsWithSd method")
//			},
//			PluralDeleteChatRoomAddMemberActionsFunc: func(ctx context.Context, chatRoomAddMemberActionIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeleteChatRoomAddMemberActions method")
//			},
//			PluralDeleteChatRoomAddMemberActionsWithSdFunc: func(ctx context.Context, sd Sd, chatRoomAddMemberActionIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeleteChatRoomAddMemberActionsWithSd method")
//			},
//			PluralDeleteChatRoomCreateActionsFunc: func(ctx context.Context, chatRoomCreateActionIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeleteChatRoomCreateActions method")
//			},
//			PluralDeleteChatRoomCreateActionsWithSdFunc: func(ctx context.Context, sd Sd, chatRoomCreateActionIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeleteChatRoomCreateActionsWithSd method")
//			},
//			PluralDeleteChatRoomDeleteMessageActionsFunc: func(ctx context.Context, chatRoomDeleteMessageActionIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeleteChatRoomDeleteMessageActions method")
//			},
//			PluralDeleteChatRoomDeleteMessageActionsWithSdFunc: func(ctx context.Context, sd Sd, chatRoomDeleteMessageActionIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeleteChatRoomDeleteMessageActionsWithSd method")
//			},
//			PluralDeleteChatRoomRemoveMemberActionsFunc: func(ctx context.Context, chatRoomRemoveMemberActionIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeleteChatRoomRemoveMemberActions method")
//			},
//			PluralDeleteChatRoomRemoveMemberActionsWithSdFunc: func(ctx context.Context, sd Sd, chatRoomRemoveMemberActionIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeleteChatRoomRemoveMemberActionsWithSd method")
//			},
//			PluralDeleteChatRoomUpdateNameActionsFunc: func(ctx context.Context, chatRoomUpdateNameActionIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeleteChatRoomUpdateNameActions method")
//			},
//			PluralDeleteChatRoomUpdateNameActionsWithSdFunc: func(ctx context.Context, sd Sd, chatRoomUpdateNameActionIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeleteChatRoomUpdateNameActionsWithSd method")
//			},
//			PluralDeleteChatRoomWithdrawActionsFunc: func(ctx context.Context, chatRoomWithdrawActionIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeleteChatRoomWithdrawActions method")
//			},
//			PluralDeleteChatRoomWithdrawActionsWithSdFunc: func(ctx context.Context, sd Sd, chatRoomWithdrawActionIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeleteChatRoomWithdrawActionsWithSd method")
//			},
//			PluralDeleteChatRoomsFunc: func(ctx context.Context, chatRoomIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeleteChatRooms method")
//			},
//			PluralDeleteChatRoomsWithSdFunc: func(ctx context.Context, sd Sd, chatRoomIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeleteChatRoomsWithSd method")
//			},
//			PluralDeleteEventTypesFunc: func(ctx context.Context, eventTypeIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeleteEventTypes method")
//			},
//			PluralDeleteEventTypesWithSdFunc: func(ctx context.Context, sd Sd, eventTypeIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeleteEventTypesWithSd method")
//			},
//			PluralDeleteFilesFunc: func(ctx context.Context, fileIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeleteFiles method")
//			},
//			PluralDeleteFilesWithSdFunc: func(ctx context.Context, sd Sd, fileIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeleteFilesWithSd method")
//			},
//			PluralDeleteGradesFunc: func(ctx context.Context, gradeIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeleteGrades method")
//			},
//			PluralDeleteGradesWithSdFunc: func(ctx context.Context, sd Sd, gradeIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeleteGradesWithSd method")
//			},
//			PluralDeleteGroupsFunc: func(ctx context.Context, groupIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeleteGroups method")
//			},
//			PluralDeleteGroupsWithSdFunc: func(ctx context.Context, sd Sd, groupIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeleteGroupsWithSd method")
//			},
//			PluralDeleteImagesFunc: func(ctx context.Context, imageIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeleteImages method")
//			},
//			PluralDeleteImagesWithSdFunc: func(ctx context.Context, sd Sd, imageIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeleteImagesWithSd method")
//			},
//			PluralDeleteMembersFunc: func(ctx context.Context, memberIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeleteMembers method")
//			},
//			PluralDeleteMembersWithSdFunc: func(ctx context.Context, sd Sd, memberIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeleteMembersWithSd method")
//			},
//			PluralDeleteMessagesFunc: func(ctx context.Context, messageIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeleteMessages method")
//			},
//			PluralDeleteMessagesWithSdFunc: func(ctx context.Context, sd Sd, messageIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeleteMessagesWithSd method")
//			},
//			PluralDeleteMimeTypesFunc: func(ctx context.Context, mimeTypeIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeleteMimeTypes method")
//			},
//			PluralDeleteMimeTypesWithSdFunc: func(ctx context.Context, sd Sd, mimeTypeIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeleteMimeTypesWithSd method")
//			},
//			PluralDeleteOrganizationsFunc: func(ctx context.Context, organizationIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeleteOrganizations method")
//			},
//			PluralDeleteOrganizationsWithSdFunc: func(ctx context.Context, sd Sd, organizationIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeleteOrganizationsWithSd method")
//			},
//			PluralDeletePermissionCategoriesFunc: func(ctx context.Context, permissionCategoryIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeletePermissionCategories method")
//			},
//			PluralDeletePermissionCategoriesWithSdFunc: func(ctx context.Context, sd Sd, permissionCategoryIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeletePermissionCategoriesWithSd method")
//			},
//			PluralDeletePermissionsFunc: func(ctx context.Context, permissionIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeletePermissions method")
//			},
//			PluralDeletePermissionsWithSdFunc: func(ctx context.Context, sd Sd, permissionIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeletePermissionsWithSd method")
//			},
//			PluralDeletePoliciesFunc: func(ctx context.Context, policyIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeletePolicies method")
//			},
//			PluralDeletePoliciesWithSdFunc: func(ctx context.Context, sd Sd, policyIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeletePoliciesWithSd method")
//			},
//			PluralDeletePolicyCategoriesFunc: func(ctx context.Context, policyCategoryIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeletePolicyCategories method")
//			},
//			PluralDeletePolicyCategoriesWithSdFunc: func(ctx context.Context, sd Sd, policyCategoryIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeletePolicyCategoriesWithSd method")
//			},
//			PluralDeleteProfessorsFunc: func(ctx context.Context, professorIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeleteProfessors method")
//			},
//			PluralDeleteProfessorsWithSdFunc: func(ctx context.Context, sd Sd, professorIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeleteProfessorsWithSd method")
//			},
//			PluralDeleteRecordTypesFunc: func(ctx context.Context, recordTypeIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeleteRecordTypes method")
//			},
//			PluralDeleteRecordTypesWithSdFunc: func(ctx context.Context, sd Sd, recordTypeIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeleteRecordTypesWithSd method")
//			},
//			PluralDeleteRolesFunc: func(ctx context.Context, roleIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeleteRoles method")
//			},
//			PluralDeleteRolesWithSdFunc: func(ctx context.Context, sd Sd, roleIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeleteRolesWithSd method")
//			},
//			PluralDeleteStudentsFunc: func(ctx context.Context, studentIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeleteStudents method")
//			},
//			PluralDeleteStudentsWithSdFunc: func(ctx context.Context, sd Sd, studentIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeleteStudentsWithSd method")
//			},
//			PluralDetachItemsOnMessageFunc: func(ctx context.Context, messageID uuid.UUID, attachedItemIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDetachItemsOnMessage method")
//			},
//			PluralDetachItemsOnMessageWithSdFunc: func(ctx context.Context, sd Sd, messageID uuid.UUID, attachedItemIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDetachItemsOnMessageWithSd method")
//			},
//			PluralDisassociatePolicyOnRoleFunc: func(ctx context.Context, roleID uuid.UUID, policyIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDisassociatePolicyOnRole method")
//			},
//			PluralDisassociatePolicyOnRoleWithSdFunc: func(ctx context.Context, sd Sd, roleID uuid.UUID, policyIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDisassociatePolicyOnRoleWithSd method")
//			},
//			PluralDisassociateRoleOnPolicyFunc: func(ctx context.Context, policyID uuid.UUID, roleIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDisassociateRoleOnPolicy method")
//			},
//			PluralDisassociateRoleOnPolicyWithSdFunc: func(ctx context.Context, sd Sd, policyID uuid.UUID, roleIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDisassociateRoleOnPolicyWithSd method")
//			},
//			ReadReceiptFunc: func(ctx context.Context, param parameter.ReadReceiptParam) (entity.ReadReceipt, error) {
//				panic("mock out the ReadReceipt method")
//			},
//			ReadReceiptWithSdFunc: func(ctx context.Context, sd Sd, param parameter.ReadReceiptParam) (entity.ReadReceipt, error) {
//				panic("mock out the ReadReceiptWithSd method")
//			},
//			ReadReceiptsFunc: func(ctx context.Context, param parameter.ReadReceiptsParam) (int64, error) {
//				panic("mock out the ReadReceipts method")
//			},
//			ReadReceiptsOnChatRoomAndMemberFunc: func(ctx context.Context, chatRoomID uuid.UUID, memberID uuid.UUID, readAt time.Time) (int64, error) {
//				panic("mock out the ReadReceiptsOnChatRoomAndMember method")
//			},
//			ReadReceiptsOnChatRoomAndMemberWithSdFunc: func(ctx context.Context, sd Sd, chatRoomID uuid.UUID, memberID uuid.UUID, readAt time.Time) (int64, error) {
//				panic("mock out the ReadReceiptsOnChatRoomAndMemberWithSd method")
//			},
//			ReadReceiptsOnMemberFunc: func(ctx context.Context, memberID uuid.UUID, readAt time.Time) (int64, error) {
//				panic("mock out the ReadReceiptsOnMember method")
//			},
//			ReadReceiptsOnMemberWithSdFunc: func(ctx context.Context, sd Sd, memberID uuid.UUID, readAt time.Time) (int64, error) {
//				panic("mock out the ReadReceiptsOnMemberWithSd method")
//			},
//			ReadReceiptsWithSdFunc: func(ctx context.Context, sd Sd, param parameter.ReadReceiptsParam) (int64, error) {
//				panic("mock out the ReadReceiptsWithSd method")
//			},
//			RemoveMemberToChatRoomRemoveMemberActionFunc: func(ctx context.Context, param parameter.CreateChatRoomRemovedMemberParam) (entity.ChatRoomRemovedMember, error) {
//				panic("mock out the RemoveMemberToChatRoomRemoveMemberAction method")
//			},
//			RemoveMemberToChatRoomRemoveMemberActionWithSdFunc: func(ctx context.Context, sd Sd, param parameter.CreateChatRoomRemovedMemberParam) (entity.ChatRoomRemovedMember, error) {
//				panic("mock out the RemoveMemberToChatRoomRemoveMemberActionWithSd method")
//			},
//			RemoveMembersToChatRoomRemoveMemberActionFunc: func(ctx context.Context, params []parameter.CreateChatRoomRemovedMemberParam) (int64, error) {
//				panic("mock out the RemoveMembersToChatRoomRemoveMemberAction method")
//			},
//			RemoveMembersToChatRoomRemoveMemberActionWithSdFunc: func(ctx context.Context, sd Sd, params []parameter.CreateChatRoomRemovedMemberParam) (int64, error) {
//				panic("mock out the RemoveMembersToChatRoomRemoveMemberActionWithSd method")
//			},
//			RollbackFunc: func(contextMoqParam context.Context, sd Sd) error {
//				panic("mock out the Rollback method")
//			},
//			UpdateAttachableItemFunc: func(ctx context.Context, attachableItemID uuid.UUID, param parameter.UpdateAttachableItemParams) (entity.AttachableItem, error) {
//				panic("mock out the UpdateAttachableItem method")
//			},
//			UpdateAttachableItemWithSdFunc: func(ctx context.Context, sd Sd, attachableItemID uuid.UUID, param parameter.UpdateAttachableItemParams) (entity.AttachableItem, error) {
//				panic("mock out the UpdateAttachableItemWithSd method")
//			},
//			UpdateAttendStatusFunc: func(ctx context.Context, attendStatusID uuid.UUID, param parameter.UpdateAttendStatusParams) (entity.AttendStatus, error) {
//				panic("mock out the UpdateAttendStatus method")
//			},
//			UpdateAttendStatusByKeyFunc: func(ctx context.Context, key string, param parameter.UpdateAttendStatusByKeyParams) (entity.AttendStatus, error) {
//				panic("mock out the UpdateAttendStatusByKey method")
//			},
//			UpdateAttendStatusByKeyWithSdFunc: func(ctx context.Context, sd Sd, key string, param parameter.UpdateAttendStatusByKeyParams) (entity.AttendStatus, error) {
//				panic("mock out the UpdateAttendStatusByKeyWithSd method")
//			},
//			UpdateAttendStatusWithSdFunc: func(ctx context.Context, sd Sd, attendStatusID uuid.UUID, param parameter.UpdateAttendStatusParams) (entity.AttendStatus, error) {
//				panic("mock out the UpdateAttendStatusWithSd method")
//			},
//			UpdateAttendanceTypeFunc: func(ctx context.Context, attendanceTypeID uuid.UUID, param parameter.UpdateAttendanceTypeParams) (entity.AttendanceType, error) {
//				panic("mock out the UpdateAttendanceType method")
//			},
//			UpdateAttendanceTypeByKeyFunc: func(ctx context.Context, key string, param parameter.UpdateAttendanceTypeByKeyParams) (entity.AttendanceType, error) {
//				panic("mock out the UpdateAttendanceTypeByKey method")
//			},
//			UpdateAttendanceTypeByKeyWithSdFunc: func(ctx context.Context, sd Sd, key string, param parameter.UpdateAttendanceTypeByKeyParams) (entity.AttendanceType, error) {
//				panic("mock out the UpdateAttendanceTypeByKeyWithSd method")
//			},
//			UpdateAttendanceTypeWithSdFunc: func(ctx context.Context, sd Sd, attendanceTypeID uuid.UUID, param parameter.UpdateAttendanceTypeParams) (entity.AttendanceType, error) {
//				panic("mock out the UpdateAttendanceTypeWithSd method")
//			},
//			UpdateChatRoomFunc: func(ctx context.Context, chatRoomID uuid.UUID, param parameter.UpdateChatRoomParams) (entity.ChatRoom, error) {
//				panic("mock out the UpdateChatRoom method")
//			},
//			UpdateChatRoomActionFunc: func(ctx context.Context, chatRoomActionID uuid.UUID, param parameter.UpdateChatRoomActionParam) (entity.ChatRoomAction, error) {
//				panic("mock out the UpdateChatRoomAction method")
//			},
//			UpdateChatRoomActionTypeFunc: func(ctx context.Context, recordTypeID uuid.UUID, param parameter.UpdateChatRoomActionTypeParams) (entity.ChatRoomActionType, error) {
//				panic("mock out the UpdateChatRoomActionType method")
//			},
//			UpdateChatRoomActionTypeByKeyFunc: func(ctx context.Context, key string, param parameter.UpdateChatRoomActionTypeByKeyParams) (entity.ChatRoomActionType, error) {
//				panic("mock out the UpdateChatRoomActionTypeByKey method")
//			},
//			UpdateChatRoomActionTypeByKeyWithSdFunc: func(ctx context.Context, sd Sd, key string, param parameter.UpdateChatRoomActionTypeByKeyParams) (entity.ChatRoomActionType, error) {
//				panic("mock out the UpdateChatRoomActionTypeByKeyWithSd method")
//			},
//			UpdateChatRoomActionTypeWithSdFunc: func(ctx context.Context, sd Sd, recordTypeID uuid.UUID, param parameter.UpdateChatRoomActionTypeParams) (entity.ChatRoomActionType, error) {
//				panic("mock out the UpdateChatRoomActionTypeWithSd method")
//			},
//			UpdateChatRoomActionWithSdFunc: func(ctx context.Context, sd Sd, chatRoomActionID uuid.UUID, param parameter.UpdateChatRoomActionParam) (entity.ChatRoomAction, error) {
//				panic("mock out the UpdateChatRoomActionWithSd method")
//			},
//			UpdateChatRoomWithSdFunc: func(ctx context.Context, sd Sd, chatRoomID uuid.UUID, param parameter.UpdateChatRoomParams) (entity.ChatRoom, error) {
//				panic("mock out the UpdateChatRoomWithSd method")
//			},
//			UpdateEventTypeFunc: func(ctx context.Context, eventTypeID uuid.UUID, param parameter.UpdateEventTypeParams) (entity.EventType, error) {
//				panic("mock out the UpdateEventType method")
//			},
//			UpdateEventTypeByKeyFunc: func(ctx context.Context, key string, param parameter.UpdateEventTypeByKeyParams) (entity.EventType, error) {
//				panic("mock out the UpdateEventTypeByKey method")
//			},
//			UpdateEventTypeByKeyWithSdFunc: func(ctx context.Context, sd Sd, key string, param parameter.UpdateEventTypeByKeyParams) (entity.EventType, error) {
//				panic("mock out the UpdateEventTypeByKeyWithSd method")
//			},
//			UpdateEventTypeWithSdFunc: func(ctx context.Context, sd Sd, eventTypeID uuid.UUID, param parameter.UpdateEventTypeParams) (entity.EventType, error) {
//				panic("mock out the UpdateEventTypeWithSd method")
//			},
//			UpdateMemberFunc: func(ctx context.Context, memberID uuid.UUID, param parameter.UpdateMemberParams) (entity.Member, error) {
//				panic("mock out the UpdateMember method")
//			},
//			UpdateMemberAttendStatusFunc: func(ctx context.Context, memberID uuid.UUID, attendStatusID uuid.UUID) (entity.Member, error) {
//				panic("mock out the UpdateMemberAttendStatus method")
//			},
//			UpdateMemberAttendStatusWithSdFunc: func(ctx context.Context, sd Sd, memberID uuid.UUID, attendStatusID uuid.UUID) (entity.Member, error) {
//				panic("mock out the UpdateMemberAttendStatusWithSd method")
//			},
//			UpdateMemberGradeFunc: func(ctx context.Context, memberID uuid.UUID, gradeID uuid.UUID) (entity.Member, error) {
//				panic("mock out the UpdateMemberGrade method")
//			},
//			UpdateMemberGradeWithSdFunc: func(ctx context.Context, sd Sd, memberID uuid.UUID, gradeID uuid.UUID) (entity.Member, error) {
//				panic("mock out the UpdateMemberGradeWithSd method")
//			},
//			UpdateMemberGroupFunc: func(ctx context.Context, memberID uuid.UUID, groupID uuid.UUID) (entity.Member, error) {
//				panic("mock out the UpdateMemberGroup method")
//			},
//			UpdateMemberGroupWithSdFunc: func(ctx context.Context, sd Sd, memberID uuid.UUID, groupID uuid.UUID) (entity.Member, error) {
//				panic("mock out the UpdateMemberGroupWithSd method")
//			},
//			UpdateMemberLoginIDFunc: func(ctx context.Context, memberID uuid.UUID, loginID string) (entity.Member, error) {
//				panic("mock out the UpdateMemberLoginID method")
//			},
//			UpdateMemberLoginIDWithSdFunc: func(ctx context.Context, sd Sd, memberID uuid.UUID, loginID string) (entity.Member, error) {
//				panic("mock out the UpdateMemberLoginIDWithSd method")
//			},
//			UpdateMemberPasswordFunc: func(ctx context.Context, memberID uuid.UUID, password string) (entity.Member, error) {
//				panic("mock out the UpdateMemberPassword method")
//			},
//			UpdateMemberPasswordWithSdFunc: func(ctx context.Context, sd Sd, memberID uuid.UUID, password string) (entity.Member, error) {
//				panic("mock out the UpdateMemberPasswordWithSd method")
//			},
//			UpdateMemberRoleFunc: func(ctx context.Context, memberID uuid.UUID, roleID entity.UUID) (entity.Member, error) {
//				panic("mock out the UpdateMemberRole method")
//			},
//			UpdateMemberRoleWithSdFunc: func(ctx context.Context, sd Sd, memberID uuid.UUID, roleID entity.UUID) (entity.Member, error) {
//				panic("mock out the UpdateMemberRoleWithSd method")
//			},
//			UpdateMemberWithSdFunc: func(ctx context.Context, sd Sd, memberID uuid.UUID, param parameter.UpdateMemberParams) (entity.Member, error) {
//				panic("mock out the UpdateMemberWithSd method")
//			},
//			UpdateMessageFunc: func(ctx context.Context, messageID uuid.UUID, param parameter.UpdateMessageParams) (entity.Message, error) {
//				panic("mock out the UpdateMessage method")
//			},
//			UpdateMessageWithSdFunc: func(ctx context.Context, sd Sd, messageID uuid.UUID, param parameter.UpdateMessageParams) (entity.Message, error) {
//				panic("mock out the UpdateMessageWithSd method")
//			},
//			UpdateMimeTypeFunc: func(ctx context.Context, mimeTypeID uuid.UUID, param parameter.UpdateMimeTypeParams) (entity.MimeType, error) {
//				panic("mock out the UpdateMimeType method")
//			},
//			UpdateMimeTypeByKeyFunc: func(ctx context.Context, key string, param parameter.UpdateMimeTypeByKeyParams) (entity.MimeType, error) {
//				panic("mock out the UpdateMimeTypeByKey method")
//			},
//			UpdateMimeTypeByKeyWithSdFunc: func(ctx context.Context, sd Sd, key string, param parameter.UpdateMimeTypeByKeyParams) (entity.MimeType, error) {
//				panic("mock out the UpdateMimeTypeByKeyWithSd method")
//			},
//			UpdateMimeTypeWithSdFunc: func(ctx context.Context, sd Sd, mimeTypeID uuid.UUID, param parameter.UpdateMimeTypeParams) (entity.MimeType, error) {
//				panic("mock out the UpdateMimeTypeWithSd method")
//			},
//			UpdateOrganizationFunc: func(ctx context.Context, organizationID uuid.UUID, param parameter.UpdateOrganizationParams) (entity.Organization, error) {
//				panic("mock out the UpdateOrganization method")
//			},
//			UpdateOrganizationWithSdFunc: func(ctx context.Context, sd Sd, organizationID uuid.UUID, param parameter.UpdateOrganizationParams) (entity.Organization, error) {
//				panic("mock out the UpdateOrganizationWithSd method")
//			},
//			UpdatePermissionFunc: func(ctx context.Context, permissionID uuid.UUID, param parameter.UpdatePermissionParams) (entity.Permission, error) {
//				panic("mock out the UpdatePermission method")
//			},
//			UpdatePermissionByKeyFunc: func(ctx context.Context, key string, param parameter.UpdatePermissionByKeyParams) (entity.Permission, error) {
//				panic("mock out the UpdatePermissionByKey method")
//			},
//			UpdatePermissionByKeyWithSdFunc: func(ctx context.Context, sd Sd, key string, param parameter.UpdatePermissionByKeyParams) (entity.Permission, error) {
//				panic("mock out the UpdatePermissionByKeyWithSd method")
//			},
//			UpdatePermissionCategoryFunc: func(ctx context.Context, permissionCategoryID uuid.UUID, param parameter.UpdatePermissionCategoryParams) (entity.PermissionCategory, error) {
//				panic("mock out the UpdatePermissionCategory method")
//			},
//			UpdatePermissionCategoryByKeyFunc: func(ctx context.Context, key string, param parameter.UpdatePermissionCategoryByKeyParams) (entity.PermissionCategory, error) {
//				panic("mock out the UpdatePermissionCategoryByKey method")
//			},
//			UpdatePermissionCategoryByKeyWithSdFunc: func(ctx context.Context, sd Sd, key string, param parameter.UpdatePermissionCategoryByKeyParams) (entity.PermissionCategory, error) {
//				panic("mock out the UpdatePermissionCategoryByKeyWithSd method")
//			},
//			UpdatePermissionCategoryWithSdFunc: func(ctx context.Context, sd Sd, permissionCategoryID uuid.UUID, param parameter.UpdatePermissionCategoryParams) (entity.PermissionCategory, error) {
//				panic("mock out the UpdatePermissionCategoryWithSd method")
//			},
//			UpdatePermissionWithSdFunc: func(ctx context.Context, sd Sd, permissionID uuid.UUID, param parameter.UpdatePermissionParams) (entity.Permission, error) {
//				panic("mock out the UpdatePermissionWithSd method")
//			},
//			UpdatePolicyFunc: func(ctx context.Context, policyID uuid.UUID, param parameter.UpdatePolicyParams) (entity.Policy, error) {
//				panic("mock out the UpdatePolicy method")
//			},
//			UpdatePolicyByKeyFunc: func(ctx context.Context, key string, param parameter.UpdatePolicyByKeyParams) (entity.Policy, error) {
//				panic("mock out the UpdatePolicyByKey method")
//			},
//			UpdatePolicyByKeyWithSdFunc: func(ctx context.Context, sd Sd, key string, param parameter.UpdatePolicyByKeyParams) (entity.Policy, error) {
//				panic("mock out the UpdatePolicyByKeyWithSd method")
//			},
//			UpdatePolicyCategoryFunc: func(ctx context.Context, policyCategoryID uuid.UUID, param parameter.UpdatePolicyCategoryParams) (entity.PolicyCategory, error) {
//				panic("mock out the UpdatePolicyCategory method")
//			},
//			UpdatePolicyCategoryByKeyFunc: func(ctx context.Context, key string, param parameter.UpdatePolicyCategoryByKeyParams) (entity.PolicyCategory, error) {
//				panic("mock out the UpdatePolicyCategoryByKey method")
//			},
//			UpdatePolicyCategoryByKeyWithSdFunc: func(ctx context.Context, sd Sd, key string, param parameter.UpdatePolicyCategoryByKeyParams) (entity.PolicyCategory, error) {
//				panic("mock out the UpdatePolicyCategoryByKeyWithSd method")
//			},
//			UpdatePolicyCategoryWithSdFunc: func(ctx context.Context, sd Sd, policyCategoryID uuid.UUID, param parameter.UpdatePolicyCategoryParams) (entity.PolicyCategory, error) {
//				panic("mock out the UpdatePolicyCategoryWithSd method")
//			},
//			UpdatePolicyWithSdFunc: func(ctx context.Context, sd Sd, policyID uuid.UUID, param parameter.UpdatePolicyParams) (entity.Policy, error) {
//				panic("mock out the UpdatePolicyWithSd method")
//			},
//			UpdateRecordTypeFunc: func(ctx context.Context, recordTypeID uuid.UUID, param parameter.UpdateRecordTypeParams) (entity.RecordType, error) {
//				panic("mock out the UpdateRecordType method")
//			},
//			UpdateRecordTypeByKeyFunc: func(ctx context.Context, key string, param parameter.UpdateRecordTypeByKeyParams) (entity.RecordType, error) {
//				panic("mock out the UpdateRecordTypeByKey method")
//			},
//			UpdateRecordTypeByKeyWithSdFunc: func(ctx context.Context, sd Sd, key string, param parameter.UpdateRecordTypeByKeyParams) (entity.RecordType, error) {
//				panic("mock out the UpdateRecordTypeByKeyWithSd method")
//			},
//			UpdateRecordTypeWithSdFunc: func(ctx context.Context, sd Sd, recordTypeID uuid.UUID, param parameter.UpdateRecordTypeParams) (entity.RecordType, error) {
//				panic("mock out the UpdateRecordTypeWithSd method")
//			},
//			UpdateRoleFunc: func(ctx context.Context, roleID uuid.UUID, param parameter.UpdateRoleParams) (entity.Role, error) {
//				panic("mock out the UpdateRole method")
//			},
//			UpdateRoleWithSdFunc: func(ctx context.Context, sd Sd, roleID uuid.UUID, param parameter.UpdateRoleParams) (entity.Role, error) {
//				panic("mock out the UpdateRoleWithSd method")
//			},
//		}
//
//		// use mockedStore in code that requires Store
//		// and then make assertions.
//
//	}
type StoreMock struct {
	// AddMemberToChatRoomAddMemberActionFunc mocks the AddMemberToChatRoomAddMemberAction method.
	AddMemberToChatRoomAddMemberActionFunc func(ctx context.Context, param parameter.CreateChatRoomAddedMemberParam) (entity.ChatRoomAddedMember, error)

	// AddMemberToChatRoomAddMemberActionWithSdFunc mocks the AddMemberToChatRoomAddMemberActionWithSd method.
	AddMemberToChatRoomAddMemberActionWithSdFunc func(ctx context.Context, sd Sd, param parameter.CreateChatRoomAddedMemberParam) (entity.ChatRoomAddedMember, error)

	// AddMembersToChatRoomAddMemberActionFunc mocks the AddMembersToChatRoomAddMemberAction method.
	AddMembersToChatRoomAddMemberActionFunc func(ctx context.Context, params []parameter.CreateChatRoomAddedMemberParam) (int64, error)

	// AddMembersToChatRoomAddMemberActionWithSdFunc mocks the AddMembersToChatRoomAddMemberActionWithSd method.
	AddMembersToChatRoomAddMemberActionWithSdFunc func(ctx context.Context, sd Sd, params []parameter.CreateChatRoomAddedMemberParam) (int64, error)

	// AssociateRoleFunc mocks the AssociateRole method.
	AssociateRoleFunc func(ctx context.Context, param parameter.AssociationRoleParam) (entity.RoleAssociation, error)

	// AssociateRoleWithSdFunc mocks the AssociateRoleWithSd method.
	AssociateRoleWithSdFunc func(ctx context.Context, sd Sd, param parameter.AssociationRoleParam) (entity.RoleAssociation, error)

	// AssociateRolesFunc mocks the AssociateRoles method.
	AssociateRolesFunc func(ctx context.Context, params []parameter.AssociationRoleParam) (int64, error)

	// AssociateRolesWithSdFunc mocks the AssociateRolesWithSd method.
	AssociateRolesWithSdFunc func(ctx context.Context, sd Sd, params []parameter.AssociationRoleParam) (int64, error)

	// AttacheItemOnMessageFunc mocks the AttacheItemOnMessage method.
	AttacheItemOnMessageFunc func(ctx context.Context, param parameter.AttachItemMessageParam) (entity.AttachedMessage, error)

	// AttacheItemOnMessageWithSdFunc mocks the AttacheItemOnMessageWithSd method.
	AttacheItemOnMessageWithSdFunc func(ctx context.Context, sd Sd, param parameter.AttachItemMessageParam) (entity.AttachedMessage, error)

	// AttacheItemsOnMessagesFunc mocks the AttacheItemsOnMessages method.
	AttacheItemsOnMessagesFunc func(ctx context.Context, params []parameter.AttachItemMessageParam) (int64, error)

	// AttacheItemsOnMessagesWithSdFunc mocks the AttacheItemsOnMessagesWithSd method.
	AttacheItemsOnMessagesWithSdFunc func(ctx context.Context, sd Sd, params []parameter.AttachItemMessageParam) (int64, error)

	// BeginFunc mocks the Begin method.
	BeginFunc func(contextMoqParam context.Context) (Sd, error)

	// BelongChatRoomFunc mocks the BelongChatRoom method.
	BelongChatRoomFunc func(ctx context.Context, param parameter.BelongChatRoomParam) (entity.ChatRoomBelonging, error)

	// BelongChatRoomWithSdFunc mocks the BelongChatRoomWithSd method.
	BelongChatRoomWithSdFunc func(ctx context.Context, sd Sd, param parameter.BelongChatRoomParam) (entity.ChatRoomBelonging, error)

	// BelongChatRoomsFunc mocks the BelongChatRooms method.
	BelongChatRoomsFunc func(ctx context.Context, params []parameter.BelongChatRoomParam) (int64, error)

	// BelongChatRoomsWithSdFunc mocks the BelongChatRoomsWithSd method.
	BelongChatRoomsWithSdFunc func(ctx context.Context, sd Sd, params []parameter.BelongChatRoomParam) (int64, error)

	// BelongOrganizationFunc mocks the BelongOrganization method.
	BelongOrganizationFunc func(ctx context.Context, param parameter.BelongOrganizationParam) (entity.Membership, error)

	// BelongOrganizationWithSdFunc mocks the BelongOrganizationWithSd method.
	BelongOrganizationWithSdFunc func(ctx context.Context, sd Sd, param parameter.BelongOrganizationParam) (entity.Membership, error)

	// BelongOrganizationsFunc mocks the BelongOrganizations method.
	BelongOrganizationsFunc func(ctx context.Context, params []parameter.BelongOrganizationParam) (int64, error)

	// BelongOrganizationsWithSdFunc mocks the BelongOrganizationsWithSd method.
	BelongOrganizationsWithSdFunc func(ctx context.Context, sd Sd, params []parameter.BelongOrganizationParam) (int64, error)

	// CleanupFunc mocks the Cleanup method.
	CleanupFunc func(contextMoqParam context.Context) error

	// CommitFunc mocks the Commit method.
	CommitFunc func(contextMoqParam context.Context, sd Sd) error

	// CountAbsencesFunc mocks the CountAbsences method.
	CountAbsencesFunc func(ctx context.Context) (int64, error)

	// CountAbsencesWithSdFunc mocks the CountAbsencesWithSd method.
	CountAbsencesWithSdFunc func(ctx context.Context, sd Sd) (int64, error)

	// CountAttachableItemsFunc mocks the CountAttachableItems method.
	CountAttachableItemsFunc func(ctx context.Context, where parameter.WhereAttachableItemParam) (int64, error)

	// CountAttachableItemsWithSdFunc mocks the CountAttachableItemsWithSd method.
	CountAttachableItemsWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereAttachableItemParam) (int64, error)

	// CountAttachedItemsOnChatRoomFunc mocks the CountAttachedItemsOnChatRoom method.
	CountAttachedItemsOnChatRoomFunc func(ctx context.Context, chatRoomID uuid.UUID, where parameter.WhereAttachedItemOnChatRoomParam) (int64, error)

	// CountAttachedItemsOnChatRoomWithSdFunc mocks the CountAttachedItemsOnChatRoomWithSd method.
	CountAttachedItemsOnChatRoomWithSdFunc func(ctx context.Context, sd Sd, chatRoomID uuid.UUID, where parameter.WhereAttachedItemOnChatRoomParam) (int64, error)

	// CountAttachedItemsOnMessageFunc mocks the CountAttachedItemsOnMessage method.
	CountAttachedItemsOnMessageFunc func(ctx context.Context, messageID uuid.UUID, where parameter.WhereAttachedItemOnMessageParam) (int64, error)

	// CountAttachedItemsOnMessageWithSdFunc mocks the CountAttachedItemsOnMessageWithSd method.
	CountAttachedItemsOnMessageWithSdFunc func(ctx context.Context, sd Sd, messageID uuid.UUID, where parameter.WhereAttachedItemOnMessageParam) (int64, error)

	// CountAttendStatusesFunc mocks the CountAttendStatuses method.
	CountAttendStatusesFunc func(ctx context.Context, where parameter.WhereAttendStatusParam) (int64, error)

	// CountAttendStatusesWithSdFunc mocks the CountAttendStatusesWithSd method.
	CountAttendStatusesWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereAttendStatusParam) (int64, error)

	// CountAttendanceTypesFunc mocks the CountAttendanceTypes method.
	CountAttendanceTypesFunc func(ctx context.Context, where parameter.WhereAttendanceTypeParam) (int64, error)

	// CountAttendanceTypesWithSdFunc mocks the CountAttendanceTypesWithSd method.
	CountAttendanceTypesWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereAttendanceTypeParam) (int64, error)

	// CountChatRoomActionTypesFunc mocks the CountChatRoomActionTypes method.
	CountChatRoomActionTypesFunc func(ctx context.Context, where parameter.WhereChatRoomActionTypeParam) (int64, error)

	// CountChatRoomActionTypesWithSdFunc mocks the CountChatRoomActionTypesWithSd method.
	CountChatRoomActionTypesWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereChatRoomActionTypeParam) (int64, error)

	// CountChatRoomActionsFunc mocks the CountChatRoomActions method.
	CountChatRoomActionsFunc func(ctx context.Context, where parameter.WhereChatRoomActionParam) (int64, error)

	// CountChatRoomActionsWithSdFunc mocks the CountChatRoomActionsWithSd method.
	CountChatRoomActionsWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereChatRoomActionParam) (int64, error)

	// CountChatRoomAddMemberActionsFunc mocks the CountChatRoomAddMemberActions method.
	CountChatRoomAddMemberActionsFunc func(ctx context.Context, where parameter.WhereChatRoomAddMemberActionParam) (int64, error)

	// CountChatRoomAddMemberActionsWithSdFunc mocks the CountChatRoomAddMemberActionsWithSd method.
	CountChatRoomAddMemberActionsWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereChatRoomAddMemberActionParam) (int64, error)

	// CountChatRoomCreateActionsFunc mocks the CountChatRoomCreateActions method.
	CountChatRoomCreateActionsFunc func(ctx context.Context, where parameter.WhereChatRoomCreateActionParam) (int64, error)

	// CountChatRoomCreateActionsWithSdFunc mocks the CountChatRoomCreateActionsWithSd method.
	CountChatRoomCreateActionsWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereChatRoomCreateActionParam) (int64, error)

	// CountChatRoomDeleteMessageActionsFunc mocks the CountChatRoomDeleteMessageActions method.
	CountChatRoomDeleteMessageActionsFunc func(ctx context.Context, where parameter.WhereChatRoomDeleteMessageActionParam) (int64, error)

	// CountChatRoomDeleteMessageActionsWithSdFunc mocks the CountChatRoomDeleteMessageActionsWithSd method.
	CountChatRoomDeleteMessageActionsWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereChatRoomDeleteMessageActionParam) (int64, error)

	// CountChatRoomRemoveMemberActionsFunc mocks the CountChatRoomRemoveMemberActions method.
	CountChatRoomRemoveMemberActionsFunc func(ctx context.Context, where parameter.WhereChatRoomRemoveMemberActionParam) (int64, error)

	// CountChatRoomRemoveMemberActionsWithSdFunc mocks the CountChatRoomRemoveMemberActionsWithSd method.
	CountChatRoomRemoveMemberActionsWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereChatRoomRemoveMemberActionParam) (int64, error)

	// CountChatRoomUpdateNameActionsFunc mocks the CountChatRoomUpdateNameActions method.
	CountChatRoomUpdateNameActionsFunc func(ctx context.Context, where parameter.WhereChatRoomUpdateNameActionParam) (int64, error)

	// CountChatRoomUpdateNameActionsWithSdFunc mocks the CountChatRoomUpdateNameActionsWithSd method.
	CountChatRoomUpdateNameActionsWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereChatRoomUpdateNameActionParam) (int64, error)

	// CountChatRoomWithdrawActionsFunc mocks the CountChatRoomWithdrawActions method.
	CountChatRoomWithdrawActionsFunc func(ctx context.Context, where parameter.WhereChatRoomWithdrawActionParam) (int64, error)

	// CountChatRoomWithdrawActionsWithSdFunc mocks the CountChatRoomWithdrawActionsWithSd method.
	CountChatRoomWithdrawActionsWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereChatRoomWithdrawActionParam) (int64, error)

	// CountChatRoomsFunc mocks the CountChatRooms method.
	CountChatRoomsFunc func(ctx context.Context, where parameter.WhereChatRoomParam) (int64, error)

	// CountChatRoomsOnMemberFunc mocks the CountChatRoomsOnMember method.
	CountChatRoomsOnMemberFunc func(ctx context.Context, memberID uuid.UUID, where parameter.WhereChatRoomOnMemberParam) (int64, error)

	// CountChatRoomsOnMemberWithSdFunc mocks the CountChatRoomsOnMemberWithSd method.
	CountChatRoomsOnMemberWithSdFunc func(ctx context.Context, sd Sd, memberID uuid.UUID, where parameter.WhereChatRoomOnMemberParam) (int64, error)

	// CountChatRoomsWithSdFunc mocks the CountChatRoomsWithSd method.
	CountChatRoomsWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereChatRoomParam) (int64, error)

	// CountEventTypesFunc mocks the CountEventTypes method.
	CountEventTypesFunc func(ctx context.Context, where parameter.WhereEventTypeParam) (int64, error)

	// CountEventTypesWithSdFunc mocks the CountEventTypesWithSd method.
	CountEventTypesWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereEventTypeParam) (int64, error)

	// CountFilesFunc mocks the CountFiles method.
	CountFilesFunc func(ctx context.Context, where parameter.WhereFileParam) (int64, error)

	// CountFilesWithSdFunc mocks the CountFilesWithSd method.
	CountFilesWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereFileParam) (int64, error)

	// CountGradesFunc mocks the CountGrades method.
	CountGradesFunc func(ctx context.Context, where parameter.WhereGradeParam) (int64, error)

	// CountGradesWithSdFunc mocks the CountGradesWithSd method.
	CountGradesWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereGradeParam) (int64, error)

	// CountGroupsFunc mocks the CountGroups method.
	CountGroupsFunc func(ctx context.Context, where parameter.WhereGroupParam) (int64, error)

	// CountGroupsWithSdFunc mocks the CountGroupsWithSd method.
	CountGroupsWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereGroupParam) (int64, error)

	// CountImagesFunc mocks the CountImages method.
	CountImagesFunc func(ctx context.Context, where parameter.WhereImageParam) (int64, error)

	// CountImagesWithSdFunc mocks the CountImagesWithSd method.
	CountImagesWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereImageParam) (int64, error)

	// CountMembersFunc mocks the CountMembers method.
	CountMembersFunc func(ctx context.Context, where parameter.WhereMemberParam) (int64, error)

	// CountMembersOnChatRoomFunc mocks the CountMembersOnChatRoom method.
	CountMembersOnChatRoomFunc func(ctx context.Context, chatRoomID uuid.UUID, where parameter.WhereMemberOnChatRoomParam) (int64, error)

	// CountMembersOnChatRoomAddMemberActionFunc mocks the CountMembersOnChatRoomAddMemberAction method.
	CountMembersOnChatRoomAddMemberActionFunc func(ctx context.Context, chatRoomAddMemberActionID uuid.UUID, where parameter.WhereMemberOnChatRoomAddMemberActionParam) (int64, error)

	// CountMembersOnChatRoomAddMemberActionWithSdFunc mocks the CountMembersOnChatRoomAddMemberActionWithSd method.
	CountMembersOnChatRoomAddMemberActionWithSdFunc func(ctx context.Context, sd Sd, chatRoomAddMemberActionID uuid.UUID, where parameter.WhereMemberOnChatRoomAddMemberActionParam) (int64, error)

	// CountMembersOnChatRoomRemoveMemberActionFunc mocks the CountMembersOnChatRoomRemoveMemberAction method.
	CountMembersOnChatRoomRemoveMemberActionFunc func(ctx context.Context, chatRoomRemoveMemberActionID uuid.UUID, where parameter.WhereMemberOnChatRoomRemoveMemberActionParam) (int64, error)

	// CountMembersOnChatRoomRemoveMemberActionWithSdFunc mocks the CountMembersOnChatRoomRemoveMemberActionWithSd method.
	CountMembersOnChatRoomRemoveMemberActionWithSdFunc func(ctx context.Context, sd Sd, chatRoomRemoveMemberActionID uuid.UUID, where parameter.WhereMemberOnChatRoomRemoveMemberActionParam) (int64, error)

	// CountMembersOnChatRoomWithSdFunc mocks the CountMembersOnChatRoomWithSd method.
	CountMembersOnChatRoomWithSdFunc func(ctx context.Context, sd Sd, chatRoomID uuid.UUID, where parameter.WhereMemberOnChatRoomParam) (int64, error)

	// CountMembersOnOrganizationFunc mocks the CountMembersOnOrganization method.
	CountMembersOnOrganizationFunc func(ctx context.Context, organizationID uuid.UUID, where parameter.WhereMemberOnOrganizationParam) (int64, error)

	// CountMembersOnOrganizationWithSdFunc mocks the CountMembersOnOrganizationWithSd method.
	CountMembersOnOrganizationWithSdFunc func(ctx context.Context, sd Sd, organizationID uuid.UUID, where parameter.WhereMemberOnOrganizationParam) (int64, error)

	// CountMembersWithSdFunc mocks the CountMembersWithSd method.
	CountMembersWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereMemberParam) (int64, error)

	// CountMessagesFunc mocks the CountMessages method.
	CountMessagesFunc func(ctx context.Context, where parameter.WhereMessageParam) (int64, error)

	// CountMessagesWithSdFunc mocks the CountMessagesWithSd method.
	CountMessagesWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereMessageParam) (int64, error)

	// CountMimeTypesFunc mocks the CountMimeTypes method.
	CountMimeTypesFunc func(ctx context.Context, where parameter.WhereMimeTypeParam) (int64, error)

	// CountMimeTypesWithSdFunc mocks the CountMimeTypesWithSd method.
	CountMimeTypesWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereMimeTypeParam) (int64, error)

	// CountOrganizationsFunc mocks the CountOrganizations method.
	CountOrganizationsFunc func(ctx context.Context, where parameter.WhereOrganizationParam) (int64, error)

	// CountOrganizationsOnMemberFunc mocks the CountOrganizationsOnMember method.
	CountOrganizationsOnMemberFunc func(ctx context.Context, memberID uuid.UUID, where parameter.WhereOrganizationOnMemberParam) (int64, error)

	// CountOrganizationsOnMemberWithSdFunc mocks the CountOrganizationsOnMemberWithSd method.
	CountOrganizationsOnMemberWithSdFunc func(ctx context.Context, sd Sd, memberID uuid.UUID, where parameter.WhereOrganizationOnMemberParam) (int64, error)

	// CountOrganizationsWithSdFunc mocks the CountOrganizationsWithSd method.
	CountOrganizationsWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereOrganizationParam) (int64, error)

	// CountPermissionCategoriesFunc mocks the CountPermissionCategories method.
	CountPermissionCategoriesFunc func(ctx context.Context, where parameter.WherePermissionCategoryParam) (int64, error)

	// CountPermissionCategoriesWithSdFunc mocks the CountPermissionCategoriesWithSd method.
	CountPermissionCategoriesWithSdFunc func(ctx context.Context, sd Sd, where parameter.WherePermissionCategoryParam) (int64, error)

	// CountPermissionsFunc mocks the CountPermissions method.
	CountPermissionsFunc func(ctx context.Context, where parameter.WherePermissionParam) (int64, error)

	// CountPermissionsWithSdFunc mocks the CountPermissionsWithSd method.
	CountPermissionsWithSdFunc func(ctx context.Context, sd Sd, where parameter.WherePermissionParam) (int64, error)

	// CountPoliciesFunc mocks the CountPolicies method.
	CountPoliciesFunc func(ctx context.Context, where parameter.WherePolicyParam) (int64, error)

	// CountPoliciesOnRoleFunc mocks the CountPoliciesOnRole method.
	CountPoliciesOnRoleFunc func(ctx context.Context, roleID uuid.UUID, where parameter.WherePolicyOnRoleParam) (int64, error)

	// CountPoliciesOnRoleWithSdFunc mocks the CountPoliciesOnRoleWithSd method.
	CountPoliciesOnRoleWithSdFunc func(ctx context.Context, sd Sd, roleID uuid.UUID, where parameter.WherePolicyOnRoleParam) (int64, error)

	// CountPoliciesWithSdFunc mocks the CountPoliciesWithSd method.
	CountPoliciesWithSdFunc func(ctx context.Context, sd Sd, where parameter.WherePolicyParam) (int64, error)

	// CountPolicyCategoriesFunc mocks the CountPolicyCategories method.
	CountPolicyCategoriesFunc func(ctx context.Context, where parameter.WherePolicyCategoryParam) (int64, error)

	// CountPolicyCategoriesWithSdFunc mocks the CountPolicyCategoriesWithSd method.
	CountPolicyCategoriesWithSdFunc func(ctx context.Context, sd Sd, where parameter.WherePolicyCategoryParam) (int64, error)

	// CountProfessorsFunc mocks the CountProfessors method.
	CountProfessorsFunc func(ctx context.Context, where parameter.WhereProfessorParam) (int64, error)

	// CountProfessorsWithSdFunc mocks the CountProfessorsWithSd method.
	CountProfessorsWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereProfessorParam) (int64, error)

	// CountReadableMembersOnMessageFunc mocks the CountReadableMembersOnMessage method.
	CountReadableMembersOnMessageFunc func(ctx context.Context, messageID uuid.UUID, where parameter.WhereReadableMemberOnMessageParam) (int64, error)

	// CountReadableMembersOnMessageWithSdFunc mocks the CountReadableMembersOnMessageWithSd method.
	CountReadableMembersOnMessageWithSdFunc func(ctx context.Context, sd Sd, messageID uuid.UUID, where parameter.WhereReadableMemberOnMessageParam) (int64, error)

	// CountReadableMessagesOnChatRoomAndMemberFunc mocks the CountReadableMessagesOnChatRoomAndMember method.
	CountReadableMessagesOnChatRoomAndMemberFunc func(ctx context.Context, chatRoomID uuid.UUID, memberID uuid.UUID, where parameter.WhereReadableMessageOnChatRoomAndMemberParam) (int64, error)

	// CountReadableMessagesOnChatRoomAndMemberWithSdFunc mocks the CountReadableMessagesOnChatRoomAndMemberWithSd method.
	CountReadableMessagesOnChatRoomAndMemberWithSdFunc func(ctx context.Context, sd Sd, chatRoomID uuid.UUID, memberID uuid.UUID, where parameter.WhereReadableMessageOnChatRoomAndMemberParam) (int64, error)

	// CountReadableMessagesOnChatRoomsFunc mocks the CountReadableMessagesOnChatRooms method.
	CountReadableMessagesOnChatRoomsFunc func(ctx context.Context, chatRoomIDs []uuid.UUID, where parameter.WhereReadableMessageOnChatRoomAndMemberParam) ([]entity.ReadReceiptGroupByChatRoom, error)

	// CountReadableMessagesOnChatRoomsAndMemberFunc mocks the CountReadableMessagesOnChatRoomsAndMember method.
	CountReadableMessagesOnChatRoomsAndMemberFunc func(ctx context.Context, chatRoomIDs []uuid.UUID, memberID uuid.UUID, where parameter.WhereReadableMessageOnChatRoomAndMemberParam) ([]entity.ReadReceiptGroupByChatRoom, error)

	// CountReadableMessagesOnChatRoomsAndMemberWithSdFunc mocks the CountReadableMessagesOnChatRoomsAndMemberWithSd method.
	CountReadableMessagesOnChatRoomsAndMemberWithSdFunc func(ctx context.Context, sd Sd, chatRoomIDs []uuid.UUID, memberID uuid.UUID, where parameter.WhereReadableMessageOnChatRoomAndMemberParam) ([]entity.ReadReceiptGroupByChatRoom, error)

	// CountReadableMessagesOnChatRoomsWithSdFunc mocks the CountReadableMessagesOnChatRoomsWithSd method.
	CountReadableMessagesOnChatRoomsWithSdFunc func(ctx context.Context, sd Sd, chatRoomIDs []uuid.UUID, where parameter.WhereReadableMessageOnChatRoomAndMemberParam) ([]entity.ReadReceiptGroupByChatRoom, error)

	// CountReadableMessagesOnMemberFunc mocks the CountReadableMessagesOnMember method.
	CountReadableMessagesOnMemberFunc func(ctx context.Context, memberID uuid.UUID, where parameter.WhereReadableMessageOnChatRoomAndMemberParam) (int64, error)

	// CountReadableMessagesOnMemberWithSdFunc mocks the CountReadableMessagesOnMemberWithSd method.
	CountReadableMessagesOnMemberWithSdFunc func(ctx context.Context, sd Sd, memberID uuid.UUID, where parameter.WhereReadableMessageOnChatRoomAndMemberParam) (int64, error)

	// CountReadsOnMessagesFunc mocks the CountReadsOnMessages method.
	CountReadsOnMessagesFunc func(ctx context.Context, messageIDs []uuid.UUID, where parameter.WhereReadsOnMessageParam) ([]entity.ReadReceiptGroupByMessage, error)

	// CountReadsOnMessagesWithSdFunc mocks the CountReadsOnMessagesWithSd method.
	CountReadsOnMessagesWithSdFunc func(ctx context.Context, sd Sd, messageIDs []uuid.UUID, where parameter.WhereReadsOnMessageParam) ([]entity.ReadReceiptGroupByMessage, error)

	// CountRecordTypesFunc mocks the CountRecordTypes method.
	CountRecordTypesFunc func(ctx context.Context, where parameter.WhereRecordTypeParam) (int64, error)

	// CountRecordTypesWithSdFunc mocks the CountRecordTypesWithSd method.
	CountRecordTypesWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereRecordTypeParam) (int64, error)

	// CountRolesFunc mocks the CountRoles method.
	CountRolesFunc func(ctx context.Context, where parameter.WhereRoleParam) (int64, error)

	// CountRolesOnPolicyFunc mocks the CountRolesOnPolicy method.
	CountRolesOnPolicyFunc func(ctx context.Context, policyID uuid.UUID, where parameter.WhereRoleOnPolicyParam) (int64, error)

	// CountRolesOnPolicyWithSdFunc mocks the CountRolesOnPolicyWithSd method.
	CountRolesOnPolicyWithSdFunc func(ctx context.Context, sd Sd, policyID uuid.UUID, where parameter.WhereRoleOnPolicyParam) (int64, error)

	// CountRolesWithSdFunc mocks the CountRolesWithSd method.
	CountRolesWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereRoleParam) (int64, error)

	// CountStudentsFunc mocks the CountStudents method.
	CountStudentsFunc func(ctx context.Context, where parameter.WhereStudentParam) (int64, error)

	// CountStudentsWithSdFunc mocks the CountStudentsWithSd method.
	CountStudentsWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereStudentParam) (int64, error)

	// CreateAbsenceFunc mocks the CreateAbsence method.
	CreateAbsenceFunc func(ctx context.Context, param parameter.CreateAbsenceParam) (entity.Absence, error)

	// CreateAbsenceWithSdFunc mocks the CreateAbsenceWithSd method.
	CreateAbsenceWithSdFunc func(ctx context.Context, sd Sd, param parameter.CreateAbsenceParam) (entity.Absence, error)

	// CreateAbsencesFunc mocks the CreateAbsences method.
	CreateAbsencesFunc func(ctx context.Context, params []parameter.CreateAbsenceParam) (int64, error)

	// CreateAbsencesWithSdFunc mocks the CreateAbsencesWithSd method.
	CreateAbsencesWithSdFunc func(ctx context.Context, sd Sd, params []parameter.CreateAbsenceParam) (int64, error)

	// CreateAttachableItemFunc mocks the CreateAttachableItem method.
	CreateAttachableItemFunc func(ctx context.Context, param parameter.CreateAttachableItemParam) (entity.AttachableItem, error)

	// CreateAttachableItemWithSdFunc mocks the CreateAttachableItemWithSd method.
	CreateAttachableItemWithSdFunc func(ctx context.Context, sd Sd, param parameter.CreateAttachableItemParam) (entity.AttachableItem, error)

	// CreateAttachableItemsFunc mocks the CreateAttachableItems method.
	CreateAttachableItemsFunc func(ctx context.Context, params []parameter.CreateAttachableItemParam) (int64, error)

	// CreateAttachableItemsWithSdFunc mocks the CreateAttachableItemsWithSd method.
	CreateAttachableItemsWithSdFunc func(ctx context.Context, sd Sd, params []parameter.CreateAttachableItemParam) (int64, error)

	// CreateAttendStatusFunc mocks the CreateAttendStatus method.
	CreateAttendStatusFunc func(ctx context.Context, param parameter.CreateAttendStatusParam) (entity.AttendStatus, error)

	// CreateAttendStatusWithSdFunc mocks the CreateAttendStatusWithSd method.
	CreateAttendStatusWithSdFunc func(ctx context.Context, sd Sd, param parameter.CreateAttendStatusParam) (entity.AttendStatus, error)

	// CreateAttendStatusesFunc mocks the CreateAttendStatuses method.
	CreateAttendStatusesFunc func(ctx context.Context, params []parameter.CreateAttendStatusParam) (int64, error)

	// CreateAttendStatusesWithSdFunc mocks the CreateAttendStatusesWithSd method.
	CreateAttendStatusesWithSdFunc func(ctx context.Context, sd Sd, params []parameter.CreateAttendStatusParam) (int64, error)

	// CreateAttendanceTypeFunc mocks the CreateAttendanceType method.
	CreateAttendanceTypeFunc func(ctx context.Context, param parameter.CreateAttendanceTypeParam) (entity.AttendanceType, error)

	// CreateAttendanceTypeWithSdFunc mocks the CreateAttendanceTypeWithSd method.
	CreateAttendanceTypeWithSdFunc func(ctx context.Context, sd Sd, param parameter.CreateAttendanceTypeParam) (entity.AttendanceType, error)

	// CreateAttendanceTypesFunc mocks the CreateAttendanceTypes method.
	CreateAttendanceTypesFunc func(ctx context.Context, params []parameter.CreateAttendanceTypeParam) (int64, error)

	// CreateAttendanceTypesWithSdFunc mocks the CreateAttendanceTypesWithSd method.
	CreateAttendanceTypesWithSdFunc func(ctx context.Context, sd Sd, params []parameter.CreateAttendanceTypeParam) (int64, error)

	// CreateChatRoomFunc mocks the CreateChatRoom method.
	CreateChatRoomFunc func(ctx context.Context, param parameter.CreateChatRoomParam) (entity.ChatRoom, error)

	// CreateChatRoomActionFunc mocks the CreateChatRoomAction method.
	CreateChatRoomActionFunc func(ctx context.Context, param parameter.CreateChatRoomActionParam) (entity.ChatRoomAction, error)

	// CreateChatRoomActionTypeFunc mocks the CreateChatRoomActionType method.
	CreateChatRoomActionTypeFunc func(ctx context.Context, param parameter.CreateChatRoomActionTypeParam) (entity.ChatRoomActionType, error)

	// CreateChatRoomActionTypeWithSdFunc mocks the CreateChatRoomActionTypeWithSd method.
	CreateChatRoomActionTypeWithSdFunc func(ctx context.Context, sd Sd, param parameter.CreateChatRoomActionTypeParam) (entity.ChatRoomActionType, error)

	// CreateChatRoomActionTypesFunc mocks the CreateChatRoomActionTypes method.
	CreateChatRoomActionTypesFunc func(ctx context.Context, params []parameter.CreateChatRoomActionTypeParam) (int64, error)

	// CreateChatRoomActionTypesWithSdFunc mocks the CreateChatRoomActionTypesWithSd method.
	CreateChatRoomActionTypesWithSdFunc func(ctx context.Context, sd Sd, params []parameter.CreateChatRoomActionTypeParam) (int64, error)

	// CreateChatRoomActionWithSdFunc mocks the CreateChatRoomActionWithSd method.
	CreateChatRoomActionWithSdFunc func(ctx context.Context, sd Sd, param parameter.CreateChatRoomActionParam) (entity.ChatRoomAction, error)

	// CreateChatRoomActionsFunc mocks the CreateChatRoomActions method.
	CreateChatRoomActionsFunc func(ctx context.Context, params []parameter.CreateChatRoomActionParam) (int64, error)

	// CreateChatRoomActionsWithSdFunc mocks the CreateChatRoomActionsWithSd method.
	CreateChatRoomActionsWithSdFunc func(ctx context.Context, sd Sd, params []parameter.CreateChatRoomActionParam) (int64, error)

	// CreateChatRoomAddMemberActionFunc mocks the CreateChatRoomAddMemberAction method.
	CreateChatRoomAddMemberActionFunc func(ctx context.Context, param parameter.CreateChatRoomAddMemberActionParam) (entity.ChatRoomAddMemberAction, error)

	// CreateChatRoomAddMemberActionWithSdFunc mocks the CreateChatRoomAddMemberActionWithSd method.
	CreateChatRoomAddMemberActionWithSdFunc func(ctx context.Context, sd Sd, param parameter.CreateChatRoomAddMemberActionParam) (entity.ChatRoomAddMemberAction, error)

	// CreateChatRoomAddMemberActionsFunc mocks the CreateChatRoomAddMemberActions method.
	CreateChatRoomAddMemberActionsFunc func(ctx context.Context, params []parameter.CreateChatRoomAddMemberActionParam) (int64, error)

	// CreateChatRoomAddMemberActionsWithSdFunc mocks the CreateChatRoomAddMemberActionsWithSd method.
	CreateChatRoomAddMemberActionsWithSdFunc func(ctx context.Context, sd Sd, params []parameter.CreateChatRoomAddMemberActionParam) (int64, error)

	// CreateChatRoomCreateActionFunc mocks the CreateChatRoomCreateAction method.
	CreateChatRoomCreateActionFunc func(ctx context.Context, param parameter.CreateChatRoomCreateActionParam) (entity.ChatRoomCreateAction, error)

	// CreateChatRoomCreateActionWithSdFunc mocks the CreateChatRoomCreateActionWithSd method.
	CreateChatRoomCreateActionWithSdFunc func(ctx context.Context, sd Sd, param parameter.CreateChatRoomCreateActionParam) (entity.ChatRoomCreateAction, error)

	// CreateChatRoomCreateActionsFunc mocks the CreateChatRoomCreateActions method.
	CreateChatRoomCreateActionsFunc func(ctx context.Context, params []parameter.CreateChatRoomCreateActionParam) (int64, error)

	// CreateChatRoomCreateActionsWithSdFunc mocks the CreateChatRoomCreateActionsWithSd method.
	CreateChatRoomCreateActionsWithSdFunc func(ctx context.Context, sd Sd, params []parameter.CreateChatRoomCreateActionParam) (int64, error)

	// CreateChatRoomDeleteMessageActionFunc mocks the CreateChatRoomDeleteMessageAction method.
	CreateChatRoomDeleteMessageActionFunc func(ctx context.Context, param parameter.CreateChatRoomDeleteMessageActionParam) (entity.ChatRoomDeleteMessageAction, error)

	// CreateChatRoomDeleteMessageActionWithSdFunc mocks the CreateChatRoomDeleteMessageActionWithSd method.
	CreateChatRoomDeleteMessageActionWithSdFunc func(ctx context.Context, sd Sd, param parameter.CreateChatRoomDeleteMessageActionParam) (entity.ChatRoomDeleteMessageAction, error)

	// CreateChatRoomDeleteMessageActionsFunc mocks the CreateChatRoomDeleteMessageActions method.
	CreateChatRoomDeleteMessageActionsFunc func(ctx context.Context, params []parameter.CreateChatRoomDeleteMessageActionParam) (int64, error)

	// CreateChatRoomDeleteMessageActionsWithSdFunc mocks the CreateChatRoomDeleteMessageActionsWithSd method.
	CreateChatRoomDeleteMessageActionsWithSdFunc func(ctx context.Context, sd Sd, params []parameter.CreateChatRoomDeleteMessageActionParam) (int64, error)

	// CreateChatRoomRemoveMemberActionFunc mocks the CreateChatRoomRemoveMemberAction method.
	CreateChatRoomRemoveMemberActionFunc func(ctx context.Context, param parameter.CreateChatRoomRemoveMemberActionParam) (entity.ChatRoomRemoveMemberAction, error)

	// CreateChatRoomRemoveMemberActionWithSdFunc mocks the CreateChatRoomRemoveMemberActionWithSd method.
	CreateChatRoomRemoveMemberActionWithSdFunc func(ctx context.Context, sd Sd, param parameter.CreateChatRoomRemoveMemberActionParam) (entity.ChatRoomRemoveMemberAction, error)

	// CreateChatRoomRemoveMemberActionsFunc mocks the CreateChatRoomRemoveMemberActions method.
	CreateChatRoomRemoveMemberActionsFunc func(ctx context.Context, params []parameter.CreateChatRoomRemoveMemberActionParam) (int64, error)

	// CreateChatRoomRemoveMemberActionsWithSdFunc mocks the CreateChatRoomRemoveMemberActionsWithSd method.
	CreateChatRoomRemoveMemberActionsWithSdFunc func(ctx context.Context, sd Sd, params []parameter.CreateChatRoomRemoveMemberActionParam) (int64, error)

	// CreateChatRoomUpdateNameActionFunc mocks the CreateChatRoomUpdateNameAction method.
	CreateChatRoomUpdateNameActionFunc func(ctx context.Context, param parameter.CreateChatRoomUpdateNameActionParam) (entity.ChatRoomUpdateNameAction, error)

	// CreateChatRoomUpdateNameActionWithSdFunc mocks the CreateChatRoomUpdateNameActionWithSd method.
	CreateChatRoomUpdateNameActionWithSdFunc func(ctx context.Context, sd Sd, param parameter.CreateChatRoomUpdateNameActionParam) (entity.ChatRoomUpdateNameAction, error)

	// CreateChatRoomUpdateNameActionsFunc mocks the CreateChatRoomUpdateNameActions method.
	CreateChatRoomUpdateNameActionsFunc func(ctx context.Context, params []parameter.CreateChatRoomUpdateNameActionParam) (int64, error)

	// CreateChatRoomUpdateNameActionsWithSdFunc mocks the CreateChatRoomUpdateNameActionsWithSd method.
	CreateChatRoomUpdateNameActionsWithSdFunc func(ctx context.Context, sd Sd, params []parameter.CreateChatRoomUpdateNameActionParam) (int64, error)

	// CreateChatRoomWithSdFunc mocks the CreateChatRoomWithSd method.
	CreateChatRoomWithSdFunc func(ctx context.Context, sd Sd, param parameter.CreateChatRoomParam) (entity.ChatRoom, error)

	// CreateChatRoomWithdrawActionFunc mocks the CreateChatRoomWithdrawAction method.
	CreateChatRoomWithdrawActionFunc func(ctx context.Context, param parameter.CreateChatRoomWithdrawActionParam) (entity.ChatRoomWithdrawAction, error)

	// CreateChatRoomWithdrawActionWithSdFunc mocks the CreateChatRoomWithdrawActionWithSd method.
	CreateChatRoomWithdrawActionWithSdFunc func(ctx context.Context, sd Sd, param parameter.CreateChatRoomWithdrawActionParam) (entity.ChatRoomWithdrawAction, error)

	// CreateChatRoomWithdrawActionsFunc mocks the CreateChatRoomWithdrawActions method.
	CreateChatRoomWithdrawActionsFunc func(ctx context.Context, params []parameter.CreateChatRoomWithdrawActionParam) (int64, error)

	// CreateChatRoomWithdrawActionsWithSdFunc mocks the CreateChatRoomWithdrawActionsWithSd method.
	CreateChatRoomWithdrawActionsWithSdFunc func(ctx context.Context, sd Sd, params []parameter.CreateChatRoomWithdrawActionParam) (int64, error)

	// CreateChatRoomsFunc mocks the CreateChatRooms method.
	CreateChatRoomsFunc func(ctx context.Context, params []parameter.CreateChatRoomParam) (int64, error)

	// CreateChatRoomsWithSdFunc mocks the CreateChatRoomsWithSd method.
	CreateChatRoomsWithSdFunc func(ctx context.Context, sd Sd, params []parameter.CreateChatRoomParam) (int64, error)

	// CreateEventTypeFunc mocks the CreateEventType method.
	CreateEventTypeFunc func(ctx context.Context, param parameter.CreateEventTypeParam) (entity.EventType, error)

	// CreateEventTypeWithSdFunc mocks the CreateEventTypeWithSd method.
	CreateEventTypeWithSdFunc func(ctx context.Context, sd Sd, param parameter.CreateEventTypeParam) (entity.EventType, error)

	// CreateEventTypesFunc mocks the CreateEventTypes method.
	CreateEventTypesFunc func(ctx context.Context, params []parameter.CreateEventTypeParam) (int64, error)

	// CreateEventTypesWithSdFunc mocks the CreateEventTypesWithSd method.
	CreateEventTypesWithSdFunc func(ctx context.Context, sd Sd, params []parameter.CreateEventTypeParam) (int64, error)

	// CreateFileFunc mocks the CreateFile method.
	CreateFileFunc func(ctx context.Context, param parameter.CreateFileParam) (entity.File, error)

	// CreateFileWithSdFunc mocks the CreateFileWithSd method.
	CreateFileWithSdFunc func(ctx context.Context, sd Sd, param parameter.CreateFileParam) (entity.File, error)

	// CreateFilesFunc mocks the CreateFiles method.
	CreateFilesFunc func(ctx context.Context, params []parameter.CreateFileParam) (int64, error)

	// CreateFilesWithSdFunc mocks the CreateFilesWithSd method.
	CreateFilesWithSdFunc func(ctx context.Context, sd Sd, params []parameter.CreateFileParam) (int64, error)

	// CreateGradeFunc mocks the CreateGrade method.
	CreateGradeFunc func(ctx context.Context, param parameter.CreateGradeParam) (entity.Grade, error)

	// CreateGradeWithSdFunc mocks the CreateGradeWithSd method.
	CreateGradeWithSdFunc func(ctx context.Context, sd Sd, param parameter.CreateGradeParam) (entity.Grade, error)

	// CreateGradesFunc mocks the CreateGrades method.
	CreateGradesFunc func(ctx context.Context, params []parameter.CreateGradeParam) (int64, error)

	// CreateGradesWithSdFunc mocks the CreateGradesWithSd method.
	CreateGradesWithSdFunc func(ctx context.Context, sd Sd, params []parameter.CreateGradeParam) (int64, error)

	// CreateGroupFunc mocks the CreateGroup method.
	CreateGroupFunc func(ctx context.Context, param parameter.CreateGroupParam) (entity.Group, error)

	// CreateGroupWithSdFunc mocks the CreateGroupWithSd method.
	CreateGroupWithSdFunc func(ctx context.Context, sd Sd, param parameter.CreateGroupParam) (entity.Group, error)

	// CreateGroupsFunc mocks the CreateGroups method.
	CreateGroupsFunc func(ctx context.Context, params []parameter.CreateGroupParam) (int64, error)

	// CreateGroupsWithSdFunc mocks the CreateGroupsWithSd method.
	CreateGroupsWithSdFunc func(ctx context.Context, sd Sd, params []parameter.CreateGroupParam) (int64, error)

	// CreateImageFunc mocks the CreateImage method.
	CreateImageFunc func(ctx context.Context, param parameter.CreateImageParam) (entity.Image, error)

	// CreateImageWithSdFunc mocks the CreateImageWithSd method.
	CreateImageWithSdFunc func(ctx context.Context, sd Sd, param parameter.CreateImageParam) (entity.Image, error)

	// CreateImagesFunc mocks the CreateImages method.
	CreateImagesFunc func(ctx context.Context, params []parameter.CreateImageParam) (int64, error)

	// CreateImagesWithSdFunc mocks the CreateImagesWithSd method.
	CreateImagesWithSdFunc func(ctx context.Context, sd Sd, params []parameter.CreateImageParam) (int64, error)

	// CreateMemberFunc mocks the CreateMember method.
	CreateMemberFunc func(ctx context.Context, param parameter.CreateMemberParam) (entity.Member, error)

	// CreateMemberWithSdFunc mocks the CreateMemberWithSd method.
	CreateMemberWithSdFunc func(ctx context.Context, sd Sd, param parameter.CreateMemberParam) (entity.Member, error)

	// CreateMembersFunc mocks the CreateMembers method.
	CreateMembersFunc func(ctx context.Context, params []parameter.CreateMemberParam) (int64, error)

	// CreateMembersWithSdFunc mocks the CreateMembersWithSd method.
	CreateMembersWithSdFunc func(ctx context.Context, sd Sd, params []parameter.CreateMemberParam) (int64, error)

	// CreateMessageFunc mocks the CreateMessage method.
	CreateMessageFunc func(ctx context.Context, param parameter.CreateMessageParam) (entity.Message, error)

	// CreateMessageWithSdFunc mocks the CreateMessageWithSd method.
	CreateMessageWithSdFunc func(ctx context.Context, sd Sd, param parameter.CreateMessageParam) (entity.Message, error)

	// CreateMessagesFunc mocks the CreateMessages method.
	CreateMessagesFunc func(ctx context.Context, params []parameter.CreateMessageParam) (int64, error)

	// CreateMessagesWithSdFunc mocks the CreateMessagesWithSd method.
	CreateMessagesWithSdFunc func(ctx context.Context, sd Sd, params []parameter.CreateMessageParam) (int64, error)

	// CreateMimeTypeFunc mocks the CreateMimeType method.
	CreateMimeTypeFunc func(ctx context.Context, param parameter.CreateMimeTypeParam) (entity.MimeType, error)

	// CreateMimeTypeWithSdFunc mocks the CreateMimeTypeWithSd method.
	CreateMimeTypeWithSdFunc func(ctx context.Context, sd Sd, param parameter.CreateMimeTypeParam) (entity.MimeType, error)

	// CreateMimeTypesFunc mocks the CreateMimeTypes method.
	CreateMimeTypesFunc func(ctx context.Context, params []parameter.CreateMimeTypeParam) (int64, error)

	// CreateMimeTypesWithSdFunc mocks the CreateMimeTypesWithSd method.
	CreateMimeTypesWithSdFunc func(ctx context.Context, sd Sd, params []parameter.CreateMimeTypeParam) (int64, error)

	// CreateOrganizationFunc mocks the CreateOrganization method.
	CreateOrganizationFunc func(ctx context.Context, param parameter.CreateOrganizationParam) (entity.Organization, error)

	// CreateOrganizationWithSdFunc mocks the CreateOrganizationWithSd method.
	CreateOrganizationWithSdFunc func(ctx context.Context, sd Sd, param parameter.CreateOrganizationParam) (entity.Organization, error)

	// CreateOrganizationsFunc mocks the CreateOrganizations method.
	CreateOrganizationsFunc func(ctx context.Context, params []parameter.CreateOrganizationParam) (int64, error)

	// CreateOrganizationsWithSdFunc mocks the CreateOrganizationsWithSd method.
	CreateOrganizationsWithSdFunc func(ctx context.Context, sd Sd, params []parameter.CreateOrganizationParam) (int64, error)

	// CreatePermissionFunc mocks the CreatePermission method.
	CreatePermissionFunc func(ctx context.Context, param parameter.CreatePermissionParam) (entity.Permission, error)

	// CreatePermissionCategoriesFunc mocks the CreatePermissionCategories method.
	CreatePermissionCategoriesFunc func(ctx context.Context, params []parameter.CreatePermissionCategoryParam) (int64, error)

	// CreatePermissionCategoriesWithSdFunc mocks the CreatePermissionCategoriesWithSd method.
	CreatePermissionCategoriesWithSdFunc func(ctx context.Context, sd Sd, params []parameter.CreatePermissionCategoryParam) (int64, error)

	// CreatePermissionCategoryFunc mocks the CreatePermissionCategory method.
	CreatePermissionCategoryFunc func(ctx context.Context, param parameter.CreatePermissionCategoryParam) (entity.PermissionCategory, error)

	// CreatePermissionCategoryWithSdFunc mocks the CreatePermissionCategoryWithSd method.
	CreatePermissionCategoryWithSdFunc func(ctx context.Context, sd Sd, param parameter.CreatePermissionCategoryParam) (entity.PermissionCategory, error)

	// CreatePermissionWithSdFunc mocks the CreatePermissionWithSd method.
	CreatePermissionWithSdFunc func(ctx context.Context, sd Sd, param parameter.CreatePermissionParam) (entity.Permission, error)

	// CreatePermissionsFunc mocks the CreatePermissions method.
	CreatePermissionsFunc func(ctx context.Context, params []parameter.CreatePermissionParam) (int64, error)

	// CreatePermissionsWithSdFunc mocks the CreatePermissionsWithSd method.
	CreatePermissionsWithSdFunc func(ctx context.Context, sd Sd, params []parameter.CreatePermissionParam) (int64, error)

	// CreatePoliciesFunc mocks the CreatePolicies method.
	CreatePoliciesFunc func(ctx context.Context, params []parameter.CreatePolicyParam) (int64, error)

	// CreatePoliciesWithSdFunc mocks the CreatePoliciesWithSd method.
	CreatePoliciesWithSdFunc func(ctx context.Context, sd Sd, params []parameter.CreatePolicyParam) (int64, error)

	// CreatePolicyFunc mocks the CreatePolicy method.
	CreatePolicyFunc func(ctx context.Context, param parameter.CreatePolicyParam) (entity.Policy, error)

	// CreatePolicyCategoriesFunc mocks the CreatePolicyCategories method.
	CreatePolicyCategoriesFunc func(ctx context.Context, params []parameter.CreatePolicyCategoryParam) (int64, error)

	// CreatePolicyCategoriesWithSdFunc mocks the CreatePolicyCategoriesWithSd method.
	CreatePolicyCategoriesWithSdFunc func(ctx context.Context, sd Sd, params []parameter.CreatePolicyCategoryParam) (int64, error)

	// CreatePolicyCategoryFunc mocks the CreatePolicyCategory method.
	CreatePolicyCategoryFunc func(ctx context.Context, param parameter.CreatePolicyCategoryParam) (entity.PolicyCategory, error)

	// CreatePolicyCategoryWithSdFunc mocks the CreatePolicyCategoryWithSd method.
	CreatePolicyCategoryWithSdFunc func(ctx context.Context, sd Sd, param parameter.CreatePolicyCategoryParam) (entity.PolicyCategory, error)

	// CreatePolicyWithSdFunc mocks the CreatePolicyWithSd method.
	CreatePolicyWithSdFunc func(ctx context.Context, sd Sd, param parameter.CreatePolicyParam) (entity.Policy, error)

	// CreateProfessorFunc mocks the CreateProfessor method.
	CreateProfessorFunc func(ctx context.Context, param parameter.CreateProfessorParam) (entity.Professor, error)

	// CreateProfessorWithSdFunc mocks the CreateProfessorWithSd method.
	CreateProfessorWithSdFunc func(ctx context.Context, sd Sd, param parameter.CreateProfessorParam) (entity.Professor, error)

	// CreateProfessorsFunc mocks the CreateProfessors method.
	CreateProfessorsFunc func(ctx context.Context, params []parameter.CreateProfessorParam) (int64, error)

	// CreateProfessorsWithSdFunc mocks the CreateProfessorsWithSd method.
	CreateProfessorsWithSdFunc func(ctx context.Context, sd Sd, params []parameter.CreateProfessorParam) (int64, error)

	// CreateReadReceiptFunc mocks the CreateReadReceipt method.
	CreateReadReceiptFunc func(ctx context.Context, param parameter.CreateReadReceiptParam) (entity.ReadReceipt, error)

	// CreateReadReceiptWithSdFunc mocks the CreateReadReceiptWithSd method.
	CreateReadReceiptWithSdFunc func(ctx context.Context, sd Sd, param parameter.CreateReadReceiptParam) (entity.ReadReceipt, error)

	// CreateReadReceiptsFunc mocks the CreateReadReceipts method.
	CreateReadReceiptsFunc func(ctx context.Context, params []parameter.CreateReadReceiptParam) (int64, error)

	// CreateReadReceiptsWithSdFunc mocks the CreateReadReceiptsWithSd method.
	CreateReadReceiptsWithSdFunc func(ctx context.Context, sd Sd, params []parameter.CreateReadReceiptParam) (int64, error)

	// CreateRecordTypeFunc mocks the CreateRecordType method.
	CreateRecordTypeFunc func(ctx context.Context, param parameter.CreateRecordTypeParam) (entity.RecordType, error)

	// CreateRecordTypeWithSdFunc mocks the CreateRecordTypeWithSd method.
	CreateRecordTypeWithSdFunc func(ctx context.Context, sd Sd, param parameter.CreateRecordTypeParam) (entity.RecordType, error)

	// CreateRecordTypesFunc mocks the CreateRecordTypes method.
	CreateRecordTypesFunc func(ctx context.Context, params []parameter.CreateRecordTypeParam) (int64, error)

	// CreateRecordTypesWithSdFunc mocks the CreateRecordTypesWithSd method.
	CreateRecordTypesWithSdFunc func(ctx context.Context, sd Sd, params []parameter.CreateRecordTypeParam) (int64, error)

	// CreateRoleFunc mocks the CreateRole method.
	CreateRoleFunc func(ctx context.Context, param parameter.CreateRoleParam) (entity.Role, error)

	// CreateRoleWithSdFunc mocks the CreateRoleWithSd method.
	CreateRoleWithSdFunc func(ctx context.Context, sd Sd, param parameter.CreateRoleParam) (entity.Role, error)

	// CreateRolesFunc mocks the CreateRoles method.
	CreateRolesFunc func(ctx context.Context, params []parameter.CreateRoleParam) (int64, error)

	// CreateRolesWithSdFunc mocks the CreateRolesWithSd method.
	CreateRolesWithSdFunc func(ctx context.Context, sd Sd, params []parameter.CreateRoleParam) (int64, error)

	// CreateStudentFunc mocks the CreateStudent method.
	CreateStudentFunc func(ctx context.Context, param parameter.CreateStudentParam) (entity.Student, error)

	// CreateStudentWithSdFunc mocks the CreateStudentWithSd method.
	CreateStudentWithSdFunc func(ctx context.Context, sd Sd, param parameter.CreateStudentParam) (entity.Student, error)

	// CreateStudentsFunc mocks the CreateStudents method.
	CreateStudentsFunc func(ctx context.Context, params []parameter.CreateStudentParam) (int64, error)

	// CreateStudentsWithSdFunc mocks the CreateStudentsWithSd method.
	CreateStudentsWithSdFunc func(ctx context.Context, sd Sd, params []parameter.CreateStudentParam) (int64, error)

	// DeleteAbsenceFunc mocks the DeleteAbsence method.
	DeleteAbsenceFunc func(ctx context.Context, absenceID uuid.UUID) (int64, error)

	// DeleteAbsenceWithSdFunc mocks the DeleteAbsenceWithSd method.
	DeleteAbsenceWithSdFunc func(ctx context.Context, sd Sd, absenceID uuid.UUID) (int64, error)

	// DeleteAttachableItemFunc mocks the DeleteAttachableItem method.
	DeleteAttachableItemFunc func(ctx context.Context, attachableItemID uuid.UUID) (int64, error)

	// DeleteAttachableItemWithSdFunc mocks the DeleteAttachableItemWithSd method.
	DeleteAttachableItemWithSdFunc func(ctx context.Context, sd Sd, attachableItemID uuid.UUID) (int64, error)

	// DeleteAttendStatusFunc mocks the DeleteAttendStatus method.
	DeleteAttendStatusFunc func(ctx context.Context, attendStatusID uuid.UUID) (int64, error)

	// DeleteAttendStatusByKeyFunc mocks the DeleteAttendStatusByKey method.
	DeleteAttendStatusByKeyFunc func(ctx context.Context, key string) (int64, error)

	// DeleteAttendStatusByKeyWithSdFunc mocks the DeleteAttendStatusByKeyWithSd method.
	DeleteAttendStatusByKeyWithSdFunc func(ctx context.Context, sd Sd, key string) (int64, error)

	// DeleteAttendStatusWithSdFunc mocks the DeleteAttendStatusWithSd method.
	DeleteAttendStatusWithSdFunc func(ctx context.Context, sd Sd, attendStatusID uuid.UUID) (int64, error)

	// DeleteAttendanceTypeFunc mocks the DeleteAttendanceType method.
	DeleteAttendanceTypeFunc func(ctx context.Context, attendanceTypeID uuid.UUID) (int64, error)

	// DeleteAttendanceTypeByKeyFunc mocks the DeleteAttendanceTypeByKey method.
	DeleteAttendanceTypeByKeyFunc func(ctx context.Context, key string) (int64, error)

	// DeleteAttendanceTypeByKeyWithSdFunc mocks the DeleteAttendanceTypeByKeyWithSd method.
	DeleteAttendanceTypeByKeyWithSdFunc func(ctx context.Context, sd Sd, key string) (int64, error)

	// DeleteAttendanceTypeWithSdFunc mocks the DeleteAttendanceTypeWithSd method.
	DeleteAttendanceTypeWithSdFunc func(ctx context.Context, sd Sd, attendanceTypeID uuid.UUID) (int64, error)

	// DeleteChatRoomFunc mocks the DeleteChatRoom method.
	DeleteChatRoomFunc func(ctx context.Context, chatRoomID uuid.UUID) (int64, error)

	// DeleteChatRoomActionFunc mocks the DeleteChatRoomAction method.
	DeleteChatRoomActionFunc func(ctx context.Context, chatRoomActionID uuid.UUID) (int64, error)

	// DeleteChatRoomActionTypeFunc mocks the DeleteChatRoomActionType method.
	DeleteChatRoomActionTypeFunc func(ctx context.Context, recordTypeID uuid.UUID) (int64, error)

	// DeleteChatRoomActionTypeByKeyFunc mocks the DeleteChatRoomActionTypeByKey method.
	DeleteChatRoomActionTypeByKeyFunc func(ctx context.Context, key string) (int64, error)

	// DeleteChatRoomActionTypeByKeyWithSdFunc mocks the DeleteChatRoomActionTypeByKeyWithSd method.
	DeleteChatRoomActionTypeByKeyWithSdFunc func(ctx context.Context, sd Sd, key string) (int64, error)

	// DeleteChatRoomActionTypeWithSdFunc mocks the DeleteChatRoomActionTypeWithSd method.
	DeleteChatRoomActionTypeWithSdFunc func(ctx context.Context, sd Sd, recordTypeID uuid.UUID) (int64, error)

	// DeleteChatRoomActionWithSdFunc mocks the DeleteChatRoomActionWithSd method.
	DeleteChatRoomActionWithSdFunc func(ctx context.Context, sd Sd, chatRoomActionID uuid.UUID) (int64, error)

	// DeleteChatRoomAddMemberActionFunc mocks the DeleteChatRoomAddMemberAction method.
	DeleteChatRoomAddMemberActionFunc func(ctx context.Context, chatRoomAddMemberActionID uuid.UUID) (int64, error)

	// DeleteChatRoomAddMemberActionWithSdFunc mocks the DeleteChatRoomAddMemberActionWithSd method.
	DeleteChatRoomAddMemberActionWithSdFunc func(ctx context.Context, sd Sd, chatRoomAddMemberActionID uuid.UUID) (int64, error)

	// DeleteChatRoomAddedMemberFunc mocks the DeleteChatRoomAddedMember method.
	DeleteChatRoomAddedMemberFunc func(ctx context.Context, chatRoomAddMemberActionID uuid.UUID, memberID uuid.UUID) (int64, error)

	// DeleteChatRoomAddedMemberOnChatRoomAddMemberActionWithSdFunc mocks the DeleteChatRoomAddedMemberOnChatRoomAddMemberActionWithSd method.
	DeleteChatRoomAddedMemberOnChatRoomAddMemberActionWithSdFunc func(ctx context.Context, sd Sd, chatRoomAddMemberActionID uuid.UUID) (int64, error)

	// DeleteChatRoomAddedMemberWithSdFunc mocks the DeleteChatRoomAddedMemberWithSd method.
	DeleteChatRoomAddedMemberWithSdFunc func(ctx context.Context, sd Sd, chatRoomAddMemberActionID uuid.UUID, memberID uuid.UUID) (int64, error)

	// DeleteChatRoomAddedMembersOnChatRoomAddMemberActionFunc mocks the DeleteChatRoomAddedMembersOnChatRoomAddMemberAction method.
	DeleteChatRoomAddedMembersOnChatRoomAddMemberActionFunc func(ctx context.Context, chatRoomAddMemberActionID uuid.UUID) (int64, error)

	// DeleteChatRoomAddedMembersOnChatRoomAddMemberActionsFunc mocks the DeleteChatRoomAddedMembersOnChatRoomAddMemberActions method.
	DeleteChatRoomAddedMembersOnChatRoomAddMemberActionsFunc func(ctx context.Context, chatRoomAddMemberActionIDs []uuid.UUID) (int64, error)

	// DeleteChatRoomAddedMembersOnChatRoomAddMemberActionsWithSdFunc mocks the DeleteChatRoomAddedMembersOnChatRoomAddMemberActionsWithSd method.
	DeleteChatRoomAddedMembersOnChatRoomAddMemberActionsWithSdFunc func(ctx context.Context, sd Sd, chatRoomAddMemberActionIDs []uuid.UUID) (int64, error)

	// DeleteChatRoomAddedMembersOnMemberFunc mocks the DeleteChatRoomAddedMembersOnMember method.
	DeleteChatRoomAddedMembersOnMemberFunc func(ctx context.Context, memberID uuid.UUID) (int64, error)

	// DeleteChatRoomAddedMembersOnMemberWithSdFunc mocks the DeleteChatRoomAddedMembersOnMemberWithSd method.
	DeleteChatRoomAddedMembersOnMemberWithSdFunc func(ctx context.Context, sd Sd, memberID uuid.UUID) (int64, error)

	// DeleteChatRoomAddedMembersOnMembersFunc mocks the DeleteChatRoomAddedMembersOnMembers method.
	DeleteChatRoomAddedMembersOnMembersFunc func(ctx context.Context, memberIDs []uuid.UUID) (int64, error)

	// DeleteChatRoomAddedMembersOnMembersWithSdFunc mocks the DeleteChatRoomAddedMembersOnMembersWithSd method.
	DeleteChatRoomAddedMembersOnMembersWithSdFunc func(ctx context.Context, sd Sd, memberIDs []uuid.UUID) (int64, error)

	// DeleteChatRoomCreateActionFunc mocks the DeleteChatRoomCreateAction method.
	DeleteChatRoomCreateActionFunc func(ctx context.Context, chatRoomCreateActionID uuid.UUID) (int64, error)

	// DeleteChatRoomCreateActionWithSdFunc mocks the DeleteChatRoomCreateActionWithSd method.
	DeleteChatRoomCreateActionWithSdFunc func(ctx context.Context, sd Sd, chatRoomCreateActionID uuid.UUID) (int64, error)

	// DeleteChatRoomDeleteMessageActionFunc mocks the DeleteChatRoomDeleteMessageAction method.
	DeleteChatRoomDeleteMessageActionFunc func(ctx context.Context, chatRoomDeleteMessageActionID uuid.UUID) (int64, error)

	// DeleteChatRoomDeleteMessageActionWithSdFunc mocks the DeleteChatRoomDeleteMessageActionWithSd method.
	DeleteChatRoomDeleteMessageActionWithSdFunc func(ctx context.Context, sd Sd, chatRoomDeleteMessageActionID uuid.UUID) (int64, error)

	// DeleteChatRoomRemoveMemberActionFunc mocks the DeleteChatRoomRemoveMemberAction method.
	DeleteChatRoomRemoveMemberActionFunc func(ctx context.Context, chatRoomRemoveMemberActionID uuid.UUID) (int64, error)

	// DeleteChatRoomRemoveMemberActionWithSdFunc mocks the DeleteChatRoomRemoveMemberActionWithSd method.
	DeleteChatRoomRemoveMemberActionWithSdFunc func(ctx context.Context, sd Sd, chatRoomRemoveMemberActionID uuid.UUID) (int64, error)

	// DeleteChatRoomRemovedMemberFunc mocks the DeleteChatRoomRemovedMember method.
	DeleteChatRoomRemovedMemberFunc func(ctx context.Context, chatRoomRemoveMemberActionID uuid.UUID, memberID uuid.UUID) (int64, error)

	// DeleteChatRoomRemovedMemberOnChatRoomRemoveMemberActionWithSdFunc mocks the DeleteChatRoomRemovedMemberOnChatRoomRemoveMemberActionWithSd method.
	DeleteChatRoomRemovedMemberOnChatRoomRemoveMemberActionWithSdFunc func(ctx context.Context, sd Sd, chatRoomRemoveMemberActionID uuid.UUID) (int64, error)

	// DeleteChatRoomRemovedMemberWithSdFunc mocks the DeleteChatRoomRemovedMemberWithSd method.
	DeleteChatRoomRemovedMemberWithSdFunc func(ctx context.Context, sd Sd, chatRoomRemoveMemberActionID uuid.UUID, memberID uuid.UUID) (int64, error)

	// DeleteChatRoomRemovedMembersOnChatRoomRemoveMemberActionFunc mocks the DeleteChatRoomRemovedMembersOnChatRoomRemoveMemberAction method.
	DeleteChatRoomRemovedMembersOnChatRoomRemoveMemberActionFunc func(ctx context.Context, chatRoomRemoveMemberActionID uuid.UUID) (int64, error)

	// DeleteChatRoomRemovedMembersOnChatRoomRemoveMemberActionsFunc mocks the DeleteChatRoomRemovedMembersOnChatRoomRemoveMemberActions method.
	DeleteChatRoomRemovedMembersOnChatRoomRemoveMemberActionsFunc func(ctx context.Context, chatRoomRemoveMemberActionIDs []uuid.UUID) (int64, error)

	// DeleteChatRoomRemovedMembersOnChatRoomRemoveMemberActionsWithSdFunc mocks the DeleteChatRoomRemovedMembersOnChatRoomRemoveMemberActionsWithSd method.
	DeleteChatRoomRemovedMembersOnChatRoomRemoveMemberActionsWithSdFunc func(ctx context.Context, sd Sd, chatRoomRemoveMemberActionIDs []uuid.UUID) (int64, error)

	// DeleteChatRoomRemovedMembersOnMemberFunc mocks the DeleteChatRoomRemovedMembersOnMember method.
	DeleteChatRoomRemovedMembersOnMemberFunc func(ctx context.Context, memberID uuid.UUID) (int64, error)

	// DeleteChatRoomRemovedMembersOnMemberWithSdFunc mocks the DeleteChatRoomRemovedMembersOnMemberWithSd method.
	DeleteChatRoomRemovedMembersOnMemberWithSdFunc func(ctx context.Context, sd Sd, memberID uuid.UUID) (int64, error)

	// DeleteChatRoomRemovedMembersOnMembersFunc mocks the DeleteChatRoomRemovedMembersOnMembers method.
	DeleteChatRoomRemovedMembersOnMembersFunc func(ctx context.Context, memberIDs []uuid.UUID) (int64, error)

	// DeleteChatRoomRemovedMembersOnMembersWithSdFunc mocks the DeleteChatRoomRemovedMembersOnMembersWithSd method.
	DeleteChatRoomRemovedMembersOnMembersWithSdFunc func(ctx context.Context, sd Sd, memberIDs []uuid.UUID) (int64, error)

	// DeleteChatRoomUpdateNameActionFunc mocks the DeleteChatRoomUpdateNameAction method.
	DeleteChatRoomUpdateNameActionFunc func(ctx context.Context, chatRoomUpdateNameActionID uuid.UUID) (int64, error)

	// DeleteChatRoomUpdateNameActionWithSdFunc mocks the DeleteChatRoomUpdateNameActionWithSd method.
	DeleteChatRoomUpdateNameActionWithSdFunc func(ctx context.Context, sd Sd, chatRoomUpdateNameActionID uuid.UUID) (int64, error)

	// DeleteChatRoomWithSdFunc mocks the DeleteChatRoomWithSd method.
	DeleteChatRoomWithSdFunc func(ctx context.Context, sd Sd, chatRoomID uuid.UUID) (int64, error)

	// DeleteChatRoomWithdrawActionFunc mocks the DeleteChatRoomWithdrawAction method.
	DeleteChatRoomWithdrawActionFunc func(ctx context.Context, chatRoomWithdrawActionID uuid.UUID) (int64, error)

	// DeleteChatRoomWithdrawActionWithSdFunc mocks the DeleteChatRoomWithdrawActionWithSd method.
	DeleteChatRoomWithdrawActionWithSdFunc func(ctx context.Context, sd Sd, chatRoomWithdrawActionID uuid.UUID) (int64, error)

	// DeleteEventTypeFunc mocks the DeleteEventType method.
	DeleteEventTypeFunc func(ctx context.Context, eventTypeID uuid.UUID) (int64, error)

	// DeleteEventTypeByKeyFunc mocks the DeleteEventTypeByKey method.
	DeleteEventTypeByKeyFunc func(ctx context.Context, key string) (int64, error)

	// DeleteEventTypeByKeyWithSdFunc mocks the DeleteEventTypeByKeyWithSd method.
	DeleteEventTypeByKeyWithSdFunc func(ctx context.Context, sd Sd, key string) (int64, error)

	// DeleteEventTypeWithSdFunc mocks the DeleteEventTypeWithSd method.
	DeleteEventTypeWithSdFunc func(ctx context.Context, sd Sd, eventTypeID uuid.UUID) (int64, error)

	// DeleteFileFunc mocks the DeleteFile method.
	DeleteFileFunc func(ctx context.Context, fileID uuid.UUID) (int64, error)

	// DeleteFileWithSdFunc mocks the DeleteFileWithSd method.
	DeleteFileWithSdFunc func(ctx context.Context, sd Sd, fileID uuid.UUID) (int64, error)

	// DeleteGradeFunc mocks the DeleteGrade method.
	DeleteGradeFunc func(ctx context.Context, gradeID uuid.UUID) (int64, error)

	// DeleteGradeWithSdFunc mocks the DeleteGradeWithSd method.
	DeleteGradeWithSdFunc func(ctx context.Context, sd Sd, gradeID uuid.UUID) (int64, error)

	// DeleteGroupFunc mocks the DeleteGroup method.
	DeleteGroupFunc func(ctx context.Context, groupID uuid.UUID) (int64, error)

	// DeleteGroupWithSdFunc mocks the DeleteGroupWithSd method.
	DeleteGroupWithSdFunc func(ctx context.Context, sd Sd, groupID uuid.UUID) (int64, error)

	// DeleteImageFunc mocks the DeleteImage method.
	DeleteImageFunc func(ctx context.Context, imageID uuid.UUID) (int64, error)

	// DeleteImageWithSdFunc mocks the DeleteImageWithSd method.
	DeleteImageWithSdFunc func(ctx context.Context, sd Sd, imageID uuid.UUID) (int64, error)

	// DeleteMemberFunc mocks the DeleteMember method.
	DeleteMemberFunc func(ctx context.Context, memberID uuid.UUID) (int64, error)

	// DeleteMemberWithSdFunc mocks the DeleteMemberWithSd method.
	DeleteMemberWithSdFunc func(ctx context.Context, sd Sd, memberID uuid.UUID) (int64, error)

	// DeleteMessageFunc mocks the DeleteMessage method.
	DeleteMessageFunc func(ctx context.Context, messageID uuid.UUID) (int64, error)

	// DeleteMessageWithSdFunc mocks the DeleteMessageWithSd method.
	DeleteMessageWithSdFunc func(ctx context.Context, sd Sd, messageID uuid.UUID) (int64, error)

	// DeleteMessagesOnChatRoomFunc mocks the DeleteMessagesOnChatRoom method.
	DeleteMessagesOnChatRoomFunc func(ctx context.Context, chatRoomID uuid.UUID) (int64, error)

	// DeleteMessagesOnChatRoomWithSdFunc mocks the DeleteMessagesOnChatRoomWithSd method.
	DeleteMessagesOnChatRoomWithSdFunc func(ctx context.Context, sd Sd, chatRoomID uuid.UUID) (int64, error)

	// DeleteMimeTypeFunc mocks the DeleteMimeType method.
	DeleteMimeTypeFunc func(ctx context.Context, mimeTypeID uuid.UUID) (int64, error)

	// DeleteMimeTypeByKeyFunc mocks the DeleteMimeTypeByKey method.
	DeleteMimeTypeByKeyFunc func(ctx context.Context, key string) (int64, error)

	// DeleteMimeTypeByKeyWithSdFunc mocks the DeleteMimeTypeByKeyWithSd method.
	DeleteMimeTypeByKeyWithSdFunc func(ctx context.Context, sd Sd, key string) (int64, error)

	// DeleteMimeTypeWithSdFunc mocks the DeleteMimeTypeWithSd method.
	DeleteMimeTypeWithSdFunc func(ctx context.Context, sd Sd, mimeTypeID uuid.UUID) (int64, error)

	// DeleteOrganizationFunc mocks the DeleteOrganization method.
	DeleteOrganizationFunc func(ctx context.Context, organizationID uuid.UUID) (int64, error)

	// DeleteOrganizationWithSdFunc mocks the DeleteOrganizationWithSd method.
	DeleteOrganizationWithSdFunc func(ctx context.Context, sd Sd, organizationID uuid.UUID) (int64, error)

	// DeletePermissionFunc mocks the DeletePermission method.
	DeletePermissionFunc func(ctx context.Context, permissionID uuid.UUID) (int64, error)

	// DeletePermissionByKeyFunc mocks the DeletePermissionByKey method.
	DeletePermissionByKeyFunc func(ctx context.Context, key string) (int64, error)

	// DeletePermissionByKeyWithSdFunc mocks the DeletePermissionByKeyWithSd method.
	DeletePermissionByKeyWithSdFunc func(ctx context.Context, sd Sd, key string) (int64, error)

	// DeletePermissionCategoryFunc mocks the DeletePermissionCategory method.
	DeletePermissionCategoryFunc func(ctx context.Context, permissionCategoryID uuid.UUID) (int64, error)

	// DeletePermissionCategoryByKeyFunc mocks the DeletePermissionCategoryByKey method.
	DeletePermissionCategoryByKeyFunc func(ctx context.Context, key string) (int64, error)

	// DeletePermissionCategoryByKeyWithSdFunc mocks the DeletePermissionCategoryByKeyWithSd method.
	DeletePermissionCategoryByKeyWithSdFunc func(ctx context.Context, sd Sd, key string) (int64, error)

	// DeletePermissionCategoryWithSdFunc mocks the DeletePermissionCategoryWithSd method.
	DeletePermissionCategoryWithSdFunc func(ctx context.Context, sd Sd, permissionCategoryID uuid.UUID) (int64, error)

	// DeletePermissionWithSdFunc mocks the DeletePermissionWithSd method.
	DeletePermissionWithSdFunc func(ctx context.Context, sd Sd, permissionID uuid.UUID) (int64, error)

	// DeletePolicyFunc mocks the DeletePolicy method.
	DeletePolicyFunc func(ctx context.Context, policyID uuid.UUID) (int64, error)

	// DeletePolicyByKeyFunc mocks the DeletePolicyByKey method.
	DeletePolicyByKeyFunc func(ctx context.Context, key string) (int64, error)

	// DeletePolicyByKeyWithSdFunc mocks the DeletePolicyByKeyWithSd method.
	DeletePolicyByKeyWithSdFunc func(ctx context.Context, sd Sd, key string) (int64, error)

	// DeletePolicyCategoryFunc mocks the DeletePolicyCategory method.
	DeletePolicyCategoryFunc func(ctx context.Context, policyCategoryID uuid.UUID) (int64, error)

	// DeletePolicyCategoryByKeyFunc mocks the DeletePolicyCategoryByKey method.
	DeletePolicyCategoryByKeyFunc func(ctx context.Context, key string) (int64, error)

	// DeletePolicyCategoryByKeyWithSdFunc mocks the DeletePolicyCategoryByKeyWithSd method.
	DeletePolicyCategoryByKeyWithSdFunc func(ctx context.Context, sd Sd, key string) (int64, error)

	// DeletePolicyCategoryWithSdFunc mocks the DeletePolicyCategoryWithSd method.
	DeletePolicyCategoryWithSdFunc func(ctx context.Context, sd Sd, policyCategoryID uuid.UUID) (int64, error)

	// DeletePolicyWithSdFunc mocks the DeletePolicyWithSd method.
	DeletePolicyWithSdFunc func(ctx context.Context, sd Sd, policyID uuid.UUID) (int64, error)

	// DeleteProfessorFunc mocks the DeleteProfessor method.
	DeleteProfessorFunc func(ctx context.Context, professorID uuid.UUID) (int64, error)

	// DeleteProfessorWithSdFunc mocks the DeleteProfessorWithSd method.
	DeleteProfessorWithSdFunc func(ctx context.Context, sd Sd, professorID uuid.UUID) (int64, error)

	// DeleteRecordTypeFunc mocks the DeleteRecordType method.
	DeleteRecordTypeFunc func(ctx context.Context, recordTypeID uuid.UUID) (int64, error)

	// DeleteRecordTypeByKeyFunc mocks the DeleteRecordTypeByKey method.
	DeleteRecordTypeByKeyFunc func(ctx context.Context, key string) (int64, error)

	// DeleteRecordTypeByKeyWithSdFunc mocks the DeleteRecordTypeByKeyWithSd method.
	DeleteRecordTypeByKeyWithSdFunc func(ctx context.Context, sd Sd, key string) (int64, error)

	// DeleteRecordTypeWithSdFunc mocks the DeleteRecordTypeWithSd method.
	DeleteRecordTypeWithSdFunc func(ctx context.Context, sd Sd, recordTypeID uuid.UUID) (int64, error)

	// DeleteRoleFunc mocks the DeleteRole method.
	DeleteRoleFunc func(ctx context.Context, roleID uuid.UUID) (int64, error)

	// DeleteRoleWithSdFunc mocks the DeleteRoleWithSd method.
	DeleteRoleWithSdFunc func(ctx context.Context, sd Sd, roleID uuid.UUID) (int64, error)

	// DeleteStudentFunc mocks the DeleteStudent method.
	DeleteStudentFunc func(ctx context.Context, studentID uuid.UUID) (int64, error)

	// DeleteStudentWithSdFunc mocks the DeleteStudentWithSd method.
	DeleteStudentWithSdFunc func(ctx context.Context, sd Sd, studentID uuid.UUID) (int64, error)

	// DetachAttachedMessageFunc mocks the DetachAttachedMessage method.
	DetachAttachedMessageFunc func(ctx context.Context, attachedMessageID uuid.UUID) (int64, error)

	// DetachAttachedMessageWithSdFunc mocks the DetachAttachedMessageWithSd method.
	DetachAttachedMessageWithSdFunc func(ctx context.Context, sd Sd, attachedMessageID uuid.UUID) (int64, error)

	// DetachItemsOnMessageFunc mocks the DetachItemsOnMessage method.
	DetachItemsOnMessageFunc func(ctx context.Context, messageID uuid.UUID) (int64, error)

	// DetachItemsOnMessageWithSdFunc mocks the DetachItemsOnMessageWithSd method.
	DetachItemsOnMessageWithSdFunc func(ctx context.Context, sd Sd, messageID uuid.UUID) (int64, error)

	// DetachItemsOnMessagesFunc mocks the DetachItemsOnMessages method.
	DetachItemsOnMessagesFunc func(ctx context.Context, messageIDs []uuid.UUID) (int64, error)

	// DetachItemsOnMessagesWithSdFunc mocks the DetachItemsOnMessagesWithSd method.
	DetachItemsOnMessagesWithSdFunc func(ctx context.Context, sd Sd, messageIDs []uuid.UUID) (int64, error)

	// DisassociatePolicyOnRoleFunc mocks the DisassociatePolicyOnRole method.
	DisassociatePolicyOnRoleFunc func(ctx context.Context, roleID uuid.UUID) (int64, error)

	// DisassociatePolicyOnRoleWithSdFunc mocks the DisassociatePolicyOnRoleWithSd method.
	DisassociatePolicyOnRoleWithSdFunc func(ctx context.Context, sd Sd, roleID uuid.UUID) (int64, error)

	// DisassociatePolicyOnRolesFunc mocks the DisassociatePolicyOnRoles method.
	DisassociatePolicyOnRolesFunc func(ctx context.Context, roleIDs []uuid.UUID) (int64, error)

	// DisassociatePolicyOnRolesWithSdFunc mocks the DisassociatePolicyOnRolesWithSd method.
	DisassociatePolicyOnRolesWithSdFunc func(ctx context.Context, sd Sd, roleIDs []uuid.UUID) (int64, error)

	// DisassociateRoleFunc mocks the DisassociateRole method.
	DisassociateRoleFunc func(ctx context.Context, roleID uuid.UUID, policyID uuid.UUID) (int64, error)

	// DisassociateRoleOnPoliciesFunc mocks the DisassociateRoleOnPolicies method.
	DisassociateRoleOnPoliciesFunc func(ctx context.Context, policyIDs []uuid.UUID) (int64, error)

	// DisassociateRoleOnPoliciesWithSdFunc mocks the DisassociateRoleOnPoliciesWithSd method.
	DisassociateRoleOnPoliciesWithSdFunc func(ctx context.Context, sd Sd, policyIDs []uuid.UUID) (int64, error)

	// DisassociateRoleOnPolicyFunc mocks the DisassociateRoleOnPolicy method.
	DisassociateRoleOnPolicyFunc func(ctx context.Context, policyID uuid.UUID) (int64, error)

	// DisassociateRoleOnPolicyWithSdFunc mocks the DisassociateRoleOnPolicyWithSd method.
	DisassociateRoleOnPolicyWithSdFunc func(ctx context.Context, sd Sd, policyID uuid.UUID) (int64, error)

	// DisassociateRoleWithSdFunc mocks the DisassociateRoleWithSd method.
	DisassociateRoleWithSdFunc func(ctx context.Context, sd Sd, roleID uuid.UUID, policyID uuid.UUID) (int64, error)

	// DisbelongChatRoomFunc mocks the DisbelongChatRoom method.
	DisbelongChatRoomFunc func(ctx context.Context, memberID uuid.UUID, chatRoomID uuid.UUID) (int64, error)

	// DisbelongChatRoomOnChatRoomFunc mocks the DisbelongChatRoomOnChatRoom method.
	DisbelongChatRoomOnChatRoomFunc func(ctx context.Context, chatRoomID uuid.UUID) (int64, error)

	// DisbelongChatRoomOnChatRoomWithSdFunc mocks the DisbelongChatRoomOnChatRoomWithSd method.
	DisbelongChatRoomOnChatRoomWithSdFunc func(ctx context.Context, sd Sd, chatRoomID uuid.UUID) (int64, error)

	// DisbelongChatRoomOnChatRoomsFunc mocks the DisbelongChatRoomOnChatRooms method.
	DisbelongChatRoomOnChatRoomsFunc func(ctx context.Context, chatRoomIDs []uuid.UUID) (int64, error)

	// DisbelongChatRoomOnChatRoomsWithSdFunc mocks the DisbelongChatRoomOnChatRoomsWithSd method.
	DisbelongChatRoomOnChatRoomsWithSdFunc func(ctx context.Context, sd Sd, chatRoomIDs []uuid.UUID) (int64, error)

	// DisbelongChatRoomOnMemberFunc mocks the DisbelongChatRoomOnMember method.
	DisbelongChatRoomOnMemberFunc func(ctx context.Context, memberID uuid.UUID) (int64, error)

	// DisbelongChatRoomOnMemberWithSdFunc mocks the DisbelongChatRoomOnMemberWithSd method.
	DisbelongChatRoomOnMemberWithSdFunc func(ctx context.Context, sd Sd, memberID uuid.UUID) (int64, error)

	// DisbelongChatRoomOnMembersFunc mocks the DisbelongChatRoomOnMembers method.
	DisbelongChatRoomOnMembersFunc func(ctx context.Context, memberIDs []uuid.UUID) (int64, error)

	// DisbelongChatRoomOnMembersWithSdFunc mocks the DisbelongChatRoomOnMembersWithSd method.
	DisbelongChatRoomOnMembersWithSdFunc func(ctx context.Context, sd Sd, memberIDs []uuid.UUID) (int64, error)

	// DisbelongChatRoomWithSdFunc mocks the DisbelongChatRoomWithSd method.
	DisbelongChatRoomWithSdFunc func(ctx context.Context, sd Sd, memberID uuid.UUID, chatRoomID uuid.UUID) (int64, error)

	// DisbelongOrganizationFunc mocks the DisbelongOrganization method.
	DisbelongOrganizationFunc func(ctx context.Context, memberID uuid.UUID, organizationID uuid.UUID) (int64, error)

	// DisbelongOrganizationOnMemberFunc mocks the DisbelongOrganizationOnMember method.
	DisbelongOrganizationOnMemberFunc func(ctx context.Context, memberID uuid.UUID) (int64, error)

	// DisbelongOrganizationOnMemberWithSdFunc mocks the DisbelongOrganizationOnMemberWithSd method.
	DisbelongOrganizationOnMemberWithSdFunc func(ctx context.Context, sd Sd, memberID uuid.UUID) (int64, error)

	// DisbelongOrganizationOnMembersFunc mocks the DisbelongOrganizationOnMembers method.
	DisbelongOrganizationOnMembersFunc func(ctx context.Context, memberIDs []uuid.UUID) (int64, error)

	// DisbelongOrganizationOnMembersWithSdFunc mocks the DisbelongOrganizationOnMembersWithSd method.
	DisbelongOrganizationOnMembersWithSdFunc func(ctx context.Context, sd Sd, memberIDs []uuid.UUID) (int64, error)

	// DisbelongOrganizationOnOrganizationFunc mocks the DisbelongOrganizationOnOrganization method.
	DisbelongOrganizationOnOrganizationFunc func(ctx context.Context, organizationID uuid.UUID) (int64, error)

	// DisbelongOrganizationOnOrganizationWithSdFunc mocks the DisbelongOrganizationOnOrganizationWithSd method.
	DisbelongOrganizationOnOrganizationWithSdFunc func(ctx context.Context, sd Sd, organizationID uuid.UUID) (int64, error)

	// DisbelongOrganizationOnOrganizationsFunc mocks the DisbelongOrganizationOnOrganizations method.
	DisbelongOrganizationOnOrganizationsFunc func(ctx context.Context, organizationIDs []uuid.UUID) (int64, error)

	// DisbelongOrganizationOnOrganizationsWithSdFunc mocks the DisbelongOrganizationOnOrganizationsWithSd method.
	DisbelongOrganizationOnOrganizationsWithSdFunc func(ctx context.Context, sd Sd, organizationIDs []uuid.UUID) (int64, error)

	// DisbelongOrganizationWithSdFunc mocks the DisbelongOrganizationWithSd method.
	DisbelongOrganizationWithSdFunc func(ctx context.Context, sd Sd, memberID uuid.UUID, organizationID uuid.UUID) (int64, error)

	// DisbelongPluralChatRoomsOnMemberFunc mocks the DisbelongPluralChatRoomsOnMember method.
	DisbelongPluralChatRoomsOnMemberFunc func(ctx context.Context, memberID uuid.UUID, chatRoomIDs []uuid.UUID) (int64, error)

	// DisbelongPluralChatRoomsOnMemberWithSdFunc mocks the DisbelongPluralChatRoomsOnMemberWithSd method.
	DisbelongPluralChatRoomsOnMemberWithSdFunc func(ctx context.Context, sd Sd, memberID uuid.UUID, chatRoomIDs []uuid.UUID) (int64, error)

	// DisbelongPluralMembersOnChatRoomFunc mocks the DisbelongPluralMembersOnChatRoom method.
	DisbelongPluralMembersOnChatRoomFunc func(ctx context.Context, chatRoomID uuid.UUID, memberIDs []uuid.UUID) (int64, error)

	// DisbelongPluralMembersOnChatRoomWithSdFunc mocks the DisbelongPluralMembersOnChatRoomWithSd method.
	DisbelongPluralMembersOnChatRoomWithSdFunc func(ctx context.Context, sd Sd, chatRoomID uuid.UUID, memberIDs []uuid.UUID) (int64, error)

	// DisbelongPluralMembersOnOrganizationFunc mocks the DisbelongPluralMembersOnOrganization method.
	DisbelongPluralMembersOnOrganizationFunc func(ctx context.Context, organizationID uuid.UUID, memberIDs []uuid.UUID) (int64, error)

	// DisbelongPluralMembersOnOrganizationWithSdFunc mocks the DisbelongPluralMembersOnOrganizationWithSd method.
	DisbelongPluralMembersOnOrganizationWithSdFunc func(ctx context.Context, sd Sd, organizationID uuid.UUID, memberIDs []uuid.UUID) (int64, error)

	// DisbelongPluralOrganizationsOnMemberFunc mocks the DisbelongPluralOrganizationsOnMember method.
	DisbelongPluralOrganizationsOnMemberFunc func(ctx context.Context, memberID uuid.UUID, organizationIDs []uuid.UUID) (int64, error)

	// DisbelongPluralOrganizationsOnMemberWithSdFunc mocks the DisbelongPluralOrganizationsOnMemberWithSd method.
	DisbelongPluralOrganizationsOnMemberWithSdFunc func(ctx context.Context, sd Sd, memberID uuid.UUID, organizationIDs []uuid.UUID) (int64, error)

	// ExistsChatRoomBelongingFunc mocks the ExistsChatRoomBelonging method.
	ExistsChatRoomBelongingFunc func(ctx context.Context, memberID uuid.UUID, chatRoomID uuid.UUID) (bool, error)

	// ExistsChatRoomBelongingWithSdFunc mocks the ExistsChatRoomBelongingWithSd method.
	ExistsChatRoomBelongingWithSdFunc func(ctx context.Context, sd Sd, memberID uuid.UUID, chatRoomID uuid.UUID) (bool, error)

	// ExistsReadReceiptFunc mocks the ExistsReadReceipt method.
	ExistsReadReceiptFunc func(ctx context.Context, memberID uuid.UUID, messageID uuid.UUID, where parameter.WhereExistsReadReceiptParam) (bool, error)

	// ExistsReadReceiptWithSdFunc mocks the ExistsReadReceiptWithSd method.
	ExistsReadReceiptWithSdFunc func(ctx context.Context, sd Sd, memberID uuid.UUID, messageID uuid.UUID, where parameter.WhereExistsReadReceiptParam) (bool, error)

	// FindAbsenceByIDFunc mocks the FindAbsenceByID method.
	FindAbsenceByIDFunc func(ctx context.Context, absenceID uuid.UUID) (entity.Absence, error)

	// FindAbsenceByIDWithSdFunc mocks the FindAbsenceByIDWithSd method.
	FindAbsenceByIDWithSdFunc func(ctx context.Context, sd Sd, absenceID uuid.UUID) (entity.Absence, error)

	// FindAttachableItemByIDFunc mocks the FindAttachableItemByID method.
	FindAttachableItemByIDFunc func(ctx context.Context, attachableItemID uuid.UUID) (entity.AttachableItemWithContent, error)

	// FindAttachableItemByIDWithMimeTypeFunc mocks the FindAttachableItemByIDWithMimeType method.
	FindAttachableItemByIDWithMimeTypeFunc func(ctx context.Context, attachableItemID uuid.UUID) (entity.AttachableItemWithMimeType, error)

	// FindAttachableItemByIDWithMimeTypeWithSdFunc mocks the FindAttachableItemByIDWithMimeTypeWithSd method.
	FindAttachableItemByIDWithMimeTypeWithSdFunc func(ctx context.Context, sd Sd, attachableItemID uuid.UUID) (entity.AttachableItemWithMimeType, error)

	// FindAttachableItemByIDWithSdFunc mocks the FindAttachableItemByIDWithSd method.
	FindAttachableItemByIDWithSdFunc func(ctx context.Context, sd Sd, attachableItemID uuid.UUID) (entity.AttachableItemWithContent, error)

	// FindAttachableItemByURLFunc mocks the FindAttachableItemByURL method.
	FindAttachableItemByURLFunc func(ctx context.Context, url string) (entity.AttachableItemWithContent, error)

	// FindAttachableItemByURLWithMimeTypeFunc mocks the FindAttachableItemByURLWithMimeType method.
	FindAttachableItemByURLWithMimeTypeFunc func(ctx context.Context, url string) (entity.AttachableItemWithMimeType, error)

	// FindAttachableItemByURLWithMimeTypeWithSdFunc mocks the FindAttachableItemByURLWithMimeTypeWithSd method.
	FindAttachableItemByURLWithMimeTypeWithSdFunc func(ctx context.Context, sd Sd, url string) (entity.AttachableItemWithMimeType, error)

	// FindAttachableItemByURLWithSdFunc mocks the FindAttachableItemByURLWithSd method.
	FindAttachableItemByURLWithSdFunc func(ctx context.Context, sd Sd, url string) (entity.AttachableItemWithContent, error)

	// FindAttendStatusByIDFunc mocks the FindAttendStatusByID method.
	FindAttendStatusByIDFunc func(ctx context.Context, attendStatusID uuid.UUID) (entity.AttendStatus, error)

	// FindAttendStatusByIDWithSdFunc mocks the FindAttendStatusByIDWithSd method.
	FindAttendStatusByIDWithSdFunc func(ctx context.Context, sd Sd, attendStatusID uuid.UUID) (entity.AttendStatus, error)

	// FindAttendStatusByKeyFunc mocks the FindAttendStatusByKey method.
	FindAttendStatusByKeyFunc func(ctx context.Context, key string) (entity.AttendStatus, error)

	// FindAttendStatusByKeyWithSdFunc mocks the FindAttendStatusByKeyWithSd method.
	FindAttendStatusByKeyWithSdFunc func(ctx context.Context, sd Sd, key string) (entity.AttendStatus, error)

	// FindAttendanceTypeByIDFunc mocks the FindAttendanceTypeByID method.
	FindAttendanceTypeByIDFunc func(ctx context.Context, attendanceTypeID uuid.UUID) (entity.AttendanceType, error)

	// FindAttendanceTypeByIDWithSdFunc mocks the FindAttendanceTypeByIDWithSd method.
	FindAttendanceTypeByIDWithSdFunc func(ctx context.Context, sd Sd, attendanceTypeID uuid.UUID) (entity.AttendanceType, error)

	// FindAttendanceTypeByKeyFunc mocks the FindAttendanceTypeByKey method.
	FindAttendanceTypeByKeyFunc func(ctx context.Context, key string) (entity.AttendanceType, error)

	// FindAttendanceTypeByKeyWithSdFunc mocks the FindAttendanceTypeByKeyWithSd method.
	FindAttendanceTypeByKeyWithSdFunc func(ctx context.Context, sd Sd, key string) (entity.AttendanceType, error)

	// FindChatRoomActionTypeByIDFunc mocks the FindChatRoomActionTypeByID method.
	FindChatRoomActionTypeByIDFunc func(ctx context.Context, recordTypeID uuid.UUID) (entity.ChatRoomActionType, error)

	// FindChatRoomActionTypeByIDWithSdFunc mocks the FindChatRoomActionTypeByIDWithSd method.
	FindChatRoomActionTypeByIDWithSdFunc func(ctx context.Context, sd Sd, recordTypeID uuid.UUID) (entity.ChatRoomActionType, error)

	// FindChatRoomActionTypeByKeyFunc mocks the FindChatRoomActionTypeByKey method.
	FindChatRoomActionTypeByKeyFunc func(ctx context.Context, key string) (entity.ChatRoomActionType, error)

	// FindChatRoomActionTypeByKeyWithSdFunc mocks the FindChatRoomActionTypeByKeyWithSd method.
	FindChatRoomActionTypeByKeyWithSdFunc func(ctx context.Context, sd Sd, key string) (entity.ChatRoomActionType, error)

	// FindChatRoomByIDFunc mocks the FindChatRoomByID method.
	FindChatRoomByIDFunc func(ctx context.Context, chatRoomID uuid.UUID) (entity.ChatRoom, error)

	// FindChatRoomByIDWithCoverImageFunc mocks the FindChatRoomByIDWithCoverImage method.
	FindChatRoomByIDWithCoverImageFunc func(ctx context.Context, chatRoomID uuid.UUID) (entity.ChatRoomWithCoverImage, error)

	// FindChatRoomByIDWithCoverImageWithSdFunc mocks the FindChatRoomByIDWithCoverImageWithSd method.
	FindChatRoomByIDWithCoverImageWithSdFunc func(ctx context.Context, sd Sd, chatRoomID uuid.UUID) (entity.ChatRoomWithCoverImage, error)

	// FindChatRoomByIDWithSdFunc mocks the FindChatRoomByIDWithSd method.
	FindChatRoomByIDWithSdFunc func(ctx context.Context, sd Sd, chatRoomID uuid.UUID) (entity.ChatRoom, error)

	// FindChatRoomOnPrivateFunc mocks the FindChatRoomOnPrivate method.
	FindChatRoomOnPrivateFunc func(ctx context.Context, ownerID uuid.UUID, memberID uuid.UUID) (entity.ChatRoom, error)

	// FindChatRoomOnPrivateWithSdFunc mocks the FindChatRoomOnPrivateWithSd method.
	FindChatRoomOnPrivateWithSdFunc func(ctx context.Context, sd Sd, ownerID uuid.UUID, memberID uuid.UUID) (entity.ChatRoom, error)

	// FindEventTypeByIDFunc mocks the FindEventTypeByID method.
	FindEventTypeByIDFunc func(ctx context.Context, eventTypeID uuid.UUID) (entity.EventType, error)

	// FindEventTypeByIDWithSdFunc mocks the FindEventTypeByIDWithSd method.
	FindEventTypeByIDWithSdFunc func(ctx context.Context, sd Sd, eventTypeID uuid.UUID) (entity.EventType, error)

	// FindEventTypeByKeyFunc mocks the FindEventTypeByKey method.
	FindEventTypeByKeyFunc func(ctx context.Context, key string) (entity.EventType, error)

	// FindEventTypeByKeyWithSdFunc mocks the FindEventTypeByKeyWithSd method.
	FindEventTypeByKeyWithSdFunc func(ctx context.Context, sd Sd, key string) (entity.EventType, error)

	// FindFileByIDFunc mocks the FindFileByID method.
	FindFileByIDFunc func(ctx context.Context, fileID uuid.UUID) (entity.File, error)

	// FindFileByIDWithSdFunc mocks the FindFileByIDWithSd method.
	FindFileByIDWithSdFunc func(ctx context.Context, sd Sd, fileID uuid.UUID) (entity.File, error)

	// FindFileWithAttachableItemFunc mocks the FindFileWithAttachableItem method.
	FindFileWithAttachableItemFunc func(ctx context.Context, fileID uuid.UUID) (entity.FileWithAttachableItem, error)

	// FindFileWithAttachableItemWithSdFunc mocks the FindFileWithAttachableItemWithSd method.
	FindFileWithAttachableItemWithSdFunc func(ctx context.Context, sd Sd, fileID uuid.UUID) (entity.FileWithAttachableItem, error)

	// FindGradeByIDFunc mocks the FindGradeByID method.
	FindGradeByIDFunc func(ctx context.Context, gradeID uuid.UUID) (entity.Grade, error)

	// FindGradeByIDWithSdFunc mocks the FindGradeByIDWithSd method.
	FindGradeByIDWithSdFunc func(ctx context.Context, sd Sd, gradeID uuid.UUID) (entity.Grade, error)

	// FindGradeByKeyFunc mocks the FindGradeByKey method.
	FindGradeByKeyFunc func(ctx context.Context, key string) (entity.Grade, error)

	// FindGradeByKeyWithSdFunc mocks the FindGradeByKeyWithSd method.
	FindGradeByKeyWithSdFunc func(ctx context.Context, sd Sd, key string) (entity.Grade, error)

	// FindGradeWithOrganizationFunc mocks the FindGradeWithOrganization method.
	FindGradeWithOrganizationFunc func(ctx context.Context, gradeID uuid.UUID) (entity.GradeWithOrganization, error)

	// FindGradeWithOrganizationWithSdFunc mocks the FindGradeWithOrganizationWithSd method.
	FindGradeWithOrganizationWithSdFunc func(ctx context.Context, sd Sd, gradeID uuid.UUID) (entity.GradeWithOrganization, error)

	// FindGroupByIDFunc mocks the FindGroupByID method.
	FindGroupByIDFunc func(ctx context.Context, groupID uuid.UUID) (entity.Group, error)

	// FindGroupByIDWithSdFunc mocks the FindGroupByIDWithSd method.
	FindGroupByIDWithSdFunc func(ctx context.Context, sd Sd, groupID uuid.UUID) (entity.Group, error)

	// FindGroupByKeyFunc mocks the FindGroupByKey method.
	FindGroupByKeyFunc func(ctx context.Context, key string) (entity.Group, error)

	// FindGroupByKeyWithSdFunc mocks the FindGroupByKeyWithSd method.
	FindGroupByKeyWithSdFunc func(ctx context.Context, sd Sd, key string) (entity.Group, error)

	// FindGroupWithOrganizationFunc mocks the FindGroupWithOrganization method.
	FindGroupWithOrganizationFunc func(ctx context.Context, groupID uuid.UUID) (entity.GroupWithOrganization, error)

	// FindGroupWithOrganizationWithSdFunc mocks the FindGroupWithOrganizationWithSd method.
	FindGroupWithOrganizationWithSdFunc func(ctx context.Context, sd Sd, groupID uuid.UUID) (entity.GroupWithOrganization, error)

	// FindImageByIDFunc mocks the FindImageByID method.
	FindImageByIDFunc func(ctx context.Context, imageID uuid.UUID) (entity.Image, error)

	// FindImageByIDWithSdFunc mocks the FindImageByIDWithSd method.
	FindImageByIDWithSdFunc func(ctx context.Context, sd Sd, imageID uuid.UUID) (entity.Image, error)

	// FindImageWithAttachableItemFunc mocks the FindImageWithAttachableItem method.
	FindImageWithAttachableItemFunc func(ctx context.Context, imageID uuid.UUID) (entity.ImageWithAttachableItem, error)

	// FindImageWithAttachableItemWithSdFunc mocks the FindImageWithAttachableItemWithSd method.
	FindImageWithAttachableItemWithSdFunc func(ctx context.Context, sd Sd, imageID uuid.UUID) (entity.ImageWithAttachableItem, error)

	// FindMemberByIDFunc mocks the FindMemberByID method.
	FindMemberByIDFunc func(ctx context.Context, memberID uuid.UUID) (entity.Member, error)

	// FindMemberByIDWithSdFunc mocks the FindMemberByIDWithSd method.
	FindMemberByIDWithSdFunc func(ctx context.Context, sd Sd, memberID uuid.UUID) (entity.Member, error)

	// FindMemberByLoginIDFunc mocks the FindMemberByLoginID method.
	FindMemberByLoginIDFunc func(ctx context.Context, loginID string) (entity.Member, error)

	// FindMemberByLoginIDWithSdFunc mocks the FindMemberByLoginIDWithSd method.
	FindMemberByLoginIDWithSdFunc func(ctx context.Context, sd Sd, loginID string) (entity.Member, error)

	// FindMemberCredentialsByIDFunc mocks the FindMemberCredentialsByID method.
	FindMemberCredentialsByIDFunc func(ctx context.Context, memberID uuid.UUID) (entity.MemberCredentials, error)

	// FindMemberCredentialsByIDWithSdFunc mocks the FindMemberCredentialsByIDWithSd method.
	FindMemberCredentialsByIDWithSdFunc func(ctx context.Context, sd Sd, memberID uuid.UUID) (entity.MemberCredentials, error)

	// FindMemberCredentialsByLoginIDFunc mocks the FindMemberCredentialsByLoginID method.
	FindMemberCredentialsByLoginIDFunc func(ctx context.Context, loginID string) (entity.MemberCredentials, error)

	// FindMemberCredentialsByLoginIDWithSdFunc mocks the FindMemberCredentialsByLoginIDWithSd method.
	FindMemberCredentialsByLoginIDWithSdFunc func(ctx context.Context, sd Sd, loginID string) (entity.MemberCredentials, error)

	// FindMemberWithAttendStatusFunc mocks the FindMemberWithAttendStatus method.
	FindMemberWithAttendStatusFunc func(ctx context.Context, memberID uuid.UUID) (entity.MemberWithAttendStatus, error)

	// FindMemberWithAttendStatusWithSdFunc mocks the FindMemberWithAttendStatusWithSd method.
	FindMemberWithAttendStatusWithSdFunc func(ctx context.Context, sd Sd, memberID uuid.UUID) (entity.MemberWithAttendStatus, error)

	// FindMemberWithCrewFunc mocks the FindMemberWithCrew method.
	FindMemberWithCrewFunc func(ctx context.Context, memberID uuid.UUID) (entity.MemberWithCrew, error)

	// FindMemberWithCrewWithSdFunc mocks the FindMemberWithCrewWithSd method.
	FindMemberWithCrewWithSdFunc func(ctx context.Context, sd Sd, memberID uuid.UUID) (entity.MemberWithCrew, error)

	// FindMemberWithDetailFunc mocks the FindMemberWithDetail method.
	FindMemberWithDetailFunc func(ctx context.Context, memberID uuid.UUID) (entity.MemberWithDetail, error)

	// FindMemberWithDetailWithSdFunc mocks the FindMemberWithDetailWithSd method.
	FindMemberWithDetailWithSdFunc func(ctx context.Context, sd Sd, memberID uuid.UUID) (entity.MemberWithDetail, error)

	// FindMemberWithPersonalOrganizationFunc mocks the FindMemberWithPersonalOrganization method.
	FindMemberWithPersonalOrganizationFunc func(ctx context.Context, memberID uuid.UUID) (entity.MemberWithPersonalOrganization, error)

	// FindMemberWithPersonalOrganizationWithSdFunc mocks the FindMemberWithPersonalOrganizationWithSd method.
	FindMemberWithPersonalOrganizationWithSdFunc func(ctx context.Context, sd Sd, memberID uuid.UUID) (entity.MemberWithPersonalOrganization, error)

	// FindMemberWithProfileImageFunc mocks the FindMemberWithProfileImage method.
	FindMemberWithProfileImageFunc func(ctx context.Context, memberID uuid.UUID) (entity.MemberWithProfileImage, error)

	// FindMemberWithProfileImageWithSdFunc mocks the FindMemberWithProfileImageWithSd method.
	FindMemberWithProfileImageWithSdFunc func(ctx context.Context, sd Sd, memberID uuid.UUID) (entity.MemberWithProfileImage, error)

	// FindMemberWithRoleFunc mocks the FindMemberWithRole method.
	FindMemberWithRoleFunc func(ctx context.Context, memberID uuid.UUID) (entity.MemberWithRole, error)

	// FindMemberWithRoleWithSdFunc mocks the FindMemberWithRoleWithSd method.
	FindMemberWithRoleWithSdFunc func(ctx context.Context, sd Sd, memberID uuid.UUID) (entity.MemberWithRole, error)

	// FindMessageByIDFunc mocks the FindMessageByID method.
	FindMessageByIDFunc func(ctx context.Context, messageID uuid.UUID) (entity.Message, error)

	// FindMessageByIDWithSdFunc mocks the FindMessageByIDWithSd method.
	FindMessageByIDWithSdFunc func(ctx context.Context, sd Sd, messageID uuid.UUID) (entity.Message, error)

	// FindMessageWithChatRoomFunc mocks the FindMessageWithChatRoom method.
	FindMessageWithChatRoomFunc func(ctx context.Context, messageID uuid.UUID) (entity.MessageWithChatRoom, error)

	// FindMessageWithChatRoomActionFunc mocks the FindMessageWithChatRoomAction method.
	FindMessageWithChatRoomActionFunc func(ctx context.Context, messageID uuid.UUID) (entity.MessageWithChatRoomAction, error)

	// FindMessageWithChatRoomActionWithSdFunc mocks the FindMessageWithChatRoomActionWithSd method.
	FindMessageWithChatRoomActionWithSdFunc func(ctx context.Context, sd Sd, messageID uuid.UUID) (entity.MessageWithChatRoomAction, error)

	// FindMessageWithChatRoomWithSdFunc mocks the FindMessageWithChatRoomWithSd method.
	FindMessageWithChatRoomWithSdFunc func(ctx context.Context, sd Sd, messageID uuid.UUID) (entity.MessageWithChatRoom, error)

	// FindMessageWithSenderFunc mocks the FindMessageWithSender method.
	FindMessageWithSenderFunc func(ctx context.Context, messageID uuid.UUID) (entity.MessageWithSender, error)

	// FindMessageWithSenderWithSdFunc mocks the FindMessageWithSenderWithSd method.
	FindMessageWithSenderWithSdFunc func(ctx context.Context, sd Sd, messageID uuid.UUID) (entity.MessageWithSender, error)

	// FindMimeTypeByIDFunc mocks the FindMimeTypeByID method.
	FindMimeTypeByIDFunc func(ctx context.Context, mimeTypeID uuid.UUID) (entity.MimeType, error)

	// FindMimeTypeByIDWithSdFunc mocks the FindMimeTypeByIDWithSd method.
	FindMimeTypeByIDWithSdFunc func(ctx context.Context, sd Sd, mimeTypeID uuid.UUID) (entity.MimeType, error)

	// FindMimeTypeByKeyFunc mocks the FindMimeTypeByKey method.
	FindMimeTypeByKeyFunc func(ctx context.Context, key string) (entity.MimeType, error)

	// FindMimeTypeByKeyWithSdFunc mocks the FindMimeTypeByKeyWithSd method.
	FindMimeTypeByKeyWithSdFunc func(ctx context.Context, sd Sd, key string) (entity.MimeType, error)

	// FindMimeTypeByKindFunc mocks the FindMimeTypeByKind method.
	FindMimeTypeByKindFunc func(ctx context.Context, kind string) (entity.MimeType, error)

	// FindMimeTypeByKindWithSdFunc mocks the FindMimeTypeByKindWithSd method.
	FindMimeTypeByKindWithSdFunc func(ctx context.Context, sd Sd, kind string) (entity.MimeType, error)

	// FindOrganizationByIDFunc mocks the FindOrganizationByID method.
	FindOrganizationByIDFunc func(ctx context.Context, organizationID uuid.UUID) (entity.Organization, error)

	// FindOrganizationByIDWithSdFunc mocks the FindOrganizationByIDWithSd method.
	FindOrganizationByIDWithSdFunc func(ctx context.Context, sd Sd, organizationID uuid.UUID) (entity.Organization, error)

	// FindOrganizationWithChatRoomFunc mocks the FindOrganizationWithChatRoom method.
	FindOrganizationWithChatRoomFunc func(ctx context.Context, organizationID uuid.UUID) (entity.OrganizationWithChatRoom, error)

	// FindOrganizationWithChatRoomAndDetailFunc mocks the FindOrganizationWithChatRoomAndDetail method.
	FindOrganizationWithChatRoomAndDetailFunc func(ctx context.Context, organizationID uuid.UUID) (entity.OrganizationWithChatRoomAndDetail, error)

	// FindOrganizationWithChatRoomAndDetailWithSdFunc mocks the FindOrganizationWithChatRoomAndDetailWithSd method.
	FindOrganizationWithChatRoomAndDetailWithSdFunc func(ctx context.Context, sd Sd, organizationID uuid.UUID) (entity.OrganizationWithChatRoomAndDetail, error)

	// FindOrganizationWithChatRoomWithSdFunc mocks the FindOrganizationWithChatRoomWithSd method.
	FindOrganizationWithChatRoomWithSdFunc func(ctx context.Context, sd Sd, organizationID uuid.UUID) (entity.OrganizationWithChatRoom, error)

	// FindOrganizationWithDetailFunc mocks the FindOrganizationWithDetail method.
	FindOrganizationWithDetailFunc func(ctx context.Context, organizationID uuid.UUID) (entity.OrganizationWithDetail, error)

	// FindOrganizationWithDetailWithSdFunc mocks the FindOrganizationWithDetailWithSd method.
	FindOrganizationWithDetailWithSdFunc func(ctx context.Context, sd Sd, organizationID uuid.UUID) (entity.OrganizationWithDetail, error)

	// FindPermissionByIDFunc mocks the FindPermissionByID method.
	FindPermissionByIDFunc func(ctx context.Context, permissionID uuid.UUID) (entity.Permission, error)

	// FindPermissionByIDWithCategoryFunc mocks the FindPermissionByIDWithCategory method.
	FindPermissionByIDWithCategoryFunc func(ctx context.Context, permissionID uuid.UUID) (entity.PermissionWithCategory, error)

	// FindPermissionByIDWithCategoryWithSdFunc mocks the FindPermissionByIDWithCategoryWithSd method.
	FindPermissionByIDWithCategoryWithSdFunc func(ctx context.Context, sd Sd, permissionID uuid.UUID) (entity.PermissionWithCategory, error)

	// FindPermissionByIDWithSdFunc mocks the FindPermissionByIDWithSd method.
	FindPermissionByIDWithSdFunc func(ctx context.Context, sd Sd, permissionID uuid.UUID) (entity.Permission, error)

	// FindPermissionByKeyFunc mocks the FindPermissionByKey method.
	FindPermissionByKeyFunc func(ctx context.Context, key string) (entity.Permission, error)

	// FindPermissionByKeyWithCategoryFunc mocks the FindPermissionByKeyWithCategory method.
	FindPermissionByKeyWithCategoryFunc func(ctx context.Context, key string) (entity.PermissionWithCategory, error)

	// FindPermissionByKeyWithCategoryWithSdFunc mocks the FindPermissionByKeyWithCategoryWithSd method.
	FindPermissionByKeyWithCategoryWithSdFunc func(ctx context.Context, sd Sd, key string) (entity.PermissionWithCategory, error)

	// FindPermissionByKeyWithSdFunc mocks the FindPermissionByKeyWithSd method.
	FindPermissionByKeyWithSdFunc func(ctx context.Context, sd Sd, key string) (entity.Permission, error)

	// FindPermissionCategoryByIDFunc mocks the FindPermissionCategoryByID method.
	FindPermissionCategoryByIDFunc func(ctx context.Context, permissionCategoryID uuid.UUID) (entity.PermissionCategory, error)

	// FindPermissionCategoryByIDWithSdFunc mocks the FindPermissionCategoryByIDWithSd method.
	FindPermissionCategoryByIDWithSdFunc func(ctx context.Context, sd Sd, permissionCategoryID uuid.UUID) (entity.PermissionCategory, error)

	// FindPermissionCategoryByKeyFunc mocks the FindPermissionCategoryByKey method.
	FindPermissionCategoryByKeyFunc func(ctx context.Context, key string) (entity.PermissionCategory, error)

	// FindPermissionCategoryByKeyWithSdFunc mocks the FindPermissionCategoryByKeyWithSd method.
	FindPermissionCategoryByKeyWithSdFunc func(ctx context.Context, sd Sd, key string) (entity.PermissionCategory, error)

	// FindPersonalOrganizationFunc mocks the FindPersonalOrganization method.
	FindPersonalOrganizationFunc func(ctx context.Context, memberID uuid.UUID) (entity.Organization, error)

	// FindPersonalOrganizationWithSdFunc mocks the FindPersonalOrganizationWithSd method.
	FindPersonalOrganizationWithSdFunc func(ctx context.Context, sd Sd, memberID uuid.UUID) (entity.Organization, error)

	// FindPolicyByIDFunc mocks the FindPolicyByID method.
	FindPolicyByIDFunc func(ctx context.Context, policyID uuid.UUID) (entity.Policy, error)

	// FindPolicyByIDWithCategoryFunc mocks the FindPolicyByIDWithCategory method.
	FindPolicyByIDWithCategoryFunc func(ctx context.Context, policyID uuid.UUID) (entity.PolicyWithCategory, error)

	// FindPolicyByIDWithCategoryWithSdFunc mocks the FindPolicyByIDWithCategoryWithSd method.
	FindPolicyByIDWithCategoryWithSdFunc func(ctx context.Context, sd Sd, policyID uuid.UUID) (entity.PolicyWithCategory, error)

	// FindPolicyByIDWithSdFunc mocks the FindPolicyByIDWithSd method.
	FindPolicyByIDWithSdFunc func(ctx context.Context, sd Sd, policyID uuid.UUID) (entity.Policy, error)

	// FindPolicyByKeyFunc mocks the FindPolicyByKey method.
	FindPolicyByKeyFunc func(ctx context.Context, key string) (entity.Policy, error)

	// FindPolicyByKeyWithCategoryFunc mocks the FindPolicyByKeyWithCategory method.
	FindPolicyByKeyWithCategoryFunc func(ctx context.Context, key string) (entity.PolicyWithCategory, error)

	// FindPolicyByKeyWithCategoryWithSdFunc mocks the FindPolicyByKeyWithCategoryWithSd method.
	FindPolicyByKeyWithCategoryWithSdFunc func(ctx context.Context, sd Sd, key string) (entity.PolicyWithCategory, error)

	// FindPolicyByKeyWithSdFunc mocks the FindPolicyByKeyWithSd method.
	FindPolicyByKeyWithSdFunc func(ctx context.Context, sd Sd, key string) (entity.Policy, error)

	// FindPolicyCategoryByIDFunc mocks the FindPolicyCategoryByID method.
	FindPolicyCategoryByIDFunc func(ctx context.Context, policyCategoryID uuid.UUID) (entity.PolicyCategory, error)

	// FindPolicyCategoryByIDWithSdFunc mocks the FindPolicyCategoryByIDWithSd method.
	FindPolicyCategoryByIDWithSdFunc func(ctx context.Context, sd Sd, policyCategoryID uuid.UUID) (entity.PolicyCategory, error)

	// FindPolicyCategoryByKeyFunc mocks the FindPolicyCategoryByKey method.
	FindPolicyCategoryByKeyFunc func(ctx context.Context, key string) (entity.PolicyCategory, error)

	// FindPolicyCategoryByKeyWithSdFunc mocks the FindPolicyCategoryByKeyWithSd method.
	FindPolicyCategoryByKeyWithSdFunc func(ctx context.Context, sd Sd, key string) (entity.PolicyCategory, error)

	// FindProfessorByIDFunc mocks the FindProfessorByID method.
	FindProfessorByIDFunc func(ctx context.Context, professorID uuid.UUID) (entity.Professor, error)

	// FindProfessorByIDWithSdFunc mocks the FindProfessorByIDWithSd method.
	FindProfessorByIDWithSdFunc func(ctx context.Context, sd Sd, professorID uuid.UUID) (entity.Professor, error)

	// FindProfessorWithMemberFunc mocks the FindProfessorWithMember method.
	FindProfessorWithMemberFunc func(ctx context.Context, professorID uuid.UUID) (entity.ProfessorWithMember, error)

	// FindProfessorWithMemberWithSdFunc mocks the FindProfessorWithMemberWithSd method.
	FindProfessorWithMemberWithSdFunc func(ctx context.Context, sd Sd, professorID uuid.UUID) (entity.ProfessorWithMember, error)

	// FindReadReceiptFunc mocks the FindReadReceipt method.
	FindReadReceiptFunc func(ctx context.Context, memberID uuid.UUID, messageID uuid.UUID) (entity.ReadReceipt, error)

	// FindReadReceiptWithSdFunc mocks the FindReadReceiptWithSd method.
	FindReadReceiptWithSdFunc func(ctx context.Context, sd Sd, memberID uuid.UUID, messageID uuid.UUID) (entity.ReadReceipt, error)

	// FindRecordTypeByIDFunc mocks the FindRecordTypeByID method.
	FindRecordTypeByIDFunc func(ctx context.Context, recordTypeID uuid.UUID) (entity.RecordType, error)

	// FindRecordTypeByIDWithSdFunc mocks the FindRecordTypeByIDWithSd method.
	FindRecordTypeByIDWithSdFunc func(ctx context.Context, sd Sd, recordTypeID uuid.UUID) (entity.RecordType, error)

	// FindRecordTypeByKeyFunc mocks the FindRecordTypeByKey method.
	FindRecordTypeByKeyFunc func(ctx context.Context, key string) (entity.RecordType, error)

	// FindRecordTypeByKeyWithSdFunc mocks the FindRecordTypeByKeyWithSd method.
	FindRecordTypeByKeyWithSdFunc func(ctx context.Context, sd Sd, key string) (entity.RecordType, error)

	// FindRoleByIDFunc mocks the FindRoleByID method.
	FindRoleByIDFunc func(ctx context.Context, roleID uuid.UUID) (entity.Role, error)

	// FindRoleByIDWithSdFunc mocks the FindRoleByIDWithSd method.
	FindRoleByIDWithSdFunc func(ctx context.Context, sd Sd, roleID uuid.UUID) (entity.Role, error)

	// FindStudentByIDFunc mocks the FindStudentByID method.
	FindStudentByIDFunc func(ctx context.Context, studentID uuid.UUID) (entity.Student, error)

	// FindStudentByIDWithSdFunc mocks the FindStudentByIDWithSd method.
	FindStudentByIDWithSdFunc func(ctx context.Context, sd Sd, studentID uuid.UUID) (entity.Student, error)

	// FindStudentWithMemberFunc mocks the FindStudentWithMember method.
	FindStudentWithMemberFunc func(ctx context.Context, studentID uuid.UUID) (entity.StudentWithMember, error)

	// FindStudentWithMemberWithSdFunc mocks the FindStudentWithMemberWithSd method.
	FindStudentWithMemberWithSdFunc func(ctx context.Context, sd Sd, studentID uuid.UUID) (entity.StudentWithMember, error)

	// FindWholeOrganizationFunc mocks the FindWholeOrganization method.
	FindWholeOrganizationFunc func(ctx context.Context) (entity.Organization, error)

	// FindWholeOrganizationWithSdFunc mocks the FindWholeOrganizationWithSd method.
	FindWholeOrganizationWithSdFunc func(ctx context.Context, sd Sd) (entity.Organization, error)

	// GetAbsencesFunc mocks the GetAbsences method.
	GetAbsencesFunc func(ctx context.Context, order parameter.AbsenceOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Absence], error)

	// GetAbsencesWithSdFunc mocks the GetAbsencesWithSd method.
	GetAbsencesWithSdFunc func(ctx context.Context, sd Sd, order parameter.AbsenceOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Absence], error)

	// GetAttachableItemsFunc mocks the GetAttachableItems method.
	GetAttachableItemsFunc func(ctx context.Context, where parameter.WhereAttachableItemParam, order parameter.AttachableItemOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.AttachableItemWithContent], error)

	// GetAttachableItemsWithMimeTypeFunc mocks the GetAttachableItemsWithMimeType method.
	GetAttachableItemsWithMimeTypeFunc func(ctx context.Context, where parameter.WhereAttachableItemParam, order parameter.AttachableItemOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.AttachableItemWithMimeType], error)

	// GetAttachableItemsWithMimeTypeWithSdFunc mocks the GetAttachableItemsWithMimeTypeWithSd method.
	GetAttachableItemsWithMimeTypeWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereAttachableItemParam, order parameter.AttachableItemOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.AttachableItemWithMimeType], error)

	// GetAttachableItemsWithSdFunc mocks the GetAttachableItemsWithSd method.
	GetAttachableItemsWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereAttachableItemParam, order parameter.AttachableItemOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.AttachableItemWithContent], error)

	// GetAttachedItemsOnChatRoomFunc mocks the GetAttachedItemsOnChatRoom method.
	GetAttachedItemsOnChatRoomFunc func(ctx context.Context, chatRoomID uuid.UUID, where parameter.WhereAttachedItemOnChatRoomParam, order parameter.AttachedItemOnChatRoomOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.AttachedItemOnChatRoom], error)

	// GetAttachedItemsOnChatRoomWithSdFunc mocks the GetAttachedItemsOnChatRoomWithSd method.
	GetAttachedItemsOnChatRoomWithSdFunc func(ctx context.Context, sd Sd, chatRoomID uuid.UUID, where parameter.WhereAttachedItemOnChatRoomParam, order parameter.AttachedItemOnChatRoomOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.AttachedItemOnChatRoom], error)

	// GetAttachedItemsOnMessageFunc mocks the GetAttachedItemsOnMessage method.
	GetAttachedItemsOnMessageFunc func(ctx context.Context, messageID uuid.UUID, where parameter.WhereAttachedItemOnMessageParam, order parameter.AttachedItemOnMessageOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.AttachedItemOnMessage], error)

	// GetAttachedItemsOnMessageWithMimeTypeFunc mocks the GetAttachedItemsOnMessageWithMimeType method.
	GetAttachedItemsOnMessageWithMimeTypeFunc func(ctx context.Context, messageID uuid.UUID, where parameter.WhereAttachedItemOnMessageParam, order parameter.AttachedItemOnMessageOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.AttachedItemOnMessageWithMimeType], error)

	// GetAttachedItemsOnMessageWithMimeTypeWithSdFunc mocks the GetAttachedItemsOnMessageWithMimeTypeWithSd method.
	GetAttachedItemsOnMessageWithMimeTypeWithSdFunc func(ctx context.Context, sd Sd, messageID uuid.UUID, where parameter.WhereAttachedItemOnMessageParam, order parameter.AttachedItemOnMessageOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.AttachedItemOnMessageWithMimeType], error)

	// GetAttachedItemsOnMessageWithSdFunc mocks the GetAttachedItemsOnMessageWithSd method.
	GetAttachedItemsOnMessageWithSdFunc func(ctx context.Context, sd Sd, messageID uuid.UUID, where parameter.WhereAttachedItemOnMessageParam, order parameter.AttachedItemOnMessageOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.AttachedItemOnMessage], error)

	// GetAttendStatusesFunc mocks the GetAttendStatuses method.
	GetAttendStatusesFunc func(ctx context.Context, where parameter.WhereAttendStatusParam, order parameter.AttendStatusOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.AttendStatus], error)

	// GetAttendStatusesWithSdFunc mocks the GetAttendStatusesWithSd method.
	GetAttendStatusesWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereAttendStatusParam, order parameter.AttendStatusOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.AttendStatus], error)

	// GetAttendanceTypesFunc mocks the GetAttendanceTypes method.
	GetAttendanceTypesFunc func(ctx context.Context, where parameter.WhereAttendanceTypeParam, order parameter.AttendanceTypeOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.AttendanceType], error)

	// GetAttendanceTypesWithSdFunc mocks the GetAttendanceTypesWithSd method.
	GetAttendanceTypesWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereAttendanceTypeParam, order parameter.AttendanceTypeOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.AttendanceType], error)

	// GetChatRoomActionTypesFunc mocks the GetChatRoomActionTypes method.
	GetChatRoomActionTypesFunc func(ctx context.Context, where parameter.WhereChatRoomActionTypeParam, order parameter.ChatRoomActionTypeOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoomActionType], error)

	// GetChatRoomActionTypesWithSdFunc mocks the GetChatRoomActionTypesWithSd method.
	GetChatRoomActionTypesWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereChatRoomActionTypeParam, order parameter.ChatRoomActionTypeOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoomActionType], error)

	// GetChatRoomActionsOnChatRoomFunc mocks the GetChatRoomActionsOnChatRoom method.
	GetChatRoomActionsOnChatRoomFunc func(ctx context.Context, chatRoomID uuid.UUID, where parameter.WhereChatRoomActionParam, order parameter.ChatRoomActionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoomAction], error)

	// GetChatRoomActionsOnChatRoomWithSdFunc mocks the GetChatRoomActionsOnChatRoomWithSd method.
	GetChatRoomActionsOnChatRoomWithSdFunc func(ctx context.Context, sd Sd, chatRoomID uuid.UUID, where parameter.WhereChatRoomActionParam, order parameter.ChatRoomActionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoomAction], error)

	// GetChatRoomActionsWithDetailOnChatRoomFunc mocks the GetChatRoomActionsWithDetailOnChatRoom method.
	GetChatRoomActionsWithDetailOnChatRoomFunc func(ctx context.Context, chatRoomID uuid.UUID, where parameter.WhereChatRoomActionParam, order parameter.ChatRoomActionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoomActionWithDetail], error)

	// GetChatRoomActionsWithDetailOnChatRoomWithSdFunc mocks the GetChatRoomActionsWithDetailOnChatRoomWithSd method.
	GetChatRoomActionsWithDetailOnChatRoomWithSdFunc func(ctx context.Context, sd Sd, chatRoomID uuid.UUID, where parameter.WhereChatRoomActionParam, order parameter.ChatRoomActionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoomActionWithDetail], error)

	// GetChatRoomAddMemberActionsOnChatRoomFunc mocks the GetChatRoomAddMemberActionsOnChatRoom method.
	GetChatRoomAddMemberActionsOnChatRoomFunc func(ctx context.Context, chatRoomID uuid.UUID, where parameter.WhereChatRoomAddMemberActionParam, order parameter.ChatRoomAddMemberActionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoomAddMemberActionWithAddedBy], error)

	// GetChatRoomAddMemberActionsOnChatRoomWithSdFunc mocks the GetChatRoomAddMemberActionsOnChatRoomWithSd method.
	GetChatRoomAddMemberActionsOnChatRoomWithSdFunc func(ctx context.Context, sd Sd, chatRoomID uuid.UUID, where parameter.WhereChatRoomAddMemberActionParam, order parameter.ChatRoomAddMemberActionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoomAddMemberActionWithAddedBy], error)

	// GetChatRoomCreateActionsOnChatRoomFunc mocks the GetChatRoomCreateActionsOnChatRoom method.
	GetChatRoomCreateActionsOnChatRoomFunc func(ctx context.Context, chatRoomID uuid.UUID, where parameter.WhereChatRoomCreateActionParam, order parameter.ChatRoomCreateActionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoomCreateActionWithCreatedBy], error)

	// GetChatRoomCreateActionsOnChatRoomWithSdFunc mocks the GetChatRoomCreateActionsOnChatRoomWithSd method.
	GetChatRoomCreateActionsOnChatRoomWithSdFunc func(ctx context.Context, sd Sd, chatRoomID uuid.UUID, where parameter.WhereChatRoomCreateActionParam, order parameter.ChatRoomCreateActionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoomCreateActionWithCreatedBy], error)

	// GetChatRoomDeleteMessageActionsOnChatRoomFunc mocks the GetChatRoomDeleteMessageActionsOnChatRoom method.
	GetChatRoomDeleteMessageActionsOnChatRoomFunc func(ctx context.Context, chatRoomID uuid.UUID, where parameter.WhereChatRoomDeleteMessageActionParam, order parameter.ChatRoomDeleteMessageActionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoomDeleteMessageActionWithDeletedBy], error)

	// GetChatRoomDeleteMessageActionsOnChatRoomWithSdFunc mocks the GetChatRoomDeleteMessageActionsOnChatRoomWithSd method.
	GetChatRoomDeleteMessageActionsOnChatRoomWithSdFunc func(ctx context.Context, sd Sd, chatRoomID uuid.UUID, where parameter.WhereChatRoomDeleteMessageActionParam, order parameter.ChatRoomDeleteMessageActionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoomDeleteMessageActionWithDeletedBy], error)

	// GetChatRoomRemoveMemberActionsOnChatRoomFunc mocks the GetChatRoomRemoveMemberActionsOnChatRoom method.
	GetChatRoomRemoveMemberActionsOnChatRoomFunc func(ctx context.Context, chatRoomID uuid.UUID, where parameter.WhereChatRoomRemoveMemberActionParam, order parameter.ChatRoomRemoveMemberActionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoomRemoveMemberActionWithRemovedBy], error)

	// GetChatRoomRemoveMemberActionsOnChatRoomWithSdFunc mocks the GetChatRoomRemoveMemberActionsOnChatRoomWithSd method.
	GetChatRoomRemoveMemberActionsOnChatRoomWithSdFunc func(ctx context.Context, sd Sd, chatRoomID uuid.UUID, where parameter.WhereChatRoomRemoveMemberActionParam, order parameter.ChatRoomRemoveMemberActionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoomRemoveMemberActionWithRemovedBy], error)

	// GetChatRoomUpdateNameActionsOnChatRoomFunc mocks the GetChatRoomUpdateNameActionsOnChatRoom method.
	GetChatRoomUpdateNameActionsOnChatRoomFunc func(ctx context.Context, chatRoomID uuid.UUID, where parameter.WhereChatRoomUpdateNameActionParam, order parameter.ChatRoomUpdateNameActionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoomUpdateNameActionWithUpdatedBy], error)

	// GetChatRoomUpdateNameActionsOnChatRoomWithSdFunc mocks the GetChatRoomUpdateNameActionsOnChatRoomWithSd method.
	GetChatRoomUpdateNameActionsOnChatRoomWithSdFunc func(ctx context.Context, sd Sd, chatRoomID uuid.UUID, where parameter.WhereChatRoomUpdateNameActionParam, order parameter.ChatRoomUpdateNameActionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoomUpdateNameActionWithUpdatedBy], error)

	// GetChatRoomWithdrawActionsOnChatRoomFunc mocks the GetChatRoomWithdrawActionsOnChatRoom method.
	GetChatRoomWithdrawActionsOnChatRoomFunc func(ctx context.Context, chatRoomID uuid.UUID, where parameter.WhereChatRoomWithdrawActionParam, order parameter.ChatRoomWithdrawActionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoomWithdrawActionWithMember], error)

	// GetChatRoomWithdrawActionsOnChatRoomWithSdFunc mocks the GetChatRoomWithdrawActionsOnChatRoomWithSd method.
	GetChatRoomWithdrawActionsOnChatRoomWithSdFunc func(ctx context.Context, sd Sd, chatRoomID uuid.UUID, where parameter.WhereChatRoomWithdrawActionParam, order parameter.ChatRoomWithdrawActionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoomWithdrawActionWithMember], error)

	// GetChatRoomsFunc mocks the GetChatRooms method.
	GetChatRoomsFunc func(ctx context.Context, where parameter.WhereChatRoomParam, order parameter.ChatRoomOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoom], error)

	// GetChatRoomsOnMemberFunc mocks the GetChatRoomsOnMember method.
	GetChatRoomsOnMemberFunc func(ctx context.Context, memberID uuid.UUID, where parameter.WhereChatRoomOnMemberParam, order parameter.ChatRoomOnMemberOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoomOnMember], error)

	// GetChatRoomsOnMemberWithSdFunc mocks the GetChatRoomsOnMemberWithSd method.
	GetChatRoomsOnMemberWithSdFunc func(ctx context.Context, sd Sd, memberID uuid.UUID, where parameter.WhereChatRoomOnMemberParam, order parameter.ChatRoomOnMemberOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoomOnMember], error)

	// GetChatRoomsWithCoverImageFunc mocks the GetChatRoomsWithCoverImage method.
	GetChatRoomsWithCoverImageFunc func(ctx context.Context, where parameter.WhereChatRoomParam, order parameter.ChatRoomOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoomWithCoverImage], error)

	// GetChatRoomsWithCoverImageWithSdFunc mocks the GetChatRoomsWithCoverImageWithSd method.
	GetChatRoomsWithCoverImageWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereChatRoomParam, order parameter.ChatRoomOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoomWithCoverImage], error)

	// GetChatRoomsWithSdFunc mocks the GetChatRoomsWithSd method.
	GetChatRoomsWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereChatRoomParam, order parameter.ChatRoomOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoom], error)

	// GetEventTypesFunc mocks the GetEventTypes method.
	GetEventTypesFunc func(ctx context.Context, where parameter.WhereEventTypeParam, order parameter.EventTypeOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.EventType], error)

	// GetEventTypesWithSdFunc mocks the GetEventTypesWithSd method.
	GetEventTypesWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereEventTypeParam, order parameter.EventTypeOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.EventType], error)

	// GetFilesFunc mocks the GetFiles method.
	GetFilesFunc func(ctx context.Context, where parameter.WhereFileParam, order parameter.FileOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.File], error)

	// GetFilesWithAttachableItemFunc mocks the GetFilesWithAttachableItem method.
	GetFilesWithAttachableItemFunc func(ctx context.Context, where parameter.WhereFileParam, order parameter.FileOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.FileWithAttachableItem], error)

	// GetFilesWithAttachableItemWithSdFunc mocks the GetFilesWithAttachableItemWithSd method.
	GetFilesWithAttachableItemWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereFileParam, order parameter.FileOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.FileWithAttachableItem], error)

	// GetFilesWithSdFunc mocks the GetFilesWithSd method.
	GetFilesWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereFileParam, order parameter.FileOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.File], error)

	// GetGradesFunc mocks the GetGrades method.
	GetGradesFunc func(ctx context.Context, where parameter.WhereGradeParam, order parameter.GradeOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Grade], error)

	// GetGradesWithOrganizationFunc mocks the GetGradesWithOrganization method.
	GetGradesWithOrganizationFunc func(ctx context.Context, where parameter.WhereGradeParam, order parameter.GradeOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.GradeWithOrganization], error)

	// GetGradesWithOrganizationWithSdFunc mocks the GetGradesWithOrganizationWithSd method.
	GetGradesWithOrganizationWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereGradeParam, order parameter.GradeOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.GradeWithOrganization], error)

	// GetGradesWithSdFunc mocks the GetGradesWithSd method.
	GetGradesWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereGradeParam, order parameter.GradeOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Grade], error)

	// GetGroupsFunc mocks the GetGroups method.
	GetGroupsFunc func(ctx context.Context, where parameter.WhereGroupParam, order parameter.GroupOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Group], error)

	// GetGroupsWithOrganizationFunc mocks the GetGroupsWithOrganization method.
	GetGroupsWithOrganizationFunc func(ctx context.Context, where parameter.WhereGroupParam, order parameter.GroupOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.GroupWithOrganization], error)

	// GetGroupsWithOrganizationWithSdFunc mocks the GetGroupsWithOrganizationWithSd method.
	GetGroupsWithOrganizationWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereGroupParam, order parameter.GroupOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.GroupWithOrganization], error)

	// GetGroupsWithSdFunc mocks the GetGroupsWithSd method.
	GetGroupsWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereGroupParam, order parameter.GroupOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Group], error)

	// GetImagesFunc mocks the GetImages method.
	GetImagesFunc func(ctx context.Context, where parameter.WhereImageParam, order parameter.ImageOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Image], error)

	// GetImagesWithAttachableItemFunc mocks the GetImagesWithAttachableItem method.
	GetImagesWithAttachableItemFunc func(ctx context.Context, where parameter.WhereImageParam, order parameter.ImageOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ImageWithAttachableItem], error)

	// GetImagesWithAttachableItemWithSdFunc mocks the GetImagesWithAttachableItemWithSd method.
	GetImagesWithAttachableItemWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereImageParam, order parameter.ImageOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ImageWithAttachableItem], error)

	// GetImagesWithSdFunc mocks the GetImagesWithSd method.
	GetImagesWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereImageParam, order parameter.ImageOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Image], error)

	// GetMembersFunc mocks the GetMembers method.
	GetMembersFunc func(ctx context.Context, where parameter.WhereMemberParam, order parameter.MemberOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Member], error)

	// GetMembersOnChatRoomFunc mocks the GetMembersOnChatRoom method.
	GetMembersOnChatRoomFunc func(ctx context.Context, chatRoomID uuid.UUID, where parameter.WhereMemberOnChatRoomParam, order parameter.MemberOnChatRoomOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MemberOnChatRoom], error)

	// GetMembersOnChatRoomAddMemberActionFunc mocks the GetMembersOnChatRoomAddMemberAction method.
	GetMembersOnChatRoomAddMemberActionFunc func(ctx context.Context, chatRoomAddMemberActionID uuid.UUID, where parameter.WhereMemberOnChatRoomAddMemberActionParam, order parameter.MemberOnChatRoomAddMemberActionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MemberOnChatRoomAddMemberAction], error)

	// GetMembersOnChatRoomAddMemberActionWithSdFunc mocks the GetMembersOnChatRoomAddMemberActionWithSd method.
	GetMembersOnChatRoomAddMemberActionWithSdFunc func(ctx context.Context, sd Sd, chatRoomAddMemberActionID uuid.UUID, where parameter.WhereMemberOnChatRoomAddMemberActionParam, order parameter.MemberOnChatRoomAddMemberActionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MemberOnChatRoomAddMemberAction], error)

	// GetMembersOnChatRoomRemoveMemberActionFunc mocks the GetMembersOnChatRoomRemoveMemberAction method.
	GetMembersOnChatRoomRemoveMemberActionFunc func(ctx context.Context, chatRoomRemoveMemberActionID uuid.UUID, where parameter.WhereMemberOnChatRoomRemoveMemberActionParam, order parameter.MemberOnChatRoomRemoveMemberActionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MemberOnChatRoomRemoveMemberAction], error)

	// GetMembersOnChatRoomRemoveMemberActionWithSdFunc mocks the GetMembersOnChatRoomRemoveMemberActionWithSd method.
	GetMembersOnChatRoomRemoveMemberActionWithSdFunc func(ctx context.Context, sd Sd, chatRoomRemoveMemberActionID uuid.UUID, where parameter.WhereMemberOnChatRoomRemoveMemberActionParam, order parameter.MemberOnChatRoomRemoveMemberActionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MemberOnChatRoomRemoveMemberAction], error)

	// GetMembersOnChatRoomWithSdFunc mocks the GetMembersOnChatRoomWithSd method.
	GetMembersOnChatRoomWithSdFunc func(ctx context.Context, sd Sd, chatRoomID uuid.UUID, where parameter.WhereMemberOnChatRoomParam, order parameter.MemberOnChatRoomOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MemberOnChatRoom], error)

	// GetMembersOnOrganizationFunc mocks the GetMembersOnOrganization method.
	GetMembersOnOrganizationFunc func(ctx context.Context, organizationID uuid.UUID, where parameter.WhereMemberOnOrganizationParam, order parameter.MemberOnOrganizationOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MemberOnOrganization], error)

	// GetMembersOnOrganizationWithSdFunc mocks the GetMembersOnOrganizationWithSd method.
	GetMembersOnOrganizationWithSdFunc func(ctx context.Context, sd Sd, organizationID uuid.UUID, where parameter.WhereMemberOnOrganizationParam, order parameter.MemberOnOrganizationOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MemberOnOrganization], error)

	// GetMembersWithAttendStatusFunc mocks the GetMembersWithAttendStatus method.
	GetMembersWithAttendStatusFunc func(ctx context.Context, where parameter.WhereMemberParam, order parameter.MemberOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MemberWithAttendStatus], error)

	// GetMembersWithAttendStatusWithSdFunc mocks the GetMembersWithAttendStatusWithSd method.
	GetMembersWithAttendStatusWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereMemberParam, order parameter.MemberOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MemberWithAttendStatus], error)

	// GetMembersWithCrewFunc mocks the GetMembersWithCrew method.
	GetMembersWithCrewFunc func(ctx context.Context, where parameter.WhereMemberParam, order parameter.MemberOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MemberWithCrew], error)

	// GetMembersWithCrewWithSdFunc mocks the GetMembersWithCrewWithSd method.
	GetMembersWithCrewWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereMemberParam, order parameter.MemberOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MemberWithCrew], error)

	// GetMembersWithDetailFunc mocks the GetMembersWithDetail method.
	GetMembersWithDetailFunc func(ctx context.Context, where parameter.WhereMemberParam, order parameter.MemberOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MemberWithDetail], error)

	// GetMembersWithDetailWithSdFunc mocks the GetMembersWithDetailWithSd method.
	GetMembersWithDetailWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereMemberParam, order parameter.MemberOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MemberWithDetail], error)

	// GetMembersWithPersonalOrganizationFunc mocks the GetMembersWithPersonalOrganization method.
	GetMembersWithPersonalOrganizationFunc func(ctx context.Context, where parameter.WhereMemberParam, order parameter.MemberOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MemberWithPersonalOrganization], error)

	// GetMembersWithPersonalOrganizationWithSdFunc mocks the GetMembersWithPersonalOrganizationWithSd method.
	GetMembersWithPersonalOrganizationWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereMemberParam, order parameter.MemberOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MemberWithPersonalOrganization], error)

	// GetMembersWithProfileImageFunc mocks the GetMembersWithProfileImage method.
	GetMembersWithProfileImageFunc func(ctx context.Context, where parameter.WhereMemberParam, order parameter.MemberOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MemberWithProfileImage], error)

	// GetMembersWithProfileImageWithSdFunc mocks the GetMembersWithProfileImageWithSd method.
	GetMembersWithProfileImageWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereMemberParam, order parameter.MemberOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MemberWithProfileImage], error)

	// GetMembersWithRoleFunc mocks the GetMembersWithRole method.
	GetMembersWithRoleFunc func(ctx context.Context, where parameter.WhereMemberParam, order parameter.MemberOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MemberWithRole], error)

	// GetMembersWithRoleWithSdFunc mocks the GetMembersWithRoleWithSd method.
	GetMembersWithRoleWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereMemberParam, order parameter.MemberOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MemberWithRole], error)

	// GetMembersWithSdFunc mocks the GetMembersWithSd method.
	GetMembersWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereMemberParam, order parameter.MemberOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Member], error)

	// GetMessagesFunc mocks the GetMessages method.
	GetMessagesFunc func(ctx context.Context, where parameter.WhereMessageParam, order parameter.MessageOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Message], error)

	// GetMessagesWithChatRoomFunc mocks the GetMessagesWithChatRoom method.
	GetMessagesWithChatRoomFunc func(ctx context.Context, where parameter.WhereMessageParam, order parameter.MessageOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MessageWithChatRoom], error)

	// GetMessagesWithChatRoomWithSdFunc mocks the GetMessagesWithChatRoomWithSd method.
	GetMessagesWithChatRoomWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereMessageParam, order parameter.MessageOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MessageWithChatRoom], error)

	// GetMessagesWithSdFunc mocks the GetMessagesWithSd method.
	GetMessagesWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereMessageParam, order parameter.MessageOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Message], error)

	// GetMessagesWithSenderFunc mocks the GetMessagesWithSender method.
	GetMessagesWithSenderFunc func(ctx context.Context, where parameter.WhereMessageParam, order parameter.MessageOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MessageWithSender], error)

	// GetMessagesWithSenderWithSdFunc mocks the GetMessagesWithSenderWithSd method.
	GetMessagesWithSenderWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereMessageParam, order parameter.MessageOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MessageWithSender], error)

	// GetMimeTypesFunc mocks the GetMimeTypes method.
	GetMimeTypesFunc func(ctx context.Context, where parameter.WhereMimeTypeParam, order parameter.MimeTypeOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MimeType], error)

	// GetMimeTypesWithSdFunc mocks the GetMimeTypesWithSd method.
	GetMimeTypesWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereMimeTypeParam, order parameter.MimeTypeOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MimeType], error)

	// GetOrganizationsFunc mocks the GetOrganizations method.
	GetOrganizationsFunc func(ctx context.Context, where parameter.WhereOrganizationParam, order parameter.OrganizationOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Organization], error)

	// GetOrganizationsOnMemberFunc mocks the GetOrganizationsOnMember method.
	GetOrganizationsOnMemberFunc func(ctx context.Context, memberID uuid.UUID, where parameter.WhereOrganizationOnMemberParam, order parameter.OrganizationOnMemberOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.OrganizationOnMember], error)

	// GetOrganizationsOnMemberWithSdFunc mocks the GetOrganizationsOnMemberWithSd method.
	GetOrganizationsOnMemberWithSdFunc func(ctx context.Context, sd Sd, memberID uuid.UUID, where parameter.WhereOrganizationOnMemberParam, order parameter.OrganizationOnMemberOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.OrganizationOnMember], error)

	// GetOrganizationsWithChatRoomFunc mocks the GetOrganizationsWithChatRoom method.
	GetOrganizationsWithChatRoomFunc func(ctx context.Context, where parameter.WhereOrganizationParam, order parameter.OrganizationOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.OrganizationWithChatRoom], error)

	// GetOrganizationsWithChatRoomAndDetailFunc mocks the GetOrganizationsWithChatRoomAndDetail method.
	GetOrganizationsWithChatRoomAndDetailFunc func(ctx context.Context, where parameter.WhereOrganizationParam, order parameter.OrganizationOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.OrganizationWithChatRoomAndDetail], error)

	// GetOrganizationsWithChatRoomAndDetailWithSdFunc mocks the GetOrganizationsWithChatRoomAndDetailWithSd method.
	GetOrganizationsWithChatRoomAndDetailWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereOrganizationParam, order parameter.OrganizationOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.OrganizationWithChatRoomAndDetail], error)

	// GetOrganizationsWithChatRoomWithSdFunc mocks the GetOrganizationsWithChatRoomWithSd method.
	GetOrganizationsWithChatRoomWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereOrganizationParam, order parameter.OrganizationOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.OrganizationWithChatRoom], error)

	// GetOrganizationsWithDetailFunc mocks the GetOrganizationsWithDetail method.
	GetOrganizationsWithDetailFunc func(ctx context.Context, where parameter.WhereOrganizationParam, order parameter.OrganizationOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.OrganizationWithDetail], error)

	// GetOrganizationsWithDetailWithSdFunc mocks the GetOrganizationsWithDetailWithSd method.
	GetOrganizationsWithDetailWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereOrganizationParam, order parameter.OrganizationOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.OrganizationWithDetail], error)

	// GetOrganizationsWithSdFunc mocks the GetOrganizationsWithSd method.
	GetOrganizationsWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereOrganizationParam, order parameter.OrganizationOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Organization], error)

	// GetPermissionCategoriesFunc mocks the GetPermissionCategories method.
	GetPermissionCategoriesFunc func(ctx context.Context, where parameter.WherePermissionCategoryParam, order parameter.PermissionCategoryOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.PermissionCategory], error)

	// GetPermissionCategoriesWithSdFunc mocks the GetPermissionCategoriesWithSd method.
	GetPermissionCategoriesWithSdFunc func(ctx context.Context, sd Sd, where parameter.WherePermissionCategoryParam, order parameter.PermissionCategoryOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.PermissionCategory], error)

	// GetPermissionsFunc mocks the GetPermissions method.
	GetPermissionsFunc func(ctx context.Context, where parameter.WherePermissionParam, order parameter.PermissionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Permission], error)

	// GetPermissionsWithCategoryFunc mocks the GetPermissionsWithCategory method.
	GetPermissionsWithCategoryFunc func(ctx context.Context, where parameter.WherePermissionParam, order parameter.PermissionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.PermissionWithCategory], error)

	// GetPermissionsWithCategoryWithSdFunc mocks the GetPermissionsWithCategoryWithSd method.
	GetPermissionsWithCategoryWithSdFunc func(ctx context.Context, sd Sd, where parameter.WherePermissionParam, order parameter.PermissionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.PermissionWithCategory], error)

	// GetPermissionsWithSdFunc mocks the GetPermissionsWithSd method.
	GetPermissionsWithSdFunc func(ctx context.Context, sd Sd, where parameter.WherePermissionParam, order parameter.PermissionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Permission], error)

	// GetPluralAbsencesFunc mocks the GetPluralAbsences method.
	GetPluralAbsencesFunc func(ctx context.Context, ids []uuid.UUID, order parameter.AbsenceOrderMethod, np NumberedPaginationParam) (ListResult[entity.Absence], error)

	// GetPluralAbsencesWithSdFunc mocks the GetPluralAbsencesWithSd method.
	GetPluralAbsencesWithSdFunc func(ctx context.Context, sd Sd, ids []uuid.UUID, order parameter.AbsenceOrderMethod, np NumberedPaginationParam) (ListResult[entity.Absence], error)

	// GetPluralAttachableItemsFunc mocks the GetPluralAttachableItems method.
	GetPluralAttachableItemsFunc func(ctx context.Context, attachableItemIDs []uuid.UUID, order parameter.AttachableItemOrderMethod, np NumberedPaginationParam) (ListResult[entity.AttachableItemWithContent], error)

	// GetPluralAttachableItemsWithMimeTypeFunc mocks the GetPluralAttachableItemsWithMimeType method.
	GetPluralAttachableItemsWithMimeTypeFunc func(ctx context.Context, attachableItemIDs []uuid.UUID, order parameter.AttachableItemOrderMethod, np NumberedPaginationParam) (ListResult[entity.AttachableItemWithMimeType], error)

	// GetPluralAttachableItemsWithMimeTypeWithSdFunc mocks the GetPluralAttachableItemsWithMimeTypeWithSd method.
	GetPluralAttachableItemsWithMimeTypeWithSdFunc func(ctx context.Context, sd Sd, attachableItemIDs []uuid.UUID, order parameter.AttachableItemOrderMethod, np NumberedPaginationParam) (ListResult[entity.AttachableItemWithMimeType], error)

	// GetPluralAttachableItemsWithSdFunc mocks the GetPluralAttachableItemsWithSd method.
	GetPluralAttachableItemsWithSdFunc func(ctx context.Context, sd Sd, attachableItemIDs []uuid.UUID, order parameter.AttachableItemOrderMethod, np NumberedPaginationParam) (ListResult[entity.AttachableItemWithContent], error)

	// GetPluralAttachedItemsOnMessageFunc mocks the GetPluralAttachedItemsOnMessage method.
	GetPluralAttachedItemsOnMessageFunc func(ctx context.Context, messageIDs []uuid.UUID, order parameter.AttachedItemOnMessageOrderMethod, np NumberedPaginationParam) (ListResult[entity.AttachedItemOnMessage], error)

	// GetPluralAttachedItemsOnMessageWithMimeTypeFunc mocks the GetPluralAttachedItemsOnMessageWithMimeType method.
	GetPluralAttachedItemsOnMessageWithMimeTypeFunc func(ctx context.Context, messageIDs []uuid.UUID, order parameter.AttachedItemOnMessageOrderMethod, np NumberedPaginationParam) (ListResult[entity.AttachedItemOnMessageWithMimeType], error)

	// GetPluralAttachedItemsOnMessageWithMimeTypeWithSdFunc mocks the GetPluralAttachedItemsOnMessageWithMimeTypeWithSd method.
	GetPluralAttachedItemsOnMessageWithMimeTypeWithSdFunc func(ctx context.Context, sd Sd, messageIDs []uuid.UUID, order parameter.AttachedItemOnMessageOrderMethod, np NumberedPaginationParam) (ListResult[entity.AttachedItemOnMessageWithMimeType], error)

	// GetPluralAttachedItemsOnMessageWithSdFunc mocks the GetPluralAttachedItemsOnMessageWithSd method.
	GetPluralAttachedItemsOnMessageWithSdFunc func(ctx context.Context, sd Sd, messageIDs []uuid.UUID, order parameter.AttachedItemOnMessageOrderMethod, np NumberedPaginationParam) (ListResult[entity.AttachedItemOnMessage], error)

	// GetPluralAttendStatusesFunc mocks the GetPluralAttendStatuses method.
	GetPluralAttendStatusesFunc func(ctx context.Context, attendStatusIDs []uuid.UUID, order parameter.AttendStatusOrderMethod, np NumberedPaginationParam) (ListResult[entity.AttendStatus], error)

	// GetPluralAttendStatusesWithSdFunc mocks the GetPluralAttendStatusesWithSd method.
	GetPluralAttendStatusesWithSdFunc func(ctx context.Context, sd Sd, attendStatusIDs []uuid.UUID, order parameter.AttendStatusOrderMethod, np NumberedPaginationParam) (ListResult[entity.AttendStatus], error)

	// GetPluralAttendanceTypesFunc mocks the GetPluralAttendanceTypes method.
	GetPluralAttendanceTypesFunc func(ctx context.Context, attendanceTypeIDs []uuid.UUID, order parameter.AttendanceTypeOrderMethod, np NumberedPaginationParam) (ListResult[entity.AttendanceType], error)

	// GetPluralAttendanceTypesWithSdFunc mocks the GetPluralAttendanceTypesWithSd method.
	GetPluralAttendanceTypesWithSdFunc func(ctx context.Context, sd Sd, attendanceTypeIDs []uuid.UUID, order parameter.AttendanceTypeOrderMethod, np NumberedPaginationParam) (ListResult[entity.AttendanceType], error)

	// GetPluralChatRoomActionTypesFunc mocks the GetPluralChatRoomActionTypes method.
	GetPluralChatRoomActionTypesFunc func(ctx context.Context, recordTypeIDs []uuid.UUID, order parameter.ChatRoomActionTypeOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomActionType], error)

	// GetPluralChatRoomActionTypesWithSdFunc mocks the GetPluralChatRoomActionTypesWithSd method.
	GetPluralChatRoomActionTypesWithSdFunc func(ctx context.Context, sd Sd, recordTypeIDs []uuid.UUID, order parameter.ChatRoomActionTypeOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomActionType], error)

	// GetPluralChatRoomActionsFunc mocks the GetPluralChatRoomActions method.
	GetPluralChatRoomActionsFunc func(ctx context.Context, chatRoomActionIDs []uuid.UUID, order parameter.ChatRoomActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomAction], error)

	// GetPluralChatRoomActionsWithDetailFunc mocks the GetPluralChatRoomActionsWithDetail method.
	GetPluralChatRoomActionsWithDetailFunc func(ctx context.Context, chatRoomActionIDs []uuid.UUID, order parameter.ChatRoomActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomActionWithDetail], error)

	// GetPluralChatRoomActionsWithDetailWithSdFunc mocks the GetPluralChatRoomActionsWithDetailWithSd method.
	GetPluralChatRoomActionsWithDetailWithSdFunc func(ctx context.Context, sd Sd, chatRoomActionIDs []uuid.UUID, order parameter.ChatRoomActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomActionWithDetail], error)

	// GetPluralChatRoomActionsWithSdFunc mocks the GetPluralChatRoomActionsWithSd method.
	GetPluralChatRoomActionsWithSdFunc func(ctx context.Context, sd Sd, chatRoomActionIDs []uuid.UUID, order parameter.ChatRoomActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomAction], error)

	// GetPluralChatRoomAddMemberActionsFunc mocks the GetPluralChatRoomAddMemberActions method.
	GetPluralChatRoomAddMemberActionsFunc func(ctx context.Context, chatRoomAddMemberActionIDs []uuid.UUID, order parameter.ChatRoomAddMemberActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomAddMemberActionWithAddedBy], error)

	// GetPluralChatRoomAddMemberActionsByChatRoomActionIDsFunc mocks the GetPluralChatRoomAddMemberActionsByChatRoomActionIDs method.
	GetPluralChatRoomAddMemberActionsByChatRoomActionIDsFunc func(ctx context.Context, chatRoomActionIDs []uuid.UUID, order parameter.ChatRoomAddMemberActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomAddMemberActionWithAddedBy], error)

	// GetPluralChatRoomAddMemberActionsByChatRoomActionIDsWithSdFunc mocks the GetPluralChatRoomAddMemberActionsByChatRoomActionIDsWithSd method.
	GetPluralChatRoomAddMemberActionsByChatRoomActionIDsWithSdFunc func(ctx context.Context, sd Sd, chatRoomActionIDs []uuid.UUID, order parameter.ChatRoomAddMemberActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomAddMemberActionWithAddedBy], error)

	// GetPluralChatRoomAddMemberActionsWithSdFunc mocks the GetPluralChatRoomAddMemberActionsWithSd method.
	GetPluralChatRoomAddMemberActionsWithSdFunc func(ctx context.Context, sd Sd, chatRoomAddMemberActionIDs []uuid.UUID, order parameter.ChatRoomAddMemberActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomAddMemberActionWithAddedBy], error)

	// GetPluralChatRoomCreateActionsFunc mocks the GetPluralChatRoomCreateActions method.
	GetPluralChatRoomCreateActionsFunc func(ctx context.Context, chatRoomCreateActionIDs []uuid.UUID, order parameter.ChatRoomCreateActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomCreateActionWithCreatedBy], error)

	// GetPluralChatRoomCreateActionsByChatRoomActionIDsFunc mocks the GetPluralChatRoomCreateActionsByChatRoomActionIDs method.
	GetPluralChatRoomCreateActionsByChatRoomActionIDsFunc func(ctx context.Context, chatRoomActionIDs []uuid.UUID, order parameter.ChatRoomCreateActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomCreateActionWithCreatedBy], error)

	// GetPluralChatRoomCreateActionsByChatRoomActionIDsWithSdFunc mocks the GetPluralChatRoomCreateActionsByChatRoomActionIDsWithSd method.
	GetPluralChatRoomCreateActionsByChatRoomActionIDsWithSdFunc func(ctx context.Context, sd Sd, chatRoomActionIDs []uuid.UUID, order parameter.ChatRoomCreateActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomCreateActionWithCreatedBy], error)

	// GetPluralChatRoomCreateActionsWithSdFunc mocks the GetPluralChatRoomCreateActionsWithSd method.
	GetPluralChatRoomCreateActionsWithSdFunc func(ctx context.Context, sd Sd, chatRoomCreateActionIDs []uuid.UUID, order parameter.ChatRoomCreateActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomCreateActionWithCreatedBy], error)

	// GetPluralChatRoomDeleteMessageActionsFunc mocks the GetPluralChatRoomDeleteMessageActions method.
	GetPluralChatRoomDeleteMessageActionsFunc func(ctx context.Context, chatRoomDeleteMessageActionIDs []uuid.UUID, order parameter.ChatRoomDeleteMessageActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomDeleteMessageActionWithDeletedBy], error)

	// GetPluralChatRoomDeleteMessageActionsByChatRoomActionIDsFunc mocks the GetPluralChatRoomDeleteMessageActionsByChatRoomActionIDs method.
	GetPluralChatRoomDeleteMessageActionsByChatRoomActionIDsFunc func(ctx context.Context, chatRoomActionIDs []uuid.UUID, order parameter.ChatRoomDeleteMessageActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomDeleteMessageActionWithDeletedBy], error)

	// GetPluralChatRoomDeleteMessageActionsByChatRoomActionIDsWithSdFunc mocks the GetPluralChatRoomDeleteMessageActionsByChatRoomActionIDsWithSd method.
	GetPluralChatRoomDeleteMessageActionsByChatRoomActionIDsWithSdFunc func(ctx context.Context, sd Sd, chatRoomActionIDs []uuid.UUID, order parameter.ChatRoomDeleteMessageActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomDeleteMessageActionWithDeletedBy], error)

	// GetPluralChatRoomDeleteMessageActionsWithSdFunc mocks the GetPluralChatRoomDeleteMessageActionsWithSd method.
	GetPluralChatRoomDeleteMessageActionsWithSdFunc func(ctx context.Context, sd Sd, chatRoomDeleteMessageActionIDs []uuid.UUID, order parameter.ChatRoomDeleteMessageActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomDeleteMessageActionWithDeletedBy], error)

	// GetPluralChatRoomRemoveMemberActionsFunc mocks the GetPluralChatRoomRemoveMemberActions method.
	GetPluralChatRoomRemoveMemberActionsFunc func(ctx context.Context, chatRoomRemoveMemberActionIDs []uuid.UUID, order parameter.ChatRoomRemoveMemberActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomRemoveMemberActionWithRemovedBy], error)

	// GetPluralChatRoomRemoveMemberActionsByChatRoomActionIDsFunc mocks the GetPluralChatRoomRemoveMemberActionsByChatRoomActionIDs method.
	GetPluralChatRoomRemoveMemberActionsByChatRoomActionIDsFunc func(ctx context.Context, chatRoomActionIDs []uuid.UUID, order parameter.ChatRoomRemoveMemberActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomRemoveMemberActionWithRemovedBy], error)

	// GetPluralChatRoomRemoveMemberActionsByChatRoomActionIDsWithSdFunc mocks the GetPluralChatRoomRemoveMemberActionsByChatRoomActionIDsWithSd method.
	GetPluralChatRoomRemoveMemberActionsByChatRoomActionIDsWithSdFunc func(ctx context.Context, sd Sd, chatRoomActionIDs []uuid.UUID, order parameter.ChatRoomRemoveMemberActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomRemoveMemberActionWithRemovedBy], error)

	// GetPluralChatRoomRemoveMemberActionsWithSdFunc mocks the GetPluralChatRoomRemoveMemberActionsWithSd method.
	GetPluralChatRoomRemoveMemberActionsWithSdFunc func(ctx context.Context, sd Sd, chatRoomRemoveMemberActionIDs []uuid.UUID, order parameter.ChatRoomRemoveMemberActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomRemoveMemberActionWithRemovedBy], error)

	// GetPluralChatRoomUpdateNameActionsFunc mocks the GetPluralChatRoomUpdateNameActions method.
	GetPluralChatRoomUpdateNameActionsFunc func(ctx context.Context, chatRoomUpdateNameActionIDs []uuid.UUID, order parameter.ChatRoomUpdateNameActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomUpdateNameActionWithUpdatedBy], error)

	// GetPluralChatRoomUpdateNameActionsByChatRoomActionIDsFunc mocks the GetPluralChatRoomUpdateNameActionsByChatRoomActionIDs method.
	GetPluralChatRoomUpdateNameActionsByChatRoomActionIDsFunc func(ctx context.Context, chatRoomActionIDs []uuid.UUID, order parameter.ChatRoomUpdateNameActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomUpdateNameActionWithUpdatedBy], error)

	// GetPluralChatRoomUpdateNameActionsByChatRoomActionIDsWithSdFunc mocks the GetPluralChatRoomUpdateNameActionsByChatRoomActionIDsWithSd method.
	GetPluralChatRoomUpdateNameActionsByChatRoomActionIDsWithSdFunc func(ctx context.Context, sd Sd, chatRoomActionIDs []uuid.UUID, order parameter.ChatRoomUpdateNameActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomUpdateNameActionWithUpdatedBy], error)

	// GetPluralChatRoomUpdateNameActionsWithSdFunc mocks the GetPluralChatRoomUpdateNameActionsWithSd method.
	GetPluralChatRoomUpdateNameActionsWithSdFunc func(ctx context.Context, sd Sd, chatRoomUpdateNameActionIDs []uuid.UUID, order parameter.ChatRoomUpdateNameActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomUpdateNameActionWithUpdatedBy], error)

	// GetPluralChatRoomWithdrawActionsFunc mocks the GetPluralChatRoomWithdrawActions method.
	GetPluralChatRoomWithdrawActionsFunc func(ctx context.Context, chatRoomWithdrawActionIDs []uuid.UUID, order parameter.ChatRoomWithdrawActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomWithdrawActionWithMember], error)

	// GetPluralChatRoomWithdrawActionsByChatRoomActionIDsFunc mocks the GetPluralChatRoomWithdrawActionsByChatRoomActionIDs method.
	GetPluralChatRoomWithdrawActionsByChatRoomActionIDsFunc func(ctx context.Context, chatRoomActionIDs []uuid.UUID, order parameter.ChatRoomWithdrawActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomWithdrawActionWithMember], error)

	// GetPluralChatRoomWithdrawActionsByChatRoomActionIDsWithSdFunc mocks the GetPluralChatRoomWithdrawActionsByChatRoomActionIDsWithSd method.
	GetPluralChatRoomWithdrawActionsByChatRoomActionIDsWithSdFunc func(ctx context.Context, sd Sd, chatRoomActionIDs []uuid.UUID, order parameter.ChatRoomWithdrawActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomWithdrawActionWithMember], error)

	// GetPluralChatRoomWithdrawActionsWithSdFunc mocks the GetPluralChatRoomWithdrawActionsWithSd method.
	GetPluralChatRoomWithdrawActionsWithSdFunc func(ctx context.Context, sd Sd, chatRoomWithdrawActionIDs []uuid.UUID, order parameter.ChatRoomWithdrawActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomWithdrawActionWithMember], error)

	// GetPluralChatRoomsFunc mocks the GetPluralChatRooms method.
	GetPluralChatRoomsFunc func(ctx context.Context, chatRoomIDs []uuid.UUID, order parameter.ChatRoomOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoom], error)

	// GetPluralChatRoomsOnMemberFunc mocks the GetPluralChatRoomsOnMember method.
	GetPluralChatRoomsOnMemberFunc func(ctx context.Context, memberIDs []uuid.UUID, np NumberedPaginationParam, order parameter.ChatRoomOnMemberOrderMethod) (ListResult[entity.ChatRoomOnMember], error)

	// GetPluralChatRoomsOnMemberWithSdFunc mocks the GetPluralChatRoomsOnMemberWithSd method.
	GetPluralChatRoomsOnMemberWithSdFunc func(ctx context.Context, sd Sd, memberIDs []uuid.UUID, np NumberedPaginationParam, order parameter.ChatRoomOnMemberOrderMethod) (ListResult[entity.ChatRoomOnMember], error)

	// GetPluralChatRoomsWithCoverImageFunc mocks the GetPluralChatRoomsWithCoverImage method.
	GetPluralChatRoomsWithCoverImageFunc func(ctx context.Context, chatRoomIDs []uuid.UUID, order parameter.ChatRoomOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomWithCoverImage], error)

	// GetPluralChatRoomsWithCoverImageWithSdFunc mocks the GetPluralChatRoomsWithCoverImageWithSd method.
	GetPluralChatRoomsWithCoverImageWithSdFunc func(ctx context.Context, sd Sd, chatRoomIDs []uuid.UUID, order parameter.ChatRoomOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomWithCoverImage], error)

	// GetPluralChatRoomsWithSdFunc mocks the GetPluralChatRoomsWithSd method.
	GetPluralChatRoomsWithSdFunc func(ctx context.Context, sd Sd, chatRoomIDs []uuid.UUID, order parameter.ChatRoomOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoom], error)

	// GetPluralEventTypesFunc mocks the GetPluralEventTypes method.
	GetPluralEventTypesFunc func(ctx context.Context, eventTypeIDs []uuid.UUID, order parameter.EventTypeOrderMethod, np NumberedPaginationParam) (ListResult[entity.EventType], error)

	// GetPluralEventTypesWithSdFunc mocks the GetPluralEventTypesWithSd method.
	GetPluralEventTypesWithSdFunc func(ctx context.Context, sd Sd, eventTypeIDs []uuid.UUID, order parameter.EventTypeOrderMethod, np NumberedPaginationParam) (ListResult[entity.EventType], error)

	// GetPluralFilesFunc mocks the GetPluralFiles method.
	GetPluralFilesFunc func(ctx context.Context, fileIDs []uuid.UUID, order parameter.FileOrderMethod, np NumberedPaginationParam) (ListResult[entity.File], error)

	// GetPluralFilesWithAttachableItemFunc mocks the GetPluralFilesWithAttachableItem method.
	GetPluralFilesWithAttachableItemFunc func(ctx context.Context, fileIDs []uuid.UUID, order parameter.FileOrderMethod, np NumberedPaginationParam) (ListResult[entity.FileWithAttachableItem], error)

	// GetPluralFilesWithAttachableItemWithSdFunc mocks the GetPluralFilesWithAttachableItemWithSd method.
	GetPluralFilesWithAttachableItemWithSdFunc func(ctx context.Context, sd Sd, fileIDs []uuid.UUID, order parameter.FileOrderMethod, np NumberedPaginationParam) (ListResult[entity.FileWithAttachableItem], error)

	// GetPluralFilesWithSdFunc mocks the GetPluralFilesWithSd method.
	GetPluralFilesWithSdFunc func(ctx context.Context, sd Sd, fileIDs []uuid.UUID, order parameter.FileOrderMethod, np NumberedPaginationParam) (ListResult[entity.File], error)

	// GetPluralGradesFunc mocks the GetPluralGrades method.
	GetPluralGradesFunc func(ctx context.Context, gradeIDs []uuid.UUID, order parameter.GradeOrderMethod, np NumberedPaginationParam) (ListResult[entity.Grade], error)

	// GetPluralGradesWithOrganizationFunc mocks the GetPluralGradesWithOrganization method.
	GetPluralGradesWithOrganizationFunc func(ctx context.Context, gradeIDs []uuid.UUID, order parameter.GradeOrderMethod, np NumberedPaginationParam) (ListResult[entity.GradeWithOrganization], error)

	// GetPluralGradesWithOrganizationWithSdFunc mocks the GetPluralGradesWithOrganizationWithSd method.
	GetPluralGradesWithOrganizationWithSdFunc func(ctx context.Context, sd Sd, gradeIDs []uuid.UUID, order parameter.GradeOrderMethod, np NumberedPaginationParam) (ListResult[entity.GradeWithOrganization], error)

	// GetPluralGradesWithSdFunc mocks the GetPluralGradesWithSd method.
	GetPluralGradesWithSdFunc func(ctx context.Context, sd Sd, gradeIDs []uuid.UUID, order parameter.GradeOrderMethod, np NumberedPaginationParam) (ListResult[entity.Grade], error)

	// GetPluralGroupsFunc mocks the GetPluralGroups method.
	GetPluralGroupsFunc func(ctx context.Context, groupIDs []uuid.UUID, order parameter.GroupOrderMethod, np NumberedPaginationParam) (ListResult[entity.Group], error)

	// GetPluralGroupsWithOrganizationFunc mocks the GetPluralGroupsWithOrganization method.
	GetPluralGroupsWithOrganizationFunc func(ctx context.Context, groupIDs []uuid.UUID, order parameter.GroupOrderMethod, np NumberedPaginationParam) (ListResult[entity.GroupWithOrganization], error)

	// GetPluralGroupsWithOrganizationWithSdFunc mocks the GetPluralGroupsWithOrganizationWithSd method.
	GetPluralGroupsWithOrganizationWithSdFunc func(ctx context.Context, sd Sd, groupIDs []uuid.UUID, order parameter.GroupOrderMethod, np NumberedPaginationParam) (ListResult[entity.GroupWithOrganization], error)

	// GetPluralGroupsWithSdFunc mocks the GetPluralGroupsWithSd method.
	GetPluralGroupsWithSdFunc func(ctx context.Context, sd Sd, groupIDs []uuid.UUID, order parameter.GroupOrderMethod, np NumberedPaginationParam) (ListResult[entity.Group], error)

	// GetPluralImagesFunc mocks the GetPluralImages method.
	GetPluralImagesFunc func(ctx context.Context, imageIDs []uuid.UUID, order parameter.ImageOrderMethod, np NumberedPaginationParam) (ListResult[entity.Image], error)

	// GetPluralImagesWithAttachableItemFunc mocks the GetPluralImagesWithAttachableItem method.
	GetPluralImagesWithAttachableItemFunc func(ctx context.Context, imageIDs []uuid.UUID, order parameter.ImageOrderMethod, np NumberedPaginationParam) (ListResult[entity.ImageWithAttachableItem], error)

	// GetPluralImagesWithAttachableItemWithSdFunc mocks the GetPluralImagesWithAttachableItemWithSd method.
	GetPluralImagesWithAttachableItemWithSdFunc func(ctx context.Context, sd Sd, imageIDs []uuid.UUID, order parameter.ImageOrderMethod, np NumberedPaginationParam) (ListResult[entity.ImageWithAttachableItem], error)

	// GetPluralImagesWithSdFunc mocks the GetPluralImagesWithSd method.
	GetPluralImagesWithSdFunc func(ctx context.Context, sd Sd, imageIDs []uuid.UUID, order parameter.ImageOrderMethod, np NumberedPaginationParam) (ListResult[entity.Image], error)

	// GetPluralMembersFunc mocks the GetPluralMembers method.
	GetPluralMembersFunc func(ctx context.Context, memberIDs []uuid.UUID, order parameter.MemberOrderMethod, np NumberedPaginationParam) (ListResult[entity.Member], error)

	// GetPluralMembersOnChatRoomFunc mocks the GetPluralMembersOnChatRoom method.
	GetPluralMembersOnChatRoomFunc func(ctx context.Context, chatRoomIDs []uuid.UUID, np NumberedPaginationParam, order parameter.MemberOnChatRoomOrderMethod) (ListResult[entity.MemberOnChatRoom], error)

	// GetPluralMembersOnChatRoomAddMemberActionFunc mocks the GetPluralMembersOnChatRoomAddMemberAction method.
	GetPluralMembersOnChatRoomAddMemberActionFunc func(ctx context.Context, chatRoomAddMemberActionIDs []uuid.UUID, order parameter.MemberOnChatRoomAddMemberActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.MemberOnChatRoomAddMemberAction], error)

	// GetPluralMembersOnChatRoomAddMemberActionWithSdFunc mocks the GetPluralMembersOnChatRoomAddMemberActionWithSd method.
	GetPluralMembersOnChatRoomAddMemberActionWithSdFunc func(ctx context.Context, sd Sd, chatRoomAddMemberActionIDs []uuid.UUID, order parameter.MemberOnChatRoomAddMemberActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.MemberOnChatRoomAddMemberAction], error)

	// GetPluralMembersOnChatRoomRemoveMemberActionFunc mocks the GetPluralMembersOnChatRoomRemoveMemberAction method.
	GetPluralMembersOnChatRoomRemoveMemberActionFunc func(ctx context.Context, chatRoomRemoveMemberActionIDs []uuid.UUID, order parameter.MemberOnChatRoomRemoveMemberActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.MemberOnChatRoomRemoveMemberAction], error)

	// GetPluralMembersOnChatRoomRemoveMemberActionWithSdFunc mocks the GetPluralMembersOnChatRoomRemoveMemberActionWithSd method.
	GetPluralMembersOnChatRoomRemoveMemberActionWithSdFunc func(ctx context.Context, sd Sd, chatRoomRemoveMemberActionIDs []uuid.UUID, order parameter.MemberOnChatRoomRemoveMemberActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.MemberOnChatRoomRemoveMemberAction], error)

	// GetPluralMembersOnChatRoomWithSdFunc mocks the GetPluralMembersOnChatRoomWithSd method.
	GetPluralMembersOnChatRoomWithSdFunc func(ctx context.Context, sd Sd, chatRoomIDs []uuid.UUID, np NumberedPaginationParam, order parameter.MemberOnChatRoomOrderMethod) (ListResult[entity.MemberOnChatRoom], error)

	// GetPluralMembersOnOrganizationFunc mocks the GetPluralMembersOnOrganization method.
	GetPluralMembersOnOrganizationFunc func(ctx context.Context, organizationIDs []uuid.UUID, np NumberedPaginationParam, order parameter.MemberOnOrganizationOrderMethod) (ListResult[entity.MemberOnOrganization], error)

	// GetPluralMembersOnOrganizationWithSdFunc mocks the GetPluralMembersOnOrganizationWithSd method.
	GetPluralMembersOnOrganizationWithSdFunc func(ctx context.Context, sd Sd, organizationIDs []uuid.UUID, np NumberedPaginationParam, order parameter.MemberOnOrganizationOrderMethod) (ListResult[entity.MemberOnOrganization], error)

	// GetPluralMembersWithAttendStatusFunc mocks the GetPluralMembersWithAttendStatus method.
	GetPluralMembersWithAttendStatusFunc func(ctx context.Context, memberIDs []uuid.UUID, order parameter.MemberOrderMethod, np NumberedPaginationParam) (ListResult[entity.MemberWithAttendStatus], error)

	// GetPluralMembersWithAttendStatusWithSdFunc mocks the GetPluralMembersWithAttendStatusWithSd method.
	GetPluralMembersWithAttendStatusWithSdFunc func(ctx context.Context, sd Sd, memberIDs []uuid.UUID, order parameter.MemberOrderMethod, np NumberedPaginationParam) (ListResult[entity.MemberWithAttendStatus], error)

	// GetPluralMembersWithCrewFunc mocks the GetPluralMembersWithCrew method.
	GetPluralMembersWithCrewFunc func(ctx context.Context, memberIDs []uuid.UUID, order parameter.MemberOrderMethod, np NumberedPaginationParam) (ListResult[entity.MemberWithCrew], error)

	// GetPluralMembersWithCrewWithSdFunc mocks the GetPluralMembersWithCrewWithSd method.
	GetPluralMembersWithCrewWithSdFunc func(ctx context.Context, sd Sd, memberIDs []uuid.UUID, order parameter.MemberOrderMethod, np NumberedPaginationParam) (ListResult[entity.MemberWithCrew], error)

	// GetPluralMembersWithDetailFunc mocks the GetPluralMembersWithDetail method.
	GetPluralMembersWithDetailFunc func(ctx context.Context, memberIDs []uuid.UUID, order parameter.MemberOrderMethod, np NumberedPaginationParam) (ListResult[entity.MemberWithDetail], error)

	// GetPluralMembersWithDetailWithSdFunc mocks the GetPluralMembersWithDetailWithSd method.
	GetPluralMembersWithDetailWithSdFunc func(ctx context.Context, sd Sd, memberIDs []uuid.UUID, order parameter.MemberOrderMethod, np NumberedPaginationParam) (ListResult[entity.MemberWithDetail], error)

	// GetPluralMembersWithPersonalOrganizationFunc mocks the GetPluralMembersWithPersonalOrganization method.
	GetPluralMembersWithPersonalOrganizationFunc func(ctx context.Context, memberIDs []uuid.UUID, order parameter.MemberOrderMethod, np NumberedPaginationParam) (ListResult[entity.MemberWithPersonalOrganization], error)

	// GetPluralMembersWithPersonalOrganizationWithSdFunc mocks the GetPluralMembersWithPersonalOrganizationWithSd method.
	GetPluralMembersWithPersonalOrganizationWithSdFunc func(ctx context.Context, sd Sd, memberIDs []uuid.UUID, order parameter.MemberOrderMethod, np NumberedPaginationParam) (ListResult[entity.MemberWithPersonalOrganization], error)

	// GetPluralMembersWithProfileImageFunc mocks the GetPluralMembersWithProfileImage method.
	GetPluralMembersWithProfileImageFunc func(ctx context.Context, memberIDs []uuid.UUID, order parameter.MemberOrderMethod, np NumberedPaginationParam) (ListResult[entity.MemberWithProfileImage], error)

	// GetPluralMembersWithProfileImageWithSdFunc mocks the GetPluralMembersWithProfileImageWithSd method.
	GetPluralMembersWithProfileImageWithSdFunc func(ctx context.Context, sd Sd, memberIDs []uuid.UUID, order parameter.MemberOrderMethod, np NumberedPaginationParam) (ListResult[entity.MemberWithProfileImage], error)

	// GetPluralMembersWithRoleFunc mocks the GetPluralMembersWithRole method.
	GetPluralMembersWithRoleFunc func(ctx context.Context, memberIDs []uuid.UUID, order parameter.MemberOrderMethod, np NumberedPaginationParam) (ListResult[entity.MemberWithRole], error)

	// GetPluralMembersWithRoleWithSdFunc mocks the GetPluralMembersWithRoleWithSd method.
	GetPluralMembersWithRoleWithSdFunc func(ctx context.Context, sd Sd, memberIDs []uuid.UUID, order parameter.MemberOrderMethod, np NumberedPaginationParam) (ListResult[entity.MemberWithRole], error)

	// GetPluralMembersWithSdFunc mocks the GetPluralMembersWithSd method.
	GetPluralMembersWithSdFunc func(ctx context.Context, sd Sd, memberIDs []uuid.UUID, order parameter.MemberOrderMethod, np NumberedPaginationParam) (ListResult[entity.Member], error)

	// GetPluralMessagesFunc mocks the GetPluralMessages method.
	GetPluralMessagesFunc func(ctx context.Context, messageIDs []uuid.UUID, order parameter.MessageOrderMethod, np NumberedPaginationParam) (ListResult[entity.Message], error)

	// GetPluralMessagesWithChatRoomFunc mocks the GetPluralMessagesWithChatRoom method.
	GetPluralMessagesWithChatRoomFunc func(ctx context.Context, messageIDs []uuid.UUID, order parameter.MessageOrderMethod, np NumberedPaginationParam) (ListResult[entity.MessageWithChatRoom], error)

	// GetPluralMessagesWithChatRoomWithSdFunc mocks the GetPluralMessagesWithChatRoomWithSd method.
	GetPluralMessagesWithChatRoomWithSdFunc func(ctx context.Context, sd Sd, messageIDs []uuid.UUID, order parameter.MessageOrderMethod, np NumberedPaginationParam) (ListResult[entity.MessageWithChatRoom], error)

	// GetPluralMessagesWithSdFunc mocks the GetPluralMessagesWithSd method.
	GetPluralMessagesWithSdFunc func(ctx context.Context, sd Sd, messageIDs []uuid.UUID, order parameter.MessageOrderMethod, np NumberedPaginationParam) (ListResult[entity.Message], error)

	// GetPluralMessagesWithSenderFunc mocks the GetPluralMessagesWithSender method.
	GetPluralMessagesWithSenderFunc func(ctx context.Context, messageIDs []uuid.UUID, order parameter.MessageOrderMethod, np NumberedPaginationParam) (ListResult[entity.MessageWithSender], error)

	// GetPluralMessagesWithSenderByChatRoomActionIDsFunc mocks the GetPluralMessagesWithSenderByChatRoomActionIDs method.
	GetPluralMessagesWithSenderByChatRoomActionIDsFunc func(ctx context.Context, chatRoomActionIDs []uuid.UUID, order parameter.MessageOrderMethod, np NumberedPaginationParam) (ListResult[entity.MessageWithSender], error)

	// GetPluralMessagesWithSenderByChatRoomActionIDsWithSdFunc mocks the GetPluralMessagesWithSenderByChatRoomActionIDsWithSd method.
	GetPluralMessagesWithSenderByChatRoomActionIDsWithSdFunc func(ctx context.Context, sd Sd, chatRoomActionIDs []uuid.UUID, order parameter.MessageOrderMethod, np NumberedPaginationParam) (ListResult[entity.MessageWithSender], error)

	// GetPluralMessagesWithSenderWithSdFunc mocks the GetPluralMessagesWithSenderWithSd method.
	GetPluralMessagesWithSenderWithSdFunc func(ctx context.Context, sd Sd, messageIDs []uuid.UUID, order parameter.MessageOrderMethod, np NumberedPaginationParam) (ListResult[entity.MessageWithSender], error)

	// GetPluralMimeTypesFunc mocks the GetPluralMimeTypes method.
	GetPluralMimeTypesFunc func(ctx context.Context, mimeTypeIDs []uuid.UUID, order parameter.MimeTypeOrderMethod, np NumberedPaginationParam) (ListResult[entity.MimeType], error)

	// GetPluralMimeTypesWithSdFunc mocks the GetPluralMimeTypesWithSd method.
	GetPluralMimeTypesWithSdFunc func(ctx context.Context, sd Sd, mimeTypeIDs []uuid.UUID, order parameter.MimeTypeOrderMethod, np NumberedPaginationParam) (ListResult[entity.MimeType], error)

	// GetPluralOrganizationsFunc mocks the GetPluralOrganizations method.
	GetPluralOrganizationsFunc func(ctx context.Context, organizationIDs []uuid.UUID, order parameter.OrganizationOrderMethod, np NumberedPaginationParam) (ListResult[entity.Organization], error)

	// GetPluralOrganizationsOnMemberFunc mocks the GetPluralOrganizationsOnMember method.
	GetPluralOrganizationsOnMemberFunc func(ctx context.Context, memberIDs []uuid.UUID, np NumberedPaginationParam, order parameter.OrganizationOnMemberOrderMethod) (ListResult[entity.OrganizationOnMember], error)

	// GetPluralOrganizationsOnMemberWithSdFunc mocks the GetPluralOrganizationsOnMemberWithSd method.
	GetPluralOrganizationsOnMemberWithSdFunc func(ctx context.Context, sd Sd, memberIDs []uuid.UUID, np NumberedPaginationParam, order parameter.OrganizationOnMemberOrderMethod) (ListResult[entity.OrganizationOnMember], error)

	// GetPluralOrganizationsWithChatRoomFunc mocks the GetPluralOrganizationsWithChatRoom method.
	GetPluralOrganizationsWithChatRoomFunc func(ctx context.Context, organizationIDs []uuid.UUID, order parameter.OrganizationOrderMethod, np NumberedPaginationParam) (ListResult[entity.OrganizationWithChatRoom], error)

	// GetPluralOrganizationsWithChatRoomAndDetailFunc mocks the GetPluralOrganizationsWithChatRoomAndDetail method.
	GetPluralOrganizationsWithChatRoomAndDetailFunc func(ctx context.Context, organizationIDs []uuid.UUID, order parameter.OrganizationOrderMethod, np NumberedPaginationParam) (ListResult[entity.OrganizationWithChatRoomAndDetail], error)

	// GetPluralOrganizationsWithChatRoomAndDetailWithSdFunc mocks the GetPluralOrganizationsWithChatRoomAndDetailWithSd method.
	GetPluralOrganizationsWithChatRoomAndDetailWithSdFunc func(ctx context.Context, sd Sd, organizationIDs []uuid.UUID, order parameter.OrganizationOrderMethod, np NumberedPaginationParam) (ListResult[entity.OrganizationWithChatRoomAndDetail], error)

	// GetPluralOrganizationsWithChatRoomWithSdFunc mocks the GetPluralOrganizationsWithChatRoomWithSd method.
	GetPluralOrganizationsWithChatRoomWithSdFunc func(ctx context.Context, sd Sd, organizationIDs []uuid.UUID, order parameter.OrganizationOrderMethod, np NumberedPaginationParam) (ListResult[entity.OrganizationWithChatRoom], error)

	// GetPluralOrganizationsWithDetailFunc mocks the GetPluralOrganizationsWithDetail method.
	GetPluralOrganizationsWithDetailFunc func(ctx context.Context, organizationIDs []uuid.UUID, order parameter.OrganizationOrderMethod, np NumberedPaginationParam) (ListResult[entity.OrganizationWithDetail], error)

	// GetPluralOrganizationsWithDetailWithSdFunc mocks the GetPluralOrganizationsWithDetailWithSd method.
	GetPluralOrganizationsWithDetailWithSdFunc func(ctx context.Context, sd Sd, organizationIDs []uuid.UUID, order parameter.OrganizationOrderMethod, np NumberedPaginationParam) (ListResult[entity.OrganizationWithDetail], error)

	// GetPluralOrganizationsWithSdFunc mocks the GetPluralOrganizationsWithSd method.
	GetPluralOrganizationsWithSdFunc func(ctx context.Context, sd Sd, organizationIDs []uuid.UUID, order parameter.OrganizationOrderMethod, np NumberedPaginationParam) (ListResult[entity.Organization], error)

	// GetPluralPermissionCategoriesFunc mocks the GetPluralPermissionCategories method.
	GetPluralPermissionCategoriesFunc func(ctx context.Context, permissionCategoryIDs []uuid.UUID, order parameter.PermissionCategoryOrderMethod, np NumberedPaginationParam) (ListResult[entity.PermissionCategory], error)

	// GetPluralPermissionCategoriesWithSdFunc mocks the GetPluralPermissionCategoriesWithSd method.
	GetPluralPermissionCategoriesWithSdFunc func(ctx context.Context, sd Sd, permissionCategoryIDs []uuid.UUID, order parameter.PermissionCategoryOrderMethod, np NumberedPaginationParam) (ListResult[entity.PermissionCategory], error)

	// GetPluralPermissionsFunc mocks the GetPluralPermissions method.
	GetPluralPermissionsFunc func(ctx context.Context, permissionIDs []uuid.UUID, order parameter.PermissionOrderMethod, np NumberedPaginationParam) (ListResult[entity.Permission], error)

	// GetPluralPermissionsWithSdFunc mocks the GetPluralPermissionsWithSd method.
	GetPluralPermissionsWithSdFunc func(ctx context.Context, sd Sd, permissionIDs []uuid.UUID, order parameter.PermissionOrderMethod, np NumberedPaginationParam) (ListResult[entity.Permission], error)

	// GetPluralPoliciesFunc mocks the GetPluralPolicies method.
	GetPluralPoliciesFunc func(ctx context.Context, policyIDs []uuid.UUID, order parameter.PolicyOrderMethod, np NumberedPaginationParam) (ListResult[entity.Policy], error)

	// GetPluralPoliciesWithSdFunc mocks the GetPluralPoliciesWithSd method.
	GetPluralPoliciesWithSdFunc func(ctx context.Context, sd Sd, policyIDs []uuid.UUID, order parameter.PolicyOrderMethod, np NumberedPaginationParam) (ListResult[entity.Policy], error)

	// GetPluralPolicyCategoriesFunc mocks the GetPluralPolicyCategories method.
	GetPluralPolicyCategoriesFunc func(ctx context.Context, policyCategoryIDs []uuid.UUID, order parameter.PolicyCategoryOrderMethod, np NumberedPaginationParam) (ListResult[entity.PolicyCategory], error)

	// GetPluralPolicyCategoriesWithSdFunc mocks the GetPluralPolicyCategoriesWithSd method.
	GetPluralPolicyCategoriesWithSdFunc func(ctx context.Context, sd Sd, policyCategoryIDs []uuid.UUID, order parameter.PolicyCategoryOrderMethod, np NumberedPaginationParam) (ListResult[entity.PolicyCategory], error)

	// GetPluralPrivateChatRoomCompanionsFunc mocks the GetPluralPrivateChatRoomCompanions method.
	GetPluralPrivateChatRoomCompanionsFunc func(ctx context.Context, chatRoomIDs []uuid.UUID, memberID uuid.UUID, np NumberedPaginationParam, order parameter.MemberOnChatRoomOrderMethod) (ListResult[entity.PrivateChatRoomCompanions], error)

	// GetPluralPrivateChatRoomCompanionsWithSdFunc mocks the GetPluralPrivateChatRoomCompanionsWithSd method.
	GetPluralPrivateChatRoomCompanionsWithSdFunc func(ctx context.Context, sd Sd, chatRoomIDs []uuid.UUID, memberID uuid.UUID, np NumberedPaginationParam, order parameter.MemberOnChatRoomOrderMethod) (ListResult[entity.PrivateChatRoomCompanions], error)

	// GetPluralProfessorsFunc mocks the GetPluralProfessors method.
	GetPluralProfessorsFunc func(ctx context.Context, professorIDs []uuid.UUID, order parameter.ProfessorOrderMethod, np NumberedPaginationParam) (ListResult[entity.Professor], error)

	// GetPluralProfessorsWithMemberFunc mocks the GetPluralProfessorsWithMember method.
	GetPluralProfessorsWithMemberFunc func(ctx context.Context, professorIDs []uuid.UUID, order parameter.ProfessorOrderMethod, np NumberedPaginationParam) (ListResult[entity.ProfessorWithMember], error)

	// GetPluralProfessorsWithMemberWithSdFunc mocks the GetPluralProfessorsWithMemberWithSd method.
	GetPluralProfessorsWithMemberWithSdFunc func(ctx context.Context, sd Sd, professorIDs []uuid.UUID, order parameter.ProfessorOrderMethod, np NumberedPaginationParam) (ListResult[entity.ProfessorWithMember], error)

	// GetPluralProfessorsWithSdFunc mocks the GetPluralProfessorsWithSd method.
	GetPluralProfessorsWithSdFunc func(ctx context.Context, sd Sd, professorIDs []uuid.UUID, order parameter.ProfessorOrderMethod, np NumberedPaginationParam) (ListResult[entity.Professor], error)

	// GetPluralReadableMembersOnMessageFunc mocks the GetPluralReadableMembersOnMessage method.
	GetPluralReadableMembersOnMessageFunc func(ctx context.Context, messageIDs []uuid.UUID, np NumberedPaginationParam, order parameter.ReadableMemberOnMessageOrderMethod) (ListResult[entity.ReadableMemberOnMessage], error)

	// GetPluralReadableMembersOnMessageWithSdFunc mocks the GetPluralReadableMembersOnMessageWithSd method.
	GetPluralReadableMembersOnMessageWithSdFunc func(ctx context.Context, sd Sd, messageIDs []uuid.UUID, np NumberedPaginationParam, order parameter.ReadableMemberOnMessageOrderMethod) (ListResult[entity.ReadableMemberOnMessage], error)

	// GetPluralReadableMessagesOnMemberFunc mocks the GetPluralReadableMessagesOnMember method.
	GetPluralReadableMessagesOnMemberFunc func(ctx context.Context, memberIDs []uuid.UUID, np NumberedPaginationParam, order parameter.ReadableMessageOnMemberOrderMethod) (ListResult[entity.ReadableMessageOnMember], error)

	// GetPluralReadableMessagesOnMemberWithSdFunc mocks the GetPluralReadableMessagesOnMemberWithSd method.
	GetPluralReadableMessagesOnMemberWithSdFunc func(ctx context.Context, sd Sd, memberIDs []uuid.UUID, np NumberedPaginationParam, order parameter.ReadableMessageOnMemberOrderMethod) (ListResult[entity.ReadableMessageOnMember], error)

	// GetPluralRecordTypesFunc mocks the GetPluralRecordTypes method.
	GetPluralRecordTypesFunc func(ctx context.Context, recordTypeIDs []uuid.UUID, order parameter.RecordTypeOrderMethod, np NumberedPaginationParam) (ListResult[entity.RecordType], error)

	// GetPluralRecordTypesWithSdFunc mocks the GetPluralRecordTypesWithSd method.
	GetPluralRecordTypesWithSdFunc func(ctx context.Context, sd Sd, recordTypeIDs []uuid.UUID, order parameter.RecordTypeOrderMethod, np NumberedPaginationParam) (ListResult[entity.RecordType], error)

	// GetPluralRolesFunc mocks the GetPluralRoles method.
	GetPluralRolesFunc func(ctx context.Context, roleIDs []uuid.UUID, order parameter.RoleOrderMethod, np NumberedPaginationParam) (ListResult[entity.Role], error)

	// GetPluralRolesWithSdFunc mocks the GetPluralRolesWithSd method.
	GetPluralRolesWithSdFunc func(ctx context.Context, sd Sd, roleIDs []uuid.UUID, order parameter.RoleOrderMethod, np NumberedPaginationParam) (ListResult[entity.Role], error)

	// GetPluralStudentsFunc mocks the GetPluralStudents method.
	GetPluralStudentsFunc func(ctx context.Context, studentIDs []uuid.UUID, order parameter.StudentOrderMethod, np NumberedPaginationParam) (ListResult[entity.Student], error)

	// GetPluralStudentsWithMemberFunc mocks the GetPluralStudentsWithMember method.
	GetPluralStudentsWithMemberFunc func(ctx context.Context, studentIDs []uuid.UUID, order parameter.StudentOrderMethod, np NumberedPaginationParam) (ListResult[entity.StudentWithMember], error)

	// GetPluralStudentsWithMemberWithSdFunc mocks the GetPluralStudentsWithMemberWithSd method.
	GetPluralStudentsWithMemberWithSdFunc func(ctx context.Context, sd Sd, studentIDs []uuid.UUID, order parameter.StudentOrderMethod, np NumberedPaginationParam) (ListResult[entity.StudentWithMember], error)

	// GetPluralStudentsWithSdFunc mocks the GetPluralStudentsWithSd method.
	GetPluralStudentsWithSdFunc func(ctx context.Context, sd Sd, studentIDs []uuid.UUID, order parameter.StudentOrderMethod, np NumberedPaginationParam) (ListResult[entity.Student], error)

	// GetPoliciesFunc mocks the GetPolicies method.
	GetPoliciesFunc func(ctx context.Context, where parameter.WherePolicyParam, order parameter.PolicyOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Policy], error)

	// GetPoliciesOnRoleFunc mocks the GetPoliciesOnRole method.
	GetPoliciesOnRoleFunc func(ctx context.Context, roleID uuid.UUID, where parameter.WherePolicyOnRoleParam, order parameter.PolicyOnRoleOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.PolicyOnRole], error)

	// GetPoliciesOnRoleWithSdFunc mocks the GetPoliciesOnRoleWithSd method.
	GetPoliciesOnRoleWithSdFunc func(ctx context.Context, sd Sd, roleID uuid.UUID, where parameter.WherePolicyOnRoleParam, order parameter.PolicyOnRoleOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.PolicyOnRole], error)

	// GetPoliciesWithCategoryFunc mocks the GetPoliciesWithCategory method.
	GetPoliciesWithCategoryFunc func(ctx context.Context, where parameter.WherePolicyParam, order parameter.PolicyOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.PolicyWithCategory], error)

	// GetPoliciesWithCategoryWithSdFunc mocks the GetPoliciesWithCategoryWithSd method.
	GetPoliciesWithCategoryWithSdFunc func(ctx context.Context, sd Sd, where parameter.WherePolicyParam, order parameter.PolicyOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.PolicyWithCategory], error)

	// GetPoliciesWithSdFunc mocks the GetPoliciesWithSd method.
	GetPoliciesWithSdFunc func(ctx context.Context, sd Sd, where parameter.WherePolicyParam, order parameter.PolicyOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Policy], error)

	// GetPolicyCategoriesFunc mocks the GetPolicyCategories method.
	GetPolicyCategoriesFunc func(ctx context.Context, where parameter.WherePolicyCategoryParam, order parameter.PolicyCategoryOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.PolicyCategory], error)

	// GetPolicyCategoriesWithSdFunc mocks the GetPolicyCategoriesWithSd method.
	GetPolicyCategoriesWithSdFunc func(ctx context.Context, sd Sd, where parameter.WherePolicyCategoryParam, order parameter.PolicyCategoryOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.PolicyCategory], error)

	// GetProfessorsFunc mocks the GetProfessors method.
	GetProfessorsFunc func(ctx context.Context, where parameter.WhereProfessorParam, order parameter.ProfessorOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Professor], error)

	// GetProfessorsWithMemberFunc mocks the GetProfessorsWithMember method.
	GetProfessorsWithMemberFunc func(ctx context.Context, where parameter.WhereProfessorParam, order parameter.ProfessorOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ProfessorWithMember], error)

	// GetProfessorsWithMemberWithSdFunc mocks the GetProfessorsWithMemberWithSd method.
	GetProfessorsWithMemberWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereProfessorParam, order parameter.ProfessorOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ProfessorWithMember], error)

	// GetProfessorsWithSdFunc mocks the GetProfessorsWithSd method.
	GetProfessorsWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereProfessorParam, order parameter.ProfessorOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Professor], error)

	// GetReadableMembersOnMessageFunc mocks the GetReadableMembersOnMessage method.
	GetReadableMembersOnMessageFunc func(ctx context.Context, memberID uuid.UUID, where parameter.WhereReadableMemberOnMessageParam, order parameter.ReadableMemberOnMessageOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ReadableMemberOnMessage], error)

	// GetReadableMembersOnMessageWithSdFunc mocks the GetReadableMembersOnMessageWithSd method.
	GetReadableMembersOnMessageWithSdFunc func(ctx context.Context, sd Sd, memberID uuid.UUID, where parameter.WhereReadableMemberOnMessageParam, order parameter.ReadableMemberOnMessageOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ReadableMemberOnMessage], error)

	// GetReadableMessagesOnMemberFunc mocks the GetReadableMessagesOnMember method.
	GetReadableMessagesOnMemberFunc func(ctx context.Context, memberID uuid.UUID, where parameter.WhereReadableMessageOnMemberParam, order parameter.ReadableMessageOnMemberOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ReadableMessageOnMember], error)

	// GetReadableMessagesOnMemberWithSdFunc mocks the GetReadableMessagesOnMemberWithSd method.
	GetReadableMessagesOnMemberWithSdFunc func(ctx context.Context, sd Sd, memberID uuid.UUID, where parameter.WhereReadableMessageOnMemberParam, order parameter.ReadableMessageOnMemberOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ReadableMessageOnMember], error)

	// GetRecordTypesFunc mocks the GetRecordTypes method.
	GetRecordTypesFunc func(ctx context.Context, where parameter.WhereRecordTypeParam, order parameter.RecordTypeOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.RecordType], error)

	// GetRecordTypesWithSdFunc mocks the GetRecordTypesWithSd method.
	GetRecordTypesWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereRecordTypeParam, order parameter.RecordTypeOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.RecordType], error)

	// GetRolesFunc mocks the GetRoles method.
	GetRolesFunc func(ctx context.Context, where parameter.WhereRoleParam, order parameter.RoleOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Role], error)

	// GetRolesOnPolicyFunc mocks the GetRolesOnPolicy method.
	GetRolesOnPolicyFunc func(ctx context.Context, policyID uuid.UUID, where parameter.WhereRoleOnPolicyParam, order parameter.RoleOnPolicyOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.RoleOnPolicy], error)

	// GetRolesOnPolicyWithSdFunc mocks the GetRolesOnPolicyWithSd method.
	GetRolesOnPolicyWithSdFunc func(ctx context.Context, sd Sd, policyID uuid.UUID, where parameter.WhereRoleOnPolicyParam, order parameter.RoleOnPolicyOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.RoleOnPolicy], error)

	// GetRolesWithSdFunc mocks the GetRolesWithSd method.
	GetRolesWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereRoleParam, order parameter.RoleOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Role], error)

	// GetStudentsFunc mocks the GetStudents method.
	GetStudentsFunc func(ctx context.Context, where parameter.WhereStudentParam, order parameter.StudentOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Student], error)

	// GetStudentsWithMemberFunc mocks the GetStudentsWithMember method.
	GetStudentsWithMemberFunc func(ctx context.Context, where parameter.WhereStudentParam, order parameter.StudentOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.StudentWithMember], error)

	// GetStudentsWithMemberWithSdFunc mocks the GetStudentsWithMemberWithSd method.
	GetStudentsWithMemberWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereStudentParam, order parameter.StudentOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.StudentWithMember], error)

	// GetStudentsWithSdFunc mocks the GetStudentsWithSd method.
	GetStudentsWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereStudentParam, order parameter.StudentOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Student], error)

	// PluralDeleteAbsencesFunc mocks the PluralDeleteAbsences method.
	PluralDeleteAbsencesFunc func(ctx context.Context, absenceIDs []uuid.UUID) (int64, error)

	// PluralDeleteAbsencesWithSdFunc mocks the PluralDeleteAbsencesWithSd method.
	PluralDeleteAbsencesWithSdFunc func(ctx context.Context, sd Sd, absenceIDs []uuid.UUID) (int64, error)

	// PluralDeleteAttachableItemsFunc mocks the PluralDeleteAttachableItems method.
	PluralDeleteAttachableItemsFunc func(ctx context.Context, attachableItemIDs []uuid.UUID) (int64, error)

	// PluralDeleteAttachableItemsWithSdFunc mocks the PluralDeleteAttachableItemsWithSd method.
	PluralDeleteAttachableItemsWithSdFunc func(ctx context.Context, sd Sd, attachableItemIDs []uuid.UUID) (int64, error)

	// PluralDeleteAttendStatusesFunc mocks the PluralDeleteAttendStatuses method.
	PluralDeleteAttendStatusesFunc func(ctx context.Context, attendStatusIDs []uuid.UUID) (int64, error)

	// PluralDeleteAttendStatusesWithSdFunc mocks the PluralDeleteAttendStatusesWithSd method.
	PluralDeleteAttendStatusesWithSdFunc func(ctx context.Context, sd Sd, attendStatusIDs []uuid.UUID) (int64, error)

	// PluralDeleteAttendanceTypesFunc mocks the PluralDeleteAttendanceTypes method.
	PluralDeleteAttendanceTypesFunc func(ctx context.Context, attendanceTypeIDs []uuid.UUID) (int64, error)

	// PluralDeleteAttendanceTypesWithSdFunc mocks the PluralDeleteAttendanceTypesWithSd method.
	PluralDeleteAttendanceTypesWithSdFunc func(ctx context.Context, sd Sd, attendanceTypeIDs []uuid.UUID) (int64, error)

	// PluralDeleteChatRoomActionTypesFunc mocks the PluralDeleteChatRoomActionTypes method.
	PluralDeleteChatRoomActionTypesFunc func(ctx context.Context, recordTypeIDs []uuid.UUID) (int64, error)

	// PluralDeleteChatRoomActionTypesWithSdFunc mocks the PluralDeleteChatRoomActionTypesWithSd method.
	PluralDeleteChatRoomActionTypesWithSdFunc func(ctx context.Context, sd Sd, recordTypeIDs []uuid.UUID) (int64, error)

	// PluralDeleteChatRoomActionsFunc mocks the PluralDeleteChatRoomActions method.
	PluralDeleteChatRoomActionsFunc func(ctx context.Context, chatRoomActionIDs []uuid.UUID) (int64, error)

	// PluralDeleteChatRoomActionsWithSdFunc mocks the PluralDeleteChatRoomActionsWithSd method.
	PluralDeleteChatRoomActionsWithSdFunc func(ctx context.Context, sd Sd, chatRoomActionIDs []uuid.UUID) (int64, error)

	// PluralDeleteChatRoomAddMemberActionsFunc mocks the PluralDeleteChatRoomAddMemberActions method.
	PluralDeleteChatRoomAddMemberActionsFunc func(ctx context.Context, chatRoomAddMemberActionIDs []uuid.UUID) (int64, error)

	// PluralDeleteChatRoomAddMemberActionsWithSdFunc mocks the PluralDeleteChatRoomAddMemberActionsWithSd method.
	PluralDeleteChatRoomAddMemberActionsWithSdFunc func(ctx context.Context, sd Sd, chatRoomAddMemberActionIDs []uuid.UUID) (int64, error)

	// PluralDeleteChatRoomCreateActionsFunc mocks the PluralDeleteChatRoomCreateActions method.
	PluralDeleteChatRoomCreateActionsFunc func(ctx context.Context, chatRoomCreateActionIDs []uuid.UUID) (int64, error)

	// PluralDeleteChatRoomCreateActionsWithSdFunc mocks the PluralDeleteChatRoomCreateActionsWithSd method.
	PluralDeleteChatRoomCreateActionsWithSdFunc func(ctx context.Context, sd Sd, chatRoomCreateActionIDs []uuid.UUID) (int64, error)

	// PluralDeleteChatRoomDeleteMessageActionsFunc mocks the PluralDeleteChatRoomDeleteMessageActions method.
	PluralDeleteChatRoomDeleteMessageActionsFunc func(ctx context.Context, chatRoomDeleteMessageActionIDs []uuid.UUID) (int64, error)

	// PluralDeleteChatRoomDeleteMessageActionsWithSdFunc mocks the PluralDeleteChatRoomDeleteMessageActionsWithSd method.
	PluralDeleteChatRoomDeleteMessageActionsWithSdFunc func(ctx context.Context, sd Sd, chatRoomDeleteMessageActionIDs []uuid.UUID) (int64, error)

	// PluralDeleteChatRoomRemoveMemberActionsFunc mocks the PluralDeleteChatRoomRemoveMemberActions method.
	PluralDeleteChatRoomRemoveMemberActionsFunc func(ctx context.Context, chatRoomRemoveMemberActionIDs []uuid.UUID) (int64, error)

	// PluralDeleteChatRoomRemoveMemberActionsWithSdFunc mocks the PluralDeleteChatRoomRemoveMemberActionsWithSd method.
	PluralDeleteChatRoomRemoveMemberActionsWithSdFunc func(ctx context.Context, sd Sd, chatRoomRemoveMemberActionIDs []uuid.UUID) (int64, error)

	// PluralDeleteChatRoomUpdateNameActionsFunc mocks the PluralDeleteChatRoomUpdateNameActions method.
	PluralDeleteChatRoomUpdateNameActionsFunc func(ctx context.Context, chatRoomUpdateNameActionIDs []uuid.UUID) (int64, error)

	// PluralDeleteChatRoomUpdateNameActionsWithSdFunc mocks the PluralDeleteChatRoomUpdateNameActionsWithSd method.
	PluralDeleteChatRoomUpdateNameActionsWithSdFunc func(ctx context.Context, sd Sd, chatRoomUpdateNameActionIDs []uuid.UUID) (int64, error)

	// PluralDeleteChatRoomWithdrawActionsFunc mocks the PluralDeleteChatRoomWithdrawActions method.
	PluralDeleteChatRoomWithdrawActionsFunc func(ctx context.Context, chatRoomWithdrawActionIDs []uuid.UUID) (int64, error)

	// PluralDeleteChatRoomWithdrawActionsWithSdFunc mocks the PluralDeleteChatRoomWithdrawActionsWithSd method.
	PluralDeleteChatRoomWithdrawActionsWithSdFunc func(ctx context.Context, sd Sd, chatRoomWithdrawActionIDs []uuid.UUID) (int64, error)

	// PluralDeleteChatRoomsFunc mocks the PluralDeleteChatRooms method.
	PluralDeleteChatRoomsFunc func(ctx context.Context, chatRoomIDs []uuid.UUID) (int64, error)

	// PluralDeleteChatRoomsWithSdFunc mocks the PluralDeleteChatRoomsWithSd method.
	PluralDeleteChatRoomsWithSdFunc func(ctx context.Context, sd Sd, chatRoomIDs []uuid.UUID) (int64, error)

	// PluralDeleteEventTypesFunc mocks the PluralDeleteEventTypes method.
	PluralDeleteEventTypesFunc func(ctx context.Context, eventTypeIDs []uuid.UUID) (int64, error)

	// PluralDeleteEventTypesWithSdFunc mocks the PluralDeleteEventTypesWithSd method.
	PluralDeleteEventTypesWithSdFunc func(ctx context.Context, sd Sd, eventTypeIDs []uuid.UUID) (int64, error)

	// PluralDeleteFilesFunc mocks the PluralDeleteFiles method.
	PluralDeleteFilesFunc func(ctx context.Context, fileIDs []uuid.UUID) (int64, error)

	// PluralDeleteFilesWithSdFunc mocks the PluralDeleteFilesWithSd method.
	PluralDeleteFilesWithSdFunc func(ctx context.Context, sd Sd, fileIDs []uuid.UUID) (int64, error)

	// PluralDeleteGradesFunc mocks the PluralDeleteGrades method.
	PluralDeleteGradesFunc func(ctx context.Context, gradeIDs []uuid.UUID) (int64, error)

	// PluralDeleteGradesWithSdFunc mocks the PluralDeleteGradesWithSd method.
	PluralDeleteGradesWithSdFunc func(ctx context.Context, sd Sd, gradeIDs []uuid.UUID) (int64, error)

	// PluralDeleteGroupsFunc mocks the PluralDeleteGroups method.
	PluralDeleteGroupsFunc func(ctx context.Context, groupIDs []uuid.UUID) (int64, error)

	// PluralDeleteGroupsWithSdFunc mocks the PluralDeleteGroupsWithSd method.
	PluralDeleteGroupsWithSdFunc func(ctx context.Context, sd Sd, groupIDs []uuid.UUID) (int64, error)

	// PluralDeleteImagesFunc mocks the PluralDeleteImages method.
	PluralDeleteImagesFunc func(ctx context.Context, imageIDs []uuid.UUID) (int64, error)

	// PluralDeleteImagesWithSdFunc mocks the PluralDeleteImagesWithSd method.
	PluralDeleteImagesWithSdFunc func(ctx context.Context, sd Sd, imageIDs []uuid.UUID) (int64, error)

	// PluralDeleteMembersFunc mocks the PluralDeleteMembers method.
	PluralDeleteMembersFunc func(ctx context.Context, memberIDs []uuid.UUID) (int64, error)

	// PluralDeleteMembersWithSdFunc mocks the PluralDeleteMembersWithSd method.
	PluralDeleteMembersWithSdFunc func(ctx context.Context, sd Sd, memberIDs []uuid.UUID) (int64, error)

	// PluralDeleteMessagesFunc mocks the PluralDeleteMessages method.
	PluralDeleteMessagesFunc func(ctx context.Context, messageIDs []uuid.UUID) (int64, error)

	// PluralDeleteMessagesWithSdFunc mocks the PluralDeleteMessagesWithSd method.
	PluralDeleteMessagesWithSdFunc func(ctx context.Context, sd Sd, messageIDs []uuid.UUID) (int64, error)

	// PluralDeleteMimeTypesFunc mocks the PluralDeleteMimeTypes method.
	PluralDeleteMimeTypesFunc func(ctx context.Context, mimeTypeIDs []uuid.UUID) (int64, error)

	// PluralDeleteMimeTypesWithSdFunc mocks the PluralDeleteMimeTypesWithSd method.
	PluralDeleteMimeTypesWithSdFunc func(ctx context.Context, sd Sd, mimeTypeIDs []uuid.UUID) (int64, error)

	// PluralDeleteOrganizationsFunc mocks the PluralDeleteOrganizations method.
	PluralDeleteOrganizationsFunc func(ctx context.Context, organizationIDs []uuid.UUID) (int64, error)

	// PluralDeleteOrganizationsWithSdFunc mocks the PluralDeleteOrganizationsWithSd method.
	PluralDeleteOrganizationsWithSdFunc func(ctx context.Context, sd Sd, organizationIDs []uuid.UUID) (int64, error)

	// PluralDeletePermissionCategoriesFunc mocks the PluralDeletePermissionCategories method.
	PluralDeletePermissionCategoriesFunc func(ctx context.Context, permissionCategoryIDs []uuid.UUID) (int64, error)

	// PluralDeletePermissionCategoriesWithSdFunc mocks the PluralDeletePermissionCategoriesWithSd method.
	PluralDeletePermissionCategoriesWithSdFunc func(ctx context.Context, sd Sd, permissionCategoryIDs []uuid.UUID) (int64, error)

	// PluralDeletePermissionsFunc mocks the PluralDeletePermissions method.
	PluralDeletePermissionsFunc func(ctx context.Context, permissionIDs []uuid.UUID) (int64, error)

	// PluralDeletePermissionsWithSdFunc mocks the PluralDeletePermissionsWithSd method.
	PluralDeletePermissionsWithSdFunc func(ctx context.Context, sd Sd, permissionIDs []uuid.UUID) (int64, error)

	// PluralDeletePoliciesFunc mocks the PluralDeletePolicies method.
	PluralDeletePoliciesFunc func(ctx context.Context, policyIDs []uuid.UUID) (int64, error)

	// PluralDeletePoliciesWithSdFunc mocks the PluralDeletePoliciesWithSd method.
	PluralDeletePoliciesWithSdFunc func(ctx context.Context, sd Sd, policyIDs []uuid.UUID) (int64, error)

	// PluralDeletePolicyCategoriesFunc mocks the PluralDeletePolicyCategories method.
	PluralDeletePolicyCategoriesFunc func(ctx context.Context, policyCategoryIDs []uuid.UUID) (int64, error)

	// PluralDeletePolicyCategoriesWithSdFunc mocks the PluralDeletePolicyCategoriesWithSd method.
	PluralDeletePolicyCategoriesWithSdFunc func(ctx context.Context, sd Sd, policyCategoryIDs []uuid.UUID) (int64, error)

	// PluralDeleteProfessorsFunc mocks the PluralDeleteProfessors method.
	PluralDeleteProfessorsFunc func(ctx context.Context, professorIDs []uuid.UUID) (int64, error)

	// PluralDeleteProfessorsWithSdFunc mocks the PluralDeleteProfessorsWithSd method.
	PluralDeleteProfessorsWithSdFunc func(ctx context.Context, sd Sd, professorIDs []uuid.UUID) (int64, error)

	// PluralDeleteRecordTypesFunc mocks the PluralDeleteRecordTypes method.
	PluralDeleteRecordTypesFunc func(ctx context.Context, recordTypeIDs []uuid.UUID) (int64, error)

	// PluralDeleteRecordTypesWithSdFunc mocks the PluralDeleteRecordTypesWithSd method.
	PluralDeleteRecordTypesWithSdFunc func(ctx context.Context, sd Sd, recordTypeIDs []uuid.UUID) (int64, error)

	// PluralDeleteRolesFunc mocks the PluralDeleteRoles method.
	PluralDeleteRolesFunc func(ctx context.Context, roleIDs []uuid.UUID) (int64, error)

	// PluralDeleteRolesWithSdFunc mocks the PluralDeleteRolesWithSd method.
	PluralDeleteRolesWithSdFunc func(ctx context.Context, sd Sd, roleIDs []uuid.UUID) (int64, error)

	// PluralDeleteStudentsFunc mocks the PluralDeleteStudents method.
	PluralDeleteStudentsFunc func(ctx context.Context, studentIDs []uuid.UUID) (int64, error)

	// PluralDeleteStudentsWithSdFunc mocks the PluralDeleteStudentsWithSd method.
	PluralDeleteStudentsWithSdFunc func(ctx context.Context, sd Sd, studentIDs []uuid.UUID) (int64, error)

	// PluralDetachItemsOnMessageFunc mocks the PluralDetachItemsOnMessage method.
	PluralDetachItemsOnMessageFunc func(ctx context.Context, messageID uuid.UUID, attachedItemIDs []uuid.UUID) (int64, error)

	// PluralDetachItemsOnMessageWithSdFunc mocks the PluralDetachItemsOnMessageWithSd method.
	PluralDetachItemsOnMessageWithSdFunc func(ctx context.Context, sd Sd, messageID uuid.UUID, attachedItemIDs []uuid.UUID) (int64, error)

	// PluralDisassociatePolicyOnRoleFunc mocks the PluralDisassociatePolicyOnRole method.
	PluralDisassociatePolicyOnRoleFunc func(ctx context.Context, roleID uuid.UUID, policyIDs []uuid.UUID) (int64, error)

	// PluralDisassociatePolicyOnRoleWithSdFunc mocks the PluralDisassociatePolicyOnRoleWithSd method.
	PluralDisassociatePolicyOnRoleWithSdFunc func(ctx context.Context, sd Sd, roleID uuid.UUID, policyIDs []uuid.UUID) (int64, error)

	// PluralDisassociateRoleOnPolicyFunc mocks the PluralDisassociateRoleOnPolicy method.
	PluralDisassociateRoleOnPolicyFunc func(ctx context.Context, policyID uuid.UUID, roleIDs []uuid.UUID) (int64, error)

	// PluralDisassociateRoleOnPolicyWithSdFunc mocks the PluralDisassociateRoleOnPolicyWithSd method.
	PluralDisassociateRoleOnPolicyWithSdFunc func(ctx context.Context, sd Sd, policyID uuid.UUID, roleIDs []uuid.UUID) (int64, error)

	// ReadReceiptFunc mocks the ReadReceipt method.
	ReadReceiptFunc func(ctx context.Context, param parameter.ReadReceiptParam) (entity.ReadReceipt, error)

	// ReadReceiptWithSdFunc mocks the ReadReceiptWithSd method.
	ReadReceiptWithSdFunc func(ctx context.Context, sd Sd, param parameter.ReadReceiptParam) (entity.ReadReceipt, error)

	// ReadReceiptsFunc mocks the ReadReceipts method.
	ReadReceiptsFunc func(ctx context.Context, param parameter.ReadReceiptsParam) (int64, error)

	// ReadReceiptsOnChatRoomAndMemberFunc mocks the ReadReceiptsOnChatRoomAndMember method.
	ReadReceiptsOnChatRoomAndMemberFunc func(ctx context.Context, chatRoomID uuid.UUID, memberID uuid.UUID, readAt time.Time) (int64, error)

	// ReadReceiptsOnChatRoomAndMemberWithSdFunc mocks the ReadReceiptsOnChatRoomAndMemberWithSd method.
	ReadReceiptsOnChatRoomAndMemberWithSdFunc func(ctx context.Context, sd Sd, chatRoomID uuid.UUID, memberID uuid.UUID, readAt time.Time) (int64, error)

	// ReadReceiptsOnMemberFunc mocks the ReadReceiptsOnMember method.
	ReadReceiptsOnMemberFunc func(ctx context.Context, memberID uuid.UUID, readAt time.Time) (int64, error)

	// ReadReceiptsOnMemberWithSdFunc mocks the ReadReceiptsOnMemberWithSd method.
	ReadReceiptsOnMemberWithSdFunc func(ctx context.Context, sd Sd, memberID uuid.UUID, readAt time.Time) (int64, error)

	// ReadReceiptsWithSdFunc mocks the ReadReceiptsWithSd method.
	ReadReceiptsWithSdFunc func(ctx context.Context, sd Sd, param parameter.ReadReceiptsParam) (int64, error)

	// RemoveMemberToChatRoomRemoveMemberActionFunc mocks the RemoveMemberToChatRoomRemoveMemberAction method.
	RemoveMemberToChatRoomRemoveMemberActionFunc func(ctx context.Context, param parameter.CreateChatRoomRemovedMemberParam) (entity.ChatRoomRemovedMember, error)

	// RemoveMemberToChatRoomRemoveMemberActionWithSdFunc mocks the RemoveMemberToChatRoomRemoveMemberActionWithSd method.
	RemoveMemberToChatRoomRemoveMemberActionWithSdFunc func(ctx context.Context, sd Sd, param parameter.CreateChatRoomRemovedMemberParam) (entity.ChatRoomRemovedMember, error)

	// RemoveMembersToChatRoomRemoveMemberActionFunc mocks the RemoveMembersToChatRoomRemoveMemberAction method.
	RemoveMembersToChatRoomRemoveMemberActionFunc func(ctx context.Context, params []parameter.CreateChatRoomRemovedMemberParam) (int64, error)

	// RemoveMembersToChatRoomRemoveMemberActionWithSdFunc mocks the RemoveMembersToChatRoomRemoveMemberActionWithSd method.
	RemoveMembersToChatRoomRemoveMemberActionWithSdFunc func(ctx context.Context, sd Sd, params []parameter.CreateChatRoomRemovedMemberParam) (int64, error)

	// RollbackFunc mocks the Rollback method.
	RollbackFunc func(contextMoqParam context.Context, sd Sd) error

	// UpdateAttachableItemFunc mocks the UpdateAttachableItem method.
	UpdateAttachableItemFunc func(ctx context.Context, attachableItemID uuid.UUID, param parameter.UpdateAttachableItemParams) (entity.AttachableItem, error)

	// UpdateAttachableItemWithSdFunc mocks the UpdateAttachableItemWithSd method.
	UpdateAttachableItemWithSdFunc func(ctx context.Context, sd Sd, attachableItemID uuid.UUID, param parameter.UpdateAttachableItemParams) (entity.AttachableItem, error)

	// UpdateAttendStatusFunc mocks the UpdateAttendStatus method.
	UpdateAttendStatusFunc func(ctx context.Context, attendStatusID uuid.UUID, param parameter.UpdateAttendStatusParams) (entity.AttendStatus, error)

	// UpdateAttendStatusByKeyFunc mocks the UpdateAttendStatusByKey method.
	UpdateAttendStatusByKeyFunc func(ctx context.Context, key string, param parameter.UpdateAttendStatusByKeyParams) (entity.AttendStatus, error)

	// UpdateAttendStatusByKeyWithSdFunc mocks the UpdateAttendStatusByKeyWithSd method.
	UpdateAttendStatusByKeyWithSdFunc func(ctx context.Context, sd Sd, key string, param parameter.UpdateAttendStatusByKeyParams) (entity.AttendStatus, error)

	// UpdateAttendStatusWithSdFunc mocks the UpdateAttendStatusWithSd method.
	UpdateAttendStatusWithSdFunc func(ctx context.Context, sd Sd, attendStatusID uuid.UUID, param parameter.UpdateAttendStatusParams) (entity.AttendStatus, error)

	// UpdateAttendanceTypeFunc mocks the UpdateAttendanceType method.
	UpdateAttendanceTypeFunc func(ctx context.Context, attendanceTypeID uuid.UUID, param parameter.UpdateAttendanceTypeParams) (entity.AttendanceType, error)

	// UpdateAttendanceTypeByKeyFunc mocks the UpdateAttendanceTypeByKey method.
	UpdateAttendanceTypeByKeyFunc func(ctx context.Context, key string, param parameter.UpdateAttendanceTypeByKeyParams) (entity.AttendanceType, error)

	// UpdateAttendanceTypeByKeyWithSdFunc mocks the UpdateAttendanceTypeByKeyWithSd method.
	UpdateAttendanceTypeByKeyWithSdFunc func(ctx context.Context, sd Sd, key string, param parameter.UpdateAttendanceTypeByKeyParams) (entity.AttendanceType, error)

	// UpdateAttendanceTypeWithSdFunc mocks the UpdateAttendanceTypeWithSd method.
	UpdateAttendanceTypeWithSdFunc func(ctx context.Context, sd Sd, attendanceTypeID uuid.UUID, param parameter.UpdateAttendanceTypeParams) (entity.AttendanceType, error)

	// UpdateChatRoomFunc mocks the UpdateChatRoom method.
	UpdateChatRoomFunc func(ctx context.Context, chatRoomID uuid.UUID, param parameter.UpdateChatRoomParams) (entity.ChatRoom, error)

	// UpdateChatRoomActionFunc mocks the UpdateChatRoomAction method.
	UpdateChatRoomActionFunc func(ctx context.Context, chatRoomActionID uuid.UUID, param parameter.UpdateChatRoomActionParam) (entity.ChatRoomAction, error)

	// UpdateChatRoomActionTypeFunc mocks the UpdateChatRoomActionType method.
	UpdateChatRoomActionTypeFunc func(ctx context.Context, recordTypeID uuid.UUID, param parameter.UpdateChatRoomActionTypeParams) (entity.ChatRoomActionType, error)

	// UpdateChatRoomActionTypeByKeyFunc mocks the UpdateChatRoomActionTypeByKey method.
	UpdateChatRoomActionTypeByKeyFunc func(ctx context.Context, key string, param parameter.UpdateChatRoomActionTypeByKeyParams) (entity.ChatRoomActionType, error)

	// UpdateChatRoomActionTypeByKeyWithSdFunc mocks the UpdateChatRoomActionTypeByKeyWithSd method.
	UpdateChatRoomActionTypeByKeyWithSdFunc func(ctx context.Context, sd Sd, key string, param parameter.UpdateChatRoomActionTypeByKeyParams) (entity.ChatRoomActionType, error)

	// UpdateChatRoomActionTypeWithSdFunc mocks the UpdateChatRoomActionTypeWithSd method.
	UpdateChatRoomActionTypeWithSdFunc func(ctx context.Context, sd Sd, recordTypeID uuid.UUID, param parameter.UpdateChatRoomActionTypeParams) (entity.ChatRoomActionType, error)

	// UpdateChatRoomActionWithSdFunc mocks the UpdateChatRoomActionWithSd method.
	UpdateChatRoomActionWithSdFunc func(ctx context.Context, sd Sd, chatRoomActionID uuid.UUID, param parameter.UpdateChatRoomActionParam) (entity.ChatRoomAction, error)

	// UpdateChatRoomWithSdFunc mocks the UpdateChatRoomWithSd method.
	UpdateChatRoomWithSdFunc func(ctx context.Context, sd Sd, chatRoomID uuid.UUID, param parameter.UpdateChatRoomParams) (entity.ChatRoom, error)

	// UpdateEventTypeFunc mocks the UpdateEventType method.
	UpdateEventTypeFunc func(ctx context.Context, eventTypeID uuid.UUID, param parameter.UpdateEventTypeParams) (entity.EventType, error)

	// UpdateEventTypeByKeyFunc mocks the UpdateEventTypeByKey method.
	UpdateEventTypeByKeyFunc func(ctx context.Context, key string, param parameter.UpdateEventTypeByKeyParams) (entity.EventType, error)

	// UpdateEventTypeByKeyWithSdFunc mocks the UpdateEventTypeByKeyWithSd method.
	UpdateEventTypeByKeyWithSdFunc func(ctx context.Context, sd Sd, key string, param parameter.UpdateEventTypeByKeyParams) (entity.EventType, error)

	// UpdateEventTypeWithSdFunc mocks the UpdateEventTypeWithSd method.
	UpdateEventTypeWithSdFunc func(ctx context.Context, sd Sd, eventTypeID uuid.UUID, param parameter.UpdateEventTypeParams) (entity.EventType, error)

	// UpdateMemberFunc mocks the UpdateMember method.
	UpdateMemberFunc func(ctx context.Context, memberID uuid.UUID, param parameter.UpdateMemberParams) (entity.Member, error)

	// UpdateMemberAttendStatusFunc mocks the UpdateMemberAttendStatus method.
	UpdateMemberAttendStatusFunc func(ctx context.Context, memberID uuid.UUID, attendStatusID uuid.UUID) (entity.Member, error)

	// UpdateMemberAttendStatusWithSdFunc mocks the UpdateMemberAttendStatusWithSd method.
	UpdateMemberAttendStatusWithSdFunc func(ctx context.Context, sd Sd, memberID uuid.UUID, attendStatusID uuid.UUID) (entity.Member, error)

	// UpdateMemberGradeFunc mocks the UpdateMemberGrade method.
	UpdateMemberGradeFunc func(ctx context.Context, memberID uuid.UUID, gradeID uuid.UUID) (entity.Member, error)

	// UpdateMemberGradeWithSdFunc mocks the UpdateMemberGradeWithSd method.
	UpdateMemberGradeWithSdFunc func(ctx context.Context, sd Sd, memberID uuid.UUID, gradeID uuid.UUID) (entity.Member, error)

	// UpdateMemberGroupFunc mocks the UpdateMemberGroup method.
	UpdateMemberGroupFunc func(ctx context.Context, memberID uuid.UUID, groupID uuid.UUID) (entity.Member, error)

	// UpdateMemberGroupWithSdFunc mocks the UpdateMemberGroupWithSd method.
	UpdateMemberGroupWithSdFunc func(ctx context.Context, sd Sd, memberID uuid.UUID, groupID uuid.UUID) (entity.Member, error)

	// UpdateMemberLoginIDFunc mocks the UpdateMemberLoginID method.
	UpdateMemberLoginIDFunc func(ctx context.Context, memberID uuid.UUID, loginID string) (entity.Member, error)

	// UpdateMemberLoginIDWithSdFunc mocks the UpdateMemberLoginIDWithSd method.
	UpdateMemberLoginIDWithSdFunc func(ctx context.Context, sd Sd, memberID uuid.UUID, loginID string) (entity.Member, error)

	// UpdateMemberPasswordFunc mocks the UpdateMemberPassword method.
	UpdateMemberPasswordFunc func(ctx context.Context, memberID uuid.UUID, password string) (entity.Member, error)

	// UpdateMemberPasswordWithSdFunc mocks the UpdateMemberPasswordWithSd method.
	UpdateMemberPasswordWithSdFunc func(ctx context.Context, sd Sd, memberID uuid.UUID, password string) (entity.Member, error)

	// UpdateMemberRoleFunc mocks the UpdateMemberRole method.
	UpdateMemberRoleFunc func(ctx context.Context, memberID uuid.UUID, roleID entity.UUID) (entity.Member, error)

	// UpdateMemberRoleWithSdFunc mocks the UpdateMemberRoleWithSd method.
	UpdateMemberRoleWithSdFunc func(ctx context.Context, sd Sd, memberID uuid.UUID, roleID entity.UUID) (entity.Member, error)

	// UpdateMemberWithSdFunc mocks the UpdateMemberWithSd method.
	UpdateMemberWithSdFunc func(ctx context.Context, sd Sd, memberID uuid.UUID, param parameter.UpdateMemberParams) (entity.Member, error)

	// UpdateMessageFunc mocks the UpdateMessage method.
	UpdateMessageFunc func(ctx context.Context, messageID uuid.UUID, param parameter.UpdateMessageParams) (entity.Message, error)

	// UpdateMessageWithSdFunc mocks the UpdateMessageWithSd method.
	UpdateMessageWithSdFunc func(ctx context.Context, sd Sd, messageID uuid.UUID, param parameter.UpdateMessageParams) (entity.Message, error)

	// UpdateMimeTypeFunc mocks the UpdateMimeType method.
	UpdateMimeTypeFunc func(ctx context.Context, mimeTypeID uuid.UUID, param parameter.UpdateMimeTypeParams) (entity.MimeType, error)

	// UpdateMimeTypeByKeyFunc mocks the UpdateMimeTypeByKey method.
	UpdateMimeTypeByKeyFunc func(ctx context.Context, key string, param parameter.UpdateMimeTypeByKeyParams) (entity.MimeType, error)

	// UpdateMimeTypeByKeyWithSdFunc mocks the UpdateMimeTypeByKeyWithSd method.
	UpdateMimeTypeByKeyWithSdFunc func(ctx context.Context, sd Sd, key string, param parameter.UpdateMimeTypeByKeyParams) (entity.MimeType, error)

	// UpdateMimeTypeWithSdFunc mocks the UpdateMimeTypeWithSd method.
	UpdateMimeTypeWithSdFunc func(ctx context.Context, sd Sd, mimeTypeID uuid.UUID, param parameter.UpdateMimeTypeParams) (entity.MimeType, error)

	// UpdateOrganizationFunc mocks the UpdateOrganization method.
	UpdateOrganizationFunc func(ctx context.Context, organizationID uuid.UUID, param parameter.UpdateOrganizationParams) (entity.Organization, error)

	// UpdateOrganizationWithSdFunc mocks the UpdateOrganizationWithSd method.
	UpdateOrganizationWithSdFunc func(ctx context.Context, sd Sd, organizationID uuid.UUID, param parameter.UpdateOrganizationParams) (entity.Organization, error)

	// UpdatePermissionFunc mocks the UpdatePermission method.
	UpdatePermissionFunc func(ctx context.Context, permissionID uuid.UUID, param parameter.UpdatePermissionParams) (entity.Permission, error)

	// UpdatePermissionByKeyFunc mocks the UpdatePermissionByKey method.
	UpdatePermissionByKeyFunc func(ctx context.Context, key string, param parameter.UpdatePermissionByKeyParams) (entity.Permission, error)

	// UpdatePermissionByKeyWithSdFunc mocks the UpdatePermissionByKeyWithSd method.
	UpdatePermissionByKeyWithSdFunc func(ctx context.Context, sd Sd, key string, param parameter.UpdatePermissionByKeyParams) (entity.Permission, error)

	// UpdatePermissionCategoryFunc mocks the UpdatePermissionCategory method.
	UpdatePermissionCategoryFunc func(ctx context.Context, permissionCategoryID uuid.UUID, param parameter.UpdatePermissionCategoryParams) (entity.PermissionCategory, error)

	// UpdatePermissionCategoryByKeyFunc mocks the UpdatePermissionCategoryByKey method.
	UpdatePermissionCategoryByKeyFunc func(ctx context.Context, key string, param parameter.UpdatePermissionCategoryByKeyParams) (entity.PermissionCategory, error)

	// UpdatePermissionCategoryByKeyWithSdFunc mocks the UpdatePermissionCategoryByKeyWithSd method.
	UpdatePermissionCategoryByKeyWithSdFunc func(ctx context.Context, sd Sd, key string, param parameter.UpdatePermissionCategoryByKeyParams) (entity.PermissionCategory, error)

	// UpdatePermissionCategoryWithSdFunc mocks the UpdatePermissionCategoryWithSd method.
	UpdatePermissionCategoryWithSdFunc func(ctx context.Context, sd Sd, permissionCategoryID uuid.UUID, param parameter.UpdatePermissionCategoryParams) (entity.PermissionCategory, error)

	// UpdatePermissionWithSdFunc mocks the UpdatePermissionWithSd method.
	UpdatePermissionWithSdFunc func(ctx context.Context, sd Sd, permissionID uuid.UUID, param parameter.UpdatePermissionParams) (entity.Permission, error)

	// UpdatePolicyFunc mocks the UpdatePolicy method.
	UpdatePolicyFunc func(ctx context.Context, policyID uuid.UUID, param parameter.UpdatePolicyParams) (entity.Policy, error)

	// UpdatePolicyByKeyFunc mocks the UpdatePolicyByKey method.
	UpdatePolicyByKeyFunc func(ctx context.Context, key string, param parameter.UpdatePolicyByKeyParams) (entity.Policy, error)

	// UpdatePolicyByKeyWithSdFunc mocks the UpdatePolicyByKeyWithSd method.
	UpdatePolicyByKeyWithSdFunc func(ctx context.Context, sd Sd, key string, param parameter.UpdatePolicyByKeyParams) (entity.Policy, error)

	// UpdatePolicyCategoryFunc mocks the UpdatePolicyCategory method.
	UpdatePolicyCategoryFunc func(ctx context.Context, policyCategoryID uuid.UUID, param parameter.UpdatePolicyCategoryParams) (entity.PolicyCategory, error)

	// UpdatePolicyCategoryByKeyFunc mocks the UpdatePolicyCategoryByKey method.
	UpdatePolicyCategoryByKeyFunc func(ctx context.Context, key string, param parameter.UpdatePolicyCategoryByKeyParams) (entity.PolicyCategory, error)

	// UpdatePolicyCategoryByKeyWithSdFunc mocks the UpdatePolicyCategoryByKeyWithSd method.
	UpdatePolicyCategoryByKeyWithSdFunc func(ctx context.Context, sd Sd, key string, param parameter.UpdatePolicyCategoryByKeyParams) (entity.PolicyCategory, error)

	// UpdatePolicyCategoryWithSdFunc mocks the UpdatePolicyCategoryWithSd method.
	UpdatePolicyCategoryWithSdFunc func(ctx context.Context, sd Sd, policyCategoryID uuid.UUID, param parameter.UpdatePolicyCategoryParams) (entity.PolicyCategory, error)

	// UpdatePolicyWithSdFunc mocks the UpdatePolicyWithSd method.
	UpdatePolicyWithSdFunc func(ctx context.Context, sd Sd, policyID uuid.UUID, param parameter.UpdatePolicyParams) (entity.Policy, error)

	// UpdateRecordTypeFunc mocks the UpdateRecordType method.
	UpdateRecordTypeFunc func(ctx context.Context, recordTypeID uuid.UUID, param parameter.UpdateRecordTypeParams) (entity.RecordType, error)

	// UpdateRecordTypeByKeyFunc mocks the UpdateRecordTypeByKey method.
	UpdateRecordTypeByKeyFunc func(ctx context.Context, key string, param parameter.UpdateRecordTypeByKeyParams) (entity.RecordType, error)

	// UpdateRecordTypeByKeyWithSdFunc mocks the UpdateRecordTypeByKeyWithSd method.
	UpdateRecordTypeByKeyWithSdFunc func(ctx context.Context, sd Sd, key string, param parameter.UpdateRecordTypeByKeyParams) (entity.RecordType, error)

	// UpdateRecordTypeWithSdFunc mocks the UpdateRecordTypeWithSd method.
	UpdateRecordTypeWithSdFunc func(ctx context.Context, sd Sd, recordTypeID uuid.UUID, param parameter.UpdateRecordTypeParams) (entity.RecordType, error)

	// UpdateRoleFunc mocks the UpdateRole method.
	UpdateRoleFunc func(ctx context.Context, roleID uuid.UUID, param parameter.UpdateRoleParams) (entity.Role, error)

	// UpdateRoleWithSdFunc mocks the UpdateRoleWithSd method.
	UpdateRoleWithSdFunc func(ctx context.Context, sd Sd, roleID uuid.UUID, param parameter.UpdateRoleParams) (entity.Role, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddMemberToChatRoomAddMemberAction holds details about calls to the AddMemberToChatRoomAddMemberAction method.
		AddMemberToChatRoomAddMemberAction []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Param is the param argument value.
			Param parameter.CreateChatRoomAddedMemberParam
		}
		// AddMemberToChatRoomAddMemberActionWithSd holds details about calls to the AddMemberToChatRoomAddMemberActionWithSd method.
		AddMemberToChatRoomAddMemberActionWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Param is the param argument value.
			Param parameter.CreateChatRoomAddedMemberParam
		}
		// AddMembersToChatRoomAddMemberAction holds details about calls to the AddMembersToChatRoomAddMemberAction method.
		AddMembersToChatRoomAddMemberAction []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params []parameter.CreateChatRoomAddedMemberParam
		}
		// AddMembersToChatRoomAddMemberActionWithSd holds details about calls to the AddMembersToChatRoomAddMemberActionWithSd method.
		AddMembersToChatRoomAddMemberActionWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Params is the params argument value.
			Params []parameter.CreateChatRoomAddedMemberParam
		}
		// AssociateRole holds details about calls to the AssociateRole method.
		AssociateRole []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Param is the param argument value.
			Param parameter.AssociationRoleParam
		}
		// AssociateRoleWithSd holds details about calls to the AssociateRoleWithSd method.
		AssociateRoleWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Param is the param argument value.
			Param parameter.AssociationRoleParam
		}
		// AssociateRoles holds details about calls to the AssociateRoles method.
		AssociateRoles []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params []parameter.AssociationRoleParam
		}
		// AssociateRolesWithSd holds details about calls to the AssociateRolesWithSd method.
		AssociateRolesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Params is the params argument value.
			Params []parameter.AssociationRoleParam
		}
		// AttacheItemOnMessage holds details about calls to the AttacheItemOnMessage method.
		AttacheItemOnMessage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Param is the param argument value.
			Param parameter.AttachItemMessageParam
		}
		// AttacheItemOnMessageWithSd holds details about calls to the AttacheItemOnMessageWithSd method.
		AttacheItemOnMessageWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Param is the param argument value.
			Param parameter.AttachItemMessageParam
		}
		// AttacheItemsOnMessages holds details about calls to the AttacheItemsOnMessages method.
		AttacheItemsOnMessages []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params []parameter.AttachItemMessageParam
		}
		// AttacheItemsOnMessagesWithSd holds details about calls to the AttacheItemsOnMessagesWithSd method.
		AttacheItemsOnMessagesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Params is the params argument value.
			Params []parameter.AttachItemMessageParam
		}
		// Begin holds details about calls to the Begin method.
		Begin []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
		}
		// BelongChatRoom holds details about calls to the BelongChatRoom method.
		BelongChatRoom []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Param is the param argument value.
			Param parameter.BelongChatRoomParam
		}
		// BelongChatRoomWithSd holds details about calls to the BelongChatRoomWithSd method.
		BelongChatRoomWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Param is the param argument value.
			Param parameter.BelongChatRoomParam
		}
		// BelongChatRooms holds details about calls to the BelongChatRooms method.
		BelongChatRooms []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params []parameter.BelongChatRoomParam
		}
		// BelongChatRoomsWithSd holds details about calls to the BelongChatRoomsWithSd method.
		BelongChatRoomsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Params is the params argument value.
			Params []parameter.BelongChatRoomParam
		}
		// BelongOrganization holds details about calls to the BelongOrganization method.
		BelongOrganization []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Param is the param argument value.
			Param parameter.BelongOrganizationParam
		}
		// BelongOrganizationWithSd holds details about calls to the BelongOrganizationWithSd method.
		BelongOrganizationWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Param is the param argument value.
			Param parameter.BelongOrganizationParam
		}
		// BelongOrganizations holds details about calls to the BelongOrganizations method.
		BelongOrganizations []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params []parameter.BelongOrganizationParam
		}
		// BelongOrganizationsWithSd holds details about calls to the BelongOrganizationsWithSd method.
		BelongOrganizationsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Params is the params argument value.
			Params []parameter.BelongOrganizationParam
		}
		// Cleanup holds details about calls to the Cleanup method.
		Cleanup []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
		}
		// Commit holds details about calls to the Commit method.
		Commit []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// Sd is the sd argument value.
			Sd Sd
		}
		// CountAbsences holds details about calls to the CountAbsences method.
		CountAbsences []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// CountAbsencesWithSd holds details about calls to the CountAbsencesWithSd method.
		CountAbsencesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
		}
		// CountAttachableItems holds details about calls to the CountAttachableItems method.
		CountAttachableItems []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereAttachableItemParam
		}
		// CountAttachableItemsWithSd holds details about calls to the CountAttachableItemsWithSd method.
		CountAttachableItemsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereAttachableItemParam
		}
		// CountAttachedItemsOnChatRoom holds details about calls to the CountAttachedItemsOnChatRoom method.
		CountAttachedItemsOnChatRoom []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomID is the chatRoomID argument value.
			ChatRoomID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereAttachedItemOnChatRoomParam
		}
		// CountAttachedItemsOnChatRoomWithSd holds details about calls to the CountAttachedItemsOnChatRoomWithSd method.
		CountAttachedItemsOnChatRoomWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomID is the chatRoomID argument value.
			ChatRoomID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereAttachedItemOnChatRoomParam
		}
		// CountAttachedItemsOnMessage holds details about calls to the CountAttachedItemsOnMessage method.
		CountAttachedItemsOnMessage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MessageID is the messageID argument value.
			MessageID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereAttachedItemOnMessageParam
		}
		// CountAttachedItemsOnMessageWithSd holds details about calls to the CountAttachedItemsOnMessageWithSd method.
		CountAttachedItemsOnMessageWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MessageID is the messageID argument value.
			MessageID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereAttachedItemOnMessageParam
		}
		// CountAttendStatuses holds details about calls to the CountAttendStatuses method.
		CountAttendStatuses []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereAttendStatusParam
		}
		// CountAttendStatusesWithSd holds details about calls to the CountAttendStatusesWithSd method.
		CountAttendStatusesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereAttendStatusParam
		}
		// CountAttendanceTypes holds details about calls to the CountAttendanceTypes method.
		CountAttendanceTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereAttendanceTypeParam
		}
		// CountAttendanceTypesWithSd holds details about calls to the CountAttendanceTypesWithSd method.
		CountAttendanceTypesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereAttendanceTypeParam
		}
		// CountChatRoomActionTypes holds details about calls to the CountChatRoomActionTypes method.
		CountChatRoomActionTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereChatRoomActionTypeParam
		}
		// CountChatRoomActionTypesWithSd holds details about calls to the CountChatRoomActionTypesWithSd method.
		CountChatRoomActionTypesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereChatRoomActionTypeParam
		}
		// CountChatRoomActions holds details about calls to the CountChatRoomActions method.
		CountChatRoomActions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereChatRoomActionParam
		}
		// CountChatRoomActionsWithSd holds details about calls to the CountChatRoomActionsWithSd method.
		CountChatRoomActionsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereChatRoomActionParam
		}
		// CountChatRoomAddMemberActions holds details about calls to the CountChatRoomAddMemberActions method.
		CountChatRoomAddMemberActions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereChatRoomAddMemberActionParam
		}
		// CountChatRoomAddMemberActionsWithSd holds details about calls to the CountChatRoomAddMemberActionsWithSd method.
		CountChatRoomAddMemberActionsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereChatRoomAddMemberActionParam
		}
		// CountChatRoomCreateActions holds details about calls to the CountChatRoomCreateActions method.
		CountChatRoomCreateActions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereChatRoomCreateActionParam
		}
		// CountChatRoomCreateActionsWithSd holds details about calls to the CountChatRoomCreateActionsWithSd method.
		CountChatRoomCreateActionsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereChatRoomCreateActionParam
		}
		// CountChatRoomDeleteMessageActions holds details about calls to the CountChatRoomDeleteMessageActions method.
		CountChatRoomDeleteMessageActions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereChatRoomDeleteMessageActionParam
		}
		// CountChatRoomDeleteMessageActionsWithSd holds details about calls to the CountChatRoomDeleteMessageActionsWithSd method.
		CountChatRoomDeleteMessageActionsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereChatRoomDeleteMessageActionParam
		}
		// CountChatRoomRemoveMemberActions holds details about calls to the CountChatRoomRemoveMemberActions method.
		CountChatRoomRemoveMemberActions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereChatRoomRemoveMemberActionParam
		}
		// CountChatRoomRemoveMemberActionsWithSd holds details about calls to the CountChatRoomRemoveMemberActionsWithSd method.
		CountChatRoomRemoveMemberActionsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereChatRoomRemoveMemberActionParam
		}
		// CountChatRoomUpdateNameActions holds details about calls to the CountChatRoomUpdateNameActions method.
		CountChatRoomUpdateNameActions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereChatRoomUpdateNameActionParam
		}
		// CountChatRoomUpdateNameActionsWithSd holds details about calls to the CountChatRoomUpdateNameActionsWithSd method.
		CountChatRoomUpdateNameActionsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereChatRoomUpdateNameActionParam
		}
		// CountChatRoomWithdrawActions holds details about calls to the CountChatRoomWithdrawActions method.
		CountChatRoomWithdrawActions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereChatRoomWithdrawActionParam
		}
		// CountChatRoomWithdrawActionsWithSd holds details about calls to the CountChatRoomWithdrawActionsWithSd method.
		CountChatRoomWithdrawActionsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereChatRoomWithdrawActionParam
		}
		// CountChatRooms holds details about calls to the CountChatRooms method.
		CountChatRooms []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereChatRoomParam
		}
		// CountChatRoomsOnMember holds details about calls to the CountChatRoomsOnMember method.
		CountChatRoomsOnMember []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereChatRoomOnMemberParam
		}
		// CountChatRoomsOnMemberWithSd holds details about calls to the CountChatRoomsOnMemberWithSd method.
		CountChatRoomsOnMemberWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereChatRoomOnMemberParam
		}
		// CountChatRoomsWithSd holds details about calls to the CountChatRoomsWithSd method.
		CountChatRoomsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereChatRoomParam
		}
		// CountEventTypes holds details about calls to the CountEventTypes method.
		CountEventTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereEventTypeParam
		}
		// CountEventTypesWithSd holds details about calls to the CountEventTypesWithSd method.
		CountEventTypesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereEventTypeParam
		}
		// CountFiles holds details about calls to the CountFiles method.
		CountFiles []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereFileParam
		}
		// CountFilesWithSd holds details about calls to the CountFilesWithSd method.
		CountFilesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereFileParam
		}
		// CountGrades holds details about calls to the CountGrades method.
		CountGrades []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereGradeParam
		}
		// CountGradesWithSd holds details about calls to the CountGradesWithSd method.
		CountGradesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereGradeParam
		}
		// CountGroups holds details about calls to the CountGroups method.
		CountGroups []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereGroupParam
		}
		// CountGroupsWithSd holds details about calls to the CountGroupsWithSd method.
		CountGroupsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereGroupParam
		}
		// CountImages holds details about calls to the CountImages method.
		CountImages []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereImageParam
		}
		// CountImagesWithSd holds details about calls to the CountImagesWithSd method.
		CountImagesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereImageParam
		}
		// CountMembers holds details about calls to the CountMembers method.
		CountMembers []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereMemberParam
		}
		// CountMembersOnChatRoom holds details about calls to the CountMembersOnChatRoom method.
		CountMembersOnChatRoom []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomID is the chatRoomID argument value.
			ChatRoomID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereMemberOnChatRoomParam
		}
		// CountMembersOnChatRoomAddMemberAction holds details about calls to the CountMembersOnChatRoomAddMemberAction method.
		CountMembersOnChatRoomAddMemberAction []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomAddMemberActionID is the chatRoomAddMemberActionID argument value.
			ChatRoomAddMemberActionID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereMemberOnChatRoomAddMemberActionParam
		}
		// CountMembersOnChatRoomAddMemberActionWithSd holds details about calls to the CountMembersOnChatRoomAddMemberActionWithSd method.
		CountMembersOnChatRoomAddMemberActionWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomAddMemberActionID is the chatRoomAddMemberActionID argument value.
			ChatRoomAddMemberActionID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereMemberOnChatRoomAddMemberActionParam
		}
		// CountMembersOnChatRoomRemoveMemberAction holds details about calls to the CountMembersOnChatRoomRemoveMemberAction method.
		CountMembersOnChatRoomRemoveMemberAction []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomRemoveMemberActionID is the chatRoomRemoveMemberActionID argument value.
			ChatRoomRemoveMemberActionID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereMemberOnChatRoomRemoveMemberActionParam
		}
		// CountMembersOnChatRoomRemoveMemberActionWithSd holds details about calls to the CountMembersOnChatRoomRemoveMemberActionWithSd method.
		CountMembersOnChatRoomRemoveMemberActionWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomRemoveMemberActionID is the chatRoomRemoveMemberActionID argument value.
			ChatRoomRemoveMemberActionID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereMemberOnChatRoomRemoveMemberActionParam
		}
		// CountMembersOnChatRoomWithSd holds details about calls to the CountMembersOnChatRoomWithSd method.
		CountMembersOnChatRoomWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomID is the chatRoomID argument value.
			ChatRoomID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereMemberOnChatRoomParam
		}
		// CountMembersOnOrganization holds details about calls to the CountMembersOnOrganization method.
		CountMembersOnOrganization []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// OrganizationID is the organizationID argument value.
			OrganizationID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereMemberOnOrganizationParam
		}
		// CountMembersOnOrganizationWithSd holds details about calls to the CountMembersOnOrganizationWithSd method.
		CountMembersOnOrganizationWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// OrganizationID is the organizationID argument value.
			OrganizationID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereMemberOnOrganizationParam
		}
		// CountMembersWithSd holds details about calls to the CountMembersWithSd method.
		CountMembersWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereMemberParam
		}
		// CountMessages holds details about calls to the CountMessages method.
		CountMessages []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereMessageParam
		}
		// CountMessagesWithSd holds details about calls to the CountMessagesWithSd method.
		CountMessagesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereMessageParam
		}
		// CountMimeTypes holds details about calls to the CountMimeTypes method.
		CountMimeTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereMimeTypeParam
		}
		// CountMimeTypesWithSd holds details about calls to the CountMimeTypesWithSd method.
		CountMimeTypesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereMimeTypeParam
		}
		// CountOrganizations holds details about calls to the CountOrganizations method.
		CountOrganizations []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereOrganizationParam
		}
		// CountOrganizationsOnMember holds details about calls to the CountOrganizationsOnMember method.
		CountOrganizationsOnMember []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereOrganizationOnMemberParam
		}
		// CountOrganizationsOnMemberWithSd holds details about calls to the CountOrganizationsOnMemberWithSd method.
		CountOrganizationsOnMemberWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereOrganizationOnMemberParam
		}
		// CountOrganizationsWithSd holds details about calls to the CountOrganizationsWithSd method.
		CountOrganizationsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereOrganizationParam
		}
		// CountPermissionCategories holds details about calls to the CountPermissionCategories method.
		CountPermissionCategories []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WherePermissionCategoryParam
		}
		// CountPermissionCategoriesWithSd holds details about calls to the CountPermissionCategoriesWithSd method.
		CountPermissionCategoriesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WherePermissionCategoryParam
		}
		// CountPermissions holds details about calls to the CountPermissions method.
		CountPermissions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WherePermissionParam
		}
		// CountPermissionsWithSd holds details about calls to the CountPermissionsWithSd method.
		CountPermissionsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WherePermissionParam
		}
		// CountPolicies holds details about calls to the CountPolicies method.
		CountPolicies []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WherePolicyParam
		}
		// CountPoliciesOnRole holds details about calls to the CountPoliciesOnRole method.
		CountPoliciesOnRole []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// RoleID is the roleID argument value.
			RoleID uuid.UUID
			// Where is the where argument value.
			Where parameter.WherePolicyOnRoleParam
		}
		// CountPoliciesOnRoleWithSd holds details about calls to the CountPoliciesOnRoleWithSd method.
		CountPoliciesOnRoleWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// RoleID is the roleID argument value.
			RoleID uuid.UUID
			// Where is the where argument value.
			Where parameter.WherePolicyOnRoleParam
		}
		// CountPoliciesWithSd holds details about calls to the CountPoliciesWithSd method.
		CountPoliciesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WherePolicyParam
		}
		// CountPolicyCategories holds details about calls to the CountPolicyCategories method.
		CountPolicyCategories []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WherePolicyCategoryParam
		}
		// CountPolicyCategoriesWithSd holds details about calls to the CountPolicyCategoriesWithSd method.
		CountPolicyCategoriesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WherePolicyCategoryParam
		}
		// CountProfessors holds details about calls to the CountProfessors method.
		CountProfessors []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereProfessorParam
		}
		// CountProfessorsWithSd holds details about calls to the CountProfessorsWithSd method.
		CountProfessorsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereProfessorParam
		}
		// CountReadableMembersOnMessage holds details about calls to the CountReadableMembersOnMessage method.
		CountReadableMembersOnMessage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MessageID is the messageID argument value.
			MessageID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereReadableMemberOnMessageParam
		}
		// CountReadableMembersOnMessageWithSd holds details about calls to the CountReadableMembersOnMessageWithSd method.
		CountReadableMembersOnMessageWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MessageID is the messageID argument value.
			MessageID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereReadableMemberOnMessageParam
		}
		// CountReadableMessagesOnChatRoomAndMember holds details about calls to the CountReadableMessagesOnChatRoomAndMember method.
		CountReadableMessagesOnChatRoomAndMember []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomID is the chatRoomID argument value.
			ChatRoomID uuid.UUID
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereReadableMessageOnChatRoomAndMemberParam
		}
		// CountReadableMessagesOnChatRoomAndMemberWithSd holds details about calls to the CountReadableMessagesOnChatRoomAndMemberWithSd method.
		CountReadableMessagesOnChatRoomAndMemberWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomID is the chatRoomID argument value.
			ChatRoomID uuid.UUID
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereReadableMessageOnChatRoomAndMemberParam
		}
		// CountReadableMessagesOnChatRooms holds details about calls to the CountReadableMessagesOnChatRooms method.
		CountReadableMessagesOnChatRooms []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomIDs is the chatRoomIDs argument value.
			ChatRoomIDs []uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereReadableMessageOnChatRoomAndMemberParam
		}
		// CountReadableMessagesOnChatRoomsAndMember holds details about calls to the CountReadableMessagesOnChatRoomsAndMember method.
		CountReadableMessagesOnChatRoomsAndMember []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomIDs is the chatRoomIDs argument value.
			ChatRoomIDs []uuid.UUID
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereReadableMessageOnChatRoomAndMemberParam
		}
		// CountReadableMessagesOnChatRoomsAndMemberWithSd holds details about calls to the CountReadableMessagesOnChatRoomsAndMemberWithSd method.
		CountReadableMessagesOnChatRoomsAndMemberWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomIDs is the chatRoomIDs argument value.
			ChatRoomIDs []uuid.UUID
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereReadableMessageOnChatRoomAndMemberParam
		}
		// CountReadableMessagesOnChatRoomsWithSd holds details about calls to the CountReadableMessagesOnChatRoomsWithSd method.
		CountReadableMessagesOnChatRoomsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomIDs is the chatRoomIDs argument value.
			ChatRoomIDs []uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereReadableMessageOnChatRoomAndMemberParam
		}
		// CountReadableMessagesOnMember holds details about calls to the CountReadableMessagesOnMember method.
		CountReadableMessagesOnMember []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereReadableMessageOnChatRoomAndMemberParam
		}
		// CountReadableMessagesOnMemberWithSd holds details about calls to the CountReadableMessagesOnMemberWithSd method.
		CountReadableMessagesOnMemberWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereReadableMessageOnChatRoomAndMemberParam
		}
		// CountReadsOnMessages holds details about calls to the CountReadsOnMessages method.
		CountReadsOnMessages []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MessageIDs is the messageIDs argument value.
			MessageIDs []uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereReadsOnMessageParam
		}
		// CountReadsOnMessagesWithSd holds details about calls to the CountReadsOnMessagesWithSd method.
		CountReadsOnMessagesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MessageIDs is the messageIDs argument value.
			MessageIDs []uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereReadsOnMessageParam
		}
		// CountRecordTypes holds details about calls to the CountRecordTypes method.
		CountRecordTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereRecordTypeParam
		}
		// CountRecordTypesWithSd holds details about calls to the CountRecordTypesWithSd method.
		CountRecordTypesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereRecordTypeParam
		}
		// CountRoles holds details about calls to the CountRoles method.
		CountRoles []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereRoleParam
		}
		// CountRolesOnPolicy holds details about calls to the CountRolesOnPolicy method.
		CountRolesOnPolicy []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PolicyID is the policyID argument value.
			PolicyID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereRoleOnPolicyParam
		}
		// CountRolesOnPolicyWithSd holds details about calls to the CountRolesOnPolicyWithSd method.
		CountRolesOnPolicyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// PolicyID is the policyID argument value.
			PolicyID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereRoleOnPolicyParam
		}
		// CountRolesWithSd holds details about calls to the CountRolesWithSd method.
		CountRolesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereRoleParam
		}
		// CountStudents holds details about calls to the CountStudents method.
		CountStudents []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereStudentParam
		}
		// CountStudentsWithSd holds details about calls to the CountStudentsWithSd method.
		CountStudentsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereStudentParam
		}
		// CreateAbsence holds details about calls to the CreateAbsence method.
		CreateAbsence []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Param is the param argument value.
			Param parameter.CreateAbsenceParam
		}
		// CreateAbsenceWithSd holds details about calls to the CreateAbsenceWithSd method.
		CreateAbsenceWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Param is the param argument value.
			Param parameter.CreateAbsenceParam
		}
		// CreateAbsences holds details about calls to the CreateAbsences method.
		CreateAbsences []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params []parameter.CreateAbsenceParam
		}
		// CreateAbsencesWithSd holds details about calls to the CreateAbsencesWithSd method.
		CreateAbsencesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Params is the params argument value.
			Params []parameter.CreateAbsenceParam
		}
		// CreateAttachableItem holds details about calls to the CreateAttachableItem method.
		CreateAttachableItem []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Param is the param argument value.
			Param parameter.CreateAttachableItemParam
		}
		// CreateAttachableItemWithSd holds details about calls to the CreateAttachableItemWithSd method.
		CreateAttachableItemWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Param is the param argument value.
			Param parameter.CreateAttachableItemParam
		}
		// CreateAttachableItems holds details about calls to the CreateAttachableItems method.
		CreateAttachableItems []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params []parameter.CreateAttachableItemParam
		}
		// CreateAttachableItemsWithSd holds details about calls to the CreateAttachableItemsWithSd method.
		CreateAttachableItemsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Params is the params argument value.
			Params []parameter.CreateAttachableItemParam
		}
		// CreateAttendStatus holds details about calls to the CreateAttendStatus method.
		CreateAttendStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Param is the param argument value.
			Param parameter.CreateAttendStatusParam
		}
		// CreateAttendStatusWithSd holds details about calls to the CreateAttendStatusWithSd method.
		CreateAttendStatusWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Param is the param argument value.
			Param parameter.CreateAttendStatusParam
		}
		// CreateAttendStatuses holds details about calls to the CreateAttendStatuses method.
		CreateAttendStatuses []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params []parameter.CreateAttendStatusParam
		}
		// CreateAttendStatusesWithSd holds details about calls to the CreateAttendStatusesWithSd method.
		CreateAttendStatusesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Params is the params argument value.
			Params []parameter.CreateAttendStatusParam
		}
		// CreateAttendanceType holds details about calls to the CreateAttendanceType method.
		CreateAttendanceType []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Param is the param argument value.
			Param parameter.CreateAttendanceTypeParam
		}
		// CreateAttendanceTypeWithSd holds details about calls to the CreateAttendanceTypeWithSd method.
		CreateAttendanceTypeWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Param is the param argument value.
			Param parameter.CreateAttendanceTypeParam
		}
		// CreateAttendanceTypes holds details about calls to the CreateAttendanceTypes method.
		CreateAttendanceTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params []parameter.CreateAttendanceTypeParam
		}
		// CreateAttendanceTypesWithSd holds details about calls to the CreateAttendanceTypesWithSd method.
		CreateAttendanceTypesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Params is the params argument value.
			Params []parameter.CreateAttendanceTypeParam
		}
		// CreateChatRoom holds details about calls to the CreateChatRoom method.
		CreateChatRoom []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Param is the param argument value.
			Param parameter.CreateChatRoomParam
		}
		// CreateChatRoomAction holds details about calls to the CreateChatRoomAction method.
		CreateChatRoomAction []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Param is the param argument value.
			Param parameter.CreateChatRoomActionParam
		}
		// CreateChatRoomActionType holds details about calls to the CreateChatRoomActionType method.
		CreateChatRoomActionType []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Param is the param argument value.
			Param parameter.CreateChatRoomActionTypeParam
		}
		// CreateChatRoomActionTypeWithSd holds details about calls to the CreateChatRoomActionTypeWithSd method.
		CreateChatRoomActionTypeWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Param is the param argument value.
			Param parameter.CreateChatRoomActionTypeParam
		}
		// CreateChatRoomActionTypes holds details about calls to the CreateChatRoomActionTypes method.
		CreateChatRoomActionTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params []parameter.CreateChatRoomActionTypeParam
		}
		// CreateChatRoomActionTypesWithSd holds details about calls to the CreateChatRoomActionTypesWithSd method.
		CreateChatRoomActionTypesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Params is the params argument value.
			Params []parameter.CreateChatRoomActionTypeParam
		}
		// CreateChatRoomActionWithSd holds details about calls to the CreateChatRoomActionWithSd method.
		CreateChatRoomActionWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Param is the param argument value.
			Param parameter.CreateChatRoomActionParam
		}
		// CreateChatRoomActions holds details about calls to the CreateChatRoomActions method.
		CreateChatRoomActions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params []parameter.CreateChatRoomActionParam
		}
		// CreateChatRoomActionsWithSd holds details about calls to the CreateChatRoomActionsWithSd method.
		CreateChatRoomActionsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Params is the params argument value.
			Params []parameter.CreateChatRoomActionParam
		}
		// CreateChatRoomAddMemberAction holds details about calls to the CreateChatRoomAddMemberAction method.
		CreateChatRoomAddMemberAction []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Param is the param argument value.
			Param parameter.CreateChatRoomAddMemberActionParam
		}
		// CreateChatRoomAddMemberActionWithSd holds details about calls to the CreateChatRoomAddMemberActionWithSd method.
		CreateChatRoomAddMemberActionWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Param is the param argument value.
			Param parameter.CreateChatRoomAddMemberActionParam
		}
		// CreateChatRoomAddMemberActions holds details about calls to the CreateChatRoomAddMemberActions method.
		CreateChatRoomAddMemberActions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params []parameter.CreateChatRoomAddMemberActionParam
		}
		// CreateChatRoomAddMemberActionsWithSd holds details about calls to the CreateChatRoomAddMemberActionsWithSd method.
		CreateChatRoomAddMemberActionsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Params is the params argument value.
			Params []parameter.CreateChatRoomAddMemberActionParam
		}
		// CreateChatRoomCreateAction holds details about calls to the CreateChatRoomCreateAction method.
		CreateChatRoomCreateAction []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Param is the param argument value.
			Param parameter.CreateChatRoomCreateActionParam
		}
		// CreateChatRoomCreateActionWithSd holds details about calls to the CreateChatRoomCreateActionWithSd method.
		CreateChatRoomCreateActionWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Param is the param argument value.
			Param parameter.CreateChatRoomCreateActionParam
		}
		// CreateChatRoomCreateActions holds details about calls to the CreateChatRoomCreateActions method.
		CreateChatRoomCreateActions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params []parameter.CreateChatRoomCreateActionParam
		}
		// CreateChatRoomCreateActionsWithSd holds details about calls to the CreateChatRoomCreateActionsWithSd method.
		CreateChatRoomCreateActionsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Params is the params argument value.
			Params []parameter.CreateChatRoomCreateActionParam
		}
		// CreateChatRoomDeleteMessageAction holds details about calls to the CreateChatRoomDeleteMessageAction method.
		CreateChatRoomDeleteMessageAction []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Param is the param argument value.
			Param parameter.CreateChatRoomDeleteMessageActionParam
		}
		// CreateChatRoomDeleteMessageActionWithSd holds details about calls to the CreateChatRoomDeleteMessageActionWithSd method.
		CreateChatRoomDeleteMessageActionWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Param is the param argument value.
			Param parameter.CreateChatRoomDeleteMessageActionParam
		}
		// CreateChatRoomDeleteMessageActions holds details about calls to the CreateChatRoomDeleteMessageActions method.
		CreateChatRoomDeleteMessageActions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params []parameter.CreateChatRoomDeleteMessageActionParam
		}
		// CreateChatRoomDeleteMessageActionsWithSd holds details about calls to the CreateChatRoomDeleteMessageActionsWithSd method.
		CreateChatRoomDeleteMessageActionsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Params is the params argument value.
			Params []parameter.CreateChatRoomDeleteMessageActionParam
		}
		// CreateChatRoomRemoveMemberAction holds details about calls to the CreateChatRoomRemoveMemberAction method.
		CreateChatRoomRemoveMemberAction []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Param is the param argument value.
			Param parameter.CreateChatRoomRemoveMemberActionParam
		}
		// CreateChatRoomRemoveMemberActionWithSd holds details about calls to the CreateChatRoomRemoveMemberActionWithSd method.
		CreateChatRoomRemoveMemberActionWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Param is the param argument value.
			Param parameter.CreateChatRoomRemoveMemberActionParam
		}
		// CreateChatRoomRemoveMemberActions holds details about calls to the CreateChatRoomRemoveMemberActions method.
		CreateChatRoomRemoveMemberActions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params []parameter.CreateChatRoomRemoveMemberActionParam
		}
		// CreateChatRoomRemoveMemberActionsWithSd holds details about calls to the CreateChatRoomRemoveMemberActionsWithSd method.
		CreateChatRoomRemoveMemberActionsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Params is the params argument value.
			Params []parameter.CreateChatRoomRemoveMemberActionParam
		}
		// CreateChatRoomUpdateNameAction holds details about calls to the CreateChatRoomUpdateNameAction method.
		CreateChatRoomUpdateNameAction []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Param is the param argument value.
			Param parameter.CreateChatRoomUpdateNameActionParam
		}
		// CreateChatRoomUpdateNameActionWithSd holds details about calls to the CreateChatRoomUpdateNameActionWithSd method.
		CreateChatRoomUpdateNameActionWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Param is the param argument value.
			Param parameter.CreateChatRoomUpdateNameActionParam
		}
		// CreateChatRoomUpdateNameActions holds details about calls to the CreateChatRoomUpdateNameActions method.
		CreateChatRoomUpdateNameActions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params []parameter.CreateChatRoomUpdateNameActionParam
		}
		// CreateChatRoomUpdateNameActionsWithSd holds details about calls to the CreateChatRoomUpdateNameActionsWithSd method.
		CreateChatRoomUpdateNameActionsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Params is the params argument value.
			Params []parameter.CreateChatRoomUpdateNameActionParam
		}
		// CreateChatRoomWithSd holds details about calls to the CreateChatRoomWithSd method.
		CreateChatRoomWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Param is the param argument value.
			Param parameter.CreateChatRoomParam
		}
		// CreateChatRoomWithdrawAction holds details about calls to the CreateChatRoomWithdrawAction method.
		CreateChatRoomWithdrawAction []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Param is the param argument value.
			Param parameter.CreateChatRoomWithdrawActionParam
		}
		// CreateChatRoomWithdrawActionWithSd holds details about calls to the CreateChatRoomWithdrawActionWithSd method.
		CreateChatRoomWithdrawActionWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Param is the param argument value.
			Param parameter.CreateChatRoomWithdrawActionParam
		}
		// CreateChatRoomWithdrawActions holds details about calls to the CreateChatRoomWithdrawActions method.
		CreateChatRoomWithdrawActions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params []parameter.CreateChatRoomWithdrawActionParam
		}
		// CreateChatRoomWithdrawActionsWithSd holds details about calls to the CreateChatRoomWithdrawActionsWithSd method.
		CreateChatRoomWithdrawActionsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Params is the params argument value.
			Params []parameter.CreateChatRoomWithdrawActionParam
		}
		// CreateChatRooms holds details about calls to the CreateChatRooms method.
		CreateChatRooms []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params []parameter.CreateChatRoomParam
		}
		// CreateChatRoomsWithSd holds details about calls to the CreateChatRoomsWithSd method.
		CreateChatRoomsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Params is the params argument value.
			Params []parameter.CreateChatRoomParam
		}
		// CreateEventType holds details about calls to the CreateEventType method.
		CreateEventType []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Param is the param argument value.
			Param parameter.CreateEventTypeParam
		}
		// CreateEventTypeWithSd holds details about calls to the CreateEventTypeWithSd method.
		CreateEventTypeWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Param is the param argument value.
			Param parameter.CreateEventTypeParam
		}
		// CreateEventTypes holds details about calls to the CreateEventTypes method.
		CreateEventTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params []parameter.CreateEventTypeParam
		}
		// CreateEventTypesWithSd holds details about calls to the CreateEventTypesWithSd method.
		CreateEventTypesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Params is the params argument value.
			Params []parameter.CreateEventTypeParam
		}
		// CreateFile holds details about calls to the CreateFile method.
		CreateFile []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Param is the param argument value.
			Param parameter.CreateFileParam
		}
		// CreateFileWithSd holds details about calls to the CreateFileWithSd method.
		CreateFileWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Param is the param argument value.
			Param parameter.CreateFileParam
		}
		// CreateFiles holds details about calls to the CreateFiles method.
		CreateFiles []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params []parameter.CreateFileParam
		}
		// CreateFilesWithSd holds details about calls to the CreateFilesWithSd method.
		CreateFilesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Params is the params argument value.
			Params []parameter.CreateFileParam
		}
		// CreateGrade holds details about calls to the CreateGrade method.
		CreateGrade []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Param is the param argument value.
			Param parameter.CreateGradeParam
		}
		// CreateGradeWithSd holds details about calls to the CreateGradeWithSd method.
		CreateGradeWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Param is the param argument value.
			Param parameter.CreateGradeParam
		}
		// CreateGrades holds details about calls to the CreateGrades method.
		CreateGrades []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params []parameter.CreateGradeParam
		}
		// CreateGradesWithSd holds details about calls to the CreateGradesWithSd method.
		CreateGradesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Params is the params argument value.
			Params []parameter.CreateGradeParam
		}
		// CreateGroup holds details about calls to the CreateGroup method.
		CreateGroup []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Param is the param argument value.
			Param parameter.CreateGroupParam
		}
		// CreateGroupWithSd holds details about calls to the CreateGroupWithSd method.
		CreateGroupWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Param is the param argument value.
			Param parameter.CreateGroupParam
		}
		// CreateGroups holds details about calls to the CreateGroups method.
		CreateGroups []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params []parameter.CreateGroupParam
		}
		// CreateGroupsWithSd holds details about calls to the CreateGroupsWithSd method.
		CreateGroupsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Params is the params argument value.
			Params []parameter.CreateGroupParam
		}
		// CreateImage holds details about calls to the CreateImage method.
		CreateImage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Param is the param argument value.
			Param parameter.CreateImageParam
		}
		// CreateImageWithSd holds details about calls to the CreateImageWithSd method.
		CreateImageWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Param is the param argument value.
			Param parameter.CreateImageParam
		}
		// CreateImages holds details about calls to the CreateImages method.
		CreateImages []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params []parameter.CreateImageParam
		}
		// CreateImagesWithSd holds details about calls to the CreateImagesWithSd method.
		CreateImagesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Params is the params argument value.
			Params []parameter.CreateImageParam
		}
		// CreateMember holds details about calls to the CreateMember method.
		CreateMember []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Param is the param argument value.
			Param parameter.CreateMemberParam
		}
		// CreateMemberWithSd holds details about calls to the CreateMemberWithSd method.
		CreateMemberWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Param is the param argument value.
			Param parameter.CreateMemberParam
		}
		// CreateMembers holds details about calls to the CreateMembers method.
		CreateMembers []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params []parameter.CreateMemberParam
		}
		// CreateMembersWithSd holds details about calls to the CreateMembersWithSd method.
		CreateMembersWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Params is the params argument value.
			Params []parameter.CreateMemberParam
		}
		// CreateMessage holds details about calls to the CreateMessage method.
		CreateMessage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Param is the param argument value.
			Param parameter.CreateMessageParam
		}
		// CreateMessageWithSd holds details about calls to the CreateMessageWithSd method.
		CreateMessageWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Param is the param argument value.
			Param parameter.CreateMessageParam
		}
		// CreateMessages holds details about calls to the CreateMessages method.
		CreateMessages []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params []parameter.CreateMessageParam
		}
		// CreateMessagesWithSd holds details about calls to the CreateMessagesWithSd method.
		CreateMessagesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Params is the params argument value.
			Params []parameter.CreateMessageParam
		}
		// CreateMimeType holds details about calls to the CreateMimeType method.
		CreateMimeType []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Param is the param argument value.
			Param parameter.CreateMimeTypeParam
		}
		// CreateMimeTypeWithSd holds details about calls to the CreateMimeTypeWithSd method.
		CreateMimeTypeWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Param is the param argument value.
			Param parameter.CreateMimeTypeParam
		}
		// CreateMimeTypes holds details about calls to the CreateMimeTypes method.
		CreateMimeTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params []parameter.CreateMimeTypeParam
		}
		// CreateMimeTypesWithSd holds details about calls to the CreateMimeTypesWithSd method.
		CreateMimeTypesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Params is the params argument value.
			Params []parameter.CreateMimeTypeParam
		}
		// CreateOrganization holds details about calls to the CreateOrganization method.
		CreateOrganization []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Param is the param argument value.
			Param parameter.CreateOrganizationParam
		}
		// CreateOrganizationWithSd holds details about calls to the CreateOrganizationWithSd method.
		CreateOrganizationWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Param is the param argument value.
			Param parameter.CreateOrganizationParam
		}
		// CreateOrganizations holds details about calls to the CreateOrganizations method.
		CreateOrganizations []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params []parameter.CreateOrganizationParam
		}
		// CreateOrganizationsWithSd holds details about calls to the CreateOrganizationsWithSd method.
		CreateOrganizationsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Params is the params argument value.
			Params []parameter.CreateOrganizationParam
		}
		// CreatePermission holds details about calls to the CreatePermission method.
		CreatePermission []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Param is the param argument value.
			Param parameter.CreatePermissionParam
		}
		// CreatePermissionCategories holds details about calls to the CreatePermissionCategories method.
		CreatePermissionCategories []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params []parameter.CreatePermissionCategoryParam
		}
		// CreatePermissionCategoriesWithSd holds details about calls to the CreatePermissionCategoriesWithSd method.
		CreatePermissionCategoriesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Params is the params argument value.
			Params []parameter.CreatePermissionCategoryParam
		}
		// CreatePermissionCategory holds details about calls to the CreatePermissionCategory method.
		CreatePermissionCategory []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Param is the param argument value.
			Param parameter.CreatePermissionCategoryParam
		}
		// CreatePermissionCategoryWithSd holds details about calls to the CreatePermissionCategoryWithSd method.
		CreatePermissionCategoryWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Param is the param argument value.
			Param parameter.CreatePermissionCategoryParam
		}
		// CreatePermissionWithSd holds details about calls to the CreatePermissionWithSd method.
		CreatePermissionWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Param is the param argument value.
			Param parameter.CreatePermissionParam
		}
		// CreatePermissions holds details about calls to the CreatePermissions method.
		CreatePermissions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params []parameter.CreatePermissionParam
		}
		// CreatePermissionsWithSd holds details about calls to the CreatePermissionsWithSd method.
		CreatePermissionsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Params is the params argument value.
			Params []parameter.CreatePermissionParam
		}
		// CreatePolicies holds details about calls to the CreatePolicies method.
		CreatePolicies []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params []parameter.CreatePolicyParam
		}
		// CreatePoliciesWithSd holds details about calls to the CreatePoliciesWithSd method.
		CreatePoliciesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Params is the params argument value.
			Params []parameter.CreatePolicyParam
		}
		// CreatePolicy holds details about calls to the CreatePolicy method.
		CreatePolicy []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Param is the param argument value.
			Param parameter.CreatePolicyParam
		}
		// CreatePolicyCategories holds details about calls to the CreatePolicyCategories method.
		CreatePolicyCategories []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params []parameter.CreatePolicyCategoryParam
		}
		// CreatePolicyCategoriesWithSd holds details about calls to the CreatePolicyCategoriesWithSd method.
		CreatePolicyCategoriesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Params is the params argument value.
			Params []parameter.CreatePolicyCategoryParam
		}
		// CreatePolicyCategory holds details about calls to the CreatePolicyCategory method.
		CreatePolicyCategory []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Param is the param argument value.
			Param parameter.CreatePolicyCategoryParam
		}
		// CreatePolicyCategoryWithSd holds details about calls to the CreatePolicyCategoryWithSd method.
		CreatePolicyCategoryWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Param is the param argument value.
			Param parameter.CreatePolicyCategoryParam
		}
		// CreatePolicyWithSd holds details about calls to the CreatePolicyWithSd method.
		CreatePolicyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Param is the param argument value.
			Param parameter.CreatePolicyParam
		}
		// CreateProfessor holds details about calls to the CreateProfessor method.
		CreateProfessor []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Param is the param argument value.
			Param parameter.CreateProfessorParam
		}
		// CreateProfessorWithSd holds details about calls to the CreateProfessorWithSd method.
		CreateProfessorWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Param is the param argument value.
			Param parameter.CreateProfessorParam
		}
		// CreateProfessors holds details about calls to the CreateProfessors method.
		CreateProfessors []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params []parameter.CreateProfessorParam
		}
		// CreateProfessorsWithSd holds details about calls to the CreateProfessorsWithSd method.
		CreateProfessorsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Params is the params argument value.
			Params []parameter.CreateProfessorParam
		}
		// CreateReadReceipt holds details about calls to the CreateReadReceipt method.
		CreateReadReceipt []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Param is the param argument value.
			Param parameter.CreateReadReceiptParam
		}
		// CreateReadReceiptWithSd holds details about calls to the CreateReadReceiptWithSd method.
		CreateReadReceiptWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Param is the param argument value.
			Param parameter.CreateReadReceiptParam
		}
		// CreateReadReceipts holds details about calls to the CreateReadReceipts method.
		CreateReadReceipts []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params []parameter.CreateReadReceiptParam
		}
		// CreateReadReceiptsWithSd holds details about calls to the CreateReadReceiptsWithSd method.
		CreateReadReceiptsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Params is the params argument value.
			Params []parameter.CreateReadReceiptParam
		}
		// CreateRecordType holds details about calls to the CreateRecordType method.
		CreateRecordType []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Param is the param argument value.
			Param parameter.CreateRecordTypeParam
		}
		// CreateRecordTypeWithSd holds details about calls to the CreateRecordTypeWithSd method.
		CreateRecordTypeWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Param is the param argument value.
			Param parameter.CreateRecordTypeParam
		}
		// CreateRecordTypes holds details about calls to the CreateRecordTypes method.
		CreateRecordTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params []parameter.CreateRecordTypeParam
		}
		// CreateRecordTypesWithSd holds details about calls to the CreateRecordTypesWithSd method.
		CreateRecordTypesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Params is the params argument value.
			Params []parameter.CreateRecordTypeParam
		}
		// CreateRole holds details about calls to the CreateRole method.
		CreateRole []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Param is the param argument value.
			Param parameter.CreateRoleParam
		}
		// CreateRoleWithSd holds details about calls to the CreateRoleWithSd method.
		CreateRoleWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Param is the param argument value.
			Param parameter.CreateRoleParam
		}
		// CreateRoles holds details about calls to the CreateRoles method.
		CreateRoles []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params []parameter.CreateRoleParam
		}
		// CreateRolesWithSd holds details about calls to the CreateRolesWithSd method.
		CreateRolesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Params is the params argument value.
			Params []parameter.CreateRoleParam
		}
		// CreateStudent holds details about calls to the CreateStudent method.
		CreateStudent []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Param is the param argument value.
			Param parameter.CreateStudentParam
		}
		// CreateStudentWithSd holds details about calls to the CreateStudentWithSd method.
		CreateStudentWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Param is the param argument value.
			Param parameter.CreateStudentParam
		}
		// CreateStudents holds details about calls to the CreateStudents method.
		CreateStudents []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params []parameter.CreateStudentParam
		}
		// CreateStudentsWithSd holds details about calls to the CreateStudentsWithSd method.
		CreateStudentsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Params is the params argument value.
			Params []parameter.CreateStudentParam
		}
		// DeleteAbsence holds details about calls to the DeleteAbsence method.
		DeleteAbsence []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AbsenceID is the absenceID argument value.
			AbsenceID uuid.UUID
		}
		// DeleteAbsenceWithSd holds details about calls to the DeleteAbsenceWithSd method.
		DeleteAbsenceWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// AbsenceID is the absenceID argument value.
			AbsenceID uuid.UUID
		}
		// DeleteAttachableItem holds details about calls to the DeleteAttachableItem method.
		DeleteAttachableItem []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AttachableItemID is the attachableItemID argument value.
			AttachableItemID uuid.UUID
		}
		// DeleteAttachableItemWithSd holds details about calls to the DeleteAttachableItemWithSd method.
		DeleteAttachableItemWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// AttachableItemID is the attachableItemID argument value.
			AttachableItemID uuid.UUID
		}
		// DeleteAttendStatus holds details about calls to the DeleteAttendStatus method.
		DeleteAttendStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AttendStatusID is the attendStatusID argument value.
			AttendStatusID uuid.UUID
		}
		// DeleteAttendStatusByKey holds details about calls to the DeleteAttendStatusByKey method.
		DeleteAttendStatusByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// DeleteAttendStatusByKeyWithSd holds details about calls to the DeleteAttendStatusByKeyWithSd method.
		DeleteAttendStatusByKeyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Key is the key argument value.
			Key string
		}
		// DeleteAttendStatusWithSd holds details about calls to the DeleteAttendStatusWithSd method.
		DeleteAttendStatusWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// AttendStatusID is the attendStatusID argument value.
			AttendStatusID uuid.UUID
		}
		// DeleteAttendanceType holds details about calls to the DeleteAttendanceType method.
		DeleteAttendanceType []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AttendanceTypeID is the attendanceTypeID argument value.
			AttendanceTypeID uuid.UUID
		}
		// DeleteAttendanceTypeByKey holds details about calls to the DeleteAttendanceTypeByKey method.
		DeleteAttendanceTypeByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// DeleteAttendanceTypeByKeyWithSd holds details about calls to the DeleteAttendanceTypeByKeyWithSd method.
		DeleteAttendanceTypeByKeyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Key is the key argument value.
			Key string
		}
		// DeleteAttendanceTypeWithSd holds details about calls to the DeleteAttendanceTypeWithSd method.
		DeleteAttendanceTypeWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// AttendanceTypeID is the attendanceTypeID argument value.
			AttendanceTypeID uuid.UUID
		}
		// DeleteChatRoom holds details about calls to the DeleteChatRoom method.
		DeleteChatRoom []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomID is the chatRoomID argument value.
			ChatRoomID uuid.UUID
		}
		// DeleteChatRoomAction holds details about calls to the DeleteChatRoomAction method.
		DeleteChatRoomAction []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomActionID is the chatRoomActionID argument value.
			ChatRoomActionID uuid.UUID
		}
		// DeleteChatRoomActionType holds details about calls to the DeleteChatRoomActionType method.
		DeleteChatRoomActionType []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// RecordTypeID is the recordTypeID argument value.
			RecordTypeID uuid.UUID
		}
		// DeleteChatRoomActionTypeByKey holds details about calls to the DeleteChatRoomActionTypeByKey method.
		DeleteChatRoomActionTypeByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// DeleteChatRoomActionTypeByKeyWithSd holds details about calls to the DeleteChatRoomActionTypeByKeyWithSd method.
		DeleteChatRoomActionTypeByKeyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Key is the key argument value.
			Key string
		}
		// DeleteChatRoomActionTypeWithSd holds details about calls to the DeleteChatRoomActionTypeWithSd method.
		DeleteChatRoomActionTypeWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// RecordTypeID is the recordTypeID argument value.
			RecordTypeID uuid.UUID
		}
		// DeleteChatRoomActionWithSd holds details about calls to the DeleteChatRoomActionWithSd method.
		DeleteChatRoomActionWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomActionID is the chatRoomActionID argument value.
			ChatRoomActionID uuid.UUID
		}
		// DeleteChatRoomAddMemberAction holds details about calls to the DeleteChatRoomAddMemberAction method.
		DeleteChatRoomAddMemberAction []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomAddMemberActionID is the chatRoomAddMemberActionID argument value.
			ChatRoomAddMemberActionID uuid.UUID
		}
		// DeleteChatRoomAddMemberActionWithSd holds details about calls to the DeleteChatRoomAddMemberActionWithSd method.
		DeleteChatRoomAddMemberActionWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomAddMemberActionID is the chatRoomAddMemberActionID argument value.
			ChatRoomAddMemberActionID uuid.UUID
		}
		// DeleteChatRoomAddedMember holds details about calls to the DeleteChatRoomAddedMember method.
		DeleteChatRoomAddedMember []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomAddMemberActionID is the chatRoomAddMemberActionID argument value.
			ChatRoomAddMemberActionID uuid.UUID
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
		}
		// DeleteChatRoomAddedMemberOnChatRoomAddMemberActionWithSd holds details about calls to the DeleteChatRoomAddedMemberOnChatRoomAddMemberActionWithSd method.
		DeleteChatRoomAddedMemberOnChatRoomAddMemberActionWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomAddMemberActionID is the chatRoomAddMemberActionID argument value.
			ChatRoomAddMemberActionID uuid.UUID
		}
		// DeleteChatRoomAddedMemberWithSd holds details about calls to the DeleteChatRoomAddedMemberWithSd method.
		DeleteChatRoomAddedMemberWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomAddMemberActionID is the chatRoomAddMemberActionID argument value.
			ChatRoomAddMemberActionID uuid.UUID
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
		}
		// DeleteChatRoomAddedMembersOnChatRoomAddMemberAction holds details about calls to the DeleteChatRoomAddedMembersOnChatRoomAddMemberAction method.
		DeleteChatRoomAddedMembersOnChatRoomAddMemberAction []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomAddMemberActionID is the chatRoomAddMemberActionID argument value.
			ChatRoomAddMemberActionID uuid.UUID
		}
		// DeleteChatRoomAddedMembersOnChatRoomAddMemberActions holds details about calls to the DeleteChatRoomAddedMembersOnChatRoomAddMemberActions method.
		DeleteChatRoomAddedMembersOnChatRoomAddMemberActions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomAddMemberActionIDs is the chatRoomAddMemberActionIDs argument value.
			ChatRoomAddMemberActionIDs []uuid.UUID
		}
		// DeleteChatRoomAddedMembersOnChatRoomAddMemberActionsWithSd holds details about calls to the DeleteChatRoomAddedMembersOnChatRoomAddMemberActionsWithSd method.
		DeleteChatRoomAddedMembersOnChatRoomAddMemberActionsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomAddMemberActionIDs is the chatRoomAddMemberActionIDs argument value.
			ChatRoomAddMemberActionIDs []uuid.UUID
		}
		// DeleteChatRoomAddedMembersOnMember holds details about calls to the DeleteChatRoomAddedMembersOnMember method.
		DeleteChatRoomAddedMembersOnMember []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
		}
		// DeleteChatRoomAddedMembersOnMemberWithSd holds details about calls to the DeleteChatRoomAddedMembersOnMemberWithSd method.
		DeleteChatRoomAddedMembersOnMemberWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
		}
		// DeleteChatRoomAddedMembersOnMembers holds details about calls to the DeleteChatRoomAddedMembersOnMembers method.
		DeleteChatRoomAddedMembersOnMembers []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MemberIDs is the memberIDs argument value.
			MemberIDs []uuid.UUID
		}
		// DeleteChatRoomAddedMembersOnMembersWithSd holds details about calls to the DeleteChatRoomAddedMembersOnMembersWithSd method.
		DeleteChatRoomAddedMembersOnMembersWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MemberIDs is the memberIDs argument value.
			MemberIDs []uuid.UUID
		}
		// DeleteChatRoomCreateAction holds details about calls to the DeleteChatRoomCreateAction method.
		DeleteChatRoomCreateAction []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomCreateActionID is the chatRoomCreateActionID argument value.
			ChatRoomCreateActionID uuid.UUID
		}
		// DeleteChatRoomCreateActionWithSd holds details about calls to the DeleteChatRoomCreateActionWithSd method.
		DeleteChatRoomCreateActionWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomCreateActionID is the chatRoomCreateActionID argument value.
			ChatRoomCreateActionID uuid.UUID
		}
		// DeleteChatRoomDeleteMessageAction holds details about calls to the DeleteChatRoomDeleteMessageAction method.
		DeleteChatRoomDeleteMessageAction []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomDeleteMessageActionID is the chatRoomDeleteMessageActionID argument value.
			ChatRoomDeleteMessageActionID uuid.UUID
		}
		// DeleteChatRoomDeleteMessageActionWithSd holds details about calls to the DeleteChatRoomDeleteMessageActionWithSd method.
		DeleteChatRoomDeleteMessageActionWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomDeleteMessageActionID is the chatRoomDeleteMessageActionID argument value.
			ChatRoomDeleteMessageActionID uuid.UUID
		}
		// DeleteChatRoomRemoveMemberAction holds details about calls to the DeleteChatRoomRemoveMemberAction method.
		DeleteChatRoomRemoveMemberAction []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomRemoveMemberActionID is the chatRoomRemoveMemberActionID argument value.
			ChatRoomRemoveMemberActionID uuid.UUID
		}
		// DeleteChatRoomRemoveMemberActionWithSd holds details about calls to the DeleteChatRoomRemoveMemberActionWithSd method.
		DeleteChatRoomRemoveMemberActionWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomRemoveMemberActionID is the chatRoomRemoveMemberActionID argument value.
			ChatRoomRemoveMemberActionID uuid.UUID
		}
		// DeleteChatRoomRemovedMember holds details about calls to the DeleteChatRoomRemovedMember method.
		DeleteChatRoomRemovedMember []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomRemoveMemberActionID is the chatRoomRemoveMemberActionID argument value.
			ChatRoomRemoveMemberActionID uuid.UUID
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
		}
		// DeleteChatRoomRemovedMemberOnChatRoomRemoveMemberActionWithSd holds details about calls to the DeleteChatRoomRemovedMemberOnChatRoomRemoveMemberActionWithSd method.
		DeleteChatRoomRemovedMemberOnChatRoomRemoveMemberActionWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomRemoveMemberActionID is the chatRoomRemoveMemberActionID argument value.
			ChatRoomRemoveMemberActionID uuid.UUID
		}
		// DeleteChatRoomRemovedMemberWithSd holds details about calls to the DeleteChatRoomRemovedMemberWithSd method.
		DeleteChatRoomRemovedMemberWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomRemoveMemberActionID is the chatRoomRemoveMemberActionID argument value.
			ChatRoomRemoveMemberActionID uuid.UUID
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
		}
		// DeleteChatRoomRemovedMembersOnChatRoomRemoveMemberAction holds details about calls to the DeleteChatRoomRemovedMembersOnChatRoomRemoveMemberAction method.
		DeleteChatRoomRemovedMembersOnChatRoomRemoveMemberAction []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomRemoveMemberActionID is the chatRoomRemoveMemberActionID argument value.
			ChatRoomRemoveMemberActionID uuid.UUID
		}
		// DeleteChatRoomRemovedMembersOnChatRoomRemoveMemberActions holds details about calls to the DeleteChatRoomRemovedMembersOnChatRoomRemoveMemberActions method.
		DeleteChatRoomRemovedMembersOnChatRoomRemoveMemberActions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomRemoveMemberActionIDs is the chatRoomRemoveMemberActionIDs argument value.
			ChatRoomRemoveMemberActionIDs []uuid.UUID
		}
		// DeleteChatRoomRemovedMembersOnChatRoomRemoveMemberActionsWithSd holds details about calls to the DeleteChatRoomRemovedMembersOnChatRoomRemoveMemberActionsWithSd method.
		DeleteChatRoomRemovedMembersOnChatRoomRemoveMemberActionsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomRemoveMemberActionIDs is the chatRoomRemoveMemberActionIDs argument value.
			ChatRoomRemoveMemberActionIDs []uuid.UUID
		}
		// DeleteChatRoomRemovedMembersOnMember holds details about calls to the DeleteChatRoomRemovedMembersOnMember method.
		DeleteChatRoomRemovedMembersOnMember []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
		}
		// DeleteChatRoomRemovedMembersOnMemberWithSd holds details about calls to the DeleteChatRoomRemovedMembersOnMemberWithSd method.
		DeleteChatRoomRemovedMembersOnMemberWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
		}
		// DeleteChatRoomRemovedMembersOnMembers holds details about calls to the DeleteChatRoomRemovedMembersOnMembers method.
		DeleteChatRoomRemovedMembersOnMembers []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MemberIDs is the memberIDs argument value.
			MemberIDs []uuid.UUID
		}
		// DeleteChatRoomRemovedMembersOnMembersWithSd holds details about calls to the DeleteChatRoomRemovedMembersOnMembersWithSd method.
		DeleteChatRoomRemovedMembersOnMembersWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MemberIDs is the memberIDs argument value.
			MemberIDs []uuid.UUID
		}
		// DeleteChatRoomUpdateNameAction holds details about calls to the DeleteChatRoomUpdateNameAction method.
		DeleteChatRoomUpdateNameAction []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomUpdateNameActionID is the chatRoomUpdateNameActionID argument value.
			ChatRoomUpdateNameActionID uuid.UUID
		}
		// DeleteChatRoomUpdateNameActionWithSd holds details about calls to the DeleteChatRoomUpdateNameActionWithSd method.
		DeleteChatRoomUpdateNameActionWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomUpdateNameActionID is the chatRoomUpdateNameActionID argument value.
			ChatRoomUpdateNameActionID uuid.UUID
		}
		// DeleteChatRoomWithSd holds details about calls to the DeleteChatRoomWithSd method.
		DeleteChatRoomWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomID is the chatRoomID argument value.
			ChatRoomID uuid.UUID
		}
		// DeleteChatRoomWithdrawAction holds details about calls to the DeleteChatRoomWithdrawAction method.
		DeleteChatRoomWithdrawAction []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomWithdrawActionID is the chatRoomWithdrawActionID argument value.
			ChatRoomWithdrawActionID uuid.UUID
		}
		// DeleteChatRoomWithdrawActionWithSd holds details about calls to the DeleteChatRoomWithdrawActionWithSd method.
		DeleteChatRoomWithdrawActionWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomWithdrawActionID is the chatRoomWithdrawActionID argument value.
			ChatRoomWithdrawActionID uuid.UUID
		}
		// DeleteEventType holds details about calls to the DeleteEventType method.
		DeleteEventType []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// EventTypeID is the eventTypeID argument value.
			EventTypeID uuid.UUID
		}
		// DeleteEventTypeByKey holds details about calls to the DeleteEventTypeByKey method.
		DeleteEventTypeByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// DeleteEventTypeByKeyWithSd holds details about calls to the DeleteEventTypeByKeyWithSd method.
		DeleteEventTypeByKeyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Key is the key argument value.
			Key string
		}
		// DeleteEventTypeWithSd holds details about calls to the DeleteEventTypeWithSd method.
		DeleteEventTypeWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// EventTypeID is the eventTypeID argument value.
			EventTypeID uuid.UUID
		}
		// DeleteFile holds details about calls to the DeleteFile method.
		DeleteFile []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// FileID is the fileID argument value.
			FileID uuid.UUID
		}
		// DeleteFileWithSd holds details about calls to the DeleteFileWithSd method.
		DeleteFileWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// FileID is the fileID argument value.
			FileID uuid.UUID
		}
		// DeleteGrade holds details about calls to the DeleteGrade method.
		DeleteGrade []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// GradeID is the gradeID argument value.
			GradeID uuid.UUID
		}
		// DeleteGradeWithSd holds details about calls to the DeleteGradeWithSd method.
		DeleteGradeWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// GradeID is the gradeID argument value.
			GradeID uuid.UUID
		}
		// DeleteGroup holds details about calls to the DeleteGroup method.
		DeleteGroup []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// GroupID is the groupID argument value.
			GroupID uuid.UUID
		}
		// DeleteGroupWithSd holds details about calls to the DeleteGroupWithSd method.
		DeleteGroupWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// GroupID is the groupID argument value.
			GroupID uuid.UUID
		}
		// DeleteImage holds details about calls to the DeleteImage method.
		DeleteImage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ImageID is the imageID argument value.
			ImageID uuid.UUID
		}
		// DeleteImageWithSd holds details about calls to the DeleteImageWithSd method.
		DeleteImageWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ImageID is the imageID argument value.
			ImageID uuid.UUID
		}
		// DeleteMember holds details about calls to the DeleteMember method.
		DeleteMember []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
		}
		// DeleteMemberWithSd holds details about calls to the DeleteMemberWithSd method.
		DeleteMemberWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
		}
		// DeleteMessage holds details about calls to the DeleteMessage method.
		DeleteMessage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MessageID is the messageID argument value.
			MessageID uuid.UUID
		}
		// DeleteMessageWithSd holds details about calls to the DeleteMessageWithSd method.
		DeleteMessageWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MessageID is the messageID argument value.
			MessageID uuid.UUID
		}
		// DeleteMessagesOnChatRoom holds details about calls to the DeleteMessagesOnChatRoom method.
		DeleteMessagesOnChatRoom []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomID is the chatRoomID argument value.
			ChatRoomID uuid.UUID
		}
		// DeleteMessagesOnChatRoomWithSd holds details about calls to the DeleteMessagesOnChatRoomWithSd method.
		DeleteMessagesOnChatRoomWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomID is the chatRoomID argument value.
			ChatRoomID uuid.UUID
		}
		// DeleteMimeType holds details about calls to the DeleteMimeType method.
		DeleteMimeType []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MimeTypeID is the mimeTypeID argument value.
			MimeTypeID uuid.UUID
		}
		// DeleteMimeTypeByKey holds details about calls to the DeleteMimeTypeByKey method.
		DeleteMimeTypeByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// DeleteMimeTypeByKeyWithSd holds details about calls to the DeleteMimeTypeByKeyWithSd method.
		DeleteMimeTypeByKeyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Key is the key argument value.
			Key string
		}
		// DeleteMimeTypeWithSd holds details about calls to the DeleteMimeTypeWithSd method.
		DeleteMimeTypeWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MimeTypeID is the mimeTypeID argument value.
			MimeTypeID uuid.UUID
		}
		// DeleteOrganization holds details about calls to the DeleteOrganization method.
		DeleteOrganization []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// OrganizationID is the organizationID argument value.
			OrganizationID uuid.UUID
		}
		// DeleteOrganizationWithSd holds details about calls to the DeleteOrganizationWithSd method.
		DeleteOrganizationWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// OrganizationID is the organizationID argument value.
			OrganizationID uuid.UUID
		}
		// DeletePermission holds details about calls to the DeletePermission method.
		DeletePermission []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PermissionID is the permissionID argument value.
			PermissionID uuid.UUID
		}
		// DeletePermissionByKey holds details about calls to the DeletePermissionByKey method.
		DeletePermissionByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// DeletePermissionByKeyWithSd holds details about calls to the DeletePermissionByKeyWithSd method.
		DeletePermissionByKeyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Key is the key argument value.
			Key string
		}
		// DeletePermissionCategory holds details about calls to the DeletePermissionCategory method.
		DeletePermissionCategory []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PermissionCategoryID is the permissionCategoryID argument value.
			PermissionCategoryID uuid.UUID
		}
		// DeletePermissionCategoryByKey holds details about calls to the DeletePermissionCategoryByKey method.
		DeletePermissionCategoryByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// DeletePermissionCategoryByKeyWithSd holds details about calls to the DeletePermissionCategoryByKeyWithSd method.
		DeletePermissionCategoryByKeyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Key is the key argument value.
			Key string
		}
		// DeletePermissionCategoryWithSd holds details about calls to the DeletePermissionCategoryWithSd method.
		DeletePermissionCategoryWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// PermissionCategoryID is the permissionCategoryID argument value.
			PermissionCategoryID uuid.UUID
		}
		// DeletePermissionWithSd holds details about calls to the DeletePermissionWithSd method.
		DeletePermissionWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// PermissionID is the permissionID argument value.
			PermissionID uuid.UUID
		}
		// DeletePolicy holds details about calls to the DeletePolicy method.
		DeletePolicy []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PolicyID is the policyID argument value.
			PolicyID uuid.UUID
		}
		// DeletePolicyByKey holds details about calls to the DeletePolicyByKey method.
		DeletePolicyByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// DeletePolicyByKeyWithSd holds details about calls to the DeletePolicyByKeyWithSd method.
		DeletePolicyByKeyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Key is the key argument value.
			Key string
		}
		// DeletePolicyCategory holds details about calls to the DeletePolicyCategory method.
		DeletePolicyCategory []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PolicyCategoryID is the policyCategoryID argument value.
			PolicyCategoryID uuid.UUID
		}
		// DeletePolicyCategoryByKey holds details about calls to the DeletePolicyCategoryByKey method.
		DeletePolicyCategoryByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// DeletePolicyCategoryByKeyWithSd holds details about calls to the DeletePolicyCategoryByKeyWithSd method.
		DeletePolicyCategoryByKeyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Key is the key argument value.
			Key string
		}
		// DeletePolicyCategoryWithSd holds details about calls to the DeletePolicyCategoryWithSd method.
		DeletePolicyCategoryWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// PolicyCategoryID is the policyCategoryID argument value.
			PolicyCategoryID uuid.UUID
		}
		// DeletePolicyWithSd holds details about calls to the DeletePolicyWithSd method.
		DeletePolicyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// PolicyID is the policyID argument value.
			PolicyID uuid.UUID
		}
		// DeleteProfessor holds details about calls to the DeleteProfessor method.
		DeleteProfessor []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProfessorID is the professorID argument value.
			ProfessorID uuid.UUID
		}
		// DeleteProfessorWithSd holds details about calls to the DeleteProfessorWithSd method.
		DeleteProfessorWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ProfessorID is the professorID argument value.
			ProfessorID uuid.UUID
		}
		// DeleteRecordType holds details about calls to the DeleteRecordType method.
		DeleteRecordType []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// RecordTypeID is the recordTypeID argument value.
			RecordTypeID uuid.UUID
		}
		// DeleteRecordTypeByKey holds details about calls to the DeleteRecordTypeByKey method.
		DeleteRecordTypeByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// DeleteRecordTypeByKeyWithSd holds details about calls to the DeleteRecordTypeByKeyWithSd method.
		DeleteRecordTypeByKeyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Key is the key argument value.
			Key string
		}
		// DeleteRecordTypeWithSd holds details about calls to the DeleteRecordTypeWithSd method.
		DeleteRecordTypeWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// RecordTypeID is the recordTypeID argument value.
			RecordTypeID uuid.UUID
		}
		// DeleteRole holds details about calls to the DeleteRole method.
		DeleteRole []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// RoleID is the roleID argument value.
			RoleID uuid.UUID
		}
		// DeleteRoleWithSd holds details about calls to the DeleteRoleWithSd method.
		DeleteRoleWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// RoleID is the roleID argument value.
			RoleID uuid.UUID
		}
		// DeleteStudent holds details about calls to the DeleteStudent method.
		DeleteStudent []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// StudentID is the studentID argument value.
			StudentID uuid.UUID
		}
		// DeleteStudentWithSd holds details about calls to the DeleteStudentWithSd method.
		DeleteStudentWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// StudentID is the studentID argument value.
			StudentID uuid.UUID
		}
		// DetachAttachedMessage holds details about calls to the DetachAttachedMessage method.
		DetachAttachedMessage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AttachedMessageID is the attachedMessageID argument value.
			AttachedMessageID uuid.UUID
		}
		// DetachAttachedMessageWithSd holds details about calls to the DetachAttachedMessageWithSd method.
		DetachAttachedMessageWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// AttachedMessageID is the attachedMessageID argument value.
			AttachedMessageID uuid.UUID
		}
		// DetachItemsOnMessage holds details about calls to the DetachItemsOnMessage method.
		DetachItemsOnMessage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MessageID is the messageID argument value.
			MessageID uuid.UUID
		}
		// DetachItemsOnMessageWithSd holds details about calls to the DetachItemsOnMessageWithSd method.
		DetachItemsOnMessageWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MessageID is the messageID argument value.
			MessageID uuid.UUID
		}
		// DetachItemsOnMessages holds details about calls to the DetachItemsOnMessages method.
		DetachItemsOnMessages []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MessageIDs is the messageIDs argument value.
			MessageIDs []uuid.UUID
		}
		// DetachItemsOnMessagesWithSd holds details about calls to the DetachItemsOnMessagesWithSd method.
		DetachItemsOnMessagesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MessageIDs is the messageIDs argument value.
			MessageIDs []uuid.UUID
		}
		// DisassociatePolicyOnRole holds details about calls to the DisassociatePolicyOnRole method.
		DisassociatePolicyOnRole []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// RoleID is the roleID argument value.
			RoleID uuid.UUID
		}
		// DisassociatePolicyOnRoleWithSd holds details about calls to the DisassociatePolicyOnRoleWithSd method.
		DisassociatePolicyOnRoleWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// RoleID is the roleID argument value.
			RoleID uuid.UUID
		}
		// DisassociatePolicyOnRoles holds details about calls to the DisassociatePolicyOnRoles method.
		DisassociatePolicyOnRoles []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// RoleIDs is the roleIDs argument value.
			RoleIDs []uuid.UUID
		}
		// DisassociatePolicyOnRolesWithSd holds details about calls to the DisassociatePolicyOnRolesWithSd method.
		DisassociatePolicyOnRolesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// RoleIDs is the roleIDs argument value.
			RoleIDs []uuid.UUID
		}
		// DisassociateRole holds details about calls to the DisassociateRole method.
		DisassociateRole []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// RoleID is the roleID argument value.
			RoleID uuid.UUID
			// PolicyID is the policyID argument value.
			PolicyID uuid.UUID
		}
		// DisassociateRoleOnPolicies holds details about calls to the DisassociateRoleOnPolicies method.
		DisassociateRoleOnPolicies []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PolicyIDs is the policyIDs argument value.
			PolicyIDs []uuid.UUID
		}
		// DisassociateRoleOnPoliciesWithSd holds details about calls to the DisassociateRoleOnPoliciesWithSd method.
		DisassociateRoleOnPoliciesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// PolicyIDs is the policyIDs argument value.
			PolicyIDs []uuid.UUID
		}
		// DisassociateRoleOnPolicy holds details about calls to the DisassociateRoleOnPolicy method.
		DisassociateRoleOnPolicy []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PolicyID is the policyID argument value.
			PolicyID uuid.UUID
		}
		// DisassociateRoleOnPolicyWithSd holds details about calls to the DisassociateRoleOnPolicyWithSd method.
		DisassociateRoleOnPolicyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// PolicyID is the policyID argument value.
			PolicyID uuid.UUID
		}
		// DisassociateRoleWithSd holds details about calls to the DisassociateRoleWithSd method.
		DisassociateRoleWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// RoleID is the roleID argument value.
			RoleID uuid.UUID
			// PolicyID is the policyID argument value.
			PolicyID uuid.UUID
		}
		// DisbelongChatRoom holds details about calls to the DisbelongChatRoom method.
		DisbelongChatRoom []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
			// ChatRoomID is the chatRoomID argument value.
			ChatRoomID uuid.UUID
		}
		// DisbelongChatRoomOnChatRoom holds details about calls to the DisbelongChatRoomOnChatRoom method.
		DisbelongChatRoomOnChatRoom []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomID is the chatRoomID argument value.
			ChatRoomID uuid.UUID
		}
		// DisbelongChatRoomOnChatRoomWithSd holds details about calls to the DisbelongChatRoomOnChatRoomWithSd method.
		DisbelongChatRoomOnChatRoomWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomID is the chatRoomID argument value.
			ChatRoomID uuid.UUID
		}
		// DisbelongChatRoomOnChatRooms holds details about calls to the DisbelongChatRoomOnChatRooms method.
		DisbelongChatRoomOnChatRooms []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomIDs is the chatRoomIDs argument value.
			ChatRoomIDs []uuid.UUID
		}
		// DisbelongChatRoomOnChatRoomsWithSd holds details about calls to the DisbelongChatRoomOnChatRoomsWithSd method.
		DisbelongChatRoomOnChatRoomsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomIDs is the chatRoomIDs argument value.
			ChatRoomIDs []uuid.UUID
		}
		// DisbelongChatRoomOnMember holds details about calls to the DisbelongChatRoomOnMember method.
		DisbelongChatRoomOnMember []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
		}
		// DisbelongChatRoomOnMemberWithSd holds details about calls to the DisbelongChatRoomOnMemberWithSd method.
		DisbelongChatRoomOnMemberWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
		}
		// DisbelongChatRoomOnMembers holds details about calls to the DisbelongChatRoomOnMembers method.
		DisbelongChatRoomOnMembers []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MemberIDs is the memberIDs argument value.
			MemberIDs []uuid.UUID
		}
		// DisbelongChatRoomOnMembersWithSd holds details about calls to the DisbelongChatRoomOnMembersWithSd method.
		DisbelongChatRoomOnMembersWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MemberIDs is the memberIDs argument value.
			MemberIDs []uuid.UUID
		}
		// DisbelongChatRoomWithSd holds details about calls to the DisbelongChatRoomWithSd method.
		DisbelongChatRoomWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
			// ChatRoomID is the chatRoomID argument value.
			ChatRoomID uuid.UUID
		}
		// DisbelongOrganization holds details about calls to the DisbelongOrganization method.
		DisbelongOrganization []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
			// OrganizationID is the organizationID argument value.
			OrganizationID uuid.UUID
		}
		// DisbelongOrganizationOnMember holds details about calls to the DisbelongOrganizationOnMember method.
		DisbelongOrganizationOnMember []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
		}
		// DisbelongOrganizationOnMemberWithSd holds details about calls to the DisbelongOrganizationOnMemberWithSd method.
		DisbelongOrganizationOnMemberWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
		}
		// DisbelongOrganizationOnMembers holds details about calls to the DisbelongOrganizationOnMembers method.
		DisbelongOrganizationOnMembers []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MemberIDs is the memberIDs argument value.
			MemberIDs []uuid.UUID
		}
		// DisbelongOrganizationOnMembersWithSd holds details about calls to the DisbelongOrganizationOnMembersWithSd method.
		DisbelongOrganizationOnMembersWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MemberIDs is the memberIDs argument value.
			MemberIDs []uuid.UUID
		}
		// DisbelongOrganizationOnOrganization holds details about calls to the DisbelongOrganizationOnOrganization method.
		DisbelongOrganizationOnOrganization []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// OrganizationID is the organizationID argument value.
			OrganizationID uuid.UUID
		}
		// DisbelongOrganizationOnOrganizationWithSd holds details about calls to the DisbelongOrganizationOnOrganizationWithSd method.
		DisbelongOrganizationOnOrganizationWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// OrganizationID is the organizationID argument value.
			OrganizationID uuid.UUID
		}
		// DisbelongOrganizationOnOrganizations holds details about calls to the DisbelongOrganizationOnOrganizations method.
		DisbelongOrganizationOnOrganizations []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// OrganizationIDs is the organizationIDs argument value.
			OrganizationIDs []uuid.UUID
		}
		// DisbelongOrganizationOnOrganizationsWithSd holds details about calls to the DisbelongOrganizationOnOrganizationsWithSd method.
		DisbelongOrganizationOnOrganizationsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// OrganizationIDs is the organizationIDs argument value.
			OrganizationIDs []uuid.UUID
		}
		// DisbelongOrganizationWithSd holds details about calls to the DisbelongOrganizationWithSd method.
		DisbelongOrganizationWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
			// OrganizationID is the organizationID argument value.
			OrganizationID uuid.UUID
		}
		// DisbelongPluralChatRoomsOnMember holds details about calls to the DisbelongPluralChatRoomsOnMember method.
		DisbelongPluralChatRoomsOnMember []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
			// ChatRoomIDs is the chatRoomIDs argument value.
			ChatRoomIDs []uuid.UUID
		}
		// DisbelongPluralChatRoomsOnMemberWithSd holds details about calls to the DisbelongPluralChatRoomsOnMemberWithSd method.
		DisbelongPluralChatRoomsOnMemberWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
			// ChatRoomIDs is the chatRoomIDs argument value.
			ChatRoomIDs []uuid.UUID
		}
		// DisbelongPluralMembersOnChatRoom holds details about calls to the DisbelongPluralMembersOnChatRoom method.
		DisbelongPluralMembersOnChatRoom []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomID is the chatRoomID argument value.
			ChatRoomID uuid.UUID
			// MemberIDs is the memberIDs argument value.
			MemberIDs []uuid.UUID
		}
		// DisbelongPluralMembersOnChatRoomWithSd holds details about calls to the DisbelongPluralMembersOnChatRoomWithSd method.
		DisbelongPluralMembersOnChatRoomWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomID is the chatRoomID argument value.
			ChatRoomID uuid.UUID
			// MemberIDs is the memberIDs argument value.
			MemberIDs []uuid.UUID
		}
		// DisbelongPluralMembersOnOrganization holds details about calls to the DisbelongPluralMembersOnOrganization method.
		DisbelongPluralMembersOnOrganization []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// OrganizationID is the organizationID argument value.
			OrganizationID uuid.UUID
			// MemberIDs is the memberIDs argument value.
			MemberIDs []uuid.UUID
		}
		// DisbelongPluralMembersOnOrganizationWithSd holds details about calls to the DisbelongPluralMembersOnOrganizationWithSd method.
		DisbelongPluralMembersOnOrganizationWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// OrganizationID is the organizationID argument value.
			OrganizationID uuid.UUID
			// MemberIDs is the memberIDs argument value.
			MemberIDs []uuid.UUID
		}
		// DisbelongPluralOrganizationsOnMember holds details about calls to the DisbelongPluralOrganizationsOnMember method.
		DisbelongPluralOrganizationsOnMember []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
			// OrganizationIDs is the organizationIDs argument value.
			OrganizationIDs []uuid.UUID
		}
		// DisbelongPluralOrganizationsOnMemberWithSd holds details about calls to the DisbelongPluralOrganizationsOnMemberWithSd method.
		DisbelongPluralOrganizationsOnMemberWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
			// OrganizationIDs is the organizationIDs argument value.
			OrganizationIDs []uuid.UUID
		}
		// ExistsChatRoomBelonging holds details about calls to the ExistsChatRoomBelonging method.
		ExistsChatRoomBelonging []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
			// ChatRoomID is the chatRoomID argument value.
			ChatRoomID uuid.UUID
		}
		// ExistsChatRoomBelongingWithSd holds details about calls to the ExistsChatRoomBelongingWithSd method.
		ExistsChatRoomBelongingWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
			// ChatRoomID is the chatRoomID argument value.
			ChatRoomID uuid.UUID
		}
		// ExistsReadReceipt holds details about calls to the ExistsReadReceipt method.
		ExistsReadReceipt []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
			// MessageID is the messageID argument value.
			MessageID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereExistsReadReceiptParam
		}
		// ExistsReadReceiptWithSd holds details about calls to the ExistsReadReceiptWithSd method.
		ExistsReadReceiptWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
			// MessageID is the messageID argument value.
			MessageID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereExistsReadReceiptParam
		}
		// FindAbsenceByID holds details about calls to the FindAbsenceByID method.
		FindAbsenceByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AbsenceID is the absenceID argument value.
			AbsenceID uuid.UUID
		}
		// FindAbsenceByIDWithSd holds details about calls to the FindAbsenceByIDWithSd method.
		FindAbsenceByIDWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// AbsenceID is the absenceID argument value.
			AbsenceID uuid.UUID
		}
		// FindAttachableItemByID holds details about calls to the FindAttachableItemByID method.
		FindAttachableItemByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AttachableItemID is the attachableItemID argument value.
			AttachableItemID uuid.UUID
		}
		// FindAttachableItemByIDWithMimeType holds details about calls to the FindAttachableItemByIDWithMimeType method.
		FindAttachableItemByIDWithMimeType []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AttachableItemID is the attachableItemID argument value.
			AttachableItemID uuid.UUID
		}
		// FindAttachableItemByIDWithMimeTypeWithSd holds details about calls to the FindAttachableItemByIDWithMimeTypeWithSd method.
		FindAttachableItemByIDWithMimeTypeWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// AttachableItemID is the attachableItemID argument value.
			AttachableItemID uuid.UUID
		}
		// FindAttachableItemByIDWithSd holds details about calls to the FindAttachableItemByIDWithSd method.
		FindAttachableItemByIDWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// AttachableItemID is the attachableItemID argument value.
			AttachableItemID uuid.UUID
		}
		// FindAttachableItemByURL holds details about calls to the FindAttachableItemByURL method.
		FindAttachableItemByURL []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// URL is the url argument value.
			URL string
		}
		// FindAttachableItemByURLWithMimeType holds details about calls to the FindAttachableItemByURLWithMimeType method.
		FindAttachableItemByURLWithMimeType []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// URL is the url argument value.
			URL string
		}
		// FindAttachableItemByURLWithMimeTypeWithSd holds details about calls to the FindAttachableItemByURLWithMimeTypeWithSd method.
		FindAttachableItemByURLWithMimeTypeWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// URL is the url argument value.
			URL string
		}
		// FindAttachableItemByURLWithSd holds details about calls to the FindAttachableItemByURLWithSd method.
		FindAttachableItemByURLWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// URL is the url argument value.
			URL string
		}
		// FindAttendStatusByID holds details about calls to the FindAttendStatusByID method.
		FindAttendStatusByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AttendStatusID is the attendStatusID argument value.
			AttendStatusID uuid.UUID
		}
		// FindAttendStatusByIDWithSd holds details about calls to the FindAttendStatusByIDWithSd method.
		FindAttendStatusByIDWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// AttendStatusID is the attendStatusID argument value.
			AttendStatusID uuid.UUID
		}
		// FindAttendStatusByKey holds details about calls to the FindAttendStatusByKey method.
		FindAttendStatusByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// FindAttendStatusByKeyWithSd holds details about calls to the FindAttendStatusByKeyWithSd method.
		FindAttendStatusByKeyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Key is the key argument value.
			Key string
		}
		// FindAttendanceTypeByID holds details about calls to the FindAttendanceTypeByID method.
		FindAttendanceTypeByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AttendanceTypeID is the attendanceTypeID argument value.
			AttendanceTypeID uuid.UUID
		}
		// FindAttendanceTypeByIDWithSd holds details about calls to the FindAttendanceTypeByIDWithSd method.
		FindAttendanceTypeByIDWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// AttendanceTypeID is the attendanceTypeID argument value.
			AttendanceTypeID uuid.UUID
		}
		// FindAttendanceTypeByKey holds details about calls to the FindAttendanceTypeByKey method.
		FindAttendanceTypeByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// FindAttendanceTypeByKeyWithSd holds details about calls to the FindAttendanceTypeByKeyWithSd method.
		FindAttendanceTypeByKeyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Key is the key argument value.
			Key string
		}
		// FindChatRoomActionTypeByID holds details about calls to the FindChatRoomActionTypeByID method.
		FindChatRoomActionTypeByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// RecordTypeID is the recordTypeID argument value.
			RecordTypeID uuid.UUID
		}
		// FindChatRoomActionTypeByIDWithSd holds details about calls to the FindChatRoomActionTypeByIDWithSd method.
		FindChatRoomActionTypeByIDWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// RecordTypeID is the recordTypeID argument value.
			RecordTypeID uuid.UUID
		}
		// FindChatRoomActionTypeByKey holds details about calls to the FindChatRoomActionTypeByKey method.
		FindChatRoomActionTypeByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// FindChatRoomActionTypeByKeyWithSd holds details about calls to the FindChatRoomActionTypeByKeyWithSd method.
		FindChatRoomActionTypeByKeyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Key is the key argument value.
			Key string
		}
		// FindChatRoomByID holds details about calls to the FindChatRoomByID method.
		FindChatRoomByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomID is the chatRoomID argument value.
			ChatRoomID uuid.UUID
		}
		// FindChatRoomByIDWithCoverImage holds details about calls to the FindChatRoomByIDWithCoverImage method.
		FindChatRoomByIDWithCoverImage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomID is the chatRoomID argument value.
			ChatRoomID uuid.UUID
		}
		// FindChatRoomByIDWithCoverImageWithSd holds details about calls to the FindChatRoomByIDWithCoverImageWithSd method.
		FindChatRoomByIDWithCoverImageWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomID is the chatRoomID argument value.
			ChatRoomID uuid.UUID
		}
		// FindChatRoomByIDWithSd holds details about calls to the FindChatRoomByIDWithSd method.
		FindChatRoomByIDWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomID is the chatRoomID argument value.
			ChatRoomID uuid.UUID
		}
		// FindChatRoomOnPrivate holds details about calls to the FindChatRoomOnPrivate method.
		FindChatRoomOnPrivate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// OwnerID is the ownerID argument value.
			OwnerID uuid.UUID
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
		}
		// FindChatRoomOnPrivateWithSd holds details about calls to the FindChatRoomOnPrivateWithSd method.
		FindChatRoomOnPrivateWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// OwnerID is the ownerID argument value.
			OwnerID uuid.UUID
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
		}
		// FindEventTypeByID holds details about calls to the FindEventTypeByID method.
		FindEventTypeByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// EventTypeID is the eventTypeID argument value.
			EventTypeID uuid.UUID
		}
		// FindEventTypeByIDWithSd holds details about calls to the FindEventTypeByIDWithSd method.
		FindEventTypeByIDWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// EventTypeID is the eventTypeID argument value.
			EventTypeID uuid.UUID
		}
		// FindEventTypeByKey holds details about calls to the FindEventTypeByKey method.
		FindEventTypeByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// FindEventTypeByKeyWithSd holds details about calls to the FindEventTypeByKeyWithSd method.
		FindEventTypeByKeyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Key is the key argument value.
			Key string
		}
		// FindFileByID holds details about calls to the FindFileByID method.
		FindFileByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// FileID is the fileID argument value.
			FileID uuid.UUID
		}
		// FindFileByIDWithSd holds details about calls to the FindFileByIDWithSd method.
		FindFileByIDWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// FileID is the fileID argument value.
			FileID uuid.UUID
		}
		// FindFileWithAttachableItem holds details about calls to the FindFileWithAttachableItem method.
		FindFileWithAttachableItem []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// FileID is the fileID argument value.
			FileID uuid.UUID
		}
		// FindFileWithAttachableItemWithSd holds details about calls to the FindFileWithAttachableItemWithSd method.
		FindFileWithAttachableItemWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// FileID is the fileID argument value.
			FileID uuid.UUID
		}
		// FindGradeByID holds details about calls to the FindGradeByID method.
		FindGradeByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// GradeID is the gradeID argument value.
			GradeID uuid.UUID
		}
		// FindGradeByIDWithSd holds details about calls to the FindGradeByIDWithSd method.
		FindGradeByIDWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// GradeID is the gradeID argument value.
			GradeID uuid.UUID
		}
		// FindGradeByKey holds details about calls to the FindGradeByKey method.
		FindGradeByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// FindGradeByKeyWithSd holds details about calls to the FindGradeByKeyWithSd method.
		FindGradeByKeyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Key is the key argument value.
			Key string
		}
		// FindGradeWithOrganization holds details about calls to the FindGradeWithOrganization method.
		FindGradeWithOrganization []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// GradeID is the gradeID argument value.
			GradeID uuid.UUID
		}
		// FindGradeWithOrganizationWithSd holds details about calls to the FindGradeWithOrganizationWithSd method.
		FindGradeWithOrganizationWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// GradeID is the gradeID argument value.
			GradeID uuid.UUID
		}
		// FindGroupByID holds details about calls to the FindGroupByID method.
		FindGroupByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// GroupID is the groupID argument value.
			GroupID uuid.UUID
		}
		// FindGroupByIDWithSd holds details about calls to the FindGroupByIDWithSd method.
		FindGroupByIDWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// GroupID is the groupID argument value.
			GroupID uuid.UUID
		}
		// FindGroupByKey holds details about calls to the FindGroupByKey method.
		FindGroupByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// FindGroupByKeyWithSd holds details about calls to the FindGroupByKeyWithSd method.
		FindGroupByKeyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Key is the key argument value.
			Key string
		}
		// FindGroupWithOrganization holds details about calls to the FindGroupWithOrganization method.
		FindGroupWithOrganization []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// GroupID is the groupID argument value.
			GroupID uuid.UUID
		}
		// FindGroupWithOrganizationWithSd holds details about calls to the FindGroupWithOrganizationWithSd method.
		FindGroupWithOrganizationWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// GroupID is the groupID argument value.
			GroupID uuid.UUID
		}
		// FindImageByID holds details about calls to the FindImageByID method.
		FindImageByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ImageID is the imageID argument value.
			ImageID uuid.UUID
		}
		// FindImageByIDWithSd holds details about calls to the FindImageByIDWithSd method.
		FindImageByIDWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ImageID is the imageID argument value.
			ImageID uuid.UUID
		}
		// FindImageWithAttachableItem holds details about calls to the FindImageWithAttachableItem method.
		FindImageWithAttachableItem []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ImageID is the imageID argument value.
			ImageID uuid.UUID
		}
		// FindImageWithAttachableItemWithSd holds details about calls to the FindImageWithAttachableItemWithSd method.
		FindImageWithAttachableItemWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ImageID is the imageID argument value.
			ImageID uuid.UUID
		}
		// FindMemberByID holds details about calls to the FindMemberByID method.
		FindMemberByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
		}
		// FindMemberByIDWithSd holds details about calls to the FindMemberByIDWithSd method.
		FindMemberByIDWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
		}
		// FindMemberByLoginID holds details about calls to the FindMemberByLoginID method.
		FindMemberByLoginID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// LoginID is the loginID argument value.
			LoginID string
		}
		// FindMemberByLoginIDWithSd holds details about calls to the FindMemberByLoginIDWithSd method.
		FindMemberByLoginIDWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// LoginID is the loginID argument value.
			LoginID string
		}
		// FindMemberCredentialsByID holds details about calls to the FindMemberCredentialsByID method.
		FindMemberCredentialsByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
		}
		// FindMemberCredentialsByIDWithSd holds details about calls to the FindMemberCredentialsByIDWithSd method.
		FindMemberCredentialsByIDWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
		}
		// FindMemberCredentialsByLoginID holds details about calls to the FindMemberCredentialsByLoginID method.
		FindMemberCredentialsByLoginID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// LoginID is the loginID argument value.
			LoginID string
		}
		// FindMemberCredentialsByLoginIDWithSd holds details about calls to the FindMemberCredentialsByLoginIDWithSd method.
		FindMemberCredentialsByLoginIDWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// LoginID is the loginID argument value.
			LoginID string
		}
		// FindMemberWithAttendStatus holds details about calls to the FindMemberWithAttendStatus method.
		FindMemberWithAttendStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
		}
		// FindMemberWithAttendStatusWithSd holds details about calls to the FindMemberWithAttendStatusWithSd method.
		FindMemberWithAttendStatusWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
		}
		// FindMemberWithCrew holds details about calls to the FindMemberWithCrew method.
		FindMemberWithCrew []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
		}
		// FindMemberWithCrewWithSd holds details about calls to the FindMemberWithCrewWithSd method.
		FindMemberWithCrewWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
		}
		// FindMemberWithDetail holds details about calls to the FindMemberWithDetail method.
		FindMemberWithDetail []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
		}
		// FindMemberWithDetailWithSd holds details about calls to the FindMemberWithDetailWithSd method.
		FindMemberWithDetailWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
		}
		// FindMemberWithPersonalOrganization holds details about calls to the FindMemberWithPersonalOrganization method.
		FindMemberWithPersonalOrganization []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
		}
		// FindMemberWithPersonalOrganizationWithSd holds details about calls to the FindMemberWithPersonalOrganizationWithSd method.
		FindMemberWithPersonalOrganizationWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
		}
		// FindMemberWithProfileImage holds details about calls to the FindMemberWithProfileImage method.
		FindMemberWithProfileImage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
		}
		// FindMemberWithProfileImageWithSd holds details about calls to the FindMemberWithProfileImageWithSd method.
		FindMemberWithProfileImageWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
		}
		// FindMemberWithRole holds details about calls to the FindMemberWithRole method.
		FindMemberWithRole []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
		}
		// FindMemberWithRoleWithSd holds details about calls to the FindMemberWithRoleWithSd method.
		FindMemberWithRoleWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
		}
		// FindMessageByID holds details about calls to the FindMessageByID method.
		FindMessageByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MessageID is the messageID argument value.
			MessageID uuid.UUID
		}
		// FindMessageByIDWithSd holds details about calls to the FindMessageByIDWithSd method.
		FindMessageByIDWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MessageID is the messageID argument value.
			MessageID uuid.UUID
		}
		// FindMessageWithChatRoom holds details about calls to the FindMessageWithChatRoom method.
		FindMessageWithChatRoom []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MessageID is the messageID argument value.
			MessageID uuid.UUID
		}
		// FindMessageWithChatRoomAction holds details about calls to the FindMessageWithChatRoomAction method.
		FindMessageWithChatRoomAction []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MessageID is the messageID argument value.
			MessageID uuid.UUID
		}
		// FindMessageWithChatRoomActionWithSd holds details about calls to the FindMessageWithChatRoomActionWithSd method.
		FindMessageWithChatRoomActionWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MessageID is the messageID argument value.
			MessageID uuid.UUID
		}
		// FindMessageWithChatRoomWithSd holds details about calls to the FindMessageWithChatRoomWithSd method.
		FindMessageWithChatRoomWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MessageID is the messageID argument value.
			MessageID uuid.UUID
		}
		// FindMessageWithSender holds details about calls to the FindMessageWithSender method.
		FindMessageWithSender []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MessageID is the messageID argument value.
			MessageID uuid.UUID
		}
		// FindMessageWithSenderWithSd holds details about calls to the FindMessageWithSenderWithSd method.
		FindMessageWithSenderWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MessageID is the messageID argument value.
			MessageID uuid.UUID
		}
		// FindMimeTypeByID holds details about calls to the FindMimeTypeByID method.
		FindMimeTypeByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MimeTypeID is the mimeTypeID argument value.
			MimeTypeID uuid.UUID
		}
		// FindMimeTypeByIDWithSd holds details about calls to the FindMimeTypeByIDWithSd method.
		FindMimeTypeByIDWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MimeTypeID is the mimeTypeID argument value.
			MimeTypeID uuid.UUID
		}
		// FindMimeTypeByKey holds details about calls to the FindMimeTypeByKey method.
		FindMimeTypeByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// FindMimeTypeByKeyWithSd holds details about calls to the FindMimeTypeByKeyWithSd method.
		FindMimeTypeByKeyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Key is the key argument value.
			Key string
		}
		// FindMimeTypeByKind holds details about calls to the FindMimeTypeByKind method.
		FindMimeTypeByKind []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Kind is the kind argument value.
			Kind string
		}
		// FindMimeTypeByKindWithSd holds details about calls to the FindMimeTypeByKindWithSd method.
		FindMimeTypeByKindWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Kind is the kind argument value.
			Kind string
		}
		// FindOrganizationByID holds details about calls to the FindOrganizationByID method.
		FindOrganizationByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// OrganizationID is the organizationID argument value.
			OrganizationID uuid.UUID
		}
		// FindOrganizationByIDWithSd holds details about calls to the FindOrganizationByIDWithSd method.
		FindOrganizationByIDWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// OrganizationID is the organizationID argument value.
			OrganizationID uuid.UUID
		}
		// FindOrganizationWithChatRoom holds details about calls to the FindOrganizationWithChatRoom method.
		FindOrganizationWithChatRoom []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// OrganizationID is the organizationID argument value.
			OrganizationID uuid.UUID
		}
		// FindOrganizationWithChatRoomAndDetail holds details about calls to the FindOrganizationWithChatRoomAndDetail method.
		FindOrganizationWithChatRoomAndDetail []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// OrganizationID is the organizationID argument value.
			OrganizationID uuid.UUID
		}
		// FindOrganizationWithChatRoomAndDetailWithSd holds details about calls to the FindOrganizationWithChatRoomAndDetailWithSd method.
		FindOrganizationWithChatRoomAndDetailWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// OrganizationID is the organizationID argument value.
			OrganizationID uuid.UUID
		}
		// FindOrganizationWithChatRoomWithSd holds details about calls to the FindOrganizationWithChatRoomWithSd method.
		FindOrganizationWithChatRoomWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// OrganizationID is the organizationID argument value.
			OrganizationID uuid.UUID
		}
		// FindOrganizationWithDetail holds details about calls to the FindOrganizationWithDetail method.
		FindOrganizationWithDetail []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// OrganizationID is the organizationID argument value.
			OrganizationID uuid.UUID
		}
		// FindOrganizationWithDetailWithSd holds details about calls to the FindOrganizationWithDetailWithSd method.
		FindOrganizationWithDetailWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// OrganizationID is the organizationID argument value.
			OrganizationID uuid.UUID
		}
		// FindPermissionByID holds details about calls to the FindPermissionByID method.
		FindPermissionByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PermissionID is the permissionID argument value.
			PermissionID uuid.UUID
		}
		// FindPermissionByIDWithCategory holds details about calls to the FindPermissionByIDWithCategory method.
		FindPermissionByIDWithCategory []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PermissionID is the permissionID argument value.
			PermissionID uuid.UUID
		}
		// FindPermissionByIDWithCategoryWithSd holds details about calls to the FindPermissionByIDWithCategoryWithSd method.
		FindPermissionByIDWithCategoryWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// PermissionID is the permissionID argument value.
			PermissionID uuid.UUID
		}
		// FindPermissionByIDWithSd holds details about calls to the FindPermissionByIDWithSd method.
		FindPermissionByIDWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// PermissionID is the permissionID argument value.
			PermissionID uuid.UUID
		}
		// FindPermissionByKey holds details about calls to the FindPermissionByKey method.
		FindPermissionByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// FindPermissionByKeyWithCategory holds details about calls to the FindPermissionByKeyWithCategory method.
		FindPermissionByKeyWithCategory []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// FindPermissionByKeyWithCategoryWithSd holds details about calls to the FindPermissionByKeyWithCategoryWithSd method.
		FindPermissionByKeyWithCategoryWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Key is the key argument value.
			Key string
		}
		// FindPermissionByKeyWithSd holds details about calls to the FindPermissionByKeyWithSd method.
		FindPermissionByKeyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Key is the key argument value.
			Key string
		}
		// FindPermissionCategoryByID holds details about calls to the FindPermissionCategoryByID method.
		FindPermissionCategoryByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PermissionCategoryID is the permissionCategoryID argument value.
			PermissionCategoryID uuid.UUID
		}
		// FindPermissionCategoryByIDWithSd holds details about calls to the FindPermissionCategoryByIDWithSd method.
		FindPermissionCategoryByIDWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// PermissionCategoryID is the permissionCategoryID argument value.
			PermissionCategoryID uuid.UUID
		}
		// FindPermissionCategoryByKey holds details about calls to the FindPermissionCategoryByKey method.
		FindPermissionCategoryByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// FindPermissionCategoryByKeyWithSd holds details about calls to the FindPermissionCategoryByKeyWithSd method.
		FindPermissionCategoryByKeyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Key is the key argument value.
			Key string
		}
		// FindPersonalOrganization holds details about calls to the FindPersonalOrganization method.
		FindPersonalOrganization []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
		}
		// FindPersonalOrganizationWithSd holds details about calls to the FindPersonalOrganizationWithSd method.
		FindPersonalOrganizationWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
		}
		// FindPolicyByID holds details about calls to the FindPolicyByID method.
		FindPolicyByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PolicyID is the policyID argument value.
			PolicyID uuid.UUID
		}
		// FindPolicyByIDWithCategory holds details about calls to the FindPolicyByIDWithCategory method.
		FindPolicyByIDWithCategory []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PolicyID is the policyID argument value.
			PolicyID uuid.UUID
		}
		// FindPolicyByIDWithCategoryWithSd holds details about calls to the FindPolicyByIDWithCategoryWithSd method.
		FindPolicyByIDWithCategoryWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// PolicyID is the policyID argument value.
			PolicyID uuid.UUID
		}
		// FindPolicyByIDWithSd holds details about calls to the FindPolicyByIDWithSd method.
		FindPolicyByIDWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// PolicyID is the policyID argument value.
			PolicyID uuid.UUID
		}
		// FindPolicyByKey holds details about calls to the FindPolicyByKey method.
		FindPolicyByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// FindPolicyByKeyWithCategory holds details about calls to the FindPolicyByKeyWithCategory method.
		FindPolicyByKeyWithCategory []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// FindPolicyByKeyWithCategoryWithSd holds details about calls to the FindPolicyByKeyWithCategoryWithSd method.
		FindPolicyByKeyWithCategoryWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Key is the key argument value.
			Key string
		}
		// FindPolicyByKeyWithSd holds details about calls to the FindPolicyByKeyWithSd method.
		FindPolicyByKeyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Key is the key argument value.
			Key string
		}
		// FindPolicyCategoryByID holds details about calls to the FindPolicyCategoryByID method.
		FindPolicyCategoryByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PolicyCategoryID is the policyCategoryID argument value.
			PolicyCategoryID uuid.UUID
		}
		// FindPolicyCategoryByIDWithSd holds details about calls to the FindPolicyCategoryByIDWithSd method.
		FindPolicyCategoryByIDWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// PolicyCategoryID is the policyCategoryID argument value.
			PolicyCategoryID uuid.UUID
		}
		// FindPolicyCategoryByKey holds details about calls to the FindPolicyCategoryByKey method.
		FindPolicyCategoryByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// FindPolicyCategoryByKeyWithSd holds details about calls to the FindPolicyCategoryByKeyWithSd method.
		FindPolicyCategoryByKeyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Key is the key argument value.
			Key string
		}
		// FindProfessorByID holds details about calls to the FindProfessorByID method.
		FindProfessorByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProfessorID is the professorID argument value.
			ProfessorID uuid.UUID
		}
		// FindProfessorByIDWithSd holds details about calls to the FindProfessorByIDWithSd method.
		FindProfessorByIDWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ProfessorID is the professorID argument value.
			ProfessorID uuid.UUID
		}
		// FindProfessorWithMember holds details about calls to the FindProfessorWithMember method.
		FindProfessorWithMember []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProfessorID is the professorID argument value.
			ProfessorID uuid.UUID
		}
		// FindProfessorWithMemberWithSd holds details about calls to the FindProfessorWithMemberWithSd method.
		FindProfessorWithMemberWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ProfessorID is the professorID argument value.
			ProfessorID uuid.UUID
		}
		// FindReadReceipt holds details about calls to the FindReadReceipt method.
		FindReadReceipt []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
			// MessageID is the messageID argument value.
			MessageID uuid.UUID
		}
		// FindReadReceiptWithSd holds details about calls to the FindReadReceiptWithSd method.
		FindReadReceiptWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
			// MessageID is the messageID argument value.
			MessageID uuid.UUID
		}
		// FindRecordTypeByID holds details about calls to the FindRecordTypeByID method.
		FindRecordTypeByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// RecordTypeID is the recordTypeID argument value.
			RecordTypeID uuid.UUID
		}
		// FindRecordTypeByIDWithSd holds details about calls to the FindRecordTypeByIDWithSd method.
		FindRecordTypeByIDWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// RecordTypeID is the recordTypeID argument value.
			RecordTypeID uuid.UUID
		}
		// FindRecordTypeByKey holds details about calls to the FindRecordTypeByKey method.
		FindRecordTypeByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// FindRecordTypeByKeyWithSd holds details about calls to the FindRecordTypeByKeyWithSd method.
		FindRecordTypeByKeyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Key is the key argument value.
			Key string
		}
		// FindRoleByID holds details about calls to the FindRoleByID method.
		FindRoleByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// RoleID is the roleID argument value.
			RoleID uuid.UUID
		}
		// FindRoleByIDWithSd holds details about calls to the FindRoleByIDWithSd method.
		FindRoleByIDWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// RoleID is the roleID argument value.
			RoleID uuid.UUID
		}
		// FindStudentByID holds details about calls to the FindStudentByID method.
		FindStudentByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// StudentID is the studentID argument value.
			StudentID uuid.UUID
		}
		// FindStudentByIDWithSd holds details about calls to the FindStudentByIDWithSd method.
		FindStudentByIDWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// StudentID is the studentID argument value.
			StudentID uuid.UUID
		}
		// FindStudentWithMember holds details about calls to the FindStudentWithMember method.
		FindStudentWithMember []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// StudentID is the studentID argument value.
			StudentID uuid.UUID
		}
		// FindStudentWithMemberWithSd holds details about calls to the FindStudentWithMemberWithSd method.
		FindStudentWithMemberWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// StudentID is the studentID argument value.
			StudentID uuid.UUID
		}
		// FindWholeOrganization holds details about calls to the FindWholeOrganization method.
		FindWholeOrganization []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// FindWholeOrganizationWithSd holds details about calls to the FindWholeOrganizationWithSd method.
		FindWholeOrganizationWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
		}
		// GetAbsences holds details about calls to the GetAbsences method.
		GetAbsences []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Order is the order argument value.
			Order parameter.AbsenceOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetAbsencesWithSd holds details about calls to the GetAbsencesWithSd method.
		GetAbsencesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Order is the order argument value.
			Order parameter.AbsenceOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetAttachableItems holds details about calls to the GetAttachableItems method.
		GetAttachableItems []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereAttachableItemParam
			// Order is the order argument value.
			Order parameter.AttachableItemOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetAttachableItemsWithMimeType holds details about calls to the GetAttachableItemsWithMimeType method.
		GetAttachableItemsWithMimeType []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereAttachableItemParam
			// Order is the order argument value.
			Order parameter.AttachableItemOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetAttachableItemsWithMimeTypeWithSd holds details about calls to the GetAttachableItemsWithMimeTypeWithSd method.
		GetAttachableItemsWithMimeTypeWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereAttachableItemParam
			// Order is the order argument value.
			Order parameter.AttachableItemOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetAttachableItemsWithSd holds details about calls to the GetAttachableItemsWithSd method.
		GetAttachableItemsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereAttachableItemParam
			// Order is the order argument value.
			Order parameter.AttachableItemOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetAttachedItemsOnChatRoom holds details about calls to the GetAttachedItemsOnChatRoom method.
		GetAttachedItemsOnChatRoom []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomID is the chatRoomID argument value.
			ChatRoomID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereAttachedItemOnChatRoomParam
			// Order is the order argument value.
			Order parameter.AttachedItemOnChatRoomOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetAttachedItemsOnChatRoomWithSd holds details about calls to the GetAttachedItemsOnChatRoomWithSd method.
		GetAttachedItemsOnChatRoomWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomID is the chatRoomID argument value.
			ChatRoomID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereAttachedItemOnChatRoomParam
			// Order is the order argument value.
			Order parameter.AttachedItemOnChatRoomOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetAttachedItemsOnMessage holds details about calls to the GetAttachedItemsOnMessage method.
		GetAttachedItemsOnMessage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MessageID is the messageID argument value.
			MessageID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereAttachedItemOnMessageParam
			// Order is the order argument value.
			Order parameter.AttachedItemOnMessageOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetAttachedItemsOnMessageWithMimeType holds details about calls to the GetAttachedItemsOnMessageWithMimeType method.
		GetAttachedItemsOnMessageWithMimeType []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MessageID is the messageID argument value.
			MessageID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereAttachedItemOnMessageParam
			// Order is the order argument value.
			Order parameter.AttachedItemOnMessageOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetAttachedItemsOnMessageWithMimeTypeWithSd holds details about calls to the GetAttachedItemsOnMessageWithMimeTypeWithSd method.
		GetAttachedItemsOnMessageWithMimeTypeWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MessageID is the messageID argument value.
			MessageID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereAttachedItemOnMessageParam
			// Order is the order argument value.
			Order parameter.AttachedItemOnMessageOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetAttachedItemsOnMessageWithSd holds details about calls to the GetAttachedItemsOnMessageWithSd method.
		GetAttachedItemsOnMessageWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MessageID is the messageID argument value.
			MessageID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereAttachedItemOnMessageParam
			// Order is the order argument value.
			Order parameter.AttachedItemOnMessageOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetAttendStatuses holds details about calls to the GetAttendStatuses method.
		GetAttendStatuses []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereAttendStatusParam
			// Order is the order argument value.
			Order parameter.AttendStatusOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetAttendStatusesWithSd holds details about calls to the GetAttendStatusesWithSd method.
		GetAttendStatusesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereAttendStatusParam
			// Order is the order argument value.
			Order parameter.AttendStatusOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetAttendanceTypes holds details about calls to the GetAttendanceTypes method.
		GetAttendanceTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereAttendanceTypeParam
			// Order is the order argument value.
			Order parameter.AttendanceTypeOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetAttendanceTypesWithSd holds details about calls to the GetAttendanceTypesWithSd method.
		GetAttendanceTypesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereAttendanceTypeParam
			// Order is the order argument value.
			Order parameter.AttendanceTypeOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetChatRoomActionTypes holds details about calls to the GetChatRoomActionTypes method.
		GetChatRoomActionTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereChatRoomActionTypeParam
			// Order is the order argument value.
			Order parameter.ChatRoomActionTypeOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetChatRoomActionTypesWithSd holds details about calls to the GetChatRoomActionTypesWithSd method.
		GetChatRoomActionTypesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereChatRoomActionTypeParam
			// Order is the order argument value.
			Order parameter.ChatRoomActionTypeOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetChatRoomActionsOnChatRoom holds details about calls to the GetChatRoomActionsOnChatRoom method.
		GetChatRoomActionsOnChatRoom []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomID is the chatRoomID argument value.
			ChatRoomID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereChatRoomActionParam
			// Order is the order argument value.
			Order parameter.ChatRoomActionOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetChatRoomActionsOnChatRoomWithSd holds details about calls to the GetChatRoomActionsOnChatRoomWithSd method.
		GetChatRoomActionsOnChatRoomWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomID is the chatRoomID argument value.
			ChatRoomID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereChatRoomActionParam
			// Order is the order argument value.
			Order parameter.ChatRoomActionOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetChatRoomActionsWithDetailOnChatRoom holds details about calls to the GetChatRoomActionsWithDetailOnChatRoom method.
		GetChatRoomActionsWithDetailOnChatRoom []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomID is the chatRoomID argument value.
			ChatRoomID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereChatRoomActionParam
			// Order is the order argument value.
			Order parameter.ChatRoomActionOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetChatRoomActionsWithDetailOnChatRoomWithSd holds details about calls to the GetChatRoomActionsWithDetailOnChatRoomWithSd method.
		GetChatRoomActionsWithDetailOnChatRoomWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomID is the chatRoomID argument value.
			ChatRoomID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereChatRoomActionParam
			// Order is the order argument value.
			Order parameter.ChatRoomActionOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetChatRoomAddMemberActionsOnChatRoom holds details about calls to the GetChatRoomAddMemberActionsOnChatRoom method.
		GetChatRoomAddMemberActionsOnChatRoom []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomID is the chatRoomID argument value.
			ChatRoomID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereChatRoomAddMemberActionParam
			// Order is the order argument value.
			Order parameter.ChatRoomAddMemberActionOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetChatRoomAddMemberActionsOnChatRoomWithSd holds details about calls to the GetChatRoomAddMemberActionsOnChatRoomWithSd method.
		GetChatRoomAddMemberActionsOnChatRoomWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomID is the chatRoomID argument value.
			ChatRoomID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereChatRoomAddMemberActionParam
			// Order is the order argument value.
			Order parameter.ChatRoomAddMemberActionOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetChatRoomCreateActionsOnChatRoom holds details about calls to the GetChatRoomCreateActionsOnChatRoom method.
		GetChatRoomCreateActionsOnChatRoom []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomID is the chatRoomID argument value.
			ChatRoomID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereChatRoomCreateActionParam
			// Order is the order argument value.
			Order parameter.ChatRoomCreateActionOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetChatRoomCreateActionsOnChatRoomWithSd holds details about calls to the GetChatRoomCreateActionsOnChatRoomWithSd method.
		GetChatRoomCreateActionsOnChatRoomWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomID is the chatRoomID argument value.
			ChatRoomID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereChatRoomCreateActionParam
			// Order is the order argument value.
			Order parameter.ChatRoomCreateActionOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetChatRoomDeleteMessageActionsOnChatRoom holds details about calls to the GetChatRoomDeleteMessageActionsOnChatRoom method.
		GetChatRoomDeleteMessageActionsOnChatRoom []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomID is the chatRoomID argument value.
			ChatRoomID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereChatRoomDeleteMessageActionParam
			// Order is the order argument value.
			Order parameter.ChatRoomDeleteMessageActionOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetChatRoomDeleteMessageActionsOnChatRoomWithSd holds details about calls to the GetChatRoomDeleteMessageActionsOnChatRoomWithSd method.
		GetChatRoomDeleteMessageActionsOnChatRoomWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomID is the chatRoomID argument value.
			ChatRoomID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereChatRoomDeleteMessageActionParam
			// Order is the order argument value.
			Order parameter.ChatRoomDeleteMessageActionOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetChatRoomRemoveMemberActionsOnChatRoom holds details about calls to the GetChatRoomRemoveMemberActionsOnChatRoom method.
		GetChatRoomRemoveMemberActionsOnChatRoom []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomID is the chatRoomID argument value.
			ChatRoomID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereChatRoomRemoveMemberActionParam
			// Order is the order argument value.
			Order parameter.ChatRoomRemoveMemberActionOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetChatRoomRemoveMemberActionsOnChatRoomWithSd holds details about calls to the GetChatRoomRemoveMemberActionsOnChatRoomWithSd method.
		GetChatRoomRemoveMemberActionsOnChatRoomWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomID is the chatRoomID argument value.
			ChatRoomID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereChatRoomRemoveMemberActionParam
			// Order is the order argument value.
			Order parameter.ChatRoomRemoveMemberActionOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetChatRoomUpdateNameActionsOnChatRoom holds details about calls to the GetChatRoomUpdateNameActionsOnChatRoom method.
		GetChatRoomUpdateNameActionsOnChatRoom []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomID is the chatRoomID argument value.
			ChatRoomID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereChatRoomUpdateNameActionParam
			// Order is the order argument value.
			Order parameter.ChatRoomUpdateNameActionOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetChatRoomUpdateNameActionsOnChatRoomWithSd holds details about calls to the GetChatRoomUpdateNameActionsOnChatRoomWithSd method.
		GetChatRoomUpdateNameActionsOnChatRoomWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomID is the chatRoomID argument value.
			ChatRoomID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereChatRoomUpdateNameActionParam
			// Order is the order argument value.
			Order parameter.ChatRoomUpdateNameActionOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetChatRoomWithdrawActionsOnChatRoom holds details about calls to the GetChatRoomWithdrawActionsOnChatRoom method.
		GetChatRoomWithdrawActionsOnChatRoom []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomID is the chatRoomID argument value.
			ChatRoomID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereChatRoomWithdrawActionParam
			// Order is the order argument value.
			Order parameter.ChatRoomWithdrawActionOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetChatRoomWithdrawActionsOnChatRoomWithSd holds details about calls to the GetChatRoomWithdrawActionsOnChatRoomWithSd method.
		GetChatRoomWithdrawActionsOnChatRoomWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomID is the chatRoomID argument value.
			ChatRoomID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereChatRoomWithdrawActionParam
			// Order is the order argument value.
			Order parameter.ChatRoomWithdrawActionOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetChatRooms holds details about calls to the GetChatRooms method.
		GetChatRooms []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereChatRoomParam
			// Order is the order argument value.
			Order parameter.ChatRoomOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetChatRoomsOnMember holds details about calls to the GetChatRoomsOnMember method.
		GetChatRoomsOnMember []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereChatRoomOnMemberParam
			// Order is the order argument value.
			Order parameter.ChatRoomOnMemberOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetChatRoomsOnMemberWithSd holds details about calls to the GetChatRoomsOnMemberWithSd method.
		GetChatRoomsOnMemberWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereChatRoomOnMemberParam
			// Order is the order argument value.
			Order parameter.ChatRoomOnMemberOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetChatRoomsWithCoverImage holds details about calls to the GetChatRoomsWithCoverImage method.
		GetChatRoomsWithCoverImage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereChatRoomParam
			// Order is the order argument value.
			Order parameter.ChatRoomOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetChatRoomsWithCoverImageWithSd holds details about calls to the GetChatRoomsWithCoverImageWithSd method.
		GetChatRoomsWithCoverImageWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereChatRoomParam
			// Order is the order argument value.
			Order parameter.ChatRoomOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetChatRoomsWithSd holds details about calls to the GetChatRoomsWithSd method.
		GetChatRoomsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereChatRoomParam
			// Order is the order argument value.
			Order parameter.ChatRoomOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetEventTypes holds details about calls to the GetEventTypes method.
		GetEventTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereEventTypeParam
			// Order is the order argument value.
			Order parameter.EventTypeOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetEventTypesWithSd holds details about calls to the GetEventTypesWithSd method.
		GetEventTypesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereEventTypeParam
			// Order is the order argument value.
			Order parameter.EventTypeOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetFiles holds details about calls to the GetFiles method.
		GetFiles []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereFileParam
			// Order is the order argument value.
			Order parameter.FileOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetFilesWithAttachableItem holds details about calls to the GetFilesWithAttachableItem method.
		GetFilesWithAttachableItem []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereFileParam
			// Order is the order argument value.
			Order parameter.FileOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetFilesWithAttachableItemWithSd holds details about calls to the GetFilesWithAttachableItemWithSd method.
		GetFilesWithAttachableItemWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereFileParam
			// Order is the order argument value.
			Order parameter.FileOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetFilesWithSd holds details about calls to the GetFilesWithSd method.
		GetFilesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereFileParam
			// Order is the order argument value.
			Order parameter.FileOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetGrades holds details about calls to the GetGrades method.
		GetGrades []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereGradeParam
			// Order is the order argument value.
			Order parameter.GradeOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetGradesWithOrganization holds details about calls to the GetGradesWithOrganization method.
		GetGradesWithOrganization []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereGradeParam
			// Order is the order argument value.
			Order parameter.GradeOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetGradesWithOrganizationWithSd holds details about calls to the GetGradesWithOrganizationWithSd method.
		GetGradesWithOrganizationWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereGradeParam
			// Order is the order argument value.
			Order parameter.GradeOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetGradesWithSd holds details about calls to the GetGradesWithSd method.
		GetGradesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereGradeParam
			// Order is the order argument value.
			Order parameter.GradeOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetGroups holds details about calls to the GetGroups method.
		GetGroups []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereGroupParam
			// Order is the order argument value.
			Order parameter.GroupOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetGroupsWithOrganization holds details about calls to the GetGroupsWithOrganization method.
		GetGroupsWithOrganization []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereGroupParam
			// Order is the order argument value.
			Order parameter.GroupOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetGroupsWithOrganizationWithSd holds details about calls to the GetGroupsWithOrganizationWithSd method.
		GetGroupsWithOrganizationWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereGroupParam
			// Order is the order argument value.
			Order parameter.GroupOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetGroupsWithSd holds details about calls to the GetGroupsWithSd method.
		GetGroupsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereGroupParam
			// Order is the order argument value.
			Order parameter.GroupOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetImages holds details about calls to the GetImages method.
		GetImages []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereImageParam
			// Order is the order argument value.
			Order parameter.ImageOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetImagesWithAttachableItem holds details about calls to the GetImagesWithAttachableItem method.
		GetImagesWithAttachableItem []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereImageParam
			// Order is the order argument value.
			Order parameter.ImageOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetImagesWithAttachableItemWithSd holds details about calls to the GetImagesWithAttachableItemWithSd method.
		GetImagesWithAttachableItemWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereImageParam
			// Order is the order argument value.
			Order parameter.ImageOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetImagesWithSd holds details about calls to the GetImagesWithSd method.
		GetImagesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereImageParam
			// Order is the order argument value.
			Order parameter.ImageOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetMembers holds details about calls to the GetMembers method.
		GetMembers []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereMemberParam
			// Order is the order argument value.
			Order parameter.MemberOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetMembersOnChatRoom holds details about calls to the GetMembersOnChatRoom method.
		GetMembersOnChatRoom []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomID is the chatRoomID argument value.
			ChatRoomID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereMemberOnChatRoomParam
			// Order is the order argument value.
			Order parameter.MemberOnChatRoomOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetMembersOnChatRoomAddMemberAction holds details about calls to the GetMembersOnChatRoomAddMemberAction method.
		GetMembersOnChatRoomAddMemberAction []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomAddMemberActionID is the chatRoomAddMemberActionID argument value.
			ChatRoomAddMemberActionID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereMemberOnChatRoomAddMemberActionParam
			// Order is the order argument value.
			Order parameter.MemberOnChatRoomAddMemberActionOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetMembersOnChatRoomAddMemberActionWithSd holds details about calls to the GetMembersOnChatRoomAddMemberActionWithSd method.
		GetMembersOnChatRoomAddMemberActionWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomAddMemberActionID is the chatRoomAddMemberActionID argument value.
			ChatRoomAddMemberActionID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereMemberOnChatRoomAddMemberActionParam
			// Order is the order argument value.
			Order parameter.MemberOnChatRoomAddMemberActionOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetMembersOnChatRoomRemoveMemberAction holds details about calls to the GetMembersOnChatRoomRemoveMemberAction method.
		GetMembersOnChatRoomRemoveMemberAction []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomRemoveMemberActionID is the chatRoomRemoveMemberActionID argument value.
			ChatRoomRemoveMemberActionID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereMemberOnChatRoomRemoveMemberActionParam
			// Order is the order argument value.
			Order parameter.MemberOnChatRoomRemoveMemberActionOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetMembersOnChatRoomRemoveMemberActionWithSd holds details about calls to the GetMembersOnChatRoomRemoveMemberActionWithSd method.
		GetMembersOnChatRoomRemoveMemberActionWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomRemoveMemberActionID is the chatRoomRemoveMemberActionID argument value.
			ChatRoomRemoveMemberActionID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereMemberOnChatRoomRemoveMemberActionParam
			// Order is the order argument value.
			Order parameter.MemberOnChatRoomRemoveMemberActionOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetMembersOnChatRoomWithSd holds details about calls to the GetMembersOnChatRoomWithSd method.
		GetMembersOnChatRoomWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomID is the chatRoomID argument value.
			ChatRoomID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereMemberOnChatRoomParam
			// Order is the order argument value.
			Order parameter.MemberOnChatRoomOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetMembersOnOrganization holds details about calls to the GetMembersOnOrganization method.
		GetMembersOnOrganization []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// OrganizationID is the organizationID argument value.
			OrganizationID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereMemberOnOrganizationParam
			// Order is the order argument value.
			Order parameter.MemberOnOrganizationOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetMembersOnOrganizationWithSd holds details about calls to the GetMembersOnOrganizationWithSd method.
		GetMembersOnOrganizationWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// OrganizationID is the organizationID argument value.
			OrganizationID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereMemberOnOrganizationParam
			// Order is the order argument value.
			Order parameter.MemberOnOrganizationOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetMembersWithAttendStatus holds details about calls to the GetMembersWithAttendStatus method.
		GetMembersWithAttendStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereMemberParam
			// Order is the order argument value.
			Order parameter.MemberOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetMembersWithAttendStatusWithSd holds details about calls to the GetMembersWithAttendStatusWithSd method.
		GetMembersWithAttendStatusWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereMemberParam
			// Order is the order argument value.
			Order parameter.MemberOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetMembersWithCrew holds details about calls to the GetMembersWithCrew method.
		GetMembersWithCrew []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereMemberParam
			// Order is the order argument value.
			Order parameter.MemberOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetMembersWithCrewWithSd holds details about calls to the GetMembersWithCrewWithSd method.
		GetMembersWithCrewWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereMemberParam
			// Order is the order argument value.
			Order parameter.MemberOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetMembersWithDetail holds details about calls to the GetMembersWithDetail method.
		GetMembersWithDetail []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereMemberParam
			// Order is the order argument value.
			Order parameter.MemberOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetMembersWithDetailWithSd holds details about calls to the GetMembersWithDetailWithSd method.
		GetMembersWithDetailWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereMemberParam
			// Order is the order argument value.
			Order parameter.MemberOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetMembersWithPersonalOrganization holds details about calls to the GetMembersWithPersonalOrganization method.
		GetMembersWithPersonalOrganization []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereMemberParam
			// Order is the order argument value.
			Order parameter.MemberOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetMembersWithPersonalOrganizationWithSd holds details about calls to the GetMembersWithPersonalOrganizationWithSd method.
		GetMembersWithPersonalOrganizationWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereMemberParam
			// Order is the order argument value.
			Order parameter.MemberOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetMembersWithProfileImage holds details about calls to the GetMembersWithProfileImage method.
		GetMembersWithProfileImage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereMemberParam
			// Order is the order argument value.
			Order parameter.MemberOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetMembersWithProfileImageWithSd holds details about calls to the GetMembersWithProfileImageWithSd method.
		GetMembersWithProfileImageWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereMemberParam
			// Order is the order argument value.
			Order parameter.MemberOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetMembersWithRole holds details about calls to the GetMembersWithRole method.
		GetMembersWithRole []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereMemberParam
			// Order is the order argument value.
			Order parameter.MemberOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetMembersWithRoleWithSd holds details about calls to the GetMembersWithRoleWithSd method.
		GetMembersWithRoleWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereMemberParam
			// Order is the order argument value.
			Order parameter.MemberOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetMembersWithSd holds details about calls to the GetMembersWithSd method.
		GetMembersWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereMemberParam
			// Order is the order argument value.
			Order parameter.MemberOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetMessages holds details about calls to the GetMessages method.
		GetMessages []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereMessageParam
			// Order is the order argument value.
			Order parameter.MessageOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetMessagesWithChatRoom holds details about calls to the GetMessagesWithChatRoom method.
		GetMessagesWithChatRoom []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereMessageParam
			// Order is the order argument value.
			Order parameter.MessageOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetMessagesWithChatRoomWithSd holds details about calls to the GetMessagesWithChatRoomWithSd method.
		GetMessagesWithChatRoomWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereMessageParam
			// Order is the order argument value.
			Order parameter.MessageOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetMessagesWithSd holds details about calls to the GetMessagesWithSd method.
		GetMessagesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereMessageParam
			// Order is the order argument value.
			Order parameter.MessageOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetMessagesWithSender holds details about calls to the GetMessagesWithSender method.
		GetMessagesWithSender []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereMessageParam
			// Order is the order argument value.
			Order parameter.MessageOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetMessagesWithSenderWithSd holds details about calls to the GetMessagesWithSenderWithSd method.
		GetMessagesWithSenderWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereMessageParam
			// Order is the order argument value.
			Order parameter.MessageOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetMimeTypes holds details about calls to the GetMimeTypes method.
		GetMimeTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereMimeTypeParam
			// Order is the order argument value.
			Order parameter.MimeTypeOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetMimeTypesWithSd holds details about calls to the GetMimeTypesWithSd method.
		GetMimeTypesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereMimeTypeParam
			// Order is the order argument value.
			Order parameter.MimeTypeOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetOrganizations holds details about calls to the GetOrganizations method.
		GetOrganizations []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereOrganizationParam
			// Order is the order argument value.
			Order parameter.OrganizationOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetOrganizationsOnMember holds details about calls to the GetOrganizationsOnMember method.
		GetOrganizationsOnMember []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereOrganizationOnMemberParam
			// Order is the order argument value.
			Order parameter.OrganizationOnMemberOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetOrganizationsOnMemberWithSd holds details about calls to the GetOrganizationsOnMemberWithSd method.
		GetOrganizationsOnMemberWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereOrganizationOnMemberParam
			// Order is the order argument value.
			Order parameter.OrganizationOnMemberOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetOrganizationsWithChatRoom holds details about calls to the GetOrganizationsWithChatRoom method.
		GetOrganizationsWithChatRoom []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereOrganizationParam
			// Order is the order argument value.
			Order parameter.OrganizationOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetOrganizationsWithChatRoomAndDetail holds details about calls to the GetOrganizationsWithChatRoomAndDetail method.
		GetOrganizationsWithChatRoomAndDetail []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereOrganizationParam
			// Order is the order argument value.
			Order parameter.OrganizationOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetOrganizationsWithChatRoomAndDetailWithSd holds details about calls to the GetOrganizationsWithChatRoomAndDetailWithSd method.
		GetOrganizationsWithChatRoomAndDetailWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereOrganizationParam
			// Order is the order argument value.
			Order parameter.OrganizationOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetOrganizationsWithChatRoomWithSd holds details about calls to the GetOrganizationsWithChatRoomWithSd method.
		GetOrganizationsWithChatRoomWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereOrganizationParam
			// Order is the order argument value.
			Order parameter.OrganizationOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetOrganizationsWithDetail holds details about calls to the GetOrganizationsWithDetail method.
		GetOrganizationsWithDetail []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereOrganizationParam
			// Order is the order argument value.
			Order parameter.OrganizationOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetOrganizationsWithDetailWithSd holds details about calls to the GetOrganizationsWithDetailWithSd method.
		GetOrganizationsWithDetailWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereOrganizationParam
			// Order is the order argument value.
			Order parameter.OrganizationOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetOrganizationsWithSd holds details about calls to the GetOrganizationsWithSd method.
		GetOrganizationsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereOrganizationParam
			// Order is the order argument value.
			Order parameter.OrganizationOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetPermissionCategories holds details about calls to the GetPermissionCategories method.
		GetPermissionCategories []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WherePermissionCategoryParam
			// Order is the order argument value.
			Order parameter.PermissionCategoryOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetPermissionCategoriesWithSd holds details about calls to the GetPermissionCategoriesWithSd method.
		GetPermissionCategoriesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WherePermissionCategoryParam
			// Order is the order argument value.
			Order parameter.PermissionCategoryOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetPermissions holds details about calls to the GetPermissions method.
		GetPermissions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WherePermissionParam
			// Order is the order argument value.
			Order parameter.PermissionOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetPermissionsWithCategory holds details about calls to the GetPermissionsWithCategory method.
		GetPermissionsWithCategory []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WherePermissionParam
			// Order is the order argument value.
			Order parameter.PermissionOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetPermissionsWithCategoryWithSd holds details about calls to the GetPermissionsWithCategoryWithSd method.
		GetPermissionsWithCategoryWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WherePermissionParam
			// Order is the order argument value.
			Order parameter.PermissionOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetPermissionsWithSd holds details about calls to the GetPermissionsWithSd method.
		GetPermissionsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WherePermissionParam
			// Order is the order argument value.
			Order parameter.PermissionOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetPluralAbsences holds details about calls to the GetPluralAbsences method.
		GetPluralAbsences []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Ids is the ids argument value.
			Ids []uuid.UUID
			// Order is the order argument value.
			Order parameter.AbsenceOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralAbsencesWithSd holds details about calls to the GetPluralAbsencesWithSd method.
		GetPluralAbsencesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Ids is the ids argument value.
			Ids []uuid.UUID
			// Order is the order argument value.
			Order parameter.AbsenceOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralAttachableItems holds details about calls to the GetPluralAttachableItems method.
		GetPluralAttachableItems []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AttachableItemIDs is the attachableItemIDs argument value.
			AttachableItemIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.AttachableItemOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralAttachableItemsWithMimeType holds details about calls to the GetPluralAttachableItemsWithMimeType method.
		GetPluralAttachableItemsWithMimeType []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AttachableItemIDs is the attachableItemIDs argument value.
			AttachableItemIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.AttachableItemOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralAttachableItemsWithMimeTypeWithSd holds details about calls to the GetPluralAttachableItemsWithMimeTypeWithSd method.
		GetPluralAttachableItemsWithMimeTypeWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// AttachableItemIDs is the attachableItemIDs argument value.
			AttachableItemIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.AttachableItemOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralAttachableItemsWithSd holds details about calls to the GetPluralAttachableItemsWithSd method.
		GetPluralAttachableItemsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// AttachableItemIDs is the attachableItemIDs argument value.
			AttachableItemIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.AttachableItemOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralAttachedItemsOnMessage holds details about calls to the GetPluralAttachedItemsOnMessage method.
		GetPluralAttachedItemsOnMessage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MessageIDs is the messageIDs argument value.
			MessageIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.AttachedItemOnMessageOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralAttachedItemsOnMessageWithMimeType holds details about calls to the GetPluralAttachedItemsOnMessageWithMimeType method.
		GetPluralAttachedItemsOnMessageWithMimeType []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MessageIDs is the messageIDs argument value.
			MessageIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.AttachedItemOnMessageOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralAttachedItemsOnMessageWithMimeTypeWithSd holds details about calls to the GetPluralAttachedItemsOnMessageWithMimeTypeWithSd method.
		GetPluralAttachedItemsOnMessageWithMimeTypeWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MessageIDs is the messageIDs argument value.
			MessageIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.AttachedItemOnMessageOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralAttachedItemsOnMessageWithSd holds details about calls to the GetPluralAttachedItemsOnMessageWithSd method.
		GetPluralAttachedItemsOnMessageWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MessageIDs is the messageIDs argument value.
			MessageIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.AttachedItemOnMessageOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralAttendStatuses holds details about calls to the GetPluralAttendStatuses method.
		GetPluralAttendStatuses []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AttendStatusIDs is the attendStatusIDs argument value.
			AttendStatusIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.AttendStatusOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralAttendStatusesWithSd holds details about calls to the GetPluralAttendStatusesWithSd method.
		GetPluralAttendStatusesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// AttendStatusIDs is the attendStatusIDs argument value.
			AttendStatusIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.AttendStatusOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralAttendanceTypes holds details about calls to the GetPluralAttendanceTypes method.
		GetPluralAttendanceTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AttendanceTypeIDs is the attendanceTypeIDs argument value.
			AttendanceTypeIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.AttendanceTypeOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralAttendanceTypesWithSd holds details about calls to the GetPluralAttendanceTypesWithSd method.
		GetPluralAttendanceTypesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// AttendanceTypeIDs is the attendanceTypeIDs argument value.
			AttendanceTypeIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.AttendanceTypeOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralChatRoomActionTypes holds details about calls to the GetPluralChatRoomActionTypes method.
		GetPluralChatRoomActionTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// RecordTypeIDs is the recordTypeIDs argument value.
			RecordTypeIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.ChatRoomActionTypeOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralChatRoomActionTypesWithSd holds details about calls to the GetPluralChatRoomActionTypesWithSd method.
		GetPluralChatRoomActionTypesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// RecordTypeIDs is the recordTypeIDs argument value.
			RecordTypeIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.ChatRoomActionTypeOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralChatRoomActions holds details about calls to the GetPluralChatRoomActions method.
		GetPluralChatRoomActions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomActionIDs is the chatRoomActionIDs argument value.
			ChatRoomActionIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.ChatRoomActionOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralChatRoomActionsWithDetail holds details about calls to the GetPluralChatRoomActionsWithDetail method.
		GetPluralChatRoomActionsWithDetail []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomActionIDs is the chatRoomActionIDs argument value.
			ChatRoomActionIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.ChatRoomActionOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralChatRoomActionsWithDetailWithSd holds details about calls to the GetPluralChatRoomActionsWithDetailWithSd method.
		GetPluralChatRoomActionsWithDetailWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomActionIDs is the chatRoomActionIDs argument value.
			ChatRoomActionIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.ChatRoomActionOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralChatRoomActionsWithSd holds details about calls to the GetPluralChatRoomActionsWithSd method.
		GetPluralChatRoomActionsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomActionIDs is the chatRoomActionIDs argument value.
			ChatRoomActionIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.ChatRoomActionOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralChatRoomAddMemberActions holds details about calls to the GetPluralChatRoomAddMemberActions method.
		GetPluralChatRoomAddMemberActions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomAddMemberActionIDs is the chatRoomAddMemberActionIDs argument value.
			ChatRoomAddMemberActionIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.ChatRoomAddMemberActionOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralChatRoomAddMemberActionsByChatRoomActionIDs holds details about calls to the GetPluralChatRoomAddMemberActionsByChatRoomActionIDs method.
		GetPluralChatRoomAddMemberActionsByChatRoomActionIDs []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomActionIDs is the chatRoomActionIDs argument value.
			ChatRoomActionIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.ChatRoomAddMemberActionOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralChatRoomAddMemberActionsByChatRoomActionIDsWithSd holds details about calls to the GetPluralChatRoomAddMemberActionsByChatRoomActionIDsWithSd method.
		GetPluralChatRoomAddMemberActionsByChatRoomActionIDsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomActionIDs is the chatRoomActionIDs argument value.
			ChatRoomActionIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.ChatRoomAddMemberActionOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralChatRoomAddMemberActionsWithSd holds details about calls to the GetPluralChatRoomAddMemberActionsWithSd method.
		GetPluralChatRoomAddMemberActionsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomAddMemberActionIDs is the chatRoomAddMemberActionIDs argument value.
			ChatRoomAddMemberActionIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.ChatRoomAddMemberActionOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralChatRoomCreateActions holds details about calls to the GetPluralChatRoomCreateActions method.
		GetPluralChatRoomCreateActions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomCreateActionIDs is the chatRoomCreateActionIDs argument value.
			ChatRoomCreateActionIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.ChatRoomCreateActionOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralChatRoomCreateActionsByChatRoomActionIDs holds details about calls to the GetPluralChatRoomCreateActionsByChatRoomActionIDs method.
		GetPluralChatRoomCreateActionsByChatRoomActionIDs []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomActionIDs is the chatRoomActionIDs argument value.
			ChatRoomActionIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.ChatRoomCreateActionOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralChatRoomCreateActionsByChatRoomActionIDsWithSd holds details about calls to the GetPluralChatRoomCreateActionsByChatRoomActionIDsWithSd method.
		GetPluralChatRoomCreateActionsByChatRoomActionIDsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomActionIDs is the chatRoomActionIDs argument value.
			ChatRoomActionIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.ChatRoomCreateActionOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralChatRoomCreateActionsWithSd holds details about calls to the GetPluralChatRoomCreateActionsWithSd method.
		GetPluralChatRoomCreateActionsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomCreateActionIDs is the chatRoomCreateActionIDs argument value.
			ChatRoomCreateActionIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.ChatRoomCreateActionOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralChatRoomDeleteMessageActions holds details about calls to the GetPluralChatRoomDeleteMessageActions method.
		GetPluralChatRoomDeleteMessageActions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomDeleteMessageActionIDs is the chatRoomDeleteMessageActionIDs argument value.
			ChatRoomDeleteMessageActionIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.ChatRoomDeleteMessageActionOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralChatRoomDeleteMessageActionsByChatRoomActionIDs holds details about calls to the GetPluralChatRoomDeleteMessageActionsByChatRoomActionIDs method.
		GetPluralChatRoomDeleteMessageActionsByChatRoomActionIDs []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomActionIDs is the chatRoomActionIDs argument value.
			ChatRoomActionIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.ChatRoomDeleteMessageActionOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralChatRoomDeleteMessageActionsByChatRoomActionIDsWithSd holds details about calls to the GetPluralChatRoomDeleteMessageActionsByChatRoomActionIDsWithSd method.
		GetPluralChatRoomDeleteMessageActionsByChatRoomActionIDsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomActionIDs is the chatRoomActionIDs argument value.
			ChatRoomActionIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.ChatRoomDeleteMessageActionOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralChatRoomDeleteMessageActionsWithSd holds details about calls to the GetPluralChatRoomDeleteMessageActionsWithSd method.
		GetPluralChatRoomDeleteMessageActionsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomDeleteMessageActionIDs is the chatRoomDeleteMessageActionIDs argument value.
			ChatRoomDeleteMessageActionIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.ChatRoomDeleteMessageActionOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralChatRoomRemoveMemberActions holds details about calls to the GetPluralChatRoomRemoveMemberActions method.
		GetPluralChatRoomRemoveMemberActions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomRemoveMemberActionIDs is the chatRoomRemoveMemberActionIDs argument value.
			ChatRoomRemoveMemberActionIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.ChatRoomRemoveMemberActionOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralChatRoomRemoveMemberActionsByChatRoomActionIDs holds details about calls to the GetPluralChatRoomRemoveMemberActionsByChatRoomActionIDs method.
		GetPluralChatRoomRemoveMemberActionsByChatRoomActionIDs []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomActionIDs is the chatRoomActionIDs argument value.
			ChatRoomActionIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.ChatRoomRemoveMemberActionOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralChatRoomRemoveMemberActionsByChatRoomActionIDsWithSd holds details about calls to the GetPluralChatRoomRemoveMemberActionsByChatRoomActionIDsWithSd method.
		GetPluralChatRoomRemoveMemberActionsByChatRoomActionIDsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomActionIDs is the chatRoomActionIDs argument value.
			ChatRoomActionIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.ChatRoomRemoveMemberActionOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralChatRoomRemoveMemberActionsWithSd holds details about calls to the GetPluralChatRoomRemoveMemberActionsWithSd method.
		GetPluralChatRoomRemoveMemberActionsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomRemoveMemberActionIDs is the chatRoomRemoveMemberActionIDs argument value.
			ChatRoomRemoveMemberActionIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.ChatRoomRemoveMemberActionOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralChatRoomUpdateNameActions holds details about calls to the GetPluralChatRoomUpdateNameActions method.
		GetPluralChatRoomUpdateNameActions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomUpdateNameActionIDs is the chatRoomUpdateNameActionIDs argument value.
			ChatRoomUpdateNameActionIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.ChatRoomUpdateNameActionOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralChatRoomUpdateNameActionsByChatRoomActionIDs holds details about calls to the GetPluralChatRoomUpdateNameActionsByChatRoomActionIDs method.
		GetPluralChatRoomUpdateNameActionsByChatRoomActionIDs []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomActionIDs is the chatRoomActionIDs argument value.
			ChatRoomActionIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.ChatRoomUpdateNameActionOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralChatRoomUpdateNameActionsByChatRoomActionIDsWithSd holds details about calls to the GetPluralChatRoomUpdateNameActionsByChatRoomActionIDsWithSd method.
		GetPluralChatRoomUpdateNameActionsByChatRoomActionIDsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomActionIDs is the chatRoomActionIDs argument value.
			ChatRoomActionIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.ChatRoomUpdateNameActionOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralChatRoomUpdateNameActionsWithSd holds details about calls to the GetPluralChatRoomUpdateNameActionsWithSd method.
		GetPluralChatRoomUpdateNameActionsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomUpdateNameActionIDs is the chatRoomUpdateNameActionIDs argument value.
			ChatRoomUpdateNameActionIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.ChatRoomUpdateNameActionOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralChatRoomWithdrawActions holds details about calls to the GetPluralChatRoomWithdrawActions method.
		GetPluralChatRoomWithdrawActions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomWithdrawActionIDs is the chatRoomWithdrawActionIDs argument value.
			ChatRoomWithdrawActionIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.ChatRoomWithdrawActionOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralChatRoomWithdrawActionsByChatRoomActionIDs holds details about calls to the GetPluralChatRoomWithdrawActionsByChatRoomActionIDs method.
		GetPluralChatRoomWithdrawActionsByChatRoomActionIDs []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomActionIDs is the chatRoomActionIDs argument value.
			ChatRoomActionIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.ChatRoomWithdrawActionOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralChatRoomWithdrawActionsByChatRoomActionIDsWithSd holds details about calls to the GetPluralChatRoomWithdrawActionsByChatRoomActionIDsWithSd method.
		GetPluralChatRoomWithdrawActionsByChatRoomActionIDsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomActionIDs is the chatRoomActionIDs argument value.
			ChatRoomActionIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.ChatRoomWithdrawActionOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralChatRoomWithdrawActionsWithSd holds details about calls to the GetPluralChatRoomWithdrawActionsWithSd method.
		GetPluralChatRoomWithdrawActionsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomWithdrawActionIDs is the chatRoomWithdrawActionIDs argument value.
			ChatRoomWithdrawActionIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.ChatRoomWithdrawActionOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralChatRooms holds details about calls to the GetPluralChatRooms method.
		GetPluralChatRooms []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomIDs is the chatRoomIDs argument value.
			ChatRoomIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.ChatRoomOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralChatRoomsOnMember holds details about calls to the GetPluralChatRoomsOnMember method.
		GetPluralChatRoomsOnMember []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MemberIDs is the memberIDs argument value.
			MemberIDs []uuid.UUID
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Order is the order argument value.
			Order parameter.ChatRoomOnMemberOrderMethod
		}
		// GetPluralChatRoomsOnMemberWithSd holds details about calls to the GetPluralChatRoomsOnMemberWithSd method.
		GetPluralChatRoomsOnMemberWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MemberIDs is the memberIDs argument value.
			MemberIDs []uuid.UUID
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Order is the order argument value.
			Order parameter.ChatRoomOnMemberOrderMethod
		}
		// GetPluralChatRoomsWithCoverImage holds details about calls to the GetPluralChatRoomsWithCoverImage method.
		GetPluralChatRoomsWithCoverImage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomIDs is the chatRoomIDs argument value.
			ChatRoomIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.ChatRoomOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralChatRoomsWithCoverImageWithSd holds details about calls to the GetPluralChatRoomsWithCoverImageWithSd method.
		GetPluralChatRoomsWithCoverImageWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomIDs is the chatRoomIDs argument value.
			ChatRoomIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.ChatRoomOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralChatRoomsWithSd holds details about calls to the GetPluralChatRoomsWithSd method.
		GetPluralChatRoomsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomIDs is the chatRoomIDs argument value.
			ChatRoomIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.ChatRoomOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralEventTypes holds details about calls to the GetPluralEventTypes method.
		GetPluralEventTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// EventTypeIDs is the eventTypeIDs argument value.
			EventTypeIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.EventTypeOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralEventTypesWithSd holds details about calls to the GetPluralEventTypesWithSd method.
		GetPluralEventTypesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// EventTypeIDs is the eventTypeIDs argument value.
			EventTypeIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.EventTypeOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralFiles holds details about calls to the GetPluralFiles method.
		GetPluralFiles []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// FileIDs is the fileIDs argument value.
			FileIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.FileOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralFilesWithAttachableItem holds details about calls to the GetPluralFilesWithAttachableItem method.
		GetPluralFilesWithAttachableItem []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// FileIDs is the fileIDs argument value.
			FileIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.FileOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralFilesWithAttachableItemWithSd holds details about calls to the GetPluralFilesWithAttachableItemWithSd method.
		GetPluralFilesWithAttachableItemWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// FileIDs is the fileIDs argument value.
			FileIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.FileOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralFilesWithSd holds details about calls to the GetPluralFilesWithSd method.
		GetPluralFilesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// FileIDs is the fileIDs argument value.
			FileIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.FileOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralGrades holds details about calls to the GetPluralGrades method.
		GetPluralGrades []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// GradeIDs is the gradeIDs argument value.
			GradeIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.GradeOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralGradesWithOrganization holds details about calls to the GetPluralGradesWithOrganization method.
		GetPluralGradesWithOrganization []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// GradeIDs is the gradeIDs argument value.
			GradeIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.GradeOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralGradesWithOrganizationWithSd holds details about calls to the GetPluralGradesWithOrganizationWithSd method.
		GetPluralGradesWithOrganizationWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// GradeIDs is the gradeIDs argument value.
			GradeIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.GradeOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralGradesWithSd holds details about calls to the GetPluralGradesWithSd method.
		GetPluralGradesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// GradeIDs is the gradeIDs argument value.
			GradeIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.GradeOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralGroups holds details about calls to the GetPluralGroups method.
		GetPluralGroups []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// GroupIDs is the groupIDs argument value.
			GroupIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.GroupOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralGroupsWithOrganization holds details about calls to the GetPluralGroupsWithOrganization method.
		GetPluralGroupsWithOrganization []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// GroupIDs is the groupIDs argument value.
			GroupIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.GroupOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralGroupsWithOrganizationWithSd holds details about calls to the GetPluralGroupsWithOrganizationWithSd method.
		GetPluralGroupsWithOrganizationWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// GroupIDs is the groupIDs argument value.
			GroupIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.GroupOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralGroupsWithSd holds details about calls to the GetPluralGroupsWithSd method.
		GetPluralGroupsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// GroupIDs is the groupIDs argument value.
			GroupIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.GroupOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralImages holds details about calls to the GetPluralImages method.
		GetPluralImages []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ImageIDs is the imageIDs argument value.
			ImageIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.ImageOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralImagesWithAttachableItem holds details about calls to the GetPluralImagesWithAttachableItem method.
		GetPluralImagesWithAttachableItem []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ImageIDs is the imageIDs argument value.
			ImageIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.ImageOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralImagesWithAttachableItemWithSd holds details about calls to the GetPluralImagesWithAttachableItemWithSd method.
		GetPluralImagesWithAttachableItemWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ImageIDs is the imageIDs argument value.
			ImageIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.ImageOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralImagesWithSd holds details about calls to the GetPluralImagesWithSd method.
		GetPluralImagesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ImageIDs is the imageIDs argument value.
			ImageIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.ImageOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralMembers holds details about calls to the GetPluralMembers method.
		GetPluralMembers []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MemberIDs is the memberIDs argument value.
			MemberIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.MemberOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralMembersOnChatRoom holds details about calls to the GetPluralMembersOnChatRoom method.
		GetPluralMembersOnChatRoom []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomIDs is the chatRoomIDs argument value.
			ChatRoomIDs []uuid.UUID
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Order is the order argument value.
			Order parameter.MemberOnChatRoomOrderMethod
		}
		// GetPluralMembersOnChatRoomAddMemberAction holds details about calls to the GetPluralMembersOnChatRoomAddMemberAction method.
		GetPluralMembersOnChatRoomAddMemberAction []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomAddMemberActionIDs is the chatRoomAddMemberActionIDs argument value.
			ChatRoomAddMemberActionIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.MemberOnChatRoomAddMemberActionOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralMembersOnChatRoomAddMemberActionWithSd holds details about calls to the GetPluralMembersOnChatRoomAddMemberActionWithSd method.
		GetPluralMembersOnChatRoomAddMemberActionWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomAddMemberActionIDs is the chatRoomAddMemberActionIDs argument value.
			ChatRoomAddMemberActionIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.MemberOnChatRoomAddMemberActionOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralMembersOnChatRoomRemoveMemberAction holds details about calls to the GetPluralMembersOnChatRoomRemoveMemberAction method.
		GetPluralMembersOnChatRoomRemoveMemberAction []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomRemoveMemberActionIDs is the chatRoomRemoveMemberActionIDs argument value.
			ChatRoomRemoveMemberActionIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.MemberOnChatRoomRemoveMemberActionOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralMembersOnChatRoomRemoveMemberActionWithSd holds details about calls to the GetPluralMembersOnChatRoomRemoveMemberActionWithSd method.
		GetPluralMembersOnChatRoomRemoveMemberActionWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomRemoveMemberActionIDs is the chatRoomRemoveMemberActionIDs argument value.
			ChatRoomRemoveMemberActionIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.MemberOnChatRoomRemoveMemberActionOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralMembersOnChatRoomWithSd holds details about calls to the GetPluralMembersOnChatRoomWithSd method.
		GetPluralMembersOnChatRoomWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomIDs is the chatRoomIDs argument value.
			ChatRoomIDs []uuid.UUID
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Order is the order argument value.
			Order parameter.MemberOnChatRoomOrderMethod
		}
		// GetPluralMembersOnOrganization holds details about calls to the GetPluralMembersOnOrganization method.
		GetPluralMembersOnOrganization []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// OrganizationIDs is the organizationIDs argument value.
			OrganizationIDs []uuid.UUID
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Order is the order argument value.
			Order parameter.MemberOnOrganizationOrderMethod
		}
		// GetPluralMembersOnOrganizationWithSd holds details about calls to the GetPluralMembersOnOrganizationWithSd method.
		GetPluralMembersOnOrganizationWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// OrganizationIDs is the organizationIDs argument value.
			OrganizationIDs []uuid.UUID
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Order is the order argument value.
			Order parameter.MemberOnOrganizationOrderMethod
		}
		// GetPluralMembersWithAttendStatus holds details about calls to the GetPluralMembersWithAttendStatus method.
		GetPluralMembersWithAttendStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MemberIDs is the memberIDs argument value.
			MemberIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.MemberOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralMembersWithAttendStatusWithSd holds details about calls to the GetPluralMembersWithAttendStatusWithSd method.
		GetPluralMembersWithAttendStatusWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MemberIDs is the memberIDs argument value.
			MemberIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.MemberOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralMembersWithCrew holds details about calls to the GetPluralMembersWithCrew method.
		GetPluralMembersWithCrew []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MemberIDs is the memberIDs argument value.
			MemberIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.MemberOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralMembersWithCrewWithSd holds details about calls to the GetPluralMembersWithCrewWithSd method.
		GetPluralMembersWithCrewWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MemberIDs is the memberIDs argument value.
			MemberIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.MemberOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralMembersWithDetail holds details about calls to the GetPluralMembersWithDetail method.
		GetPluralMembersWithDetail []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MemberIDs is the memberIDs argument value.
			MemberIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.MemberOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralMembersWithDetailWithSd holds details about calls to the GetPluralMembersWithDetailWithSd method.
		GetPluralMembersWithDetailWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MemberIDs is the memberIDs argument value.
			MemberIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.MemberOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralMembersWithPersonalOrganization holds details about calls to the GetPluralMembersWithPersonalOrganization method.
		GetPluralMembersWithPersonalOrganization []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MemberIDs is the memberIDs argument value.
			MemberIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.MemberOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralMembersWithPersonalOrganizationWithSd holds details about calls to the GetPluralMembersWithPersonalOrganizationWithSd method.
		GetPluralMembersWithPersonalOrganizationWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MemberIDs is the memberIDs argument value.
			MemberIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.MemberOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralMembersWithProfileImage holds details about calls to the GetPluralMembersWithProfileImage method.
		GetPluralMembersWithProfileImage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MemberIDs is the memberIDs argument value.
			MemberIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.MemberOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralMembersWithProfileImageWithSd holds details about calls to the GetPluralMembersWithProfileImageWithSd method.
		GetPluralMembersWithProfileImageWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MemberIDs is the memberIDs argument value.
			MemberIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.MemberOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralMembersWithRole holds details about calls to the GetPluralMembersWithRole method.
		GetPluralMembersWithRole []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MemberIDs is the memberIDs argument value.
			MemberIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.MemberOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralMembersWithRoleWithSd holds details about calls to the GetPluralMembersWithRoleWithSd method.
		GetPluralMembersWithRoleWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MemberIDs is the memberIDs argument value.
			MemberIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.MemberOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralMembersWithSd holds details about calls to the GetPluralMembersWithSd method.
		GetPluralMembersWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MemberIDs is the memberIDs argument value.
			MemberIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.MemberOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralMessages holds details about calls to the GetPluralMessages method.
		GetPluralMessages []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MessageIDs is the messageIDs argument value.
			MessageIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.MessageOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralMessagesWithChatRoom holds details about calls to the GetPluralMessagesWithChatRoom method.
		GetPluralMessagesWithChatRoom []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MessageIDs is the messageIDs argument value.
			MessageIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.MessageOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralMessagesWithChatRoomWithSd holds details about calls to the GetPluralMessagesWithChatRoomWithSd method.
		GetPluralMessagesWithChatRoomWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MessageIDs is the messageIDs argument value.
			MessageIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.MessageOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralMessagesWithSd holds details about calls to the GetPluralMessagesWithSd method.
		GetPluralMessagesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MessageIDs is the messageIDs argument value.
			MessageIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.MessageOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralMessagesWithSender holds details about calls to the GetPluralMessagesWithSender method.
		GetPluralMessagesWithSender []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MessageIDs is the messageIDs argument value.
			MessageIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.MessageOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralMessagesWithSenderByChatRoomActionIDs holds details about calls to the GetPluralMessagesWithSenderByChatRoomActionIDs method.
		GetPluralMessagesWithSenderByChatRoomActionIDs []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomActionIDs is the chatRoomActionIDs argument value.
			ChatRoomActionIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.MessageOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralMessagesWithSenderByChatRoomActionIDsWithSd holds details about calls to the GetPluralMessagesWithSenderByChatRoomActionIDsWithSd method.
		GetPluralMessagesWithSenderByChatRoomActionIDsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomActionIDs is the chatRoomActionIDs argument value.
			ChatRoomActionIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.MessageOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralMessagesWithSenderWithSd holds details about calls to the GetPluralMessagesWithSenderWithSd method.
		GetPluralMessagesWithSenderWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MessageIDs is the messageIDs argument value.
			MessageIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.MessageOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralMimeTypes holds details about calls to the GetPluralMimeTypes method.
		GetPluralMimeTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MimeTypeIDs is the mimeTypeIDs argument value.
			MimeTypeIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.MimeTypeOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralMimeTypesWithSd holds details about calls to the GetPluralMimeTypesWithSd method.
		GetPluralMimeTypesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MimeTypeIDs is the mimeTypeIDs argument value.
			MimeTypeIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.MimeTypeOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralOrganizations holds details about calls to the GetPluralOrganizations method.
		GetPluralOrganizations []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// OrganizationIDs is the organizationIDs argument value.
			OrganizationIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.OrganizationOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralOrganizationsOnMember holds details about calls to the GetPluralOrganizationsOnMember method.
		GetPluralOrganizationsOnMember []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MemberIDs is the memberIDs argument value.
			MemberIDs []uuid.UUID
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Order is the order argument value.
			Order parameter.OrganizationOnMemberOrderMethod
		}
		// GetPluralOrganizationsOnMemberWithSd holds details about calls to the GetPluralOrganizationsOnMemberWithSd method.
		GetPluralOrganizationsOnMemberWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MemberIDs is the memberIDs argument value.
			MemberIDs []uuid.UUID
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Order is the order argument value.
			Order parameter.OrganizationOnMemberOrderMethod
		}
		// GetPluralOrganizationsWithChatRoom holds details about calls to the GetPluralOrganizationsWithChatRoom method.
		GetPluralOrganizationsWithChatRoom []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// OrganizationIDs is the organizationIDs argument value.
			OrganizationIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.OrganizationOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralOrganizationsWithChatRoomAndDetail holds details about calls to the GetPluralOrganizationsWithChatRoomAndDetail method.
		GetPluralOrganizationsWithChatRoomAndDetail []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// OrganizationIDs is the organizationIDs argument value.
			OrganizationIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.OrganizationOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralOrganizationsWithChatRoomAndDetailWithSd holds details about calls to the GetPluralOrganizationsWithChatRoomAndDetailWithSd method.
		GetPluralOrganizationsWithChatRoomAndDetailWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// OrganizationIDs is the organizationIDs argument value.
			OrganizationIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.OrganizationOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralOrganizationsWithChatRoomWithSd holds details about calls to the GetPluralOrganizationsWithChatRoomWithSd method.
		GetPluralOrganizationsWithChatRoomWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// OrganizationIDs is the organizationIDs argument value.
			OrganizationIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.OrganizationOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralOrganizationsWithDetail holds details about calls to the GetPluralOrganizationsWithDetail method.
		GetPluralOrganizationsWithDetail []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// OrganizationIDs is the organizationIDs argument value.
			OrganizationIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.OrganizationOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralOrganizationsWithDetailWithSd holds details about calls to the GetPluralOrganizationsWithDetailWithSd method.
		GetPluralOrganizationsWithDetailWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// OrganizationIDs is the organizationIDs argument value.
			OrganizationIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.OrganizationOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralOrganizationsWithSd holds details about calls to the GetPluralOrganizationsWithSd method.
		GetPluralOrganizationsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// OrganizationIDs is the organizationIDs argument value.
			OrganizationIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.OrganizationOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralPermissionCategories holds details about calls to the GetPluralPermissionCategories method.
		GetPluralPermissionCategories []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PermissionCategoryIDs is the permissionCategoryIDs argument value.
			PermissionCategoryIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.PermissionCategoryOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralPermissionCategoriesWithSd holds details about calls to the GetPluralPermissionCategoriesWithSd method.
		GetPluralPermissionCategoriesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// PermissionCategoryIDs is the permissionCategoryIDs argument value.
			PermissionCategoryIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.PermissionCategoryOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralPermissions holds details about calls to the GetPluralPermissions method.
		GetPluralPermissions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PermissionIDs is the permissionIDs argument value.
			PermissionIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.PermissionOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralPermissionsWithSd holds details about calls to the GetPluralPermissionsWithSd method.
		GetPluralPermissionsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// PermissionIDs is the permissionIDs argument value.
			PermissionIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.PermissionOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralPolicies holds details about calls to the GetPluralPolicies method.
		GetPluralPolicies []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PolicyIDs is the policyIDs argument value.
			PolicyIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.PolicyOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralPoliciesWithSd holds details about calls to the GetPluralPoliciesWithSd method.
		GetPluralPoliciesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// PolicyIDs is the policyIDs argument value.
			PolicyIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.PolicyOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralPolicyCategories holds details about calls to the GetPluralPolicyCategories method.
		GetPluralPolicyCategories []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PolicyCategoryIDs is the policyCategoryIDs argument value.
			PolicyCategoryIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.PolicyCategoryOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralPolicyCategoriesWithSd holds details about calls to the GetPluralPolicyCategoriesWithSd method.
		GetPluralPolicyCategoriesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// PolicyCategoryIDs is the policyCategoryIDs argument value.
			PolicyCategoryIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.PolicyCategoryOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralPrivateChatRoomCompanions holds details about calls to the GetPluralPrivateChatRoomCompanions method.
		GetPluralPrivateChatRoomCompanions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomIDs is the chatRoomIDs argument value.
			ChatRoomIDs []uuid.UUID
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Order is the order argument value.
			Order parameter.MemberOnChatRoomOrderMethod
		}
		// GetPluralPrivateChatRoomCompanionsWithSd holds details about calls to the GetPluralPrivateChatRoomCompanionsWithSd method.
		GetPluralPrivateChatRoomCompanionsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomIDs is the chatRoomIDs argument value.
			ChatRoomIDs []uuid.UUID
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Order is the order argument value.
			Order parameter.MemberOnChatRoomOrderMethod
		}
		// GetPluralProfessors holds details about calls to the GetPluralProfessors method.
		GetPluralProfessors []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProfessorIDs is the professorIDs argument value.
			ProfessorIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.ProfessorOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralProfessorsWithMember holds details about calls to the GetPluralProfessorsWithMember method.
		GetPluralProfessorsWithMember []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProfessorIDs is the professorIDs argument value.
			ProfessorIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.ProfessorOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralProfessorsWithMemberWithSd holds details about calls to the GetPluralProfessorsWithMemberWithSd method.
		GetPluralProfessorsWithMemberWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ProfessorIDs is the professorIDs argument value.
			ProfessorIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.ProfessorOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralProfessorsWithSd holds details about calls to the GetPluralProfessorsWithSd method.
		GetPluralProfessorsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ProfessorIDs is the professorIDs argument value.
			ProfessorIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.ProfessorOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralReadableMembersOnMessage holds details about calls to the GetPluralReadableMembersOnMessage method.
		GetPluralReadableMembersOnMessage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MessageIDs is the messageIDs argument value.
			MessageIDs []uuid.UUID
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Order is the order argument value.
			Order parameter.ReadableMemberOnMessageOrderMethod
		}
		// GetPluralReadableMembersOnMessageWithSd holds details about calls to the GetPluralReadableMembersOnMessageWithSd method.
		GetPluralReadableMembersOnMessageWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MessageIDs is the messageIDs argument value.
			MessageIDs []uuid.UUID
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Order is the order argument value.
			Order parameter.ReadableMemberOnMessageOrderMethod
		}
		// GetPluralReadableMessagesOnMember holds details about calls to the GetPluralReadableMessagesOnMember method.
		GetPluralReadableMessagesOnMember []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MemberIDs is the memberIDs argument value.
			MemberIDs []uuid.UUID
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Order is the order argument value.
			Order parameter.ReadableMessageOnMemberOrderMethod
		}
		// GetPluralReadableMessagesOnMemberWithSd holds details about calls to the GetPluralReadableMessagesOnMemberWithSd method.
		GetPluralReadableMessagesOnMemberWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MemberIDs is the memberIDs argument value.
			MemberIDs []uuid.UUID
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Order is the order argument value.
			Order parameter.ReadableMessageOnMemberOrderMethod
		}
		// GetPluralRecordTypes holds details about calls to the GetPluralRecordTypes method.
		GetPluralRecordTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// RecordTypeIDs is the recordTypeIDs argument value.
			RecordTypeIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.RecordTypeOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralRecordTypesWithSd holds details about calls to the GetPluralRecordTypesWithSd method.
		GetPluralRecordTypesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// RecordTypeIDs is the recordTypeIDs argument value.
			RecordTypeIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.RecordTypeOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralRoles holds details about calls to the GetPluralRoles method.
		GetPluralRoles []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// RoleIDs is the roleIDs argument value.
			RoleIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.RoleOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralRolesWithSd holds details about calls to the GetPluralRolesWithSd method.
		GetPluralRolesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// RoleIDs is the roleIDs argument value.
			RoleIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.RoleOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralStudents holds details about calls to the GetPluralStudents method.
		GetPluralStudents []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// StudentIDs is the studentIDs argument value.
			StudentIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.StudentOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralStudentsWithMember holds details about calls to the GetPluralStudentsWithMember method.
		GetPluralStudentsWithMember []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// StudentIDs is the studentIDs argument value.
			StudentIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.StudentOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralStudentsWithMemberWithSd holds details about calls to the GetPluralStudentsWithMemberWithSd method.
		GetPluralStudentsWithMemberWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// StudentIDs is the studentIDs argument value.
			StudentIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.StudentOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralStudentsWithSd holds details about calls to the GetPluralStudentsWithSd method.
		GetPluralStudentsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// StudentIDs is the studentIDs argument value.
			StudentIDs []uuid.UUID
			// Order is the order argument value.
			Order parameter.StudentOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPolicies holds details about calls to the GetPolicies method.
		GetPolicies []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WherePolicyParam
			// Order is the order argument value.
			Order parameter.PolicyOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetPoliciesOnRole holds details about calls to the GetPoliciesOnRole method.
		GetPoliciesOnRole []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// RoleID is the roleID argument value.
			RoleID uuid.UUID
			// Where is the where argument value.
			Where parameter.WherePolicyOnRoleParam
			// Order is the order argument value.
			Order parameter.PolicyOnRoleOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetPoliciesOnRoleWithSd holds details about calls to the GetPoliciesOnRoleWithSd method.
		GetPoliciesOnRoleWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// RoleID is the roleID argument value.
			RoleID uuid.UUID
			// Where is the where argument value.
			Where parameter.WherePolicyOnRoleParam
			// Order is the order argument value.
			Order parameter.PolicyOnRoleOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetPoliciesWithCategory holds details about calls to the GetPoliciesWithCategory method.
		GetPoliciesWithCategory []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WherePolicyParam
			// Order is the order argument value.
			Order parameter.PolicyOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetPoliciesWithCategoryWithSd holds details about calls to the GetPoliciesWithCategoryWithSd method.
		GetPoliciesWithCategoryWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WherePolicyParam
			// Order is the order argument value.
			Order parameter.PolicyOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetPoliciesWithSd holds details about calls to the GetPoliciesWithSd method.
		GetPoliciesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WherePolicyParam
			// Order is the order argument value.
			Order parameter.PolicyOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetPolicyCategories holds details about calls to the GetPolicyCategories method.
		GetPolicyCategories []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WherePolicyCategoryParam
			// Order is the order argument value.
			Order parameter.PolicyCategoryOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetPolicyCategoriesWithSd holds details about calls to the GetPolicyCategoriesWithSd method.
		GetPolicyCategoriesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WherePolicyCategoryParam
			// Order is the order argument value.
			Order parameter.PolicyCategoryOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetProfessors holds details about calls to the GetProfessors method.
		GetProfessors []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereProfessorParam
			// Order is the order argument value.
			Order parameter.ProfessorOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetProfessorsWithMember holds details about calls to the GetProfessorsWithMember method.
		GetProfessorsWithMember []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereProfessorParam
			// Order is the order argument value.
			Order parameter.ProfessorOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetProfessorsWithMemberWithSd holds details about calls to the GetProfessorsWithMemberWithSd method.
		GetProfessorsWithMemberWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereProfessorParam
			// Order is the order argument value.
			Order parameter.ProfessorOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetProfessorsWithSd holds details about calls to the GetProfessorsWithSd method.
		GetProfessorsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereProfessorParam
			// Order is the order argument value.
			Order parameter.ProfessorOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetReadableMembersOnMessage holds details about calls to the GetReadableMembersOnMessage method.
		GetReadableMembersOnMessage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereReadableMemberOnMessageParam
			// Order is the order argument value.
			Order parameter.ReadableMemberOnMessageOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetReadableMembersOnMessageWithSd holds details about calls to the GetReadableMembersOnMessageWithSd method.
		GetReadableMembersOnMessageWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereReadableMemberOnMessageParam
			// Order is the order argument value.
			Order parameter.ReadableMemberOnMessageOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetReadableMessagesOnMember holds details about calls to the GetReadableMessagesOnMember method.
		GetReadableMessagesOnMember []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereReadableMessageOnMemberParam
			// Order is the order argument value.
			Order parameter.ReadableMessageOnMemberOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetReadableMessagesOnMemberWithSd holds details about calls to the GetReadableMessagesOnMemberWithSd method.
		GetReadableMessagesOnMemberWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereReadableMessageOnMemberParam
			// Order is the order argument value.
			Order parameter.ReadableMessageOnMemberOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetRecordTypes holds details about calls to the GetRecordTypes method.
		GetRecordTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereRecordTypeParam
			// Order is the order argument value.
			Order parameter.RecordTypeOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetRecordTypesWithSd holds details about calls to the GetRecordTypesWithSd method.
		GetRecordTypesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereRecordTypeParam
			// Order is the order argument value.
			Order parameter.RecordTypeOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetRoles holds details about calls to the GetRoles method.
		GetRoles []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereRoleParam
			// Order is the order argument value.
			Order parameter.RoleOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetRolesOnPolicy holds details about calls to the GetRolesOnPolicy method.
		GetRolesOnPolicy []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PolicyID is the policyID argument value.
			PolicyID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereRoleOnPolicyParam
			// Order is the order argument value.
			Order parameter.RoleOnPolicyOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetRolesOnPolicyWithSd holds details about calls to the GetRolesOnPolicyWithSd method.
		GetRolesOnPolicyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// PolicyID is the policyID argument value.
			PolicyID uuid.UUID
			// Where is the where argument value.
			Where parameter.WhereRoleOnPolicyParam
			// Order is the order argument value.
			Order parameter.RoleOnPolicyOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetRolesWithSd holds details about calls to the GetRolesWithSd method.
		GetRolesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereRoleParam
			// Order is the order argument value.
			Order parameter.RoleOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetStudents holds details about calls to the GetStudents method.
		GetStudents []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereStudentParam
			// Order is the order argument value.
			Order parameter.StudentOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetStudentsWithMember holds details about calls to the GetStudentsWithMember method.
		GetStudentsWithMember []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereStudentParam
			// Order is the order argument value.
			Order parameter.StudentOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetStudentsWithMemberWithSd holds details about calls to the GetStudentsWithMemberWithSd method.
		GetStudentsWithMemberWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereStudentParam
			// Order is the order argument value.
			Order parameter.StudentOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetStudentsWithSd holds details about calls to the GetStudentsWithSd method.
		GetStudentsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereStudentParam
			// Order is the order argument value.
			Order parameter.StudentOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// PluralDeleteAbsences holds details about calls to the PluralDeleteAbsences method.
		PluralDeleteAbsences []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AbsenceIDs is the absenceIDs argument value.
			AbsenceIDs []uuid.UUID
		}
		// PluralDeleteAbsencesWithSd holds details about calls to the PluralDeleteAbsencesWithSd method.
		PluralDeleteAbsencesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// AbsenceIDs is the absenceIDs argument value.
			AbsenceIDs []uuid.UUID
		}
		// PluralDeleteAttachableItems holds details about calls to the PluralDeleteAttachableItems method.
		PluralDeleteAttachableItems []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AttachableItemIDs is the attachableItemIDs argument value.
			AttachableItemIDs []uuid.UUID
		}
		// PluralDeleteAttachableItemsWithSd holds details about calls to the PluralDeleteAttachableItemsWithSd method.
		PluralDeleteAttachableItemsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// AttachableItemIDs is the attachableItemIDs argument value.
			AttachableItemIDs []uuid.UUID
		}
		// PluralDeleteAttendStatuses holds details about calls to the PluralDeleteAttendStatuses method.
		PluralDeleteAttendStatuses []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AttendStatusIDs is the attendStatusIDs argument value.
			AttendStatusIDs []uuid.UUID
		}
		// PluralDeleteAttendStatusesWithSd holds details about calls to the PluralDeleteAttendStatusesWithSd method.
		PluralDeleteAttendStatusesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// AttendStatusIDs is the attendStatusIDs argument value.
			AttendStatusIDs []uuid.UUID
		}
		// PluralDeleteAttendanceTypes holds details about calls to the PluralDeleteAttendanceTypes method.
		PluralDeleteAttendanceTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AttendanceTypeIDs is the attendanceTypeIDs argument value.
			AttendanceTypeIDs []uuid.UUID
		}
		// PluralDeleteAttendanceTypesWithSd holds details about calls to the PluralDeleteAttendanceTypesWithSd method.
		PluralDeleteAttendanceTypesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// AttendanceTypeIDs is the attendanceTypeIDs argument value.
			AttendanceTypeIDs []uuid.UUID
		}
		// PluralDeleteChatRoomActionTypes holds details about calls to the PluralDeleteChatRoomActionTypes method.
		PluralDeleteChatRoomActionTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// RecordTypeIDs is the recordTypeIDs argument value.
			RecordTypeIDs []uuid.UUID
		}
		// PluralDeleteChatRoomActionTypesWithSd holds details about calls to the PluralDeleteChatRoomActionTypesWithSd method.
		PluralDeleteChatRoomActionTypesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// RecordTypeIDs is the recordTypeIDs argument value.
			RecordTypeIDs []uuid.UUID
		}
		// PluralDeleteChatRoomActions holds details about calls to the PluralDeleteChatRoomActions method.
		PluralDeleteChatRoomActions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomActionIDs is the chatRoomActionIDs argument value.
			ChatRoomActionIDs []uuid.UUID
		}
		// PluralDeleteChatRoomActionsWithSd holds details about calls to the PluralDeleteChatRoomActionsWithSd method.
		PluralDeleteChatRoomActionsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomActionIDs is the chatRoomActionIDs argument value.
			ChatRoomActionIDs []uuid.UUID
		}
		// PluralDeleteChatRoomAddMemberActions holds details about calls to the PluralDeleteChatRoomAddMemberActions method.
		PluralDeleteChatRoomAddMemberActions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomAddMemberActionIDs is the chatRoomAddMemberActionIDs argument value.
			ChatRoomAddMemberActionIDs []uuid.UUID
		}
		// PluralDeleteChatRoomAddMemberActionsWithSd holds details about calls to the PluralDeleteChatRoomAddMemberActionsWithSd method.
		PluralDeleteChatRoomAddMemberActionsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomAddMemberActionIDs is the chatRoomAddMemberActionIDs argument value.
			ChatRoomAddMemberActionIDs []uuid.UUID
		}
		// PluralDeleteChatRoomCreateActions holds details about calls to the PluralDeleteChatRoomCreateActions method.
		PluralDeleteChatRoomCreateActions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomCreateActionIDs is the chatRoomCreateActionIDs argument value.
			ChatRoomCreateActionIDs []uuid.UUID
		}
		// PluralDeleteChatRoomCreateActionsWithSd holds details about calls to the PluralDeleteChatRoomCreateActionsWithSd method.
		PluralDeleteChatRoomCreateActionsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomCreateActionIDs is the chatRoomCreateActionIDs argument value.
			ChatRoomCreateActionIDs []uuid.UUID
		}
		// PluralDeleteChatRoomDeleteMessageActions holds details about calls to the PluralDeleteChatRoomDeleteMessageActions method.
		PluralDeleteChatRoomDeleteMessageActions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomDeleteMessageActionIDs is the chatRoomDeleteMessageActionIDs argument value.
			ChatRoomDeleteMessageActionIDs []uuid.UUID
		}
		// PluralDeleteChatRoomDeleteMessageActionsWithSd holds details about calls to the PluralDeleteChatRoomDeleteMessageActionsWithSd method.
		PluralDeleteChatRoomDeleteMessageActionsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomDeleteMessageActionIDs is the chatRoomDeleteMessageActionIDs argument value.
			ChatRoomDeleteMessageActionIDs []uuid.UUID
		}
		// PluralDeleteChatRoomRemoveMemberActions holds details about calls to the PluralDeleteChatRoomRemoveMemberActions method.
		PluralDeleteChatRoomRemoveMemberActions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomRemoveMemberActionIDs is the chatRoomRemoveMemberActionIDs argument value.
			ChatRoomRemoveMemberActionIDs []uuid.UUID
		}
		// PluralDeleteChatRoomRemoveMemberActionsWithSd holds details about calls to the PluralDeleteChatRoomRemoveMemberActionsWithSd method.
		PluralDeleteChatRoomRemoveMemberActionsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomRemoveMemberActionIDs is the chatRoomRemoveMemberActionIDs argument value.
			ChatRoomRemoveMemberActionIDs []uuid.UUID
		}
		// PluralDeleteChatRoomUpdateNameActions holds details about calls to the PluralDeleteChatRoomUpdateNameActions method.
		PluralDeleteChatRoomUpdateNameActions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomUpdateNameActionIDs is the chatRoomUpdateNameActionIDs argument value.
			ChatRoomUpdateNameActionIDs []uuid.UUID
		}
		// PluralDeleteChatRoomUpdateNameActionsWithSd holds details about calls to the PluralDeleteChatRoomUpdateNameActionsWithSd method.
		PluralDeleteChatRoomUpdateNameActionsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomUpdateNameActionIDs is the chatRoomUpdateNameActionIDs argument value.
			ChatRoomUpdateNameActionIDs []uuid.UUID
		}
		// PluralDeleteChatRoomWithdrawActions holds details about calls to the PluralDeleteChatRoomWithdrawActions method.
		PluralDeleteChatRoomWithdrawActions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomWithdrawActionIDs is the chatRoomWithdrawActionIDs argument value.
			ChatRoomWithdrawActionIDs []uuid.UUID
		}
		// PluralDeleteChatRoomWithdrawActionsWithSd holds details about calls to the PluralDeleteChatRoomWithdrawActionsWithSd method.
		PluralDeleteChatRoomWithdrawActionsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomWithdrawActionIDs is the chatRoomWithdrawActionIDs argument value.
			ChatRoomWithdrawActionIDs []uuid.UUID
		}
		// PluralDeleteChatRooms holds details about calls to the PluralDeleteChatRooms method.
		PluralDeleteChatRooms []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomIDs is the chatRoomIDs argument value.
			ChatRoomIDs []uuid.UUID
		}
		// PluralDeleteChatRoomsWithSd holds details about calls to the PluralDeleteChatRoomsWithSd method.
		PluralDeleteChatRoomsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomIDs is the chatRoomIDs argument value.
			ChatRoomIDs []uuid.UUID
		}
		// PluralDeleteEventTypes holds details about calls to the PluralDeleteEventTypes method.
		PluralDeleteEventTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// EventTypeIDs is the eventTypeIDs argument value.
			EventTypeIDs []uuid.UUID
		}
		// PluralDeleteEventTypesWithSd holds details about calls to the PluralDeleteEventTypesWithSd method.
		PluralDeleteEventTypesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// EventTypeIDs is the eventTypeIDs argument value.
			EventTypeIDs []uuid.UUID
		}
		// PluralDeleteFiles holds details about calls to the PluralDeleteFiles method.
		PluralDeleteFiles []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// FileIDs is the fileIDs argument value.
			FileIDs []uuid.UUID
		}
		// PluralDeleteFilesWithSd holds details about calls to the PluralDeleteFilesWithSd method.
		PluralDeleteFilesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// FileIDs is the fileIDs argument value.
			FileIDs []uuid.UUID
		}
		// PluralDeleteGrades holds details about calls to the PluralDeleteGrades method.
		PluralDeleteGrades []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// GradeIDs is the gradeIDs argument value.
			GradeIDs []uuid.UUID
		}
		// PluralDeleteGradesWithSd holds details about calls to the PluralDeleteGradesWithSd method.
		PluralDeleteGradesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// GradeIDs is the gradeIDs argument value.
			GradeIDs []uuid.UUID
		}
		// PluralDeleteGroups holds details about calls to the PluralDeleteGroups method.
		PluralDeleteGroups []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// GroupIDs is the groupIDs argument value.
			GroupIDs []uuid.UUID
		}
		// PluralDeleteGroupsWithSd holds details about calls to the PluralDeleteGroupsWithSd method.
		PluralDeleteGroupsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// GroupIDs is the groupIDs argument value.
			GroupIDs []uuid.UUID
		}
		// PluralDeleteImages holds details about calls to the PluralDeleteImages method.
		PluralDeleteImages []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ImageIDs is the imageIDs argument value.
			ImageIDs []uuid.UUID
		}
		// PluralDeleteImagesWithSd holds details about calls to the PluralDeleteImagesWithSd method.
		PluralDeleteImagesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ImageIDs is the imageIDs argument value.
			ImageIDs []uuid.UUID
		}
		// PluralDeleteMembers holds details about calls to the PluralDeleteMembers method.
		PluralDeleteMembers []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MemberIDs is the memberIDs argument value.
			MemberIDs []uuid.UUID
		}
		// PluralDeleteMembersWithSd holds details about calls to the PluralDeleteMembersWithSd method.
		PluralDeleteMembersWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MemberIDs is the memberIDs argument value.
			MemberIDs []uuid.UUID
		}
		// PluralDeleteMessages holds details about calls to the PluralDeleteMessages method.
		PluralDeleteMessages []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MessageIDs is the messageIDs argument value.
			MessageIDs []uuid.UUID
		}
		// PluralDeleteMessagesWithSd holds details about calls to the PluralDeleteMessagesWithSd method.
		PluralDeleteMessagesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MessageIDs is the messageIDs argument value.
			MessageIDs []uuid.UUID
		}
		// PluralDeleteMimeTypes holds details about calls to the PluralDeleteMimeTypes method.
		PluralDeleteMimeTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MimeTypeIDs is the mimeTypeIDs argument value.
			MimeTypeIDs []uuid.UUID
		}
		// PluralDeleteMimeTypesWithSd holds details about calls to the PluralDeleteMimeTypesWithSd method.
		PluralDeleteMimeTypesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MimeTypeIDs is the mimeTypeIDs argument value.
			MimeTypeIDs []uuid.UUID
		}
		// PluralDeleteOrganizations holds details about calls to the PluralDeleteOrganizations method.
		PluralDeleteOrganizations []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// OrganizationIDs is the organizationIDs argument value.
			OrganizationIDs []uuid.UUID
		}
		// PluralDeleteOrganizationsWithSd holds details about calls to the PluralDeleteOrganizationsWithSd method.
		PluralDeleteOrganizationsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// OrganizationIDs is the organizationIDs argument value.
			OrganizationIDs []uuid.UUID
		}
		// PluralDeletePermissionCategories holds details about calls to the PluralDeletePermissionCategories method.
		PluralDeletePermissionCategories []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PermissionCategoryIDs is the permissionCategoryIDs argument value.
			PermissionCategoryIDs []uuid.UUID
		}
		// PluralDeletePermissionCategoriesWithSd holds details about calls to the PluralDeletePermissionCategoriesWithSd method.
		PluralDeletePermissionCategoriesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// PermissionCategoryIDs is the permissionCategoryIDs argument value.
			PermissionCategoryIDs []uuid.UUID
		}
		// PluralDeletePermissions holds details about calls to the PluralDeletePermissions method.
		PluralDeletePermissions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PermissionIDs is the permissionIDs argument value.
			PermissionIDs []uuid.UUID
		}
		// PluralDeletePermissionsWithSd holds details about calls to the PluralDeletePermissionsWithSd method.
		PluralDeletePermissionsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// PermissionIDs is the permissionIDs argument value.
			PermissionIDs []uuid.UUID
		}
		// PluralDeletePolicies holds details about calls to the PluralDeletePolicies method.
		PluralDeletePolicies []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PolicyIDs is the policyIDs argument value.
			PolicyIDs []uuid.UUID
		}
		// PluralDeletePoliciesWithSd holds details about calls to the PluralDeletePoliciesWithSd method.
		PluralDeletePoliciesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// PolicyIDs is the policyIDs argument value.
			PolicyIDs []uuid.UUID
		}
		// PluralDeletePolicyCategories holds details about calls to the PluralDeletePolicyCategories method.
		PluralDeletePolicyCategories []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PolicyCategoryIDs is the policyCategoryIDs argument value.
			PolicyCategoryIDs []uuid.UUID
		}
		// PluralDeletePolicyCategoriesWithSd holds details about calls to the PluralDeletePolicyCategoriesWithSd method.
		PluralDeletePolicyCategoriesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// PolicyCategoryIDs is the policyCategoryIDs argument value.
			PolicyCategoryIDs []uuid.UUID
		}
		// PluralDeleteProfessors holds details about calls to the PluralDeleteProfessors method.
		PluralDeleteProfessors []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ProfessorIDs is the professorIDs argument value.
			ProfessorIDs []uuid.UUID
		}
		// PluralDeleteProfessorsWithSd holds details about calls to the PluralDeleteProfessorsWithSd method.
		PluralDeleteProfessorsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ProfessorIDs is the professorIDs argument value.
			ProfessorIDs []uuid.UUID
		}
		// PluralDeleteRecordTypes holds details about calls to the PluralDeleteRecordTypes method.
		PluralDeleteRecordTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// RecordTypeIDs is the recordTypeIDs argument value.
			RecordTypeIDs []uuid.UUID
		}
		// PluralDeleteRecordTypesWithSd holds details about calls to the PluralDeleteRecordTypesWithSd method.
		PluralDeleteRecordTypesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// RecordTypeIDs is the recordTypeIDs argument value.
			RecordTypeIDs []uuid.UUID
		}
		// PluralDeleteRoles holds details about calls to the PluralDeleteRoles method.
		PluralDeleteRoles []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// RoleIDs is the roleIDs argument value.
			RoleIDs []uuid.UUID
		}
		// PluralDeleteRolesWithSd holds details about calls to the PluralDeleteRolesWithSd method.
		PluralDeleteRolesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// RoleIDs is the roleIDs argument value.
			RoleIDs []uuid.UUID
		}
		// PluralDeleteStudents holds details about calls to the PluralDeleteStudents method.
		PluralDeleteStudents []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// StudentIDs is the studentIDs argument value.
			StudentIDs []uuid.UUID
		}
		// PluralDeleteStudentsWithSd holds details about calls to the PluralDeleteStudentsWithSd method.
		PluralDeleteStudentsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// StudentIDs is the studentIDs argument value.
			StudentIDs []uuid.UUID
		}
		// PluralDetachItemsOnMessage holds details about calls to the PluralDetachItemsOnMessage method.
		PluralDetachItemsOnMessage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MessageID is the messageID argument value.
			MessageID uuid.UUID
			// AttachedItemIDs is the attachedItemIDs argument value.
			AttachedItemIDs []uuid.UUID
		}
		// PluralDetachItemsOnMessageWithSd holds details about calls to the PluralDetachItemsOnMessageWithSd method.
		PluralDetachItemsOnMessageWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MessageID is the messageID argument value.
			MessageID uuid.UUID
			// AttachedItemIDs is the attachedItemIDs argument value.
			AttachedItemIDs []uuid.UUID
		}
		// PluralDisassociatePolicyOnRole holds details about calls to the PluralDisassociatePolicyOnRole method.
		PluralDisassociatePolicyOnRole []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// RoleID is the roleID argument value.
			RoleID uuid.UUID
			// PolicyIDs is the policyIDs argument value.
			PolicyIDs []uuid.UUID
		}
		// PluralDisassociatePolicyOnRoleWithSd holds details about calls to the PluralDisassociatePolicyOnRoleWithSd method.
		PluralDisassociatePolicyOnRoleWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// RoleID is the roleID argument value.
			RoleID uuid.UUID
			// PolicyIDs is the policyIDs argument value.
			PolicyIDs []uuid.UUID
		}
		// PluralDisassociateRoleOnPolicy holds details about calls to the PluralDisassociateRoleOnPolicy method.
		PluralDisassociateRoleOnPolicy []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PolicyID is the policyID argument value.
			PolicyID uuid.UUID
			// RoleIDs is the roleIDs argument value.
			RoleIDs []uuid.UUID
		}
		// PluralDisassociateRoleOnPolicyWithSd holds details about calls to the PluralDisassociateRoleOnPolicyWithSd method.
		PluralDisassociateRoleOnPolicyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// PolicyID is the policyID argument value.
			PolicyID uuid.UUID
			// RoleIDs is the roleIDs argument value.
			RoleIDs []uuid.UUID
		}
		// ReadReceipt holds details about calls to the ReadReceipt method.
		ReadReceipt []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Param is the param argument value.
			Param parameter.ReadReceiptParam
		}
		// ReadReceiptWithSd holds details about calls to the ReadReceiptWithSd method.
		ReadReceiptWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Param is the param argument value.
			Param parameter.ReadReceiptParam
		}
		// ReadReceipts holds details about calls to the ReadReceipts method.
		ReadReceipts []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Param is the param argument value.
			Param parameter.ReadReceiptsParam
		}
		// ReadReceiptsOnChatRoomAndMember holds details about calls to the ReadReceiptsOnChatRoomAndMember method.
		ReadReceiptsOnChatRoomAndMember []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomID is the chatRoomID argument value.
			ChatRoomID uuid.UUID
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
			// ReadAt is the readAt argument value.
			ReadAt time.Time
		}
		// ReadReceiptsOnChatRoomAndMemberWithSd holds details about calls to the ReadReceiptsOnChatRoomAndMemberWithSd method.
		ReadReceiptsOnChatRoomAndMemberWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomID is the chatRoomID argument value.
			ChatRoomID uuid.UUID
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
			// ReadAt is the readAt argument value.
			ReadAt time.Time
		}
		// ReadReceiptsOnMember holds details about calls to the ReadReceiptsOnMember method.
		ReadReceiptsOnMember []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
			// ReadAt is the readAt argument value.
			ReadAt time.Time
		}
		// ReadReceiptsOnMemberWithSd holds details about calls to the ReadReceiptsOnMemberWithSd method.
		ReadReceiptsOnMemberWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
			// ReadAt is the readAt argument value.
			ReadAt time.Time
		}
		// ReadReceiptsWithSd holds details about calls to the ReadReceiptsWithSd method.
		ReadReceiptsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Param is the param argument value.
			Param parameter.ReadReceiptsParam
		}
		// RemoveMemberToChatRoomRemoveMemberAction holds details about calls to the RemoveMemberToChatRoomRemoveMemberAction method.
		RemoveMemberToChatRoomRemoveMemberAction []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Param is the param argument value.
			Param parameter.CreateChatRoomRemovedMemberParam
		}
		// RemoveMemberToChatRoomRemoveMemberActionWithSd holds details about calls to the RemoveMemberToChatRoomRemoveMemberActionWithSd method.
		RemoveMemberToChatRoomRemoveMemberActionWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Param is the param argument value.
			Param parameter.CreateChatRoomRemovedMemberParam
		}
		// RemoveMembersToChatRoomRemoveMemberAction holds details about calls to the RemoveMembersToChatRoomRemoveMemberAction method.
		RemoveMembersToChatRoomRemoveMemberAction []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params []parameter.CreateChatRoomRemovedMemberParam
		}
		// RemoveMembersToChatRoomRemoveMemberActionWithSd holds details about calls to the RemoveMembersToChatRoomRemoveMemberActionWithSd method.
		RemoveMembersToChatRoomRemoveMemberActionWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Params is the params argument value.
			Params []parameter.CreateChatRoomRemovedMemberParam
		}
		// Rollback holds details about calls to the Rollback method.
		Rollback []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// Sd is the sd argument value.
			Sd Sd
		}
		// UpdateAttachableItem holds details about calls to the UpdateAttachableItem method.
		UpdateAttachableItem []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AttachableItemID is the attachableItemID argument value.
			AttachableItemID uuid.UUID
			// Param is the param argument value.
			Param parameter.UpdateAttachableItemParams
		}
		// UpdateAttachableItemWithSd holds details about calls to the UpdateAttachableItemWithSd method.
		UpdateAttachableItemWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// AttachableItemID is the attachableItemID argument value.
			AttachableItemID uuid.UUID
			// Param is the param argument value.
			Param parameter.UpdateAttachableItemParams
		}
		// UpdateAttendStatus holds details about calls to the UpdateAttendStatus method.
		UpdateAttendStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AttendStatusID is the attendStatusID argument value.
			AttendStatusID uuid.UUID
			// Param is the param argument value.
			Param parameter.UpdateAttendStatusParams
		}
		// UpdateAttendStatusByKey holds details about calls to the UpdateAttendStatusByKey method.
		UpdateAttendStatusByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
			// Param is the param argument value.
			Param parameter.UpdateAttendStatusByKeyParams
		}
		// UpdateAttendStatusByKeyWithSd holds details about calls to the UpdateAttendStatusByKeyWithSd method.
		UpdateAttendStatusByKeyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Key is the key argument value.
			Key string
			// Param is the param argument value.
			Param parameter.UpdateAttendStatusByKeyParams
		}
		// UpdateAttendStatusWithSd holds details about calls to the UpdateAttendStatusWithSd method.
		UpdateAttendStatusWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// AttendStatusID is the attendStatusID argument value.
			AttendStatusID uuid.UUID
			// Param is the param argument value.
			Param parameter.UpdateAttendStatusParams
		}
		// UpdateAttendanceType holds details about calls to the UpdateAttendanceType method.
		UpdateAttendanceType []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AttendanceTypeID is the attendanceTypeID argument value.
			AttendanceTypeID uuid.UUID
			// Param is the param argument value.
			Param parameter.UpdateAttendanceTypeParams
		}
		// UpdateAttendanceTypeByKey holds details about calls to the UpdateAttendanceTypeByKey method.
		UpdateAttendanceTypeByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
			// Param is the param argument value.
			Param parameter.UpdateAttendanceTypeByKeyParams
		}
		// UpdateAttendanceTypeByKeyWithSd holds details about calls to the UpdateAttendanceTypeByKeyWithSd method.
		UpdateAttendanceTypeByKeyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Key is the key argument value.
			Key string
			// Param is the param argument value.
			Param parameter.UpdateAttendanceTypeByKeyParams
		}
		// UpdateAttendanceTypeWithSd holds details about calls to the UpdateAttendanceTypeWithSd method.
		UpdateAttendanceTypeWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// AttendanceTypeID is the attendanceTypeID argument value.
			AttendanceTypeID uuid.UUID
			// Param is the param argument value.
			Param parameter.UpdateAttendanceTypeParams
		}
		// UpdateChatRoom holds details about calls to the UpdateChatRoom method.
		UpdateChatRoom []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomID is the chatRoomID argument value.
			ChatRoomID uuid.UUID
			// Param is the param argument value.
			Param parameter.UpdateChatRoomParams
		}
		// UpdateChatRoomAction holds details about calls to the UpdateChatRoomAction method.
		UpdateChatRoomAction []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChatRoomActionID is the chatRoomActionID argument value.
			ChatRoomActionID uuid.UUID
			// Param is the param argument value.
			Param parameter.UpdateChatRoomActionParam
		}
		// UpdateChatRoomActionType holds details about calls to the UpdateChatRoomActionType method.
		UpdateChatRoomActionType []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// RecordTypeID is the recordTypeID argument value.
			RecordTypeID uuid.UUID
			// Param is the param argument value.
			Param parameter.UpdateChatRoomActionTypeParams
		}
		// UpdateChatRoomActionTypeByKey holds details about calls to the UpdateChatRoomActionTypeByKey method.
		UpdateChatRoomActionTypeByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
			// Param is the param argument value.
			Param parameter.UpdateChatRoomActionTypeByKeyParams
		}
		// UpdateChatRoomActionTypeByKeyWithSd holds details about calls to the UpdateChatRoomActionTypeByKeyWithSd method.
		UpdateChatRoomActionTypeByKeyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Key is the key argument value.
			Key string
			// Param is the param argument value.
			Param parameter.UpdateChatRoomActionTypeByKeyParams
		}
		// UpdateChatRoomActionTypeWithSd holds details about calls to the UpdateChatRoomActionTypeWithSd method.
		UpdateChatRoomActionTypeWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// RecordTypeID is the recordTypeID argument value.
			RecordTypeID uuid.UUID
			// Param is the param argument value.
			Param parameter.UpdateChatRoomActionTypeParams
		}
		// UpdateChatRoomActionWithSd holds details about calls to the UpdateChatRoomActionWithSd method.
		UpdateChatRoomActionWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomActionID is the chatRoomActionID argument value.
			ChatRoomActionID uuid.UUID
			// Param is the param argument value.
			Param parameter.UpdateChatRoomActionParam
		}
		// UpdateChatRoomWithSd holds details about calls to the UpdateChatRoomWithSd method.
		UpdateChatRoomWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// ChatRoomID is the chatRoomID argument value.
			ChatRoomID uuid.UUID
			// Param is the param argument value.
			Param parameter.UpdateChatRoomParams
		}
		// UpdateEventType holds details about calls to the UpdateEventType method.
		UpdateEventType []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// EventTypeID is the eventTypeID argument value.
			EventTypeID uuid.UUID
			// Param is the param argument value.
			Param parameter.UpdateEventTypeParams
		}
		// UpdateEventTypeByKey holds details about calls to the UpdateEventTypeByKey method.
		UpdateEventTypeByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
			// Param is the param argument value.
			Param parameter.UpdateEventTypeByKeyParams
		}
		// UpdateEventTypeByKeyWithSd holds details about calls to the UpdateEventTypeByKeyWithSd method.
		UpdateEventTypeByKeyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Key is the key argument value.
			Key string
			// Param is the param argument value.
			Param parameter.UpdateEventTypeByKeyParams
		}
		// UpdateEventTypeWithSd holds details about calls to the UpdateEventTypeWithSd method.
		UpdateEventTypeWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// EventTypeID is the eventTypeID argument value.
			EventTypeID uuid.UUID
			// Param is the param argument value.
			Param parameter.UpdateEventTypeParams
		}
		// UpdateMember holds details about calls to the UpdateMember method.
		UpdateMember []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
			// Param is the param argument value.
			Param parameter.UpdateMemberParams
		}
		// UpdateMemberAttendStatus holds details about calls to the UpdateMemberAttendStatus method.
		UpdateMemberAttendStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
			// AttendStatusID is the attendStatusID argument value.
			AttendStatusID uuid.UUID
		}
		// UpdateMemberAttendStatusWithSd holds details about calls to the UpdateMemberAttendStatusWithSd method.
		UpdateMemberAttendStatusWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
			// AttendStatusID is the attendStatusID argument value.
			AttendStatusID uuid.UUID
		}
		// UpdateMemberGrade holds details about calls to the UpdateMemberGrade method.
		UpdateMemberGrade []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
			// GradeID is the gradeID argument value.
			GradeID uuid.UUID
		}
		// UpdateMemberGradeWithSd holds details about calls to the UpdateMemberGradeWithSd method.
		UpdateMemberGradeWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
			// GradeID is the gradeID argument value.
			GradeID uuid.UUID
		}
		// UpdateMemberGroup holds details about calls to the UpdateMemberGroup method.
		UpdateMemberGroup []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
			// GroupID is the groupID argument value.
			GroupID uuid.UUID
		}
		// UpdateMemberGroupWithSd holds details about calls to the UpdateMemberGroupWithSd method.
		UpdateMemberGroupWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
			// GroupID is the groupID argument value.
			GroupID uuid.UUID
		}
		// UpdateMemberLoginID holds details about calls to the UpdateMemberLoginID method.
		UpdateMemberLoginID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
			// LoginID is the loginID argument value.
			LoginID string
		}
		// UpdateMemberLoginIDWithSd holds details about calls to the UpdateMemberLoginIDWithSd method.
		UpdateMemberLoginIDWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
			// LoginID is the loginID argument value.
			LoginID string
		}
		// UpdateMemberPassword holds details about calls to the UpdateMemberPassword method.
		UpdateMemberPassword []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
			// Password is the password argument value.
			Password string
		}
		// UpdateMemberPasswordWithSd holds details about calls to the UpdateMemberPasswordWithSd method.
		UpdateMemberPasswordWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
			// Password is the password argument value.
			Password string
		}
		// UpdateMemberRole holds details about calls to the UpdateMemberRole method.
		UpdateMemberRole []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
			// RoleID is the roleID argument value.
			RoleID entity.UUID
		}
		// UpdateMemberRoleWithSd holds details about calls to the UpdateMemberRoleWithSd method.
		UpdateMemberRoleWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
			// RoleID is the roleID argument value.
			RoleID entity.UUID
		}
		// UpdateMemberWithSd holds details about calls to the UpdateMemberWithSd method.
		UpdateMemberWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MemberID is the memberID argument value.
			MemberID uuid.UUID
			// Param is the param argument value.
			Param parameter.UpdateMemberParams
		}
		// UpdateMessage holds details about calls to the UpdateMessage method.
		UpdateMessage []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MessageID is the messageID argument value.
			MessageID uuid.UUID
			// Param is the param argument value.
			Param parameter.UpdateMessageParams
		}
		// UpdateMessageWithSd holds details about calls to the UpdateMessageWithSd method.
		UpdateMessageWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MessageID is the messageID argument value.
			MessageID uuid.UUID
			// Param is the param argument value.
			Param parameter.UpdateMessageParams
		}
		// UpdateMimeType holds details about calls to the UpdateMimeType method.
		UpdateMimeType []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MimeTypeID is the mimeTypeID argument value.
			MimeTypeID uuid.UUID
			// Param is the param argument value.
			Param parameter.UpdateMimeTypeParams
		}
		// UpdateMimeTypeByKey holds details about calls to the UpdateMimeTypeByKey method.
		UpdateMimeTypeByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
			// Param is the param argument value.
			Param parameter.UpdateMimeTypeByKeyParams
		}
		// UpdateMimeTypeByKeyWithSd holds details about calls to the UpdateMimeTypeByKeyWithSd method.
		UpdateMimeTypeByKeyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Key is the key argument value.
			Key string
			// Param is the param argument value.
			Param parameter.UpdateMimeTypeByKeyParams
		}
		// UpdateMimeTypeWithSd holds details about calls to the UpdateMimeTypeWithSd method.
		UpdateMimeTypeWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MimeTypeID is the mimeTypeID argument value.
			MimeTypeID uuid.UUID
			// Param is the param argument value.
			Param parameter.UpdateMimeTypeParams
		}
		// UpdateOrganization holds details about calls to the UpdateOrganization method.
		UpdateOrganization []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// OrganizationID is the organizationID argument value.
			OrganizationID uuid.UUID
			// Param is the param argument value.
			Param parameter.UpdateOrganizationParams
		}
		// UpdateOrganizationWithSd holds details about calls to the UpdateOrganizationWithSd method.
		UpdateOrganizationWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// OrganizationID is the organizationID argument value.
			OrganizationID uuid.UUID
			// Param is the param argument value.
			Param parameter.UpdateOrganizationParams
		}
		// UpdatePermission holds details about calls to the UpdatePermission method.
		UpdatePermission []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PermissionID is the permissionID argument value.
			PermissionID uuid.UUID
			// Param is the param argument value.
			Param parameter.UpdatePermissionParams
		}
		// UpdatePermissionByKey holds details about calls to the UpdatePermissionByKey method.
		UpdatePermissionByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
			// Param is the param argument value.
			Param parameter.UpdatePermissionByKeyParams
		}
		// UpdatePermissionByKeyWithSd holds details about calls to the UpdatePermissionByKeyWithSd method.
		UpdatePermissionByKeyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Key is the key argument value.
			Key string
			// Param is the param argument value.
			Param parameter.UpdatePermissionByKeyParams
		}
		// UpdatePermissionCategory holds details about calls to the UpdatePermissionCategory method.
		UpdatePermissionCategory []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PermissionCategoryID is the permissionCategoryID argument value.
			PermissionCategoryID uuid.UUID
			// Param is the param argument value.
			Param parameter.UpdatePermissionCategoryParams
		}
		// UpdatePermissionCategoryByKey holds details about calls to the UpdatePermissionCategoryByKey method.
		UpdatePermissionCategoryByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
			// Param is the param argument value.
			Param parameter.UpdatePermissionCategoryByKeyParams
		}
		// UpdatePermissionCategoryByKeyWithSd holds details about calls to the UpdatePermissionCategoryByKeyWithSd method.
		UpdatePermissionCategoryByKeyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Key is the key argument value.
			Key string
			// Param is the param argument value.
			Param parameter.UpdatePermissionCategoryByKeyParams
		}
		// UpdatePermissionCategoryWithSd holds details about calls to the UpdatePermissionCategoryWithSd method.
		UpdatePermissionCategoryWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// PermissionCategoryID is the permissionCategoryID argument value.
			PermissionCategoryID uuid.UUID
			// Param is the param argument value.
			Param parameter.UpdatePermissionCategoryParams
		}
		// UpdatePermissionWithSd holds details about calls to the UpdatePermissionWithSd method.
		UpdatePermissionWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// PermissionID is the permissionID argument value.
			PermissionID uuid.UUID
			// Param is the param argument value.
			Param parameter.UpdatePermissionParams
		}
		// UpdatePolicy holds details about calls to the UpdatePolicy method.
		UpdatePolicy []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PolicyID is the policyID argument value.
			PolicyID uuid.UUID
			// Param is the param argument value.
			Param parameter.UpdatePolicyParams
		}
		// UpdatePolicyByKey holds details about calls to the UpdatePolicyByKey method.
		UpdatePolicyByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
			// Param is the param argument value.
			Param parameter.UpdatePolicyByKeyParams
		}
		// UpdatePolicyByKeyWithSd holds details about calls to the UpdatePolicyByKeyWithSd method.
		UpdatePolicyByKeyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Key is the key argument value.
			Key string
			// Param is the param argument value.
			Param parameter.UpdatePolicyByKeyParams
		}
		// UpdatePolicyCategory holds details about calls to the UpdatePolicyCategory method.
		UpdatePolicyCategory []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PolicyCategoryID is the policyCategoryID argument value.
			PolicyCategoryID uuid.UUID
			// Param is the param argument value.
			Param parameter.UpdatePolicyCategoryParams
		}
		// UpdatePolicyCategoryByKey holds details about calls to the UpdatePolicyCategoryByKey method.
		UpdatePolicyCategoryByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
			// Param is the param argument value.
			Param parameter.UpdatePolicyCategoryByKeyParams
		}
		// UpdatePolicyCategoryByKeyWithSd holds details about calls to the UpdatePolicyCategoryByKeyWithSd method.
		UpdatePolicyCategoryByKeyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Key is the key argument value.
			Key string
			// Param is the param argument value.
			Param parameter.UpdatePolicyCategoryByKeyParams
		}
		// UpdatePolicyCategoryWithSd holds details about calls to the UpdatePolicyCategoryWithSd method.
		UpdatePolicyCategoryWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// PolicyCategoryID is the policyCategoryID argument value.
			PolicyCategoryID uuid.UUID
			// Param is the param argument value.
			Param parameter.UpdatePolicyCategoryParams
		}
		// UpdatePolicyWithSd holds details about calls to the UpdatePolicyWithSd method.
		UpdatePolicyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// PolicyID is the policyID argument value.
			PolicyID uuid.UUID
			// Param is the param argument value.
			Param parameter.UpdatePolicyParams
		}
		// UpdateRecordType holds details about calls to the UpdateRecordType method.
		UpdateRecordType []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// RecordTypeID is the recordTypeID argument value.
			RecordTypeID uuid.UUID
			// Param is the param argument value.
			Param parameter.UpdateRecordTypeParams
		}
		// UpdateRecordTypeByKey holds details about calls to the UpdateRecordTypeByKey method.
		UpdateRecordTypeByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
			// Param is the param argument value.
			Param parameter.UpdateRecordTypeByKeyParams
		}
		// UpdateRecordTypeByKeyWithSd holds details about calls to the UpdateRecordTypeByKeyWithSd method.
		UpdateRecordTypeByKeyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Key is the key argument value.
			Key string
			// Param is the param argument value.
			Param parameter.UpdateRecordTypeByKeyParams
		}
		// UpdateRecordTypeWithSd holds details about calls to the UpdateRecordTypeWithSd method.
		UpdateRecordTypeWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// RecordTypeID is the recordTypeID argument value.
			RecordTypeID uuid.UUID
			// Param is the param argument value.
			Param parameter.UpdateRecordTypeParams
		}
		// UpdateRole holds details about calls to the UpdateRole method.
		UpdateRole []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// RoleID is the roleID argument value.
			RoleID uuid.UUID
			// Param is the param argument value.
			Param parameter.UpdateRoleParams
		}
		// UpdateRoleWithSd holds details about calls to the UpdateRoleWithSd method.
		UpdateRoleWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// RoleID is the roleID argument value.
			RoleID uuid.UUID
			// Param is the param argument value.
			Param parameter.UpdateRoleParams
		}
	}
	lockAddMemberToChatRoomAddMemberAction                              sync.RWMutex
	lockAddMemberToChatRoomAddMemberActionWithSd                        sync.RWMutex
	lockAddMembersToChatRoomAddMemberAction                             sync.RWMutex
	lockAddMembersToChatRoomAddMemberActionWithSd                       sync.RWMutex
	lockAssociateRole                                                   sync.RWMutex
	lockAssociateRoleWithSd                                             sync.RWMutex
	lockAssociateRoles                                                  sync.RWMutex
	lockAssociateRolesWithSd                                            sync.RWMutex
	lockAttacheItemOnMessage                                            sync.RWMutex
	lockAttacheItemOnMessageWithSd                                      sync.RWMutex
	lockAttacheItemsOnMessages                                          sync.RWMutex
	lockAttacheItemsOnMessagesWithSd                                    sync.RWMutex
	lockBegin                                                           sync.RWMutex
	lockBelongChatRoom                                                  sync.RWMutex
	lockBelongChatRoomWithSd                                            sync.RWMutex
	lockBelongChatRooms                                                 sync.RWMutex
	lockBelongChatRoomsWithSd                                           sync.RWMutex
	lockBelongOrganization                                              sync.RWMutex
	lockBelongOrganizationWithSd                                        sync.RWMutex
	lockBelongOrganizations                                             sync.RWMutex
	lockBelongOrganizationsWithSd                                       sync.RWMutex
	lockCleanup                                                         sync.RWMutex
	lockCommit                                                          sync.RWMutex
	lockCountAbsences                                                   sync.RWMutex
	lockCountAbsencesWithSd                                             sync.RWMutex
	lockCountAttachableItems                                            sync.RWMutex
	lockCountAttachableItemsWithSd                                      sync.RWMutex
	lockCountAttachedItemsOnChatRoom                                    sync.RWMutex
	lockCountAttachedItemsOnChatRoomWithSd                              sync.RWMutex
	lockCountAttachedItemsOnMessage                                     sync.RWMutex
	lockCountAttachedItemsOnMessageWithSd                               sync.RWMutex
	lockCountAttendStatuses                                             sync.RWMutex
	lockCountAttendStatusesWithSd                                       sync.RWMutex
	lockCountAttendanceTypes                                            sync.RWMutex
	lockCountAttendanceTypesWithSd                                      sync.RWMutex
	lockCountChatRoomActionTypes                                        sync.RWMutex
	lockCountChatRoomActionTypesWithSd                                  sync.RWMutex
	lockCountChatRoomActions                                            sync.RWMutex
	lockCountChatRoomActionsWithSd                                      sync.RWMutex
	lockCountChatRoomAddMemberActions                                   sync.RWMutex
	lockCountChatRoomAddMemberActionsWithSd                             sync.RWMutex
	lockCountChatRoomCreateActions                                      sync.RWMutex
	lockCountChatRoomCreateActionsWithSd                                sync.RWMutex
	lockCountChatRoomDeleteMessageActions                               sync.RWMutex
	lockCountChatRoomDeleteMessageActionsWithSd                         sync.RWMutex
	lockCountChatRoomRemoveMemberActions                                sync.RWMutex
	lockCountChatRoomRemoveMemberActionsWithSd                          sync.RWMutex
	lockCountChatRoomUpdateNameActions                                  sync.RWMutex
	lockCountChatRoomUpdateNameActionsWithSd                            sync.RWMutex
	lockCountChatRoomWithdrawActions                                    sync.RWMutex
	lockCountChatRoomWithdrawActionsWithSd                              sync.RWMutex
	lockCountChatRooms                                                  sync.RWMutex
	lockCountChatRoomsOnMember                                          sync.RWMutex
	lockCountChatRoomsOnMemberWithSd                                    sync.RWMutex
	lockCountChatRoomsWithSd                                            sync.RWMutex
	lockCountEventTypes                                                 sync.RWMutex
	lockCountEventTypesWithSd                                           sync.RWMutex
	lockCountFiles                                                      sync.RWMutex
	lockCountFilesWithSd                                                sync.RWMutex
	lockCountGrades                                                     sync.RWMutex
	lockCountGradesWithSd                                               sync.RWMutex
	lockCountGroups                                                     sync.RWMutex
	lockCountGroupsWithSd                                               sync.RWMutex
	lockCountImages                                                     sync.RWMutex
	lockCountImagesWithSd                                               sync.RWMutex
	lockCountMembers                                                    sync.RWMutex
	lockCountMembersOnChatRoom                                          sync.RWMutex
	lockCountMembersOnChatRoomAddMemberAction                           sync.RWMutex
	lockCountMembersOnChatRoomAddMemberActionWithSd                     sync.RWMutex
	lockCountMembersOnChatRoomRemoveMemberAction                        sync.RWMutex
	lockCountMembersOnChatRoomRemoveMemberActionWithSd                  sync.RWMutex
	lockCountMembersOnChatRoomWithSd                                    sync.RWMutex
	lockCountMembersOnOrganization                                      sync.RWMutex
	lockCountMembersOnOrganizationWithSd                                sync.RWMutex
	lockCountMembersWithSd                                              sync.RWMutex
	lockCountMessages                                                   sync.RWMutex
	lockCountMessagesWithSd                                             sync.RWMutex
	lockCountMimeTypes                                                  sync.RWMutex
	lockCountMimeTypesWithSd                                            sync.RWMutex
	lockCountOrganizations                                              sync.RWMutex
	lockCountOrganizationsOnMember                                      sync.RWMutex
	lockCountOrganizationsOnMemberWithSd                                sync.RWMutex
	lockCountOrganizationsWithSd                                        sync.RWMutex
	lockCountPermissionCategories                                       sync.RWMutex
	lockCountPermissionCategoriesWithSd                                 sync.RWMutex
	lockCountPermissions                                                sync.RWMutex
	lockCountPermissionsWithSd                                          sync.RWMutex
	lockCountPolicies                                                   sync.RWMutex
	lockCountPoliciesOnRole                                             sync.RWMutex
	lockCountPoliciesOnRoleWithSd                                       sync.RWMutex
	lockCountPoliciesWithSd                                             sync.RWMutex
	lockCountPolicyCategories                                           sync.RWMutex
	lockCountPolicyCategoriesWithSd                                     sync.RWMutex
	lockCountProfessors                                                 sync.RWMutex
	lockCountProfessorsWithSd                                           sync.RWMutex
	lockCountReadableMembersOnMessage                                   sync.RWMutex
	lockCountReadableMembersOnMessageWithSd                             sync.RWMutex
	lockCountReadableMessagesOnChatRoomAndMember                        sync.RWMutex
	lockCountReadableMessagesOnChatRoomAndMemberWithSd                  sync.RWMutex
	lockCountReadableMessagesOnChatRooms                                sync.RWMutex
	lockCountReadableMessagesOnChatRoomsAndMember                       sync.RWMutex
	lockCountReadableMessagesOnChatRoomsAndMemberWithSd                 sync.RWMutex
	lockCountReadableMessagesOnChatRoomsWithSd                          sync.RWMutex
	lockCountReadableMessagesOnMember                                   sync.RWMutex
	lockCountReadableMessagesOnMemberWithSd                             sync.RWMutex
	lockCountReadsOnMessages                                            sync.RWMutex
	lockCountReadsOnMessagesWithSd                                      sync.RWMutex
	lockCountRecordTypes                                                sync.RWMutex
	lockCountRecordTypesWithSd                                          sync.RWMutex
	lockCountRoles                                                      sync.RWMutex
	lockCountRolesOnPolicy                                              sync.RWMutex
	lockCountRolesOnPolicyWithSd                                        sync.RWMutex
	lockCountRolesWithSd                                                sync.RWMutex
	lockCountStudents                                                   sync.RWMutex
	lockCountStudentsWithSd                                             sync.RWMutex
	lockCreateAbsence                                                   sync.RWMutex
	lockCreateAbsenceWithSd                                             sync.RWMutex
	lockCreateAbsences                                                  sync.RWMutex
	lockCreateAbsencesWithSd                                            sync.RWMutex
	lockCreateAttachableItem                                            sync.RWMutex
	lockCreateAttachableItemWithSd                                      sync.RWMutex
	lockCreateAttachableItems                                           sync.RWMutex
	lockCreateAttachableItemsWithSd                                     sync.RWMutex
	lockCreateAttendStatus                                              sync.RWMutex
	lockCreateAttendStatusWithSd                                        sync.RWMutex
	lockCreateAttendStatuses                                            sync.RWMutex
	lockCreateAttendStatusesWithSd                                      sync.RWMutex
	lockCreateAttendanceType                                            sync.RWMutex
	lockCreateAttendanceTypeWithSd                                      sync.RWMutex
	lockCreateAttendanceTypes                                           sync.RWMutex
	lockCreateAttendanceTypesWithSd                                     sync.RWMutex
	lockCreateChatRoom                                                  sync.RWMutex
	lockCreateChatRoomAction                                            sync.RWMutex
	lockCreateChatRoomActionType                                        sync.RWMutex
	lockCreateChatRoomActionTypeWithSd                                  sync.RWMutex
	lockCreateChatRoomActionTypes                                       sync.RWMutex
	lockCreateChatRoomActionTypesWithSd                                 sync.RWMutex
	lockCreateChatRoomActionWithSd                                      sync.RWMutex
	lockCreateChatRoomActions                                           sync.RWMutex
	lockCreateChatRoomActionsWithSd                                     sync.RWMutex
	lockCreateChatRoomAddMemberAction                                   sync.RWMutex
	lockCreateChatRoomAddMemberActionWithSd                             sync.RWMutex
	lockCreateChatRoomAddMemberActions                                  sync.RWMutex
	lockCreateChatRoomAddMemberActionsWithSd                            sync.RWMutex
	lockCreateChatRoomCreateAction                                      sync.RWMutex
	lockCreateChatRoomCreateActionWithSd                                sync.RWMutex
	lockCreateChatRoomCreateActions                                     sync.RWMutex
	lockCreateChatRoomCreateActionsWithSd                               sync.RWMutex
	lockCreateChatRoomDeleteMessageAction                               sync.RWMutex
	lockCreateChatRoomDeleteMessageActionWithSd                         sync.RWMutex
	lockCreateChatRoomDeleteMessageActions                              sync.RWMutex
	lockCreateChatRoomDeleteMessageActionsWithSd                        sync.RWMutex
	lockCreateChatRoomRemoveMemberAction                                sync.RWMutex
	lockCreateChatRoomRemoveMemberActionWithSd                          sync.RWMutex
	lockCreateChatRoomRemoveMemberActions                               sync.RWMutex
	lockCreateChatRoomRemoveMemberActionsWithSd                         sync.RWMutex
	lockCreateChatRoomUpdateNameAction                                  sync.RWMutex
	lockCreateChatRoomUpdateNameActionWithSd                            sync.RWMutex
	lockCreateChatRoomUpdateNameActions                                 sync.RWMutex
	lockCreateChatRoomUpdateNameActionsWithSd                           sync.RWMutex
	lockCreateChatRoomWithSd                                            sync.RWMutex
	lockCreateChatRoomWithdrawAction                                    sync.RWMutex
	lockCreateChatRoomWithdrawActionWithSd                              sync.RWMutex
	lockCreateChatRoomWithdrawActions                                   sync.RWMutex
	lockCreateChatRoomWithdrawActionsWithSd                             sync.RWMutex
	lockCreateChatRooms                                                 sync.RWMutex
	lockCreateChatRoomsWithSd                                           sync.RWMutex
	lockCreateEventType                                                 sync.RWMutex
	lockCreateEventTypeWithSd                                           sync.RWMutex
	lockCreateEventTypes                                                sync.RWMutex
	lockCreateEventTypesWithSd                                          sync.RWMutex
	lockCreateFile                                                      sync.RWMutex
	lockCreateFileWithSd                                                sync.RWMutex
	lockCreateFiles                                                     sync.RWMutex
	lockCreateFilesWithSd                                               sync.RWMutex
	lockCreateGrade                                                     sync.RWMutex
	lockCreateGradeWithSd                                               sync.RWMutex
	lockCreateGrades                                                    sync.RWMutex
	lockCreateGradesWithSd                                              sync.RWMutex
	lockCreateGroup                                                     sync.RWMutex
	lockCreateGroupWithSd                                               sync.RWMutex
	lockCreateGroups                                                    sync.RWMutex
	lockCreateGroupsWithSd                                              sync.RWMutex
	lockCreateImage                                                     sync.RWMutex
	lockCreateImageWithSd                                               sync.RWMutex
	lockCreateImages                                                    sync.RWMutex
	lockCreateImagesWithSd                                              sync.RWMutex
	lockCreateMember                                                    sync.RWMutex
	lockCreateMemberWithSd                                              sync.RWMutex
	lockCreateMembers                                                   sync.RWMutex
	lockCreateMembersWithSd                                             sync.RWMutex
	lockCreateMessage                                                   sync.RWMutex
	lockCreateMessageWithSd                                             sync.RWMutex
	lockCreateMessages                                                  sync.RWMutex
	lockCreateMessagesWithSd                                            sync.RWMutex
	lockCreateMimeType                                                  sync.RWMutex
	lockCreateMimeTypeWithSd                                            sync.RWMutex
	lockCreateMimeTypes                                                 sync.RWMutex
	lockCreateMimeTypesWithSd                                           sync.RWMutex
	lockCreateOrganization                                              sync.RWMutex
	lockCreateOrganizationWithSd                                        sync.RWMutex
	lockCreateOrganizations                                             sync.RWMutex
	lockCreateOrganizationsWithSd                                       sync.RWMutex
	lockCreatePermission                                                sync.RWMutex
	lockCreatePermissionCategories                                      sync.RWMutex
	lockCreatePermissionCategoriesWithSd                                sync.RWMutex
	lockCreatePermissionCategory                                        sync.RWMutex
	lockCreatePermissionCategoryWithSd                                  sync.RWMutex
	lockCreatePermissionWithSd                                          sync.RWMutex
	lockCreatePermissions                                               sync.RWMutex
	lockCreatePermissionsWithSd                                         sync.RWMutex
	lockCreatePolicies                                                  sync.RWMutex
	lockCreatePoliciesWithSd                                            sync.RWMutex
	lockCreatePolicy                                                    sync.RWMutex
	lockCreatePolicyCategories                                          sync.RWMutex
	lockCreatePolicyCategoriesWithSd                                    sync.RWMutex
	lockCreatePolicyCategory                                            sync.RWMutex
	lockCreatePolicyCategoryWithSd                                      sync.RWMutex
	lockCreatePolicyWithSd                                              sync.RWMutex
	lockCreateProfessor                                                 sync.RWMutex
	lockCreateProfessorWithSd                                           sync.RWMutex
	lockCreateProfessors                                                sync.RWMutex
	lockCreateProfessorsWithSd                                          sync.RWMutex
	lockCreateReadReceipt                                               sync.RWMutex
	lockCreateReadReceiptWithSd                                         sync.RWMutex
	lockCreateReadReceipts                                              sync.RWMutex
	lockCreateReadReceiptsWithSd                                        sync.RWMutex
	lockCreateRecordType                                                sync.RWMutex
	lockCreateRecordTypeWithSd                                          sync.RWMutex
	lockCreateRecordTypes                                               sync.RWMutex
	lockCreateRecordTypesWithSd                                         sync.RWMutex
	lockCreateRole                                                      sync.RWMutex
	lockCreateRoleWithSd                                                sync.RWMutex
	lockCreateRoles                                                     sync.RWMutex
	lockCreateRolesWithSd                                               sync.RWMutex
	lockCreateStudent                                                   sync.RWMutex
	lockCreateStudentWithSd                                             sync.RWMutex
	lockCreateStudents                                                  sync.RWMutex
	lockCreateStudentsWithSd                                            sync.RWMutex
	lockDeleteAbsence                                                   sync.RWMutex
	lockDeleteAbsenceWithSd                                             sync.RWMutex
	lockDeleteAttachableItem                                            sync.RWMutex
	lockDeleteAttachableItemWithSd                                      sync.RWMutex
	lockDeleteAttendStatus                                              sync.RWMutex
	lockDeleteAttendStatusByKey                                         sync.RWMutex
	lockDeleteAttendStatusByKeyWithSd                                   sync.RWMutex
	lockDeleteAttendStatusWithSd                                        sync.RWMutex
	lockDeleteAttendanceType                                            sync.RWMutex
	lockDeleteAttendanceTypeByKey                                       sync.RWMutex
	lockDeleteAttendanceTypeByKeyWithSd                                 sync.RWMutex
	lockDeleteAttendanceTypeWithSd                                      sync.RWMutex
	lockDeleteChatRoom                                                  sync.RWMutex
	lockDeleteChatRoomAction                                            sync.RWMutex
	lockDeleteChatRoomActionType                                        sync.RWMutex
	lockDeleteChatRoomActionTypeByKey                                   sync.RWMutex
	lockDeleteChatRoomActionTypeByKeyWithSd                             sync.RWMutex
	lockDeleteChatRoomActionTypeWithSd                                  sync.RWMutex
	lockDeleteChatRoomActionWithSd                                      sync.RWMutex
	lockDeleteChatRoomAddMemberAction                                   sync.RWMutex
	lockDeleteChatRoomAddMemberActionWithSd                             sync.RWMutex
	lockDeleteChatRoomAddedMember                                       sync.RWMutex
	lockDeleteChatRoomAddedMemberOnChatRoomAddMemberActionWithSd        sync.RWMutex
	lockDeleteChatRoomAddedMemberWithSd                                 sync.RWMutex
	lockDeleteChatRoomAddedMembersOnChatRoomAddMemberAction             sync.RWMutex
	lockDeleteChatRoomAddedMembersOnChatRoomAddMemberActions            sync.RWMutex
	lockDeleteChatRoomAddedMembersOnChatRoomAddMemberActionsWithSd      sync.RWMutex
	lockDeleteChatRoomAddedMembersOnMember                              sync.RWMutex
	lockDeleteChatRoomAddedMembersOnMemberWithSd                        sync.RWMutex
	lockDeleteChatRoomAddedMembersOnMembers                             sync.RWMutex
	lockDeleteChatRoomAddedMembersOnMembersWithSd                       sync.RWMutex
	lockDeleteChatRoomCreateAction                                      sync.RWMutex
	lockDeleteChatRoomCreateActionWithSd                                sync.RWMutex
	lockDeleteChatRoomDeleteMessageAction                               sync.RWMutex
	lockDeleteChatRoomDeleteMessageActionWithSd                         sync.RWMutex
	lockDeleteChatRoomRemoveMemberAction                                sync.RWMutex
	lockDeleteChatRoomRemoveMemberActionWithSd                          sync.RWMutex
	lockDeleteChatRoomRemovedMember                                     sync.RWMutex
	lockDeleteChatRoomRemovedMemberOnChatRoomRemoveMemberActionWithSd   sync.RWMutex
	lockDeleteChatRoomRemovedMemberWithSd                               sync.RWMutex
	lockDeleteChatRoomRemovedMembersOnChatRoomRemoveMemberAction        sync.RWMutex
	lockDeleteChatRoomRemovedMembersOnChatRoomRemoveMemberActions       sync.RWMutex
	lockDeleteChatRoomRemovedMembersOnChatRoomRemoveMemberActionsWithSd sync.RWMutex
	lockDeleteChatRoomRemovedMembersOnMember                            sync.RWMutex
	lockDeleteChatRoomRemovedMembersOnMemberWithSd                      sync.RWMutex
	lockDeleteChatRoomRemovedMembersOnMembers                           sync.RWMutex
	lockDeleteChatRoomRemovedMembersOnMembersWithSd                     sync.RWMutex
	lockDeleteChatRoomUpdateNameAction                                  sync.RWMutex
	lockDeleteChatRoomUpdateNameActionWithSd                            sync.RWMutex
	lockDeleteChatRoomWithSd                                            sync.RWMutex
	lockDeleteChatRoomWithdrawAction                                    sync.RWMutex
	lockDeleteChatRoomWithdrawActionWithSd                              sync.RWMutex
	lockDeleteEventType                                                 sync.RWMutex
	lockDeleteEventTypeByKey                                            sync.RWMutex
	lockDeleteEventTypeByKeyWithSd                                      sync.RWMutex
	lockDeleteEventTypeWithSd                                           sync.RWMutex
	lockDeleteFile                                                      sync.RWMutex
	lockDeleteFileWithSd                                                sync.RWMutex
	lockDeleteGrade                                                     sync.RWMutex
	lockDeleteGradeWithSd                                               sync.RWMutex
	lockDeleteGroup                                                     sync.RWMutex
	lockDeleteGroupWithSd                                               sync.RWMutex
	lockDeleteImage                                                     sync.RWMutex
	lockDeleteImageWithSd                                               sync.RWMutex
	lockDeleteMember                                                    sync.RWMutex
	lockDeleteMemberWithSd                                              sync.RWMutex
	lockDeleteMessage                                                   sync.RWMutex
	lockDeleteMessageWithSd                                             sync.RWMutex
	lockDeleteMessagesOnChatRoom                                        sync.RWMutex
	lockDeleteMessagesOnChatRoomWithSd                                  sync.RWMutex
	lockDeleteMimeType                                                  sync.RWMutex
	lockDeleteMimeTypeByKey                                             sync.RWMutex
	lockDeleteMimeTypeByKeyWithSd                                       sync.RWMutex
	lockDeleteMimeTypeWithSd                                            sync.RWMutex
	lockDeleteOrganization                                              sync.RWMutex
	lockDeleteOrganizationWithSd                                        sync.RWMutex
	lockDeletePermission                                                sync.RWMutex
	lockDeletePermissionByKey                                           sync.RWMutex
	lockDeletePermissionByKeyWithSd                                     sync.RWMutex
	lockDeletePermissionCategory                                        sync.RWMutex
	lockDeletePermissionCategoryByKey                                   sync.RWMutex
	lockDeletePermissionCategoryByKeyWithSd                             sync.RWMutex
	lockDeletePermissionCategoryWithSd                                  sync.RWMutex
	lockDeletePermissionWithSd                                          sync.RWMutex
	lockDeletePolicy                                                    sync.RWMutex
	lockDeletePolicyByKey                                               sync.RWMutex
	lockDeletePolicyByKeyWithSd                                         sync.RWMutex
	lockDeletePolicyCategory                                            sync.RWMutex
	lockDeletePolicyCategoryByKey                                       sync.RWMutex
	lockDeletePolicyCategoryByKeyWithSd                                 sync.RWMutex
	lockDeletePolicyCategoryWithSd                                      sync.RWMutex
	lockDeletePolicyWithSd                                              sync.RWMutex
	lockDeleteProfessor                                                 sync.RWMutex
	lockDeleteProfessorWithSd                                           sync.RWMutex
	lockDeleteRecordType                                                sync.RWMutex
	lockDeleteRecordTypeByKey                                           sync.RWMutex
	lockDeleteRecordTypeByKeyWithSd                                     sync.RWMutex
	lockDeleteRecordTypeWithSd                                          sync.RWMutex
	lockDeleteRole                                                      sync.RWMutex
	lockDeleteRoleWithSd                                                sync.RWMutex
	lockDeleteStudent                                                   sync.RWMutex
	lockDeleteStudentWithSd                                             sync.RWMutex
	lockDetachAttachedMessage                                           sync.RWMutex
	lockDetachAttachedMessageWithSd                                     sync.RWMutex
	lockDetachItemsOnMessage                                            sync.RWMutex
	lockDetachItemsOnMessageWithSd                                      sync.RWMutex
	lockDetachItemsOnMessages                                           sync.RWMutex
	lockDetachItemsOnMessagesWithSd                                     sync.RWMutex
	lockDisassociatePolicyOnRole                                        sync.RWMutex
	lockDisassociatePolicyOnRoleWithSd                                  sync.RWMutex
	lockDisassociatePolicyOnRoles                                       sync.RWMutex
	lockDisassociatePolicyOnRolesWithSd                                 sync.RWMutex
	lockDisassociateRole                                                sync.RWMutex
	lockDisassociateRoleOnPolicies                                      sync.RWMutex
	lockDisassociateRoleOnPoliciesWithSd                                sync.RWMutex
	lockDisassociateRoleOnPolicy                                        sync.RWMutex
	lockDisassociateRoleOnPolicyWithSd                                  sync.RWMutex
	lockDisassociateRoleWithSd                                          sync.RWMutex
	lockDisbelongChatRoom                                               sync.RWMutex
	lockDisbelongChatRoomOnChatRoom                                     sync.RWMutex
	lockDisbelongChatRoomOnChatRoomWithSd                               sync.RWMutex
	lockDisbelongChatRoomOnChatRooms                                    sync.RWMutex
	lockDisbelongChatRoomOnChatRoomsWithSd                              sync.RWMutex
	lockDisbelongChatRoomOnMember                                       sync.RWMutex
	lockDisbelongChatRoomOnMemberWithSd                                 sync.RWMutex
	lockDisbelongChatRoomOnMembers                                      sync.RWMutex
	lockDisbelongChatRoomOnMembersWithSd                                sync.RWMutex
	lockDisbelongChatRoomWithSd                                         sync.RWMutex
	lockDisbelongOrganization                                           sync.RWMutex
	lockDisbelongOrganizationOnMember                                   sync.RWMutex
	lockDisbelongOrganizationOnMemberWithSd                             sync.RWMutex
	lockDisbelongOrganizationOnMembers                                  sync.RWMutex
	lockDisbelongOrganizationOnMembersWithSd                            sync.RWMutex
	lockDisbelongOrganizationOnOrganization                             sync.RWMutex
	lockDisbelongOrganizationOnOrganizationWithSd                       sync.RWMutex
	lockDisbelongOrganizationOnOrganizations                            sync.RWMutex
	lockDisbelongOrganizationOnOrganizationsWithSd                      sync.RWMutex
	lockDisbelongOrganizationWithSd                                     sync.RWMutex
	lockDisbelongPluralChatRoomsOnMember                                sync.RWMutex
	lockDisbelongPluralChatRoomsOnMemberWithSd                          sync.RWMutex
	lockDisbelongPluralMembersOnChatRoom                                sync.RWMutex
	lockDisbelongPluralMembersOnChatRoomWithSd                          sync.RWMutex
	lockDisbelongPluralMembersOnOrganization                            sync.RWMutex
	lockDisbelongPluralMembersOnOrganizationWithSd                      sync.RWMutex
	lockDisbelongPluralOrganizationsOnMember                            sync.RWMutex
	lockDisbelongPluralOrganizationsOnMemberWithSd                      sync.RWMutex
	lockExistsChatRoomBelonging                                         sync.RWMutex
	lockExistsChatRoomBelongingWithSd                                   sync.RWMutex
	lockExistsReadReceipt                                               sync.RWMutex
	lockExistsReadReceiptWithSd                                         sync.RWMutex
	lockFindAbsenceByID                                                 sync.RWMutex
	lockFindAbsenceByIDWithSd                                           sync.RWMutex
	lockFindAttachableItemByID                                          sync.RWMutex
	lockFindAttachableItemByIDWithMimeType                              sync.RWMutex
	lockFindAttachableItemByIDWithMimeTypeWithSd                        sync.RWMutex
	lockFindAttachableItemByIDWithSd                                    sync.RWMutex
	lockFindAttachableItemByURL                                         sync.RWMutex
	lockFindAttachableItemByURLWithMimeType                             sync.RWMutex
	lockFindAttachableItemByURLWithMimeTypeWithSd                       sync.RWMutex
	lockFindAttachableItemByURLWithSd                                   sync.RWMutex
	lockFindAttendStatusByID                                            sync.RWMutex
	lockFindAttendStatusByIDWithSd                                      sync.RWMutex
	lockFindAttendStatusByKey                                           sync.RWMutex
	lockFindAttendStatusByKeyWithSd                                     sync.RWMutex
	lockFindAttendanceTypeByID                                          sync.RWMutex
	lockFindAttendanceTypeByIDWithSd                                    sync.RWMutex
	lockFindAttendanceTypeByKey                                         sync.RWMutex
	lockFindAttendanceTypeByKeyWithSd                                   sync.RWMutex
	lockFindChatRoomActionTypeByID                                      sync.RWMutex
	lockFindChatRoomActionTypeByIDWithSd                                sync.RWMutex
	lockFindChatRoomActionTypeByKey                                     sync.RWMutex
	lockFindChatRoomActionTypeByKeyWithSd                               sync.RWMutex
	lockFindChatRoomByID                                                sync.RWMutex
	lockFindChatRoomByIDWithCoverImage                                  sync.RWMutex
	lockFindChatRoomByIDWithCoverImageWithSd                            sync.RWMutex
	lockFindChatRoomByIDWithSd                                          sync.RWMutex
	lockFindChatRoomOnPrivate                                           sync.RWMutex
	lockFindChatRoomOnPrivateWithSd                                     sync.RWMutex
	lockFindEventTypeByID                                               sync.RWMutex
	lockFindEventTypeByIDWithSd                                         sync.RWMutex
	lockFindEventTypeByKey                                              sync.RWMutex
	lockFindEventTypeByKeyWithSd                                        sync.RWMutex
	lockFindFileByID                                                    sync.RWMutex
	lockFindFileByIDWithSd                                              sync.RWMutex
	lockFindFileWithAttachableItem                                      sync.RWMutex
	lockFindFileWithAttachableItemWithSd                                sync.RWMutex
	lockFindGradeByID                                                   sync.RWMutex
	lockFindGradeByIDWithSd                                             sync.RWMutex
	lockFindGradeByKey                                                  sync.RWMutex
	lockFindGradeByKeyWithSd                                            sync.RWMutex
	lockFindGradeWithOrganization                                       sync.RWMutex
	lockFindGradeWithOrganizationWithSd                                 sync.RWMutex
	lockFindGroupByID                                                   sync.RWMutex
	lockFindGroupByIDWithSd                                             sync.RWMutex
	lockFindGroupByKey                                                  sync.RWMutex
	lockFindGroupByKeyWithSd                                            sync.RWMutex
	lockFindGroupWithOrganization                                       sync.RWMutex
	lockFindGroupWithOrganizationWithSd                                 sync.RWMutex
	lockFindImageByID                                                   sync.RWMutex
	lockFindImageByIDWithSd                                             sync.RWMutex
	lockFindImageWithAttachableItem                                     sync.RWMutex
	lockFindImageWithAttachableItemWithSd                               sync.RWMutex
	lockFindMemberByID                                                  sync.RWMutex
	lockFindMemberByIDWithSd                                            sync.RWMutex
	lockFindMemberByLoginID                                             sync.RWMutex
	lockFindMemberByLoginIDWithSd                                       sync.RWMutex
	lockFindMemberCredentialsByID                                       sync.RWMutex
	lockFindMemberCredentialsByIDWithSd                                 sync.RWMutex
	lockFindMemberCredentialsByLoginID                                  sync.RWMutex
	lockFindMemberCredentialsByLoginIDWithSd                            sync.RWMutex
	lockFindMemberWithAttendStatus                                      sync.RWMutex
	lockFindMemberWithAttendStatusWithSd                                sync.RWMutex
	lockFindMemberWithCrew                                              sync.RWMutex
	lockFindMemberWithCrewWithSd                                        sync.RWMutex
	lockFindMemberWithDetail                                            sync.RWMutex
	lockFindMemberWithDetailWithSd                                      sync.RWMutex
	lockFindMemberWithPersonalOrganization                              sync.RWMutex
	lockFindMemberWithPersonalOrganizationWithSd                        sync.RWMutex
	lockFindMemberWithProfileImage                                      sync.RWMutex
	lockFindMemberWithProfileImageWithSd                                sync.RWMutex
	lockFindMemberWithRole                                              sync.RWMutex
	lockFindMemberWithRoleWithSd                                        sync.RWMutex
	lockFindMessageByID                                                 sync.RWMutex
	lockFindMessageByIDWithSd                                           sync.RWMutex
	lockFindMessageWithChatRoom                                         sync.RWMutex
	lockFindMessageWithChatRoomAction                                   sync.RWMutex
	lockFindMessageWithChatRoomActionWithSd                             sync.RWMutex
	lockFindMessageWithChatRoomWithSd                                   sync.RWMutex
	lockFindMessageWithSender                                           sync.RWMutex
	lockFindMessageWithSenderWithSd                                     sync.RWMutex
	lockFindMimeTypeByID                                                sync.RWMutex
	lockFindMimeTypeByIDWithSd                                          sync.RWMutex
	lockFindMimeTypeByKey                                               sync.RWMutex
	lockFindMimeTypeByKeyWithSd                                         sync.RWMutex
	lockFindMimeTypeByKind                                              sync.RWMutex
	lockFindMimeTypeByKindWithSd                                        sync.RWMutex
	lockFindOrganizationByID                                            sync.RWMutex
	lockFindOrganizationByIDWithSd                                      sync.RWMutex
	lockFindOrganizationWithChatRoom                                    sync.RWMutex
	lockFindOrganizationWithChatRoomAndDetail                           sync.RWMutex
	lockFindOrganizationWithChatRoomAndDetailWithSd                     sync.RWMutex
	lockFindOrganizationWithChatRoomWithSd                              sync.RWMutex
	lockFindOrganizationWithDetail                                      sync.RWMutex
	lockFindOrganizationWithDetailWithSd                                sync.RWMutex
	lockFindPermissionByID                                              sync.RWMutex
	lockFindPermissionByIDWithCategory                                  sync.RWMutex
	lockFindPermissionByIDWithCategoryWithSd                            sync.RWMutex
	lockFindPermissionByIDWithSd                                        sync.RWMutex
	lockFindPermissionByKey                                             sync.RWMutex
	lockFindPermissionByKeyWithCategory                                 sync.RWMutex
	lockFindPermissionByKeyWithCategoryWithSd                           sync.RWMutex
	lockFindPermissionByKeyWithSd                                       sync.RWMutex
	lockFindPermissionCategoryByID                                      sync.RWMutex
	lockFindPermissionCategoryByIDWithSd                                sync.RWMutex
	lockFindPermissionCategoryByKey                                     sync.RWMutex
	lockFindPermissionCategoryByKeyWithSd                               sync.RWMutex
	lockFindPersonalOrganization                                        sync.RWMutex
	lockFindPersonalOrganizationWithSd                                  sync.RWMutex
	lockFindPolicyByID                                                  sync.RWMutex
	lockFindPolicyByIDWithCategory                                      sync.RWMutex
	lockFindPolicyByIDWithCategoryWithSd                                sync.RWMutex
	lockFindPolicyByIDWithSd                                            sync.RWMutex
	lockFindPolicyByKey                                                 sync.RWMutex
	lockFindPolicyByKeyWithCategory                                     sync.RWMutex
	lockFindPolicyByKeyWithCategoryWithSd                               sync.RWMutex
	lockFindPolicyByKeyWithSd                                           sync.RWMutex
	lockFindPolicyCategoryByID                                          sync.RWMutex
	lockFindPolicyCategoryByIDWithSd                                    sync.RWMutex
	lockFindPolicyCategoryByKey                                         sync.RWMutex
	lockFindPolicyCategoryByKeyWithSd                                   sync.RWMutex
	lockFindProfessorByID                                               sync.RWMutex
	lockFindProfessorByIDWithSd                                         sync.RWMutex
	lockFindProfessorWithMember                                         sync.RWMutex
	lockFindProfessorWithMemberWithSd                                   sync.RWMutex
	lockFindReadReceipt                                                 sync.RWMutex
	lockFindReadReceiptWithSd                                           sync.RWMutex
	lockFindRecordTypeByID                                              sync.RWMutex
	lockFindRecordTypeByIDWithSd                                        sync.RWMutex
	lockFindRecordTypeByKey                                             sync.RWMutex
	lockFindRecordTypeByKeyWithSd                                       sync.RWMutex
	lockFindRoleByID                                                    sync.RWMutex
	lockFindRoleByIDWithSd                                              sync.RWMutex
	lockFindStudentByID                                                 sync.RWMutex
	lockFindStudentByIDWithSd                                           sync.RWMutex
	lockFindStudentWithMember                                           sync.RWMutex
	lockFindStudentWithMemberWithSd                                     sync.RWMutex
	lockFindWholeOrganization                                           sync.RWMutex
	lockFindWholeOrganizationWithSd                                     sync.RWMutex
	lockGetAbsences                                                     sync.RWMutex
	lockGetAbsencesWithSd                                               sync.RWMutex
	lockGetAttachableItems                                              sync.RWMutex
	lockGetAttachableItemsWithMimeType                                  sync.RWMutex
	lockGetAttachableItemsWithMimeTypeWithSd                            sync.RWMutex
	lockGetAttachableItemsWithSd                                        sync.RWMutex
	lockGetAttachedItemsOnChatRoom                                      sync.RWMutex
	lockGetAttachedItemsOnChatRoomWithSd                                sync.RWMutex
	lockGetAttachedItemsOnMessage                                       sync.RWMutex
	lockGetAttachedItemsOnMessageWithMimeType                           sync.RWMutex
	lockGetAttachedItemsOnMessageWithMimeTypeWithSd                     sync.RWMutex
	lockGetAttachedItemsOnMessageWithSd                                 sync.RWMutex
	lockGetAttendStatuses                                               sync.RWMutex
	lockGetAttendStatusesWithSd                                         sync.RWMutex
	lockGetAttendanceTypes                                              sync.RWMutex
	lockGetAttendanceTypesWithSd                                        sync.RWMutex
	lockGetChatRoomActionTypes                                          sync.RWMutex
	lockGetChatRoomActionTypesWithSd                                    sync.RWMutex
	lockGetChatRoomActionsOnChatRoom                                    sync.RWMutex
	lockGetChatRoomActionsOnChatRoomWithSd                              sync.RWMutex
	lockGetChatRoomActionsWithDetailOnChatRoom                          sync.RWMutex
	lockGetChatRoomActionsWithDetailOnChatRoomWithSd                    sync.RWMutex
	lockGetChatRoomAddMemberActionsOnChatRoom                           sync.RWMutex
	lockGetChatRoomAddMemberActionsOnChatRoomWithSd                     sync.RWMutex
	lockGetChatRoomCreateActionsOnChatRoom                              sync.RWMutex
	lockGetChatRoomCreateActionsOnChatRoomWithSd                        sync.RWMutex
	lockGetChatRoomDeleteMessageActionsOnChatRoom                       sync.RWMutex
	lockGetChatRoomDeleteMessageActionsOnChatRoomWithSd                 sync.RWMutex
	lockGetChatRoomRemoveMemberActionsOnChatRoom                        sync.RWMutex
	lockGetChatRoomRemoveMemberActionsOnChatRoomWithSd                  sync.RWMutex
	lockGetChatRoomUpdateNameActionsOnChatRoom                          sync.RWMutex
	lockGetChatRoomUpdateNameActionsOnChatRoomWithSd                    sync.RWMutex
	lockGetChatRoomWithdrawActionsOnChatRoom                            sync.RWMutex
	lockGetChatRoomWithdrawActionsOnChatRoomWithSd                      sync.RWMutex
	lockGetChatRooms                                                    sync.RWMutex
	lockGetChatRoomsOnMember                                            sync.RWMutex
	lockGetChatRoomsOnMemberWithSd                                      sync.RWMutex
	lockGetChatRoomsWithCoverImage                                      sync.RWMutex
	lockGetChatRoomsWithCoverImageWithSd                                sync.RWMutex
	lockGetChatRoomsWithSd                                              sync.RWMutex
	lockGetEventTypes                                                   sync.RWMutex
	lockGetEventTypesWithSd                                             sync.RWMutex
	lockGetFiles                                                        sync.RWMutex
	lockGetFilesWithAttachableItem                                      sync.RWMutex
	lockGetFilesWithAttachableItemWithSd                                sync.RWMutex
	lockGetFilesWithSd                                                  sync.RWMutex
	lockGetGrades                                                       sync.RWMutex
	lockGetGradesWithOrganization                                       sync.RWMutex
	lockGetGradesWithOrganizationWithSd                                 sync.RWMutex
	lockGetGradesWithSd                                                 sync.RWMutex
	lockGetGroups                                                       sync.RWMutex
	lockGetGroupsWithOrganization                                       sync.RWMutex
	lockGetGroupsWithOrganizationWithSd                                 sync.RWMutex
	lockGetGroupsWithSd                                                 sync.RWMutex
	lockGetImages                                                       sync.RWMutex
	lockGetImagesWithAttachableItem                                     sync.RWMutex
	lockGetImagesWithAttachableItemWithSd                               sync.RWMutex
	lockGetImagesWithSd                                                 sync.RWMutex
	lockGetMembers                                                      sync.RWMutex
	lockGetMembersOnChatRoom                                            sync.RWMutex
	lockGetMembersOnChatRoomAddMemberAction                             sync.RWMutex
	lockGetMembersOnChatRoomAddMemberActionWithSd                       sync.RWMutex
	lockGetMembersOnChatRoomRemoveMemberAction                          sync.RWMutex
	lockGetMembersOnChatRoomRemoveMemberActionWithSd                    sync.RWMutex
	lockGetMembersOnChatRoomWithSd                                      sync.RWMutex
	lockGetMembersOnOrganization                                        sync.RWMutex
	lockGetMembersOnOrganizationWithSd                                  sync.RWMutex
	lockGetMembersWithAttendStatus                                      sync.RWMutex
	lockGetMembersWithAttendStatusWithSd                                sync.RWMutex
	lockGetMembersWithCrew                                              sync.RWMutex
	lockGetMembersWithCrewWithSd                                        sync.RWMutex
	lockGetMembersWithDetail                                            sync.RWMutex
	lockGetMembersWithDetailWithSd                                      sync.RWMutex
	lockGetMembersWithPersonalOrganization                              sync.RWMutex
	lockGetMembersWithPersonalOrganizationWithSd                        sync.RWMutex
	lockGetMembersWithProfileImage                                      sync.RWMutex
	lockGetMembersWithProfileImageWithSd                                sync.RWMutex
	lockGetMembersWithRole                                              sync.RWMutex
	lockGetMembersWithRoleWithSd                                        sync.RWMutex
	lockGetMembersWithSd                                                sync.RWMutex
	lockGetMessages                                                     sync.RWMutex
	lockGetMessagesWithChatRoom                                         sync.RWMutex
	lockGetMessagesWithChatRoomWithSd                                   sync.RWMutex
	lockGetMessagesWithSd                                               sync.RWMutex
	lockGetMessagesWithSender                                           sync.RWMutex
	lockGetMessagesWithSenderWithSd                                     sync.RWMutex
	lockGetMimeTypes                                                    sync.RWMutex
	lockGetMimeTypesWithSd                                              sync.RWMutex
	lockGetOrganizations                                                sync.RWMutex
	lockGetOrganizationsOnMember                                        sync.RWMutex
	lockGetOrganizationsOnMemberWithSd                                  sync.RWMutex
	lockGetOrganizationsWithChatRoom                                    sync.RWMutex
	lockGetOrganizationsWithChatRoomAndDetail                           sync.RWMutex
	lockGetOrganizationsWithChatRoomAndDetailWithSd                     sync.RWMutex
	lockGetOrganizationsWithChatRoomWithSd                              sync.RWMutex
	lockGetOrganizationsWithDetail                                      sync.RWMutex
	lockGetOrganizationsWithDetailWithSd                                sync.RWMutex
	lockGetOrganizationsWithSd                                          sync.RWMutex
	lockGetPermissionCategories                                         sync.RWMutex
	lockGetPermissionCategoriesWithSd                                   sync.RWMutex
	lockGetPermissions                                                  sync.RWMutex
	lockGetPermissionsWithCategory                                      sync.RWMutex
	lockGetPermissionsWithCategoryWithSd                                sync.RWMutex
	lockGetPermissionsWithSd                                            sync.RWMutex
	lockGetPluralAbsences                                               sync.RWMutex
	lockGetPluralAbsencesWithSd                                         sync.RWMutex
	lockGetPluralAttachableItems                                        sync.RWMutex
	lockGetPluralAttachableItemsWithMimeType                            sync.RWMutex
	lockGetPluralAttachableItemsWithMimeTypeWithSd                      sync.RWMutex
	lockGetPluralAttachableItemsWithSd                                  sync.RWMutex
	lockGetPluralAttachedItemsOnMessage                                 sync.RWMutex
	lockGetPluralAttachedItemsOnMessageWithMimeType                     sync.RWMutex
	lockGetPluralAttachedItemsOnMessageWithMimeTypeWithSd               sync.RWMutex
	lockGetPluralAttachedItemsOnMessageWithSd                           sync.RWMutex
	lockGetPluralAttendStatuses                                         sync.RWMutex
	lockGetPluralAttendStatusesWithSd                                   sync.RWMutex
	lockGetPluralAttendanceTypes                                        sync.RWMutex
	lockGetPluralAttendanceTypesWithSd                                  sync.RWMutex
	lockGetPluralChatRoomActionTypes                                    sync.RWMutex
	lockGetPluralChatRoomActionTypesWithSd                              sync.RWMutex
	lockGetPluralChatRoomActions                                        sync.RWMutex
	lockGetPluralChatRoomActionsWithDetail                              sync.RWMutex
	lockGetPluralChatRoomActionsWithDetailWithSd                        sync.RWMutex
	lockGetPluralChatRoomActionsWithSd                                  sync.RWMutex
	lockGetPluralChatRoomAddMemberActions                               sync.RWMutex
	lockGetPluralChatRoomAddMemberActionsByChatRoomActionIDs            sync.RWMutex
	lockGetPluralChatRoomAddMemberActionsByChatRoomActionIDsWithSd      sync.RWMutex
	lockGetPluralChatRoomAddMemberActionsWithSd                         sync.RWMutex
	lockGetPluralChatRoomCreateActions                                  sync.RWMutex
	lockGetPluralChatRoomCreateActionsByChatRoomActionIDs               sync.RWMutex
	lockGetPluralChatRoomCreateActionsByChatRoomActionIDsWithSd         sync.RWMutex
	lockGetPluralChatRoomCreateActionsWithSd                            sync.RWMutex
	lockGetPluralChatRoomDeleteMessageActions                           sync.RWMutex
	lockGetPluralChatRoomDeleteMessageActionsByChatRoomActionIDs        sync.RWMutex
	lockGetPluralChatRoomDeleteMessageActionsByChatRoomActionIDsWithSd  sync.RWMutex
	lockGetPluralChatRoomDeleteMessageActionsWithSd                     sync.RWMutex
	lockGetPluralChatRoomRemoveMemberActions                            sync.RWMutex
	lockGetPluralChatRoomRemoveMemberActionsByChatRoomActionIDs         sync.RWMutex
	lockGetPluralChatRoomRemoveMemberActionsByChatRoomActionIDsWithSd   sync.RWMutex
	lockGetPluralChatRoomRemoveMemberActionsWithSd                      sync.RWMutex
	lockGetPluralChatRoomUpdateNameActions                              sync.RWMutex
	lockGetPluralChatRoomUpdateNameActionsByChatRoomActionIDs           sync.RWMutex
	lockGetPluralChatRoomUpdateNameActionsByChatRoomActionIDsWithSd     sync.RWMutex
	lockGetPluralChatRoomUpdateNameActionsWithSd                        sync.RWMutex
	lockGetPluralChatRoomWithdrawActions                                sync.RWMutex
	lockGetPluralChatRoomWithdrawActionsByChatRoomActionIDs             sync.RWMutex
	lockGetPluralChatRoomWithdrawActionsByChatRoomActionIDsWithSd       sync.RWMutex
	lockGetPluralChatRoomWithdrawActionsWithSd                          sync.RWMutex
	lockGetPluralChatRooms                                              sync.RWMutex
	lockGetPluralChatRoomsOnMember                                      sync.RWMutex
	lockGetPluralChatRoomsOnMemberWithSd                                sync.RWMutex
	lockGetPluralChatRoomsWithCoverImage                                sync.RWMutex
	lockGetPluralChatRoomsWithCoverImageWithSd                          sync.RWMutex
	lockGetPluralChatRoomsWithSd                                        sync.RWMutex
	lockGetPluralEventTypes                                             sync.RWMutex
	lockGetPluralEventTypesWithSd                                       sync.RWMutex
	lockGetPluralFiles                                                  sync.RWMutex
	lockGetPluralFilesWithAttachableItem                                sync.RWMutex
	lockGetPluralFilesWithAttachableItemWithSd                          sync.RWMutex
	lockGetPluralFilesWithSd                                            sync.RWMutex
	lockGetPluralGrades                                                 sync.RWMutex
	lockGetPluralGradesWithOrganization                                 sync.RWMutex
	lockGetPluralGradesWithOrganizationWithSd                           sync.RWMutex
	lockGetPluralGradesWithSd                                           sync.RWMutex
	lockGetPluralGroups                                                 sync.RWMutex
	lockGetPluralGroupsWithOrganization                                 sync.RWMutex
	lockGetPluralGroupsWithOrganizationWithSd                           sync.RWMutex
	lockGetPluralGroupsWithSd                                           sync.RWMutex
	lockGetPluralImages                                                 sync.RWMutex
	lockGetPluralImagesWithAttachableItem                               sync.RWMutex
	lockGetPluralImagesWithAttachableItemWithSd                         sync.RWMutex
	lockGetPluralImagesWithSd                                           sync.RWMutex
	lockGetPluralMembers                                                sync.RWMutex
	lockGetPluralMembersOnChatRoom                                      sync.RWMutex
	lockGetPluralMembersOnChatRoomAddMemberAction                       sync.RWMutex
	lockGetPluralMembersOnChatRoomAddMemberActionWithSd                 sync.RWMutex
	lockGetPluralMembersOnChatRoomRemoveMemberAction                    sync.RWMutex
	lockGetPluralMembersOnChatRoomRemoveMemberActionWithSd              sync.RWMutex
	lockGetPluralMembersOnChatRoomWithSd                                sync.RWMutex
	lockGetPluralMembersOnOrganization                                  sync.RWMutex
	lockGetPluralMembersOnOrganizationWithSd                            sync.RWMutex
	lockGetPluralMembersWithAttendStatus                                sync.RWMutex
	lockGetPluralMembersWithAttendStatusWithSd                          sync.RWMutex
	lockGetPluralMembersWithCrew                                        sync.RWMutex
	lockGetPluralMembersWithCrewWithSd                                  sync.RWMutex
	lockGetPluralMembersWithDetail                                      sync.RWMutex
	lockGetPluralMembersWithDetailWithSd                                sync.RWMutex
	lockGetPluralMembersWithPersonalOrganization                        sync.RWMutex
	lockGetPluralMembersWithPersonalOrganizationWithSd                  sync.RWMutex
	lockGetPluralMembersWithProfileImage                                sync.RWMutex
	lockGetPluralMembersWithProfileImageWithSd                          sync.RWMutex
	lockGetPluralMembersWithRole                                        sync.RWMutex
	lockGetPluralMembersWithRoleWithSd                                  sync.RWMutex
	lockGetPluralMembersWithSd                                          sync.RWMutex
	lockGetPluralMessages                                               sync.RWMutex
	lockGetPluralMessagesWithChatRoom                                   sync.RWMutex
	lockGetPluralMessagesWithChatRoomWithSd                             sync.RWMutex
	lockGetPluralMessagesWithSd                                         sync.RWMutex
	lockGetPluralMessagesWithSender                                     sync.RWMutex
	lockGetPluralMessagesWithSenderByChatRoomActionIDs                  sync.RWMutex
	lockGetPluralMessagesWithSenderByChatRoomActionIDsWithSd            sync.RWMutex
	lockGetPluralMessagesWithSenderWithSd                               sync.RWMutex
	lockGetPluralMimeTypes                                              sync.RWMutex
	lockGetPluralMimeTypesWithSd                                        sync.RWMutex
	lockGetPluralOrganizations                                          sync.RWMutex
	lockGetPluralOrganizationsOnMember                                  sync.RWMutex
	lockGetPluralOrganizationsOnMemberWithSd                            sync.RWMutex
	lockGetPluralOrganizationsWithChatRoom                              sync.RWMutex
	lockGetPluralOrganizationsWithChatRoomAndDetail                     sync.RWMutex
	lockGetPluralOrganizationsWithChatRoomAndDetailWithSd               sync.RWMutex
	lockGetPluralOrganizationsWithChatRoomWithSd                        sync.RWMutex
	lockGetPluralOrganizationsWithDetail                                sync.RWMutex
	lockGetPluralOrganizationsWithDetailWithSd                          sync.RWMutex
	lockGetPluralOrganizationsWithSd                                    sync.RWMutex
	lockGetPluralPermissionCategories                                   sync.RWMutex
	lockGetPluralPermissionCategoriesWithSd                             sync.RWMutex
	lockGetPluralPermissions                                            sync.RWMutex
	lockGetPluralPermissionsWithSd                                      sync.RWMutex
	lockGetPluralPolicies                                               sync.RWMutex
	lockGetPluralPoliciesWithSd                                         sync.RWMutex
	lockGetPluralPolicyCategories                                       sync.RWMutex
	lockGetPluralPolicyCategoriesWithSd                                 sync.RWMutex
	lockGetPluralPrivateChatRoomCompanions                              sync.RWMutex
	lockGetPluralPrivateChatRoomCompanionsWithSd                        sync.RWMutex
	lockGetPluralProfessors                                             sync.RWMutex
	lockGetPluralProfessorsWithMember                                   sync.RWMutex
	lockGetPluralProfessorsWithMemberWithSd                             sync.RWMutex
	lockGetPluralProfessorsWithSd                                       sync.RWMutex
	lockGetPluralReadableMembersOnMessage                               sync.RWMutex
	lockGetPluralReadableMembersOnMessageWithSd                         sync.RWMutex
	lockGetPluralReadableMessagesOnMember                               sync.RWMutex
	lockGetPluralReadableMessagesOnMemberWithSd                         sync.RWMutex
	lockGetPluralRecordTypes                                            sync.RWMutex
	lockGetPluralRecordTypesWithSd                                      sync.RWMutex
	lockGetPluralRoles                                                  sync.RWMutex
	lockGetPluralRolesWithSd                                            sync.RWMutex
	lockGetPluralStudents                                               sync.RWMutex
	lockGetPluralStudentsWithMember                                     sync.RWMutex
	lockGetPluralStudentsWithMemberWithSd                               sync.RWMutex
	lockGetPluralStudentsWithSd                                         sync.RWMutex
	lockGetPolicies                                                     sync.RWMutex
	lockGetPoliciesOnRole                                               sync.RWMutex
	lockGetPoliciesOnRoleWithSd                                         sync.RWMutex
	lockGetPoliciesWithCategory                                         sync.RWMutex
	lockGetPoliciesWithCategoryWithSd                                   sync.RWMutex
	lockGetPoliciesWithSd                                               sync.RWMutex
	lockGetPolicyCategories                                             sync.RWMutex
	lockGetPolicyCategoriesWithSd                                       sync.RWMutex
	lockGetProfessors                                                   sync.RWMutex
	lockGetProfessorsWithMember                                         sync.RWMutex
	lockGetProfessorsWithMemberWithSd                                   sync.RWMutex
	lockGetProfessorsWithSd                                             sync.RWMutex
	lockGetReadableMembersOnMessage                                     sync.RWMutex
	lockGetReadableMembersOnMessageWithSd                               sync.RWMutex
	lockGetReadableMessagesOnMember                                     sync.RWMutex
	lockGetReadableMessagesOnMemberWithSd                               sync.RWMutex
	lockGetRecordTypes                                                  sync.RWMutex
	lockGetRecordTypesWithSd                                            sync.RWMutex
	lockGetRoles                                                        sync.RWMutex
	lockGetRolesOnPolicy                                                sync.RWMutex
	lockGetRolesOnPolicyWithSd                                          sync.RWMutex
	lockGetRolesWithSd                                                  sync.RWMutex
	lockGetStudents                                                     sync.RWMutex
	lockGetStudentsWithMember                                           sync.RWMutex
	lockGetStudentsWithMemberWithSd                                     sync.RWMutex
	lockGetStudentsWithSd                                               sync.RWMutex
	lockPluralDeleteAbsences                                            sync.RWMutex
	lockPluralDeleteAbsencesWithSd                                      sync.RWMutex
	lockPluralDeleteAttachableItems                                     sync.RWMutex
	lockPluralDeleteAttachableItemsWithSd                               sync.RWMutex
	lockPluralDeleteAttendStatuses                                      sync.RWMutex
	lockPluralDeleteAttendStatusesWithSd                                sync.RWMutex
	lockPluralDeleteAttendanceTypes                                     sync.RWMutex
	lockPluralDeleteAttendanceTypesWithSd                               sync.RWMutex
	lockPluralDeleteChatRoomActionTypes                                 sync.RWMutex
	lockPluralDeleteChatRoomActionTypesWithSd                           sync.RWMutex
	lockPluralDeleteChatRoomActions                                     sync.RWMutex
	lockPluralDeleteChatRoomActionsWithSd                               sync.RWMutex
	lockPluralDeleteChatRoomAddMemberActions                            sync.RWMutex
	lockPluralDeleteChatRoomAddMemberActionsWithSd                      sync.RWMutex
	lockPluralDeleteChatRoomCreateActions                               sync.RWMutex
	lockPluralDeleteChatRoomCreateActionsWithSd                         sync.RWMutex
	lockPluralDeleteChatRoomDeleteMessageActions                        sync.RWMutex
	lockPluralDeleteChatRoomDeleteMessageActionsWithSd                  sync.RWMutex
	lockPluralDeleteChatRoomRemoveMemberActions                         sync.RWMutex
	lockPluralDeleteChatRoomRemoveMemberActionsWithSd                   sync.RWMutex
	lockPluralDeleteChatRoomUpdateNameActions                           sync.RWMutex
	lockPluralDeleteChatRoomUpdateNameActionsWithSd                     sync.RWMutex
	lockPluralDeleteChatRoomWithdrawActions                             sync.RWMutex
	lockPluralDeleteChatRoomWithdrawActionsWithSd                       sync.RWMutex
	lockPluralDeleteChatRooms                                           sync.RWMutex
	lockPluralDeleteChatRoomsWithSd                                     sync.RWMutex
	lockPluralDeleteEventTypes                                          sync.RWMutex
	lockPluralDeleteEventTypesWithSd                                    sync.RWMutex
	lockPluralDeleteFiles                                               sync.RWMutex
	lockPluralDeleteFilesWithSd                                         sync.RWMutex
	lockPluralDeleteGrades                                              sync.RWMutex
	lockPluralDeleteGradesWithSd                                        sync.RWMutex
	lockPluralDeleteGroups                                              sync.RWMutex
	lockPluralDeleteGroupsWithSd                                        sync.RWMutex
	lockPluralDeleteImages                                              sync.RWMutex
	lockPluralDeleteImagesWithSd                                        sync.RWMutex
	lockPluralDeleteMembers                                             sync.RWMutex
	lockPluralDeleteMembersWithSd                                       sync.RWMutex
	lockPluralDeleteMessages                                            sync.RWMutex
	lockPluralDeleteMessagesWithSd                                      sync.RWMutex
	lockPluralDeleteMimeTypes                                           sync.RWMutex
	lockPluralDeleteMimeTypesWithSd                                     sync.RWMutex
	lockPluralDeleteOrganizations                                       sync.RWMutex
	lockPluralDeleteOrganizationsWithSd                                 sync.RWMutex
	lockPluralDeletePermissionCategories                                sync.RWMutex
	lockPluralDeletePermissionCategoriesWithSd                          sync.RWMutex
	lockPluralDeletePermissions                                         sync.RWMutex
	lockPluralDeletePermissionsWithSd                                   sync.RWMutex
	lockPluralDeletePolicies                                            sync.RWMutex
	lockPluralDeletePoliciesWithSd                                      sync.RWMutex
	lockPluralDeletePolicyCategories                                    sync.RWMutex
	lockPluralDeletePolicyCategoriesWithSd                              sync.RWMutex
	lockPluralDeleteProfessors                                          sync.RWMutex
	lockPluralDeleteProfessorsWithSd                                    sync.RWMutex
	lockPluralDeleteRecordTypes                                         sync.RWMutex
	lockPluralDeleteRecordTypesWithSd                                   sync.RWMutex
	lockPluralDeleteRoles                                               sync.RWMutex
	lockPluralDeleteRolesWithSd                                         sync.RWMutex
	lockPluralDeleteStudents                                            sync.RWMutex
	lockPluralDeleteStudentsWithSd                                      sync.RWMutex
	lockPluralDetachItemsOnMessage                                      sync.RWMutex
	lockPluralDetachItemsOnMessageWithSd                                sync.RWMutex
	lockPluralDisassociatePolicyOnRole                                  sync.RWMutex
	lockPluralDisassociatePolicyOnRoleWithSd                            sync.RWMutex
	lockPluralDisassociateRoleOnPolicy                                  sync.RWMutex
	lockPluralDisassociateRoleOnPolicyWithSd                            sync.RWMutex
	lockReadReceipt                                                     sync.RWMutex
	lockReadReceiptWithSd                                               sync.RWMutex
	lockReadReceipts                                                    sync.RWMutex
	lockReadReceiptsOnChatRoomAndMember                                 sync.RWMutex
	lockReadReceiptsOnChatRoomAndMemberWithSd                           sync.RWMutex
	lockReadReceiptsOnMember                                            sync.RWMutex
	lockReadReceiptsOnMemberWithSd                                      sync.RWMutex
	lockReadReceiptsWithSd                                              sync.RWMutex
	lockRemoveMemberToChatRoomRemoveMemberAction                        sync.RWMutex
	lockRemoveMemberToChatRoomRemoveMemberActionWithSd                  sync.RWMutex
	lockRemoveMembersToChatRoomRemoveMemberAction                       sync.RWMutex
	lockRemoveMembersToChatRoomRemoveMemberActionWithSd                 sync.RWMutex
	lockRollback                                                        sync.RWMutex
	lockUpdateAttachableItem                                            sync.RWMutex
	lockUpdateAttachableItemWithSd                                      sync.RWMutex
	lockUpdateAttendStatus                                              sync.RWMutex
	lockUpdateAttendStatusByKey                                         sync.RWMutex
	lockUpdateAttendStatusByKeyWithSd                                   sync.RWMutex
	lockUpdateAttendStatusWithSd                                        sync.RWMutex
	lockUpdateAttendanceType                                            sync.RWMutex
	lockUpdateAttendanceTypeByKey                                       sync.RWMutex
	lockUpdateAttendanceTypeByKeyWithSd                                 sync.RWMutex
	lockUpdateAttendanceTypeWithSd                                      sync.RWMutex
	lockUpdateChatRoom                                                  sync.RWMutex
	lockUpdateChatRoomAction                                            sync.RWMutex
	lockUpdateChatRoomActionType                                        sync.RWMutex
	lockUpdateChatRoomActionTypeByKey                                   sync.RWMutex
	lockUpdateChatRoomActionTypeByKeyWithSd                             sync.RWMutex
	lockUpdateChatRoomActionTypeWithSd                                  sync.RWMutex
	lockUpdateChatRoomActionWithSd                                      sync.RWMutex
	lockUpdateChatRoomWithSd                                            sync.RWMutex
	lockUpdateEventType                                                 sync.RWMutex
	lockUpdateEventTypeByKey                                            sync.RWMutex
	lockUpdateEventTypeByKeyWithSd                                      sync.RWMutex
	lockUpdateEventTypeWithSd                                           sync.RWMutex
	lockUpdateMember                                                    sync.RWMutex
	lockUpdateMemberAttendStatus                                        sync.RWMutex
	lockUpdateMemberAttendStatusWithSd                                  sync.RWMutex
	lockUpdateMemberGrade                                               sync.RWMutex
	lockUpdateMemberGradeWithSd                                         sync.RWMutex
	lockUpdateMemberGroup                                               sync.RWMutex
	lockUpdateMemberGroupWithSd                                         sync.RWMutex
	lockUpdateMemberLoginID                                             sync.RWMutex
	lockUpdateMemberLoginIDWithSd                                       sync.RWMutex
	lockUpdateMemberPassword                                            sync.RWMutex
	lockUpdateMemberPasswordWithSd                                      sync.RWMutex
	lockUpdateMemberRole                                                sync.RWMutex
	lockUpdateMemberRoleWithSd                                          sync.RWMutex
	lockUpdateMemberWithSd                                              sync.RWMutex
	lockUpdateMessage                                                   sync.RWMutex
	lockUpdateMessageWithSd                                             sync.RWMutex
	lockUpdateMimeType                                                  sync.RWMutex
	lockUpdateMimeTypeByKey                                             sync.RWMutex
	lockUpdateMimeTypeByKeyWithSd                                       sync.RWMutex
	lockUpdateMimeTypeWithSd                                            sync.RWMutex
	lockUpdateOrganization                                              sync.RWMutex
	lockUpdateOrganizationWithSd                                        sync.RWMutex
	lockUpdatePermission                                                sync.RWMutex
	lockUpdatePermissionByKey                                           sync.RWMutex
	lockUpdatePermissionByKeyWithSd                                     sync.RWMutex
	lockUpdatePermissionCategory                                        sync.RWMutex
	lockUpdatePermissionCategoryByKey                                   sync.RWMutex
	lockUpdatePermissionCategoryByKeyWithSd                             sync.RWMutex
	lockUpdatePermissionCategoryWithSd                                  sync.RWMutex
	lockUpdatePermissionWithSd                                          sync.RWMutex
	lockUpdatePolicy                                                    sync.RWMutex
	lockUpdatePolicyByKey                                               sync.RWMutex
	lockUpdatePolicyByKeyWithSd                                         sync.RWMutex
	lockUpdatePolicyCategory                                            sync.RWMutex
	lockUpdatePolicyCategoryByKey                                       sync.RWMutex
	lockUpdatePolicyCategoryByKeyWithSd                                 sync.RWMutex
	lockUpdatePolicyCategoryWithSd                                      sync.RWMutex
	lockUpdatePolicyWithSd                                              sync.RWMutex
	lockUpdateRecordType                                                sync.RWMutex
	lockUpdateRecordTypeByKey                                           sync.RWMutex
	lockUpdateRecordTypeByKeyWithSd                                     sync.RWMutex
	lockUpdateRecordTypeWithSd                                          sync.RWMutex
	lockUpdateRole                                                      sync.RWMutex
	lockUpdateRoleWithSd                                                sync.RWMutex
}

// AddMemberToChatRoomAddMemberAction calls AddMemberToChatRoomAddMemberActionFunc.
func (mock *StoreMock) AddMemberToChatRoomAddMemberAction(ctx context.Context, param parameter.CreateChatRoomAddedMemberParam) (entity.ChatRoomAddedMember, error) {
	if mock.AddMemberToChatRoomAddMemberActionFunc == nil {
		panic("StoreMock.AddMemberToChatRoomAddMemberActionFunc: method is nil but Store.AddMemberToChatRoomAddMemberAction was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Param parameter.CreateChatRoomAddedMemberParam
	}{
		Ctx:   ctx,
		Param: param,
	}
	mock.lockAddMemberToChatRoomAddMemberAction.Lock()
	mock.calls.AddMemberToChatRoomAddMemberAction = append(mock.calls.AddMemberToChatRoomAddMemberAction, callInfo)
	mock.lockAddMemberToChatRoomAddMemberAction.Unlock()
	return mock.AddMemberToChatRoomAddMemberActionFunc(ctx, param)
}

// AddMemberToChatRoomAddMemberActionCalls gets all the calls that were made to AddMemberToChatRoomAddMemberAction.
// Check the length with:
//
//	len(mockedStore.AddMemberToChatRoomAddMemberActionCalls())
func (mock *StoreMock) AddMemberToChatRoomAddMemberActionCalls() []struct {
	Ctx   context.Context
	Param parameter.CreateChatRoomAddedMemberParam
} {
	var calls []struct {
		Ctx   context.Context
		Param parameter.CreateChatRoomAddedMemberParam
	}
	mock.lockAddMemberToChatRoomAddMemberAction.RLock()
	calls = mock.calls.AddMemberToChatRoomAddMemberAction
	mock.lockAddMemberToChatRoomAddMemberAction.RUnlock()
	return calls
}

// AddMemberToChatRoomAddMemberActionWithSd calls AddMemberToChatRoomAddMemberActionWithSdFunc.
func (mock *StoreMock) AddMemberToChatRoomAddMemberActionWithSd(ctx context.Context, sd Sd, param parameter.CreateChatRoomAddedMemberParam) (entity.ChatRoomAddedMember, error) {
	if mock.AddMemberToChatRoomAddMemberActionWithSdFunc == nil {
		panic("StoreMock.AddMemberToChatRoomAddMemberActionWithSdFunc: method is nil but Store.AddMemberToChatRoomAddMemberActionWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateChatRoomAddedMemberParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Param: param,
	}
	mock.lockAddMemberToChatRoomAddMemberActionWithSd.Lock()
	mock.calls.AddMemberToChatRoomAddMemberActionWithSd = append(mock.calls.AddMemberToChatRoomAddMemberActionWithSd, callInfo)
	mock.lockAddMemberToChatRoomAddMemberActionWithSd.Unlock()
	return mock.AddMemberToChatRoomAddMemberActionWithSdFunc(ctx, sd, param)
}

// AddMemberToChatRoomAddMemberActionWithSdCalls gets all the calls that were made to AddMemberToChatRoomAddMemberActionWithSd.
// Check the length with:
//
//	len(mockedStore.AddMemberToChatRoomAddMemberActionWithSdCalls())
func (mock *StoreMock) AddMemberToChatRoomAddMemberActionWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Param parameter.CreateChatRoomAddedMemberParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateChatRoomAddedMemberParam
	}
	mock.lockAddMemberToChatRoomAddMemberActionWithSd.RLock()
	calls = mock.calls.AddMemberToChatRoomAddMemberActionWithSd
	mock.lockAddMemberToChatRoomAddMemberActionWithSd.RUnlock()
	return calls
}

// AddMembersToChatRoomAddMemberAction calls AddMembersToChatRoomAddMemberActionFunc.
func (mock *StoreMock) AddMembersToChatRoomAddMemberAction(ctx context.Context, params []parameter.CreateChatRoomAddedMemberParam) (int64, error) {
	if mock.AddMembersToChatRoomAddMemberActionFunc == nil {
		panic("StoreMock.AddMembersToChatRoomAddMemberActionFunc: method is nil but Store.AddMembersToChatRoomAddMemberAction was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params []parameter.CreateChatRoomAddedMemberParam
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockAddMembersToChatRoomAddMemberAction.Lock()
	mock.calls.AddMembersToChatRoomAddMemberAction = append(mock.calls.AddMembersToChatRoomAddMemberAction, callInfo)
	mock.lockAddMembersToChatRoomAddMemberAction.Unlock()
	return mock.AddMembersToChatRoomAddMemberActionFunc(ctx, params)
}

// AddMembersToChatRoomAddMemberActionCalls gets all the calls that were made to AddMembersToChatRoomAddMemberAction.
// Check the length with:
//
//	len(mockedStore.AddMembersToChatRoomAddMemberActionCalls())
func (mock *StoreMock) AddMembersToChatRoomAddMemberActionCalls() []struct {
	Ctx    context.Context
	Params []parameter.CreateChatRoomAddedMemberParam
} {
	var calls []struct {
		Ctx    context.Context
		Params []parameter.CreateChatRoomAddedMemberParam
	}
	mock.lockAddMembersToChatRoomAddMemberAction.RLock()
	calls = mock.calls.AddMembersToChatRoomAddMemberAction
	mock.lockAddMembersToChatRoomAddMemberAction.RUnlock()
	return calls
}

// AddMembersToChatRoomAddMemberActionWithSd calls AddMembersToChatRoomAddMemberActionWithSdFunc.
func (mock *StoreMock) AddMembersToChatRoomAddMemberActionWithSd(ctx context.Context, sd Sd, params []parameter.CreateChatRoomAddedMemberParam) (int64, error) {
	if mock.AddMembersToChatRoomAddMemberActionWithSdFunc == nil {
		panic("StoreMock.AddMembersToChatRoomAddMemberActionWithSdFunc: method is nil but Store.AddMembersToChatRoomAddMemberActionWithSd was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateChatRoomAddedMemberParam
	}{
		Ctx:    ctx,
		Sd:     sd,
		Params: params,
	}
	mock.lockAddMembersToChatRoomAddMemberActionWithSd.Lock()
	mock.calls.AddMembersToChatRoomAddMemberActionWithSd = append(mock.calls.AddMembersToChatRoomAddMemberActionWithSd, callInfo)
	mock.lockAddMembersToChatRoomAddMemberActionWithSd.Unlock()
	return mock.AddMembersToChatRoomAddMemberActionWithSdFunc(ctx, sd, params)
}

// AddMembersToChatRoomAddMemberActionWithSdCalls gets all the calls that were made to AddMembersToChatRoomAddMemberActionWithSd.
// Check the length with:
//
//	len(mockedStore.AddMembersToChatRoomAddMemberActionWithSdCalls())
func (mock *StoreMock) AddMembersToChatRoomAddMemberActionWithSdCalls() []struct {
	Ctx    context.Context
	Sd     Sd
	Params []parameter.CreateChatRoomAddedMemberParam
} {
	var calls []struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateChatRoomAddedMemberParam
	}
	mock.lockAddMembersToChatRoomAddMemberActionWithSd.RLock()
	calls = mock.calls.AddMembersToChatRoomAddMemberActionWithSd
	mock.lockAddMembersToChatRoomAddMemberActionWithSd.RUnlock()
	return calls
}

// AssociateRole calls AssociateRoleFunc.
func (mock *StoreMock) AssociateRole(ctx context.Context, param parameter.AssociationRoleParam) (entity.RoleAssociation, error) {
	if mock.AssociateRoleFunc == nil {
		panic("StoreMock.AssociateRoleFunc: method is nil but Store.AssociateRole was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Param parameter.AssociationRoleParam
	}{
		Ctx:   ctx,
		Param: param,
	}
	mock.lockAssociateRole.Lock()
	mock.calls.AssociateRole = append(mock.calls.AssociateRole, callInfo)
	mock.lockAssociateRole.Unlock()
	return mock.AssociateRoleFunc(ctx, param)
}

// AssociateRoleCalls gets all the calls that were made to AssociateRole.
// Check the length with:
//
//	len(mockedStore.AssociateRoleCalls())
func (mock *StoreMock) AssociateRoleCalls() []struct {
	Ctx   context.Context
	Param parameter.AssociationRoleParam
} {
	var calls []struct {
		Ctx   context.Context
		Param parameter.AssociationRoleParam
	}
	mock.lockAssociateRole.RLock()
	calls = mock.calls.AssociateRole
	mock.lockAssociateRole.RUnlock()
	return calls
}

// AssociateRoleWithSd calls AssociateRoleWithSdFunc.
func (mock *StoreMock) AssociateRoleWithSd(ctx context.Context, sd Sd, param parameter.AssociationRoleParam) (entity.RoleAssociation, error) {
	if mock.AssociateRoleWithSdFunc == nil {
		panic("StoreMock.AssociateRoleWithSdFunc: method is nil but Store.AssociateRoleWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.AssociationRoleParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Param: param,
	}
	mock.lockAssociateRoleWithSd.Lock()
	mock.calls.AssociateRoleWithSd = append(mock.calls.AssociateRoleWithSd, callInfo)
	mock.lockAssociateRoleWithSd.Unlock()
	return mock.AssociateRoleWithSdFunc(ctx, sd, param)
}

// AssociateRoleWithSdCalls gets all the calls that were made to AssociateRoleWithSd.
// Check the length with:
//
//	len(mockedStore.AssociateRoleWithSdCalls())
func (mock *StoreMock) AssociateRoleWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Param parameter.AssociationRoleParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.AssociationRoleParam
	}
	mock.lockAssociateRoleWithSd.RLock()
	calls = mock.calls.AssociateRoleWithSd
	mock.lockAssociateRoleWithSd.RUnlock()
	return calls
}

// AssociateRoles calls AssociateRolesFunc.
func (mock *StoreMock) AssociateRoles(ctx context.Context, params []parameter.AssociationRoleParam) (int64, error) {
	if mock.AssociateRolesFunc == nil {
		panic("StoreMock.AssociateRolesFunc: method is nil but Store.AssociateRoles was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params []parameter.AssociationRoleParam
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockAssociateRoles.Lock()
	mock.calls.AssociateRoles = append(mock.calls.AssociateRoles, callInfo)
	mock.lockAssociateRoles.Unlock()
	return mock.AssociateRolesFunc(ctx, params)
}

// AssociateRolesCalls gets all the calls that were made to AssociateRoles.
// Check the length with:
//
//	len(mockedStore.AssociateRolesCalls())
func (mock *StoreMock) AssociateRolesCalls() []struct {
	Ctx    context.Context
	Params []parameter.AssociationRoleParam
} {
	var calls []struct {
		Ctx    context.Context
		Params []parameter.AssociationRoleParam
	}
	mock.lockAssociateRoles.RLock()
	calls = mock.calls.AssociateRoles
	mock.lockAssociateRoles.RUnlock()
	return calls
}

// AssociateRolesWithSd calls AssociateRolesWithSdFunc.
func (mock *StoreMock) AssociateRolesWithSd(ctx context.Context, sd Sd, params []parameter.AssociationRoleParam) (int64, error) {
	if mock.AssociateRolesWithSdFunc == nil {
		panic("StoreMock.AssociateRolesWithSdFunc: method is nil but Store.AssociateRolesWithSd was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.AssociationRoleParam
	}{
		Ctx:    ctx,
		Sd:     sd,
		Params: params,
	}
	mock.lockAssociateRolesWithSd.Lock()
	mock.calls.AssociateRolesWithSd = append(mock.calls.AssociateRolesWithSd, callInfo)
	mock.lockAssociateRolesWithSd.Unlock()
	return mock.AssociateRolesWithSdFunc(ctx, sd, params)
}

// AssociateRolesWithSdCalls gets all the calls that were made to AssociateRolesWithSd.
// Check the length with:
//
//	len(mockedStore.AssociateRolesWithSdCalls())
func (mock *StoreMock) AssociateRolesWithSdCalls() []struct {
	Ctx    context.Context
	Sd     Sd
	Params []parameter.AssociationRoleParam
} {
	var calls []struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.AssociationRoleParam
	}
	mock.lockAssociateRolesWithSd.RLock()
	calls = mock.calls.AssociateRolesWithSd
	mock.lockAssociateRolesWithSd.RUnlock()
	return calls
}

// AttacheItemOnMessage calls AttacheItemOnMessageFunc.
func (mock *StoreMock) AttacheItemOnMessage(ctx context.Context, param parameter.AttachItemMessageParam) (entity.AttachedMessage, error) {
	if mock.AttacheItemOnMessageFunc == nil {
		panic("StoreMock.AttacheItemOnMessageFunc: method is nil but Store.AttacheItemOnMessage was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Param parameter.AttachItemMessageParam
	}{
		Ctx:   ctx,
		Param: param,
	}
	mock.lockAttacheItemOnMessage.Lock()
	mock.calls.AttacheItemOnMessage = append(mock.calls.AttacheItemOnMessage, callInfo)
	mock.lockAttacheItemOnMessage.Unlock()
	return mock.AttacheItemOnMessageFunc(ctx, param)
}

// AttacheItemOnMessageCalls gets all the calls that were made to AttacheItemOnMessage.
// Check the length with:
//
//	len(mockedStore.AttacheItemOnMessageCalls())
func (mock *StoreMock) AttacheItemOnMessageCalls() []struct {
	Ctx   context.Context
	Param parameter.AttachItemMessageParam
} {
	var calls []struct {
		Ctx   context.Context
		Param parameter.AttachItemMessageParam
	}
	mock.lockAttacheItemOnMessage.RLock()
	calls = mock.calls.AttacheItemOnMessage
	mock.lockAttacheItemOnMessage.RUnlock()
	return calls
}

// AttacheItemOnMessageWithSd calls AttacheItemOnMessageWithSdFunc.
func (mock *StoreMock) AttacheItemOnMessageWithSd(ctx context.Context, sd Sd, param parameter.AttachItemMessageParam) (entity.AttachedMessage, error) {
	if mock.AttacheItemOnMessageWithSdFunc == nil {
		panic("StoreMock.AttacheItemOnMessageWithSdFunc: method is nil but Store.AttacheItemOnMessageWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.AttachItemMessageParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Param: param,
	}
	mock.lockAttacheItemOnMessageWithSd.Lock()
	mock.calls.AttacheItemOnMessageWithSd = append(mock.calls.AttacheItemOnMessageWithSd, callInfo)
	mock.lockAttacheItemOnMessageWithSd.Unlock()
	return mock.AttacheItemOnMessageWithSdFunc(ctx, sd, param)
}

// AttacheItemOnMessageWithSdCalls gets all the calls that were made to AttacheItemOnMessageWithSd.
// Check the length with:
//
//	len(mockedStore.AttacheItemOnMessageWithSdCalls())
func (mock *StoreMock) AttacheItemOnMessageWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Param parameter.AttachItemMessageParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.AttachItemMessageParam
	}
	mock.lockAttacheItemOnMessageWithSd.RLock()
	calls = mock.calls.AttacheItemOnMessageWithSd
	mock.lockAttacheItemOnMessageWithSd.RUnlock()
	return calls
}

// AttacheItemsOnMessages calls AttacheItemsOnMessagesFunc.
func (mock *StoreMock) AttacheItemsOnMessages(ctx context.Context, params []parameter.AttachItemMessageParam) (int64, error) {
	if mock.AttacheItemsOnMessagesFunc == nil {
		panic("StoreMock.AttacheItemsOnMessagesFunc: method is nil but Store.AttacheItemsOnMessages was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params []parameter.AttachItemMessageParam
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockAttacheItemsOnMessages.Lock()
	mock.calls.AttacheItemsOnMessages = append(mock.calls.AttacheItemsOnMessages, callInfo)
	mock.lockAttacheItemsOnMessages.Unlock()
	return mock.AttacheItemsOnMessagesFunc(ctx, params)
}

// AttacheItemsOnMessagesCalls gets all the calls that were made to AttacheItemsOnMessages.
// Check the length with:
//
//	len(mockedStore.AttacheItemsOnMessagesCalls())
func (mock *StoreMock) AttacheItemsOnMessagesCalls() []struct {
	Ctx    context.Context
	Params []parameter.AttachItemMessageParam
} {
	var calls []struct {
		Ctx    context.Context
		Params []parameter.AttachItemMessageParam
	}
	mock.lockAttacheItemsOnMessages.RLock()
	calls = mock.calls.AttacheItemsOnMessages
	mock.lockAttacheItemsOnMessages.RUnlock()
	return calls
}

// AttacheItemsOnMessagesWithSd calls AttacheItemsOnMessagesWithSdFunc.
func (mock *StoreMock) AttacheItemsOnMessagesWithSd(ctx context.Context, sd Sd, params []parameter.AttachItemMessageParam) (int64, error) {
	if mock.AttacheItemsOnMessagesWithSdFunc == nil {
		panic("StoreMock.AttacheItemsOnMessagesWithSdFunc: method is nil but Store.AttacheItemsOnMessagesWithSd was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.AttachItemMessageParam
	}{
		Ctx:    ctx,
		Sd:     sd,
		Params: params,
	}
	mock.lockAttacheItemsOnMessagesWithSd.Lock()
	mock.calls.AttacheItemsOnMessagesWithSd = append(mock.calls.AttacheItemsOnMessagesWithSd, callInfo)
	mock.lockAttacheItemsOnMessagesWithSd.Unlock()
	return mock.AttacheItemsOnMessagesWithSdFunc(ctx, sd, params)
}

// AttacheItemsOnMessagesWithSdCalls gets all the calls that were made to AttacheItemsOnMessagesWithSd.
// Check the length with:
//
//	len(mockedStore.AttacheItemsOnMessagesWithSdCalls())
func (mock *StoreMock) AttacheItemsOnMessagesWithSdCalls() []struct {
	Ctx    context.Context
	Sd     Sd
	Params []parameter.AttachItemMessageParam
} {
	var calls []struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.AttachItemMessageParam
	}
	mock.lockAttacheItemsOnMessagesWithSd.RLock()
	calls = mock.calls.AttacheItemsOnMessagesWithSd
	mock.lockAttacheItemsOnMessagesWithSd.RUnlock()
	return calls
}

// Begin calls BeginFunc.
func (mock *StoreMock) Begin(contextMoqParam context.Context) (Sd, error) {
	if mock.BeginFunc == nil {
		panic("StoreMock.BeginFunc: method is nil but Store.Begin was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
	}{
		ContextMoqParam: contextMoqParam,
	}
	mock.lockBegin.Lock()
	mock.calls.Begin = append(mock.calls.Begin, callInfo)
	mock.lockBegin.Unlock()
	return mock.BeginFunc(contextMoqParam)
}

// BeginCalls gets all the calls that were made to Begin.
// Check the length with:
//
//	len(mockedStore.BeginCalls())
func (mock *StoreMock) BeginCalls() []struct {
	ContextMoqParam context.Context
} {
	var calls []struct {
		ContextMoqParam context.Context
	}
	mock.lockBegin.RLock()
	calls = mock.calls.Begin
	mock.lockBegin.RUnlock()
	return calls
}

// BelongChatRoom calls BelongChatRoomFunc.
func (mock *StoreMock) BelongChatRoom(ctx context.Context, param parameter.BelongChatRoomParam) (entity.ChatRoomBelonging, error) {
	if mock.BelongChatRoomFunc == nil {
		panic("StoreMock.BelongChatRoomFunc: method is nil but Store.BelongChatRoom was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Param parameter.BelongChatRoomParam
	}{
		Ctx:   ctx,
		Param: param,
	}
	mock.lockBelongChatRoom.Lock()
	mock.calls.BelongChatRoom = append(mock.calls.BelongChatRoom, callInfo)
	mock.lockBelongChatRoom.Unlock()
	return mock.BelongChatRoomFunc(ctx, param)
}

// BelongChatRoomCalls gets all the calls that were made to BelongChatRoom.
// Check the length with:
//
//	len(mockedStore.BelongChatRoomCalls())
func (mock *StoreMock) BelongChatRoomCalls() []struct {
	Ctx   context.Context
	Param parameter.BelongChatRoomParam
} {
	var calls []struct {
		Ctx   context.Context
		Param parameter.BelongChatRoomParam
	}
	mock.lockBelongChatRoom.RLock()
	calls = mock.calls.BelongChatRoom
	mock.lockBelongChatRoom.RUnlock()
	return calls
}

// BelongChatRoomWithSd calls BelongChatRoomWithSdFunc.
func (mock *StoreMock) BelongChatRoomWithSd(ctx context.Context, sd Sd, param parameter.BelongChatRoomParam) (entity.ChatRoomBelonging, error) {
	if mock.BelongChatRoomWithSdFunc == nil {
		panic("StoreMock.BelongChatRoomWithSdFunc: method is nil but Store.BelongChatRoomWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.BelongChatRoomParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Param: param,
	}
	mock.lockBelongChatRoomWithSd.Lock()
	mock.calls.BelongChatRoomWithSd = append(mock.calls.BelongChatRoomWithSd, callInfo)
	mock.lockBelongChatRoomWithSd.Unlock()
	return mock.BelongChatRoomWithSdFunc(ctx, sd, param)
}

// BelongChatRoomWithSdCalls gets all the calls that were made to BelongChatRoomWithSd.
// Check the length with:
//
//	len(mockedStore.BelongChatRoomWithSdCalls())
func (mock *StoreMock) BelongChatRoomWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Param parameter.BelongChatRoomParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.BelongChatRoomParam
	}
	mock.lockBelongChatRoomWithSd.RLock()
	calls = mock.calls.BelongChatRoomWithSd
	mock.lockBelongChatRoomWithSd.RUnlock()
	return calls
}

// BelongChatRooms calls BelongChatRoomsFunc.
func (mock *StoreMock) BelongChatRooms(ctx context.Context, params []parameter.BelongChatRoomParam) (int64, error) {
	if mock.BelongChatRoomsFunc == nil {
		panic("StoreMock.BelongChatRoomsFunc: method is nil but Store.BelongChatRooms was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params []parameter.BelongChatRoomParam
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockBelongChatRooms.Lock()
	mock.calls.BelongChatRooms = append(mock.calls.BelongChatRooms, callInfo)
	mock.lockBelongChatRooms.Unlock()
	return mock.BelongChatRoomsFunc(ctx, params)
}

// BelongChatRoomsCalls gets all the calls that were made to BelongChatRooms.
// Check the length with:
//
//	len(mockedStore.BelongChatRoomsCalls())
func (mock *StoreMock) BelongChatRoomsCalls() []struct {
	Ctx    context.Context
	Params []parameter.BelongChatRoomParam
} {
	var calls []struct {
		Ctx    context.Context
		Params []parameter.BelongChatRoomParam
	}
	mock.lockBelongChatRooms.RLock()
	calls = mock.calls.BelongChatRooms
	mock.lockBelongChatRooms.RUnlock()
	return calls
}

// BelongChatRoomsWithSd calls BelongChatRoomsWithSdFunc.
func (mock *StoreMock) BelongChatRoomsWithSd(ctx context.Context, sd Sd, params []parameter.BelongChatRoomParam) (int64, error) {
	if mock.BelongChatRoomsWithSdFunc == nil {
		panic("StoreMock.BelongChatRoomsWithSdFunc: method is nil but Store.BelongChatRoomsWithSd was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.BelongChatRoomParam
	}{
		Ctx:    ctx,
		Sd:     sd,
		Params: params,
	}
	mock.lockBelongChatRoomsWithSd.Lock()
	mock.calls.BelongChatRoomsWithSd = append(mock.calls.BelongChatRoomsWithSd, callInfo)
	mock.lockBelongChatRoomsWithSd.Unlock()
	return mock.BelongChatRoomsWithSdFunc(ctx, sd, params)
}

// BelongChatRoomsWithSdCalls gets all the calls that were made to BelongChatRoomsWithSd.
// Check the length with:
//
//	len(mockedStore.BelongChatRoomsWithSdCalls())
func (mock *StoreMock) BelongChatRoomsWithSdCalls() []struct {
	Ctx    context.Context
	Sd     Sd
	Params []parameter.BelongChatRoomParam
} {
	var calls []struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.BelongChatRoomParam
	}
	mock.lockBelongChatRoomsWithSd.RLock()
	calls = mock.calls.BelongChatRoomsWithSd
	mock.lockBelongChatRoomsWithSd.RUnlock()
	return calls
}

// BelongOrganization calls BelongOrganizationFunc.
func (mock *StoreMock) BelongOrganization(ctx context.Context, param parameter.BelongOrganizationParam) (entity.Membership, error) {
	if mock.BelongOrganizationFunc == nil {
		panic("StoreMock.BelongOrganizationFunc: method is nil but Store.BelongOrganization was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Param parameter.BelongOrganizationParam
	}{
		Ctx:   ctx,
		Param: param,
	}
	mock.lockBelongOrganization.Lock()
	mock.calls.BelongOrganization = append(mock.calls.BelongOrganization, callInfo)
	mock.lockBelongOrganization.Unlock()
	return mock.BelongOrganizationFunc(ctx, param)
}

// BelongOrganizationCalls gets all the calls that were made to BelongOrganization.
// Check the length with:
//
//	len(mockedStore.BelongOrganizationCalls())
func (mock *StoreMock) BelongOrganizationCalls() []struct {
	Ctx   context.Context
	Param parameter.BelongOrganizationParam
} {
	var calls []struct {
		Ctx   context.Context
		Param parameter.BelongOrganizationParam
	}
	mock.lockBelongOrganization.RLock()
	calls = mock.calls.BelongOrganization
	mock.lockBelongOrganization.RUnlock()
	return calls
}

// BelongOrganizationWithSd calls BelongOrganizationWithSdFunc.
func (mock *StoreMock) BelongOrganizationWithSd(ctx context.Context, sd Sd, param parameter.BelongOrganizationParam) (entity.Membership, error) {
	if mock.BelongOrganizationWithSdFunc == nil {
		panic("StoreMock.BelongOrganizationWithSdFunc: method is nil but Store.BelongOrganizationWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.BelongOrganizationParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Param: param,
	}
	mock.lockBelongOrganizationWithSd.Lock()
	mock.calls.BelongOrganizationWithSd = append(mock.calls.BelongOrganizationWithSd, callInfo)
	mock.lockBelongOrganizationWithSd.Unlock()
	return mock.BelongOrganizationWithSdFunc(ctx, sd, param)
}

// BelongOrganizationWithSdCalls gets all the calls that were made to BelongOrganizationWithSd.
// Check the length with:
//
//	len(mockedStore.BelongOrganizationWithSdCalls())
func (mock *StoreMock) BelongOrganizationWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Param parameter.BelongOrganizationParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.BelongOrganizationParam
	}
	mock.lockBelongOrganizationWithSd.RLock()
	calls = mock.calls.BelongOrganizationWithSd
	mock.lockBelongOrganizationWithSd.RUnlock()
	return calls
}

// BelongOrganizations calls BelongOrganizationsFunc.
func (mock *StoreMock) BelongOrganizations(ctx context.Context, params []parameter.BelongOrganizationParam) (int64, error) {
	if mock.BelongOrganizationsFunc == nil {
		panic("StoreMock.BelongOrganizationsFunc: method is nil but Store.BelongOrganizations was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params []parameter.BelongOrganizationParam
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockBelongOrganizations.Lock()
	mock.calls.BelongOrganizations = append(mock.calls.BelongOrganizations, callInfo)
	mock.lockBelongOrganizations.Unlock()
	return mock.BelongOrganizationsFunc(ctx, params)
}

// BelongOrganizationsCalls gets all the calls that were made to BelongOrganizations.
// Check the length with:
//
//	len(mockedStore.BelongOrganizationsCalls())
func (mock *StoreMock) BelongOrganizationsCalls() []struct {
	Ctx    context.Context
	Params []parameter.BelongOrganizationParam
} {
	var calls []struct {
		Ctx    context.Context
		Params []parameter.BelongOrganizationParam
	}
	mock.lockBelongOrganizations.RLock()
	calls = mock.calls.BelongOrganizations
	mock.lockBelongOrganizations.RUnlock()
	return calls
}

// BelongOrganizationsWithSd calls BelongOrganizationsWithSdFunc.
func (mock *StoreMock) BelongOrganizationsWithSd(ctx context.Context, sd Sd, params []parameter.BelongOrganizationParam) (int64, error) {
	if mock.BelongOrganizationsWithSdFunc == nil {
		panic("StoreMock.BelongOrganizationsWithSdFunc: method is nil but Store.BelongOrganizationsWithSd was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.BelongOrganizationParam
	}{
		Ctx:    ctx,
		Sd:     sd,
		Params: params,
	}
	mock.lockBelongOrganizationsWithSd.Lock()
	mock.calls.BelongOrganizationsWithSd = append(mock.calls.BelongOrganizationsWithSd, callInfo)
	mock.lockBelongOrganizationsWithSd.Unlock()
	return mock.BelongOrganizationsWithSdFunc(ctx, sd, params)
}

// BelongOrganizationsWithSdCalls gets all the calls that were made to BelongOrganizationsWithSd.
// Check the length with:
//
//	len(mockedStore.BelongOrganizationsWithSdCalls())
func (mock *StoreMock) BelongOrganizationsWithSdCalls() []struct {
	Ctx    context.Context
	Sd     Sd
	Params []parameter.BelongOrganizationParam
} {
	var calls []struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.BelongOrganizationParam
	}
	mock.lockBelongOrganizationsWithSd.RLock()
	calls = mock.calls.BelongOrganizationsWithSd
	mock.lockBelongOrganizationsWithSd.RUnlock()
	return calls
}

// Cleanup calls CleanupFunc.
func (mock *StoreMock) Cleanup(contextMoqParam context.Context) error {
	if mock.CleanupFunc == nil {
		panic("StoreMock.CleanupFunc: method is nil but Store.Cleanup was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
	}{
		ContextMoqParam: contextMoqParam,
	}
	mock.lockCleanup.Lock()
	mock.calls.Cleanup = append(mock.calls.Cleanup, callInfo)
	mock.lockCleanup.Unlock()
	return mock.CleanupFunc(contextMoqParam)
}

// CleanupCalls gets all the calls that were made to Cleanup.
// Check the length with:
//
//	len(mockedStore.CleanupCalls())
func (mock *StoreMock) CleanupCalls() []struct {
	ContextMoqParam context.Context
} {
	var calls []struct {
		ContextMoqParam context.Context
	}
	mock.lockCleanup.RLock()
	calls = mock.calls.Cleanup
	mock.lockCleanup.RUnlock()
	return calls
}

// Commit calls CommitFunc.
func (mock *StoreMock) Commit(contextMoqParam context.Context, sd Sd) error {
	if mock.CommitFunc == nil {
		panic("StoreMock.CommitFunc: method is nil but Store.Commit was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		Sd              Sd
	}{
		ContextMoqParam: contextMoqParam,
		Sd:              sd,
	}
	mock.lockCommit.Lock()
	mock.calls.Commit = append(mock.calls.Commit, callInfo)
	mock.lockCommit.Unlock()
	return mock.CommitFunc(contextMoqParam, sd)
}

// CommitCalls gets all the calls that were made to Commit.
// Check the length with:
//
//	len(mockedStore.CommitCalls())
func (mock *StoreMock) CommitCalls() []struct {
	ContextMoqParam context.Context
	Sd              Sd
} {
	var calls []struct {
		ContextMoqParam context.Context
		Sd              Sd
	}
	mock.lockCommit.RLock()
	calls = mock.calls.Commit
	mock.lockCommit.RUnlock()
	return calls
}

// CountAbsences calls CountAbsencesFunc.
func (mock *StoreMock) CountAbsences(ctx context.Context) (int64, error) {
	if mock.CountAbsencesFunc == nil {
		panic("StoreMock.CountAbsencesFunc: method is nil but Store.CountAbsences was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockCountAbsences.Lock()
	mock.calls.CountAbsences = append(mock.calls.CountAbsences, callInfo)
	mock.lockCountAbsences.Unlock()
	return mock.CountAbsencesFunc(ctx)
}

// CountAbsencesCalls gets all the calls that were made to CountAbsences.
// Check the length with:
//
//	len(mockedStore.CountAbsencesCalls())
func (mock *StoreMock) CountAbsencesCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockCountAbsences.RLock()
	calls = mock.calls.CountAbsences
	mock.lockCountAbsences.RUnlock()
	return calls
}

// CountAbsencesWithSd calls CountAbsencesWithSdFunc.
func (mock *StoreMock) CountAbsencesWithSd(ctx context.Context, sd Sd) (int64, error) {
	if mock.CountAbsencesWithSdFunc == nil {
		panic("StoreMock.CountAbsencesWithSdFunc: method is nil but Store.CountAbsencesWithSd was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Sd  Sd
	}{
		Ctx: ctx,
		Sd:  sd,
	}
	mock.lockCountAbsencesWithSd.Lock()
	mock.calls.CountAbsencesWithSd = append(mock.calls.CountAbsencesWithSd, callInfo)
	mock.lockCountAbsencesWithSd.Unlock()
	return mock.CountAbsencesWithSdFunc(ctx, sd)
}

// CountAbsencesWithSdCalls gets all the calls that were made to CountAbsencesWithSd.
// Check the length with:
//
//	len(mockedStore.CountAbsencesWithSdCalls())
func (mock *StoreMock) CountAbsencesWithSdCalls() []struct {
	Ctx context.Context
	Sd  Sd
} {
	var calls []struct {
		Ctx context.Context
		Sd  Sd
	}
	mock.lockCountAbsencesWithSd.RLock()
	calls = mock.calls.CountAbsencesWithSd
	mock.lockCountAbsencesWithSd.RUnlock()
	return calls
}

// CountAttachableItems calls CountAttachableItemsFunc.
func (mock *StoreMock) CountAttachableItems(ctx context.Context, where parameter.WhereAttachableItemParam) (int64, error) {
	if mock.CountAttachableItemsFunc == nil {
		panic("StoreMock.CountAttachableItemsFunc: method is nil but Store.CountAttachableItems was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereAttachableItemParam
	}{
		Ctx:   ctx,
		Where: where,
	}
	mock.lockCountAttachableItems.Lock()
	mock.calls.CountAttachableItems = append(mock.calls.CountAttachableItems, callInfo)
	mock.lockCountAttachableItems.Unlock()
	return mock.CountAttachableItemsFunc(ctx, where)
}

// CountAttachableItemsCalls gets all the calls that were made to CountAttachableItems.
// Check the length with:
//
//	len(mockedStore.CountAttachableItemsCalls())
func (mock *StoreMock) CountAttachableItemsCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereAttachableItemParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereAttachableItemParam
	}
	mock.lockCountAttachableItems.RLock()
	calls = mock.calls.CountAttachableItems
	mock.lockCountAttachableItems.RUnlock()
	return calls
}

// CountAttachableItemsWithSd calls CountAttachableItemsWithSdFunc.
func (mock *StoreMock) CountAttachableItemsWithSd(ctx context.Context, sd Sd, where parameter.WhereAttachableItemParam) (int64, error) {
	if mock.CountAttachableItemsWithSdFunc == nil {
		panic("StoreMock.CountAttachableItemsWithSdFunc: method is nil but Store.CountAttachableItemsWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereAttachableItemParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
	}
	mock.lockCountAttachableItemsWithSd.Lock()
	mock.calls.CountAttachableItemsWithSd = append(mock.calls.CountAttachableItemsWithSd, callInfo)
	mock.lockCountAttachableItemsWithSd.Unlock()
	return mock.CountAttachableItemsWithSdFunc(ctx, sd, where)
}

// CountAttachableItemsWithSdCalls gets all the calls that were made to CountAttachableItemsWithSd.
// Check the length with:
//
//	len(mockedStore.CountAttachableItemsWithSdCalls())
func (mock *StoreMock) CountAttachableItemsWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereAttachableItemParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereAttachableItemParam
	}
	mock.lockCountAttachableItemsWithSd.RLock()
	calls = mock.calls.CountAttachableItemsWithSd
	mock.lockCountAttachableItemsWithSd.RUnlock()
	return calls
}

// CountAttachedItemsOnChatRoom calls CountAttachedItemsOnChatRoomFunc.
func (mock *StoreMock) CountAttachedItemsOnChatRoom(ctx context.Context, chatRoomID uuid.UUID, where parameter.WhereAttachedItemOnChatRoomParam) (int64, error) {
	if mock.CountAttachedItemsOnChatRoomFunc == nil {
		panic("StoreMock.CountAttachedItemsOnChatRoomFunc: method is nil but Store.CountAttachedItemsOnChatRoom was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ChatRoomID uuid.UUID
		Where      parameter.WhereAttachedItemOnChatRoomParam
	}{
		Ctx:        ctx,
		ChatRoomID: chatRoomID,
		Where:      where,
	}
	mock.lockCountAttachedItemsOnChatRoom.Lock()
	mock.calls.CountAttachedItemsOnChatRoom = append(mock.calls.CountAttachedItemsOnChatRoom, callInfo)
	mock.lockCountAttachedItemsOnChatRoom.Unlock()
	return mock.CountAttachedItemsOnChatRoomFunc(ctx, chatRoomID, where)
}

// CountAttachedItemsOnChatRoomCalls gets all the calls that were made to CountAttachedItemsOnChatRoom.
// Check the length with:
//
//	len(mockedStore.CountAttachedItemsOnChatRoomCalls())
func (mock *StoreMock) CountAttachedItemsOnChatRoomCalls() []struct {
	Ctx        context.Context
	ChatRoomID uuid.UUID
	Where      parameter.WhereAttachedItemOnChatRoomParam
} {
	var calls []struct {
		Ctx        context.Context
		ChatRoomID uuid.UUID
		Where      parameter.WhereAttachedItemOnChatRoomParam
	}
	mock.lockCountAttachedItemsOnChatRoom.RLock()
	calls = mock.calls.CountAttachedItemsOnChatRoom
	mock.lockCountAttachedItemsOnChatRoom.RUnlock()
	return calls
}

// CountAttachedItemsOnChatRoomWithSd calls CountAttachedItemsOnChatRoomWithSdFunc.
func (mock *StoreMock) CountAttachedItemsOnChatRoomWithSd(ctx context.Context, sd Sd, chatRoomID uuid.UUID, where parameter.WhereAttachedItemOnChatRoomParam) (int64, error) {
	if mock.CountAttachedItemsOnChatRoomWithSdFunc == nil {
		panic("StoreMock.CountAttachedItemsOnChatRoomWithSdFunc: method is nil but Store.CountAttachedItemsOnChatRoomWithSd was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Sd         Sd
		ChatRoomID uuid.UUID
		Where      parameter.WhereAttachedItemOnChatRoomParam
	}{
		Ctx:        ctx,
		Sd:         sd,
		ChatRoomID: chatRoomID,
		Where:      where,
	}
	mock.lockCountAttachedItemsOnChatRoomWithSd.Lock()
	mock.calls.CountAttachedItemsOnChatRoomWithSd = append(mock.calls.CountAttachedItemsOnChatRoomWithSd, callInfo)
	mock.lockCountAttachedItemsOnChatRoomWithSd.Unlock()
	return mock.CountAttachedItemsOnChatRoomWithSdFunc(ctx, sd, chatRoomID, where)
}

// CountAttachedItemsOnChatRoomWithSdCalls gets all the calls that were made to CountAttachedItemsOnChatRoomWithSd.
// Check the length with:
//
//	len(mockedStore.CountAttachedItemsOnChatRoomWithSdCalls())
func (mock *StoreMock) CountAttachedItemsOnChatRoomWithSdCalls() []struct {
	Ctx        context.Context
	Sd         Sd
	ChatRoomID uuid.UUID
	Where      parameter.WhereAttachedItemOnChatRoomParam
} {
	var calls []struct {
		Ctx        context.Context
		Sd         Sd
		ChatRoomID uuid.UUID
		Where      parameter.WhereAttachedItemOnChatRoomParam
	}
	mock.lockCountAttachedItemsOnChatRoomWithSd.RLock()
	calls = mock.calls.CountAttachedItemsOnChatRoomWithSd
	mock.lockCountAttachedItemsOnChatRoomWithSd.RUnlock()
	return calls
}

// CountAttachedItemsOnMessage calls CountAttachedItemsOnMessageFunc.
func (mock *StoreMock) CountAttachedItemsOnMessage(ctx context.Context, messageID uuid.UUID, where parameter.WhereAttachedItemOnMessageParam) (int64, error) {
	if mock.CountAttachedItemsOnMessageFunc == nil {
		panic("StoreMock.CountAttachedItemsOnMessageFunc: method is nil but Store.CountAttachedItemsOnMessage was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		MessageID uuid.UUID
		Where     parameter.WhereAttachedItemOnMessageParam
	}{
		Ctx:       ctx,
		MessageID: messageID,
		Where:     where,
	}
	mock.lockCountAttachedItemsOnMessage.Lock()
	mock.calls.CountAttachedItemsOnMessage = append(mock.calls.CountAttachedItemsOnMessage, callInfo)
	mock.lockCountAttachedItemsOnMessage.Unlock()
	return mock.CountAttachedItemsOnMessageFunc(ctx, messageID, where)
}

// CountAttachedItemsOnMessageCalls gets all the calls that were made to CountAttachedItemsOnMessage.
// Check the length with:
//
//	len(mockedStore.CountAttachedItemsOnMessageCalls())
func (mock *StoreMock) CountAttachedItemsOnMessageCalls() []struct {
	Ctx       context.Context
	MessageID uuid.UUID
	Where     parameter.WhereAttachedItemOnMessageParam
} {
	var calls []struct {
		Ctx       context.Context
		MessageID uuid.UUID
		Where     parameter.WhereAttachedItemOnMessageParam
	}
	mock.lockCountAttachedItemsOnMessage.RLock()
	calls = mock.calls.CountAttachedItemsOnMessage
	mock.lockCountAttachedItemsOnMessage.RUnlock()
	return calls
}

// CountAttachedItemsOnMessageWithSd calls CountAttachedItemsOnMessageWithSdFunc.
func (mock *StoreMock) CountAttachedItemsOnMessageWithSd(ctx context.Context, sd Sd, messageID uuid.UUID, where parameter.WhereAttachedItemOnMessageParam) (int64, error) {
	if mock.CountAttachedItemsOnMessageWithSdFunc == nil {
		panic("StoreMock.CountAttachedItemsOnMessageWithSdFunc: method is nil but Store.CountAttachedItemsOnMessageWithSd was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Sd        Sd
		MessageID uuid.UUID
		Where     parameter.WhereAttachedItemOnMessageParam
	}{
		Ctx:       ctx,
		Sd:        sd,
		MessageID: messageID,
		Where:     where,
	}
	mock.lockCountAttachedItemsOnMessageWithSd.Lock()
	mock.calls.CountAttachedItemsOnMessageWithSd = append(mock.calls.CountAttachedItemsOnMessageWithSd, callInfo)
	mock.lockCountAttachedItemsOnMessageWithSd.Unlock()
	return mock.CountAttachedItemsOnMessageWithSdFunc(ctx, sd, messageID, where)
}

// CountAttachedItemsOnMessageWithSdCalls gets all the calls that were made to CountAttachedItemsOnMessageWithSd.
// Check the length with:
//
//	len(mockedStore.CountAttachedItemsOnMessageWithSdCalls())
func (mock *StoreMock) CountAttachedItemsOnMessageWithSdCalls() []struct {
	Ctx       context.Context
	Sd        Sd
	MessageID uuid.UUID
	Where     parameter.WhereAttachedItemOnMessageParam
} {
	var calls []struct {
		Ctx       context.Context
		Sd        Sd
		MessageID uuid.UUID
		Where     parameter.WhereAttachedItemOnMessageParam
	}
	mock.lockCountAttachedItemsOnMessageWithSd.RLock()
	calls = mock.calls.CountAttachedItemsOnMessageWithSd
	mock.lockCountAttachedItemsOnMessageWithSd.RUnlock()
	return calls
}

// CountAttendStatuses calls CountAttendStatusesFunc.
func (mock *StoreMock) CountAttendStatuses(ctx context.Context, where parameter.WhereAttendStatusParam) (int64, error) {
	if mock.CountAttendStatusesFunc == nil {
		panic("StoreMock.CountAttendStatusesFunc: method is nil but Store.CountAttendStatuses was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereAttendStatusParam
	}{
		Ctx:   ctx,
		Where: where,
	}
	mock.lockCountAttendStatuses.Lock()
	mock.calls.CountAttendStatuses = append(mock.calls.CountAttendStatuses, callInfo)
	mock.lockCountAttendStatuses.Unlock()
	return mock.CountAttendStatusesFunc(ctx, where)
}

// CountAttendStatusesCalls gets all the calls that were made to CountAttendStatuses.
// Check the length with:
//
//	len(mockedStore.CountAttendStatusesCalls())
func (mock *StoreMock) CountAttendStatusesCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereAttendStatusParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereAttendStatusParam
	}
	mock.lockCountAttendStatuses.RLock()
	calls = mock.calls.CountAttendStatuses
	mock.lockCountAttendStatuses.RUnlock()
	return calls
}

// CountAttendStatusesWithSd calls CountAttendStatusesWithSdFunc.
func (mock *StoreMock) CountAttendStatusesWithSd(ctx context.Context, sd Sd, where parameter.WhereAttendStatusParam) (int64, error) {
	if mock.CountAttendStatusesWithSdFunc == nil {
		panic("StoreMock.CountAttendStatusesWithSdFunc: method is nil but Store.CountAttendStatusesWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereAttendStatusParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
	}
	mock.lockCountAttendStatusesWithSd.Lock()
	mock.calls.CountAttendStatusesWithSd = append(mock.calls.CountAttendStatusesWithSd, callInfo)
	mock.lockCountAttendStatusesWithSd.Unlock()
	return mock.CountAttendStatusesWithSdFunc(ctx, sd, where)
}

// CountAttendStatusesWithSdCalls gets all the calls that were made to CountAttendStatusesWithSd.
// Check the length with:
//
//	len(mockedStore.CountAttendStatusesWithSdCalls())
func (mock *StoreMock) CountAttendStatusesWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereAttendStatusParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereAttendStatusParam
	}
	mock.lockCountAttendStatusesWithSd.RLock()
	calls = mock.calls.CountAttendStatusesWithSd
	mock.lockCountAttendStatusesWithSd.RUnlock()
	return calls
}

// CountAttendanceTypes calls CountAttendanceTypesFunc.
func (mock *StoreMock) CountAttendanceTypes(ctx context.Context, where parameter.WhereAttendanceTypeParam) (int64, error) {
	if mock.CountAttendanceTypesFunc == nil {
		panic("StoreMock.CountAttendanceTypesFunc: method is nil but Store.CountAttendanceTypes was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereAttendanceTypeParam
	}{
		Ctx:   ctx,
		Where: where,
	}
	mock.lockCountAttendanceTypes.Lock()
	mock.calls.CountAttendanceTypes = append(mock.calls.CountAttendanceTypes, callInfo)
	mock.lockCountAttendanceTypes.Unlock()
	return mock.CountAttendanceTypesFunc(ctx, where)
}

// CountAttendanceTypesCalls gets all the calls that were made to CountAttendanceTypes.
// Check the length with:
//
//	len(mockedStore.CountAttendanceTypesCalls())
func (mock *StoreMock) CountAttendanceTypesCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereAttendanceTypeParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereAttendanceTypeParam
	}
	mock.lockCountAttendanceTypes.RLock()
	calls = mock.calls.CountAttendanceTypes
	mock.lockCountAttendanceTypes.RUnlock()
	return calls
}

// CountAttendanceTypesWithSd calls CountAttendanceTypesWithSdFunc.
func (mock *StoreMock) CountAttendanceTypesWithSd(ctx context.Context, sd Sd, where parameter.WhereAttendanceTypeParam) (int64, error) {
	if mock.CountAttendanceTypesWithSdFunc == nil {
		panic("StoreMock.CountAttendanceTypesWithSdFunc: method is nil but Store.CountAttendanceTypesWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereAttendanceTypeParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
	}
	mock.lockCountAttendanceTypesWithSd.Lock()
	mock.calls.CountAttendanceTypesWithSd = append(mock.calls.CountAttendanceTypesWithSd, callInfo)
	mock.lockCountAttendanceTypesWithSd.Unlock()
	return mock.CountAttendanceTypesWithSdFunc(ctx, sd, where)
}

// CountAttendanceTypesWithSdCalls gets all the calls that were made to CountAttendanceTypesWithSd.
// Check the length with:
//
//	len(mockedStore.CountAttendanceTypesWithSdCalls())
func (mock *StoreMock) CountAttendanceTypesWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereAttendanceTypeParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereAttendanceTypeParam
	}
	mock.lockCountAttendanceTypesWithSd.RLock()
	calls = mock.calls.CountAttendanceTypesWithSd
	mock.lockCountAttendanceTypesWithSd.RUnlock()
	return calls
}

// CountChatRoomActionTypes calls CountChatRoomActionTypesFunc.
func (mock *StoreMock) CountChatRoomActionTypes(ctx context.Context, where parameter.WhereChatRoomActionTypeParam) (int64, error) {
	if mock.CountChatRoomActionTypesFunc == nil {
		panic("StoreMock.CountChatRoomActionTypesFunc: method is nil but Store.CountChatRoomActionTypes was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereChatRoomActionTypeParam
	}{
		Ctx:   ctx,
		Where: where,
	}
	mock.lockCountChatRoomActionTypes.Lock()
	mock.calls.CountChatRoomActionTypes = append(mock.calls.CountChatRoomActionTypes, callInfo)
	mock.lockCountChatRoomActionTypes.Unlock()
	return mock.CountChatRoomActionTypesFunc(ctx, where)
}

// CountChatRoomActionTypesCalls gets all the calls that were made to CountChatRoomActionTypes.
// Check the length with:
//
//	len(mockedStore.CountChatRoomActionTypesCalls())
func (mock *StoreMock) CountChatRoomActionTypesCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereChatRoomActionTypeParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereChatRoomActionTypeParam
	}
	mock.lockCountChatRoomActionTypes.RLock()
	calls = mock.calls.CountChatRoomActionTypes
	mock.lockCountChatRoomActionTypes.RUnlock()
	return calls
}

// CountChatRoomActionTypesWithSd calls CountChatRoomActionTypesWithSdFunc.
func (mock *StoreMock) CountChatRoomActionTypesWithSd(ctx context.Context, sd Sd, where parameter.WhereChatRoomActionTypeParam) (int64, error) {
	if mock.CountChatRoomActionTypesWithSdFunc == nil {
		panic("StoreMock.CountChatRoomActionTypesWithSdFunc: method is nil but Store.CountChatRoomActionTypesWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereChatRoomActionTypeParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
	}
	mock.lockCountChatRoomActionTypesWithSd.Lock()
	mock.calls.CountChatRoomActionTypesWithSd = append(mock.calls.CountChatRoomActionTypesWithSd, callInfo)
	mock.lockCountChatRoomActionTypesWithSd.Unlock()
	return mock.CountChatRoomActionTypesWithSdFunc(ctx, sd, where)
}

// CountChatRoomActionTypesWithSdCalls gets all the calls that were made to CountChatRoomActionTypesWithSd.
// Check the length with:
//
//	len(mockedStore.CountChatRoomActionTypesWithSdCalls())
func (mock *StoreMock) CountChatRoomActionTypesWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereChatRoomActionTypeParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereChatRoomActionTypeParam
	}
	mock.lockCountChatRoomActionTypesWithSd.RLock()
	calls = mock.calls.CountChatRoomActionTypesWithSd
	mock.lockCountChatRoomActionTypesWithSd.RUnlock()
	return calls
}

// CountChatRoomActions calls CountChatRoomActionsFunc.
func (mock *StoreMock) CountChatRoomActions(ctx context.Context, where parameter.WhereChatRoomActionParam) (int64, error) {
	if mock.CountChatRoomActionsFunc == nil {
		panic("StoreMock.CountChatRoomActionsFunc: method is nil but Store.CountChatRoomActions was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereChatRoomActionParam
	}{
		Ctx:   ctx,
		Where: where,
	}
	mock.lockCountChatRoomActions.Lock()
	mock.calls.CountChatRoomActions = append(mock.calls.CountChatRoomActions, callInfo)
	mock.lockCountChatRoomActions.Unlock()
	return mock.CountChatRoomActionsFunc(ctx, where)
}

// CountChatRoomActionsCalls gets all the calls that were made to CountChatRoomActions.
// Check the length with:
//
//	len(mockedStore.CountChatRoomActionsCalls())
func (mock *StoreMock) CountChatRoomActionsCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereChatRoomActionParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereChatRoomActionParam
	}
	mock.lockCountChatRoomActions.RLock()
	calls = mock.calls.CountChatRoomActions
	mock.lockCountChatRoomActions.RUnlock()
	return calls
}

// CountChatRoomActionsWithSd calls CountChatRoomActionsWithSdFunc.
func (mock *StoreMock) CountChatRoomActionsWithSd(ctx context.Context, sd Sd, where parameter.WhereChatRoomActionParam) (int64, error) {
	if mock.CountChatRoomActionsWithSdFunc == nil {
		panic("StoreMock.CountChatRoomActionsWithSdFunc: method is nil but Store.CountChatRoomActionsWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereChatRoomActionParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
	}
	mock.lockCountChatRoomActionsWithSd.Lock()
	mock.calls.CountChatRoomActionsWithSd = append(mock.calls.CountChatRoomActionsWithSd, callInfo)
	mock.lockCountChatRoomActionsWithSd.Unlock()
	return mock.CountChatRoomActionsWithSdFunc(ctx, sd, where)
}

// CountChatRoomActionsWithSdCalls gets all the calls that were made to CountChatRoomActionsWithSd.
// Check the length with:
//
//	len(mockedStore.CountChatRoomActionsWithSdCalls())
func (mock *StoreMock) CountChatRoomActionsWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereChatRoomActionParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereChatRoomActionParam
	}
	mock.lockCountChatRoomActionsWithSd.RLock()
	calls = mock.calls.CountChatRoomActionsWithSd
	mock.lockCountChatRoomActionsWithSd.RUnlock()
	return calls
}

// CountChatRoomAddMemberActions calls CountChatRoomAddMemberActionsFunc.
func (mock *StoreMock) CountChatRoomAddMemberActions(ctx context.Context, where parameter.WhereChatRoomAddMemberActionParam) (int64, error) {
	if mock.CountChatRoomAddMemberActionsFunc == nil {
		panic("StoreMock.CountChatRoomAddMemberActionsFunc: method is nil but Store.CountChatRoomAddMemberActions was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereChatRoomAddMemberActionParam
	}{
		Ctx:   ctx,
		Where: where,
	}
	mock.lockCountChatRoomAddMemberActions.Lock()
	mock.calls.CountChatRoomAddMemberActions = append(mock.calls.CountChatRoomAddMemberActions, callInfo)
	mock.lockCountChatRoomAddMemberActions.Unlock()
	return mock.CountChatRoomAddMemberActionsFunc(ctx, where)
}

// CountChatRoomAddMemberActionsCalls gets all the calls that were made to CountChatRoomAddMemberActions.
// Check the length with:
//
//	len(mockedStore.CountChatRoomAddMemberActionsCalls())
func (mock *StoreMock) CountChatRoomAddMemberActionsCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereChatRoomAddMemberActionParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereChatRoomAddMemberActionParam
	}
	mock.lockCountChatRoomAddMemberActions.RLock()
	calls = mock.calls.CountChatRoomAddMemberActions
	mock.lockCountChatRoomAddMemberActions.RUnlock()
	return calls
}

// CountChatRoomAddMemberActionsWithSd calls CountChatRoomAddMemberActionsWithSdFunc.
func (mock *StoreMock) CountChatRoomAddMemberActionsWithSd(ctx context.Context, sd Sd, where parameter.WhereChatRoomAddMemberActionParam) (int64, error) {
	if mock.CountChatRoomAddMemberActionsWithSdFunc == nil {
		panic("StoreMock.CountChatRoomAddMemberActionsWithSdFunc: method is nil but Store.CountChatRoomAddMemberActionsWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereChatRoomAddMemberActionParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
	}
	mock.lockCountChatRoomAddMemberActionsWithSd.Lock()
	mock.calls.CountChatRoomAddMemberActionsWithSd = append(mock.calls.CountChatRoomAddMemberActionsWithSd, callInfo)
	mock.lockCountChatRoomAddMemberActionsWithSd.Unlock()
	return mock.CountChatRoomAddMemberActionsWithSdFunc(ctx, sd, where)
}

// CountChatRoomAddMemberActionsWithSdCalls gets all the calls that were made to CountChatRoomAddMemberActionsWithSd.
// Check the length with:
//
//	len(mockedStore.CountChatRoomAddMemberActionsWithSdCalls())
func (mock *StoreMock) CountChatRoomAddMemberActionsWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereChatRoomAddMemberActionParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereChatRoomAddMemberActionParam
	}
	mock.lockCountChatRoomAddMemberActionsWithSd.RLock()
	calls = mock.calls.CountChatRoomAddMemberActionsWithSd
	mock.lockCountChatRoomAddMemberActionsWithSd.RUnlock()
	return calls
}

// CountChatRoomCreateActions calls CountChatRoomCreateActionsFunc.
func (mock *StoreMock) CountChatRoomCreateActions(ctx context.Context, where parameter.WhereChatRoomCreateActionParam) (int64, error) {
	if mock.CountChatRoomCreateActionsFunc == nil {
		panic("StoreMock.CountChatRoomCreateActionsFunc: method is nil but Store.CountChatRoomCreateActions was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereChatRoomCreateActionParam
	}{
		Ctx:   ctx,
		Where: where,
	}
	mock.lockCountChatRoomCreateActions.Lock()
	mock.calls.CountChatRoomCreateActions = append(mock.calls.CountChatRoomCreateActions, callInfo)
	mock.lockCountChatRoomCreateActions.Unlock()
	return mock.CountChatRoomCreateActionsFunc(ctx, where)
}

// CountChatRoomCreateActionsCalls gets all the calls that were made to CountChatRoomCreateActions.
// Check the length with:
//
//	len(mockedStore.CountChatRoomCreateActionsCalls())
func (mock *StoreMock) CountChatRoomCreateActionsCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereChatRoomCreateActionParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereChatRoomCreateActionParam
	}
	mock.lockCountChatRoomCreateActions.RLock()
	calls = mock.calls.CountChatRoomCreateActions
	mock.lockCountChatRoomCreateActions.RUnlock()
	return calls
}

// CountChatRoomCreateActionsWithSd calls CountChatRoomCreateActionsWithSdFunc.
func (mock *StoreMock) CountChatRoomCreateActionsWithSd(ctx context.Context, sd Sd, where parameter.WhereChatRoomCreateActionParam) (int64, error) {
	if mock.CountChatRoomCreateActionsWithSdFunc == nil {
		panic("StoreMock.CountChatRoomCreateActionsWithSdFunc: method is nil but Store.CountChatRoomCreateActionsWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereChatRoomCreateActionParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
	}
	mock.lockCountChatRoomCreateActionsWithSd.Lock()
	mock.calls.CountChatRoomCreateActionsWithSd = append(mock.calls.CountChatRoomCreateActionsWithSd, callInfo)
	mock.lockCountChatRoomCreateActionsWithSd.Unlock()
	return mock.CountChatRoomCreateActionsWithSdFunc(ctx, sd, where)
}

// CountChatRoomCreateActionsWithSdCalls gets all the calls that were made to CountChatRoomCreateActionsWithSd.
// Check the length with:
//
//	len(mockedStore.CountChatRoomCreateActionsWithSdCalls())
func (mock *StoreMock) CountChatRoomCreateActionsWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereChatRoomCreateActionParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereChatRoomCreateActionParam
	}
	mock.lockCountChatRoomCreateActionsWithSd.RLock()
	calls = mock.calls.CountChatRoomCreateActionsWithSd
	mock.lockCountChatRoomCreateActionsWithSd.RUnlock()
	return calls
}

// CountChatRoomDeleteMessageActions calls CountChatRoomDeleteMessageActionsFunc.
func (mock *StoreMock) CountChatRoomDeleteMessageActions(ctx context.Context, where parameter.WhereChatRoomDeleteMessageActionParam) (int64, error) {
	if mock.CountChatRoomDeleteMessageActionsFunc == nil {
		panic("StoreMock.CountChatRoomDeleteMessageActionsFunc: method is nil but Store.CountChatRoomDeleteMessageActions was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereChatRoomDeleteMessageActionParam
	}{
		Ctx:   ctx,
		Where: where,
	}
	mock.lockCountChatRoomDeleteMessageActions.Lock()
	mock.calls.CountChatRoomDeleteMessageActions = append(mock.calls.CountChatRoomDeleteMessageActions, callInfo)
	mock.lockCountChatRoomDeleteMessageActions.Unlock()
	return mock.CountChatRoomDeleteMessageActionsFunc(ctx, where)
}

// CountChatRoomDeleteMessageActionsCalls gets all the calls that were made to CountChatRoomDeleteMessageActions.
// Check the length with:
//
//	len(mockedStore.CountChatRoomDeleteMessageActionsCalls())
func (mock *StoreMock) CountChatRoomDeleteMessageActionsCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereChatRoomDeleteMessageActionParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereChatRoomDeleteMessageActionParam
	}
	mock.lockCountChatRoomDeleteMessageActions.RLock()
	calls = mock.calls.CountChatRoomDeleteMessageActions
	mock.lockCountChatRoomDeleteMessageActions.RUnlock()
	return calls
}

// CountChatRoomDeleteMessageActionsWithSd calls CountChatRoomDeleteMessageActionsWithSdFunc.
func (mock *StoreMock) CountChatRoomDeleteMessageActionsWithSd(ctx context.Context, sd Sd, where parameter.WhereChatRoomDeleteMessageActionParam) (int64, error) {
	if mock.CountChatRoomDeleteMessageActionsWithSdFunc == nil {
		panic("StoreMock.CountChatRoomDeleteMessageActionsWithSdFunc: method is nil but Store.CountChatRoomDeleteMessageActionsWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereChatRoomDeleteMessageActionParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
	}
	mock.lockCountChatRoomDeleteMessageActionsWithSd.Lock()
	mock.calls.CountChatRoomDeleteMessageActionsWithSd = append(mock.calls.CountChatRoomDeleteMessageActionsWithSd, callInfo)
	mock.lockCountChatRoomDeleteMessageActionsWithSd.Unlock()
	return mock.CountChatRoomDeleteMessageActionsWithSdFunc(ctx, sd, where)
}

// CountChatRoomDeleteMessageActionsWithSdCalls gets all the calls that were made to CountChatRoomDeleteMessageActionsWithSd.
// Check the length with:
//
//	len(mockedStore.CountChatRoomDeleteMessageActionsWithSdCalls())
func (mock *StoreMock) CountChatRoomDeleteMessageActionsWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereChatRoomDeleteMessageActionParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereChatRoomDeleteMessageActionParam
	}
	mock.lockCountChatRoomDeleteMessageActionsWithSd.RLock()
	calls = mock.calls.CountChatRoomDeleteMessageActionsWithSd
	mock.lockCountChatRoomDeleteMessageActionsWithSd.RUnlock()
	return calls
}

// CountChatRoomRemoveMemberActions calls CountChatRoomRemoveMemberActionsFunc.
func (mock *StoreMock) CountChatRoomRemoveMemberActions(ctx context.Context, where parameter.WhereChatRoomRemoveMemberActionParam) (int64, error) {
	if mock.CountChatRoomRemoveMemberActionsFunc == nil {
		panic("StoreMock.CountChatRoomRemoveMemberActionsFunc: method is nil but Store.CountChatRoomRemoveMemberActions was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereChatRoomRemoveMemberActionParam
	}{
		Ctx:   ctx,
		Where: where,
	}
	mock.lockCountChatRoomRemoveMemberActions.Lock()
	mock.calls.CountChatRoomRemoveMemberActions = append(mock.calls.CountChatRoomRemoveMemberActions, callInfo)
	mock.lockCountChatRoomRemoveMemberActions.Unlock()
	return mock.CountChatRoomRemoveMemberActionsFunc(ctx, where)
}

// CountChatRoomRemoveMemberActionsCalls gets all the calls that were made to CountChatRoomRemoveMemberActions.
// Check the length with:
//
//	len(mockedStore.CountChatRoomRemoveMemberActionsCalls())
func (mock *StoreMock) CountChatRoomRemoveMemberActionsCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereChatRoomRemoveMemberActionParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereChatRoomRemoveMemberActionParam
	}
	mock.lockCountChatRoomRemoveMemberActions.RLock()
	calls = mock.calls.CountChatRoomRemoveMemberActions
	mock.lockCountChatRoomRemoveMemberActions.RUnlock()
	return calls
}

// CountChatRoomRemoveMemberActionsWithSd calls CountChatRoomRemoveMemberActionsWithSdFunc.
func (mock *StoreMock) CountChatRoomRemoveMemberActionsWithSd(ctx context.Context, sd Sd, where parameter.WhereChatRoomRemoveMemberActionParam) (int64, error) {
	if mock.CountChatRoomRemoveMemberActionsWithSdFunc == nil {
		panic("StoreMock.CountChatRoomRemoveMemberActionsWithSdFunc: method is nil but Store.CountChatRoomRemoveMemberActionsWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereChatRoomRemoveMemberActionParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
	}
	mock.lockCountChatRoomRemoveMemberActionsWithSd.Lock()
	mock.calls.CountChatRoomRemoveMemberActionsWithSd = append(mock.calls.CountChatRoomRemoveMemberActionsWithSd, callInfo)
	mock.lockCountChatRoomRemoveMemberActionsWithSd.Unlock()
	return mock.CountChatRoomRemoveMemberActionsWithSdFunc(ctx, sd, where)
}

// CountChatRoomRemoveMemberActionsWithSdCalls gets all the calls that were made to CountChatRoomRemoveMemberActionsWithSd.
// Check the length with:
//
//	len(mockedStore.CountChatRoomRemoveMemberActionsWithSdCalls())
func (mock *StoreMock) CountChatRoomRemoveMemberActionsWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereChatRoomRemoveMemberActionParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereChatRoomRemoveMemberActionParam
	}
	mock.lockCountChatRoomRemoveMemberActionsWithSd.RLock()
	calls = mock.calls.CountChatRoomRemoveMemberActionsWithSd
	mock.lockCountChatRoomRemoveMemberActionsWithSd.RUnlock()
	return calls
}

// CountChatRoomUpdateNameActions calls CountChatRoomUpdateNameActionsFunc.
func (mock *StoreMock) CountChatRoomUpdateNameActions(ctx context.Context, where parameter.WhereChatRoomUpdateNameActionParam) (int64, error) {
	if mock.CountChatRoomUpdateNameActionsFunc == nil {
		panic("StoreMock.CountChatRoomUpdateNameActionsFunc: method is nil but Store.CountChatRoomUpdateNameActions was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereChatRoomUpdateNameActionParam
	}{
		Ctx:   ctx,
		Where: where,
	}
	mock.lockCountChatRoomUpdateNameActions.Lock()
	mock.calls.CountChatRoomUpdateNameActions = append(mock.calls.CountChatRoomUpdateNameActions, callInfo)
	mock.lockCountChatRoomUpdateNameActions.Unlock()
	return mock.CountChatRoomUpdateNameActionsFunc(ctx, where)
}

// CountChatRoomUpdateNameActionsCalls gets all the calls that were made to CountChatRoomUpdateNameActions.
// Check the length with:
//
//	len(mockedStore.CountChatRoomUpdateNameActionsCalls())
func (mock *StoreMock) CountChatRoomUpdateNameActionsCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereChatRoomUpdateNameActionParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereChatRoomUpdateNameActionParam
	}
	mock.lockCountChatRoomUpdateNameActions.RLock()
	calls = mock.calls.CountChatRoomUpdateNameActions
	mock.lockCountChatRoomUpdateNameActions.RUnlock()
	return calls
}

// CountChatRoomUpdateNameActionsWithSd calls CountChatRoomUpdateNameActionsWithSdFunc.
func (mock *StoreMock) CountChatRoomUpdateNameActionsWithSd(ctx context.Context, sd Sd, where parameter.WhereChatRoomUpdateNameActionParam) (int64, error) {
	if mock.CountChatRoomUpdateNameActionsWithSdFunc == nil {
		panic("StoreMock.CountChatRoomUpdateNameActionsWithSdFunc: method is nil but Store.CountChatRoomUpdateNameActionsWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereChatRoomUpdateNameActionParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
	}
	mock.lockCountChatRoomUpdateNameActionsWithSd.Lock()
	mock.calls.CountChatRoomUpdateNameActionsWithSd = append(mock.calls.CountChatRoomUpdateNameActionsWithSd, callInfo)
	mock.lockCountChatRoomUpdateNameActionsWithSd.Unlock()
	return mock.CountChatRoomUpdateNameActionsWithSdFunc(ctx, sd, where)
}

// CountChatRoomUpdateNameActionsWithSdCalls gets all the calls that were made to CountChatRoomUpdateNameActionsWithSd.
// Check the length with:
//
//	len(mockedStore.CountChatRoomUpdateNameActionsWithSdCalls())
func (mock *StoreMock) CountChatRoomUpdateNameActionsWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereChatRoomUpdateNameActionParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereChatRoomUpdateNameActionParam
	}
	mock.lockCountChatRoomUpdateNameActionsWithSd.RLock()
	calls = mock.calls.CountChatRoomUpdateNameActionsWithSd
	mock.lockCountChatRoomUpdateNameActionsWithSd.RUnlock()
	return calls
}

// CountChatRoomWithdrawActions calls CountChatRoomWithdrawActionsFunc.
func (mock *StoreMock) CountChatRoomWithdrawActions(ctx context.Context, where parameter.WhereChatRoomWithdrawActionParam) (int64, error) {
	if mock.CountChatRoomWithdrawActionsFunc == nil {
		panic("StoreMock.CountChatRoomWithdrawActionsFunc: method is nil but Store.CountChatRoomWithdrawActions was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereChatRoomWithdrawActionParam
	}{
		Ctx:   ctx,
		Where: where,
	}
	mock.lockCountChatRoomWithdrawActions.Lock()
	mock.calls.CountChatRoomWithdrawActions = append(mock.calls.CountChatRoomWithdrawActions, callInfo)
	mock.lockCountChatRoomWithdrawActions.Unlock()
	return mock.CountChatRoomWithdrawActionsFunc(ctx, where)
}

// CountChatRoomWithdrawActionsCalls gets all the calls that were made to CountChatRoomWithdrawActions.
// Check the length with:
//
//	len(mockedStore.CountChatRoomWithdrawActionsCalls())
func (mock *StoreMock) CountChatRoomWithdrawActionsCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereChatRoomWithdrawActionParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereChatRoomWithdrawActionParam
	}
	mock.lockCountChatRoomWithdrawActions.RLock()
	calls = mock.calls.CountChatRoomWithdrawActions
	mock.lockCountChatRoomWithdrawActions.RUnlock()
	return calls
}

// CountChatRoomWithdrawActionsWithSd calls CountChatRoomWithdrawActionsWithSdFunc.
func (mock *StoreMock) CountChatRoomWithdrawActionsWithSd(ctx context.Context, sd Sd, where parameter.WhereChatRoomWithdrawActionParam) (int64, error) {
	if mock.CountChatRoomWithdrawActionsWithSdFunc == nil {
		panic("StoreMock.CountChatRoomWithdrawActionsWithSdFunc: method is nil but Store.CountChatRoomWithdrawActionsWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereChatRoomWithdrawActionParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
	}
	mock.lockCountChatRoomWithdrawActionsWithSd.Lock()
	mock.calls.CountChatRoomWithdrawActionsWithSd = append(mock.calls.CountChatRoomWithdrawActionsWithSd, callInfo)
	mock.lockCountChatRoomWithdrawActionsWithSd.Unlock()
	return mock.CountChatRoomWithdrawActionsWithSdFunc(ctx, sd, where)
}

// CountChatRoomWithdrawActionsWithSdCalls gets all the calls that were made to CountChatRoomWithdrawActionsWithSd.
// Check the length with:
//
//	len(mockedStore.CountChatRoomWithdrawActionsWithSdCalls())
func (mock *StoreMock) CountChatRoomWithdrawActionsWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereChatRoomWithdrawActionParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereChatRoomWithdrawActionParam
	}
	mock.lockCountChatRoomWithdrawActionsWithSd.RLock()
	calls = mock.calls.CountChatRoomWithdrawActionsWithSd
	mock.lockCountChatRoomWithdrawActionsWithSd.RUnlock()
	return calls
}

// CountChatRooms calls CountChatRoomsFunc.
func (mock *StoreMock) CountChatRooms(ctx context.Context, where parameter.WhereChatRoomParam) (int64, error) {
	if mock.CountChatRoomsFunc == nil {
		panic("StoreMock.CountChatRoomsFunc: method is nil but Store.CountChatRooms was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereChatRoomParam
	}{
		Ctx:   ctx,
		Where: where,
	}
	mock.lockCountChatRooms.Lock()
	mock.calls.CountChatRooms = append(mock.calls.CountChatRooms, callInfo)
	mock.lockCountChatRooms.Unlock()
	return mock.CountChatRoomsFunc(ctx, where)
}

// CountChatRoomsCalls gets all the calls that were made to CountChatRooms.
// Check the length with:
//
//	len(mockedStore.CountChatRoomsCalls())
func (mock *StoreMock) CountChatRoomsCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereChatRoomParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereChatRoomParam
	}
	mock.lockCountChatRooms.RLock()
	calls = mock.calls.CountChatRooms
	mock.lockCountChatRooms.RUnlock()
	return calls
}

// CountChatRoomsOnMember calls CountChatRoomsOnMemberFunc.
func (mock *StoreMock) CountChatRoomsOnMember(ctx context.Context, memberID uuid.UUID, where parameter.WhereChatRoomOnMemberParam) (int64, error) {
	if mock.CountChatRoomsOnMemberFunc == nil {
		panic("StoreMock.CountChatRoomsOnMemberFunc: method is nil but Store.CountChatRoomsOnMember was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		MemberID uuid.UUID
		Where    parameter.WhereChatRoomOnMemberParam
	}{
		Ctx:      ctx,
		MemberID: memberID,
		Where:    where,
	}
	mock.lockCountChatRoomsOnMember.Lock()
	mock.calls.CountChatRoomsOnMember = append(mock.calls.CountChatRoomsOnMember, callInfo)
	mock.lockCountChatRoomsOnMember.Unlock()
	return mock.CountChatRoomsOnMemberFunc(ctx, memberID, where)
}

// CountChatRoomsOnMemberCalls gets all the calls that were made to CountChatRoomsOnMember.
// Check the length with:
//
//	len(mockedStore.CountChatRoomsOnMemberCalls())
func (mock *StoreMock) CountChatRoomsOnMemberCalls() []struct {
	Ctx      context.Context
	MemberID uuid.UUID
	Where    parameter.WhereChatRoomOnMemberParam
} {
	var calls []struct {
		Ctx      context.Context
		MemberID uuid.UUID
		Where    parameter.WhereChatRoomOnMemberParam
	}
	mock.lockCountChatRoomsOnMember.RLock()
	calls = mock.calls.CountChatRoomsOnMember
	mock.lockCountChatRoomsOnMember.RUnlock()
	return calls
}

// CountChatRoomsOnMemberWithSd calls CountChatRoomsOnMemberWithSdFunc.
func (mock *StoreMock) CountChatRoomsOnMemberWithSd(ctx context.Context, sd Sd, memberID uuid.UUID, where parameter.WhereChatRoomOnMemberParam) (int64, error) {
	if mock.CountChatRoomsOnMemberWithSdFunc == nil {
		panic("StoreMock.CountChatRoomsOnMemberWithSdFunc: method is nil but Store.CountChatRoomsOnMemberWithSd was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Sd       Sd
		MemberID uuid.UUID
		Where    parameter.WhereChatRoomOnMemberParam
	}{
		Ctx:      ctx,
		Sd:       sd,
		MemberID: memberID,
		Where:    where,
	}
	mock.lockCountChatRoomsOnMemberWithSd.Lock()
	mock.calls.CountChatRoomsOnMemberWithSd = append(mock.calls.CountChatRoomsOnMemberWithSd, callInfo)
	mock.lockCountChatRoomsOnMemberWithSd.Unlock()
	return mock.CountChatRoomsOnMemberWithSdFunc(ctx, sd, memberID, where)
}

// CountChatRoomsOnMemberWithSdCalls gets all the calls that were made to CountChatRoomsOnMemberWithSd.
// Check the length with:
//
//	len(mockedStore.CountChatRoomsOnMemberWithSdCalls())
func (mock *StoreMock) CountChatRoomsOnMemberWithSdCalls() []struct {
	Ctx      context.Context
	Sd       Sd
	MemberID uuid.UUID
	Where    parameter.WhereChatRoomOnMemberParam
} {
	var calls []struct {
		Ctx      context.Context
		Sd       Sd
		MemberID uuid.UUID
		Where    parameter.WhereChatRoomOnMemberParam
	}
	mock.lockCountChatRoomsOnMemberWithSd.RLock()
	calls = mock.calls.CountChatRoomsOnMemberWithSd
	mock.lockCountChatRoomsOnMemberWithSd.RUnlock()
	return calls
}

// CountChatRoomsWithSd calls CountChatRoomsWithSdFunc.
func (mock *StoreMock) CountChatRoomsWithSd(ctx context.Context, sd Sd, where parameter.WhereChatRoomParam) (int64, error) {
	if mock.CountChatRoomsWithSdFunc == nil {
		panic("StoreMock.CountChatRoomsWithSdFunc: method is nil but Store.CountChatRoomsWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereChatRoomParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
	}
	mock.lockCountChatRoomsWithSd.Lock()
	mock.calls.CountChatRoomsWithSd = append(mock.calls.CountChatRoomsWithSd, callInfo)
	mock.lockCountChatRoomsWithSd.Unlock()
	return mock.CountChatRoomsWithSdFunc(ctx, sd, where)
}

// CountChatRoomsWithSdCalls gets all the calls that were made to CountChatRoomsWithSd.
// Check the length with:
//
//	len(mockedStore.CountChatRoomsWithSdCalls())
func (mock *StoreMock) CountChatRoomsWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereChatRoomParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereChatRoomParam
	}
	mock.lockCountChatRoomsWithSd.RLock()
	calls = mock.calls.CountChatRoomsWithSd
	mock.lockCountChatRoomsWithSd.RUnlock()
	return calls
}

// CountEventTypes calls CountEventTypesFunc.
func (mock *StoreMock) CountEventTypes(ctx context.Context, where parameter.WhereEventTypeParam) (int64, error) {
	if mock.CountEventTypesFunc == nil {
		panic("StoreMock.CountEventTypesFunc: method is nil but Store.CountEventTypes was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereEventTypeParam
	}{
		Ctx:   ctx,
		Where: where,
	}
	mock.lockCountEventTypes.Lock()
	mock.calls.CountEventTypes = append(mock.calls.CountEventTypes, callInfo)
	mock.lockCountEventTypes.Unlock()
	return mock.CountEventTypesFunc(ctx, where)
}

// CountEventTypesCalls gets all the calls that were made to CountEventTypes.
// Check the length with:
//
//	len(mockedStore.CountEventTypesCalls())
func (mock *StoreMock) CountEventTypesCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereEventTypeParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereEventTypeParam
	}
	mock.lockCountEventTypes.RLock()
	calls = mock.calls.CountEventTypes
	mock.lockCountEventTypes.RUnlock()
	return calls
}

// CountEventTypesWithSd calls CountEventTypesWithSdFunc.
func (mock *StoreMock) CountEventTypesWithSd(ctx context.Context, sd Sd, where parameter.WhereEventTypeParam) (int64, error) {
	if mock.CountEventTypesWithSdFunc == nil {
		panic("StoreMock.CountEventTypesWithSdFunc: method is nil but Store.CountEventTypesWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereEventTypeParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
	}
	mock.lockCountEventTypesWithSd.Lock()
	mock.calls.CountEventTypesWithSd = append(mock.calls.CountEventTypesWithSd, callInfo)
	mock.lockCountEventTypesWithSd.Unlock()
	return mock.CountEventTypesWithSdFunc(ctx, sd, where)
}

// CountEventTypesWithSdCalls gets all the calls that were made to CountEventTypesWithSd.
// Check the length with:
//
//	len(mockedStore.CountEventTypesWithSdCalls())
func (mock *StoreMock) CountEventTypesWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereEventTypeParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereEventTypeParam
	}
	mock.lockCountEventTypesWithSd.RLock()
	calls = mock.calls.CountEventTypesWithSd
	mock.lockCountEventTypesWithSd.RUnlock()
	return calls
}

// CountFiles calls CountFilesFunc.
func (mock *StoreMock) CountFiles(ctx context.Context, where parameter.WhereFileParam) (int64, error) {
	if mock.CountFilesFunc == nil {
		panic("StoreMock.CountFilesFunc: method is nil but Store.CountFiles was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereFileParam
	}{
		Ctx:   ctx,
		Where: where,
	}
	mock.lockCountFiles.Lock()
	mock.calls.CountFiles = append(mock.calls.CountFiles, callInfo)
	mock.lockCountFiles.Unlock()
	return mock.CountFilesFunc(ctx, where)
}

// CountFilesCalls gets all the calls that were made to CountFiles.
// Check the length with:
//
//	len(mockedStore.CountFilesCalls())
func (mock *StoreMock) CountFilesCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereFileParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereFileParam
	}
	mock.lockCountFiles.RLock()
	calls = mock.calls.CountFiles
	mock.lockCountFiles.RUnlock()
	return calls
}

// CountFilesWithSd calls CountFilesWithSdFunc.
func (mock *StoreMock) CountFilesWithSd(ctx context.Context, sd Sd, where parameter.WhereFileParam) (int64, error) {
	if mock.CountFilesWithSdFunc == nil {
		panic("StoreMock.CountFilesWithSdFunc: method is nil but Store.CountFilesWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereFileParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
	}
	mock.lockCountFilesWithSd.Lock()
	mock.calls.CountFilesWithSd = append(mock.calls.CountFilesWithSd, callInfo)
	mock.lockCountFilesWithSd.Unlock()
	return mock.CountFilesWithSdFunc(ctx, sd, where)
}

// CountFilesWithSdCalls gets all the calls that were made to CountFilesWithSd.
// Check the length with:
//
//	len(mockedStore.CountFilesWithSdCalls())
func (mock *StoreMock) CountFilesWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereFileParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereFileParam
	}
	mock.lockCountFilesWithSd.RLock()
	calls = mock.calls.CountFilesWithSd
	mock.lockCountFilesWithSd.RUnlock()
	return calls
}

// CountGrades calls CountGradesFunc.
func (mock *StoreMock) CountGrades(ctx context.Context, where parameter.WhereGradeParam) (int64, error) {
	if mock.CountGradesFunc == nil {
		panic("StoreMock.CountGradesFunc: method is nil but Store.CountGrades was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereGradeParam
	}{
		Ctx:   ctx,
		Where: where,
	}
	mock.lockCountGrades.Lock()
	mock.calls.CountGrades = append(mock.calls.CountGrades, callInfo)
	mock.lockCountGrades.Unlock()
	return mock.CountGradesFunc(ctx, where)
}

// CountGradesCalls gets all the calls that were made to CountGrades.
// Check the length with:
//
//	len(mockedStore.CountGradesCalls())
func (mock *StoreMock) CountGradesCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereGradeParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereGradeParam
	}
	mock.lockCountGrades.RLock()
	calls = mock.calls.CountGrades
	mock.lockCountGrades.RUnlock()
	return calls
}

// CountGradesWithSd calls CountGradesWithSdFunc.
func (mock *StoreMock) CountGradesWithSd(ctx context.Context, sd Sd, where parameter.WhereGradeParam) (int64, error) {
	if mock.CountGradesWithSdFunc == nil {
		panic("StoreMock.CountGradesWithSdFunc: method is nil but Store.CountGradesWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereGradeParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
	}
	mock.lockCountGradesWithSd.Lock()
	mock.calls.CountGradesWithSd = append(mock.calls.CountGradesWithSd, callInfo)
	mock.lockCountGradesWithSd.Unlock()
	return mock.CountGradesWithSdFunc(ctx, sd, where)
}

// CountGradesWithSdCalls gets all the calls that were made to CountGradesWithSd.
// Check the length with:
//
//	len(mockedStore.CountGradesWithSdCalls())
func (mock *StoreMock) CountGradesWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereGradeParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereGradeParam
	}
	mock.lockCountGradesWithSd.RLock()
	calls = mock.calls.CountGradesWithSd
	mock.lockCountGradesWithSd.RUnlock()
	return calls
}

// CountGroups calls CountGroupsFunc.
func (mock *StoreMock) CountGroups(ctx context.Context, where parameter.WhereGroupParam) (int64, error) {
	if mock.CountGroupsFunc == nil {
		panic("StoreMock.CountGroupsFunc: method is nil but Store.CountGroups was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereGroupParam
	}{
		Ctx:   ctx,
		Where: where,
	}
	mock.lockCountGroups.Lock()
	mock.calls.CountGroups = append(mock.calls.CountGroups, callInfo)
	mock.lockCountGroups.Unlock()
	return mock.CountGroupsFunc(ctx, where)
}

// CountGroupsCalls gets all the calls that were made to CountGroups.
// Check the length with:
//
//	len(mockedStore.CountGroupsCalls())
func (mock *StoreMock) CountGroupsCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereGroupParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereGroupParam
	}
	mock.lockCountGroups.RLock()
	calls = mock.calls.CountGroups
	mock.lockCountGroups.RUnlock()
	return calls
}

// CountGroupsWithSd calls CountGroupsWithSdFunc.
func (mock *StoreMock) CountGroupsWithSd(ctx context.Context, sd Sd, where parameter.WhereGroupParam) (int64, error) {
	if mock.CountGroupsWithSdFunc == nil {
		panic("StoreMock.CountGroupsWithSdFunc: method is nil but Store.CountGroupsWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereGroupParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
	}
	mock.lockCountGroupsWithSd.Lock()
	mock.calls.CountGroupsWithSd = append(mock.calls.CountGroupsWithSd, callInfo)
	mock.lockCountGroupsWithSd.Unlock()
	return mock.CountGroupsWithSdFunc(ctx, sd, where)
}

// CountGroupsWithSdCalls gets all the calls that were made to CountGroupsWithSd.
// Check the length with:
//
//	len(mockedStore.CountGroupsWithSdCalls())
func (mock *StoreMock) CountGroupsWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereGroupParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereGroupParam
	}
	mock.lockCountGroupsWithSd.RLock()
	calls = mock.calls.CountGroupsWithSd
	mock.lockCountGroupsWithSd.RUnlock()
	return calls
}

// CountImages calls CountImagesFunc.
func (mock *StoreMock) CountImages(ctx context.Context, where parameter.WhereImageParam) (int64, error) {
	if mock.CountImagesFunc == nil {
		panic("StoreMock.CountImagesFunc: method is nil but Store.CountImages was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereImageParam
	}{
		Ctx:   ctx,
		Where: where,
	}
	mock.lockCountImages.Lock()
	mock.calls.CountImages = append(mock.calls.CountImages, callInfo)
	mock.lockCountImages.Unlock()
	return mock.CountImagesFunc(ctx, where)
}

// CountImagesCalls gets all the calls that were made to CountImages.
// Check the length with:
//
//	len(mockedStore.CountImagesCalls())
func (mock *StoreMock) CountImagesCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereImageParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereImageParam
	}
	mock.lockCountImages.RLock()
	calls = mock.calls.CountImages
	mock.lockCountImages.RUnlock()
	return calls
}

// CountImagesWithSd calls CountImagesWithSdFunc.
func (mock *StoreMock) CountImagesWithSd(ctx context.Context, sd Sd, where parameter.WhereImageParam) (int64, error) {
	if mock.CountImagesWithSdFunc == nil {
		panic("StoreMock.CountImagesWithSdFunc: method is nil but Store.CountImagesWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereImageParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
	}
	mock.lockCountImagesWithSd.Lock()
	mock.calls.CountImagesWithSd = append(mock.calls.CountImagesWithSd, callInfo)
	mock.lockCountImagesWithSd.Unlock()
	return mock.CountImagesWithSdFunc(ctx, sd, where)
}

// CountImagesWithSdCalls gets all the calls that were made to CountImagesWithSd.
// Check the length with:
//
//	len(mockedStore.CountImagesWithSdCalls())
func (mock *StoreMock) CountImagesWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereImageParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereImageParam
	}
	mock.lockCountImagesWithSd.RLock()
	calls = mock.calls.CountImagesWithSd
	mock.lockCountImagesWithSd.RUnlock()
	return calls
}

// CountMembers calls CountMembersFunc.
func (mock *StoreMock) CountMembers(ctx context.Context, where parameter.WhereMemberParam) (int64, error) {
	if mock.CountMembersFunc == nil {
		panic("StoreMock.CountMembersFunc: method is nil but Store.CountMembers was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereMemberParam
	}{
		Ctx:   ctx,
		Where: where,
	}
	mock.lockCountMembers.Lock()
	mock.calls.CountMembers = append(mock.calls.CountMembers, callInfo)
	mock.lockCountMembers.Unlock()
	return mock.CountMembersFunc(ctx, where)
}

// CountMembersCalls gets all the calls that were made to CountMembers.
// Check the length with:
//
//	len(mockedStore.CountMembersCalls())
func (mock *StoreMock) CountMembersCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereMemberParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereMemberParam
	}
	mock.lockCountMembers.RLock()
	calls = mock.calls.CountMembers
	mock.lockCountMembers.RUnlock()
	return calls
}

// CountMembersOnChatRoom calls CountMembersOnChatRoomFunc.
func (mock *StoreMock) CountMembersOnChatRoom(ctx context.Context, chatRoomID uuid.UUID, where parameter.WhereMemberOnChatRoomParam) (int64, error) {
	if mock.CountMembersOnChatRoomFunc == nil {
		panic("StoreMock.CountMembersOnChatRoomFunc: method is nil but Store.CountMembersOnChatRoom was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ChatRoomID uuid.UUID
		Where      parameter.WhereMemberOnChatRoomParam
	}{
		Ctx:        ctx,
		ChatRoomID: chatRoomID,
		Where:      where,
	}
	mock.lockCountMembersOnChatRoom.Lock()
	mock.calls.CountMembersOnChatRoom = append(mock.calls.CountMembersOnChatRoom, callInfo)
	mock.lockCountMembersOnChatRoom.Unlock()
	return mock.CountMembersOnChatRoomFunc(ctx, chatRoomID, where)
}

// CountMembersOnChatRoomCalls gets all the calls that were made to CountMembersOnChatRoom.
// Check the length with:
//
//	len(mockedStore.CountMembersOnChatRoomCalls())
func (mock *StoreMock) CountMembersOnChatRoomCalls() []struct {
	Ctx        context.Context
	ChatRoomID uuid.UUID
	Where      parameter.WhereMemberOnChatRoomParam
} {
	var calls []struct {
		Ctx        context.Context
		ChatRoomID uuid.UUID
		Where      parameter.WhereMemberOnChatRoomParam
	}
	mock.lockCountMembersOnChatRoom.RLock()
	calls = mock.calls.CountMembersOnChatRoom
	mock.lockCountMembersOnChatRoom.RUnlock()
	return calls
}

// CountMembersOnChatRoomAddMemberAction calls CountMembersOnChatRoomAddMemberActionFunc.
func (mock *StoreMock) CountMembersOnChatRoomAddMemberAction(ctx context.Context, chatRoomAddMemberActionID uuid.UUID, where parameter.WhereMemberOnChatRoomAddMemberActionParam) (int64, error) {
	if mock.CountMembersOnChatRoomAddMemberActionFunc == nil {
		panic("StoreMock.CountMembersOnChatRoomAddMemberActionFunc: method is nil but Store.CountMembersOnChatRoomAddMemberAction was just called")
	}
	callInfo := struct {
		Ctx                       context.Context
		ChatRoomAddMemberActionID uuid.UUID
		Where                     parameter.WhereMemberOnChatRoomAddMemberActionParam
	}{
		Ctx:                       ctx,
		ChatRoomAddMemberActionID: chatRoomAddMemberActionID,
		Where:                     where,
	}
	mock.lockCountMembersOnChatRoomAddMemberAction.Lock()
	mock.calls.CountMembersOnChatRoomAddMemberAction = append(mock.calls.CountMembersOnChatRoomAddMemberAction, callInfo)
	mock.lockCountMembersOnChatRoomAddMemberAction.Unlock()
	return mock.CountMembersOnChatRoomAddMemberActionFunc(ctx, chatRoomAddMemberActionID, where)
}

// CountMembersOnChatRoomAddMemberActionCalls gets all the calls that were made to CountMembersOnChatRoomAddMemberAction.
// Check the length with:
//
//	len(mockedStore.CountMembersOnChatRoomAddMemberActionCalls())
func (mock *StoreMock) CountMembersOnChatRoomAddMemberActionCalls() []struct {
	Ctx                       context.Context
	ChatRoomAddMemberActionID uuid.UUID
	Where                     parameter.WhereMemberOnChatRoomAddMemberActionParam
} {
	var calls []struct {
		Ctx                       context.Context
		ChatRoomAddMemberActionID uuid.UUID
		Where                     parameter.WhereMemberOnChatRoomAddMemberActionParam
	}
	mock.lockCountMembersOnChatRoomAddMemberAction.RLock()
	calls = mock.calls.CountMembersOnChatRoomAddMemberAction
	mock.lockCountMembersOnChatRoomAddMemberAction.RUnlock()
	return calls
}

// CountMembersOnChatRoomAddMemberActionWithSd calls CountMembersOnChatRoomAddMemberActionWithSdFunc.
func (mock *StoreMock) CountMembersOnChatRoomAddMemberActionWithSd(ctx context.Context, sd Sd, chatRoomAddMemberActionID uuid.UUID, where parameter.WhereMemberOnChatRoomAddMemberActionParam) (int64, error) {
	if mock.CountMembersOnChatRoomAddMemberActionWithSdFunc == nil {
		panic("StoreMock.CountMembersOnChatRoomAddMemberActionWithSdFunc: method is nil but Store.CountMembersOnChatRoomAddMemberActionWithSd was just called")
	}
	callInfo := struct {
		Ctx                       context.Context
		Sd                        Sd
		ChatRoomAddMemberActionID uuid.UUID
		Where                     parameter.WhereMemberOnChatRoomAddMemberActionParam
	}{
		Ctx:                       ctx,
		Sd:                        sd,
		ChatRoomAddMemberActionID: chatRoomAddMemberActionID,
		Where:                     where,
	}
	mock.lockCountMembersOnChatRoomAddMemberActionWithSd.Lock()
	mock.calls.CountMembersOnChatRoomAddMemberActionWithSd = append(mock.calls.CountMembersOnChatRoomAddMemberActionWithSd, callInfo)
	mock.lockCountMembersOnChatRoomAddMemberActionWithSd.Unlock()
	return mock.CountMembersOnChatRoomAddMemberActionWithSdFunc(ctx, sd, chatRoomAddMemberActionID, where)
}

// CountMembersOnChatRoomAddMemberActionWithSdCalls gets all the calls that were made to CountMembersOnChatRoomAddMemberActionWithSd.
// Check the length with:
//
//	len(mockedStore.CountMembersOnChatRoomAddMemberActionWithSdCalls())
func (mock *StoreMock) CountMembersOnChatRoomAddMemberActionWithSdCalls() []struct {
	Ctx                       context.Context
	Sd                        Sd
	ChatRoomAddMemberActionID uuid.UUID
	Where                     parameter.WhereMemberOnChatRoomAddMemberActionParam
} {
	var calls []struct {
		Ctx                       context.Context
		Sd                        Sd
		ChatRoomAddMemberActionID uuid.UUID
		Where                     parameter.WhereMemberOnChatRoomAddMemberActionParam
	}
	mock.lockCountMembersOnChatRoomAddMemberActionWithSd.RLock()
	calls = mock.calls.CountMembersOnChatRoomAddMemberActionWithSd
	mock.lockCountMembersOnChatRoomAddMemberActionWithSd.RUnlock()
	return calls
}

// CountMembersOnChatRoomRemoveMemberAction calls CountMembersOnChatRoomRemoveMemberActionFunc.
func (mock *StoreMock) CountMembersOnChatRoomRemoveMemberAction(ctx context.Context, chatRoomRemoveMemberActionID uuid.UUID, where parameter.WhereMemberOnChatRoomRemoveMemberActionParam) (int64, error) {
	if mock.CountMembersOnChatRoomRemoveMemberActionFunc == nil {
		panic("StoreMock.CountMembersOnChatRoomRemoveMemberActionFunc: method is nil but Store.CountMembersOnChatRoomRemoveMemberAction was just called")
	}
	callInfo := struct {
		Ctx                          context.Context
		ChatRoomRemoveMemberActionID uuid.UUID
		Where                        parameter.WhereMemberOnChatRoomRemoveMemberActionParam
	}{
		Ctx:                          ctx,
		ChatRoomRemoveMemberActionID: chatRoomRemoveMemberActionID,
		Where:                        where,
	}
	mock.lockCountMembersOnChatRoomRemoveMemberAction.Lock()
	mock.calls.CountMembersOnChatRoomRemoveMemberAction = append(mock.calls.CountMembersOnChatRoomRemoveMemberAction, callInfo)
	mock.lockCountMembersOnChatRoomRemoveMemberAction.Unlock()
	return mock.CountMembersOnChatRoomRemoveMemberActionFunc(ctx, chatRoomRemoveMemberActionID, where)
}

// CountMembersOnChatRoomRemoveMemberActionCalls gets all the calls that were made to CountMembersOnChatRoomRemoveMemberAction.
// Check the length with:
//
//	len(mockedStore.CountMembersOnChatRoomRemoveMemberActionCalls())
func (mock *StoreMock) CountMembersOnChatRoomRemoveMemberActionCalls() []struct {
	Ctx                          context.Context
	ChatRoomRemoveMemberActionID uuid.UUID
	Where                        parameter.WhereMemberOnChatRoomRemoveMemberActionParam
} {
	var calls []struct {
		Ctx                          context.Context
		ChatRoomRemoveMemberActionID uuid.UUID
		Where                        parameter.WhereMemberOnChatRoomRemoveMemberActionParam
	}
	mock.lockCountMembersOnChatRoomRemoveMemberAction.RLock()
	calls = mock.calls.CountMembersOnChatRoomRemoveMemberAction
	mock.lockCountMembersOnChatRoomRemoveMemberAction.RUnlock()
	return calls
}

// CountMembersOnChatRoomRemoveMemberActionWithSd calls CountMembersOnChatRoomRemoveMemberActionWithSdFunc.
func (mock *StoreMock) CountMembersOnChatRoomRemoveMemberActionWithSd(ctx context.Context, sd Sd, chatRoomRemoveMemberActionID uuid.UUID, where parameter.WhereMemberOnChatRoomRemoveMemberActionParam) (int64, error) {
	if mock.CountMembersOnChatRoomRemoveMemberActionWithSdFunc == nil {
		panic("StoreMock.CountMembersOnChatRoomRemoveMemberActionWithSdFunc: method is nil but Store.CountMembersOnChatRoomRemoveMemberActionWithSd was just called")
	}
	callInfo := struct {
		Ctx                          context.Context
		Sd                           Sd
		ChatRoomRemoveMemberActionID uuid.UUID
		Where                        parameter.WhereMemberOnChatRoomRemoveMemberActionParam
	}{
		Ctx:                          ctx,
		Sd:                           sd,
		ChatRoomRemoveMemberActionID: chatRoomRemoveMemberActionID,
		Where:                        where,
	}
	mock.lockCountMembersOnChatRoomRemoveMemberActionWithSd.Lock()
	mock.calls.CountMembersOnChatRoomRemoveMemberActionWithSd = append(mock.calls.CountMembersOnChatRoomRemoveMemberActionWithSd, callInfo)
	mock.lockCountMembersOnChatRoomRemoveMemberActionWithSd.Unlock()
	return mock.CountMembersOnChatRoomRemoveMemberActionWithSdFunc(ctx, sd, chatRoomRemoveMemberActionID, where)
}

// CountMembersOnChatRoomRemoveMemberActionWithSdCalls gets all the calls that were made to CountMembersOnChatRoomRemoveMemberActionWithSd.
// Check the length with:
//
//	len(mockedStore.CountMembersOnChatRoomRemoveMemberActionWithSdCalls())
func (mock *StoreMock) CountMembersOnChatRoomRemoveMemberActionWithSdCalls() []struct {
	Ctx                          context.Context
	Sd                           Sd
	ChatRoomRemoveMemberActionID uuid.UUID
	Where                        parameter.WhereMemberOnChatRoomRemoveMemberActionParam
} {
	var calls []struct {
		Ctx                          context.Context
		Sd                           Sd
		ChatRoomRemoveMemberActionID uuid.UUID
		Where                        parameter.WhereMemberOnChatRoomRemoveMemberActionParam
	}
	mock.lockCountMembersOnChatRoomRemoveMemberActionWithSd.RLock()
	calls = mock.calls.CountMembersOnChatRoomRemoveMemberActionWithSd
	mock.lockCountMembersOnChatRoomRemoveMemberActionWithSd.RUnlock()
	return calls
}

// CountMembersOnChatRoomWithSd calls CountMembersOnChatRoomWithSdFunc.
func (mock *StoreMock) CountMembersOnChatRoomWithSd(ctx context.Context, sd Sd, chatRoomID uuid.UUID, where parameter.WhereMemberOnChatRoomParam) (int64, error) {
	if mock.CountMembersOnChatRoomWithSdFunc == nil {
		panic("StoreMock.CountMembersOnChatRoomWithSdFunc: method is nil but Store.CountMembersOnChatRoomWithSd was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Sd         Sd
		ChatRoomID uuid.UUID
		Where      parameter.WhereMemberOnChatRoomParam
	}{
		Ctx:        ctx,
		Sd:         sd,
		ChatRoomID: chatRoomID,
		Where:      where,
	}
	mock.lockCountMembersOnChatRoomWithSd.Lock()
	mock.calls.CountMembersOnChatRoomWithSd = append(mock.calls.CountMembersOnChatRoomWithSd, callInfo)
	mock.lockCountMembersOnChatRoomWithSd.Unlock()
	return mock.CountMembersOnChatRoomWithSdFunc(ctx, sd, chatRoomID, where)
}

// CountMembersOnChatRoomWithSdCalls gets all the calls that were made to CountMembersOnChatRoomWithSd.
// Check the length with:
//
//	len(mockedStore.CountMembersOnChatRoomWithSdCalls())
func (mock *StoreMock) CountMembersOnChatRoomWithSdCalls() []struct {
	Ctx        context.Context
	Sd         Sd
	ChatRoomID uuid.UUID
	Where      parameter.WhereMemberOnChatRoomParam
} {
	var calls []struct {
		Ctx        context.Context
		Sd         Sd
		ChatRoomID uuid.UUID
		Where      parameter.WhereMemberOnChatRoomParam
	}
	mock.lockCountMembersOnChatRoomWithSd.RLock()
	calls = mock.calls.CountMembersOnChatRoomWithSd
	mock.lockCountMembersOnChatRoomWithSd.RUnlock()
	return calls
}

// CountMembersOnOrganization calls CountMembersOnOrganizationFunc.
func (mock *StoreMock) CountMembersOnOrganization(ctx context.Context, organizationID uuid.UUID, where parameter.WhereMemberOnOrganizationParam) (int64, error) {
	if mock.CountMembersOnOrganizationFunc == nil {
		panic("StoreMock.CountMembersOnOrganizationFunc: method is nil but Store.CountMembersOnOrganization was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		OrganizationID uuid.UUID
		Where          parameter.WhereMemberOnOrganizationParam
	}{
		Ctx:            ctx,
		OrganizationID: organizationID,
		Where:          where,
	}
	mock.lockCountMembersOnOrganization.Lock()
	mock.calls.CountMembersOnOrganization = append(mock.calls.CountMembersOnOrganization, callInfo)
	mock.lockCountMembersOnOrganization.Unlock()
	return mock.CountMembersOnOrganizationFunc(ctx, organizationID, where)
}

// CountMembersOnOrganizationCalls gets all the calls that were made to CountMembersOnOrganization.
// Check the length with:
//
//	len(mockedStore.CountMembersOnOrganizationCalls())
func (mock *StoreMock) CountMembersOnOrganizationCalls() []struct {
	Ctx            context.Context
	OrganizationID uuid.UUID
	Where          parameter.WhereMemberOnOrganizationParam
} {
	var calls []struct {
		Ctx            context.Context
		OrganizationID uuid.UUID
		Where          parameter.WhereMemberOnOrganizationParam
	}
	mock.lockCountMembersOnOrganization.RLock()
	calls = mock.calls.CountMembersOnOrganization
	mock.lockCountMembersOnOrganization.RUnlock()
	return calls
}

// CountMembersOnOrganizationWithSd calls CountMembersOnOrganizationWithSdFunc.
func (mock *StoreMock) CountMembersOnOrganizationWithSd(ctx context.Context, sd Sd, organizationID uuid.UUID, where parameter.WhereMemberOnOrganizationParam) (int64, error) {
	if mock.CountMembersOnOrganizationWithSdFunc == nil {
		panic("StoreMock.CountMembersOnOrganizationWithSdFunc: method is nil but Store.CountMembersOnOrganizationWithSd was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		Sd             Sd
		OrganizationID uuid.UUID
		Where          parameter.WhereMemberOnOrganizationParam
	}{
		Ctx:            ctx,
		Sd:             sd,
		OrganizationID: organizationID,
		Where:          where,
	}
	mock.lockCountMembersOnOrganizationWithSd.Lock()
	mock.calls.CountMembersOnOrganizationWithSd = append(mock.calls.CountMembersOnOrganizationWithSd, callInfo)
	mock.lockCountMembersOnOrganizationWithSd.Unlock()
	return mock.CountMembersOnOrganizationWithSdFunc(ctx, sd, organizationID, where)
}

// CountMembersOnOrganizationWithSdCalls gets all the calls that were made to CountMembersOnOrganizationWithSd.
// Check the length with:
//
//	len(mockedStore.CountMembersOnOrganizationWithSdCalls())
func (mock *StoreMock) CountMembersOnOrganizationWithSdCalls() []struct {
	Ctx            context.Context
	Sd             Sd
	OrganizationID uuid.UUID
	Where          parameter.WhereMemberOnOrganizationParam
} {
	var calls []struct {
		Ctx            context.Context
		Sd             Sd
		OrganizationID uuid.UUID
		Where          parameter.WhereMemberOnOrganizationParam
	}
	mock.lockCountMembersOnOrganizationWithSd.RLock()
	calls = mock.calls.CountMembersOnOrganizationWithSd
	mock.lockCountMembersOnOrganizationWithSd.RUnlock()
	return calls
}

// CountMembersWithSd calls CountMembersWithSdFunc.
func (mock *StoreMock) CountMembersWithSd(ctx context.Context, sd Sd, where parameter.WhereMemberParam) (int64, error) {
	if mock.CountMembersWithSdFunc == nil {
		panic("StoreMock.CountMembersWithSdFunc: method is nil but Store.CountMembersWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereMemberParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
	}
	mock.lockCountMembersWithSd.Lock()
	mock.calls.CountMembersWithSd = append(mock.calls.CountMembersWithSd, callInfo)
	mock.lockCountMembersWithSd.Unlock()
	return mock.CountMembersWithSdFunc(ctx, sd, where)
}

// CountMembersWithSdCalls gets all the calls that were made to CountMembersWithSd.
// Check the length with:
//
//	len(mockedStore.CountMembersWithSdCalls())
func (mock *StoreMock) CountMembersWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereMemberParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereMemberParam
	}
	mock.lockCountMembersWithSd.RLock()
	calls = mock.calls.CountMembersWithSd
	mock.lockCountMembersWithSd.RUnlock()
	return calls
}

// CountMessages calls CountMessagesFunc.
func (mock *StoreMock) CountMessages(ctx context.Context, where parameter.WhereMessageParam) (int64, error) {
	if mock.CountMessagesFunc == nil {
		panic("StoreMock.CountMessagesFunc: method is nil but Store.CountMessages was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereMessageParam
	}{
		Ctx:   ctx,
		Where: where,
	}
	mock.lockCountMessages.Lock()
	mock.calls.CountMessages = append(mock.calls.CountMessages, callInfo)
	mock.lockCountMessages.Unlock()
	return mock.CountMessagesFunc(ctx, where)
}

// CountMessagesCalls gets all the calls that were made to CountMessages.
// Check the length with:
//
//	len(mockedStore.CountMessagesCalls())
func (mock *StoreMock) CountMessagesCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereMessageParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereMessageParam
	}
	mock.lockCountMessages.RLock()
	calls = mock.calls.CountMessages
	mock.lockCountMessages.RUnlock()
	return calls
}

// CountMessagesWithSd calls CountMessagesWithSdFunc.
func (mock *StoreMock) CountMessagesWithSd(ctx context.Context, sd Sd, where parameter.WhereMessageParam) (int64, error) {
	if mock.CountMessagesWithSdFunc == nil {
		panic("StoreMock.CountMessagesWithSdFunc: method is nil but Store.CountMessagesWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereMessageParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
	}
	mock.lockCountMessagesWithSd.Lock()
	mock.calls.CountMessagesWithSd = append(mock.calls.CountMessagesWithSd, callInfo)
	mock.lockCountMessagesWithSd.Unlock()
	return mock.CountMessagesWithSdFunc(ctx, sd, where)
}

// CountMessagesWithSdCalls gets all the calls that were made to CountMessagesWithSd.
// Check the length with:
//
//	len(mockedStore.CountMessagesWithSdCalls())
func (mock *StoreMock) CountMessagesWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereMessageParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereMessageParam
	}
	mock.lockCountMessagesWithSd.RLock()
	calls = mock.calls.CountMessagesWithSd
	mock.lockCountMessagesWithSd.RUnlock()
	return calls
}

// CountMimeTypes calls CountMimeTypesFunc.
func (mock *StoreMock) CountMimeTypes(ctx context.Context, where parameter.WhereMimeTypeParam) (int64, error) {
	if mock.CountMimeTypesFunc == nil {
		panic("StoreMock.CountMimeTypesFunc: method is nil but Store.CountMimeTypes was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereMimeTypeParam
	}{
		Ctx:   ctx,
		Where: where,
	}
	mock.lockCountMimeTypes.Lock()
	mock.calls.CountMimeTypes = append(mock.calls.CountMimeTypes, callInfo)
	mock.lockCountMimeTypes.Unlock()
	return mock.CountMimeTypesFunc(ctx, where)
}

// CountMimeTypesCalls gets all the calls that were made to CountMimeTypes.
// Check the length with:
//
//	len(mockedStore.CountMimeTypesCalls())
func (mock *StoreMock) CountMimeTypesCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereMimeTypeParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereMimeTypeParam
	}
	mock.lockCountMimeTypes.RLock()
	calls = mock.calls.CountMimeTypes
	mock.lockCountMimeTypes.RUnlock()
	return calls
}

// CountMimeTypesWithSd calls CountMimeTypesWithSdFunc.
func (mock *StoreMock) CountMimeTypesWithSd(ctx context.Context, sd Sd, where parameter.WhereMimeTypeParam) (int64, error) {
	if mock.CountMimeTypesWithSdFunc == nil {
		panic("StoreMock.CountMimeTypesWithSdFunc: method is nil but Store.CountMimeTypesWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereMimeTypeParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
	}
	mock.lockCountMimeTypesWithSd.Lock()
	mock.calls.CountMimeTypesWithSd = append(mock.calls.CountMimeTypesWithSd, callInfo)
	mock.lockCountMimeTypesWithSd.Unlock()
	return mock.CountMimeTypesWithSdFunc(ctx, sd, where)
}

// CountMimeTypesWithSdCalls gets all the calls that were made to CountMimeTypesWithSd.
// Check the length with:
//
//	len(mockedStore.CountMimeTypesWithSdCalls())
func (mock *StoreMock) CountMimeTypesWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereMimeTypeParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereMimeTypeParam
	}
	mock.lockCountMimeTypesWithSd.RLock()
	calls = mock.calls.CountMimeTypesWithSd
	mock.lockCountMimeTypesWithSd.RUnlock()
	return calls
}

// CountOrganizations calls CountOrganizationsFunc.
func (mock *StoreMock) CountOrganizations(ctx context.Context, where parameter.WhereOrganizationParam) (int64, error) {
	if mock.CountOrganizationsFunc == nil {
		panic("StoreMock.CountOrganizationsFunc: method is nil but Store.CountOrganizations was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereOrganizationParam
	}{
		Ctx:   ctx,
		Where: where,
	}
	mock.lockCountOrganizations.Lock()
	mock.calls.CountOrganizations = append(mock.calls.CountOrganizations, callInfo)
	mock.lockCountOrganizations.Unlock()
	return mock.CountOrganizationsFunc(ctx, where)
}

// CountOrganizationsCalls gets all the calls that were made to CountOrganizations.
// Check the length with:
//
//	len(mockedStore.CountOrganizationsCalls())
func (mock *StoreMock) CountOrganizationsCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereOrganizationParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereOrganizationParam
	}
	mock.lockCountOrganizations.RLock()
	calls = mock.calls.CountOrganizations
	mock.lockCountOrganizations.RUnlock()
	return calls
}

// CountOrganizationsOnMember calls CountOrganizationsOnMemberFunc.
func (mock *StoreMock) CountOrganizationsOnMember(ctx context.Context, memberID uuid.UUID, where parameter.WhereOrganizationOnMemberParam) (int64, error) {
	if mock.CountOrganizationsOnMemberFunc == nil {
		panic("StoreMock.CountOrganizationsOnMemberFunc: method is nil but Store.CountOrganizationsOnMember was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		MemberID uuid.UUID
		Where    parameter.WhereOrganizationOnMemberParam
	}{
		Ctx:      ctx,
		MemberID: memberID,
		Where:    where,
	}
	mock.lockCountOrganizationsOnMember.Lock()
	mock.calls.CountOrganizationsOnMember = append(mock.calls.CountOrganizationsOnMember, callInfo)
	mock.lockCountOrganizationsOnMember.Unlock()
	return mock.CountOrganizationsOnMemberFunc(ctx, memberID, where)
}

// CountOrganizationsOnMemberCalls gets all the calls that were made to CountOrganizationsOnMember.
// Check the length with:
//
//	len(mockedStore.CountOrganizationsOnMemberCalls())
func (mock *StoreMock) CountOrganizationsOnMemberCalls() []struct {
	Ctx      context.Context
	MemberID uuid.UUID
	Where    parameter.WhereOrganizationOnMemberParam
} {
	var calls []struct {
		Ctx      context.Context
		MemberID uuid.UUID
		Where    parameter.WhereOrganizationOnMemberParam
	}
	mock.lockCountOrganizationsOnMember.RLock()
	calls = mock.calls.CountOrganizationsOnMember
	mock.lockCountOrganizationsOnMember.RUnlock()
	return calls
}

// CountOrganizationsOnMemberWithSd calls CountOrganizationsOnMemberWithSdFunc.
func (mock *StoreMock) CountOrganizationsOnMemberWithSd(ctx context.Context, sd Sd, memberID uuid.UUID, where parameter.WhereOrganizationOnMemberParam) (int64, error) {
	if mock.CountOrganizationsOnMemberWithSdFunc == nil {
		panic("StoreMock.CountOrganizationsOnMemberWithSdFunc: method is nil but Store.CountOrganizationsOnMemberWithSd was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Sd       Sd
		MemberID uuid.UUID
		Where    parameter.WhereOrganizationOnMemberParam
	}{
		Ctx:      ctx,
		Sd:       sd,
		MemberID: memberID,
		Where:    where,
	}
	mock.lockCountOrganizationsOnMemberWithSd.Lock()
	mock.calls.CountOrganizationsOnMemberWithSd = append(mock.calls.CountOrganizationsOnMemberWithSd, callInfo)
	mock.lockCountOrganizationsOnMemberWithSd.Unlock()
	return mock.CountOrganizationsOnMemberWithSdFunc(ctx, sd, memberID, where)
}

// CountOrganizationsOnMemberWithSdCalls gets all the calls that were made to CountOrganizationsOnMemberWithSd.
// Check the length with:
//
//	len(mockedStore.CountOrganizationsOnMemberWithSdCalls())
func (mock *StoreMock) CountOrganizationsOnMemberWithSdCalls() []struct {
	Ctx      context.Context
	Sd       Sd
	MemberID uuid.UUID
	Where    parameter.WhereOrganizationOnMemberParam
} {
	var calls []struct {
		Ctx      context.Context
		Sd       Sd
		MemberID uuid.UUID
		Where    parameter.WhereOrganizationOnMemberParam
	}
	mock.lockCountOrganizationsOnMemberWithSd.RLock()
	calls = mock.calls.CountOrganizationsOnMemberWithSd
	mock.lockCountOrganizationsOnMemberWithSd.RUnlock()
	return calls
}

// CountOrganizationsWithSd calls CountOrganizationsWithSdFunc.
func (mock *StoreMock) CountOrganizationsWithSd(ctx context.Context, sd Sd, where parameter.WhereOrganizationParam) (int64, error) {
	if mock.CountOrganizationsWithSdFunc == nil {
		panic("StoreMock.CountOrganizationsWithSdFunc: method is nil but Store.CountOrganizationsWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereOrganizationParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
	}
	mock.lockCountOrganizationsWithSd.Lock()
	mock.calls.CountOrganizationsWithSd = append(mock.calls.CountOrganizationsWithSd, callInfo)
	mock.lockCountOrganizationsWithSd.Unlock()
	return mock.CountOrganizationsWithSdFunc(ctx, sd, where)
}

// CountOrganizationsWithSdCalls gets all the calls that were made to CountOrganizationsWithSd.
// Check the length with:
//
//	len(mockedStore.CountOrganizationsWithSdCalls())
func (mock *StoreMock) CountOrganizationsWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereOrganizationParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereOrganizationParam
	}
	mock.lockCountOrganizationsWithSd.RLock()
	calls = mock.calls.CountOrganizationsWithSd
	mock.lockCountOrganizationsWithSd.RUnlock()
	return calls
}

// CountPermissionCategories calls CountPermissionCategoriesFunc.
func (mock *StoreMock) CountPermissionCategories(ctx context.Context, where parameter.WherePermissionCategoryParam) (int64, error) {
	if mock.CountPermissionCategoriesFunc == nil {
		panic("StoreMock.CountPermissionCategoriesFunc: method is nil but Store.CountPermissionCategories was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WherePermissionCategoryParam
	}{
		Ctx:   ctx,
		Where: where,
	}
	mock.lockCountPermissionCategories.Lock()
	mock.calls.CountPermissionCategories = append(mock.calls.CountPermissionCategories, callInfo)
	mock.lockCountPermissionCategories.Unlock()
	return mock.CountPermissionCategoriesFunc(ctx, where)
}

// CountPermissionCategoriesCalls gets all the calls that were made to CountPermissionCategories.
// Check the length with:
//
//	len(mockedStore.CountPermissionCategoriesCalls())
func (mock *StoreMock) CountPermissionCategoriesCalls() []struct {
	Ctx   context.Context
	Where parameter.WherePermissionCategoryParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WherePermissionCategoryParam
	}
	mock.lockCountPermissionCategories.RLock()
	calls = mock.calls.CountPermissionCategories
	mock.lockCountPermissionCategories.RUnlock()
	return calls
}

// CountPermissionCategoriesWithSd calls CountPermissionCategoriesWithSdFunc.
func (mock *StoreMock) CountPermissionCategoriesWithSd(ctx context.Context, sd Sd, where parameter.WherePermissionCategoryParam) (int64, error) {
	if mock.CountPermissionCategoriesWithSdFunc == nil {
		panic("StoreMock.CountPermissionCategoriesWithSdFunc: method is nil but Store.CountPermissionCategoriesWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WherePermissionCategoryParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
	}
	mock.lockCountPermissionCategoriesWithSd.Lock()
	mock.calls.CountPermissionCategoriesWithSd = append(mock.calls.CountPermissionCategoriesWithSd, callInfo)
	mock.lockCountPermissionCategoriesWithSd.Unlock()
	return mock.CountPermissionCategoriesWithSdFunc(ctx, sd, where)
}

// CountPermissionCategoriesWithSdCalls gets all the calls that were made to CountPermissionCategoriesWithSd.
// Check the length with:
//
//	len(mockedStore.CountPermissionCategoriesWithSdCalls())
func (mock *StoreMock) CountPermissionCategoriesWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WherePermissionCategoryParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WherePermissionCategoryParam
	}
	mock.lockCountPermissionCategoriesWithSd.RLock()
	calls = mock.calls.CountPermissionCategoriesWithSd
	mock.lockCountPermissionCategoriesWithSd.RUnlock()
	return calls
}

// CountPermissions calls CountPermissionsFunc.
func (mock *StoreMock) CountPermissions(ctx context.Context, where parameter.WherePermissionParam) (int64, error) {
	if mock.CountPermissionsFunc == nil {
		panic("StoreMock.CountPermissionsFunc: method is nil but Store.CountPermissions was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WherePermissionParam
	}{
		Ctx:   ctx,
		Where: where,
	}
	mock.lockCountPermissions.Lock()
	mock.calls.CountPermissions = append(mock.calls.CountPermissions, callInfo)
	mock.lockCountPermissions.Unlock()
	return mock.CountPermissionsFunc(ctx, where)
}

// CountPermissionsCalls gets all the calls that were made to CountPermissions.
// Check the length with:
//
//	len(mockedStore.CountPermissionsCalls())
func (mock *StoreMock) CountPermissionsCalls() []struct {
	Ctx   context.Context
	Where parameter.WherePermissionParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WherePermissionParam
	}
	mock.lockCountPermissions.RLock()
	calls = mock.calls.CountPermissions
	mock.lockCountPermissions.RUnlock()
	return calls
}

// CountPermissionsWithSd calls CountPermissionsWithSdFunc.
func (mock *StoreMock) CountPermissionsWithSd(ctx context.Context, sd Sd, where parameter.WherePermissionParam) (int64, error) {
	if mock.CountPermissionsWithSdFunc == nil {
		panic("StoreMock.CountPermissionsWithSdFunc: method is nil but Store.CountPermissionsWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WherePermissionParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
	}
	mock.lockCountPermissionsWithSd.Lock()
	mock.calls.CountPermissionsWithSd = append(mock.calls.CountPermissionsWithSd, callInfo)
	mock.lockCountPermissionsWithSd.Unlock()
	return mock.CountPermissionsWithSdFunc(ctx, sd, where)
}

// CountPermissionsWithSdCalls gets all the calls that were made to CountPermissionsWithSd.
// Check the length with:
//
//	len(mockedStore.CountPermissionsWithSdCalls())
func (mock *StoreMock) CountPermissionsWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WherePermissionParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WherePermissionParam
	}
	mock.lockCountPermissionsWithSd.RLock()
	calls = mock.calls.CountPermissionsWithSd
	mock.lockCountPermissionsWithSd.RUnlock()
	return calls
}

// CountPolicies calls CountPoliciesFunc.
func (mock *StoreMock) CountPolicies(ctx context.Context, where parameter.WherePolicyParam) (int64, error) {
	if mock.CountPoliciesFunc == nil {
		panic("StoreMock.CountPoliciesFunc: method is nil but Store.CountPolicies was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WherePolicyParam
	}{
		Ctx:   ctx,
		Where: where,
	}
	mock.lockCountPolicies.Lock()
	mock.calls.CountPolicies = append(mock.calls.CountPolicies, callInfo)
	mock.lockCountPolicies.Unlock()
	return mock.CountPoliciesFunc(ctx, where)
}

// CountPoliciesCalls gets all the calls that were made to CountPolicies.
// Check the length with:
//
//	len(mockedStore.CountPoliciesCalls())
func (mock *StoreMock) CountPoliciesCalls() []struct {
	Ctx   context.Context
	Where parameter.WherePolicyParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WherePolicyParam
	}
	mock.lockCountPolicies.RLock()
	calls = mock.calls.CountPolicies
	mock.lockCountPolicies.RUnlock()
	return calls
}

// CountPoliciesOnRole calls CountPoliciesOnRoleFunc.
func (mock *StoreMock) CountPoliciesOnRole(ctx context.Context, roleID uuid.UUID, where parameter.WherePolicyOnRoleParam) (int64, error) {
	if mock.CountPoliciesOnRoleFunc == nil {
		panic("StoreMock.CountPoliciesOnRoleFunc: method is nil but Store.CountPoliciesOnRole was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		RoleID uuid.UUID
		Where  parameter.WherePolicyOnRoleParam
	}{
		Ctx:    ctx,
		RoleID: roleID,
		Where:  where,
	}
	mock.lockCountPoliciesOnRole.Lock()
	mock.calls.CountPoliciesOnRole = append(mock.calls.CountPoliciesOnRole, callInfo)
	mock.lockCountPoliciesOnRole.Unlock()
	return mock.CountPoliciesOnRoleFunc(ctx, roleID, where)
}

// CountPoliciesOnRoleCalls gets all the calls that were made to CountPoliciesOnRole.
// Check the length with:
//
//	len(mockedStore.CountPoliciesOnRoleCalls())
func (mock *StoreMock) CountPoliciesOnRoleCalls() []struct {
	Ctx    context.Context
	RoleID uuid.UUID
	Where  parameter.WherePolicyOnRoleParam
} {
	var calls []struct {
		Ctx    context.Context
		RoleID uuid.UUID
		Where  parameter.WherePolicyOnRoleParam
	}
	mock.lockCountPoliciesOnRole.RLock()
	calls = mock.calls.CountPoliciesOnRole
	mock.lockCountPoliciesOnRole.RUnlock()
	return calls
}

// CountPoliciesOnRoleWithSd calls CountPoliciesOnRoleWithSdFunc.
func (mock *StoreMock) CountPoliciesOnRoleWithSd(ctx context.Context, sd Sd, roleID uuid.UUID, where parameter.WherePolicyOnRoleParam) (int64, error) {
	if mock.CountPoliciesOnRoleWithSdFunc == nil {
		panic("StoreMock.CountPoliciesOnRoleWithSdFunc: method is nil but Store.CountPoliciesOnRoleWithSd was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Sd     Sd
		RoleID uuid.UUID
		Where  parameter.WherePolicyOnRoleParam
	}{
		Ctx:    ctx,
		Sd:     sd,
		RoleID: roleID,
		Where:  where,
	}
	mock.lockCountPoliciesOnRoleWithSd.Lock()
	mock.calls.CountPoliciesOnRoleWithSd = append(mock.calls.CountPoliciesOnRoleWithSd, callInfo)
	mock.lockCountPoliciesOnRoleWithSd.Unlock()
	return mock.CountPoliciesOnRoleWithSdFunc(ctx, sd, roleID, where)
}

// CountPoliciesOnRoleWithSdCalls gets all the calls that were made to CountPoliciesOnRoleWithSd.
// Check the length with:
//
//	len(mockedStore.CountPoliciesOnRoleWithSdCalls())
func (mock *StoreMock) CountPoliciesOnRoleWithSdCalls() []struct {
	Ctx    context.Context
	Sd     Sd
	RoleID uuid.UUID
	Where  parameter.WherePolicyOnRoleParam
} {
	var calls []struct {
		Ctx    context.Context
		Sd     Sd
		RoleID uuid.UUID
		Where  parameter.WherePolicyOnRoleParam
	}
	mock.lockCountPoliciesOnRoleWithSd.RLock()
	calls = mock.calls.CountPoliciesOnRoleWithSd
	mock.lockCountPoliciesOnRoleWithSd.RUnlock()
	return calls
}

// CountPoliciesWithSd calls CountPoliciesWithSdFunc.
func (mock *StoreMock) CountPoliciesWithSd(ctx context.Context, sd Sd, where parameter.WherePolicyParam) (int64, error) {
	if mock.CountPoliciesWithSdFunc == nil {
		panic("StoreMock.CountPoliciesWithSdFunc: method is nil but Store.CountPoliciesWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WherePolicyParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
	}
	mock.lockCountPoliciesWithSd.Lock()
	mock.calls.CountPoliciesWithSd = append(mock.calls.CountPoliciesWithSd, callInfo)
	mock.lockCountPoliciesWithSd.Unlock()
	return mock.CountPoliciesWithSdFunc(ctx, sd, where)
}

// CountPoliciesWithSdCalls gets all the calls that were made to CountPoliciesWithSd.
// Check the length with:
//
//	len(mockedStore.CountPoliciesWithSdCalls())
func (mock *StoreMock) CountPoliciesWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WherePolicyParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WherePolicyParam
	}
	mock.lockCountPoliciesWithSd.RLock()
	calls = mock.calls.CountPoliciesWithSd
	mock.lockCountPoliciesWithSd.RUnlock()
	return calls
}

// CountPolicyCategories calls CountPolicyCategoriesFunc.
func (mock *StoreMock) CountPolicyCategories(ctx context.Context, where parameter.WherePolicyCategoryParam) (int64, error) {
	if mock.CountPolicyCategoriesFunc == nil {
		panic("StoreMock.CountPolicyCategoriesFunc: method is nil but Store.CountPolicyCategories was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WherePolicyCategoryParam
	}{
		Ctx:   ctx,
		Where: where,
	}
	mock.lockCountPolicyCategories.Lock()
	mock.calls.CountPolicyCategories = append(mock.calls.CountPolicyCategories, callInfo)
	mock.lockCountPolicyCategories.Unlock()
	return mock.CountPolicyCategoriesFunc(ctx, where)
}

// CountPolicyCategoriesCalls gets all the calls that were made to CountPolicyCategories.
// Check the length with:
//
//	len(mockedStore.CountPolicyCategoriesCalls())
func (mock *StoreMock) CountPolicyCategoriesCalls() []struct {
	Ctx   context.Context
	Where parameter.WherePolicyCategoryParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WherePolicyCategoryParam
	}
	mock.lockCountPolicyCategories.RLock()
	calls = mock.calls.CountPolicyCategories
	mock.lockCountPolicyCategories.RUnlock()
	return calls
}

// CountPolicyCategoriesWithSd calls CountPolicyCategoriesWithSdFunc.
func (mock *StoreMock) CountPolicyCategoriesWithSd(ctx context.Context, sd Sd, where parameter.WherePolicyCategoryParam) (int64, error) {
	if mock.CountPolicyCategoriesWithSdFunc == nil {
		panic("StoreMock.CountPolicyCategoriesWithSdFunc: method is nil but Store.CountPolicyCategoriesWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WherePolicyCategoryParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
	}
	mock.lockCountPolicyCategoriesWithSd.Lock()
	mock.calls.CountPolicyCategoriesWithSd = append(mock.calls.CountPolicyCategoriesWithSd, callInfo)
	mock.lockCountPolicyCategoriesWithSd.Unlock()
	return mock.CountPolicyCategoriesWithSdFunc(ctx, sd, where)
}

// CountPolicyCategoriesWithSdCalls gets all the calls that were made to CountPolicyCategoriesWithSd.
// Check the length with:
//
//	len(mockedStore.CountPolicyCategoriesWithSdCalls())
func (mock *StoreMock) CountPolicyCategoriesWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WherePolicyCategoryParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WherePolicyCategoryParam
	}
	mock.lockCountPolicyCategoriesWithSd.RLock()
	calls = mock.calls.CountPolicyCategoriesWithSd
	mock.lockCountPolicyCategoriesWithSd.RUnlock()
	return calls
}

// CountProfessors calls CountProfessorsFunc.
func (mock *StoreMock) CountProfessors(ctx context.Context, where parameter.WhereProfessorParam) (int64, error) {
	if mock.CountProfessorsFunc == nil {
		panic("StoreMock.CountProfessorsFunc: method is nil but Store.CountProfessors was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereProfessorParam
	}{
		Ctx:   ctx,
		Where: where,
	}
	mock.lockCountProfessors.Lock()
	mock.calls.CountProfessors = append(mock.calls.CountProfessors, callInfo)
	mock.lockCountProfessors.Unlock()
	return mock.CountProfessorsFunc(ctx, where)
}

// CountProfessorsCalls gets all the calls that were made to CountProfessors.
// Check the length with:
//
//	len(mockedStore.CountProfessorsCalls())
func (mock *StoreMock) CountProfessorsCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereProfessorParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereProfessorParam
	}
	mock.lockCountProfessors.RLock()
	calls = mock.calls.CountProfessors
	mock.lockCountProfessors.RUnlock()
	return calls
}

// CountProfessorsWithSd calls CountProfessorsWithSdFunc.
func (mock *StoreMock) CountProfessorsWithSd(ctx context.Context, sd Sd, where parameter.WhereProfessorParam) (int64, error) {
	if mock.CountProfessorsWithSdFunc == nil {
		panic("StoreMock.CountProfessorsWithSdFunc: method is nil but Store.CountProfessorsWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereProfessorParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
	}
	mock.lockCountProfessorsWithSd.Lock()
	mock.calls.CountProfessorsWithSd = append(mock.calls.CountProfessorsWithSd, callInfo)
	mock.lockCountProfessorsWithSd.Unlock()
	return mock.CountProfessorsWithSdFunc(ctx, sd, where)
}

// CountProfessorsWithSdCalls gets all the calls that were made to CountProfessorsWithSd.
// Check the length with:
//
//	len(mockedStore.CountProfessorsWithSdCalls())
func (mock *StoreMock) CountProfessorsWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereProfessorParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereProfessorParam
	}
	mock.lockCountProfessorsWithSd.RLock()
	calls = mock.calls.CountProfessorsWithSd
	mock.lockCountProfessorsWithSd.RUnlock()
	return calls
}

// CountReadableMembersOnMessage calls CountReadableMembersOnMessageFunc.
func (mock *StoreMock) CountReadableMembersOnMessage(ctx context.Context, messageID uuid.UUID, where parameter.WhereReadableMemberOnMessageParam) (int64, error) {
	if mock.CountReadableMembersOnMessageFunc == nil {
		panic("StoreMock.CountReadableMembersOnMessageFunc: method is nil but Store.CountReadableMembersOnMessage was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		MessageID uuid.UUID
		Where     parameter.WhereReadableMemberOnMessageParam
	}{
		Ctx:       ctx,
		MessageID: messageID,
		Where:     where,
	}
	mock.lockCountReadableMembersOnMessage.Lock()
	mock.calls.CountReadableMembersOnMessage = append(mock.calls.CountReadableMembersOnMessage, callInfo)
	mock.lockCountReadableMembersOnMessage.Unlock()
	return mock.CountReadableMembersOnMessageFunc(ctx, messageID, where)
}

// CountReadableMembersOnMessageCalls gets all the calls that were made to CountReadableMembersOnMessage.
// Check the length with:
//
//	len(mockedStore.CountReadableMembersOnMessageCalls())
func (mock *StoreMock) CountReadableMembersOnMessageCalls() []struct {
	Ctx       context.Context
	MessageID uuid.UUID
	Where     parameter.WhereReadableMemberOnMessageParam
} {
	var calls []struct {
		Ctx       context.Context
		MessageID uuid.UUID
		Where     parameter.WhereReadableMemberOnMessageParam
	}
	mock.lockCountReadableMembersOnMessage.RLock()
	calls = mock.calls.CountReadableMembersOnMessage
	mock.lockCountReadableMembersOnMessage.RUnlock()
	return calls
}

// CountReadableMembersOnMessageWithSd calls CountReadableMembersOnMessageWithSdFunc.
func (mock *StoreMock) CountReadableMembersOnMessageWithSd(ctx context.Context, sd Sd, messageID uuid.UUID, where parameter.WhereReadableMemberOnMessageParam) (int64, error) {
	if mock.CountReadableMembersOnMessageWithSdFunc == nil {
		panic("StoreMock.CountReadableMembersOnMessageWithSdFunc: method is nil but Store.CountReadableMembersOnMessageWithSd was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Sd        Sd
		MessageID uuid.UUID
		Where     parameter.WhereReadableMemberOnMessageParam
	}{
		Ctx:       ctx,
		Sd:        sd,
		MessageID: messageID,
		Where:     where,
	}
	mock.lockCountReadableMembersOnMessageWithSd.Lock()
	mock.calls.CountReadableMembersOnMessageWithSd = append(mock.calls.CountReadableMembersOnMessageWithSd, callInfo)
	mock.lockCountReadableMembersOnMessageWithSd.Unlock()
	return mock.CountReadableMembersOnMessageWithSdFunc(ctx, sd, messageID, where)
}

// CountReadableMembersOnMessageWithSdCalls gets all the calls that were made to CountReadableMembersOnMessageWithSd.
// Check the length with:
//
//	len(mockedStore.CountReadableMembersOnMessageWithSdCalls())
func (mock *StoreMock) CountReadableMembersOnMessageWithSdCalls() []struct {
	Ctx       context.Context
	Sd        Sd
	MessageID uuid.UUID
	Where     parameter.WhereReadableMemberOnMessageParam
} {
	var calls []struct {
		Ctx       context.Context
		Sd        Sd
		MessageID uuid.UUID
		Where     parameter.WhereReadableMemberOnMessageParam
	}
	mock.lockCountReadableMembersOnMessageWithSd.RLock()
	calls = mock.calls.CountReadableMembersOnMessageWithSd
	mock.lockCountReadableMembersOnMessageWithSd.RUnlock()
	return calls
}

// CountReadableMessagesOnChatRoomAndMember calls CountReadableMessagesOnChatRoomAndMemberFunc.
func (mock *StoreMock) CountReadableMessagesOnChatRoomAndMember(ctx context.Context, chatRoomID uuid.UUID, memberID uuid.UUID, where parameter.WhereReadableMessageOnChatRoomAndMemberParam) (int64, error) {
	if mock.CountReadableMessagesOnChatRoomAndMemberFunc == nil {
		panic("StoreMock.CountReadableMessagesOnChatRoomAndMemberFunc: method is nil but Store.CountReadableMessagesOnChatRoomAndMember was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ChatRoomID uuid.UUID
		MemberID   uuid.UUID
		Where      parameter.WhereReadableMessageOnChatRoomAndMemberParam
	}{
		Ctx:        ctx,
		ChatRoomID: chatRoomID,
		MemberID:   memberID,
		Where:      where,
	}
	mock.lockCountReadableMessagesOnChatRoomAndMember.Lock()
	mock.calls.CountReadableMessagesOnChatRoomAndMember = append(mock.calls.CountReadableMessagesOnChatRoomAndMember, callInfo)
	mock.lockCountReadableMessagesOnChatRoomAndMember.Unlock()
	return mock.CountReadableMessagesOnChatRoomAndMemberFunc(ctx, chatRoomID, memberID, where)
}

// CountReadableMessagesOnChatRoomAndMemberCalls gets all the calls that were made to CountReadableMessagesOnChatRoomAndMember.
// Check the length with:
//
//	len(mockedStore.CountReadableMessagesOnChatRoomAndMemberCalls())
func (mock *StoreMock) CountReadableMessagesOnChatRoomAndMemberCalls() []struct {
	Ctx        context.Context
	ChatRoomID uuid.UUID
	MemberID   uuid.UUID
	Where      parameter.WhereReadableMessageOnChatRoomAndMemberParam
} {
	var calls []struct {
		Ctx        context.Context
		ChatRoomID uuid.UUID
		MemberID   uuid.UUID
		Where      parameter.WhereReadableMessageOnChatRoomAndMemberParam
	}
	mock.lockCountReadableMessagesOnChatRoomAndMember.RLock()
	calls = mock.calls.CountReadableMessagesOnChatRoomAndMember
	mock.lockCountReadableMessagesOnChatRoomAndMember.RUnlock()
	return calls
}

// CountReadableMessagesOnChatRoomAndMemberWithSd calls CountReadableMessagesOnChatRoomAndMemberWithSdFunc.
func (mock *StoreMock) CountReadableMessagesOnChatRoomAndMemberWithSd(ctx context.Context, sd Sd, chatRoomID uuid.UUID, memberID uuid.UUID, where parameter.WhereReadableMessageOnChatRoomAndMemberParam) (int64, error) {
	if mock.CountReadableMessagesOnChatRoomAndMemberWithSdFunc == nil {
		panic("StoreMock.CountReadableMessagesOnChatRoomAndMemberWithSdFunc: method is nil but Store.CountReadableMessagesOnChatRoomAndMemberWithSd was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Sd         Sd
		ChatRoomID uuid.UUID
		MemberID   uuid.UUID
		Where      parameter.WhereReadableMessageOnChatRoomAndMemberParam
	}{
		Ctx:        ctx,
		Sd:         sd,
		ChatRoomID: chatRoomID,
		MemberID:   memberID,
		Where:      where,
	}
	mock.lockCountReadableMessagesOnChatRoomAndMemberWithSd.Lock()
	mock.calls.CountReadableMessagesOnChatRoomAndMemberWithSd = append(mock.calls.CountReadableMessagesOnChatRoomAndMemberWithSd, callInfo)
	mock.lockCountReadableMessagesOnChatRoomAndMemberWithSd.Unlock()
	return mock.CountReadableMessagesOnChatRoomAndMemberWithSdFunc(ctx, sd, chatRoomID, memberID, where)
}

// CountReadableMessagesOnChatRoomAndMemberWithSdCalls gets all the calls that were made to CountReadableMessagesOnChatRoomAndMemberWithSd.
// Check the length with:
//
//	len(mockedStore.CountReadableMessagesOnChatRoomAndMemberWithSdCalls())
func (mock *StoreMock) CountReadableMessagesOnChatRoomAndMemberWithSdCalls() []struct {
	Ctx        context.Context
	Sd         Sd
	ChatRoomID uuid.UUID
	MemberID   uuid.UUID
	Where      parameter.WhereReadableMessageOnChatRoomAndMemberParam
} {
	var calls []struct {
		Ctx        context.Context
		Sd         Sd
		ChatRoomID uuid.UUID
		MemberID   uuid.UUID
		Where      parameter.WhereReadableMessageOnChatRoomAndMemberParam
	}
	mock.lockCountReadableMessagesOnChatRoomAndMemberWithSd.RLock()
	calls = mock.calls.CountReadableMessagesOnChatRoomAndMemberWithSd
	mock.lockCountReadableMessagesOnChatRoomAndMemberWithSd.RUnlock()
	return calls
}

// CountReadableMessagesOnChatRooms calls CountReadableMessagesOnChatRoomsFunc.
func (mock *StoreMock) CountReadableMessagesOnChatRooms(ctx context.Context, chatRoomIDs []uuid.UUID, where parameter.WhereReadableMessageOnChatRoomAndMemberParam) ([]entity.ReadReceiptGroupByChatRoom, error) {
	if mock.CountReadableMessagesOnChatRoomsFunc == nil {
		panic("StoreMock.CountReadableMessagesOnChatRoomsFunc: method is nil but Store.CountReadableMessagesOnChatRooms was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		ChatRoomIDs []uuid.UUID
		Where       parameter.WhereReadableMessageOnChatRoomAndMemberParam
	}{
		Ctx:         ctx,
		ChatRoomIDs: chatRoomIDs,
		Where:       where,
	}
	mock.lockCountReadableMessagesOnChatRooms.Lock()
	mock.calls.CountReadableMessagesOnChatRooms = append(mock.calls.CountReadableMessagesOnChatRooms, callInfo)
	mock.lockCountReadableMessagesOnChatRooms.Unlock()
	return mock.CountReadableMessagesOnChatRoomsFunc(ctx, chatRoomIDs, where)
}

// CountReadableMessagesOnChatRoomsCalls gets all the calls that were made to CountReadableMessagesOnChatRooms.
// Check the length with:
//
//	len(mockedStore.CountReadableMessagesOnChatRoomsCalls())
func (mock *StoreMock) CountReadableMessagesOnChatRoomsCalls() []struct {
	Ctx         context.Context
	ChatRoomIDs []uuid.UUID
	Where       parameter.WhereReadableMessageOnChatRoomAndMemberParam
} {
	var calls []struct {
		Ctx         context.Context
		ChatRoomIDs []uuid.UUID
		Where       parameter.WhereReadableMessageOnChatRoomAndMemberParam
	}
	mock.lockCountReadableMessagesOnChatRooms.RLock()
	calls = mock.calls.CountReadableMessagesOnChatRooms
	mock.lockCountReadableMessagesOnChatRooms.RUnlock()
	return calls
}

// CountReadableMessagesOnChatRoomsAndMember calls CountReadableMessagesOnChatRoomsAndMemberFunc.
func (mock *StoreMock) CountReadableMessagesOnChatRoomsAndMember(ctx context.Context, chatRoomIDs []uuid.UUID, memberID uuid.UUID, where parameter.WhereReadableMessageOnChatRoomAndMemberParam) ([]entity.ReadReceiptGroupByChatRoom, error) {
	if mock.CountReadableMessagesOnChatRoomsAndMemberFunc == nil {
		panic("StoreMock.CountReadableMessagesOnChatRoomsAndMemberFunc: method is nil but Store.CountReadableMessagesOnChatRoomsAndMember was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		ChatRoomIDs []uuid.UUID
		MemberID    uuid.UUID
		Where       parameter.WhereReadableMessageOnChatRoomAndMemberParam
	}{
		Ctx:         ctx,
		ChatRoomIDs: chatRoomIDs,
		MemberID:    memberID,
		Where:       where,
	}
	mock.lockCountReadableMessagesOnChatRoomsAndMember.Lock()
	mock.calls.CountReadableMessagesOnChatRoomsAndMember = append(mock.calls.CountReadableMessagesOnChatRoomsAndMember, callInfo)
	mock.lockCountReadableMessagesOnChatRoomsAndMember.Unlock()
	return mock.CountReadableMessagesOnChatRoomsAndMemberFunc(ctx, chatRoomIDs, memberID, where)
}

// CountReadableMessagesOnChatRoomsAndMemberCalls gets all the calls that were made to CountReadableMessagesOnChatRoomsAndMember.
// Check the length with:
//
//	len(mockedStore.CountReadableMessagesOnChatRoomsAndMemberCalls())
func (mock *StoreMock) CountReadableMessagesOnChatRoomsAndMemberCalls() []struct {
	Ctx         context.Context
	ChatRoomIDs []uuid.UUID
	MemberID    uuid.UUID
	Where       parameter.WhereReadableMessageOnChatRoomAndMemberParam
} {
	var calls []struct {
		Ctx         context.Context
		ChatRoomIDs []uuid.UUID
		MemberID    uuid.UUID
		Where       parameter.WhereReadableMessageOnChatRoomAndMemberParam
	}
	mock.lockCountReadableMessagesOnChatRoomsAndMember.RLock()
	calls = mock.calls.CountReadableMessagesOnChatRoomsAndMember
	mock.lockCountReadableMessagesOnChatRoomsAndMember.RUnlock()
	return calls
}

// CountReadableMessagesOnChatRoomsAndMemberWithSd calls CountReadableMessagesOnChatRoomsAndMemberWithSdFunc.
func (mock *StoreMock) CountReadableMessagesOnChatRoomsAndMemberWithSd(ctx context.Context, sd Sd, chatRoomIDs []uuid.UUID, memberID uuid.UUID, where parameter.WhereReadableMessageOnChatRoomAndMemberParam) ([]entity.ReadReceiptGroupByChatRoom, error) {
	if mock.CountReadableMessagesOnChatRoomsAndMemberWithSdFunc == nil {
		panic("StoreMock.CountReadableMessagesOnChatRoomsAndMemberWithSdFunc: method is nil but Store.CountReadableMessagesOnChatRoomsAndMemberWithSd was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Sd          Sd
		ChatRoomIDs []uuid.UUID
		MemberID    uuid.UUID
		Where       parameter.WhereReadableMessageOnChatRoomAndMemberParam
	}{
		Ctx:         ctx,
		Sd:          sd,
		ChatRoomIDs: chatRoomIDs,
		MemberID:    memberID,
		Where:       where,
	}
	mock.lockCountReadableMessagesOnChatRoomsAndMemberWithSd.Lock()
	mock.calls.CountReadableMessagesOnChatRoomsAndMemberWithSd = append(mock.calls.CountReadableMessagesOnChatRoomsAndMemberWithSd, callInfo)
	mock.lockCountReadableMessagesOnChatRoomsAndMemberWithSd.Unlock()
	return mock.CountReadableMessagesOnChatRoomsAndMemberWithSdFunc(ctx, sd, chatRoomIDs, memberID, where)
}

// CountReadableMessagesOnChatRoomsAndMemberWithSdCalls gets all the calls that were made to CountReadableMessagesOnChatRoomsAndMemberWithSd.
// Check the length with:
//
//	len(mockedStore.CountReadableMessagesOnChatRoomsAndMemberWithSdCalls())
func (mock *StoreMock) CountReadableMessagesOnChatRoomsAndMemberWithSdCalls() []struct {
	Ctx         context.Context
	Sd          Sd
	ChatRoomIDs []uuid.UUID
	MemberID    uuid.UUID
	Where       parameter.WhereReadableMessageOnChatRoomAndMemberParam
} {
	var calls []struct {
		Ctx         context.Context
		Sd          Sd
		ChatRoomIDs []uuid.UUID
		MemberID    uuid.UUID
		Where       parameter.WhereReadableMessageOnChatRoomAndMemberParam
	}
	mock.lockCountReadableMessagesOnChatRoomsAndMemberWithSd.RLock()
	calls = mock.calls.CountReadableMessagesOnChatRoomsAndMemberWithSd
	mock.lockCountReadableMessagesOnChatRoomsAndMemberWithSd.RUnlock()
	return calls
}

// CountReadableMessagesOnChatRoomsWithSd calls CountReadableMessagesOnChatRoomsWithSdFunc.
func (mock *StoreMock) CountReadableMessagesOnChatRoomsWithSd(ctx context.Context, sd Sd, chatRoomIDs []uuid.UUID, where parameter.WhereReadableMessageOnChatRoomAndMemberParam) ([]entity.ReadReceiptGroupByChatRoom, error) {
	if mock.CountReadableMessagesOnChatRoomsWithSdFunc == nil {
		panic("StoreMock.CountReadableMessagesOnChatRoomsWithSdFunc: method is nil but Store.CountReadableMessagesOnChatRoomsWithSd was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Sd          Sd
		ChatRoomIDs []uuid.UUID
		Where       parameter.WhereReadableMessageOnChatRoomAndMemberParam
	}{
		Ctx:         ctx,
		Sd:          sd,
		ChatRoomIDs: chatRoomIDs,
		Where:       where,
	}
	mock.lockCountReadableMessagesOnChatRoomsWithSd.Lock()
	mock.calls.CountReadableMessagesOnChatRoomsWithSd = append(mock.calls.CountReadableMessagesOnChatRoomsWithSd, callInfo)
	mock.lockCountReadableMessagesOnChatRoomsWithSd.Unlock()
	return mock.CountReadableMessagesOnChatRoomsWithSdFunc(ctx, sd, chatRoomIDs, where)
}

// CountReadableMessagesOnChatRoomsWithSdCalls gets all the calls that were made to CountReadableMessagesOnChatRoomsWithSd.
// Check the length with:
//
//	len(mockedStore.CountReadableMessagesOnChatRoomsWithSdCalls())
func (mock *StoreMock) CountReadableMessagesOnChatRoomsWithSdCalls() []struct {
	Ctx         context.Context
	Sd          Sd
	ChatRoomIDs []uuid.UUID
	Where       parameter.WhereReadableMessageOnChatRoomAndMemberParam
} {
	var calls []struct {
		Ctx         context.Context
		Sd          Sd
		ChatRoomIDs []uuid.UUID
		Where       parameter.WhereReadableMessageOnChatRoomAndMemberParam
	}
	mock.lockCountReadableMessagesOnChatRoomsWithSd.RLock()
	calls = mock.calls.CountReadableMessagesOnChatRoomsWithSd
	mock.lockCountReadableMessagesOnChatRoomsWithSd.RUnlock()
	return calls
}

// CountReadableMessagesOnMember calls CountReadableMessagesOnMemberFunc.
func (mock *StoreMock) CountReadableMessagesOnMember(ctx context.Context, memberID uuid.UUID, where parameter.WhereReadableMessageOnChatRoomAndMemberParam) (int64, error) {
	if mock.CountReadableMessagesOnMemberFunc == nil {
		panic("StoreMock.CountReadableMessagesOnMemberFunc: method is nil but Store.CountReadableMessagesOnMember was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		MemberID uuid.UUID
		Where    parameter.WhereReadableMessageOnChatRoomAndMemberParam
	}{
		Ctx:      ctx,
		MemberID: memberID,
		Where:    where,
	}
	mock.lockCountReadableMessagesOnMember.Lock()
	mock.calls.CountReadableMessagesOnMember = append(mock.calls.CountReadableMessagesOnMember, callInfo)
	mock.lockCountReadableMessagesOnMember.Unlock()
	return mock.CountReadableMessagesOnMemberFunc(ctx, memberID, where)
}

// CountReadableMessagesOnMemberCalls gets all the calls that were made to CountReadableMessagesOnMember.
// Check the length with:
//
//	len(mockedStore.CountReadableMessagesOnMemberCalls())
func (mock *StoreMock) CountReadableMessagesOnMemberCalls() []struct {
	Ctx      context.Context
	MemberID uuid.UUID
	Where    parameter.WhereReadableMessageOnChatRoomAndMemberParam
} {
	var calls []struct {
		Ctx      context.Context
		MemberID uuid.UUID
		Where    parameter.WhereReadableMessageOnChatRoomAndMemberParam
	}
	mock.lockCountReadableMessagesOnMember.RLock()
	calls = mock.calls.CountReadableMessagesOnMember
	mock.lockCountReadableMessagesOnMember.RUnlock()
	return calls
}

// CountReadableMessagesOnMemberWithSd calls CountReadableMessagesOnMemberWithSdFunc.
func (mock *StoreMock) CountReadableMessagesOnMemberWithSd(ctx context.Context, sd Sd, memberID uuid.UUID, where parameter.WhereReadableMessageOnChatRoomAndMemberParam) (int64, error) {
	if mock.CountReadableMessagesOnMemberWithSdFunc == nil {
		panic("StoreMock.CountReadableMessagesOnMemberWithSdFunc: method is nil but Store.CountReadableMessagesOnMemberWithSd was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Sd       Sd
		MemberID uuid.UUID
		Where    parameter.WhereReadableMessageOnChatRoomAndMemberParam
	}{
		Ctx:      ctx,
		Sd:       sd,
		MemberID: memberID,
		Where:    where,
	}
	mock.lockCountReadableMessagesOnMemberWithSd.Lock()
	mock.calls.CountReadableMessagesOnMemberWithSd = append(mock.calls.CountReadableMessagesOnMemberWithSd, callInfo)
	mock.lockCountReadableMessagesOnMemberWithSd.Unlock()
	return mock.CountReadableMessagesOnMemberWithSdFunc(ctx, sd, memberID, where)
}

// CountReadableMessagesOnMemberWithSdCalls gets all the calls that were made to CountReadableMessagesOnMemberWithSd.
// Check the length with:
//
//	len(mockedStore.CountReadableMessagesOnMemberWithSdCalls())
func (mock *StoreMock) CountReadableMessagesOnMemberWithSdCalls() []struct {
	Ctx      context.Context
	Sd       Sd
	MemberID uuid.UUID
	Where    parameter.WhereReadableMessageOnChatRoomAndMemberParam
} {
	var calls []struct {
		Ctx      context.Context
		Sd       Sd
		MemberID uuid.UUID
		Where    parameter.WhereReadableMessageOnChatRoomAndMemberParam
	}
	mock.lockCountReadableMessagesOnMemberWithSd.RLock()
	calls = mock.calls.CountReadableMessagesOnMemberWithSd
	mock.lockCountReadableMessagesOnMemberWithSd.RUnlock()
	return calls
}

// CountReadsOnMessages calls CountReadsOnMessagesFunc.
func (mock *StoreMock) CountReadsOnMessages(ctx context.Context, messageIDs []uuid.UUID, where parameter.WhereReadsOnMessageParam) ([]entity.ReadReceiptGroupByMessage, error) {
	if mock.CountReadsOnMessagesFunc == nil {
		panic("StoreMock.CountReadsOnMessagesFunc: method is nil but Store.CountReadsOnMessages was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		MessageIDs []uuid.UUID
		Where      parameter.WhereReadsOnMessageParam
	}{
		Ctx:        ctx,
		MessageIDs: messageIDs,
		Where:      where,
	}
	mock.lockCountReadsOnMessages.Lock()
	mock.calls.CountReadsOnMessages = append(mock.calls.CountReadsOnMessages, callInfo)
	mock.lockCountReadsOnMessages.Unlock()
	return mock.CountReadsOnMessagesFunc(ctx, messageIDs, where)
}

// CountReadsOnMessagesCalls gets all the calls that were made to CountReadsOnMessages.
// Check the length with:
//
//	len(mockedStore.CountReadsOnMessagesCalls())
func (mock *StoreMock) CountReadsOnMessagesCalls() []struct {
	Ctx        context.Context
	MessageIDs []uuid.UUID
	Where      parameter.WhereReadsOnMessageParam
} {
	var calls []struct {
		Ctx        context.Context
		MessageIDs []uuid.UUID
		Where      parameter.WhereReadsOnMessageParam
	}
	mock.lockCountReadsOnMessages.RLock()
	calls = mock.calls.CountReadsOnMessages
	mock.lockCountReadsOnMessages.RUnlock()
	return calls
}

// CountReadsOnMessagesWithSd calls CountReadsOnMessagesWithSdFunc.
func (mock *StoreMock) CountReadsOnMessagesWithSd(ctx context.Context, sd Sd, messageIDs []uuid.UUID, where parameter.WhereReadsOnMessageParam) ([]entity.ReadReceiptGroupByMessage, error) {
	if mock.CountReadsOnMessagesWithSdFunc == nil {
		panic("StoreMock.CountReadsOnMessagesWithSdFunc: method is nil but Store.CountReadsOnMessagesWithSd was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Sd         Sd
		MessageIDs []uuid.UUID
		Where      parameter.WhereReadsOnMessageParam
	}{
		Ctx:        ctx,
		Sd:         sd,
		MessageIDs: messageIDs,
		Where:      where,
	}
	mock.lockCountReadsOnMessagesWithSd.Lock()
	mock.calls.CountReadsOnMessagesWithSd = append(mock.calls.CountReadsOnMessagesWithSd, callInfo)
	mock.lockCountReadsOnMessagesWithSd.Unlock()
	return mock.CountReadsOnMessagesWithSdFunc(ctx, sd, messageIDs, where)
}

// CountReadsOnMessagesWithSdCalls gets all the calls that were made to CountReadsOnMessagesWithSd.
// Check the length with:
//
//	len(mockedStore.CountReadsOnMessagesWithSdCalls())
func (mock *StoreMock) CountReadsOnMessagesWithSdCalls() []struct {
	Ctx        context.Context
	Sd         Sd
	MessageIDs []uuid.UUID
	Where      parameter.WhereReadsOnMessageParam
} {
	var calls []struct {
		Ctx        context.Context
		Sd         Sd
		MessageIDs []uuid.UUID
		Where      parameter.WhereReadsOnMessageParam
	}
	mock.lockCountReadsOnMessagesWithSd.RLock()
	calls = mock.calls.CountReadsOnMessagesWithSd
	mock.lockCountReadsOnMessagesWithSd.RUnlock()
	return calls
}

// CountRecordTypes calls CountRecordTypesFunc.
func (mock *StoreMock) CountRecordTypes(ctx context.Context, where parameter.WhereRecordTypeParam) (int64, error) {
	if mock.CountRecordTypesFunc == nil {
		panic("StoreMock.CountRecordTypesFunc: method is nil but Store.CountRecordTypes was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereRecordTypeParam
	}{
		Ctx:   ctx,
		Where: where,
	}
	mock.lockCountRecordTypes.Lock()
	mock.calls.CountRecordTypes = append(mock.calls.CountRecordTypes, callInfo)
	mock.lockCountRecordTypes.Unlock()
	return mock.CountRecordTypesFunc(ctx, where)
}

// CountRecordTypesCalls gets all the calls that were made to CountRecordTypes.
// Check the length with:
//
//	len(mockedStore.CountRecordTypesCalls())
func (mock *StoreMock) CountRecordTypesCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereRecordTypeParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereRecordTypeParam
	}
	mock.lockCountRecordTypes.RLock()
	calls = mock.calls.CountRecordTypes
	mock.lockCountRecordTypes.RUnlock()
	return calls
}

// CountRecordTypesWithSd calls CountRecordTypesWithSdFunc.
func (mock *StoreMock) CountRecordTypesWithSd(ctx context.Context, sd Sd, where parameter.WhereRecordTypeParam) (int64, error) {
	if mock.CountRecordTypesWithSdFunc == nil {
		panic("StoreMock.CountRecordTypesWithSdFunc: method is nil but Store.CountRecordTypesWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereRecordTypeParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
	}
	mock.lockCountRecordTypesWithSd.Lock()
	mock.calls.CountRecordTypesWithSd = append(mock.calls.CountRecordTypesWithSd, callInfo)
	mock.lockCountRecordTypesWithSd.Unlock()
	return mock.CountRecordTypesWithSdFunc(ctx, sd, where)
}

// CountRecordTypesWithSdCalls gets all the calls that were made to CountRecordTypesWithSd.
// Check the length with:
//
//	len(mockedStore.CountRecordTypesWithSdCalls())
func (mock *StoreMock) CountRecordTypesWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereRecordTypeParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereRecordTypeParam
	}
	mock.lockCountRecordTypesWithSd.RLock()
	calls = mock.calls.CountRecordTypesWithSd
	mock.lockCountRecordTypesWithSd.RUnlock()
	return calls
}

// CountRoles calls CountRolesFunc.
func (mock *StoreMock) CountRoles(ctx context.Context, where parameter.WhereRoleParam) (int64, error) {
	if mock.CountRolesFunc == nil {
		panic("StoreMock.CountRolesFunc: method is nil but Store.CountRoles was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereRoleParam
	}{
		Ctx:   ctx,
		Where: where,
	}
	mock.lockCountRoles.Lock()
	mock.calls.CountRoles = append(mock.calls.CountRoles, callInfo)
	mock.lockCountRoles.Unlock()
	return mock.CountRolesFunc(ctx, where)
}

// CountRolesCalls gets all the calls that were made to CountRoles.
// Check the length with:
//
//	len(mockedStore.CountRolesCalls())
func (mock *StoreMock) CountRolesCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereRoleParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereRoleParam
	}
	mock.lockCountRoles.RLock()
	calls = mock.calls.CountRoles
	mock.lockCountRoles.RUnlock()
	return calls
}

// CountRolesOnPolicy calls CountRolesOnPolicyFunc.
func (mock *StoreMock) CountRolesOnPolicy(ctx context.Context, policyID uuid.UUID, where parameter.WhereRoleOnPolicyParam) (int64, error) {
	if mock.CountRolesOnPolicyFunc == nil {
		panic("StoreMock.CountRolesOnPolicyFunc: method is nil but Store.CountRolesOnPolicy was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		PolicyID uuid.UUID
		Where    parameter.WhereRoleOnPolicyParam
	}{
		Ctx:      ctx,
		PolicyID: policyID,
		Where:    where,
	}
	mock.lockCountRolesOnPolicy.Lock()
	mock.calls.CountRolesOnPolicy = append(mock.calls.CountRolesOnPolicy, callInfo)
	mock.lockCountRolesOnPolicy.Unlock()
	return mock.CountRolesOnPolicyFunc(ctx, policyID, where)
}

// CountRolesOnPolicyCalls gets all the calls that were made to CountRolesOnPolicy.
// Check the length with:
//
//	len(mockedStore.CountRolesOnPolicyCalls())
func (mock *StoreMock) CountRolesOnPolicyCalls() []struct {
	Ctx      context.Context
	PolicyID uuid.UUID
	Where    parameter.WhereRoleOnPolicyParam
} {
	var calls []struct {
		Ctx      context.Context
		PolicyID uuid.UUID
		Where    parameter.WhereRoleOnPolicyParam
	}
	mock.lockCountRolesOnPolicy.RLock()
	calls = mock.calls.CountRolesOnPolicy
	mock.lockCountRolesOnPolicy.RUnlock()
	return calls
}

// CountRolesOnPolicyWithSd calls CountRolesOnPolicyWithSdFunc.
func (mock *StoreMock) CountRolesOnPolicyWithSd(ctx context.Context, sd Sd, policyID uuid.UUID, where parameter.WhereRoleOnPolicyParam) (int64, error) {
	if mock.CountRolesOnPolicyWithSdFunc == nil {
		panic("StoreMock.CountRolesOnPolicyWithSdFunc: method is nil but Store.CountRolesOnPolicyWithSd was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Sd       Sd
		PolicyID uuid.UUID
		Where    parameter.WhereRoleOnPolicyParam
	}{
		Ctx:      ctx,
		Sd:       sd,
		PolicyID: policyID,
		Where:    where,
	}
	mock.lockCountRolesOnPolicyWithSd.Lock()
	mock.calls.CountRolesOnPolicyWithSd = append(mock.calls.CountRolesOnPolicyWithSd, callInfo)
	mock.lockCountRolesOnPolicyWithSd.Unlock()
	return mock.CountRolesOnPolicyWithSdFunc(ctx, sd, policyID, where)
}

// CountRolesOnPolicyWithSdCalls gets all the calls that were made to CountRolesOnPolicyWithSd.
// Check the length with:
//
//	len(mockedStore.CountRolesOnPolicyWithSdCalls())
func (mock *StoreMock) CountRolesOnPolicyWithSdCalls() []struct {
	Ctx      context.Context
	Sd       Sd
	PolicyID uuid.UUID
	Where    parameter.WhereRoleOnPolicyParam
} {
	var calls []struct {
		Ctx      context.Context
		Sd       Sd
		PolicyID uuid.UUID
		Where    parameter.WhereRoleOnPolicyParam
	}
	mock.lockCountRolesOnPolicyWithSd.RLock()
	calls = mock.calls.CountRolesOnPolicyWithSd
	mock.lockCountRolesOnPolicyWithSd.RUnlock()
	return calls
}

// CountRolesWithSd calls CountRolesWithSdFunc.
func (mock *StoreMock) CountRolesWithSd(ctx context.Context, sd Sd, where parameter.WhereRoleParam) (int64, error) {
	if mock.CountRolesWithSdFunc == nil {
		panic("StoreMock.CountRolesWithSdFunc: method is nil but Store.CountRolesWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereRoleParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
	}
	mock.lockCountRolesWithSd.Lock()
	mock.calls.CountRolesWithSd = append(mock.calls.CountRolesWithSd, callInfo)
	mock.lockCountRolesWithSd.Unlock()
	return mock.CountRolesWithSdFunc(ctx, sd, where)
}

// CountRolesWithSdCalls gets all the calls that were made to CountRolesWithSd.
// Check the length with:
//
//	len(mockedStore.CountRolesWithSdCalls())
func (mock *StoreMock) CountRolesWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereRoleParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereRoleParam
	}
	mock.lockCountRolesWithSd.RLock()
	calls = mock.calls.CountRolesWithSd
	mock.lockCountRolesWithSd.RUnlock()
	return calls
}

// CountStudents calls CountStudentsFunc.
func (mock *StoreMock) CountStudents(ctx context.Context, where parameter.WhereStudentParam) (int64, error) {
	if mock.CountStudentsFunc == nil {
		panic("StoreMock.CountStudentsFunc: method is nil but Store.CountStudents was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereStudentParam
	}{
		Ctx:   ctx,
		Where: where,
	}
	mock.lockCountStudents.Lock()
	mock.calls.CountStudents = append(mock.calls.CountStudents, callInfo)
	mock.lockCountStudents.Unlock()
	return mock.CountStudentsFunc(ctx, where)
}

// CountStudentsCalls gets all the calls that were made to CountStudents.
// Check the length with:
//
//	len(mockedStore.CountStudentsCalls())
func (mock *StoreMock) CountStudentsCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereStudentParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereStudentParam
	}
	mock.lockCountStudents.RLock()
	calls = mock.calls.CountStudents
	mock.lockCountStudents.RUnlock()
	return calls
}

// CountStudentsWithSd calls CountStudentsWithSdFunc.
func (mock *StoreMock) CountStudentsWithSd(ctx context.Context, sd Sd, where parameter.WhereStudentParam) (int64, error) {
	if mock.CountStudentsWithSdFunc == nil {
		panic("StoreMock.CountStudentsWithSdFunc: method is nil but Store.CountStudentsWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereStudentParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
	}
	mock.lockCountStudentsWithSd.Lock()
	mock.calls.CountStudentsWithSd = append(mock.calls.CountStudentsWithSd, callInfo)
	mock.lockCountStudentsWithSd.Unlock()
	return mock.CountStudentsWithSdFunc(ctx, sd, where)
}

// CountStudentsWithSdCalls gets all the calls that were made to CountStudentsWithSd.
// Check the length with:
//
//	len(mockedStore.CountStudentsWithSdCalls())
func (mock *StoreMock) CountStudentsWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereStudentParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereStudentParam
	}
	mock.lockCountStudentsWithSd.RLock()
	calls = mock.calls.CountStudentsWithSd
	mock.lockCountStudentsWithSd.RUnlock()
	return calls
}

// CreateAbsence calls CreateAbsenceFunc.
func (mock *StoreMock) CreateAbsence(ctx context.Context, param parameter.CreateAbsenceParam) (entity.Absence, error) {
	if mock.CreateAbsenceFunc == nil {
		panic("StoreMock.CreateAbsenceFunc: method is nil but Store.CreateAbsence was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Param parameter.CreateAbsenceParam
	}{
		Ctx:   ctx,
		Param: param,
	}
	mock.lockCreateAbsence.Lock()
	mock.calls.CreateAbsence = append(mock.calls.CreateAbsence, callInfo)
	mock.lockCreateAbsence.Unlock()
	return mock.CreateAbsenceFunc(ctx, param)
}

// CreateAbsenceCalls gets all the calls that were made to CreateAbsence.
// Check the length with:
//
//	len(mockedStore.CreateAbsenceCalls())
func (mock *StoreMock) CreateAbsenceCalls() []struct {
	Ctx   context.Context
	Param parameter.CreateAbsenceParam
} {
	var calls []struct {
		Ctx   context.Context
		Param parameter.CreateAbsenceParam
	}
	mock.lockCreateAbsence.RLock()
	calls = mock.calls.CreateAbsence
	mock.lockCreateAbsence.RUnlock()
	return calls
}

// CreateAbsenceWithSd calls CreateAbsenceWithSdFunc.
func (mock *StoreMock) CreateAbsenceWithSd(ctx context.Context, sd Sd, param parameter.CreateAbsenceParam) (entity.Absence, error) {
	if mock.CreateAbsenceWithSdFunc == nil {
		panic("StoreMock.CreateAbsenceWithSdFunc: method is nil but Store.CreateAbsenceWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateAbsenceParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Param: param,
	}
	mock.lockCreateAbsenceWithSd.Lock()
	mock.calls.CreateAbsenceWithSd = append(mock.calls.CreateAbsenceWithSd, callInfo)
	mock.lockCreateAbsenceWithSd.Unlock()
	return mock.CreateAbsenceWithSdFunc(ctx, sd, param)
}

// CreateAbsenceWithSdCalls gets all the calls that were made to CreateAbsenceWithSd.
// Check the length with:
//
//	len(mockedStore.CreateAbsenceWithSdCalls())
func (mock *StoreMock) CreateAbsenceWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Param parameter.CreateAbsenceParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateAbsenceParam
	}
	mock.lockCreateAbsenceWithSd.RLock()
	calls = mock.calls.CreateAbsenceWithSd
	mock.lockCreateAbsenceWithSd.RUnlock()
	return calls
}

// CreateAbsences calls CreateAbsencesFunc.
func (mock *StoreMock) CreateAbsences(ctx context.Context, params []parameter.CreateAbsenceParam) (int64, error) {
	if mock.CreateAbsencesFunc == nil {
		panic("StoreMock.CreateAbsencesFunc: method is nil but Store.CreateAbsences was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params []parameter.CreateAbsenceParam
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockCreateAbsences.Lock()
	mock.calls.CreateAbsences = append(mock.calls.CreateAbsences, callInfo)
	mock.lockCreateAbsences.Unlock()
	return mock.CreateAbsencesFunc(ctx, params)
}

// CreateAbsencesCalls gets all the calls that were made to CreateAbsences.
// Check the length with:
//
//	len(mockedStore.CreateAbsencesCalls())
func (mock *StoreMock) CreateAbsencesCalls() []struct {
	Ctx    context.Context
	Params []parameter.CreateAbsenceParam
} {
	var calls []struct {
		Ctx    context.Context
		Params []parameter.CreateAbsenceParam
	}
	mock.lockCreateAbsences.RLock()
	calls = mock.calls.CreateAbsences
	mock.lockCreateAbsences.RUnlock()
	return calls
}

// CreateAbsencesWithSd calls CreateAbsencesWithSdFunc.
func (mock *StoreMock) CreateAbsencesWithSd(ctx context.Context, sd Sd, params []parameter.CreateAbsenceParam) (int64, error) {
	if mock.CreateAbsencesWithSdFunc == nil {
		panic("StoreMock.CreateAbsencesWithSdFunc: method is nil but Store.CreateAbsencesWithSd was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateAbsenceParam
	}{
		Ctx:    ctx,
		Sd:     sd,
		Params: params,
	}
	mock.lockCreateAbsencesWithSd.Lock()
	mock.calls.CreateAbsencesWithSd = append(mock.calls.CreateAbsencesWithSd, callInfo)
	mock.lockCreateAbsencesWithSd.Unlock()
	return mock.CreateAbsencesWithSdFunc(ctx, sd, params)
}

// CreateAbsencesWithSdCalls gets all the calls that were made to CreateAbsencesWithSd.
// Check the length with:
//
//	len(mockedStore.CreateAbsencesWithSdCalls())
func (mock *StoreMock) CreateAbsencesWithSdCalls() []struct {
	Ctx    context.Context
	Sd     Sd
	Params []parameter.CreateAbsenceParam
} {
	var calls []struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateAbsenceParam
	}
	mock.lockCreateAbsencesWithSd.RLock()
	calls = mock.calls.CreateAbsencesWithSd
	mock.lockCreateAbsencesWithSd.RUnlock()
	return calls
}

// CreateAttachableItem calls CreateAttachableItemFunc.
func (mock *StoreMock) CreateAttachableItem(ctx context.Context, param parameter.CreateAttachableItemParam) (entity.AttachableItem, error) {
	if mock.CreateAttachableItemFunc == nil {
		panic("StoreMock.CreateAttachableItemFunc: method is nil but Store.CreateAttachableItem was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Param parameter.CreateAttachableItemParam
	}{
		Ctx:   ctx,
		Param: param,
	}
	mock.lockCreateAttachableItem.Lock()
	mock.calls.CreateAttachableItem = append(mock.calls.CreateAttachableItem, callInfo)
	mock.lockCreateAttachableItem.Unlock()
	return mock.CreateAttachableItemFunc(ctx, param)
}

// CreateAttachableItemCalls gets all the calls that were made to CreateAttachableItem.
// Check the length with:
//
//	len(mockedStore.CreateAttachableItemCalls())
func (mock *StoreMock) CreateAttachableItemCalls() []struct {
	Ctx   context.Context
	Param parameter.CreateAttachableItemParam
} {
	var calls []struct {
		Ctx   context.Context
		Param parameter.CreateAttachableItemParam
	}
	mock.lockCreateAttachableItem.RLock()
	calls = mock.calls.CreateAttachableItem
	mock.lockCreateAttachableItem.RUnlock()
	return calls
}

// CreateAttachableItemWithSd calls CreateAttachableItemWithSdFunc.
func (mock *StoreMock) CreateAttachableItemWithSd(ctx context.Context, sd Sd, param parameter.CreateAttachableItemParam) (entity.AttachableItem, error) {
	if mock.CreateAttachableItemWithSdFunc == nil {
		panic("StoreMock.CreateAttachableItemWithSdFunc: method is nil but Store.CreateAttachableItemWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateAttachableItemParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Param: param,
	}
	mock.lockCreateAttachableItemWithSd.Lock()
	mock.calls.CreateAttachableItemWithSd = append(mock.calls.CreateAttachableItemWithSd, callInfo)
	mock.lockCreateAttachableItemWithSd.Unlock()
	return mock.CreateAttachableItemWithSdFunc(ctx, sd, param)
}

// CreateAttachableItemWithSdCalls gets all the calls that were made to CreateAttachableItemWithSd.
// Check the length with:
//
//	len(mockedStore.CreateAttachableItemWithSdCalls())
func (mock *StoreMock) CreateAttachableItemWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Param parameter.CreateAttachableItemParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateAttachableItemParam
	}
	mock.lockCreateAttachableItemWithSd.RLock()
	calls = mock.calls.CreateAttachableItemWithSd
	mock.lockCreateAttachableItemWithSd.RUnlock()
	return calls
}

// CreateAttachableItems calls CreateAttachableItemsFunc.
func (mock *StoreMock) CreateAttachableItems(ctx context.Context, params []parameter.CreateAttachableItemParam) (int64, error) {
	if mock.CreateAttachableItemsFunc == nil {
		panic("StoreMock.CreateAttachableItemsFunc: method is nil but Store.CreateAttachableItems was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params []parameter.CreateAttachableItemParam
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockCreateAttachableItems.Lock()
	mock.calls.CreateAttachableItems = append(mock.calls.CreateAttachableItems, callInfo)
	mock.lockCreateAttachableItems.Unlock()
	return mock.CreateAttachableItemsFunc(ctx, params)
}

// CreateAttachableItemsCalls gets all the calls that were made to CreateAttachableItems.
// Check the length with:
//
//	len(mockedStore.CreateAttachableItemsCalls())
func (mock *StoreMock) CreateAttachableItemsCalls() []struct {
	Ctx    context.Context
	Params []parameter.CreateAttachableItemParam
} {
	var calls []struct {
		Ctx    context.Context
		Params []parameter.CreateAttachableItemParam
	}
	mock.lockCreateAttachableItems.RLock()
	calls = mock.calls.CreateAttachableItems
	mock.lockCreateAttachableItems.RUnlock()
	return calls
}

// CreateAttachableItemsWithSd calls CreateAttachableItemsWithSdFunc.
func (mock *StoreMock) CreateAttachableItemsWithSd(ctx context.Context, sd Sd, params []parameter.CreateAttachableItemParam) (int64, error) {
	if mock.CreateAttachableItemsWithSdFunc == nil {
		panic("StoreMock.CreateAttachableItemsWithSdFunc: method is nil but Store.CreateAttachableItemsWithSd was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateAttachableItemParam
	}{
		Ctx:    ctx,
		Sd:     sd,
		Params: params,
	}
	mock.lockCreateAttachableItemsWithSd.Lock()
	mock.calls.CreateAttachableItemsWithSd = append(mock.calls.CreateAttachableItemsWithSd, callInfo)
	mock.lockCreateAttachableItemsWithSd.Unlock()
	return mock.CreateAttachableItemsWithSdFunc(ctx, sd, params)
}

// CreateAttachableItemsWithSdCalls gets all the calls that were made to CreateAttachableItemsWithSd.
// Check the length with:
//
//	len(mockedStore.CreateAttachableItemsWithSdCalls())
func (mock *StoreMock) CreateAttachableItemsWithSdCalls() []struct {
	Ctx    context.Context
	Sd     Sd
	Params []parameter.CreateAttachableItemParam
} {
	var calls []struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateAttachableItemParam
	}
	mock.lockCreateAttachableItemsWithSd.RLock()
	calls = mock.calls.CreateAttachableItemsWithSd
	mock.lockCreateAttachableItemsWithSd.RUnlock()
	return calls
}

// CreateAttendStatus calls CreateAttendStatusFunc.
func (mock *StoreMock) CreateAttendStatus(ctx context.Context, param parameter.CreateAttendStatusParam) (entity.AttendStatus, error) {
	if mock.CreateAttendStatusFunc == nil {
		panic("StoreMock.CreateAttendStatusFunc: method is nil but Store.CreateAttendStatus was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Param parameter.CreateAttendStatusParam
	}{
		Ctx:   ctx,
		Param: param,
	}
	mock.lockCreateAttendStatus.Lock()
	mock.calls.CreateAttendStatus = append(mock.calls.CreateAttendStatus, callInfo)
	mock.lockCreateAttendStatus.Unlock()
	return mock.CreateAttendStatusFunc(ctx, param)
}

// CreateAttendStatusCalls gets all the calls that were made to CreateAttendStatus.
// Check the length with:
//
//	len(mockedStore.CreateAttendStatusCalls())
func (mock *StoreMock) CreateAttendStatusCalls() []struct {
	Ctx   context.Context
	Param parameter.CreateAttendStatusParam
} {
	var calls []struct {
		Ctx   context.Context
		Param parameter.CreateAttendStatusParam
	}
	mock.lockCreateAttendStatus.RLock()
	calls = mock.calls.CreateAttendStatus
	mock.lockCreateAttendStatus.RUnlock()
	return calls
}

// CreateAttendStatusWithSd calls CreateAttendStatusWithSdFunc.
func (mock *StoreMock) CreateAttendStatusWithSd(ctx context.Context, sd Sd, param parameter.CreateAttendStatusParam) (entity.AttendStatus, error) {
	if mock.CreateAttendStatusWithSdFunc == nil {
		panic("StoreMock.CreateAttendStatusWithSdFunc: method is nil but Store.CreateAttendStatusWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateAttendStatusParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Param: param,
	}
	mock.lockCreateAttendStatusWithSd.Lock()
	mock.calls.CreateAttendStatusWithSd = append(mock.calls.CreateAttendStatusWithSd, callInfo)
	mock.lockCreateAttendStatusWithSd.Unlock()
	return mock.CreateAttendStatusWithSdFunc(ctx, sd, param)
}

// CreateAttendStatusWithSdCalls gets all the calls that were made to CreateAttendStatusWithSd.
// Check the length with:
//
//	len(mockedStore.CreateAttendStatusWithSdCalls())
func (mock *StoreMock) CreateAttendStatusWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Param parameter.CreateAttendStatusParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateAttendStatusParam
	}
	mock.lockCreateAttendStatusWithSd.RLock()
	calls = mock.calls.CreateAttendStatusWithSd
	mock.lockCreateAttendStatusWithSd.RUnlock()
	return calls
}

// CreateAttendStatuses calls CreateAttendStatusesFunc.
func (mock *StoreMock) CreateAttendStatuses(ctx context.Context, params []parameter.CreateAttendStatusParam) (int64, error) {
	if mock.CreateAttendStatusesFunc == nil {
		panic("StoreMock.CreateAttendStatusesFunc: method is nil but Store.CreateAttendStatuses was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params []parameter.CreateAttendStatusParam
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockCreateAttendStatuses.Lock()
	mock.calls.CreateAttendStatuses = append(mock.calls.CreateAttendStatuses, callInfo)
	mock.lockCreateAttendStatuses.Unlock()
	return mock.CreateAttendStatusesFunc(ctx, params)
}

// CreateAttendStatusesCalls gets all the calls that were made to CreateAttendStatuses.
// Check the length with:
//
//	len(mockedStore.CreateAttendStatusesCalls())
func (mock *StoreMock) CreateAttendStatusesCalls() []struct {
	Ctx    context.Context
	Params []parameter.CreateAttendStatusParam
} {
	var calls []struct {
		Ctx    context.Context
		Params []parameter.CreateAttendStatusParam
	}
	mock.lockCreateAttendStatuses.RLock()
	calls = mock.calls.CreateAttendStatuses
	mock.lockCreateAttendStatuses.RUnlock()
	return calls
}

// CreateAttendStatusesWithSd calls CreateAttendStatusesWithSdFunc.
func (mock *StoreMock) CreateAttendStatusesWithSd(ctx context.Context, sd Sd, params []parameter.CreateAttendStatusParam) (int64, error) {
	if mock.CreateAttendStatusesWithSdFunc == nil {
		panic("StoreMock.CreateAttendStatusesWithSdFunc: method is nil but Store.CreateAttendStatusesWithSd was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateAttendStatusParam
	}{
		Ctx:    ctx,
		Sd:     sd,
		Params: params,
	}
	mock.lockCreateAttendStatusesWithSd.Lock()
	mock.calls.CreateAttendStatusesWithSd = append(mock.calls.CreateAttendStatusesWithSd, callInfo)
	mock.lockCreateAttendStatusesWithSd.Unlock()
	return mock.CreateAttendStatusesWithSdFunc(ctx, sd, params)
}

// CreateAttendStatusesWithSdCalls gets all the calls that were made to CreateAttendStatusesWithSd.
// Check the length with:
//
//	len(mockedStore.CreateAttendStatusesWithSdCalls())
func (mock *StoreMock) CreateAttendStatusesWithSdCalls() []struct {
	Ctx    context.Context
	Sd     Sd
	Params []parameter.CreateAttendStatusParam
} {
	var calls []struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateAttendStatusParam
	}
	mock.lockCreateAttendStatusesWithSd.RLock()
	calls = mock.calls.CreateAttendStatusesWithSd
	mock.lockCreateAttendStatusesWithSd.RUnlock()
	return calls
}

// CreateAttendanceType calls CreateAttendanceTypeFunc.
func (mock *StoreMock) CreateAttendanceType(ctx context.Context, param parameter.CreateAttendanceTypeParam) (entity.AttendanceType, error) {
	if mock.CreateAttendanceTypeFunc == nil {
		panic("StoreMock.CreateAttendanceTypeFunc: method is nil but Store.CreateAttendanceType was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Param parameter.CreateAttendanceTypeParam
	}{
		Ctx:   ctx,
		Param: param,
	}
	mock.lockCreateAttendanceType.Lock()
	mock.calls.CreateAttendanceType = append(mock.calls.CreateAttendanceType, callInfo)
	mock.lockCreateAttendanceType.Unlock()
	return mock.CreateAttendanceTypeFunc(ctx, param)
}

// CreateAttendanceTypeCalls gets all the calls that were made to CreateAttendanceType.
// Check the length with:
//
//	len(mockedStore.CreateAttendanceTypeCalls())
func (mock *StoreMock) CreateAttendanceTypeCalls() []struct {
	Ctx   context.Context
	Param parameter.CreateAttendanceTypeParam
} {
	var calls []struct {
		Ctx   context.Context
		Param parameter.CreateAttendanceTypeParam
	}
	mock.lockCreateAttendanceType.RLock()
	calls = mock.calls.CreateAttendanceType
	mock.lockCreateAttendanceType.RUnlock()
	return calls
}

// CreateAttendanceTypeWithSd calls CreateAttendanceTypeWithSdFunc.
func (mock *StoreMock) CreateAttendanceTypeWithSd(ctx context.Context, sd Sd, param parameter.CreateAttendanceTypeParam) (entity.AttendanceType, error) {
	if mock.CreateAttendanceTypeWithSdFunc == nil {
		panic("StoreMock.CreateAttendanceTypeWithSdFunc: method is nil but Store.CreateAttendanceTypeWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateAttendanceTypeParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Param: param,
	}
	mock.lockCreateAttendanceTypeWithSd.Lock()
	mock.calls.CreateAttendanceTypeWithSd = append(mock.calls.CreateAttendanceTypeWithSd, callInfo)
	mock.lockCreateAttendanceTypeWithSd.Unlock()
	return mock.CreateAttendanceTypeWithSdFunc(ctx, sd, param)
}

// CreateAttendanceTypeWithSdCalls gets all the calls that were made to CreateAttendanceTypeWithSd.
// Check the length with:
//
//	len(mockedStore.CreateAttendanceTypeWithSdCalls())
func (mock *StoreMock) CreateAttendanceTypeWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Param parameter.CreateAttendanceTypeParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateAttendanceTypeParam
	}
	mock.lockCreateAttendanceTypeWithSd.RLock()
	calls = mock.calls.CreateAttendanceTypeWithSd
	mock.lockCreateAttendanceTypeWithSd.RUnlock()
	return calls
}

// CreateAttendanceTypes calls CreateAttendanceTypesFunc.
func (mock *StoreMock) CreateAttendanceTypes(ctx context.Context, params []parameter.CreateAttendanceTypeParam) (int64, error) {
	if mock.CreateAttendanceTypesFunc == nil {
		panic("StoreMock.CreateAttendanceTypesFunc: method is nil but Store.CreateAttendanceTypes was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params []parameter.CreateAttendanceTypeParam
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockCreateAttendanceTypes.Lock()
	mock.calls.CreateAttendanceTypes = append(mock.calls.CreateAttendanceTypes, callInfo)
	mock.lockCreateAttendanceTypes.Unlock()
	return mock.CreateAttendanceTypesFunc(ctx, params)
}

// CreateAttendanceTypesCalls gets all the calls that were made to CreateAttendanceTypes.
// Check the length with:
//
//	len(mockedStore.CreateAttendanceTypesCalls())
func (mock *StoreMock) CreateAttendanceTypesCalls() []struct {
	Ctx    context.Context
	Params []parameter.CreateAttendanceTypeParam
} {
	var calls []struct {
		Ctx    context.Context
		Params []parameter.CreateAttendanceTypeParam
	}
	mock.lockCreateAttendanceTypes.RLock()
	calls = mock.calls.CreateAttendanceTypes
	mock.lockCreateAttendanceTypes.RUnlock()
	return calls
}

// CreateAttendanceTypesWithSd calls CreateAttendanceTypesWithSdFunc.
func (mock *StoreMock) CreateAttendanceTypesWithSd(ctx context.Context, sd Sd, params []parameter.CreateAttendanceTypeParam) (int64, error) {
	if mock.CreateAttendanceTypesWithSdFunc == nil {
		panic("StoreMock.CreateAttendanceTypesWithSdFunc: method is nil but Store.CreateAttendanceTypesWithSd was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateAttendanceTypeParam
	}{
		Ctx:    ctx,
		Sd:     sd,
		Params: params,
	}
	mock.lockCreateAttendanceTypesWithSd.Lock()
	mock.calls.CreateAttendanceTypesWithSd = append(mock.calls.CreateAttendanceTypesWithSd, callInfo)
	mock.lockCreateAttendanceTypesWithSd.Unlock()
	return mock.CreateAttendanceTypesWithSdFunc(ctx, sd, params)
}

// CreateAttendanceTypesWithSdCalls gets all the calls that were made to CreateAttendanceTypesWithSd.
// Check the length with:
//
//	len(mockedStore.CreateAttendanceTypesWithSdCalls())
func (mock *StoreMock) CreateAttendanceTypesWithSdCalls() []struct {
	Ctx    context.Context
	Sd     Sd
	Params []parameter.CreateAttendanceTypeParam
} {
	var calls []struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateAttendanceTypeParam
	}
	mock.lockCreateAttendanceTypesWithSd.RLock()
	calls = mock.calls.CreateAttendanceTypesWithSd
	mock.lockCreateAttendanceTypesWithSd.RUnlock()
	return calls
}

// CreateChatRoom calls CreateChatRoomFunc.
func (mock *StoreMock) CreateChatRoom(ctx context.Context, param parameter.CreateChatRoomParam) (entity.ChatRoom, error) {
	if mock.CreateChatRoomFunc == nil {
		panic("StoreMock.CreateChatRoomFunc: method is nil but Store.CreateChatRoom was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Param parameter.CreateChatRoomParam
	}{
		Ctx:   ctx,
		Param: param,
	}
	mock.lockCreateChatRoom.Lock()
	mock.calls.CreateChatRoom = append(mock.calls.CreateChatRoom, callInfo)
	mock.lockCreateChatRoom.Unlock()
	return mock.CreateChatRoomFunc(ctx, param)
}

// CreateChatRoomCalls gets all the calls that were made to CreateChatRoom.
// Check the length with:
//
//	len(mockedStore.CreateChatRoomCalls())
func (mock *StoreMock) CreateChatRoomCalls() []struct {
	Ctx   context.Context
	Param parameter.CreateChatRoomParam
} {
	var calls []struct {
		Ctx   context.Context
		Param parameter.CreateChatRoomParam
	}
	mock.lockCreateChatRoom.RLock()
	calls = mock.calls.CreateChatRoom
	mock.lockCreateChatRoom.RUnlock()
	return calls
}

// CreateChatRoomAction calls CreateChatRoomActionFunc.
func (mock *StoreMock) CreateChatRoomAction(ctx context.Context, param parameter.CreateChatRoomActionParam) (entity.ChatRoomAction, error) {
	if mock.CreateChatRoomActionFunc == nil {
		panic("StoreMock.CreateChatRoomActionFunc: method is nil but Store.CreateChatRoomAction was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Param parameter.CreateChatRoomActionParam
	}{
		Ctx:   ctx,
		Param: param,
	}
	mock.lockCreateChatRoomAction.Lock()
	mock.calls.CreateChatRoomAction = append(mock.calls.CreateChatRoomAction, callInfo)
	mock.lockCreateChatRoomAction.Unlock()
	return mock.CreateChatRoomActionFunc(ctx, param)
}

// CreateChatRoomActionCalls gets all the calls that were made to CreateChatRoomAction.
// Check the length with:
//
//	len(mockedStore.CreateChatRoomActionCalls())
func (mock *StoreMock) CreateChatRoomActionCalls() []struct {
	Ctx   context.Context
	Param parameter.CreateChatRoomActionParam
} {
	var calls []struct {
		Ctx   context.Context
		Param parameter.CreateChatRoomActionParam
	}
	mock.lockCreateChatRoomAction.RLock()
	calls = mock.calls.CreateChatRoomAction
	mock.lockCreateChatRoomAction.RUnlock()
	return calls
}

// CreateChatRoomActionType calls CreateChatRoomActionTypeFunc.
func (mock *StoreMock) CreateChatRoomActionType(ctx context.Context, param parameter.CreateChatRoomActionTypeParam) (entity.ChatRoomActionType, error) {
	if mock.CreateChatRoomActionTypeFunc == nil {
		panic("StoreMock.CreateChatRoomActionTypeFunc: method is nil but Store.CreateChatRoomActionType was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Param parameter.CreateChatRoomActionTypeParam
	}{
		Ctx:   ctx,
		Param: param,
	}
	mock.lockCreateChatRoomActionType.Lock()
	mock.calls.CreateChatRoomActionType = append(mock.calls.CreateChatRoomActionType, callInfo)
	mock.lockCreateChatRoomActionType.Unlock()
	return mock.CreateChatRoomActionTypeFunc(ctx, param)
}

// CreateChatRoomActionTypeCalls gets all the calls that were made to CreateChatRoomActionType.
// Check the length with:
//
//	len(mockedStore.CreateChatRoomActionTypeCalls())
func (mock *StoreMock) CreateChatRoomActionTypeCalls() []struct {
	Ctx   context.Context
	Param parameter.CreateChatRoomActionTypeParam
} {
	var calls []struct {
		Ctx   context.Context
		Param parameter.CreateChatRoomActionTypeParam
	}
	mock.lockCreateChatRoomActionType.RLock()
	calls = mock.calls.CreateChatRoomActionType
	mock.lockCreateChatRoomActionType.RUnlock()
	return calls
}

// CreateChatRoomActionTypeWithSd calls CreateChatRoomActionTypeWithSdFunc.
func (mock *StoreMock) CreateChatRoomActionTypeWithSd(ctx context.Context, sd Sd, param parameter.CreateChatRoomActionTypeParam) (entity.ChatRoomActionType, error) {
	if mock.CreateChatRoomActionTypeWithSdFunc == nil {
		panic("StoreMock.CreateChatRoomActionTypeWithSdFunc: method is nil but Store.CreateChatRoomActionTypeWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateChatRoomActionTypeParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Param: param,
	}
	mock.lockCreateChatRoomActionTypeWithSd.Lock()
	mock.calls.CreateChatRoomActionTypeWithSd = append(mock.calls.CreateChatRoomActionTypeWithSd, callInfo)
	mock.lockCreateChatRoomActionTypeWithSd.Unlock()
	return mock.CreateChatRoomActionTypeWithSdFunc(ctx, sd, param)
}

// CreateChatRoomActionTypeWithSdCalls gets all the calls that were made to CreateChatRoomActionTypeWithSd.
// Check the length with:
//
//	len(mockedStore.CreateChatRoomActionTypeWithSdCalls())
func (mock *StoreMock) CreateChatRoomActionTypeWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Param parameter.CreateChatRoomActionTypeParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateChatRoomActionTypeParam
	}
	mock.lockCreateChatRoomActionTypeWithSd.RLock()
	calls = mock.calls.CreateChatRoomActionTypeWithSd
	mock.lockCreateChatRoomActionTypeWithSd.RUnlock()
	return calls
}

// CreateChatRoomActionTypes calls CreateChatRoomActionTypesFunc.
func (mock *StoreMock) CreateChatRoomActionTypes(ctx context.Context, params []parameter.CreateChatRoomActionTypeParam) (int64, error) {
	if mock.CreateChatRoomActionTypesFunc == nil {
		panic("StoreMock.CreateChatRoomActionTypesFunc: method is nil but Store.CreateChatRoomActionTypes was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params []parameter.CreateChatRoomActionTypeParam
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockCreateChatRoomActionTypes.Lock()
	mock.calls.CreateChatRoomActionTypes = append(mock.calls.CreateChatRoomActionTypes, callInfo)
	mock.lockCreateChatRoomActionTypes.Unlock()
	return mock.CreateChatRoomActionTypesFunc(ctx, params)
}

// CreateChatRoomActionTypesCalls gets all the calls that were made to CreateChatRoomActionTypes.
// Check the length with:
//
//	len(mockedStore.CreateChatRoomActionTypesCalls())
func (mock *StoreMock) CreateChatRoomActionTypesCalls() []struct {
	Ctx    context.Context
	Params []parameter.CreateChatRoomActionTypeParam
} {
	var calls []struct {
		Ctx    context.Context
		Params []parameter.CreateChatRoomActionTypeParam
	}
	mock.lockCreateChatRoomActionTypes.RLock()
	calls = mock.calls.CreateChatRoomActionTypes
	mock.lockCreateChatRoomActionTypes.RUnlock()
	return calls
}

// CreateChatRoomActionTypesWithSd calls CreateChatRoomActionTypesWithSdFunc.
func (mock *StoreMock) CreateChatRoomActionTypesWithSd(ctx context.Context, sd Sd, params []parameter.CreateChatRoomActionTypeParam) (int64, error) {
	if mock.CreateChatRoomActionTypesWithSdFunc == nil {
		panic("StoreMock.CreateChatRoomActionTypesWithSdFunc: method is nil but Store.CreateChatRoomActionTypesWithSd was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateChatRoomActionTypeParam
	}{
		Ctx:    ctx,
		Sd:     sd,
		Params: params,
	}
	mock.lockCreateChatRoomActionTypesWithSd.Lock()
	mock.calls.CreateChatRoomActionTypesWithSd = append(mock.calls.CreateChatRoomActionTypesWithSd, callInfo)
	mock.lockCreateChatRoomActionTypesWithSd.Unlock()
	return mock.CreateChatRoomActionTypesWithSdFunc(ctx, sd, params)
}

// CreateChatRoomActionTypesWithSdCalls gets all the calls that were made to CreateChatRoomActionTypesWithSd.
// Check the length with:
//
//	len(mockedStore.CreateChatRoomActionTypesWithSdCalls())
func (mock *StoreMock) CreateChatRoomActionTypesWithSdCalls() []struct {
	Ctx    context.Context
	Sd     Sd
	Params []parameter.CreateChatRoomActionTypeParam
} {
	var calls []struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateChatRoomActionTypeParam
	}
	mock.lockCreateChatRoomActionTypesWithSd.RLock()
	calls = mock.calls.CreateChatRoomActionTypesWithSd
	mock.lockCreateChatRoomActionTypesWithSd.RUnlock()
	return calls
}

// CreateChatRoomActionWithSd calls CreateChatRoomActionWithSdFunc.
func (mock *StoreMock) CreateChatRoomActionWithSd(ctx context.Context, sd Sd, param parameter.CreateChatRoomActionParam) (entity.ChatRoomAction, error) {
	if mock.CreateChatRoomActionWithSdFunc == nil {
		panic("StoreMock.CreateChatRoomActionWithSdFunc: method is nil but Store.CreateChatRoomActionWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateChatRoomActionParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Param: param,
	}
	mock.lockCreateChatRoomActionWithSd.Lock()
	mock.calls.CreateChatRoomActionWithSd = append(mock.calls.CreateChatRoomActionWithSd, callInfo)
	mock.lockCreateChatRoomActionWithSd.Unlock()
	return mock.CreateChatRoomActionWithSdFunc(ctx, sd, param)
}

// CreateChatRoomActionWithSdCalls gets all the calls that were made to CreateChatRoomActionWithSd.
// Check the length with:
//
//	len(mockedStore.CreateChatRoomActionWithSdCalls())
func (mock *StoreMock) CreateChatRoomActionWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Param parameter.CreateChatRoomActionParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateChatRoomActionParam
	}
	mock.lockCreateChatRoomActionWithSd.RLock()
	calls = mock.calls.CreateChatRoomActionWithSd
	mock.lockCreateChatRoomActionWithSd.RUnlock()
	return calls
}

// CreateChatRoomActions calls CreateChatRoomActionsFunc.
func (mock *StoreMock) CreateChatRoomActions(ctx context.Context, params []parameter.CreateChatRoomActionParam) (int64, error) {
	if mock.CreateChatRoomActionsFunc == nil {
		panic("StoreMock.CreateChatRoomActionsFunc: method is nil but Store.CreateChatRoomActions was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params []parameter.CreateChatRoomActionParam
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockCreateChatRoomActions.Lock()
	mock.calls.CreateChatRoomActions = append(mock.calls.CreateChatRoomActions, callInfo)
	mock.lockCreateChatRoomActions.Unlock()
	return mock.CreateChatRoomActionsFunc(ctx, params)
}

// CreateChatRoomActionsCalls gets all the calls that were made to CreateChatRoomActions.
// Check the length with:
//
//	len(mockedStore.CreateChatRoomActionsCalls())
func (mock *StoreMock) CreateChatRoomActionsCalls() []struct {
	Ctx    context.Context
	Params []parameter.CreateChatRoomActionParam
} {
	var calls []struct {
		Ctx    context.Context
		Params []parameter.CreateChatRoomActionParam
	}
	mock.lockCreateChatRoomActions.RLock()
	calls = mock.calls.CreateChatRoomActions
	mock.lockCreateChatRoomActions.RUnlock()
	return calls
}

// CreateChatRoomActionsWithSd calls CreateChatRoomActionsWithSdFunc.
func (mock *StoreMock) CreateChatRoomActionsWithSd(ctx context.Context, sd Sd, params []parameter.CreateChatRoomActionParam) (int64, error) {
	if mock.CreateChatRoomActionsWithSdFunc == nil {
		panic("StoreMock.CreateChatRoomActionsWithSdFunc: method is nil but Store.CreateChatRoomActionsWithSd was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateChatRoomActionParam
	}{
		Ctx:    ctx,
		Sd:     sd,
		Params: params,
	}
	mock.lockCreateChatRoomActionsWithSd.Lock()
	mock.calls.CreateChatRoomActionsWithSd = append(mock.calls.CreateChatRoomActionsWithSd, callInfo)
	mock.lockCreateChatRoomActionsWithSd.Unlock()
	return mock.CreateChatRoomActionsWithSdFunc(ctx, sd, params)
}

// CreateChatRoomActionsWithSdCalls gets all the calls that were made to CreateChatRoomActionsWithSd.
// Check the length with:
//
//	len(mockedStore.CreateChatRoomActionsWithSdCalls())
func (mock *StoreMock) CreateChatRoomActionsWithSdCalls() []struct {
	Ctx    context.Context
	Sd     Sd
	Params []parameter.CreateChatRoomActionParam
} {
	var calls []struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateChatRoomActionParam
	}
	mock.lockCreateChatRoomActionsWithSd.RLock()
	calls = mock.calls.CreateChatRoomActionsWithSd
	mock.lockCreateChatRoomActionsWithSd.RUnlock()
	return calls
}

// CreateChatRoomAddMemberAction calls CreateChatRoomAddMemberActionFunc.
func (mock *StoreMock) CreateChatRoomAddMemberAction(ctx context.Context, param parameter.CreateChatRoomAddMemberActionParam) (entity.ChatRoomAddMemberAction, error) {
	if mock.CreateChatRoomAddMemberActionFunc == nil {
		panic("StoreMock.CreateChatRoomAddMemberActionFunc: method is nil but Store.CreateChatRoomAddMemberAction was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Param parameter.CreateChatRoomAddMemberActionParam
	}{
		Ctx:   ctx,
		Param: param,
	}
	mock.lockCreateChatRoomAddMemberAction.Lock()
	mock.calls.CreateChatRoomAddMemberAction = append(mock.calls.CreateChatRoomAddMemberAction, callInfo)
	mock.lockCreateChatRoomAddMemberAction.Unlock()
	return mock.CreateChatRoomAddMemberActionFunc(ctx, param)
}

// CreateChatRoomAddMemberActionCalls gets all the calls that were made to CreateChatRoomAddMemberAction.
// Check the length with:
//
//	len(mockedStore.CreateChatRoomAddMemberActionCalls())
func (mock *StoreMock) CreateChatRoomAddMemberActionCalls() []struct {
	Ctx   context.Context
	Param parameter.CreateChatRoomAddMemberActionParam
} {
	var calls []struct {
		Ctx   context.Context
		Param parameter.CreateChatRoomAddMemberActionParam
	}
	mock.lockCreateChatRoomAddMemberAction.RLock()
	calls = mock.calls.CreateChatRoomAddMemberAction
	mock.lockCreateChatRoomAddMemberAction.RUnlock()
	return calls
}

// CreateChatRoomAddMemberActionWithSd calls CreateChatRoomAddMemberActionWithSdFunc.
func (mock *StoreMock) CreateChatRoomAddMemberActionWithSd(ctx context.Context, sd Sd, param parameter.CreateChatRoomAddMemberActionParam) (entity.ChatRoomAddMemberAction, error) {
	if mock.CreateChatRoomAddMemberActionWithSdFunc == nil {
		panic("StoreMock.CreateChatRoomAddMemberActionWithSdFunc: method is nil but Store.CreateChatRoomAddMemberActionWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateChatRoomAddMemberActionParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Param: param,
	}
	mock.lockCreateChatRoomAddMemberActionWithSd.Lock()
	mock.calls.CreateChatRoomAddMemberActionWithSd = append(mock.calls.CreateChatRoomAddMemberActionWithSd, callInfo)
	mock.lockCreateChatRoomAddMemberActionWithSd.Unlock()
	return mock.CreateChatRoomAddMemberActionWithSdFunc(ctx, sd, param)
}

// CreateChatRoomAddMemberActionWithSdCalls gets all the calls that were made to CreateChatRoomAddMemberActionWithSd.
// Check the length with:
//
//	len(mockedStore.CreateChatRoomAddMemberActionWithSdCalls())
func (mock *StoreMock) CreateChatRoomAddMemberActionWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Param parameter.CreateChatRoomAddMemberActionParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateChatRoomAddMemberActionParam
	}
	mock.lockCreateChatRoomAddMemberActionWithSd.RLock()
	calls = mock.calls.CreateChatRoomAddMemberActionWithSd
	mock.lockCreateChatRoomAddMemberActionWithSd.RUnlock()
	return calls
}

// CreateChatRoomAddMemberActions calls CreateChatRoomAddMemberActionsFunc.
func (mock *StoreMock) CreateChatRoomAddMemberActions(ctx context.Context, params []parameter.CreateChatRoomAddMemberActionParam) (int64, error) {
	if mock.CreateChatRoomAddMemberActionsFunc == nil {
		panic("StoreMock.CreateChatRoomAddMemberActionsFunc: method is nil but Store.CreateChatRoomAddMemberActions was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params []parameter.CreateChatRoomAddMemberActionParam
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockCreateChatRoomAddMemberActions.Lock()
	mock.calls.CreateChatRoomAddMemberActions = append(mock.calls.CreateChatRoomAddMemberActions, callInfo)
	mock.lockCreateChatRoomAddMemberActions.Unlock()
	return mock.CreateChatRoomAddMemberActionsFunc(ctx, params)
}

// CreateChatRoomAddMemberActionsCalls gets all the calls that were made to CreateChatRoomAddMemberActions.
// Check the length with:
//
//	len(mockedStore.CreateChatRoomAddMemberActionsCalls())
func (mock *StoreMock) CreateChatRoomAddMemberActionsCalls() []struct {
	Ctx    context.Context
	Params []parameter.CreateChatRoomAddMemberActionParam
} {
	var calls []struct {
		Ctx    context.Context
		Params []parameter.CreateChatRoomAddMemberActionParam
	}
	mock.lockCreateChatRoomAddMemberActions.RLock()
	calls = mock.calls.CreateChatRoomAddMemberActions
	mock.lockCreateChatRoomAddMemberActions.RUnlock()
	return calls
}

// CreateChatRoomAddMemberActionsWithSd calls CreateChatRoomAddMemberActionsWithSdFunc.
func (mock *StoreMock) CreateChatRoomAddMemberActionsWithSd(ctx context.Context, sd Sd, params []parameter.CreateChatRoomAddMemberActionParam) (int64, error) {
	if mock.CreateChatRoomAddMemberActionsWithSdFunc == nil {
		panic("StoreMock.CreateChatRoomAddMemberActionsWithSdFunc: method is nil but Store.CreateChatRoomAddMemberActionsWithSd was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateChatRoomAddMemberActionParam
	}{
		Ctx:    ctx,
		Sd:     sd,
		Params: params,
	}
	mock.lockCreateChatRoomAddMemberActionsWithSd.Lock()
	mock.calls.CreateChatRoomAddMemberActionsWithSd = append(mock.calls.CreateChatRoomAddMemberActionsWithSd, callInfo)
	mock.lockCreateChatRoomAddMemberActionsWithSd.Unlock()
	return mock.CreateChatRoomAddMemberActionsWithSdFunc(ctx, sd, params)
}

// CreateChatRoomAddMemberActionsWithSdCalls gets all the calls that were made to CreateChatRoomAddMemberActionsWithSd.
// Check the length with:
//
//	len(mockedStore.CreateChatRoomAddMemberActionsWithSdCalls())
func (mock *StoreMock) CreateChatRoomAddMemberActionsWithSdCalls() []struct {
	Ctx    context.Context
	Sd     Sd
	Params []parameter.CreateChatRoomAddMemberActionParam
} {
	var calls []struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateChatRoomAddMemberActionParam
	}
	mock.lockCreateChatRoomAddMemberActionsWithSd.RLock()
	calls = mock.calls.CreateChatRoomAddMemberActionsWithSd
	mock.lockCreateChatRoomAddMemberActionsWithSd.RUnlock()
	return calls
}

// CreateChatRoomCreateAction calls CreateChatRoomCreateActionFunc.
func (mock *StoreMock) CreateChatRoomCreateAction(ctx context.Context, param parameter.CreateChatRoomCreateActionParam) (entity.ChatRoomCreateAction, error) {
	if mock.CreateChatRoomCreateActionFunc == nil {
		panic("StoreMock.CreateChatRoomCreateActionFunc: method is nil but Store.CreateChatRoomCreateAction was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Param parameter.CreateChatRoomCreateActionParam
	}{
		Ctx:   ctx,
		Param: param,
	}
	mock.lockCreateChatRoomCreateAction.Lock()
	mock.calls.CreateChatRoomCreateAction = append(mock.calls.CreateChatRoomCreateAction, callInfo)
	mock.lockCreateChatRoomCreateAction.Unlock()
	return mock.CreateChatRoomCreateActionFunc(ctx, param)
}

// CreateChatRoomCreateActionCalls gets all the calls that were made to CreateChatRoomCreateAction.
// Check the length with:
//
//	len(mockedStore.CreateChatRoomCreateActionCalls())
func (mock *StoreMock) CreateChatRoomCreateActionCalls() []struct {
	Ctx   context.Context
	Param parameter.CreateChatRoomCreateActionParam
} {
	var calls []struct {
		Ctx   context.Context
		Param parameter.CreateChatRoomCreateActionParam
	}
	mock.lockCreateChatRoomCreateAction.RLock()
	calls = mock.calls.CreateChatRoomCreateAction
	mock.lockCreateChatRoomCreateAction.RUnlock()
	return calls
}

// CreateChatRoomCreateActionWithSd calls CreateChatRoomCreateActionWithSdFunc.
func (mock *StoreMock) CreateChatRoomCreateActionWithSd(ctx context.Context, sd Sd, param parameter.CreateChatRoomCreateActionParam) (entity.ChatRoomCreateAction, error) {
	if mock.CreateChatRoomCreateActionWithSdFunc == nil {
		panic("StoreMock.CreateChatRoomCreateActionWithSdFunc: method is nil but Store.CreateChatRoomCreateActionWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateChatRoomCreateActionParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Param: param,
	}
	mock.lockCreateChatRoomCreateActionWithSd.Lock()
	mock.calls.CreateChatRoomCreateActionWithSd = append(mock.calls.CreateChatRoomCreateActionWithSd, callInfo)
	mock.lockCreateChatRoomCreateActionWithSd.Unlock()
	return mock.CreateChatRoomCreateActionWithSdFunc(ctx, sd, param)
}

// CreateChatRoomCreateActionWithSdCalls gets all the calls that were made to CreateChatRoomCreateActionWithSd.
// Check the length with:
//
//	len(mockedStore.CreateChatRoomCreateActionWithSdCalls())
func (mock *StoreMock) CreateChatRoomCreateActionWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Param parameter.CreateChatRoomCreateActionParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateChatRoomCreateActionParam
	}
	mock.lockCreateChatRoomCreateActionWithSd.RLock()
	calls = mock.calls.CreateChatRoomCreateActionWithSd
	mock.lockCreateChatRoomCreateActionWithSd.RUnlock()
	return calls
}

// CreateChatRoomCreateActions calls CreateChatRoomCreateActionsFunc.
func (mock *StoreMock) CreateChatRoomCreateActions(ctx context.Context, params []parameter.CreateChatRoomCreateActionParam) (int64, error) {
	if mock.CreateChatRoomCreateActionsFunc == nil {
		panic("StoreMock.CreateChatRoomCreateActionsFunc: method is nil but Store.CreateChatRoomCreateActions was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params []parameter.CreateChatRoomCreateActionParam
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockCreateChatRoomCreateActions.Lock()
	mock.calls.CreateChatRoomCreateActions = append(mock.calls.CreateChatRoomCreateActions, callInfo)
	mock.lockCreateChatRoomCreateActions.Unlock()
	return mock.CreateChatRoomCreateActionsFunc(ctx, params)
}

// CreateChatRoomCreateActionsCalls gets all the calls that were made to CreateChatRoomCreateActions.
// Check the length with:
//
//	len(mockedStore.CreateChatRoomCreateActionsCalls())
func (mock *StoreMock) CreateChatRoomCreateActionsCalls() []struct {
	Ctx    context.Context
	Params []parameter.CreateChatRoomCreateActionParam
} {
	var calls []struct {
		Ctx    context.Context
		Params []parameter.CreateChatRoomCreateActionParam
	}
	mock.lockCreateChatRoomCreateActions.RLock()
	calls = mock.calls.CreateChatRoomCreateActions
	mock.lockCreateChatRoomCreateActions.RUnlock()
	return calls
}

// CreateChatRoomCreateActionsWithSd calls CreateChatRoomCreateActionsWithSdFunc.
func (mock *StoreMock) CreateChatRoomCreateActionsWithSd(ctx context.Context, sd Sd, params []parameter.CreateChatRoomCreateActionParam) (int64, error) {
	if mock.CreateChatRoomCreateActionsWithSdFunc == nil {
		panic("StoreMock.CreateChatRoomCreateActionsWithSdFunc: method is nil but Store.CreateChatRoomCreateActionsWithSd was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateChatRoomCreateActionParam
	}{
		Ctx:    ctx,
		Sd:     sd,
		Params: params,
	}
	mock.lockCreateChatRoomCreateActionsWithSd.Lock()
	mock.calls.CreateChatRoomCreateActionsWithSd = append(mock.calls.CreateChatRoomCreateActionsWithSd, callInfo)
	mock.lockCreateChatRoomCreateActionsWithSd.Unlock()
	return mock.CreateChatRoomCreateActionsWithSdFunc(ctx, sd, params)
}

// CreateChatRoomCreateActionsWithSdCalls gets all the calls that were made to CreateChatRoomCreateActionsWithSd.
// Check the length with:
//
//	len(mockedStore.CreateChatRoomCreateActionsWithSdCalls())
func (mock *StoreMock) CreateChatRoomCreateActionsWithSdCalls() []struct {
	Ctx    context.Context
	Sd     Sd
	Params []parameter.CreateChatRoomCreateActionParam
} {
	var calls []struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateChatRoomCreateActionParam
	}
	mock.lockCreateChatRoomCreateActionsWithSd.RLock()
	calls = mock.calls.CreateChatRoomCreateActionsWithSd
	mock.lockCreateChatRoomCreateActionsWithSd.RUnlock()
	return calls
}

// CreateChatRoomDeleteMessageAction calls CreateChatRoomDeleteMessageActionFunc.
func (mock *StoreMock) CreateChatRoomDeleteMessageAction(ctx context.Context, param parameter.CreateChatRoomDeleteMessageActionParam) (entity.ChatRoomDeleteMessageAction, error) {
	if mock.CreateChatRoomDeleteMessageActionFunc == nil {
		panic("StoreMock.CreateChatRoomDeleteMessageActionFunc: method is nil but Store.CreateChatRoomDeleteMessageAction was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Param parameter.CreateChatRoomDeleteMessageActionParam
	}{
		Ctx:   ctx,
		Param: param,
	}
	mock.lockCreateChatRoomDeleteMessageAction.Lock()
	mock.calls.CreateChatRoomDeleteMessageAction = append(mock.calls.CreateChatRoomDeleteMessageAction, callInfo)
	mock.lockCreateChatRoomDeleteMessageAction.Unlock()
	return mock.CreateChatRoomDeleteMessageActionFunc(ctx, param)
}

// CreateChatRoomDeleteMessageActionCalls gets all the calls that were made to CreateChatRoomDeleteMessageAction.
// Check the length with:
//
//	len(mockedStore.CreateChatRoomDeleteMessageActionCalls())
func (mock *StoreMock) CreateChatRoomDeleteMessageActionCalls() []struct {
	Ctx   context.Context
	Param parameter.CreateChatRoomDeleteMessageActionParam
} {
	var calls []struct {
		Ctx   context.Context
		Param parameter.CreateChatRoomDeleteMessageActionParam
	}
	mock.lockCreateChatRoomDeleteMessageAction.RLock()
	calls = mock.calls.CreateChatRoomDeleteMessageAction
	mock.lockCreateChatRoomDeleteMessageAction.RUnlock()
	return calls
}

// CreateChatRoomDeleteMessageActionWithSd calls CreateChatRoomDeleteMessageActionWithSdFunc.
func (mock *StoreMock) CreateChatRoomDeleteMessageActionWithSd(ctx context.Context, sd Sd, param parameter.CreateChatRoomDeleteMessageActionParam) (entity.ChatRoomDeleteMessageAction, error) {
	if mock.CreateChatRoomDeleteMessageActionWithSdFunc == nil {
		panic("StoreMock.CreateChatRoomDeleteMessageActionWithSdFunc: method is nil but Store.CreateChatRoomDeleteMessageActionWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateChatRoomDeleteMessageActionParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Param: param,
	}
	mock.lockCreateChatRoomDeleteMessageActionWithSd.Lock()
	mock.calls.CreateChatRoomDeleteMessageActionWithSd = append(mock.calls.CreateChatRoomDeleteMessageActionWithSd, callInfo)
	mock.lockCreateChatRoomDeleteMessageActionWithSd.Unlock()
	return mock.CreateChatRoomDeleteMessageActionWithSdFunc(ctx, sd, param)
}

// CreateChatRoomDeleteMessageActionWithSdCalls gets all the calls that were made to CreateChatRoomDeleteMessageActionWithSd.
// Check the length with:
//
//	len(mockedStore.CreateChatRoomDeleteMessageActionWithSdCalls())
func (mock *StoreMock) CreateChatRoomDeleteMessageActionWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Param parameter.CreateChatRoomDeleteMessageActionParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateChatRoomDeleteMessageActionParam
	}
	mock.lockCreateChatRoomDeleteMessageActionWithSd.RLock()
	calls = mock.calls.CreateChatRoomDeleteMessageActionWithSd
	mock.lockCreateChatRoomDeleteMessageActionWithSd.RUnlock()
	return calls
}

// CreateChatRoomDeleteMessageActions calls CreateChatRoomDeleteMessageActionsFunc.
func (mock *StoreMock) CreateChatRoomDeleteMessageActions(ctx context.Context, params []parameter.CreateChatRoomDeleteMessageActionParam) (int64, error) {
	if mock.CreateChatRoomDeleteMessageActionsFunc == nil {
		panic("StoreMock.CreateChatRoomDeleteMessageActionsFunc: method is nil but Store.CreateChatRoomDeleteMessageActions was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params []parameter.CreateChatRoomDeleteMessageActionParam
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockCreateChatRoomDeleteMessageActions.Lock()
	mock.calls.CreateChatRoomDeleteMessageActions = append(mock.calls.CreateChatRoomDeleteMessageActions, callInfo)
	mock.lockCreateChatRoomDeleteMessageActions.Unlock()
	return mock.CreateChatRoomDeleteMessageActionsFunc(ctx, params)
}

// CreateChatRoomDeleteMessageActionsCalls gets all the calls that were made to CreateChatRoomDeleteMessageActions.
// Check the length with:
//
//	len(mockedStore.CreateChatRoomDeleteMessageActionsCalls())
func (mock *StoreMock) CreateChatRoomDeleteMessageActionsCalls() []struct {
	Ctx    context.Context
	Params []parameter.CreateChatRoomDeleteMessageActionParam
} {
	var calls []struct {
		Ctx    context.Context
		Params []parameter.CreateChatRoomDeleteMessageActionParam
	}
	mock.lockCreateChatRoomDeleteMessageActions.RLock()
	calls = mock.calls.CreateChatRoomDeleteMessageActions
	mock.lockCreateChatRoomDeleteMessageActions.RUnlock()
	return calls
}

// CreateChatRoomDeleteMessageActionsWithSd calls CreateChatRoomDeleteMessageActionsWithSdFunc.
func (mock *StoreMock) CreateChatRoomDeleteMessageActionsWithSd(ctx context.Context, sd Sd, params []parameter.CreateChatRoomDeleteMessageActionParam) (int64, error) {
	if mock.CreateChatRoomDeleteMessageActionsWithSdFunc == nil {
		panic("StoreMock.CreateChatRoomDeleteMessageActionsWithSdFunc: method is nil but Store.CreateChatRoomDeleteMessageActionsWithSd was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateChatRoomDeleteMessageActionParam
	}{
		Ctx:    ctx,
		Sd:     sd,
		Params: params,
	}
	mock.lockCreateChatRoomDeleteMessageActionsWithSd.Lock()
	mock.calls.CreateChatRoomDeleteMessageActionsWithSd = append(mock.calls.CreateChatRoomDeleteMessageActionsWithSd, callInfo)
	mock.lockCreateChatRoomDeleteMessageActionsWithSd.Unlock()
	return mock.CreateChatRoomDeleteMessageActionsWithSdFunc(ctx, sd, params)
}

// CreateChatRoomDeleteMessageActionsWithSdCalls gets all the calls that were made to CreateChatRoomDeleteMessageActionsWithSd.
// Check the length with:
//
//	len(mockedStore.CreateChatRoomDeleteMessageActionsWithSdCalls())
func (mock *StoreMock) CreateChatRoomDeleteMessageActionsWithSdCalls() []struct {
	Ctx    context.Context
	Sd     Sd
	Params []parameter.CreateChatRoomDeleteMessageActionParam
} {
	var calls []struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateChatRoomDeleteMessageActionParam
	}
	mock.lockCreateChatRoomDeleteMessageActionsWithSd.RLock()
	calls = mock.calls.CreateChatRoomDeleteMessageActionsWithSd
	mock.lockCreateChatRoomDeleteMessageActionsWithSd.RUnlock()
	return calls
}

// CreateChatRoomRemoveMemberAction calls CreateChatRoomRemoveMemberActionFunc.
func (mock *StoreMock) CreateChatRoomRemoveMemberAction(ctx context.Context, param parameter.CreateChatRoomRemoveMemberActionParam) (entity.ChatRoomRemoveMemberAction, error) {
	if mock.CreateChatRoomRemoveMemberActionFunc == nil {
		panic("StoreMock.CreateChatRoomRemoveMemberActionFunc: method is nil but Store.CreateChatRoomRemoveMemberAction was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Param parameter.CreateChatRoomRemoveMemberActionParam
	}{
		Ctx:   ctx,
		Param: param,
	}
	mock.lockCreateChatRoomRemoveMemberAction.Lock()
	mock.calls.CreateChatRoomRemoveMemberAction = append(mock.calls.CreateChatRoomRemoveMemberAction, callInfo)
	mock.lockCreateChatRoomRemoveMemberAction.Unlock()
	return mock.CreateChatRoomRemoveMemberActionFunc(ctx, param)
}

// CreateChatRoomRemoveMemberActionCalls gets all the calls that were made to CreateChatRoomRemoveMemberAction.
// Check the length with:
//
//	len(mockedStore.CreateChatRoomRemoveMemberActionCalls())
func (mock *StoreMock) CreateChatRoomRemoveMemberActionCalls() []struct {
	Ctx   context.Context
	Param parameter.CreateChatRoomRemoveMemberActionParam
} {
	var calls []struct {
		Ctx   context.Context
		Param parameter.CreateChatRoomRemoveMemberActionParam
	}
	mock.lockCreateChatRoomRemoveMemberAction.RLock()
	calls = mock.calls.CreateChatRoomRemoveMemberAction
	mock.lockCreateChatRoomRemoveMemberAction.RUnlock()
	return calls
}

// CreateChatRoomRemoveMemberActionWithSd calls CreateChatRoomRemoveMemberActionWithSdFunc.
func (mock *StoreMock) CreateChatRoomRemoveMemberActionWithSd(ctx context.Context, sd Sd, param parameter.CreateChatRoomRemoveMemberActionParam) (entity.ChatRoomRemoveMemberAction, error) {
	if mock.CreateChatRoomRemoveMemberActionWithSdFunc == nil {
		panic("StoreMock.CreateChatRoomRemoveMemberActionWithSdFunc: method is nil but Store.CreateChatRoomRemoveMemberActionWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateChatRoomRemoveMemberActionParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Param: param,
	}
	mock.lockCreateChatRoomRemoveMemberActionWithSd.Lock()
	mock.calls.CreateChatRoomRemoveMemberActionWithSd = append(mock.calls.CreateChatRoomRemoveMemberActionWithSd, callInfo)
	mock.lockCreateChatRoomRemoveMemberActionWithSd.Unlock()
	return mock.CreateChatRoomRemoveMemberActionWithSdFunc(ctx, sd, param)
}

// CreateChatRoomRemoveMemberActionWithSdCalls gets all the calls that were made to CreateChatRoomRemoveMemberActionWithSd.
// Check the length with:
//
//	len(mockedStore.CreateChatRoomRemoveMemberActionWithSdCalls())
func (mock *StoreMock) CreateChatRoomRemoveMemberActionWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Param parameter.CreateChatRoomRemoveMemberActionParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateChatRoomRemoveMemberActionParam
	}
	mock.lockCreateChatRoomRemoveMemberActionWithSd.RLock()
	calls = mock.calls.CreateChatRoomRemoveMemberActionWithSd
	mock.lockCreateChatRoomRemoveMemberActionWithSd.RUnlock()
	return calls
}

// CreateChatRoomRemoveMemberActions calls CreateChatRoomRemoveMemberActionsFunc.
func (mock *StoreMock) CreateChatRoomRemoveMemberActions(ctx context.Context, params []parameter.CreateChatRoomRemoveMemberActionParam) (int64, error) {
	if mock.CreateChatRoomRemoveMemberActionsFunc == nil {
		panic("StoreMock.CreateChatRoomRemoveMemberActionsFunc: method is nil but Store.CreateChatRoomRemoveMemberActions was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params []parameter.CreateChatRoomRemoveMemberActionParam
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockCreateChatRoomRemoveMemberActions.Lock()
	mock.calls.CreateChatRoomRemoveMemberActions = append(mock.calls.CreateChatRoomRemoveMemberActions, callInfo)
	mock.lockCreateChatRoomRemoveMemberActions.Unlock()
	return mock.CreateChatRoomRemoveMemberActionsFunc(ctx, params)
}

// CreateChatRoomRemoveMemberActionsCalls gets all the calls that were made to CreateChatRoomRemoveMemberActions.
// Check the length with:
//
//	len(mockedStore.CreateChatRoomRemoveMemberActionsCalls())
func (mock *StoreMock) CreateChatRoomRemoveMemberActionsCalls() []struct {
	Ctx    context.Context
	Params []parameter.CreateChatRoomRemoveMemberActionParam
} {
	var calls []struct {
		Ctx    context.Context
		Params []parameter.CreateChatRoomRemoveMemberActionParam
	}
	mock.lockCreateChatRoomRemoveMemberActions.RLock()
	calls = mock.calls.CreateChatRoomRemoveMemberActions
	mock.lockCreateChatRoomRemoveMemberActions.RUnlock()
	return calls
}

// CreateChatRoomRemoveMemberActionsWithSd calls CreateChatRoomRemoveMemberActionsWithSdFunc.
func (mock *StoreMock) CreateChatRoomRemoveMemberActionsWithSd(ctx context.Context, sd Sd, params []parameter.CreateChatRoomRemoveMemberActionParam) (int64, error) {
	if mock.CreateChatRoomRemoveMemberActionsWithSdFunc == nil {
		panic("StoreMock.CreateChatRoomRemoveMemberActionsWithSdFunc: method is nil but Store.CreateChatRoomRemoveMemberActionsWithSd was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateChatRoomRemoveMemberActionParam
	}{
		Ctx:    ctx,
		Sd:     sd,
		Params: params,
	}
	mock.lockCreateChatRoomRemoveMemberActionsWithSd.Lock()
	mock.calls.CreateChatRoomRemoveMemberActionsWithSd = append(mock.calls.CreateChatRoomRemoveMemberActionsWithSd, callInfo)
	mock.lockCreateChatRoomRemoveMemberActionsWithSd.Unlock()
	return mock.CreateChatRoomRemoveMemberActionsWithSdFunc(ctx, sd, params)
}

// CreateChatRoomRemoveMemberActionsWithSdCalls gets all the calls that were made to CreateChatRoomRemoveMemberActionsWithSd.
// Check the length with:
//
//	len(mockedStore.CreateChatRoomRemoveMemberActionsWithSdCalls())
func (mock *StoreMock) CreateChatRoomRemoveMemberActionsWithSdCalls() []struct {
	Ctx    context.Context
	Sd     Sd
	Params []parameter.CreateChatRoomRemoveMemberActionParam
} {
	var calls []struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateChatRoomRemoveMemberActionParam
	}
	mock.lockCreateChatRoomRemoveMemberActionsWithSd.RLock()
	calls = mock.calls.CreateChatRoomRemoveMemberActionsWithSd
	mock.lockCreateChatRoomRemoveMemberActionsWithSd.RUnlock()
	return calls
}

// CreateChatRoomUpdateNameAction calls CreateChatRoomUpdateNameActionFunc.
func (mock *StoreMock) CreateChatRoomUpdateNameAction(ctx context.Context, param parameter.CreateChatRoomUpdateNameActionParam) (entity.ChatRoomUpdateNameAction, error) {
	if mock.CreateChatRoomUpdateNameActionFunc == nil {
		panic("StoreMock.CreateChatRoomUpdateNameActionFunc: method is nil but Store.CreateChatRoomUpdateNameAction was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Param parameter.CreateChatRoomUpdateNameActionParam
	}{
		Ctx:   ctx,
		Param: param,
	}
	mock.lockCreateChatRoomUpdateNameAction.Lock()
	mock.calls.CreateChatRoomUpdateNameAction = append(mock.calls.CreateChatRoomUpdateNameAction, callInfo)
	mock.lockCreateChatRoomUpdateNameAction.Unlock()
	return mock.CreateChatRoomUpdateNameActionFunc(ctx, param)
}

// CreateChatRoomUpdateNameActionCalls gets all the calls that were made to CreateChatRoomUpdateNameAction.
// Check the length with:
//
//	len(mockedStore.CreateChatRoomUpdateNameActionCalls())
func (mock *StoreMock) CreateChatRoomUpdateNameActionCalls() []struct {
	Ctx   context.Context
	Param parameter.CreateChatRoomUpdateNameActionParam
} {
	var calls []struct {
		Ctx   context.Context
		Param parameter.CreateChatRoomUpdateNameActionParam
	}
	mock.lockCreateChatRoomUpdateNameAction.RLock()
	calls = mock.calls.CreateChatRoomUpdateNameAction
	mock.lockCreateChatRoomUpdateNameAction.RUnlock()
	return calls
}

// CreateChatRoomUpdateNameActionWithSd calls CreateChatRoomUpdateNameActionWithSdFunc.
func (mock *StoreMock) CreateChatRoomUpdateNameActionWithSd(ctx context.Context, sd Sd, param parameter.CreateChatRoomUpdateNameActionParam) (entity.ChatRoomUpdateNameAction, error) {
	if mock.CreateChatRoomUpdateNameActionWithSdFunc == nil {
		panic("StoreMock.CreateChatRoomUpdateNameActionWithSdFunc: method is nil but Store.CreateChatRoomUpdateNameActionWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateChatRoomUpdateNameActionParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Param: param,
	}
	mock.lockCreateChatRoomUpdateNameActionWithSd.Lock()
	mock.calls.CreateChatRoomUpdateNameActionWithSd = append(mock.calls.CreateChatRoomUpdateNameActionWithSd, callInfo)
	mock.lockCreateChatRoomUpdateNameActionWithSd.Unlock()
	return mock.CreateChatRoomUpdateNameActionWithSdFunc(ctx, sd, param)
}

// CreateChatRoomUpdateNameActionWithSdCalls gets all the calls that were made to CreateChatRoomUpdateNameActionWithSd.
// Check the length with:
//
//	len(mockedStore.CreateChatRoomUpdateNameActionWithSdCalls())
func (mock *StoreMock) CreateChatRoomUpdateNameActionWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Param parameter.CreateChatRoomUpdateNameActionParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateChatRoomUpdateNameActionParam
	}
	mock.lockCreateChatRoomUpdateNameActionWithSd.RLock()
	calls = mock.calls.CreateChatRoomUpdateNameActionWithSd
	mock.lockCreateChatRoomUpdateNameActionWithSd.RUnlock()
	return calls
}

// CreateChatRoomUpdateNameActions calls CreateChatRoomUpdateNameActionsFunc.
func (mock *StoreMock) CreateChatRoomUpdateNameActions(ctx context.Context, params []parameter.CreateChatRoomUpdateNameActionParam) (int64, error) {
	if mock.CreateChatRoomUpdateNameActionsFunc == nil {
		panic("StoreMock.CreateChatRoomUpdateNameActionsFunc: method is nil but Store.CreateChatRoomUpdateNameActions was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params []parameter.CreateChatRoomUpdateNameActionParam
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockCreateChatRoomUpdateNameActions.Lock()
	mock.calls.CreateChatRoomUpdateNameActions = append(mock.calls.CreateChatRoomUpdateNameActions, callInfo)
	mock.lockCreateChatRoomUpdateNameActions.Unlock()
	return mock.CreateChatRoomUpdateNameActionsFunc(ctx, params)
}

// CreateChatRoomUpdateNameActionsCalls gets all the calls that were made to CreateChatRoomUpdateNameActions.
// Check the length with:
//
//	len(mockedStore.CreateChatRoomUpdateNameActionsCalls())
func (mock *StoreMock) CreateChatRoomUpdateNameActionsCalls() []struct {
	Ctx    context.Context
	Params []parameter.CreateChatRoomUpdateNameActionParam
} {
	var calls []struct {
		Ctx    context.Context
		Params []parameter.CreateChatRoomUpdateNameActionParam
	}
	mock.lockCreateChatRoomUpdateNameActions.RLock()
	calls = mock.calls.CreateChatRoomUpdateNameActions
	mock.lockCreateChatRoomUpdateNameActions.RUnlock()
	return calls
}

// CreateChatRoomUpdateNameActionsWithSd calls CreateChatRoomUpdateNameActionsWithSdFunc.
func (mock *StoreMock) CreateChatRoomUpdateNameActionsWithSd(ctx context.Context, sd Sd, params []parameter.CreateChatRoomUpdateNameActionParam) (int64, error) {
	if mock.CreateChatRoomUpdateNameActionsWithSdFunc == nil {
		panic("StoreMock.CreateChatRoomUpdateNameActionsWithSdFunc: method is nil but Store.CreateChatRoomUpdateNameActionsWithSd was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateChatRoomUpdateNameActionParam
	}{
		Ctx:    ctx,
		Sd:     sd,
		Params: params,
	}
	mock.lockCreateChatRoomUpdateNameActionsWithSd.Lock()
	mock.calls.CreateChatRoomUpdateNameActionsWithSd = append(mock.calls.CreateChatRoomUpdateNameActionsWithSd, callInfo)
	mock.lockCreateChatRoomUpdateNameActionsWithSd.Unlock()
	return mock.CreateChatRoomUpdateNameActionsWithSdFunc(ctx, sd, params)
}

// CreateChatRoomUpdateNameActionsWithSdCalls gets all the calls that were made to CreateChatRoomUpdateNameActionsWithSd.
// Check the length with:
//
//	len(mockedStore.CreateChatRoomUpdateNameActionsWithSdCalls())
func (mock *StoreMock) CreateChatRoomUpdateNameActionsWithSdCalls() []struct {
	Ctx    context.Context
	Sd     Sd
	Params []parameter.CreateChatRoomUpdateNameActionParam
} {
	var calls []struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateChatRoomUpdateNameActionParam
	}
	mock.lockCreateChatRoomUpdateNameActionsWithSd.RLock()
	calls = mock.calls.CreateChatRoomUpdateNameActionsWithSd
	mock.lockCreateChatRoomUpdateNameActionsWithSd.RUnlock()
	return calls
}

// CreateChatRoomWithSd calls CreateChatRoomWithSdFunc.
func (mock *StoreMock) CreateChatRoomWithSd(ctx context.Context, sd Sd, param parameter.CreateChatRoomParam) (entity.ChatRoom, error) {
	if mock.CreateChatRoomWithSdFunc == nil {
		panic("StoreMock.CreateChatRoomWithSdFunc: method is nil but Store.CreateChatRoomWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateChatRoomParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Param: param,
	}
	mock.lockCreateChatRoomWithSd.Lock()
	mock.calls.CreateChatRoomWithSd = append(mock.calls.CreateChatRoomWithSd, callInfo)
	mock.lockCreateChatRoomWithSd.Unlock()
	return mock.CreateChatRoomWithSdFunc(ctx, sd, param)
}

// CreateChatRoomWithSdCalls gets all the calls that were made to CreateChatRoomWithSd.
// Check the length with:
//
//	len(mockedStore.CreateChatRoomWithSdCalls())
func (mock *StoreMock) CreateChatRoomWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Param parameter.CreateChatRoomParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateChatRoomParam
	}
	mock.lockCreateChatRoomWithSd.RLock()
	calls = mock.calls.CreateChatRoomWithSd
	mock.lockCreateChatRoomWithSd.RUnlock()
	return calls
}

// CreateChatRoomWithdrawAction calls CreateChatRoomWithdrawActionFunc.
func (mock *StoreMock) CreateChatRoomWithdrawAction(ctx context.Context, param parameter.CreateChatRoomWithdrawActionParam) (entity.ChatRoomWithdrawAction, error) {
	if mock.CreateChatRoomWithdrawActionFunc == nil {
		panic("StoreMock.CreateChatRoomWithdrawActionFunc: method is nil but Store.CreateChatRoomWithdrawAction was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Param parameter.CreateChatRoomWithdrawActionParam
	}{
		Ctx:   ctx,
		Param: param,
	}
	mock.lockCreateChatRoomWithdrawAction.Lock()
	mock.calls.CreateChatRoomWithdrawAction = append(mock.calls.CreateChatRoomWithdrawAction, callInfo)
	mock.lockCreateChatRoomWithdrawAction.Unlock()
	return mock.CreateChatRoomWithdrawActionFunc(ctx, param)
}

// CreateChatRoomWithdrawActionCalls gets all the calls that were made to CreateChatRoomWithdrawAction.
// Check the length with:
//
//	len(mockedStore.CreateChatRoomWithdrawActionCalls())
func (mock *StoreMock) CreateChatRoomWithdrawActionCalls() []struct {
	Ctx   context.Context
	Param parameter.CreateChatRoomWithdrawActionParam
} {
	var calls []struct {
		Ctx   context.Context
		Param parameter.CreateChatRoomWithdrawActionParam
	}
	mock.lockCreateChatRoomWithdrawAction.RLock()
	calls = mock.calls.CreateChatRoomWithdrawAction
	mock.lockCreateChatRoomWithdrawAction.RUnlock()
	return calls
}

// CreateChatRoomWithdrawActionWithSd calls CreateChatRoomWithdrawActionWithSdFunc.
func (mock *StoreMock) CreateChatRoomWithdrawActionWithSd(ctx context.Context, sd Sd, param parameter.CreateChatRoomWithdrawActionParam) (entity.ChatRoomWithdrawAction, error) {
	if mock.CreateChatRoomWithdrawActionWithSdFunc == nil {
		panic("StoreMock.CreateChatRoomWithdrawActionWithSdFunc: method is nil but Store.CreateChatRoomWithdrawActionWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateChatRoomWithdrawActionParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Param: param,
	}
	mock.lockCreateChatRoomWithdrawActionWithSd.Lock()
	mock.calls.CreateChatRoomWithdrawActionWithSd = append(mock.calls.CreateChatRoomWithdrawActionWithSd, callInfo)
	mock.lockCreateChatRoomWithdrawActionWithSd.Unlock()
	return mock.CreateChatRoomWithdrawActionWithSdFunc(ctx, sd, param)
}

// CreateChatRoomWithdrawActionWithSdCalls gets all the calls that were made to CreateChatRoomWithdrawActionWithSd.
// Check the length with:
//
//	len(mockedStore.CreateChatRoomWithdrawActionWithSdCalls())
func (mock *StoreMock) CreateChatRoomWithdrawActionWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Param parameter.CreateChatRoomWithdrawActionParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateChatRoomWithdrawActionParam
	}
	mock.lockCreateChatRoomWithdrawActionWithSd.RLock()
	calls = mock.calls.CreateChatRoomWithdrawActionWithSd
	mock.lockCreateChatRoomWithdrawActionWithSd.RUnlock()
	return calls
}

// CreateChatRoomWithdrawActions calls CreateChatRoomWithdrawActionsFunc.
func (mock *StoreMock) CreateChatRoomWithdrawActions(ctx context.Context, params []parameter.CreateChatRoomWithdrawActionParam) (int64, error) {
	if mock.CreateChatRoomWithdrawActionsFunc == nil {
		panic("StoreMock.CreateChatRoomWithdrawActionsFunc: method is nil but Store.CreateChatRoomWithdrawActions was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params []parameter.CreateChatRoomWithdrawActionParam
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockCreateChatRoomWithdrawActions.Lock()
	mock.calls.CreateChatRoomWithdrawActions = append(mock.calls.CreateChatRoomWithdrawActions, callInfo)
	mock.lockCreateChatRoomWithdrawActions.Unlock()
	return mock.CreateChatRoomWithdrawActionsFunc(ctx, params)
}

// CreateChatRoomWithdrawActionsCalls gets all the calls that were made to CreateChatRoomWithdrawActions.
// Check the length with:
//
//	len(mockedStore.CreateChatRoomWithdrawActionsCalls())
func (mock *StoreMock) CreateChatRoomWithdrawActionsCalls() []struct {
	Ctx    context.Context
	Params []parameter.CreateChatRoomWithdrawActionParam
} {
	var calls []struct {
		Ctx    context.Context
		Params []parameter.CreateChatRoomWithdrawActionParam
	}
	mock.lockCreateChatRoomWithdrawActions.RLock()
	calls = mock.calls.CreateChatRoomWithdrawActions
	mock.lockCreateChatRoomWithdrawActions.RUnlock()
	return calls
}

// CreateChatRoomWithdrawActionsWithSd calls CreateChatRoomWithdrawActionsWithSdFunc.
func (mock *StoreMock) CreateChatRoomWithdrawActionsWithSd(ctx context.Context, sd Sd, params []parameter.CreateChatRoomWithdrawActionParam) (int64, error) {
	if mock.CreateChatRoomWithdrawActionsWithSdFunc == nil {
		panic("StoreMock.CreateChatRoomWithdrawActionsWithSdFunc: method is nil but Store.CreateChatRoomWithdrawActionsWithSd was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateChatRoomWithdrawActionParam
	}{
		Ctx:    ctx,
		Sd:     sd,
		Params: params,
	}
	mock.lockCreateChatRoomWithdrawActionsWithSd.Lock()
	mock.calls.CreateChatRoomWithdrawActionsWithSd = append(mock.calls.CreateChatRoomWithdrawActionsWithSd, callInfo)
	mock.lockCreateChatRoomWithdrawActionsWithSd.Unlock()
	return mock.CreateChatRoomWithdrawActionsWithSdFunc(ctx, sd, params)
}

// CreateChatRoomWithdrawActionsWithSdCalls gets all the calls that were made to CreateChatRoomWithdrawActionsWithSd.
// Check the length with:
//
//	len(mockedStore.CreateChatRoomWithdrawActionsWithSdCalls())
func (mock *StoreMock) CreateChatRoomWithdrawActionsWithSdCalls() []struct {
	Ctx    context.Context
	Sd     Sd
	Params []parameter.CreateChatRoomWithdrawActionParam
} {
	var calls []struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateChatRoomWithdrawActionParam
	}
	mock.lockCreateChatRoomWithdrawActionsWithSd.RLock()
	calls = mock.calls.CreateChatRoomWithdrawActionsWithSd
	mock.lockCreateChatRoomWithdrawActionsWithSd.RUnlock()
	return calls
}

// CreateChatRooms calls CreateChatRoomsFunc.
func (mock *StoreMock) CreateChatRooms(ctx context.Context, params []parameter.CreateChatRoomParam) (int64, error) {
	if mock.CreateChatRoomsFunc == nil {
		panic("StoreMock.CreateChatRoomsFunc: method is nil but Store.CreateChatRooms was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params []parameter.CreateChatRoomParam
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockCreateChatRooms.Lock()
	mock.calls.CreateChatRooms = append(mock.calls.CreateChatRooms, callInfo)
	mock.lockCreateChatRooms.Unlock()
	return mock.CreateChatRoomsFunc(ctx, params)
}

// CreateChatRoomsCalls gets all the calls that were made to CreateChatRooms.
// Check the length with:
//
//	len(mockedStore.CreateChatRoomsCalls())
func (mock *StoreMock) CreateChatRoomsCalls() []struct {
	Ctx    context.Context
	Params []parameter.CreateChatRoomParam
} {
	var calls []struct {
		Ctx    context.Context
		Params []parameter.CreateChatRoomParam
	}
	mock.lockCreateChatRooms.RLock()
	calls = mock.calls.CreateChatRooms
	mock.lockCreateChatRooms.RUnlock()
	return calls
}

// CreateChatRoomsWithSd calls CreateChatRoomsWithSdFunc.
func (mock *StoreMock) CreateChatRoomsWithSd(ctx context.Context, sd Sd, params []parameter.CreateChatRoomParam) (int64, error) {
	if mock.CreateChatRoomsWithSdFunc == nil {
		panic("StoreMock.CreateChatRoomsWithSdFunc: method is nil but Store.CreateChatRoomsWithSd was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateChatRoomParam
	}{
		Ctx:    ctx,
		Sd:     sd,
		Params: params,
	}
	mock.lockCreateChatRoomsWithSd.Lock()
	mock.calls.CreateChatRoomsWithSd = append(mock.calls.CreateChatRoomsWithSd, callInfo)
	mock.lockCreateChatRoomsWithSd.Unlock()
	return mock.CreateChatRoomsWithSdFunc(ctx, sd, params)
}

// CreateChatRoomsWithSdCalls gets all the calls that were made to CreateChatRoomsWithSd.
// Check the length with:
//
//	len(mockedStore.CreateChatRoomsWithSdCalls())
func (mock *StoreMock) CreateChatRoomsWithSdCalls() []struct {
	Ctx    context.Context
	Sd     Sd
	Params []parameter.CreateChatRoomParam
} {
	var calls []struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateChatRoomParam
	}
	mock.lockCreateChatRoomsWithSd.RLock()
	calls = mock.calls.CreateChatRoomsWithSd
	mock.lockCreateChatRoomsWithSd.RUnlock()
	return calls
}

// CreateEventType calls CreateEventTypeFunc.
func (mock *StoreMock) CreateEventType(ctx context.Context, param parameter.CreateEventTypeParam) (entity.EventType, error) {
	if mock.CreateEventTypeFunc == nil {
		panic("StoreMock.CreateEventTypeFunc: method is nil but Store.CreateEventType was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Param parameter.CreateEventTypeParam
	}{
		Ctx:   ctx,
		Param: param,
	}
	mock.lockCreateEventType.Lock()
	mock.calls.CreateEventType = append(mock.calls.CreateEventType, callInfo)
	mock.lockCreateEventType.Unlock()
	return mock.CreateEventTypeFunc(ctx, param)
}

// CreateEventTypeCalls gets all the calls that were made to CreateEventType.
// Check the length with:
//
//	len(mockedStore.CreateEventTypeCalls())
func (mock *StoreMock) CreateEventTypeCalls() []struct {
	Ctx   context.Context
	Param parameter.CreateEventTypeParam
} {
	var calls []struct {
		Ctx   context.Context
		Param parameter.CreateEventTypeParam
	}
	mock.lockCreateEventType.RLock()
	calls = mock.calls.CreateEventType
	mock.lockCreateEventType.RUnlock()
	return calls
}

// CreateEventTypeWithSd calls CreateEventTypeWithSdFunc.
func (mock *StoreMock) CreateEventTypeWithSd(ctx context.Context, sd Sd, param parameter.CreateEventTypeParam) (entity.EventType, error) {
	if mock.CreateEventTypeWithSdFunc == nil {
		panic("StoreMock.CreateEventTypeWithSdFunc: method is nil but Store.CreateEventTypeWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateEventTypeParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Param: param,
	}
	mock.lockCreateEventTypeWithSd.Lock()
	mock.calls.CreateEventTypeWithSd = append(mock.calls.CreateEventTypeWithSd, callInfo)
	mock.lockCreateEventTypeWithSd.Unlock()
	return mock.CreateEventTypeWithSdFunc(ctx, sd, param)
}

// CreateEventTypeWithSdCalls gets all the calls that were made to CreateEventTypeWithSd.
// Check the length with:
//
//	len(mockedStore.CreateEventTypeWithSdCalls())
func (mock *StoreMock) CreateEventTypeWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Param parameter.CreateEventTypeParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateEventTypeParam
	}
	mock.lockCreateEventTypeWithSd.RLock()
	calls = mock.calls.CreateEventTypeWithSd
	mock.lockCreateEventTypeWithSd.RUnlock()
	return calls
}

// CreateEventTypes calls CreateEventTypesFunc.
func (mock *StoreMock) CreateEventTypes(ctx context.Context, params []parameter.CreateEventTypeParam) (int64, error) {
	if mock.CreateEventTypesFunc == nil {
		panic("StoreMock.CreateEventTypesFunc: method is nil but Store.CreateEventTypes was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params []parameter.CreateEventTypeParam
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockCreateEventTypes.Lock()
	mock.calls.CreateEventTypes = append(mock.calls.CreateEventTypes, callInfo)
	mock.lockCreateEventTypes.Unlock()
	return mock.CreateEventTypesFunc(ctx, params)
}

// CreateEventTypesCalls gets all the calls that were made to CreateEventTypes.
// Check the length with:
//
//	len(mockedStore.CreateEventTypesCalls())
func (mock *StoreMock) CreateEventTypesCalls() []struct {
	Ctx    context.Context
	Params []parameter.CreateEventTypeParam
} {
	var calls []struct {
		Ctx    context.Context
		Params []parameter.CreateEventTypeParam
	}
	mock.lockCreateEventTypes.RLock()
	calls = mock.calls.CreateEventTypes
	mock.lockCreateEventTypes.RUnlock()
	return calls
}

// CreateEventTypesWithSd calls CreateEventTypesWithSdFunc.
func (mock *StoreMock) CreateEventTypesWithSd(ctx context.Context, sd Sd, params []parameter.CreateEventTypeParam) (int64, error) {
	if mock.CreateEventTypesWithSdFunc == nil {
		panic("StoreMock.CreateEventTypesWithSdFunc: method is nil but Store.CreateEventTypesWithSd was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateEventTypeParam
	}{
		Ctx:    ctx,
		Sd:     sd,
		Params: params,
	}
	mock.lockCreateEventTypesWithSd.Lock()
	mock.calls.CreateEventTypesWithSd = append(mock.calls.CreateEventTypesWithSd, callInfo)
	mock.lockCreateEventTypesWithSd.Unlock()
	return mock.CreateEventTypesWithSdFunc(ctx, sd, params)
}

// CreateEventTypesWithSdCalls gets all the calls that were made to CreateEventTypesWithSd.
// Check the length with:
//
//	len(mockedStore.CreateEventTypesWithSdCalls())
func (mock *StoreMock) CreateEventTypesWithSdCalls() []struct {
	Ctx    context.Context
	Sd     Sd
	Params []parameter.CreateEventTypeParam
} {
	var calls []struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateEventTypeParam
	}
	mock.lockCreateEventTypesWithSd.RLock()
	calls = mock.calls.CreateEventTypesWithSd
	mock.lockCreateEventTypesWithSd.RUnlock()
	return calls
}

// CreateFile calls CreateFileFunc.
func (mock *StoreMock) CreateFile(ctx context.Context, param parameter.CreateFileParam) (entity.File, error) {
	if mock.CreateFileFunc == nil {
		panic("StoreMock.CreateFileFunc: method is nil but Store.CreateFile was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Param parameter.CreateFileParam
	}{
		Ctx:   ctx,
		Param: param,
	}
	mock.lockCreateFile.Lock()
	mock.calls.CreateFile = append(mock.calls.CreateFile, callInfo)
	mock.lockCreateFile.Unlock()
	return mock.CreateFileFunc(ctx, param)
}

// CreateFileCalls gets all the calls that were made to CreateFile.
// Check the length with:
//
//	len(mockedStore.CreateFileCalls())
func (mock *StoreMock) CreateFileCalls() []struct {
	Ctx   context.Context
	Param parameter.CreateFileParam
} {
	var calls []struct {
		Ctx   context.Context
		Param parameter.CreateFileParam
	}
	mock.lockCreateFile.RLock()
	calls = mock.calls.CreateFile
	mock.lockCreateFile.RUnlock()
	return calls
}

// CreateFileWithSd calls CreateFileWithSdFunc.
func (mock *StoreMock) CreateFileWithSd(ctx context.Context, sd Sd, param parameter.CreateFileParam) (entity.File, error) {
	if mock.CreateFileWithSdFunc == nil {
		panic("StoreMock.CreateFileWithSdFunc: method is nil but Store.CreateFileWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateFileParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Param: param,
	}
	mock.lockCreateFileWithSd.Lock()
	mock.calls.CreateFileWithSd = append(mock.calls.CreateFileWithSd, callInfo)
	mock.lockCreateFileWithSd.Unlock()
	return mock.CreateFileWithSdFunc(ctx, sd, param)
}

// CreateFileWithSdCalls gets all the calls that were made to CreateFileWithSd.
// Check the length with:
//
//	len(mockedStore.CreateFileWithSdCalls())
func (mock *StoreMock) CreateFileWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Param parameter.CreateFileParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateFileParam
	}
	mock.lockCreateFileWithSd.RLock()
	calls = mock.calls.CreateFileWithSd
	mock.lockCreateFileWithSd.RUnlock()
	return calls
}

// CreateFiles calls CreateFilesFunc.
func (mock *StoreMock) CreateFiles(ctx context.Context, params []parameter.CreateFileParam) (int64, error) {
	if mock.CreateFilesFunc == nil {
		panic("StoreMock.CreateFilesFunc: method is nil but Store.CreateFiles was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params []parameter.CreateFileParam
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockCreateFiles.Lock()
	mock.calls.CreateFiles = append(mock.calls.CreateFiles, callInfo)
	mock.lockCreateFiles.Unlock()
	return mock.CreateFilesFunc(ctx, params)
}

// CreateFilesCalls gets all the calls that were made to CreateFiles.
// Check the length with:
//
//	len(mockedStore.CreateFilesCalls())
func (mock *StoreMock) CreateFilesCalls() []struct {
	Ctx    context.Context
	Params []parameter.CreateFileParam
} {
	var calls []struct {
		Ctx    context.Context
		Params []parameter.CreateFileParam
	}
	mock.lockCreateFiles.RLock()
	calls = mock.calls.CreateFiles
	mock.lockCreateFiles.RUnlock()
	return calls
}

// CreateFilesWithSd calls CreateFilesWithSdFunc.
func (mock *StoreMock) CreateFilesWithSd(ctx context.Context, sd Sd, params []parameter.CreateFileParam) (int64, error) {
	if mock.CreateFilesWithSdFunc == nil {
		panic("StoreMock.CreateFilesWithSdFunc: method is nil but Store.CreateFilesWithSd was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateFileParam
	}{
		Ctx:    ctx,
		Sd:     sd,
		Params: params,
	}
	mock.lockCreateFilesWithSd.Lock()
	mock.calls.CreateFilesWithSd = append(mock.calls.CreateFilesWithSd, callInfo)
	mock.lockCreateFilesWithSd.Unlock()
	return mock.CreateFilesWithSdFunc(ctx, sd, params)
}

// CreateFilesWithSdCalls gets all the calls that were made to CreateFilesWithSd.
// Check the length with:
//
//	len(mockedStore.CreateFilesWithSdCalls())
func (mock *StoreMock) CreateFilesWithSdCalls() []struct {
	Ctx    context.Context
	Sd     Sd
	Params []parameter.CreateFileParam
} {
	var calls []struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateFileParam
	}
	mock.lockCreateFilesWithSd.RLock()
	calls = mock.calls.CreateFilesWithSd
	mock.lockCreateFilesWithSd.RUnlock()
	return calls
}

// CreateGrade calls CreateGradeFunc.
func (mock *StoreMock) CreateGrade(ctx context.Context, param parameter.CreateGradeParam) (entity.Grade, error) {
	if mock.CreateGradeFunc == nil {
		panic("StoreMock.CreateGradeFunc: method is nil but Store.CreateGrade was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Param parameter.CreateGradeParam
	}{
		Ctx:   ctx,
		Param: param,
	}
	mock.lockCreateGrade.Lock()
	mock.calls.CreateGrade = append(mock.calls.CreateGrade, callInfo)
	mock.lockCreateGrade.Unlock()
	return mock.CreateGradeFunc(ctx, param)
}

// CreateGradeCalls gets all the calls that were made to CreateGrade.
// Check the length with:
//
//	len(mockedStore.CreateGradeCalls())
func (mock *StoreMock) CreateGradeCalls() []struct {
	Ctx   context.Context
	Param parameter.CreateGradeParam
} {
	var calls []struct {
		Ctx   context.Context
		Param parameter.CreateGradeParam
	}
	mock.lockCreateGrade.RLock()
	calls = mock.calls.CreateGrade
	mock.lockCreateGrade.RUnlock()
	return calls
}

// CreateGradeWithSd calls CreateGradeWithSdFunc.
func (mock *StoreMock) CreateGradeWithSd(ctx context.Context, sd Sd, param parameter.CreateGradeParam) (entity.Grade, error) {
	if mock.CreateGradeWithSdFunc == nil {
		panic("StoreMock.CreateGradeWithSdFunc: method is nil but Store.CreateGradeWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateGradeParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Param: param,
	}
	mock.lockCreateGradeWithSd.Lock()
	mock.calls.CreateGradeWithSd = append(mock.calls.CreateGradeWithSd, callInfo)
	mock.lockCreateGradeWithSd.Unlock()
	return mock.CreateGradeWithSdFunc(ctx, sd, param)
}

// CreateGradeWithSdCalls gets all the calls that were made to CreateGradeWithSd.
// Check the length with:
//
//	len(mockedStore.CreateGradeWithSdCalls())
func (mock *StoreMock) CreateGradeWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Param parameter.CreateGradeParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateGradeParam
	}
	mock.lockCreateGradeWithSd.RLock()
	calls = mock.calls.CreateGradeWithSd
	mock.lockCreateGradeWithSd.RUnlock()
	return calls
}

// CreateGrades calls CreateGradesFunc.
func (mock *StoreMock) CreateGrades(ctx context.Context, params []parameter.CreateGradeParam) (int64, error) {
	if mock.CreateGradesFunc == nil {
		panic("StoreMock.CreateGradesFunc: method is nil but Store.CreateGrades was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params []parameter.CreateGradeParam
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockCreateGrades.Lock()
	mock.calls.CreateGrades = append(mock.calls.CreateGrades, callInfo)
	mock.lockCreateGrades.Unlock()
	return mock.CreateGradesFunc(ctx, params)
}

// CreateGradesCalls gets all the calls that were made to CreateGrades.
// Check the length with:
//
//	len(mockedStore.CreateGradesCalls())
func (mock *StoreMock) CreateGradesCalls() []struct {
	Ctx    context.Context
	Params []parameter.CreateGradeParam
} {
	var calls []struct {
		Ctx    context.Context
		Params []parameter.CreateGradeParam
	}
	mock.lockCreateGrades.RLock()
	calls = mock.calls.CreateGrades
	mock.lockCreateGrades.RUnlock()
	return calls
}

// CreateGradesWithSd calls CreateGradesWithSdFunc.
func (mock *StoreMock) CreateGradesWithSd(ctx context.Context, sd Sd, params []parameter.CreateGradeParam) (int64, error) {
	if mock.CreateGradesWithSdFunc == nil {
		panic("StoreMock.CreateGradesWithSdFunc: method is nil but Store.CreateGradesWithSd was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateGradeParam
	}{
		Ctx:    ctx,
		Sd:     sd,
		Params: params,
	}
	mock.lockCreateGradesWithSd.Lock()
	mock.calls.CreateGradesWithSd = append(mock.calls.CreateGradesWithSd, callInfo)
	mock.lockCreateGradesWithSd.Unlock()
	return mock.CreateGradesWithSdFunc(ctx, sd, params)
}

// CreateGradesWithSdCalls gets all the calls that were made to CreateGradesWithSd.
// Check the length with:
//
//	len(mockedStore.CreateGradesWithSdCalls())
func (mock *StoreMock) CreateGradesWithSdCalls() []struct {
	Ctx    context.Context
	Sd     Sd
	Params []parameter.CreateGradeParam
} {
	var calls []struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateGradeParam
	}
	mock.lockCreateGradesWithSd.RLock()
	calls = mock.calls.CreateGradesWithSd
	mock.lockCreateGradesWithSd.RUnlock()
	return calls
}

// CreateGroup calls CreateGroupFunc.
func (mock *StoreMock) CreateGroup(ctx context.Context, param parameter.CreateGroupParam) (entity.Group, error) {
	if mock.CreateGroupFunc == nil {
		panic("StoreMock.CreateGroupFunc: method is nil but Store.CreateGroup was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Param parameter.CreateGroupParam
	}{
		Ctx:   ctx,
		Param: param,
	}
	mock.lockCreateGroup.Lock()
	mock.calls.CreateGroup = append(mock.calls.CreateGroup, callInfo)
	mock.lockCreateGroup.Unlock()
	return mock.CreateGroupFunc(ctx, param)
}

// CreateGroupCalls gets all the calls that were made to CreateGroup.
// Check the length with:
//
//	len(mockedStore.CreateGroupCalls())
func (mock *StoreMock) CreateGroupCalls() []struct {
	Ctx   context.Context
	Param parameter.CreateGroupParam
} {
	var calls []struct {
		Ctx   context.Context
		Param parameter.CreateGroupParam
	}
	mock.lockCreateGroup.RLock()
	calls = mock.calls.CreateGroup
	mock.lockCreateGroup.RUnlock()
	return calls
}

// CreateGroupWithSd calls CreateGroupWithSdFunc.
func (mock *StoreMock) CreateGroupWithSd(ctx context.Context, sd Sd, param parameter.CreateGroupParam) (entity.Group, error) {
	if mock.CreateGroupWithSdFunc == nil {
		panic("StoreMock.CreateGroupWithSdFunc: method is nil but Store.CreateGroupWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateGroupParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Param: param,
	}
	mock.lockCreateGroupWithSd.Lock()
	mock.calls.CreateGroupWithSd = append(mock.calls.CreateGroupWithSd, callInfo)
	mock.lockCreateGroupWithSd.Unlock()
	return mock.CreateGroupWithSdFunc(ctx, sd, param)
}

// CreateGroupWithSdCalls gets all the calls that were made to CreateGroupWithSd.
// Check the length with:
//
//	len(mockedStore.CreateGroupWithSdCalls())
func (mock *StoreMock) CreateGroupWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Param parameter.CreateGroupParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateGroupParam
	}
	mock.lockCreateGroupWithSd.RLock()
	calls = mock.calls.CreateGroupWithSd
	mock.lockCreateGroupWithSd.RUnlock()
	return calls
}

// CreateGroups calls CreateGroupsFunc.
func (mock *StoreMock) CreateGroups(ctx context.Context, params []parameter.CreateGroupParam) (int64, error) {
	if mock.CreateGroupsFunc == nil {
		panic("StoreMock.CreateGroupsFunc: method is nil but Store.CreateGroups was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params []parameter.CreateGroupParam
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockCreateGroups.Lock()
	mock.calls.CreateGroups = append(mock.calls.CreateGroups, callInfo)
	mock.lockCreateGroups.Unlock()
	return mock.CreateGroupsFunc(ctx, params)
}

// CreateGroupsCalls gets all the calls that were made to CreateGroups.
// Check the length with:
//
//	len(mockedStore.CreateGroupsCalls())
func (mock *StoreMock) CreateGroupsCalls() []struct {
	Ctx    context.Context
	Params []parameter.CreateGroupParam
} {
	var calls []struct {
		Ctx    context.Context
		Params []parameter.CreateGroupParam
	}
	mock.lockCreateGroups.RLock()
	calls = mock.calls.CreateGroups
	mock.lockCreateGroups.RUnlock()
	return calls
}

// CreateGroupsWithSd calls CreateGroupsWithSdFunc.
func (mock *StoreMock) CreateGroupsWithSd(ctx context.Context, sd Sd, params []parameter.CreateGroupParam) (int64, error) {
	if mock.CreateGroupsWithSdFunc == nil {
		panic("StoreMock.CreateGroupsWithSdFunc: method is nil but Store.CreateGroupsWithSd was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateGroupParam
	}{
		Ctx:    ctx,
		Sd:     sd,
		Params: params,
	}
	mock.lockCreateGroupsWithSd.Lock()
	mock.calls.CreateGroupsWithSd = append(mock.calls.CreateGroupsWithSd, callInfo)
	mock.lockCreateGroupsWithSd.Unlock()
	return mock.CreateGroupsWithSdFunc(ctx, sd, params)
}

// CreateGroupsWithSdCalls gets all the calls that were made to CreateGroupsWithSd.
// Check the length with:
//
//	len(mockedStore.CreateGroupsWithSdCalls())
func (mock *StoreMock) CreateGroupsWithSdCalls() []struct {
	Ctx    context.Context
	Sd     Sd
	Params []parameter.CreateGroupParam
} {
	var calls []struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateGroupParam
	}
	mock.lockCreateGroupsWithSd.RLock()
	calls = mock.calls.CreateGroupsWithSd
	mock.lockCreateGroupsWithSd.RUnlock()
	return calls
}

// CreateImage calls CreateImageFunc.
func (mock *StoreMock) CreateImage(ctx context.Context, param parameter.CreateImageParam) (entity.Image, error) {
	if mock.CreateImageFunc == nil {
		panic("StoreMock.CreateImageFunc: method is nil but Store.CreateImage was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Param parameter.CreateImageParam
	}{
		Ctx:   ctx,
		Param: param,
	}
	mock.lockCreateImage.Lock()
	mock.calls.CreateImage = append(mock.calls.CreateImage, callInfo)
	mock.lockCreateImage.Unlock()
	return mock.CreateImageFunc(ctx, param)
}

// CreateImageCalls gets all the calls that were made to CreateImage.
// Check the length with:
//
//	len(mockedStore.CreateImageCalls())
func (mock *StoreMock) CreateImageCalls() []struct {
	Ctx   context.Context
	Param parameter.CreateImageParam
} {
	var calls []struct {
		Ctx   context.Context
		Param parameter.CreateImageParam
	}
	mock.lockCreateImage.RLock()
	calls = mock.calls.CreateImage
	mock.lockCreateImage.RUnlock()
	return calls
}

// CreateImageWithSd calls CreateImageWithSdFunc.
func (mock *StoreMock) CreateImageWithSd(ctx context.Context, sd Sd, param parameter.CreateImageParam) (entity.Image, error) {
	if mock.CreateImageWithSdFunc == nil {
		panic("StoreMock.CreateImageWithSdFunc: method is nil but Store.CreateImageWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateImageParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Param: param,
	}
	mock.lockCreateImageWithSd.Lock()
	mock.calls.CreateImageWithSd = append(mock.calls.CreateImageWithSd, callInfo)
	mock.lockCreateImageWithSd.Unlock()
	return mock.CreateImageWithSdFunc(ctx, sd, param)
}

// CreateImageWithSdCalls gets all the calls that were made to CreateImageWithSd.
// Check the length with:
//
//	len(mockedStore.CreateImageWithSdCalls())
func (mock *StoreMock) CreateImageWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Param parameter.CreateImageParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateImageParam
	}
	mock.lockCreateImageWithSd.RLock()
	calls = mock.calls.CreateImageWithSd
	mock.lockCreateImageWithSd.RUnlock()
	return calls
}

// CreateImages calls CreateImagesFunc.
func (mock *StoreMock) CreateImages(ctx context.Context, params []parameter.CreateImageParam) (int64, error) {
	if mock.CreateImagesFunc == nil {
		panic("StoreMock.CreateImagesFunc: method is nil but Store.CreateImages was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params []parameter.CreateImageParam
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockCreateImages.Lock()
	mock.calls.CreateImages = append(mock.calls.CreateImages, callInfo)
	mock.lockCreateImages.Unlock()
	return mock.CreateImagesFunc(ctx, params)
}

// CreateImagesCalls gets all the calls that were made to CreateImages.
// Check the length with:
//
//	len(mockedStore.CreateImagesCalls())
func (mock *StoreMock) CreateImagesCalls() []struct {
	Ctx    context.Context
	Params []parameter.CreateImageParam
} {
	var calls []struct {
		Ctx    context.Context
		Params []parameter.CreateImageParam
	}
	mock.lockCreateImages.RLock()
	calls = mock.calls.CreateImages
	mock.lockCreateImages.RUnlock()
	return calls
}

// CreateImagesWithSd calls CreateImagesWithSdFunc.
func (mock *StoreMock) CreateImagesWithSd(ctx context.Context, sd Sd, params []parameter.CreateImageParam) (int64, error) {
	if mock.CreateImagesWithSdFunc == nil {
		panic("StoreMock.CreateImagesWithSdFunc: method is nil but Store.CreateImagesWithSd was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateImageParam
	}{
		Ctx:    ctx,
		Sd:     sd,
		Params: params,
	}
	mock.lockCreateImagesWithSd.Lock()
	mock.calls.CreateImagesWithSd = append(mock.calls.CreateImagesWithSd, callInfo)
	mock.lockCreateImagesWithSd.Unlock()
	return mock.CreateImagesWithSdFunc(ctx, sd, params)
}

// CreateImagesWithSdCalls gets all the calls that were made to CreateImagesWithSd.
// Check the length with:
//
//	len(mockedStore.CreateImagesWithSdCalls())
func (mock *StoreMock) CreateImagesWithSdCalls() []struct {
	Ctx    context.Context
	Sd     Sd
	Params []parameter.CreateImageParam
} {
	var calls []struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateImageParam
	}
	mock.lockCreateImagesWithSd.RLock()
	calls = mock.calls.CreateImagesWithSd
	mock.lockCreateImagesWithSd.RUnlock()
	return calls
}

// CreateMember calls CreateMemberFunc.
func (mock *StoreMock) CreateMember(ctx context.Context, param parameter.CreateMemberParam) (entity.Member, error) {
	if mock.CreateMemberFunc == nil {
		panic("StoreMock.CreateMemberFunc: method is nil but Store.CreateMember was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Param parameter.CreateMemberParam
	}{
		Ctx:   ctx,
		Param: param,
	}
	mock.lockCreateMember.Lock()
	mock.calls.CreateMember = append(mock.calls.CreateMember, callInfo)
	mock.lockCreateMember.Unlock()
	return mock.CreateMemberFunc(ctx, param)
}

// CreateMemberCalls gets all the calls that were made to CreateMember.
// Check the length with:
//
//	len(mockedStore.CreateMemberCalls())
func (mock *StoreMock) CreateMemberCalls() []struct {
	Ctx   context.Context
	Param parameter.CreateMemberParam
} {
	var calls []struct {
		Ctx   context.Context
		Param parameter.CreateMemberParam
	}
	mock.lockCreateMember.RLock()
	calls = mock.calls.CreateMember
	mock.lockCreateMember.RUnlock()
	return calls
}

// CreateMemberWithSd calls CreateMemberWithSdFunc.
func (mock *StoreMock) CreateMemberWithSd(ctx context.Context, sd Sd, param parameter.CreateMemberParam) (entity.Member, error) {
	if mock.CreateMemberWithSdFunc == nil {
		panic("StoreMock.CreateMemberWithSdFunc: method is nil but Store.CreateMemberWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateMemberParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Param: param,
	}
	mock.lockCreateMemberWithSd.Lock()
	mock.calls.CreateMemberWithSd = append(mock.calls.CreateMemberWithSd, callInfo)
	mock.lockCreateMemberWithSd.Unlock()
	return mock.CreateMemberWithSdFunc(ctx, sd, param)
}

// CreateMemberWithSdCalls gets all the calls that were made to CreateMemberWithSd.
// Check the length with:
//
//	len(mockedStore.CreateMemberWithSdCalls())
func (mock *StoreMock) CreateMemberWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Param parameter.CreateMemberParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateMemberParam
	}
	mock.lockCreateMemberWithSd.RLock()
	calls = mock.calls.CreateMemberWithSd
	mock.lockCreateMemberWithSd.RUnlock()
	return calls
}

// CreateMembers calls CreateMembersFunc.
func (mock *StoreMock) CreateMembers(ctx context.Context, params []parameter.CreateMemberParam) (int64, error) {
	if mock.CreateMembersFunc == nil {
		panic("StoreMock.CreateMembersFunc: method is nil but Store.CreateMembers was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params []parameter.CreateMemberParam
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockCreateMembers.Lock()
	mock.calls.CreateMembers = append(mock.calls.CreateMembers, callInfo)
	mock.lockCreateMembers.Unlock()
	return mock.CreateMembersFunc(ctx, params)
}

// CreateMembersCalls gets all the calls that were made to CreateMembers.
// Check the length with:
//
//	len(mockedStore.CreateMembersCalls())
func (mock *StoreMock) CreateMembersCalls() []struct {
	Ctx    context.Context
	Params []parameter.CreateMemberParam
} {
	var calls []struct {
		Ctx    context.Context
		Params []parameter.CreateMemberParam
	}
	mock.lockCreateMembers.RLock()
	calls = mock.calls.CreateMembers
	mock.lockCreateMembers.RUnlock()
	return calls
}

// CreateMembersWithSd calls CreateMembersWithSdFunc.
func (mock *StoreMock) CreateMembersWithSd(ctx context.Context, sd Sd, params []parameter.CreateMemberParam) (int64, error) {
	if mock.CreateMembersWithSdFunc == nil {
		panic("StoreMock.CreateMembersWithSdFunc: method is nil but Store.CreateMembersWithSd was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateMemberParam
	}{
		Ctx:    ctx,
		Sd:     sd,
		Params: params,
	}
	mock.lockCreateMembersWithSd.Lock()
	mock.calls.CreateMembersWithSd = append(mock.calls.CreateMembersWithSd, callInfo)
	mock.lockCreateMembersWithSd.Unlock()
	return mock.CreateMembersWithSdFunc(ctx, sd, params)
}

// CreateMembersWithSdCalls gets all the calls that were made to CreateMembersWithSd.
// Check the length with:
//
//	len(mockedStore.CreateMembersWithSdCalls())
func (mock *StoreMock) CreateMembersWithSdCalls() []struct {
	Ctx    context.Context
	Sd     Sd
	Params []parameter.CreateMemberParam
} {
	var calls []struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateMemberParam
	}
	mock.lockCreateMembersWithSd.RLock()
	calls = mock.calls.CreateMembersWithSd
	mock.lockCreateMembersWithSd.RUnlock()
	return calls
}

// CreateMessage calls CreateMessageFunc.
func (mock *StoreMock) CreateMessage(ctx context.Context, param parameter.CreateMessageParam) (entity.Message, error) {
	if mock.CreateMessageFunc == nil {
		panic("StoreMock.CreateMessageFunc: method is nil but Store.CreateMessage was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Param parameter.CreateMessageParam
	}{
		Ctx:   ctx,
		Param: param,
	}
	mock.lockCreateMessage.Lock()
	mock.calls.CreateMessage = append(mock.calls.CreateMessage, callInfo)
	mock.lockCreateMessage.Unlock()
	return mock.CreateMessageFunc(ctx, param)
}

// CreateMessageCalls gets all the calls that were made to CreateMessage.
// Check the length with:
//
//	len(mockedStore.CreateMessageCalls())
func (mock *StoreMock) CreateMessageCalls() []struct {
	Ctx   context.Context
	Param parameter.CreateMessageParam
} {
	var calls []struct {
		Ctx   context.Context
		Param parameter.CreateMessageParam
	}
	mock.lockCreateMessage.RLock()
	calls = mock.calls.CreateMessage
	mock.lockCreateMessage.RUnlock()
	return calls
}

// CreateMessageWithSd calls CreateMessageWithSdFunc.
func (mock *StoreMock) CreateMessageWithSd(ctx context.Context, sd Sd, param parameter.CreateMessageParam) (entity.Message, error) {
	if mock.CreateMessageWithSdFunc == nil {
		panic("StoreMock.CreateMessageWithSdFunc: method is nil but Store.CreateMessageWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateMessageParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Param: param,
	}
	mock.lockCreateMessageWithSd.Lock()
	mock.calls.CreateMessageWithSd = append(mock.calls.CreateMessageWithSd, callInfo)
	mock.lockCreateMessageWithSd.Unlock()
	return mock.CreateMessageWithSdFunc(ctx, sd, param)
}

// CreateMessageWithSdCalls gets all the calls that were made to CreateMessageWithSd.
// Check the length with:
//
//	len(mockedStore.CreateMessageWithSdCalls())
func (mock *StoreMock) CreateMessageWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Param parameter.CreateMessageParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateMessageParam
	}
	mock.lockCreateMessageWithSd.RLock()
	calls = mock.calls.CreateMessageWithSd
	mock.lockCreateMessageWithSd.RUnlock()
	return calls
}

// CreateMessages calls CreateMessagesFunc.
func (mock *StoreMock) CreateMessages(ctx context.Context, params []parameter.CreateMessageParam) (int64, error) {
	if mock.CreateMessagesFunc == nil {
		panic("StoreMock.CreateMessagesFunc: method is nil but Store.CreateMessages was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params []parameter.CreateMessageParam
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockCreateMessages.Lock()
	mock.calls.CreateMessages = append(mock.calls.CreateMessages, callInfo)
	mock.lockCreateMessages.Unlock()
	return mock.CreateMessagesFunc(ctx, params)
}

// CreateMessagesCalls gets all the calls that were made to CreateMessages.
// Check the length with:
//
//	len(mockedStore.CreateMessagesCalls())
func (mock *StoreMock) CreateMessagesCalls() []struct {
	Ctx    context.Context
	Params []parameter.CreateMessageParam
} {
	var calls []struct {
		Ctx    context.Context
		Params []parameter.CreateMessageParam
	}
	mock.lockCreateMessages.RLock()
	calls = mock.calls.CreateMessages
	mock.lockCreateMessages.RUnlock()
	return calls
}

// CreateMessagesWithSd calls CreateMessagesWithSdFunc.
func (mock *StoreMock) CreateMessagesWithSd(ctx context.Context, sd Sd, params []parameter.CreateMessageParam) (int64, error) {
	if mock.CreateMessagesWithSdFunc == nil {
		panic("StoreMock.CreateMessagesWithSdFunc: method is nil but Store.CreateMessagesWithSd was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateMessageParam
	}{
		Ctx:    ctx,
		Sd:     sd,
		Params: params,
	}
	mock.lockCreateMessagesWithSd.Lock()
	mock.calls.CreateMessagesWithSd = append(mock.calls.CreateMessagesWithSd, callInfo)
	mock.lockCreateMessagesWithSd.Unlock()
	return mock.CreateMessagesWithSdFunc(ctx, sd, params)
}

// CreateMessagesWithSdCalls gets all the calls that were made to CreateMessagesWithSd.
// Check the length with:
//
//	len(mockedStore.CreateMessagesWithSdCalls())
func (mock *StoreMock) CreateMessagesWithSdCalls() []struct {
	Ctx    context.Context
	Sd     Sd
	Params []parameter.CreateMessageParam
} {
	var calls []struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateMessageParam
	}
	mock.lockCreateMessagesWithSd.RLock()
	calls = mock.calls.CreateMessagesWithSd
	mock.lockCreateMessagesWithSd.RUnlock()
	return calls
}

// CreateMimeType calls CreateMimeTypeFunc.
func (mock *StoreMock) CreateMimeType(ctx context.Context, param parameter.CreateMimeTypeParam) (entity.MimeType, error) {
	if mock.CreateMimeTypeFunc == nil {
		panic("StoreMock.CreateMimeTypeFunc: method is nil but Store.CreateMimeType was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Param parameter.CreateMimeTypeParam
	}{
		Ctx:   ctx,
		Param: param,
	}
	mock.lockCreateMimeType.Lock()
	mock.calls.CreateMimeType = append(mock.calls.CreateMimeType, callInfo)
	mock.lockCreateMimeType.Unlock()
	return mock.CreateMimeTypeFunc(ctx, param)
}

// CreateMimeTypeCalls gets all the calls that were made to CreateMimeType.
// Check the length with:
//
//	len(mockedStore.CreateMimeTypeCalls())
func (mock *StoreMock) CreateMimeTypeCalls() []struct {
	Ctx   context.Context
	Param parameter.CreateMimeTypeParam
} {
	var calls []struct {
		Ctx   context.Context
		Param parameter.CreateMimeTypeParam
	}
	mock.lockCreateMimeType.RLock()
	calls = mock.calls.CreateMimeType
	mock.lockCreateMimeType.RUnlock()
	return calls
}

// CreateMimeTypeWithSd calls CreateMimeTypeWithSdFunc.
func (mock *StoreMock) CreateMimeTypeWithSd(ctx context.Context, sd Sd, param parameter.CreateMimeTypeParam) (entity.MimeType, error) {
	if mock.CreateMimeTypeWithSdFunc == nil {
		panic("StoreMock.CreateMimeTypeWithSdFunc: method is nil but Store.CreateMimeTypeWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateMimeTypeParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Param: param,
	}
	mock.lockCreateMimeTypeWithSd.Lock()
	mock.calls.CreateMimeTypeWithSd = append(mock.calls.CreateMimeTypeWithSd, callInfo)
	mock.lockCreateMimeTypeWithSd.Unlock()
	return mock.CreateMimeTypeWithSdFunc(ctx, sd, param)
}

// CreateMimeTypeWithSdCalls gets all the calls that were made to CreateMimeTypeWithSd.
// Check the length with:
//
//	len(mockedStore.CreateMimeTypeWithSdCalls())
func (mock *StoreMock) CreateMimeTypeWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Param parameter.CreateMimeTypeParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateMimeTypeParam
	}
	mock.lockCreateMimeTypeWithSd.RLock()
	calls = mock.calls.CreateMimeTypeWithSd
	mock.lockCreateMimeTypeWithSd.RUnlock()
	return calls
}

// CreateMimeTypes calls CreateMimeTypesFunc.
func (mock *StoreMock) CreateMimeTypes(ctx context.Context, params []parameter.CreateMimeTypeParam) (int64, error) {
	if mock.CreateMimeTypesFunc == nil {
		panic("StoreMock.CreateMimeTypesFunc: method is nil but Store.CreateMimeTypes was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params []parameter.CreateMimeTypeParam
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockCreateMimeTypes.Lock()
	mock.calls.CreateMimeTypes = append(mock.calls.CreateMimeTypes, callInfo)
	mock.lockCreateMimeTypes.Unlock()
	return mock.CreateMimeTypesFunc(ctx, params)
}

// CreateMimeTypesCalls gets all the calls that were made to CreateMimeTypes.
// Check the length with:
//
//	len(mockedStore.CreateMimeTypesCalls())
func (mock *StoreMock) CreateMimeTypesCalls() []struct {
	Ctx    context.Context
	Params []parameter.CreateMimeTypeParam
} {
	var calls []struct {
		Ctx    context.Context
		Params []parameter.CreateMimeTypeParam
	}
	mock.lockCreateMimeTypes.RLock()
	calls = mock.calls.CreateMimeTypes
	mock.lockCreateMimeTypes.RUnlock()
	return calls
}

// CreateMimeTypesWithSd calls CreateMimeTypesWithSdFunc.
func (mock *StoreMock) CreateMimeTypesWithSd(ctx context.Context, sd Sd, params []parameter.CreateMimeTypeParam) (int64, error) {
	if mock.CreateMimeTypesWithSdFunc == nil {
		panic("StoreMock.CreateMimeTypesWithSdFunc: method is nil but Store.CreateMimeTypesWithSd was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateMimeTypeParam
	}{
		Ctx:    ctx,
		Sd:     sd,
		Params: params,
	}
	mock.lockCreateMimeTypesWithSd.Lock()
	mock.calls.CreateMimeTypesWithSd = append(mock.calls.CreateMimeTypesWithSd, callInfo)
	mock.lockCreateMimeTypesWithSd.Unlock()
	return mock.CreateMimeTypesWithSdFunc(ctx, sd, params)
}

// CreateMimeTypesWithSdCalls gets all the calls that were made to CreateMimeTypesWithSd.
// Check the length with:
//
//	len(mockedStore.CreateMimeTypesWithSdCalls())
func (mock *StoreMock) CreateMimeTypesWithSdCalls() []struct {
	Ctx    context.Context
	Sd     Sd
	Params []parameter.CreateMimeTypeParam
} {
	var calls []struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateMimeTypeParam
	}
	mock.lockCreateMimeTypesWithSd.RLock()
	calls = mock.calls.CreateMimeTypesWithSd
	mock.lockCreateMimeTypesWithSd.RUnlock()
	return calls
}

// CreateOrganization calls CreateOrganizationFunc.
func (mock *StoreMock) CreateOrganization(ctx context.Context, param parameter.CreateOrganizationParam) (entity.Organization, error) {
	if mock.CreateOrganizationFunc == nil {
		panic("StoreMock.CreateOrganizationFunc: method is nil but Store.CreateOrganization was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Param parameter.CreateOrganizationParam
	}{
		Ctx:   ctx,
		Param: param,
	}
	mock.lockCreateOrganization.Lock()
	mock.calls.CreateOrganization = append(mock.calls.CreateOrganization, callInfo)
	mock.lockCreateOrganization.Unlock()
	return mock.CreateOrganizationFunc(ctx, param)
}

// CreateOrganizationCalls gets all the calls that were made to CreateOrganization.
// Check the length with:
//
//	len(mockedStore.CreateOrganizationCalls())
func (mock *StoreMock) CreateOrganizationCalls() []struct {
	Ctx   context.Context
	Param parameter.CreateOrganizationParam
} {
	var calls []struct {
		Ctx   context.Context
		Param parameter.CreateOrganizationParam
	}
	mock.lockCreateOrganization.RLock()
	calls = mock.calls.CreateOrganization
	mock.lockCreateOrganization.RUnlock()
	return calls
}

// CreateOrganizationWithSd calls CreateOrganizationWithSdFunc.
func (mock *StoreMock) CreateOrganizationWithSd(ctx context.Context, sd Sd, param parameter.CreateOrganizationParam) (entity.Organization, error) {
	if mock.CreateOrganizationWithSdFunc == nil {
		panic("StoreMock.CreateOrganizationWithSdFunc: method is nil but Store.CreateOrganizationWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateOrganizationParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Param: param,
	}
	mock.lockCreateOrganizationWithSd.Lock()
	mock.calls.CreateOrganizationWithSd = append(mock.calls.CreateOrganizationWithSd, callInfo)
	mock.lockCreateOrganizationWithSd.Unlock()
	return mock.CreateOrganizationWithSdFunc(ctx, sd, param)
}

// CreateOrganizationWithSdCalls gets all the calls that were made to CreateOrganizationWithSd.
// Check the length with:
//
//	len(mockedStore.CreateOrganizationWithSdCalls())
func (mock *StoreMock) CreateOrganizationWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Param parameter.CreateOrganizationParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateOrganizationParam
	}
	mock.lockCreateOrganizationWithSd.RLock()
	calls = mock.calls.CreateOrganizationWithSd
	mock.lockCreateOrganizationWithSd.RUnlock()
	return calls
}

// CreateOrganizations calls CreateOrganizationsFunc.
func (mock *StoreMock) CreateOrganizations(ctx context.Context, params []parameter.CreateOrganizationParam) (int64, error) {
	if mock.CreateOrganizationsFunc == nil {
		panic("StoreMock.CreateOrganizationsFunc: method is nil but Store.CreateOrganizations was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params []parameter.CreateOrganizationParam
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockCreateOrganizations.Lock()
	mock.calls.CreateOrganizations = append(mock.calls.CreateOrganizations, callInfo)
	mock.lockCreateOrganizations.Unlock()
	return mock.CreateOrganizationsFunc(ctx, params)
}

// CreateOrganizationsCalls gets all the calls that were made to CreateOrganizations.
// Check the length with:
//
//	len(mockedStore.CreateOrganizationsCalls())
func (mock *StoreMock) CreateOrganizationsCalls() []struct {
	Ctx    context.Context
	Params []parameter.CreateOrganizationParam
} {
	var calls []struct {
		Ctx    context.Context
		Params []parameter.CreateOrganizationParam
	}
	mock.lockCreateOrganizations.RLock()
	calls = mock.calls.CreateOrganizations
	mock.lockCreateOrganizations.RUnlock()
	return calls
}

// CreateOrganizationsWithSd calls CreateOrganizationsWithSdFunc.
func (mock *StoreMock) CreateOrganizationsWithSd(ctx context.Context, sd Sd, params []parameter.CreateOrganizationParam) (int64, error) {
	if mock.CreateOrganizationsWithSdFunc == nil {
		panic("StoreMock.CreateOrganizationsWithSdFunc: method is nil but Store.CreateOrganizationsWithSd was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateOrganizationParam
	}{
		Ctx:    ctx,
		Sd:     sd,
		Params: params,
	}
	mock.lockCreateOrganizationsWithSd.Lock()
	mock.calls.CreateOrganizationsWithSd = append(mock.calls.CreateOrganizationsWithSd, callInfo)
	mock.lockCreateOrganizationsWithSd.Unlock()
	return mock.CreateOrganizationsWithSdFunc(ctx, sd, params)
}

// CreateOrganizationsWithSdCalls gets all the calls that were made to CreateOrganizationsWithSd.
// Check the length with:
//
//	len(mockedStore.CreateOrganizationsWithSdCalls())
func (mock *StoreMock) CreateOrganizationsWithSdCalls() []struct {
	Ctx    context.Context
	Sd     Sd
	Params []parameter.CreateOrganizationParam
} {
	var calls []struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateOrganizationParam
	}
	mock.lockCreateOrganizationsWithSd.RLock()
	calls = mock.calls.CreateOrganizationsWithSd
	mock.lockCreateOrganizationsWithSd.RUnlock()
	return calls
}

// CreatePermission calls CreatePermissionFunc.
func (mock *StoreMock) CreatePermission(ctx context.Context, param parameter.CreatePermissionParam) (entity.Permission, error) {
	if mock.CreatePermissionFunc == nil {
		panic("StoreMock.CreatePermissionFunc: method is nil but Store.CreatePermission was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Param parameter.CreatePermissionParam
	}{
		Ctx:   ctx,
		Param: param,
	}
	mock.lockCreatePermission.Lock()
	mock.calls.CreatePermission = append(mock.calls.CreatePermission, callInfo)
	mock.lockCreatePermission.Unlock()
	return mock.CreatePermissionFunc(ctx, param)
}

// CreatePermissionCalls gets all the calls that were made to CreatePermission.
// Check the length with:
//
//	len(mockedStore.CreatePermissionCalls())
func (mock *StoreMock) CreatePermissionCalls() []struct {
	Ctx   context.Context
	Param parameter.CreatePermissionParam
} {
	var calls []struct {
		Ctx   context.Context
		Param parameter.CreatePermissionParam
	}
	mock.lockCreatePermission.RLock()
	calls = mock.calls.CreatePermission
	mock.lockCreatePermission.RUnlock()
	return calls
}

// CreatePermissionCategories calls CreatePermissionCategoriesFunc.
func (mock *StoreMock) CreatePermissionCategories(ctx context.Context, params []parameter.CreatePermissionCategoryParam) (int64, error) {
	if mock.CreatePermissionCategoriesFunc == nil {
		panic("StoreMock.CreatePermissionCategoriesFunc: method is nil but Store.CreatePermissionCategories was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params []parameter.CreatePermissionCategoryParam
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockCreatePermissionCategories.Lock()
	mock.calls.CreatePermissionCategories = append(mock.calls.CreatePermissionCategories, callInfo)
	mock.lockCreatePermissionCategories.Unlock()
	return mock.CreatePermissionCategoriesFunc(ctx, params)
}

// CreatePermissionCategoriesCalls gets all the calls that were made to CreatePermissionCategories.
// Check the length with:
//
//	len(mockedStore.CreatePermissionCategoriesCalls())
func (mock *StoreMock) CreatePermissionCategoriesCalls() []struct {
	Ctx    context.Context
	Params []parameter.CreatePermissionCategoryParam
} {
	var calls []struct {
		Ctx    context.Context
		Params []parameter.CreatePermissionCategoryParam
	}
	mock.lockCreatePermissionCategories.RLock()
	calls = mock.calls.CreatePermissionCategories
	mock.lockCreatePermissionCategories.RUnlock()
	return calls
}

// CreatePermissionCategoriesWithSd calls CreatePermissionCategoriesWithSdFunc.
func (mock *StoreMock) CreatePermissionCategoriesWithSd(ctx context.Context, sd Sd, params []parameter.CreatePermissionCategoryParam) (int64, error) {
	if mock.CreatePermissionCategoriesWithSdFunc == nil {
		panic("StoreMock.CreatePermissionCategoriesWithSdFunc: method is nil but Store.CreatePermissionCategoriesWithSd was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreatePermissionCategoryParam
	}{
		Ctx:    ctx,
		Sd:     sd,
		Params: params,
	}
	mock.lockCreatePermissionCategoriesWithSd.Lock()
	mock.calls.CreatePermissionCategoriesWithSd = append(mock.calls.CreatePermissionCategoriesWithSd, callInfo)
	mock.lockCreatePermissionCategoriesWithSd.Unlock()
	return mock.CreatePermissionCategoriesWithSdFunc(ctx, sd, params)
}

// CreatePermissionCategoriesWithSdCalls gets all the calls that were made to CreatePermissionCategoriesWithSd.
// Check the length with:
//
//	len(mockedStore.CreatePermissionCategoriesWithSdCalls())
func (mock *StoreMock) CreatePermissionCategoriesWithSdCalls() []struct {
	Ctx    context.Context
	Sd     Sd
	Params []parameter.CreatePermissionCategoryParam
} {
	var calls []struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreatePermissionCategoryParam
	}
	mock.lockCreatePermissionCategoriesWithSd.RLock()
	calls = mock.calls.CreatePermissionCategoriesWithSd
	mock.lockCreatePermissionCategoriesWithSd.RUnlock()
	return calls
}

// CreatePermissionCategory calls CreatePermissionCategoryFunc.
func (mock *StoreMock) CreatePermissionCategory(ctx context.Context, param parameter.CreatePermissionCategoryParam) (entity.PermissionCategory, error) {
	if mock.CreatePermissionCategoryFunc == nil {
		panic("StoreMock.CreatePermissionCategoryFunc: method is nil but Store.CreatePermissionCategory was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Param parameter.CreatePermissionCategoryParam
	}{
		Ctx:   ctx,
		Param: param,
	}
	mock.lockCreatePermissionCategory.Lock()
	mock.calls.CreatePermissionCategory = append(mock.calls.CreatePermissionCategory, callInfo)
	mock.lockCreatePermissionCategory.Unlock()
	return mock.CreatePermissionCategoryFunc(ctx, param)
}

// CreatePermissionCategoryCalls gets all the calls that were made to CreatePermissionCategory.
// Check the length with:
//
//	len(mockedStore.CreatePermissionCategoryCalls())
func (mock *StoreMock) CreatePermissionCategoryCalls() []struct {
	Ctx   context.Context
	Param parameter.CreatePermissionCategoryParam
} {
	var calls []struct {
		Ctx   context.Context
		Param parameter.CreatePermissionCategoryParam
	}
	mock.lockCreatePermissionCategory.RLock()
	calls = mock.calls.CreatePermissionCategory
	mock.lockCreatePermissionCategory.RUnlock()
	return calls
}

// CreatePermissionCategoryWithSd calls CreatePermissionCategoryWithSdFunc.
func (mock *StoreMock) CreatePermissionCategoryWithSd(ctx context.Context, sd Sd, param parameter.CreatePermissionCategoryParam) (entity.PermissionCategory, error) {
	if mock.CreatePermissionCategoryWithSdFunc == nil {
		panic("StoreMock.CreatePermissionCategoryWithSdFunc: method is nil but Store.CreatePermissionCategoryWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreatePermissionCategoryParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Param: param,
	}
	mock.lockCreatePermissionCategoryWithSd.Lock()
	mock.calls.CreatePermissionCategoryWithSd = append(mock.calls.CreatePermissionCategoryWithSd, callInfo)
	mock.lockCreatePermissionCategoryWithSd.Unlock()
	return mock.CreatePermissionCategoryWithSdFunc(ctx, sd, param)
}

// CreatePermissionCategoryWithSdCalls gets all the calls that were made to CreatePermissionCategoryWithSd.
// Check the length with:
//
//	len(mockedStore.CreatePermissionCategoryWithSdCalls())
func (mock *StoreMock) CreatePermissionCategoryWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Param parameter.CreatePermissionCategoryParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreatePermissionCategoryParam
	}
	mock.lockCreatePermissionCategoryWithSd.RLock()
	calls = mock.calls.CreatePermissionCategoryWithSd
	mock.lockCreatePermissionCategoryWithSd.RUnlock()
	return calls
}

// CreatePermissionWithSd calls CreatePermissionWithSdFunc.
func (mock *StoreMock) CreatePermissionWithSd(ctx context.Context, sd Sd, param parameter.CreatePermissionParam) (entity.Permission, error) {
	if mock.CreatePermissionWithSdFunc == nil {
		panic("StoreMock.CreatePermissionWithSdFunc: method is nil but Store.CreatePermissionWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreatePermissionParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Param: param,
	}
	mock.lockCreatePermissionWithSd.Lock()
	mock.calls.CreatePermissionWithSd = append(mock.calls.CreatePermissionWithSd, callInfo)
	mock.lockCreatePermissionWithSd.Unlock()
	return mock.CreatePermissionWithSdFunc(ctx, sd, param)
}

// CreatePermissionWithSdCalls gets all the calls that were made to CreatePermissionWithSd.
// Check the length with:
//
//	len(mockedStore.CreatePermissionWithSdCalls())
func (mock *StoreMock) CreatePermissionWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Param parameter.CreatePermissionParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreatePermissionParam
	}
	mock.lockCreatePermissionWithSd.RLock()
	calls = mock.calls.CreatePermissionWithSd
	mock.lockCreatePermissionWithSd.RUnlock()
	return calls
}

// CreatePermissions calls CreatePermissionsFunc.
func (mock *StoreMock) CreatePermissions(ctx context.Context, params []parameter.CreatePermissionParam) (int64, error) {
	if mock.CreatePermissionsFunc == nil {
		panic("StoreMock.CreatePermissionsFunc: method is nil but Store.CreatePermissions was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params []parameter.CreatePermissionParam
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockCreatePermissions.Lock()
	mock.calls.CreatePermissions = append(mock.calls.CreatePermissions, callInfo)
	mock.lockCreatePermissions.Unlock()
	return mock.CreatePermissionsFunc(ctx, params)
}

// CreatePermissionsCalls gets all the calls that were made to CreatePermissions.
// Check the length with:
//
//	len(mockedStore.CreatePermissionsCalls())
func (mock *StoreMock) CreatePermissionsCalls() []struct {
	Ctx    context.Context
	Params []parameter.CreatePermissionParam
} {
	var calls []struct {
		Ctx    context.Context
		Params []parameter.CreatePermissionParam
	}
	mock.lockCreatePermissions.RLock()
	calls = mock.calls.CreatePermissions
	mock.lockCreatePermissions.RUnlock()
	return calls
}

// CreatePermissionsWithSd calls CreatePermissionsWithSdFunc.
func (mock *StoreMock) CreatePermissionsWithSd(ctx context.Context, sd Sd, params []parameter.CreatePermissionParam) (int64, error) {
	if mock.CreatePermissionsWithSdFunc == nil {
		panic("StoreMock.CreatePermissionsWithSdFunc: method is nil but Store.CreatePermissionsWithSd was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreatePermissionParam
	}{
		Ctx:    ctx,
		Sd:     sd,
		Params: params,
	}
	mock.lockCreatePermissionsWithSd.Lock()
	mock.calls.CreatePermissionsWithSd = append(mock.calls.CreatePermissionsWithSd, callInfo)
	mock.lockCreatePermissionsWithSd.Unlock()
	return mock.CreatePermissionsWithSdFunc(ctx, sd, params)
}

// CreatePermissionsWithSdCalls gets all the calls that were made to CreatePermissionsWithSd.
// Check the length with:
//
//	len(mockedStore.CreatePermissionsWithSdCalls())
func (mock *StoreMock) CreatePermissionsWithSdCalls() []struct {
	Ctx    context.Context
	Sd     Sd
	Params []parameter.CreatePermissionParam
} {
	var calls []struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreatePermissionParam
	}
	mock.lockCreatePermissionsWithSd.RLock()
	calls = mock.calls.CreatePermissionsWithSd
	mock.lockCreatePermissionsWithSd.RUnlock()
	return calls
}

// CreatePolicies calls CreatePoliciesFunc.
func (mock *StoreMock) CreatePolicies(ctx context.Context, params []parameter.CreatePolicyParam) (int64, error) {
	if mock.CreatePoliciesFunc == nil {
		panic("StoreMock.CreatePoliciesFunc: method is nil but Store.CreatePolicies was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params []parameter.CreatePolicyParam
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockCreatePolicies.Lock()
	mock.calls.CreatePolicies = append(mock.calls.CreatePolicies, callInfo)
	mock.lockCreatePolicies.Unlock()
	return mock.CreatePoliciesFunc(ctx, params)
}

// CreatePoliciesCalls gets all the calls that were made to CreatePolicies.
// Check the length with:
//
//	len(mockedStore.CreatePoliciesCalls())
func (mock *StoreMock) CreatePoliciesCalls() []struct {
	Ctx    context.Context
	Params []parameter.CreatePolicyParam
} {
	var calls []struct {
		Ctx    context.Context
		Params []parameter.CreatePolicyParam
	}
	mock.lockCreatePolicies.RLock()
	calls = mock.calls.CreatePolicies
	mock.lockCreatePolicies.RUnlock()
	return calls
}

// CreatePoliciesWithSd calls CreatePoliciesWithSdFunc.
func (mock *StoreMock) CreatePoliciesWithSd(ctx context.Context, sd Sd, params []parameter.CreatePolicyParam) (int64, error) {
	if mock.CreatePoliciesWithSdFunc == nil {
		panic("StoreMock.CreatePoliciesWithSdFunc: method is nil but Store.CreatePoliciesWithSd was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreatePolicyParam
	}{
		Ctx:    ctx,
		Sd:     sd,
		Params: params,
	}
	mock.lockCreatePoliciesWithSd.Lock()
	mock.calls.CreatePoliciesWithSd = append(mock.calls.CreatePoliciesWithSd, callInfo)
	mock.lockCreatePoliciesWithSd.Unlock()
	return mock.CreatePoliciesWithSdFunc(ctx, sd, params)
}

// CreatePoliciesWithSdCalls gets all the calls that were made to CreatePoliciesWithSd.
// Check the length with:
//
//	len(mockedStore.CreatePoliciesWithSdCalls())
func (mock *StoreMock) CreatePoliciesWithSdCalls() []struct {
	Ctx    context.Context
	Sd     Sd
	Params []parameter.CreatePolicyParam
} {
	var calls []struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreatePolicyParam
	}
	mock.lockCreatePoliciesWithSd.RLock()
	calls = mock.calls.CreatePoliciesWithSd
	mock.lockCreatePoliciesWithSd.RUnlock()
	return calls
}

// CreatePolicy calls CreatePolicyFunc.
func (mock *StoreMock) CreatePolicy(ctx context.Context, param parameter.CreatePolicyParam) (entity.Policy, error) {
	if mock.CreatePolicyFunc == nil {
		panic("StoreMock.CreatePolicyFunc: method is nil but Store.CreatePolicy was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Param parameter.CreatePolicyParam
	}{
		Ctx:   ctx,
		Param: param,
	}
	mock.lockCreatePolicy.Lock()
	mock.calls.CreatePolicy = append(mock.calls.CreatePolicy, callInfo)
	mock.lockCreatePolicy.Unlock()
	return mock.CreatePolicyFunc(ctx, param)
}

// CreatePolicyCalls gets all the calls that were made to CreatePolicy.
// Check the length with:
//
//	len(mockedStore.CreatePolicyCalls())
func (mock *StoreMock) CreatePolicyCalls() []struct {
	Ctx   context.Context
	Param parameter.CreatePolicyParam
} {
	var calls []struct {
		Ctx   context.Context
		Param parameter.CreatePolicyParam
	}
	mock.lockCreatePolicy.RLock()
	calls = mock.calls.CreatePolicy
	mock.lockCreatePolicy.RUnlock()
	return calls
}

// CreatePolicyCategories calls CreatePolicyCategoriesFunc.
func (mock *StoreMock) CreatePolicyCategories(ctx context.Context, params []parameter.CreatePolicyCategoryParam) (int64, error) {
	if mock.CreatePolicyCategoriesFunc == nil {
		panic("StoreMock.CreatePolicyCategoriesFunc: method is nil but Store.CreatePolicyCategories was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params []parameter.CreatePolicyCategoryParam
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockCreatePolicyCategories.Lock()
	mock.calls.CreatePolicyCategories = append(mock.calls.CreatePolicyCategories, callInfo)
	mock.lockCreatePolicyCategories.Unlock()
	return mock.CreatePolicyCategoriesFunc(ctx, params)
}

// CreatePolicyCategoriesCalls gets all the calls that were made to CreatePolicyCategories.
// Check the length with:
//
//	len(mockedStore.CreatePolicyCategoriesCalls())
func (mock *StoreMock) CreatePolicyCategoriesCalls() []struct {
	Ctx    context.Context
	Params []parameter.CreatePolicyCategoryParam
} {
	var calls []struct {
		Ctx    context.Context
		Params []parameter.CreatePolicyCategoryParam
	}
	mock.lockCreatePolicyCategories.RLock()
	calls = mock.calls.CreatePolicyCategories
	mock.lockCreatePolicyCategories.RUnlock()
	return calls
}

// CreatePolicyCategoriesWithSd calls CreatePolicyCategoriesWithSdFunc.
func (mock *StoreMock) CreatePolicyCategoriesWithSd(ctx context.Context, sd Sd, params []parameter.CreatePolicyCategoryParam) (int64, error) {
	if mock.CreatePolicyCategoriesWithSdFunc == nil {
		panic("StoreMock.CreatePolicyCategoriesWithSdFunc: method is nil but Store.CreatePolicyCategoriesWithSd was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreatePolicyCategoryParam
	}{
		Ctx:    ctx,
		Sd:     sd,
		Params: params,
	}
	mock.lockCreatePolicyCategoriesWithSd.Lock()
	mock.calls.CreatePolicyCategoriesWithSd = append(mock.calls.CreatePolicyCategoriesWithSd, callInfo)
	mock.lockCreatePolicyCategoriesWithSd.Unlock()
	return mock.CreatePolicyCategoriesWithSdFunc(ctx, sd, params)
}

// CreatePolicyCategoriesWithSdCalls gets all the calls that were made to CreatePolicyCategoriesWithSd.
// Check the length with:
//
//	len(mockedStore.CreatePolicyCategoriesWithSdCalls())
func (mock *StoreMock) CreatePolicyCategoriesWithSdCalls() []struct {
	Ctx    context.Context
	Sd     Sd
	Params []parameter.CreatePolicyCategoryParam
} {
	var calls []struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreatePolicyCategoryParam
	}
	mock.lockCreatePolicyCategoriesWithSd.RLock()
	calls = mock.calls.CreatePolicyCategoriesWithSd
	mock.lockCreatePolicyCategoriesWithSd.RUnlock()
	return calls
}

// CreatePolicyCategory calls CreatePolicyCategoryFunc.
func (mock *StoreMock) CreatePolicyCategory(ctx context.Context, param parameter.CreatePolicyCategoryParam) (entity.PolicyCategory, error) {
	if mock.CreatePolicyCategoryFunc == nil {
		panic("StoreMock.CreatePolicyCategoryFunc: method is nil but Store.CreatePolicyCategory was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Param parameter.CreatePolicyCategoryParam
	}{
		Ctx:   ctx,
		Param: param,
	}
	mock.lockCreatePolicyCategory.Lock()
	mock.calls.CreatePolicyCategory = append(mock.calls.CreatePolicyCategory, callInfo)
	mock.lockCreatePolicyCategory.Unlock()
	return mock.CreatePolicyCategoryFunc(ctx, param)
}

// CreatePolicyCategoryCalls gets all the calls that were made to CreatePolicyCategory.
// Check the length with:
//
//	len(mockedStore.CreatePolicyCategoryCalls())
func (mock *StoreMock) CreatePolicyCategoryCalls() []struct {
	Ctx   context.Context
	Param parameter.CreatePolicyCategoryParam
} {
	var calls []struct {
		Ctx   context.Context
		Param parameter.CreatePolicyCategoryParam
	}
	mock.lockCreatePolicyCategory.RLock()
	calls = mock.calls.CreatePolicyCategory
	mock.lockCreatePolicyCategory.RUnlock()
	return calls
}

// CreatePolicyCategoryWithSd calls CreatePolicyCategoryWithSdFunc.
func (mock *StoreMock) CreatePolicyCategoryWithSd(ctx context.Context, sd Sd, param parameter.CreatePolicyCategoryParam) (entity.PolicyCategory, error) {
	if mock.CreatePolicyCategoryWithSdFunc == nil {
		panic("StoreMock.CreatePolicyCategoryWithSdFunc: method is nil but Store.CreatePolicyCategoryWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreatePolicyCategoryParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Param: param,
	}
	mock.lockCreatePolicyCategoryWithSd.Lock()
	mock.calls.CreatePolicyCategoryWithSd = append(mock.calls.CreatePolicyCategoryWithSd, callInfo)
	mock.lockCreatePolicyCategoryWithSd.Unlock()
	return mock.CreatePolicyCategoryWithSdFunc(ctx, sd, param)
}

// CreatePolicyCategoryWithSdCalls gets all the calls that were made to CreatePolicyCategoryWithSd.
// Check the length with:
//
//	len(mockedStore.CreatePolicyCategoryWithSdCalls())
func (mock *StoreMock) CreatePolicyCategoryWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Param parameter.CreatePolicyCategoryParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreatePolicyCategoryParam
	}
	mock.lockCreatePolicyCategoryWithSd.RLock()
	calls = mock.calls.CreatePolicyCategoryWithSd
	mock.lockCreatePolicyCategoryWithSd.RUnlock()
	return calls
}

// CreatePolicyWithSd calls CreatePolicyWithSdFunc.
func (mock *StoreMock) CreatePolicyWithSd(ctx context.Context, sd Sd, param parameter.CreatePolicyParam) (entity.Policy, error) {
	if mock.CreatePolicyWithSdFunc == nil {
		panic("StoreMock.CreatePolicyWithSdFunc: method is nil but Store.CreatePolicyWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreatePolicyParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Param: param,
	}
	mock.lockCreatePolicyWithSd.Lock()
	mock.calls.CreatePolicyWithSd = append(mock.calls.CreatePolicyWithSd, callInfo)
	mock.lockCreatePolicyWithSd.Unlock()
	return mock.CreatePolicyWithSdFunc(ctx, sd, param)
}

// CreatePolicyWithSdCalls gets all the calls that were made to CreatePolicyWithSd.
// Check the length with:
//
//	len(mockedStore.CreatePolicyWithSdCalls())
func (mock *StoreMock) CreatePolicyWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Param parameter.CreatePolicyParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreatePolicyParam
	}
	mock.lockCreatePolicyWithSd.RLock()
	calls = mock.calls.CreatePolicyWithSd
	mock.lockCreatePolicyWithSd.RUnlock()
	return calls
}

// CreateProfessor calls CreateProfessorFunc.
func (mock *StoreMock) CreateProfessor(ctx context.Context, param parameter.CreateProfessorParam) (entity.Professor, error) {
	if mock.CreateProfessorFunc == nil {
		panic("StoreMock.CreateProfessorFunc: method is nil but Store.CreateProfessor was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Param parameter.CreateProfessorParam
	}{
		Ctx:   ctx,
		Param: param,
	}
	mock.lockCreateProfessor.Lock()
	mock.calls.CreateProfessor = append(mock.calls.CreateProfessor, callInfo)
	mock.lockCreateProfessor.Unlock()
	return mock.CreateProfessorFunc(ctx, param)
}

// CreateProfessorCalls gets all the calls that were made to CreateProfessor.
// Check the length with:
//
//	len(mockedStore.CreateProfessorCalls())
func (mock *StoreMock) CreateProfessorCalls() []struct {
	Ctx   context.Context
	Param parameter.CreateProfessorParam
} {
	var calls []struct {
		Ctx   context.Context
		Param parameter.CreateProfessorParam
	}
	mock.lockCreateProfessor.RLock()
	calls = mock.calls.CreateProfessor
	mock.lockCreateProfessor.RUnlock()
	return calls
}

// CreateProfessorWithSd calls CreateProfessorWithSdFunc.
func (mock *StoreMock) CreateProfessorWithSd(ctx context.Context, sd Sd, param parameter.CreateProfessorParam) (entity.Professor, error) {
	if mock.CreateProfessorWithSdFunc == nil {
		panic("StoreMock.CreateProfessorWithSdFunc: method is nil but Store.CreateProfessorWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateProfessorParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Param: param,
	}
	mock.lockCreateProfessorWithSd.Lock()
	mock.calls.CreateProfessorWithSd = append(mock.calls.CreateProfessorWithSd, callInfo)
	mock.lockCreateProfessorWithSd.Unlock()
	return mock.CreateProfessorWithSdFunc(ctx, sd, param)
}

// CreateProfessorWithSdCalls gets all the calls that were made to CreateProfessorWithSd.
// Check the length with:
//
//	len(mockedStore.CreateProfessorWithSdCalls())
func (mock *StoreMock) CreateProfessorWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Param parameter.CreateProfessorParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateProfessorParam
	}
	mock.lockCreateProfessorWithSd.RLock()
	calls = mock.calls.CreateProfessorWithSd
	mock.lockCreateProfessorWithSd.RUnlock()
	return calls
}

// CreateProfessors calls CreateProfessorsFunc.
func (mock *StoreMock) CreateProfessors(ctx context.Context, params []parameter.CreateProfessorParam) (int64, error) {
	if mock.CreateProfessorsFunc == nil {
		panic("StoreMock.CreateProfessorsFunc: method is nil but Store.CreateProfessors was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params []parameter.CreateProfessorParam
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockCreateProfessors.Lock()
	mock.calls.CreateProfessors = append(mock.calls.CreateProfessors, callInfo)
	mock.lockCreateProfessors.Unlock()
	return mock.CreateProfessorsFunc(ctx, params)
}

// CreateProfessorsCalls gets all the calls that were made to CreateProfessors.
// Check the length with:
//
//	len(mockedStore.CreateProfessorsCalls())
func (mock *StoreMock) CreateProfessorsCalls() []struct {
	Ctx    context.Context
	Params []parameter.CreateProfessorParam
} {
	var calls []struct {
		Ctx    context.Context
		Params []parameter.CreateProfessorParam
	}
	mock.lockCreateProfessors.RLock()
	calls = mock.calls.CreateProfessors
	mock.lockCreateProfessors.RUnlock()
	return calls
}

// CreateProfessorsWithSd calls CreateProfessorsWithSdFunc.
func (mock *StoreMock) CreateProfessorsWithSd(ctx context.Context, sd Sd, params []parameter.CreateProfessorParam) (int64, error) {
	if mock.CreateProfessorsWithSdFunc == nil {
		panic("StoreMock.CreateProfessorsWithSdFunc: method is nil but Store.CreateProfessorsWithSd was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateProfessorParam
	}{
		Ctx:    ctx,
		Sd:     sd,
		Params: params,
	}
	mock.lockCreateProfessorsWithSd.Lock()
	mock.calls.CreateProfessorsWithSd = append(mock.calls.CreateProfessorsWithSd, callInfo)
	mock.lockCreateProfessorsWithSd.Unlock()
	return mock.CreateProfessorsWithSdFunc(ctx, sd, params)
}

// CreateProfessorsWithSdCalls gets all the calls that were made to CreateProfessorsWithSd.
// Check the length with:
//
//	len(mockedStore.CreateProfessorsWithSdCalls())
func (mock *StoreMock) CreateProfessorsWithSdCalls() []struct {
	Ctx    context.Context
	Sd     Sd
	Params []parameter.CreateProfessorParam
} {
	var calls []struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateProfessorParam
	}
	mock.lockCreateProfessorsWithSd.RLock()
	calls = mock.calls.CreateProfessorsWithSd
	mock.lockCreateProfessorsWithSd.RUnlock()
	return calls
}

// CreateReadReceipt calls CreateReadReceiptFunc.
func (mock *StoreMock) CreateReadReceipt(ctx context.Context, param parameter.CreateReadReceiptParam) (entity.ReadReceipt, error) {
	if mock.CreateReadReceiptFunc == nil {
		panic("StoreMock.CreateReadReceiptFunc: method is nil but Store.CreateReadReceipt was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Param parameter.CreateReadReceiptParam
	}{
		Ctx:   ctx,
		Param: param,
	}
	mock.lockCreateReadReceipt.Lock()
	mock.calls.CreateReadReceipt = append(mock.calls.CreateReadReceipt, callInfo)
	mock.lockCreateReadReceipt.Unlock()
	return mock.CreateReadReceiptFunc(ctx, param)
}

// CreateReadReceiptCalls gets all the calls that were made to CreateReadReceipt.
// Check the length with:
//
//	len(mockedStore.CreateReadReceiptCalls())
func (mock *StoreMock) CreateReadReceiptCalls() []struct {
	Ctx   context.Context
	Param parameter.CreateReadReceiptParam
} {
	var calls []struct {
		Ctx   context.Context
		Param parameter.CreateReadReceiptParam
	}
	mock.lockCreateReadReceipt.RLock()
	calls = mock.calls.CreateReadReceipt
	mock.lockCreateReadReceipt.RUnlock()
	return calls
}

// CreateReadReceiptWithSd calls CreateReadReceiptWithSdFunc.
func (mock *StoreMock) CreateReadReceiptWithSd(ctx context.Context, sd Sd, param parameter.CreateReadReceiptParam) (entity.ReadReceipt, error) {
	if mock.CreateReadReceiptWithSdFunc == nil {
		panic("StoreMock.CreateReadReceiptWithSdFunc: method is nil but Store.CreateReadReceiptWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateReadReceiptParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Param: param,
	}
	mock.lockCreateReadReceiptWithSd.Lock()
	mock.calls.CreateReadReceiptWithSd = append(mock.calls.CreateReadReceiptWithSd, callInfo)
	mock.lockCreateReadReceiptWithSd.Unlock()
	return mock.CreateReadReceiptWithSdFunc(ctx, sd, param)
}

// CreateReadReceiptWithSdCalls gets all the calls that were made to CreateReadReceiptWithSd.
// Check the length with:
//
//	len(mockedStore.CreateReadReceiptWithSdCalls())
func (mock *StoreMock) CreateReadReceiptWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Param parameter.CreateReadReceiptParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateReadReceiptParam
	}
	mock.lockCreateReadReceiptWithSd.RLock()
	calls = mock.calls.CreateReadReceiptWithSd
	mock.lockCreateReadReceiptWithSd.RUnlock()
	return calls
}

// CreateReadReceipts calls CreateReadReceiptsFunc.
func (mock *StoreMock) CreateReadReceipts(ctx context.Context, params []parameter.CreateReadReceiptParam) (int64, error) {
	if mock.CreateReadReceiptsFunc == nil {
		panic("StoreMock.CreateReadReceiptsFunc: method is nil but Store.CreateReadReceipts was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params []parameter.CreateReadReceiptParam
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockCreateReadReceipts.Lock()
	mock.calls.CreateReadReceipts = append(mock.calls.CreateReadReceipts, callInfo)
	mock.lockCreateReadReceipts.Unlock()
	return mock.CreateReadReceiptsFunc(ctx, params)
}

// CreateReadReceiptsCalls gets all the calls that were made to CreateReadReceipts.
// Check the length with:
//
//	len(mockedStore.CreateReadReceiptsCalls())
func (mock *StoreMock) CreateReadReceiptsCalls() []struct {
	Ctx    context.Context
	Params []parameter.CreateReadReceiptParam
} {
	var calls []struct {
		Ctx    context.Context
		Params []parameter.CreateReadReceiptParam
	}
	mock.lockCreateReadReceipts.RLock()
	calls = mock.calls.CreateReadReceipts
	mock.lockCreateReadReceipts.RUnlock()
	return calls
}

// CreateReadReceiptsWithSd calls CreateReadReceiptsWithSdFunc.
func (mock *StoreMock) CreateReadReceiptsWithSd(ctx context.Context, sd Sd, params []parameter.CreateReadReceiptParam) (int64, error) {
	if mock.CreateReadReceiptsWithSdFunc == nil {
		panic("StoreMock.CreateReadReceiptsWithSdFunc: method is nil but Store.CreateReadReceiptsWithSd was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateReadReceiptParam
	}{
		Ctx:    ctx,
		Sd:     sd,
		Params: params,
	}
	mock.lockCreateReadReceiptsWithSd.Lock()
	mock.calls.CreateReadReceiptsWithSd = append(mock.calls.CreateReadReceiptsWithSd, callInfo)
	mock.lockCreateReadReceiptsWithSd.Unlock()
	return mock.CreateReadReceiptsWithSdFunc(ctx, sd, params)
}

// CreateReadReceiptsWithSdCalls gets all the calls that were made to CreateReadReceiptsWithSd.
// Check the length with:
//
//	len(mockedStore.CreateReadReceiptsWithSdCalls())
func (mock *StoreMock) CreateReadReceiptsWithSdCalls() []struct {
	Ctx    context.Context
	Sd     Sd
	Params []parameter.CreateReadReceiptParam
} {
	var calls []struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateReadReceiptParam
	}
	mock.lockCreateReadReceiptsWithSd.RLock()
	calls = mock.calls.CreateReadReceiptsWithSd
	mock.lockCreateReadReceiptsWithSd.RUnlock()
	return calls
}

// CreateRecordType calls CreateRecordTypeFunc.
func (mock *StoreMock) CreateRecordType(ctx context.Context, param parameter.CreateRecordTypeParam) (entity.RecordType, error) {
	if mock.CreateRecordTypeFunc == nil {
		panic("StoreMock.CreateRecordTypeFunc: method is nil but Store.CreateRecordType was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Param parameter.CreateRecordTypeParam
	}{
		Ctx:   ctx,
		Param: param,
	}
	mock.lockCreateRecordType.Lock()
	mock.calls.CreateRecordType = append(mock.calls.CreateRecordType, callInfo)
	mock.lockCreateRecordType.Unlock()
	return mock.CreateRecordTypeFunc(ctx, param)
}

// CreateRecordTypeCalls gets all the calls that were made to CreateRecordType.
// Check the length with:
//
//	len(mockedStore.CreateRecordTypeCalls())
func (mock *StoreMock) CreateRecordTypeCalls() []struct {
	Ctx   context.Context
	Param parameter.CreateRecordTypeParam
} {
	var calls []struct {
		Ctx   context.Context
		Param parameter.CreateRecordTypeParam
	}
	mock.lockCreateRecordType.RLock()
	calls = mock.calls.CreateRecordType
	mock.lockCreateRecordType.RUnlock()
	return calls
}

// CreateRecordTypeWithSd calls CreateRecordTypeWithSdFunc.
func (mock *StoreMock) CreateRecordTypeWithSd(ctx context.Context, sd Sd, param parameter.CreateRecordTypeParam) (entity.RecordType, error) {
	if mock.CreateRecordTypeWithSdFunc == nil {
		panic("StoreMock.CreateRecordTypeWithSdFunc: method is nil but Store.CreateRecordTypeWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateRecordTypeParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Param: param,
	}
	mock.lockCreateRecordTypeWithSd.Lock()
	mock.calls.CreateRecordTypeWithSd = append(mock.calls.CreateRecordTypeWithSd, callInfo)
	mock.lockCreateRecordTypeWithSd.Unlock()
	return mock.CreateRecordTypeWithSdFunc(ctx, sd, param)
}

// CreateRecordTypeWithSdCalls gets all the calls that were made to CreateRecordTypeWithSd.
// Check the length with:
//
//	len(mockedStore.CreateRecordTypeWithSdCalls())
func (mock *StoreMock) CreateRecordTypeWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Param parameter.CreateRecordTypeParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateRecordTypeParam
	}
	mock.lockCreateRecordTypeWithSd.RLock()
	calls = mock.calls.CreateRecordTypeWithSd
	mock.lockCreateRecordTypeWithSd.RUnlock()
	return calls
}

// CreateRecordTypes calls CreateRecordTypesFunc.
func (mock *StoreMock) CreateRecordTypes(ctx context.Context, params []parameter.CreateRecordTypeParam) (int64, error) {
	if mock.CreateRecordTypesFunc == nil {
		panic("StoreMock.CreateRecordTypesFunc: method is nil but Store.CreateRecordTypes was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params []parameter.CreateRecordTypeParam
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockCreateRecordTypes.Lock()
	mock.calls.CreateRecordTypes = append(mock.calls.CreateRecordTypes, callInfo)
	mock.lockCreateRecordTypes.Unlock()
	return mock.CreateRecordTypesFunc(ctx, params)
}

// CreateRecordTypesCalls gets all the calls that were made to CreateRecordTypes.
// Check the length with:
//
//	len(mockedStore.CreateRecordTypesCalls())
func (mock *StoreMock) CreateRecordTypesCalls() []struct {
	Ctx    context.Context
	Params []parameter.CreateRecordTypeParam
} {
	var calls []struct {
		Ctx    context.Context
		Params []parameter.CreateRecordTypeParam
	}
	mock.lockCreateRecordTypes.RLock()
	calls = mock.calls.CreateRecordTypes
	mock.lockCreateRecordTypes.RUnlock()
	return calls
}

// CreateRecordTypesWithSd calls CreateRecordTypesWithSdFunc.
func (mock *StoreMock) CreateRecordTypesWithSd(ctx context.Context, sd Sd, params []parameter.CreateRecordTypeParam) (int64, error) {
	if mock.CreateRecordTypesWithSdFunc == nil {
		panic("StoreMock.CreateRecordTypesWithSdFunc: method is nil but Store.CreateRecordTypesWithSd was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateRecordTypeParam
	}{
		Ctx:    ctx,
		Sd:     sd,
		Params: params,
	}
	mock.lockCreateRecordTypesWithSd.Lock()
	mock.calls.CreateRecordTypesWithSd = append(mock.calls.CreateRecordTypesWithSd, callInfo)
	mock.lockCreateRecordTypesWithSd.Unlock()
	return mock.CreateRecordTypesWithSdFunc(ctx, sd, params)
}

// CreateRecordTypesWithSdCalls gets all the calls that were made to CreateRecordTypesWithSd.
// Check the length with:
//
//	len(mockedStore.CreateRecordTypesWithSdCalls())
func (mock *StoreMock) CreateRecordTypesWithSdCalls() []struct {
	Ctx    context.Context
	Sd     Sd
	Params []parameter.CreateRecordTypeParam
} {
	var calls []struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateRecordTypeParam
	}
	mock.lockCreateRecordTypesWithSd.RLock()
	calls = mock.calls.CreateRecordTypesWithSd
	mock.lockCreateRecordTypesWithSd.RUnlock()
	return calls
}

// CreateRole calls CreateRoleFunc.
func (mock *StoreMock) CreateRole(ctx context.Context, param parameter.CreateRoleParam) (entity.Role, error) {
	if mock.CreateRoleFunc == nil {
		panic("StoreMock.CreateRoleFunc: method is nil but Store.CreateRole was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Param parameter.CreateRoleParam
	}{
		Ctx:   ctx,
		Param: param,
	}
	mock.lockCreateRole.Lock()
	mock.calls.CreateRole = append(mock.calls.CreateRole, callInfo)
	mock.lockCreateRole.Unlock()
	return mock.CreateRoleFunc(ctx, param)
}

// CreateRoleCalls gets all the calls that were made to CreateRole.
// Check the length with:
//
//	len(mockedStore.CreateRoleCalls())
func (mock *StoreMock) CreateRoleCalls() []struct {
	Ctx   context.Context
	Param parameter.CreateRoleParam
} {
	var calls []struct {
		Ctx   context.Context
		Param parameter.CreateRoleParam
	}
	mock.lockCreateRole.RLock()
	calls = mock.calls.CreateRole
	mock.lockCreateRole.RUnlock()
	return calls
}

// CreateRoleWithSd calls CreateRoleWithSdFunc.
func (mock *StoreMock) CreateRoleWithSd(ctx context.Context, sd Sd, param parameter.CreateRoleParam) (entity.Role, error) {
	if mock.CreateRoleWithSdFunc == nil {
		panic("StoreMock.CreateRoleWithSdFunc: method is nil but Store.CreateRoleWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateRoleParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Param: param,
	}
	mock.lockCreateRoleWithSd.Lock()
	mock.calls.CreateRoleWithSd = append(mock.calls.CreateRoleWithSd, callInfo)
	mock.lockCreateRoleWithSd.Unlock()
	return mock.CreateRoleWithSdFunc(ctx, sd, param)
}

// CreateRoleWithSdCalls gets all the calls that were made to CreateRoleWithSd.
// Check the length with:
//
//	len(mockedStore.CreateRoleWithSdCalls())
func (mock *StoreMock) CreateRoleWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Param parameter.CreateRoleParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateRoleParam
	}
	mock.lockCreateRoleWithSd.RLock()
	calls = mock.calls.CreateRoleWithSd
	mock.lockCreateRoleWithSd.RUnlock()
	return calls
}

// CreateRoles calls CreateRolesFunc.
func (mock *StoreMock) CreateRoles(ctx context.Context, params []parameter.CreateRoleParam) (int64, error) {
	if mock.CreateRolesFunc == nil {
		panic("StoreMock.CreateRolesFunc: method is nil but Store.CreateRoles was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params []parameter.CreateRoleParam
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockCreateRoles.Lock()
	mock.calls.CreateRoles = append(mock.calls.CreateRoles, callInfo)
	mock.lockCreateRoles.Unlock()
	return mock.CreateRolesFunc(ctx, params)
}

// CreateRolesCalls gets all the calls that were made to CreateRoles.
// Check the length with:
//
//	len(mockedStore.CreateRolesCalls())
func (mock *StoreMock) CreateRolesCalls() []struct {
	Ctx    context.Context
	Params []parameter.CreateRoleParam
} {
	var calls []struct {
		Ctx    context.Context
		Params []parameter.CreateRoleParam
	}
	mock.lockCreateRoles.RLock()
	calls = mock.calls.CreateRoles
	mock.lockCreateRoles.RUnlock()
	return calls
}

// CreateRolesWithSd calls CreateRolesWithSdFunc.
func (mock *StoreMock) CreateRolesWithSd(ctx context.Context, sd Sd, params []parameter.CreateRoleParam) (int64, error) {
	if mock.CreateRolesWithSdFunc == nil {
		panic("StoreMock.CreateRolesWithSdFunc: method is nil but Store.CreateRolesWithSd was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateRoleParam
	}{
		Ctx:    ctx,
		Sd:     sd,
		Params: params,
	}
	mock.lockCreateRolesWithSd.Lock()
	mock.calls.CreateRolesWithSd = append(mock.calls.CreateRolesWithSd, callInfo)
	mock.lockCreateRolesWithSd.Unlock()
	return mock.CreateRolesWithSdFunc(ctx, sd, params)
}

// CreateRolesWithSdCalls gets all the calls that were made to CreateRolesWithSd.
// Check the length with:
//
//	len(mockedStore.CreateRolesWithSdCalls())
func (mock *StoreMock) CreateRolesWithSdCalls() []struct {
	Ctx    context.Context
	Sd     Sd
	Params []parameter.CreateRoleParam
} {
	var calls []struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateRoleParam
	}
	mock.lockCreateRolesWithSd.RLock()
	calls = mock.calls.CreateRolesWithSd
	mock.lockCreateRolesWithSd.RUnlock()
	return calls
}

// CreateStudent calls CreateStudentFunc.
func (mock *StoreMock) CreateStudent(ctx context.Context, param parameter.CreateStudentParam) (entity.Student, error) {
	if mock.CreateStudentFunc == nil {
		panic("StoreMock.CreateStudentFunc: method is nil but Store.CreateStudent was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Param parameter.CreateStudentParam
	}{
		Ctx:   ctx,
		Param: param,
	}
	mock.lockCreateStudent.Lock()
	mock.calls.CreateStudent = append(mock.calls.CreateStudent, callInfo)
	mock.lockCreateStudent.Unlock()
	return mock.CreateStudentFunc(ctx, param)
}

// CreateStudentCalls gets all the calls that were made to CreateStudent.
// Check the length with:
//
//	len(mockedStore.CreateStudentCalls())
func (mock *StoreMock) CreateStudentCalls() []struct {
	Ctx   context.Context
	Param parameter.CreateStudentParam
} {
	var calls []struct {
		Ctx   context.Context
		Param parameter.CreateStudentParam
	}
	mock.lockCreateStudent.RLock()
	calls = mock.calls.CreateStudent
	mock.lockCreateStudent.RUnlock()
	return calls
}

// CreateStudentWithSd calls CreateStudentWithSdFunc.
func (mock *StoreMock) CreateStudentWithSd(ctx context.Context, sd Sd, param parameter.CreateStudentParam) (entity.Student, error) {
	if mock.CreateStudentWithSdFunc == nil {
		panic("StoreMock.CreateStudentWithSdFunc: method is nil but Store.CreateStudentWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateStudentParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Param: param,
	}
	mock.lockCreateStudentWithSd.Lock()
	mock.calls.CreateStudentWithSd = append(mock.calls.CreateStudentWithSd, callInfo)
	mock.lockCreateStudentWithSd.Unlock()
	return mock.CreateStudentWithSdFunc(ctx, sd, param)
}

// CreateStudentWithSdCalls gets all the calls that were made to CreateStudentWithSd.
// Check the length with:
//
//	len(mockedStore.CreateStudentWithSdCalls())
func (mock *StoreMock) CreateStudentWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Param parameter.CreateStudentParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateStudentParam
	}
	mock.lockCreateStudentWithSd.RLock()
	calls = mock.calls.CreateStudentWithSd
	mock.lockCreateStudentWithSd.RUnlock()
	return calls
}

// CreateStudents calls CreateStudentsFunc.
func (mock *StoreMock) CreateStudents(ctx context.Context, params []parameter.CreateStudentParam) (int64, error) {
	if mock.CreateStudentsFunc == nil {
		panic("StoreMock.CreateStudentsFunc: method is nil but Store.CreateStudents was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params []parameter.CreateStudentParam
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockCreateStudents.Lock()
	mock.calls.CreateStudents = append(mock.calls.CreateStudents, callInfo)
	mock.lockCreateStudents.Unlock()
	return mock.CreateStudentsFunc(ctx, params)
}

// CreateStudentsCalls gets all the calls that were made to CreateStudents.
// Check the length with:
//
//	len(mockedStore.CreateStudentsCalls())
func (mock *StoreMock) CreateStudentsCalls() []struct {
	Ctx    context.Context
	Params []parameter.CreateStudentParam
} {
	var calls []struct {
		Ctx    context.Context
		Params []parameter.CreateStudentParam
	}
	mock.lockCreateStudents.RLock()
	calls = mock.calls.CreateStudents
	mock.lockCreateStudents.RUnlock()
	return calls
}

// CreateStudentsWithSd calls CreateStudentsWithSdFunc.
func (mock *StoreMock) CreateStudentsWithSd(ctx context.Context, sd Sd, params []parameter.CreateStudentParam) (int64, error) {
	if mock.CreateStudentsWithSdFunc == nil {
		panic("StoreMock.CreateStudentsWithSdFunc: method is nil but Store.CreateStudentsWithSd was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateStudentParam
	}{
		Ctx:    ctx,
		Sd:     sd,
		Params: params,
	}
	mock.lockCreateStudentsWithSd.Lock()
	mock.calls.CreateStudentsWithSd = append(mock.calls.CreateStudentsWithSd, callInfo)
	mock.lockCreateStudentsWithSd.Unlock()
	return mock.CreateStudentsWithSdFunc(ctx, sd, params)
}

// CreateStudentsWithSdCalls gets all the calls that were made to CreateStudentsWithSd.
// Check the length with:
//
//	len(mockedStore.CreateStudentsWithSdCalls())
func (mock *StoreMock) CreateStudentsWithSdCalls() []struct {
	Ctx    context.Context
	Sd     Sd
	Params []parameter.CreateStudentParam
} {
	var calls []struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateStudentParam
	}
	mock.lockCreateStudentsWithSd.RLock()
	calls = mock.calls.CreateStudentsWithSd
	mock.lockCreateStudentsWithSd.RUnlock()
	return calls
}

// DeleteAbsence calls DeleteAbsenceFunc.
func (mock *StoreMock) DeleteAbsence(ctx context.Context, absenceID uuid.UUID) (int64, error) {
	if mock.DeleteAbsenceFunc == nil {
		panic("StoreMock.DeleteAbsenceFunc: method is nil but Store.DeleteAbsence was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		AbsenceID uuid.UUID
	}{
		Ctx:       ctx,
		AbsenceID: absenceID,
	}
	mock.lockDeleteAbsence.Lock()
	mock.calls.DeleteAbsence = append(mock.calls.DeleteAbsence, callInfo)
	mock.lockDeleteAbsence.Unlock()
	return mock.DeleteAbsenceFunc(ctx, absenceID)
}

// DeleteAbsenceCalls gets all the calls that were made to DeleteAbsence.
// Check the length with:
//
//	len(mockedStore.DeleteAbsenceCalls())
func (mock *StoreMock) DeleteAbsenceCalls() []struct {
	Ctx       context.Context
	AbsenceID uuid.UUID
} {
	var calls []struct {
		Ctx       context.Context
		AbsenceID uuid.UUID
	}
	mock.lockDeleteAbsence.RLock()
	calls = mock.calls.DeleteAbsence
	mock.lockDeleteAbsence.RUnlock()
	return calls
}

// DeleteAbsenceWithSd calls DeleteAbsenceWithSdFunc.
func (mock *StoreMock) DeleteAbsenceWithSd(ctx context.Context, sd Sd, absenceID uuid.UUID) (int64, error) {
	if mock.DeleteAbsenceWithSdFunc == nil {
		panic("StoreMock.DeleteAbsenceWithSdFunc: method is nil but Store.DeleteAbsenceWithSd was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Sd        Sd
		AbsenceID uuid.UUID
	}{
		Ctx:       ctx,
		Sd:        sd,
		AbsenceID: absenceID,
	}
	mock.lockDeleteAbsenceWithSd.Lock()
	mock.calls.DeleteAbsenceWithSd = append(mock.calls.DeleteAbsenceWithSd, callInfo)
	mock.lockDeleteAbsenceWithSd.Unlock()
	return mock.DeleteAbsenceWithSdFunc(ctx, sd, absenceID)
}

// DeleteAbsenceWithSdCalls gets all the calls that were made to DeleteAbsenceWithSd.
// Check the length with:
//
//	len(mockedStore.DeleteAbsenceWithSdCalls())
func (mock *StoreMock) DeleteAbsenceWithSdCalls() []struct {
	Ctx       context.Context
	Sd        Sd
	AbsenceID uuid.UUID
} {
	var calls []struct {
		Ctx       context.Context
		Sd        Sd
		AbsenceID uuid.UUID
	}
	mock.lockDeleteAbsenceWithSd.RLock()
	calls = mock.calls.DeleteAbsenceWithSd
	mock.lockDeleteAbsenceWithSd.RUnlock()
	return calls
}

// DeleteAttachableItem calls DeleteAttachableItemFunc.
func (mock *StoreMock) DeleteAttachableItem(ctx context.Context, attachableItemID uuid.UUID) (int64, error) {
	if mock.DeleteAttachableItemFunc == nil {
		panic("StoreMock.DeleteAttachableItemFunc: method is nil but Store.DeleteAttachableItem was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		AttachableItemID uuid.UUID
	}{
		Ctx:              ctx,
		AttachableItemID: attachableItemID,
	}
	mock.lockDeleteAttachableItem.Lock()
	mock.calls.DeleteAttachableItem = append(mock.calls.DeleteAttachableItem, callInfo)
	mock.lockDeleteAttachableItem.Unlock()
	return mock.DeleteAttachableItemFunc(ctx, attachableItemID)
}

// DeleteAttachableItemCalls gets all the calls that were made to DeleteAttachableItem.
// Check the length with:
//
//	len(mockedStore.DeleteAttachableItemCalls())
func (mock *StoreMock) DeleteAttachableItemCalls() []struct {
	Ctx              context.Context
	AttachableItemID uuid.UUID
} {
	var calls []struct {
		Ctx              context.Context
		AttachableItemID uuid.UUID
	}
	mock.lockDeleteAttachableItem.RLock()
	calls = mock.calls.DeleteAttachableItem
	mock.lockDeleteAttachableItem.RUnlock()
	return calls
}

// DeleteAttachableItemWithSd calls DeleteAttachableItemWithSdFunc.
func (mock *StoreMock) DeleteAttachableItemWithSd(ctx context.Context, sd Sd, attachableItemID uuid.UUID) (int64, error) {
	if mock.DeleteAttachableItemWithSdFunc == nil {
		panic("StoreMock.DeleteAttachableItemWithSdFunc: method is nil but Store.DeleteAttachableItemWithSd was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		Sd               Sd
		AttachableItemID uuid.UUID
	}{
		Ctx:              ctx,
		Sd:               sd,
		AttachableItemID: attachableItemID,
	}
	mock.lockDeleteAttachableItemWithSd.Lock()
	mock.calls.DeleteAttachableItemWithSd = append(mock.calls.DeleteAttachableItemWithSd, callInfo)
	mock.lockDeleteAttachableItemWithSd.Unlock()
	return mock.DeleteAttachableItemWithSdFunc(ctx, sd, attachableItemID)
}

// DeleteAttachableItemWithSdCalls gets all the calls that were made to DeleteAttachableItemWithSd.
// Check the length with:
//
//	len(mockedStore.DeleteAttachableItemWithSdCalls())
func (mock *StoreMock) DeleteAttachableItemWithSdCalls() []struct {
	Ctx              context.Context
	Sd               Sd
	AttachableItemID uuid.UUID
} {
	var calls []struct {
		Ctx              context.Context
		Sd               Sd
		AttachableItemID uuid.UUID
	}
	mock.lockDeleteAttachableItemWithSd.RLock()
	calls = mock.calls.DeleteAttachableItemWithSd
	mock.lockDeleteAttachableItemWithSd.RUnlock()
	return calls
}

// DeleteAttendStatus calls DeleteAttendStatusFunc.
func (mock *StoreMock) DeleteAttendStatus(ctx context.Context, attendStatusID uuid.UUID) (int64, error) {
	if mock.DeleteAttendStatusFunc == nil {
		panic("StoreMock.DeleteAttendStatusFunc: method is nil but Store.DeleteAttendStatus was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		AttendStatusID uuid.UUID
	}{
		Ctx:            ctx,
		AttendStatusID: attendStatusID,
	}
	mock.lockDeleteAttendStatus.Lock()
	mock.calls.DeleteAttendStatus = append(mock.calls.DeleteAttendStatus, callInfo)
	mock.lockDeleteAttendStatus.Unlock()
	return mock.DeleteAttendStatusFunc(ctx, attendStatusID)
}

// DeleteAttendStatusCalls gets all the calls that were made to DeleteAttendStatus.
// Check the length with:
//
//	len(mockedStore.DeleteAttendStatusCalls())
func (mock *StoreMock) DeleteAttendStatusCalls() []struct {
	Ctx            context.Context
	AttendStatusID uuid.UUID
} {
	var calls []struct {
		Ctx            context.Context
		AttendStatusID uuid.UUID
	}
	mock.lockDeleteAttendStatus.RLock()
	calls = mock.calls.DeleteAttendStatus
	mock.lockDeleteAttendStatus.RUnlock()
	return calls
}

// DeleteAttendStatusByKey calls DeleteAttendStatusByKeyFunc.
func (mock *StoreMock) DeleteAttendStatusByKey(ctx context.Context, key string) (int64, error) {
	if mock.DeleteAttendStatusByKeyFunc == nil {
		panic("StoreMock.DeleteAttendStatusByKeyFunc: method is nil but Store.DeleteAttendStatusByKey was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockDeleteAttendStatusByKey.Lock()
	mock.calls.DeleteAttendStatusByKey = append(mock.calls.DeleteAttendStatusByKey, callInfo)
	mock.lockDeleteAttendStatusByKey.Unlock()
	return mock.DeleteAttendStatusByKeyFunc(ctx, key)
}

// DeleteAttendStatusByKeyCalls gets all the calls that were made to DeleteAttendStatusByKey.
// Check the length with:
//
//	len(mockedStore.DeleteAttendStatusByKeyCalls())
func (mock *StoreMock) DeleteAttendStatusByKeyCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockDeleteAttendStatusByKey.RLock()
	calls = mock.calls.DeleteAttendStatusByKey
	mock.lockDeleteAttendStatusByKey.RUnlock()
	return calls
}

// DeleteAttendStatusByKeyWithSd calls DeleteAttendStatusByKeyWithSdFunc.
func (mock *StoreMock) DeleteAttendStatusByKeyWithSd(ctx context.Context, sd Sd, key string) (int64, error) {
	if mock.DeleteAttendStatusByKeyWithSdFunc == nil {
		panic("StoreMock.DeleteAttendStatusByKeyWithSdFunc: method is nil but Store.DeleteAttendStatusByKeyWithSd was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}{
		Ctx: ctx,
		Sd:  sd,
		Key: key,
	}
	mock.lockDeleteAttendStatusByKeyWithSd.Lock()
	mock.calls.DeleteAttendStatusByKeyWithSd = append(mock.calls.DeleteAttendStatusByKeyWithSd, callInfo)
	mock.lockDeleteAttendStatusByKeyWithSd.Unlock()
	return mock.DeleteAttendStatusByKeyWithSdFunc(ctx, sd, key)
}

// DeleteAttendStatusByKeyWithSdCalls gets all the calls that were made to DeleteAttendStatusByKeyWithSd.
// Check the length with:
//
//	len(mockedStore.DeleteAttendStatusByKeyWithSdCalls())
func (mock *StoreMock) DeleteAttendStatusByKeyWithSdCalls() []struct {
	Ctx context.Context
	Sd  Sd
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}
	mock.lockDeleteAttendStatusByKeyWithSd.RLock()
	calls = mock.calls.DeleteAttendStatusByKeyWithSd
	mock.lockDeleteAttendStatusByKeyWithSd.RUnlock()
	return calls
}

// DeleteAttendStatusWithSd calls DeleteAttendStatusWithSdFunc.
func (mock *StoreMock) DeleteAttendStatusWithSd(ctx context.Context, sd Sd, attendStatusID uuid.UUID) (int64, error) {
	if mock.DeleteAttendStatusWithSdFunc == nil {
		panic("StoreMock.DeleteAttendStatusWithSdFunc: method is nil but Store.DeleteAttendStatusWithSd was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		Sd             Sd
		AttendStatusID uuid.UUID
	}{
		Ctx:            ctx,
		Sd:             sd,
		AttendStatusID: attendStatusID,
	}
	mock.lockDeleteAttendStatusWithSd.Lock()
	mock.calls.DeleteAttendStatusWithSd = append(mock.calls.DeleteAttendStatusWithSd, callInfo)
	mock.lockDeleteAttendStatusWithSd.Unlock()
	return mock.DeleteAttendStatusWithSdFunc(ctx, sd, attendStatusID)
}

// DeleteAttendStatusWithSdCalls gets all the calls that were made to DeleteAttendStatusWithSd.
// Check the length with:
//
//	len(mockedStore.DeleteAttendStatusWithSdCalls())
func (mock *StoreMock) DeleteAttendStatusWithSdCalls() []struct {
	Ctx            context.Context
	Sd             Sd
	AttendStatusID uuid.UUID
} {
	var calls []struct {
		Ctx            context.Context
		Sd             Sd
		AttendStatusID uuid.UUID
	}
	mock.lockDeleteAttendStatusWithSd.RLock()
	calls = mock.calls.DeleteAttendStatusWithSd
	mock.lockDeleteAttendStatusWithSd.RUnlock()
	return calls
}

// DeleteAttendanceType calls DeleteAttendanceTypeFunc.
func (mock *StoreMock) DeleteAttendanceType(ctx context.Context, attendanceTypeID uuid.UUID) (int64, error) {
	if mock.DeleteAttendanceTypeFunc == nil {
		panic("StoreMock.DeleteAttendanceTypeFunc: method is nil but Store.DeleteAttendanceType was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		AttendanceTypeID uuid.UUID
	}{
		Ctx:              ctx,
		AttendanceTypeID: attendanceTypeID,
	}
	mock.lockDeleteAttendanceType.Lock()
	mock.calls.DeleteAttendanceType = append(mock.calls.DeleteAttendanceType, callInfo)
	mock.lockDeleteAttendanceType.Unlock()
	return mock.DeleteAttendanceTypeFunc(ctx, attendanceTypeID)
}

// DeleteAttendanceTypeCalls gets all the calls that were made to DeleteAttendanceType.
// Check the length with:
//
//	len(mockedStore.DeleteAttendanceTypeCalls())
func (mock *StoreMock) DeleteAttendanceTypeCalls() []struct {
	Ctx              context.Context
	AttendanceTypeID uuid.UUID
} {
	var calls []struct {
		Ctx              context.Context
		AttendanceTypeID uuid.UUID
	}
	mock.lockDeleteAttendanceType.RLock()
	calls = mock.calls.DeleteAttendanceType
	mock.lockDeleteAttendanceType.RUnlock()
	return calls
}

// DeleteAttendanceTypeByKey calls DeleteAttendanceTypeByKeyFunc.
func (mock *StoreMock) DeleteAttendanceTypeByKey(ctx context.Context, key string) (int64, error) {
	if mock.DeleteAttendanceTypeByKeyFunc == nil {
		panic("StoreMock.DeleteAttendanceTypeByKeyFunc: method is nil but Store.DeleteAttendanceTypeByKey was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockDeleteAttendanceTypeByKey.Lock()
	mock.calls.DeleteAttendanceTypeByKey = append(mock.calls.DeleteAttendanceTypeByKey, callInfo)
	mock.lockDeleteAttendanceTypeByKey.Unlock()
	return mock.DeleteAttendanceTypeByKeyFunc(ctx, key)
}

// DeleteAttendanceTypeByKeyCalls gets all the calls that were made to DeleteAttendanceTypeByKey.
// Check the length with:
//
//	len(mockedStore.DeleteAttendanceTypeByKeyCalls())
func (mock *StoreMock) DeleteAttendanceTypeByKeyCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockDeleteAttendanceTypeByKey.RLock()
	calls = mock.calls.DeleteAttendanceTypeByKey
	mock.lockDeleteAttendanceTypeByKey.RUnlock()
	return calls
}

// DeleteAttendanceTypeByKeyWithSd calls DeleteAttendanceTypeByKeyWithSdFunc.
func (mock *StoreMock) DeleteAttendanceTypeByKeyWithSd(ctx context.Context, sd Sd, key string) (int64, error) {
	if mock.DeleteAttendanceTypeByKeyWithSdFunc == nil {
		panic("StoreMock.DeleteAttendanceTypeByKeyWithSdFunc: method is nil but Store.DeleteAttendanceTypeByKeyWithSd was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}{
		Ctx: ctx,
		Sd:  sd,
		Key: key,
	}
	mock.lockDeleteAttendanceTypeByKeyWithSd.Lock()
	mock.calls.DeleteAttendanceTypeByKeyWithSd = append(mock.calls.DeleteAttendanceTypeByKeyWithSd, callInfo)
	mock.lockDeleteAttendanceTypeByKeyWithSd.Unlock()
	return mock.DeleteAttendanceTypeByKeyWithSdFunc(ctx, sd, key)
}

// DeleteAttendanceTypeByKeyWithSdCalls gets all the calls that were made to DeleteAttendanceTypeByKeyWithSd.
// Check the length with:
//
//	len(mockedStore.DeleteAttendanceTypeByKeyWithSdCalls())
func (mock *StoreMock) DeleteAttendanceTypeByKeyWithSdCalls() []struct {
	Ctx context.Context
	Sd  Sd
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}
	mock.lockDeleteAttendanceTypeByKeyWithSd.RLock()
	calls = mock.calls.DeleteAttendanceTypeByKeyWithSd
	mock.lockDeleteAttendanceTypeByKeyWithSd.RUnlock()
	return calls
}

// DeleteAttendanceTypeWithSd calls DeleteAttendanceTypeWithSdFunc.
func (mock *StoreMock) DeleteAttendanceTypeWithSd(ctx context.Context, sd Sd, attendanceTypeID uuid.UUID) (int64, error) {
	if mock.DeleteAttendanceTypeWithSdFunc == nil {
		panic("StoreMock.DeleteAttendanceTypeWithSdFunc: method is nil but Store.DeleteAttendanceTypeWithSd was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		Sd               Sd
		AttendanceTypeID uuid.UUID
	}{
		Ctx:              ctx,
		Sd:               sd,
		AttendanceTypeID: attendanceTypeID,
	}
	mock.lockDeleteAttendanceTypeWithSd.Lock()
	mock.calls.DeleteAttendanceTypeWithSd = append(mock.calls.DeleteAttendanceTypeWithSd, callInfo)
	mock.lockDeleteAttendanceTypeWithSd.Unlock()
	return mock.DeleteAttendanceTypeWithSdFunc(ctx, sd, attendanceTypeID)
}

// DeleteAttendanceTypeWithSdCalls gets all the calls that were made to DeleteAttendanceTypeWithSd.
// Check the length with:
//
//	len(mockedStore.DeleteAttendanceTypeWithSdCalls())
func (mock *StoreMock) DeleteAttendanceTypeWithSdCalls() []struct {
	Ctx              context.Context
	Sd               Sd
	AttendanceTypeID uuid.UUID
} {
	var calls []struct {
		Ctx              context.Context
		Sd               Sd
		AttendanceTypeID uuid.UUID
	}
	mock.lockDeleteAttendanceTypeWithSd.RLock()
	calls = mock.calls.DeleteAttendanceTypeWithSd
	mock.lockDeleteAttendanceTypeWithSd.RUnlock()
	return calls
}

// DeleteChatRoom calls DeleteChatRoomFunc.
func (mock *StoreMock) DeleteChatRoom(ctx context.Context, chatRoomID uuid.UUID) (int64, error) {
	if mock.DeleteChatRoomFunc == nil {
		panic("StoreMock.DeleteChatRoomFunc: method is nil but Store.DeleteChatRoom was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ChatRoomID uuid.UUID
	}{
		Ctx:        ctx,
		ChatRoomID: chatRoomID,
	}
	mock.lockDeleteChatRoom.Lock()
	mock.calls.DeleteChatRoom = append(mock.calls.DeleteChatRoom, callInfo)
	mock.lockDeleteChatRoom.Unlock()
	return mock.DeleteChatRoomFunc(ctx, chatRoomID)
}

// DeleteChatRoomCalls gets all the calls that were made to DeleteChatRoom.
// Check the length with:
//
//	len(mockedStore.DeleteChatRoomCalls())
func (mock *StoreMock) DeleteChatRoomCalls() []struct {
	Ctx        context.Context
	ChatRoomID uuid.UUID
} {
	var calls []struct {
		Ctx        context.Context
		ChatRoomID uuid.UUID
	}
	mock.lockDeleteChatRoom.RLock()
	calls = mock.calls.DeleteChatRoom
	mock.lockDeleteChatRoom.RUnlock()
	return calls
}

// DeleteChatRoomAction calls DeleteChatRoomActionFunc.
func (mock *StoreMock) DeleteChatRoomAction(ctx context.Context, chatRoomActionID uuid.UUID) (int64, error) {
	if mock.DeleteChatRoomActionFunc == nil {
		panic("StoreMock.DeleteChatRoomActionFunc: method is nil but Store.DeleteChatRoomAction was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		ChatRoomActionID uuid.UUID
	}{
		Ctx:              ctx,
		ChatRoomActionID: chatRoomActionID,
	}
	mock.lockDeleteChatRoomAction.Lock()
	mock.calls.DeleteChatRoomAction = append(mock.calls.DeleteChatRoomAction, callInfo)
	mock.lockDeleteChatRoomAction.Unlock()
	return mock.DeleteChatRoomActionFunc(ctx, chatRoomActionID)
}

// DeleteChatRoomActionCalls gets all the calls that were made to DeleteChatRoomAction.
// Check the length with:
//
//	len(mockedStore.DeleteChatRoomActionCalls())
func (mock *StoreMock) DeleteChatRoomActionCalls() []struct {
	Ctx              context.Context
	ChatRoomActionID uuid.UUID
} {
	var calls []struct {
		Ctx              context.Context
		ChatRoomActionID uuid.UUID
	}
	mock.lockDeleteChatRoomAction.RLock()
	calls = mock.calls.DeleteChatRoomAction
	mock.lockDeleteChatRoomAction.RUnlock()
	return calls
}

// DeleteChatRoomActionType calls DeleteChatRoomActionTypeFunc.
func (mock *StoreMock) DeleteChatRoomActionType(ctx context.Context, recordTypeID uuid.UUID) (int64, error) {
	if mock.DeleteChatRoomActionTypeFunc == nil {
		panic("StoreMock.DeleteChatRoomActionTypeFunc: method is nil but Store.DeleteChatRoomActionType was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		RecordTypeID uuid.UUID
	}{
		Ctx:          ctx,
		RecordTypeID: recordTypeID,
	}
	mock.lockDeleteChatRoomActionType.Lock()
	mock.calls.DeleteChatRoomActionType = append(mock.calls.DeleteChatRoomActionType, callInfo)
	mock.lockDeleteChatRoomActionType.Unlock()
	return mock.DeleteChatRoomActionTypeFunc(ctx, recordTypeID)
}

// DeleteChatRoomActionTypeCalls gets all the calls that were made to DeleteChatRoomActionType.
// Check the length with:
//
//	len(mockedStore.DeleteChatRoomActionTypeCalls())
func (mock *StoreMock) DeleteChatRoomActionTypeCalls() []struct {
	Ctx          context.Context
	RecordTypeID uuid.UUID
} {
	var calls []struct {
		Ctx          context.Context
		RecordTypeID uuid.UUID
	}
	mock.lockDeleteChatRoomActionType.RLock()
	calls = mock.calls.DeleteChatRoomActionType
	mock.lockDeleteChatRoomActionType.RUnlock()
	return calls
}

// DeleteChatRoomActionTypeByKey calls DeleteChatRoomActionTypeByKeyFunc.
func (mock *StoreMock) DeleteChatRoomActionTypeByKey(ctx context.Context, key string) (int64, error) {
	if mock.DeleteChatRoomActionTypeByKeyFunc == nil {
		panic("StoreMock.DeleteChatRoomActionTypeByKeyFunc: method is nil but Store.DeleteChatRoomActionTypeByKey was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockDeleteChatRoomActionTypeByKey.Lock()
	mock.calls.DeleteChatRoomActionTypeByKey = append(mock.calls.DeleteChatRoomActionTypeByKey, callInfo)
	mock.lockDeleteChatRoomActionTypeByKey.Unlock()
	return mock.DeleteChatRoomActionTypeByKeyFunc(ctx, key)
}

// DeleteChatRoomActionTypeByKeyCalls gets all the calls that were made to DeleteChatRoomActionTypeByKey.
// Check the length with:
//
//	len(mockedStore.DeleteChatRoomActionTypeByKeyCalls())
func (mock *StoreMock) DeleteChatRoomActionTypeByKeyCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockDeleteChatRoomActionTypeByKey.RLock()
	calls = mock.calls.DeleteChatRoomActionTypeByKey
	mock.lockDeleteChatRoomActionTypeByKey.RUnlock()
	return calls
}

// DeleteChatRoomActionTypeByKeyWithSd calls DeleteChatRoomActionTypeByKeyWithSdFunc.
func (mock *StoreMock) DeleteChatRoomActionTypeByKeyWithSd(ctx context.Context, sd Sd, key string) (int64, error) {
	if mock.DeleteChatRoomActionTypeByKeyWithSdFunc == nil {
		panic("StoreMock.DeleteChatRoomActionTypeByKeyWithSdFunc: method is nil but Store.DeleteChatRoomActionTypeByKeyWithSd was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}{
		Ctx: ctx,
		Sd:  sd,
		Key: key,
	}
	mock.lockDeleteChatRoomActionTypeByKeyWithSd.Lock()
	mock.calls.DeleteChatRoomActionTypeByKeyWithSd = append(mock.calls.DeleteChatRoomActionTypeByKeyWithSd, callInfo)
	mock.lockDeleteChatRoomActionTypeByKeyWithSd.Unlock()
	return mock.DeleteChatRoomActionTypeByKeyWithSdFunc(ctx, sd, key)
}

// DeleteChatRoomActionTypeByKeyWithSdCalls gets all the calls that were made to DeleteChatRoomActionTypeByKeyWithSd.
// Check the length with:
//
//	len(mockedStore.DeleteChatRoomActionTypeByKeyWithSdCalls())
func (mock *StoreMock) DeleteChatRoomActionTypeByKeyWithSdCalls() []struct {
	Ctx context.Context
	Sd  Sd
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}
	mock.lockDeleteChatRoomActionTypeByKeyWithSd.RLock()
	calls = mock.calls.DeleteChatRoomActionTypeByKeyWithSd
	mock.lockDeleteChatRoomActionTypeByKeyWithSd.RUnlock()
	return calls
}

// DeleteChatRoomActionTypeWithSd calls DeleteChatRoomActionTypeWithSdFunc.
func (mock *StoreMock) DeleteChatRoomActionTypeWithSd(ctx context.Context, sd Sd, recordTypeID uuid.UUID) (int64, error) {
	if mock.DeleteChatRoomActionTypeWithSdFunc == nil {
		panic("StoreMock.DeleteChatRoomActionTypeWithSdFunc: method is nil but Store.DeleteChatRoomActionTypeWithSd was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		Sd           Sd
		RecordTypeID uuid.UUID
	}{
		Ctx:          ctx,
		Sd:           sd,
		RecordTypeID: recordTypeID,
	}
	mock.lockDeleteChatRoomActionTypeWithSd.Lock()
	mock.calls.DeleteChatRoomActionTypeWithSd = append(mock.calls.DeleteChatRoomActionTypeWithSd, callInfo)
	mock.lockDeleteChatRoomActionTypeWithSd.Unlock()
	return mock.DeleteChatRoomActionTypeWithSdFunc(ctx, sd, recordTypeID)
}

// DeleteChatRoomActionTypeWithSdCalls gets all the calls that were made to DeleteChatRoomActionTypeWithSd.
// Check the length with:
//
//	len(mockedStore.DeleteChatRoomActionTypeWithSdCalls())
func (mock *StoreMock) DeleteChatRoomActionTypeWithSdCalls() []struct {
	Ctx          context.Context
	Sd           Sd
	RecordTypeID uuid.UUID
} {
	var calls []struct {
		Ctx          context.Context
		Sd           Sd
		RecordTypeID uuid.UUID
	}
	mock.lockDeleteChatRoomActionTypeWithSd.RLock()
	calls = mock.calls.DeleteChatRoomActionTypeWithSd
	mock.lockDeleteChatRoomActionTypeWithSd.RUnlock()
	return calls
}

// DeleteChatRoomActionWithSd calls DeleteChatRoomActionWithSdFunc.
func (mock *StoreMock) DeleteChatRoomActionWithSd(ctx context.Context, sd Sd, chatRoomActionID uuid.UUID) (int64, error) {
	if mock.DeleteChatRoomActionWithSdFunc == nil {
		panic("StoreMock.DeleteChatRoomActionWithSdFunc: method is nil but Store.DeleteChatRoomActionWithSd was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		Sd               Sd
		ChatRoomActionID uuid.UUID
	}{
		Ctx:              ctx,
		Sd:               sd,
		ChatRoomActionID: chatRoomActionID,
	}
	mock.lockDeleteChatRoomActionWithSd.Lock()
	mock.calls.DeleteChatRoomActionWithSd = append(mock.calls.DeleteChatRoomActionWithSd, callInfo)
	mock.lockDeleteChatRoomActionWithSd.Unlock()
	return mock.DeleteChatRoomActionWithSdFunc(ctx, sd, chatRoomActionID)
}

// DeleteChatRoomActionWithSdCalls gets all the calls that were made to DeleteChatRoomActionWithSd.
// Check the length with:
//
//	len(mockedStore.DeleteChatRoomActionWithSdCalls())
func (mock *StoreMock) DeleteChatRoomActionWithSdCalls() []struct {
	Ctx              context.Context
	Sd               Sd
	ChatRoomActionID uuid.UUID
} {
	var calls []struct {
		Ctx              context.Context
		Sd               Sd
		ChatRoomActionID uuid.UUID
	}
	mock.lockDeleteChatRoomActionWithSd.RLock()
	calls = mock.calls.DeleteChatRoomActionWithSd
	mock.lockDeleteChatRoomActionWithSd.RUnlock()
	return calls
}

// DeleteChatRoomAddMemberAction calls DeleteChatRoomAddMemberActionFunc.
func (mock *StoreMock) DeleteChatRoomAddMemberAction(ctx context.Context, chatRoomAddMemberActionID uuid.UUID) (int64, error) {
	if mock.DeleteChatRoomAddMemberActionFunc == nil {
		panic("StoreMock.DeleteChatRoomAddMemberActionFunc: method is nil but Store.DeleteChatRoomAddMemberAction was just called")
	}
	callInfo := struct {
		Ctx                       context.Context
		ChatRoomAddMemberActionID uuid.UUID
	}{
		Ctx:                       ctx,
		ChatRoomAddMemberActionID: chatRoomAddMemberActionID,
	}
	mock.lockDeleteChatRoomAddMemberAction.Lock()
	mock.calls.DeleteChatRoomAddMemberAction = append(mock.calls.DeleteChatRoomAddMemberAction, callInfo)
	mock.lockDeleteChatRoomAddMemberAction.Unlock()
	return mock.DeleteChatRoomAddMemberActionFunc(ctx, chatRoomAddMemberActionID)
}

// DeleteChatRoomAddMemberActionCalls gets all the calls that were made to DeleteChatRoomAddMemberAction.
// Check the length with:
//
//	len(mockedStore.DeleteChatRoomAddMemberActionCalls())
func (mock *StoreMock) DeleteChatRoomAddMemberActionCalls() []struct {
	Ctx                       context.Context
	ChatRoomAddMemberActionID uuid.UUID
} {
	var calls []struct {
		Ctx                       context.Context
		ChatRoomAddMemberActionID uuid.UUID
	}
	mock.lockDeleteChatRoomAddMemberAction.RLock()
	calls = mock.calls.DeleteChatRoomAddMemberAction
	mock.lockDeleteChatRoomAddMemberAction.RUnlock()
	return calls
}

// DeleteChatRoomAddMemberActionWithSd calls DeleteChatRoomAddMemberActionWithSdFunc.
func (mock *StoreMock) DeleteChatRoomAddMemberActionWithSd(ctx context.Context, sd Sd, chatRoomAddMemberActionID uuid.UUID) (int64, error) {
	if mock.DeleteChatRoomAddMemberActionWithSdFunc == nil {
		panic("StoreMock.DeleteChatRoomAddMemberActionWithSdFunc: method is nil but Store.DeleteChatRoomAddMemberActionWithSd was just called")
	}
	callInfo := struct {
		Ctx                       context.Context
		Sd                        Sd
		ChatRoomAddMemberActionID uuid.UUID
	}{
		Ctx:                       ctx,
		Sd:                        sd,
		ChatRoomAddMemberActionID: chatRoomAddMemberActionID,
	}
	mock.lockDeleteChatRoomAddMemberActionWithSd.Lock()
	mock.calls.DeleteChatRoomAddMemberActionWithSd = append(mock.calls.DeleteChatRoomAddMemberActionWithSd, callInfo)
	mock.lockDeleteChatRoomAddMemberActionWithSd.Unlock()
	return mock.DeleteChatRoomAddMemberActionWithSdFunc(ctx, sd, chatRoomAddMemberActionID)
}

// DeleteChatRoomAddMemberActionWithSdCalls gets all the calls that were made to DeleteChatRoomAddMemberActionWithSd.
// Check the length with:
//
//	len(mockedStore.DeleteChatRoomAddMemberActionWithSdCalls())
func (mock *StoreMock) DeleteChatRoomAddMemberActionWithSdCalls() []struct {
	Ctx                       context.Context
	Sd                        Sd
	ChatRoomAddMemberActionID uuid.UUID
} {
	var calls []struct {
		Ctx                       context.Context
		Sd                        Sd
		ChatRoomAddMemberActionID uuid.UUID
	}
	mock.lockDeleteChatRoomAddMemberActionWithSd.RLock()
	calls = mock.calls.DeleteChatRoomAddMemberActionWithSd
	mock.lockDeleteChatRoomAddMemberActionWithSd.RUnlock()
	return calls
}

// DeleteChatRoomAddedMember calls DeleteChatRoomAddedMemberFunc.
func (mock *StoreMock) DeleteChatRoomAddedMember(ctx context.Context, chatRoomAddMemberActionID uuid.UUID, memberID uuid.UUID) (int64, error) {
	if mock.DeleteChatRoomAddedMemberFunc == nil {
		panic("StoreMock.DeleteChatRoomAddedMemberFunc: method is nil but Store.DeleteChatRoomAddedMember was just called")
	}
	callInfo := struct {
		Ctx                       context.Context
		ChatRoomAddMemberActionID uuid.UUID
		MemberID                  uuid.UUID
	}{
		Ctx:                       ctx,
		ChatRoomAddMemberActionID: chatRoomAddMemberActionID,
		MemberID:                  memberID,
	}
	mock.lockDeleteChatRoomAddedMember.Lock()
	mock.calls.DeleteChatRoomAddedMember = append(mock.calls.DeleteChatRoomAddedMember, callInfo)
	mock.lockDeleteChatRoomAddedMember.Unlock()
	return mock.DeleteChatRoomAddedMemberFunc(ctx, chatRoomAddMemberActionID, memberID)
}

// DeleteChatRoomAddedMemberCalls gets all the calls that were made to DeleteChatRoomAddedMember.
// Check the length with:
//
//	len(mockedStore.DeleteChatRoomAddedMemberCalls())
func (mock *StoreMock) DeleteChatRoomAddedMemberCalls() []struct {
	Ctx                       context.Context
	ChatRoomAddMemberActionID uuid.UUID
	MemberID                  uuid.UUID
} {
	var calls []struct {
		Ctx                       context.Context
		ChatRoomAddMemberActionID uuid.UUID
		MemberID                  uuid.UUID
	}
	mock.lockDeleteChatRoomAddedMember.RLock()
	calls = mock.calls.DeleteChatRoomAddedMember
	mock.lockDeleteChatRoomAddedMember.RUnlock()
	return calls
}

// DeleteChatRoomAddedMemberOnChatRoomAddMemberActionWithSd calls DeleteChatRoomAddedMemberOnChatRoomAddMemberActionWithSdFunc.
func (mock *StoreMock) DeleteChatRoomAddedMemberOnChatRoomAddMemberActionWithSd(ctx context.Context, sd Sd, chatRoomAddMemberActionID uuid.UUID) (int64, error) {
	if mock.DeleteChatRoomAddedMemberOnChatRoomAddMemberActionWithSdFunc == nil {
		panic("StoreMock.DeleteChatRoomAddedMemberOnChatRoomAddMemberActionWithSdFunc: method is nil but Store.DeleteChatRoomAddedMemberOnChatRoomAddMemberActionWithSd was just called")
	}
	callInfo := struct {
		Ctx                       context.Context
		Sd                        Sd
		ChatRoomAddMemberActionID uuid.UUID
	}{
		Ctx:                       ctx,
		Sd:                        sd,
		ChatRoomAddMemberActionID: chatRoomAddMemberActionID,
	}
	mock.lockDeleteChatRoomAddedMemberOnChatRoomAddMemberActionWithSd.Lock()
	mock.calls.DeleteChatRoomAddedMemberOnChatRoomAddMemberActionWithSd = append(mock.calls.DeleteChatRoomAddedMemberOnChatRoomAddMemberActionWithSd, callInfo)
	mock.lockDeleteChatRoomAddedMemberOnChatRoomAddMemberActionWithSd.Unlock()
	return mock.DeleteChatRoomAddedMemberOnChatRoomAddMemberActionWithSdFunc(ctx, sd, chatRoomAddMemberActionID)
}

// DeleteChatRoomAddedMemberOnChatRoomAddMemberActionWithSdCalls gets all the calls that were made to DeleteChatRoomAddedMemberOnChatRoomAddMemberActionWithSd.
// Check the length with:
//
//	len(mockedStore.DeleteChatRoomAddedMemberOnChatRoomAddMemberActionWithSdCalls())
func (mock *StoreMock) DeleteChatRoomAddedMemberOnChatRoomAddMemberActionWithSdCalls() []struct {
	Ctx                       context.Context
	Sd                        Sd
	ChatRoomAddMemberActionID uuid.UUID
} {
	var calls []struct {
		Ctx                       context.Context
		Sd                        Sd
		ChatRoomAddMemberActionID uuid.UUID
	}
	mock.lockDeleteChatRoomAddedMemberOnChatRoomAddMemberActionWithSd.RLock()
	calls = mock.calls.DeleteChatRoomAddedMemberOnChatRoomAddMemberActionWithSd
	mock.lockDeleteChatRoomAddedMemberOnChatRoomAddMemberActionWithSd.RUnlock()
	return calls
}

// DeleteChatRoomAddedMemberWithSd calls DeleteChatRoomAddedMemberWithSdFunc.
func (mock *StoreMock) DeleteChatRoomAddedMemberWithSd(ctx context.Context, sd Sd, chatRoomAddMemberActionID uuid.UUID, memberID uuid.UUID) (int64, error) {
	if mock.DeleteChatRoomAddedMemberWithSdFunc == nil {
		panic("StoreMock.DeleteChatRoomAddedMemberWithSdFunc: method is nil but Store.DeleteChatRoomAddedMemberWithSd was just called")
	}
	callInfo := struct {
		Ctx                       context.Context
		Sd                        Sd
		ChatRoomAddMemberActionID uuid.UUID
		MemberID                  uuid.UUID
	}{
		Ctx:                       ctx,
		Sd:                        sd,
		ChatRoomAddMemberActionID: chatRoomAddMemberActionID,
		MemberID:                  memberID,
	}
	mock.lockDeleteChatRoomAddedMemberWithSd.Lock()
	mock.calls.DeleteChatRoomAddedMemberWithSd = append(mock.calls.DeleteChatRoomAddedMemberWithSd, callInfo)
	mock.lockDeleteChatRoomAddedMemberWithSd.Unlock()
	return mock.DeleteChatRoomAddedMemberWithSdFunc(ctx, sd, chatRoomAddMemberActionID, memberID)
}

// DeleteChatRoomAddedMemberWithSdCalls gets all the calls that were made to DeleteChatRoomAddedMemberWithSd.
// Check the length with:
//
//	len(mockedStore.DeleteChatRoomAddedMemberWithSdCalls())
func (mock *StoreMock) DeleteChatRoomAddedMemberWithSdCalls() []struct {
	Ctx                       context.Context
	Sd                        Sd
	ChatRoomAddMemberActionID uuid.UUID
	MemberID                  uuid.UUID
} {
	var calls []struct {
		Ctx                       context.Context
		Sd                        Sd
		ChatRoomAddMemberActionID uuid.UUID
		MemberID                  uuid.UUID
	}
	mock.lockDeleteChatRoomAddedMemberWithSd.RLock()
	calls = mock.calls.DeleteChatRoomAddedMemberWithSd
	mock.lockDeleteChatRoomAddedMemberWithSd.RUnlock()
	return calls
}

// DeleteChatRoomAddedMembersOnChatRoomAddMemberAction calls DeleteChatRoomAddedMembersOnChatRoomAddMemberActionFunc.
func (mock *StoreMock) DeleteChatRoomAddedMembersOnChatRoomAddMemberAction(ctx context.Context, chatRoomAddMemberActionID uuid.UUID) (int64, error) {
	if mock.DeleteChatRoomAddedMembersOnChatRoomAddMemberActionFunc == nil {
		panic("StoreMock.DeleteChatRoomAddedMembersOnChatRoomAddMemberActionFunc: method is nil but Store.DeleteChatRoomAddedMembersOnChatRoomAddMemberAction was just called")
	}
	callInfo := struct {
		Ctx                       context.Context
		ChatRoomAddMemberActionID uuid.UUID
	}{
		Ctx:                       ctx,
		ChatRoomAddMemberActionID: chatRoomAddMemberActionID,
	}
	mock.lockDeleteChatRoomAddedMembersOnChatRoomAddMemberAction.Lock()
	mock.calls.DeleteChatRoomAddedMembersOnChatRoomAddMemberAction = append(mock.calls.DeleteChatRoomAddedMembersOnChatRoomAddMemberAction, callInfo)
	mock.lockDeleteChatRoomAddedMembersOnChatRoomAddMemberAction.Unlock()
	return mock.DeleteChatRoomAddedMembersOnChatRoomAddMemberActionFunc(ctx, chatRoomAddMemberActionID)
}

// DeleteChatRoomAddedMembersOnChatRoomAddMemberActionCalls gets all the calls that were made to DeleteChatRoomAddedMembersOnChatRoomAddMemberAction.
// Check the length with:
//
//	len(mockedStore.DeleteChatRoomAddedMembersOnChatRoomAddMemberActionCalls())
func (mock *StoreMock) DeleteChatRoomAddedMembersOnChatRoomAddMemberActionCalls() []struct {
	Ctx                       context.Context
	ChatRoomAddMemberActionID uuid.UUID
} {
	var calls []struct {
		Ctx                       context.Context
		ChatRoomAddMemberActionID uuid.UUID
	}
	mock.lockDeleteChatRoomAddedMembersOnChatRoomAddMemberAction.RLock()
	calls = mock.calls.DeleteChatRoomAddedMembersOnChatRoomAddMemberAction
	mock.lockDeleteChatRoomAddedMembersOnChatRoomAddMemberAction.RUnlock()
	return calls
}

// DeleteChatRoomAddedMembersOnChatRoomAddMemberActions calls DeleteChatRoomAddedMembersOnChatRoomAddMemberActionsFunc.
func (mock *StoreMock) DeleteChatRoomAddedMembersOnChatRoomAddMemberActions(ctx context.Context, chatRoomAddMemberActionIDs []uuid.UUID) (int64, error) {
	if mock.DeleteChatRoomAddedMembersOnChatRoomAddMemberActionsFunc == nil {
		panic("StoreMock.DeleteChatRoomAddedMembersOnChatRoomAddMemberActionsFunc: method is nil but Store.DeleteChatRoomAddedMembersOnChatRoomAddMemberActions was just called")
	}
	callInfo := struct {
		Ctx                        context.Context
		ChatRoomAddMemberActionIDs []uuid.UUID
	}{
		Ctx:                        ctx,
		ChatRoomAddMemberActionIDs: chatRoomAddMemberActionIDs,
	}
	mock.lockDeleteChatRoomAddedMembersOnChatRoomAddMemberActions.Lock()
	mock.calls.DeleteChatRoomAddedMembersOnChatRoomAddMemberActions = append(mock.calls.DeleteChatRoomAddedMembersOnChatRoomAddMemberActions, callInfo)
	mock.lockDeleteChatRoomAddedMembersOnChatRoomAddMemberActions.Unlock()
	return mock.DeleteChatRoomAddedMembersOnChatRoomAddMemberActionsFunc(ctx, chatRoomAddMemberActionIDs)
}

// DeleteChatRoomAddedMembersOnChatRoomAddMemberActionsCalls gets all the calls that were made to DeleteChatRoomAddedMembersOnChatRoomAddMemberActions.
// Check the length with:
//
//	len(mockedStore.DeleteChatRoomAddedMembersOnChatRoomAddMemberActionsCalls())
func (mock *StoreMock) DeleteChatRoomAddedMembersOnChatRoomAddMemberActionsCalls() []struct {
	Ctx                        context.Context
	ChatRoomAddMemberActionIDs []uuid.UUID
} {
	var calls []struct {
		Ctx                        context.Context
		ChatRoomAddMemberActionIDs []uuid.UUID
	}
	mock.lockDeleteChatRoomAddedMembersOnChatRoomAddMemberActions.RLock()
	calls = mock.calls.DeleteChatRoomAddedMembersOnChatRoomAddMemberActions
	mock.lockDeleteChatRoomAddedMembersOnChatRoomAddMemberActions.RUnlock()
	return calls
}

// DeleteChatRoomAddedMembersOnChatRoomAddMemberActionsWithSd calls DeleteChatRoomAddedMembersOnChatRoomAddMemberActionsWithSdFunc.
func (mock *StoreMock) DeleteChatRoomAddedMembersOnChatRoomAddMemberActionsWithSd(ctx context.Context, sd Sd, chatRoomAddMemberActionIDs []uuid.UUID) (int64, error) {
	if mock.DeleteChatRoomAddedMembersOnChatRoomAddMemberActionsWithSdFunc == nil {
		panic("StoreMock.DeleteChatRoomAddedMembersOnChatRoomAddMemberActionsWithSdFunc: method is nil but Store.DeleteChatRoomAddedMembersOnChatRoomAddMemberActionsWithSd was just called")
	}
	callInfo := struct {
		Ctx                        context.Context
		Sd                         Sd
		ChatRoomAddMemberActionIDs []uuid.UUID
	}{
		Ctx:                        ctx,
		Sd:                         sd,
		ChatRoomAddMemberActionIDs: chatRoomAddMemberActionIDs,
	}
	mock.lockDeleteChatRoomAddedMembersOnChatRoomAddMemberActionsWithSd.Lock()
	mock.calls.DeleteChatRoomAddedMembersOnChatRoomAddMemberActionsWithSd = append(mock.calls.DeleteChatRoomAddedMembersOnChatRoomAddMemberActionsWithSd, callInfo)
	mock.lockDeleteChatRoomAddedMembersOnChatRoomAddMemberActionsWithSd.Unlock()
	return mock.DeleteChatRoomAddedMembersOnChatRoomAddMemberActionsWithSdFunc(ctx, sd, chatRoomAddMemberActionIDs)
}

// DeleteChatRoomAddedMembersOnChatRoomAddMemberActionsWithSdCalls gets all the calls that were made to DeleteChatRoomAddedMembersOnChatRoomAddMemberActionsWithSd.
// Check the length with:
//
//	len(mockedStore.DeleteChatRoomAddedMembersOnChatRoomAddMemberActionsWithSdCalls())
func (mock *StoreMock) DeleteChatRoomAddedMembersOnChatRoomAddMemberActionsWithSdCalls() []struct {
	Ctx                        context.Context
	Sd                         Sd
	ChatRoomAddMemberActionIDs []uuid.UUID
} {
	var calls []struct {
		Ctx                        context.Context
		Sd                         Sd
		ChatRoomAddMemberActionIDs []uuid.UUID
	}
	mock.lockDeleteChatRoomAddedMembersOnChatRoomAddMemberActionsWithSd.RLock()
	calls = mock.calls.DeleteChatRoomAddedMembersOnChatRoomAddMemberActionsWithSd
	mock.lockDeleteChatRoomAddedMembersOnChatRoomAddMemberActionsWithSd.RUnlock()
	return calls
}

// DeleteChatRoomAddedMembersOnMember calls DeleteChatRoomAddedMembersOnMemberFunc.
func (mock *StoreMock) DeleteChatRoomAddedMembersOnMember(ctx context.Context, memberID uuid.UUID) (int64, error) {
	if mock.DeleteChatRoomAddedMembersOnMemberFunc == nil {
		panic("StoreMock.DeleteChatRoomAddedMembersOnMemberFunc: method is nil but Store.DeleteChatRoomAddedMembersOnMember was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		MemberID uuid.UUID
	}{
		Ctx:      ctx,
		MemberID: memberID,
	}
	mock.lockDeleteChatRoomAddedMembersOnMember.Lock()
	mock.calls.DeleteChatRoomAddedMembersOnMember = append(mock.calls.DeleteChatRoomAddedMembersOnMember, callInfo)
	mock.lockDeleteChatRoomAddedMembersOnMember.Unlock()
	return mock.DeleteChatRoomAddedMembersOnMemberFunc(ctx, memberID)
}

// DeleteChatRoomAddedMembersOnMemberCalls gets all the calls that were made to DeleteChatRoomAddedMembersOnMember.
// Check the length with:
//
//	len(mockedStore.DeleteChatRoomAddedMembersOnMemberCalls())
func (mock *StoreMock) DeleteChatRoomAddedMembersOnMemberCalls() []struct {
	Ctx      context.Context
	MemberID uuid.UUID
} {
	var calls []struct {
		Ctx      context.Context
		MemberID uuid.UUID
	}
	mock.lockDeleteChatRoomAddedMembersOnMember.RLock()
	calls = mock.calls.DeleteChatRoomAddedMembersOnMember
	mock.lockDeleteChatRoomAddedMembersOnMember.RUnlock()
	return calls
}

// DeleteChatRoomAddedMembersOnMemberWithSd calls DeleteChatRoomAddedMembersOnMemberWithSdFunc.
func (mock *StoreMock) DeleteChatRoomAddedMembersOnMemberWithSd(ctx context.Context, sd Sd, memberID uuid.UUID) (int64, error) {
	if mock.DeleteChatRoomAddedMembersOnMemberWithSdFunc == nil {
		panic("StoreMock.DeleteChatRoomAddedMembersOnMemberWithSdFunc: method is nil but Store.DeleteChatRoomAddedMembersOnMemberWithSd was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Sd       Sd
		MemberID uuid.UUID
	}{
		Ctx:      ctx,
		Sd:       sd,
		MemberID: memberID,
	}
	mock.lockDeleteChatRoomAddedMembersOnMemberWithSd.Lock()
	mock.calls.DeleteChatRoomAddedMembersOnMemberWithSd = append(mock.calls.DeleteChatRoomAddedMembersOnMemberWithSd, callInfo)
	mock.lockDeleteChatRoomAddedMembersOnMemberWithSd.Unlock()
	return mock.DeleteChatRoomAddedMembersOnMemberWithSdFunc(ctx, sd, memberID)
}

// DeleteChatRoomAddedMembersOnMemberWithSdCalls gets all the calls that were made to DeleteChatRoomAddedMembersOnMemberWithSd.
// Check the length with:
//
//	len(mockedStore.DeleteChatRoomAddedMembersOnMemberWithSdCalls())
func (mock *StoreMock) DeleteChatRoomAddedMembersOnMemberWithSdCalls() []struct {
	Ctx      context.Context
	Sd       Sd
	MemberID uuid.UUID
} {
	var calls []struct {
		Ctx      context.Context
		Sd       Sd
		MemberID uuid.UUID
	}
	mock.lockDeleteChatRoomAddedMembersOnMemberWithSd.RLock()
	calls = mock.calls.DeleteChatRoomAddedMembersOnMemberWithSd
	mock.lockDeleteChatRoomAddedMembersOnMemberWithSd.RUnlock()
	return calls
}

// DeleteChatRoomAddedMembersOnMembers calls DeleteChatRoomAddedMembersOnMembersFunc.
func (mock *StoreMock) DeleteChatRoomAddedMembersOnMembers(ctx context.Context, memberIDs []uuid.UUID) (int64, error) {
	if mock.DeleteChatRoomAddedMembersOnMembersFunc == nil {
		panic("StoreMock.DeleteChatRoomAddedMembersOnMembersFunc: method is nil but Store.DeleteChatRoomAddedMembersOnMembers was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		MemberIDs []uuid.UUID
	}{
		Ctx:       ctx,
		MemberIDs: memberIDs,
	}
	mock.lockDeleteChatRoomAddedMembersOnMembers.Lock()
	mock.calls.DeleteChatRoomAddedMembersOnMembers = append(mock.calls.DeleteChatRoomAddedMembersOnMembers, callInfo)
	mock.lockDeleteChatRoomAddedMembersOnMembers.Unlock()
	return mock.DeleteChatRoomAddedMembersOnMembersFunc(ctx, memberIDs)
}

// DeleteChatRoomAddedMembersOnMembersCalls gets all the calls that were made to DeleteChatRoomAddedMembersOnMembers.
// Check the length with:
//
//	len(mockedStore.DeleteChatRoomAddedMembersOnMembersCalls())
func (mock *StoreMock) DeleteChatRoomAddedMembersOnMembersCalls() []struct {
	Ctx       context.Context
	MemberIDs []uuid.UUID
} {
	var calls []struct {
		Ctx       context.Context
		MemberIDs []uuid.UUID
	}
	mock.lockDeleteChatRoomAddedMembersOnMembers.RLock()
	calls = mock.calls.DeleteChatRoomAddedMembersOnMembers
	mock.lockDeleteChatRoomAddedMembersOnMembers.RUnlock()
	return calls
}

// DeleteChatRoomAddedMembersOnMembersWithSd calls DeleteChatRoomAddedMembersOnMembersWithSdFunc.
func (mock *StoreMock) DeleteChatRoomAddedMembersOnMembersWithSd(ctx context.Context, sd Sd, memberIDs []uuid.UUID) (int64, error) {
	if mock.DeleteChatRoomAddedMembersOnMembersWithSdFunc == nil {
		panic("StoreMock.DeleteChatRoomAddedMembersOnMembersWithSdFunc: method is nil but Store.DeleteChatRoomAddedMembersOnMembersWithSd was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Sd        Sd
		MemberIDs []uuid.UUID
	}{
		Ctx:       ctx,
		Sd:        sd,
		MemberIDs: memberIDs,
	}
	mock.lockDeleteChatRoomAddedMembersOnMembersWithSd.Lock()
	mock.calls.DeleteChatRoomAddedMembersOnMembersWithSd = append(mock.calls.DeleteChatRoomAddedMembersOnMembersWithSd, callInfo)
	mock.lockDeleteChatRoomAddedMembersOnMembersWithSd.Unlock()
	return mock.DeleteChatRoomAddedMembersOnMembersWithSdFunc(ctx, sd, memberIDs)
}

// DeleteChatRoomAddedMembersOnMembersWithSdCalls gets all the calls that were made to DeleteChatRoomAddedMembersOnMembersWithSd.
// Check the length with:
//
//	len(mockedStore.DeleteChatRoomAddedMembersOnMembersWithSdCalls())
func (mock *StoreMock) DeleteChatRoomAddedMembersOnMembersWithSdCalls() []struct {
	Ctx       context.Context
	Sd        Sd
	MemberIDs []uuid.UUID
} {
	var calls []struct {
		Ctx       context.Context
		Sd        Sd
		MemberIDs []uuid.UUID
	}
	mock.lockDeleteChatRoomAddedMembersOnMembersWithSd.RLock()
	calls = mock.calls.DeleteChatRoomAddedMembersOnMembersWithSd
	mock.lockDeleteChatRoomAddedMembersOnMembersWithSd.RUnlock()
	return calls
}

// DeleteChatRoomCreateAction calls DeleteChatRoomCreateActionFunc.
func (mock *StoreMock) DeleteChatRoomCreateAction(ctx context.Context, chatRoomCreateActionID uuid.UUID) (int64, error) {
	if mock.DeleteChatRoomCreateActionFunc == nil {
		panic("StoreMock.DeleteChatRoomCreateActionFunc: method is nil but Store.DeleteChatRoomCreateAction was just called")
	}
	callInfo := struct {
		Ctx                    context.Context
		ChatRoomCreateActionID uuid.UUID
	}{
		Ctx:                    ctx,
		ChatRoomCreateActionID: chatRoomCreateActionID,
	}
	mock.lockDeleteChatRoomCreateAction.Lock()
	mock.calls.DeleteChatRoomCreateAction = append(mock.calls.DeleteChatRoomCreateAction, callInfo)
	mock.lockDeleteChatRoomCreateAction.Unlock()
	return mock.DeleteChatRoomCreateActionFunc(ctx, chatRoomCreateActionID)
}

// DeleteChatRoomCreateActionCalls gets all the calls that were made to DeleteChatRoomCreateAction.
// Check the length with:
//
//	len(mockedStore.DeleteChatRoomCreateActionCalls())
func (mock *StoreMock) DeleteChatRoomCreateActionCalls() []struct {
	Ctx                    context.Context
	ChatRoomCreateActionID uuid.UUID
} {
	var calls []struct {
		Ctx                    context.Context
		ChatRoomCreateActionID uuid.UUID
	}
	mock.lockDeleteChatRoomCreateAction.RLock()
	calls = mock.calls.DeleteChatRoomCreateAction
	mock.lockDeleteChatRoomCreateAction.RUnlock()
	return calls
}

// DeleteChatRoomCreateActionWithSd calls DeleteChatRoomCreateActionWithSdFunc.
func (mock *StoreMock) DeleteChatRoomCreateActionWithSd(ctx context.Context, sd Sd, chatRoomCreateActionID uuid.UUID) (int64, error) {
	if mock.DeleteChatRoomCreateActionWithSdFunc == nil {
		panic("StoreMock.DeleteChatRoomCreateActionWithSdFunc: method is nil but Store.DeleteChatRoomCreateActionWithSd was just called")
	}
	callInfo := struct {
		Ctx                    context.Context
		Sd                     Sd
		ChatRoomCreateActionID uuid.UUID
	}{
		Ctx:                    ctx,
		Sd:                     sd,
		ChatRoomCreateActionID: chatRoomCreateActionID,
	}
	mock.lockDeleteChatRoomCreateActionWithSd.Lock()
	mock.calls.DeleteChatRoomCreateActionWithSd = append(mock.calls.DeleteChatRoomCreateActionWithSd, callInfo)
	mock.lockDeleteChatRoomCreateActionWithSd.Unlock()
	return mock.DeleteChatRoomCreateActionWithSdFunc(ctx, sd, chatRoomCreateActionID)
}

// DeleteChatRoomCreateActionWithSdCalls gets all the calls that were made to DeleteChatRoomCreateActionWithSd.
// Check the length with:
//
//	len(mockedStore.DeleteChatRoomCreateActionWithSdCalls())
func (mock *StoreMock) DeleteChatRoomCreateActionWithSdCalls() []struct {
	Ctx                    context.Context
	Sd                     Sd
	ChatRoomCreateActionID uuid.UUID
} {
	var calls []struct {
		Ctx                    context.Context
		Sd                     Sd
		ChatRoomCreateActionID uuid.UUID
	}
	mock.lockDeleteChatRoomCreateActionWithSd.RLock()
	calls = mock.calls.DeleteChatRoomCreateActionWithSd
	mock.lockDeleteChatRoomCreateActionWithSd.RUnlock()
	return calls
}

// DeleteChatRoomDeleteMessageAction calls DeleteChatRoomDeleteMessageActionFunc.
func (mock *StoreMock) DeleteChatRoomDeleteMessageAction(ctx context.Context, chatRoomDeleteMessageActionID uuid.UUID) (int64, error) {
	if mock.DeleteChatRoomDeleteMessageActionFunc == nil {
		panic("StoreMock.DeleteChatRoomDeleteMessageActionFunc: method is nil but Store.DeleteChatRoomDeleteMessageAction was just called")
	}
	callInfo := struct {
		Ctx                           context.Context
		ChatRoomDeleteMessageActionID uuid.UUID
	}{
		Ctx:                           ctx,
		ChatRoomDeleteMessageActionID: chatRoomDeleteMessageActionID,
	}
	mock.lockDeleteChatRoomDeleteMessageAction.Lock()
	mock.calls.DeleteChatRoomDeleteMessageAction = append(mock.calls.DeleteChatRoomDeleteMessageAction, callInfo)
	mock.lockDeleteChatRoomDeleteMessageAction.Unlock()
	return mock.DeleteChatRoomDeleteMessageActionFunc(ctx, chatRoomDeleteMessageActionID)
}

// DeleteChatRoomDeleteMessageActionCalls gets all the calls that were made to DeleteChatRoomDeleteMessageAction.
// Check the length with:
//
//	len(mockedStore.DeleteChatRoomDeleteMessageActionCalls())
func (mock *StoreMock) DeleteChatRoomDeleteMessageActionCalls() []struct {
	Ctx                           context.Context
	ChatRoomDeleteMessageActionID uuid.UUID
} {
	var calls []struct {
		Ctx                           context.Context
		ChatRoomDeleteMessageActionID uuid.UUID
	}
	mock.lockDeleteChatRoomDeleteMessageAction.RLock()
	calls = mock.calls.DeleteChatRoomDeleteMessageAction
	mock.lockDeleteChatRoomDeleteMessageAction.RUnlock()
	return calls
}

// DeleteChatRoomDeleteMessageActionWithSd calls DeleteChatRoomDeleteMessageActionWithSdFunc.
func (mock *StoreMock) DeleteChatRoomDeleteMessageActionWithSd(ctx context.Context, sd Sd, chatRoomDeleteMessageActionID uuid.UUID) (int64, error) {
	if mock.DeleteChatRoomDeleteMessageActionWithSdFunc == nil {
		panic("StoreMock.DeleteChatRoomDeleteMessageActionWithSdFunc: method is nil but Store.DeleteChatRoomDeleteMessageActionWithSd was just called")
	}
	callInfo := struct {
		Ctx                           context.Context
		Sd                            Sd
		ChatRoomDeleteMessageActionID uuid.UUID
	}{
		Ctx:                           ctx,
		Sd:                            sd,
		ChatRoomDeleteMessageActionID: chatRoomDeleteMessageActionID,
	}
	mock.lockDeleteChatRoomDeleteMessageActionWithSd.Lock()
	mock.calls.DeleteChatRoomDeleteMessageActionWithSd = append(mock.calls.DeleteChatRoomDeleteMessageActionWithSd, callInfo)
	mock.lockDeleteChatRoomDeleteMessageActionWithSd.Unlock()
	return mock.DeleteChatRoomDeleteMessageActionWithSdFunc(ctx, sd, chatRoomDeleteMessageActionID)
}

// DeleteChatRoomDeleteMessageActionWithSdCalls gets all the calls that were made to DeleteChatRoomDeleteMessageActionWithSd.
// Check the length with:
//
//	len(mockedStore.DeleteChatRoomDeleteMessageActionWithSdCalls())
func (mock *StoreMock) DeleteChatRoomDeleteMessageActionWithSdCalls() []struct {
	Ctx                           context.Context
	Sd                            Sd
	ChatRoomDeleteMessageActionID uuid.UUID
} {
	var calls []struct {
		Ctx                           context.Context
		Sd                            Sd
		ChatRoomDeleteMessageActionID uuid.UUID
	}
	mock.lockDeleteChatRoomDeleteMessageActionWithSd.RLock()
	calls = mock.calls.DeleteChatRoomDeleteMessageActionWithSd
	mock.lockDeleteChatRoomDeleteMessageActionWithSd.RUnlock()
	return calls
}

// DeleteChatRoomRemoveMemberAction calls DeleteChatRoomRemoveMemberActionFunc.
func (mock *StoreMock) DeleteChatRoomRemoveMemberAction(ctx context.Context, chatRoomRemoveMemberActionID uuid.UUID) (int64, error) {
	if mock.DeleteChatRoomRemoveMemberActionFunc == nil {
		panic("StoreMock.DeleteChatRoomRemoveMemberActionFunc: method is nil but Store.DeleteChatRoomRemoveMemberAction was just called")
	}
	callInfo := struct {
		Ctx                          context.Context
		ChatRoomRemoveMemberActionID uuid.UUID
	}{
		Ctx:                          ctx,
		ChatRoomRemoveMemberActionID: chatRoomRemoveMemberActionID,
	}
	mock.lockDeleteChatRoomRemoveMemberAction.Lock()
	mock.calls.DeleteChatRoomRemoveMemberAction = append(mock.calls.DeleteChatRoomRemoveMemberAction, callInfo)
	mock.lockDeleteChatRoomRemoveMemberAction.Unlock()
	return mock.DeleteChatRoomRemoveMemberActionFunc(ctx, chatRoomRemoveMemberActionID)
}

// DeleteChatRoomRemoveMemberActionCalls gets all the calls that were made to DeleteChatRoomRemoveMemberAction.
// Check the length with:
//
//	len(mockedStore.DeleteChatRoomRemoveMemberActionCalls())
func (mock *StoreMock) DeleteChatRoomRemoveMemberActionCalls() []struct {
	Ctx                          context.Context
	ChatRoomRemoveMemberActionID uuid.UUID
} {
	var calls []struct {
		Ctx                          context.Context
		ChatRoomRemoveMemberActionID uuid.UUID
	}
	mock.lockDeleteChatRoomRemoveMemberAction.RLock()
	calls = mock.calls.DeleteChatRoomRemoveMemberAction
	mock.lockDeleteChatRoomRemoveMemberAction.RUnlock()
	return calls
}

// DeleteChatRoomRemoveMemberActionWithSd calls DeleteChatRoomRemoveMemberActionWithSdFunc.
func (mock *StoreMock) DeleteChatRoomRemoveMemberActionWithSd(ctx context.Context, sd Sd, chatRoomRemoveMemberActionID uuid.UUID) (int64, error) {
	if mock.DeleteChatRoomRemoveMemberActionWithSdFunc == nil {
		panic("StoreMock.DeleteChatRoomRemoveMemberActionWithSdFunc: method is nil but Store.DeleteChatRoomRemoveMemberActionWithSd was just called")
	}
	callInfo := struct {
		Ctx                          context.Context
		Sd                           Sd
		ChatRoomRemoveMemberActionID uuid.UUID
	}{
		Ctx:                          ctx,
		Sd:                           sd,
		ChatRoomRemoveMemberActionID: chatRoomRemoveMemberActionID,
	}
	mock.lockDeleteChatRoomRemoveMemberActionWithSd.Lock()
	mock.calls.DeleteChatRoomRemoveMemberActionWithSd = append(mock.calls.DeleteChatRoomRemoveMemberActionWithSd, callInfo)
	mock.lockDeleteChatRoomRemoveMemberActionWithSd.Unlock()
	return mock.DeleteChatRoomRemoveMemberActionWithSdFunc(ctx, sd, chatRoomRemoveMemberActionID)
}

// DeleteChatRoomRemoveMemberActionWithSdCalls gets all the calls that were made to DeleteChatRoomRemoveMemberActionWithSd.
// Check the length with:
//
//	len(mockedStore.DeleteChatRoomRemoveMemberActionWithSdCalls())
func (mock *StoreMock) DeleteChatRoomRemoveMemberActionWithSdCalls() []struct {
	Ctx                          context.Context
	Sd                           Sd
	ChatRoomRemoveMemberActionID uuid.UUID
} {
	var calls []struct {
		Ctx                          context.Context
		Sd                           Sd
		ChatRoomRemoveMemberActionID uuid.UUID
	}
	mock.lockDeleteChatRoomRemoveMemberActionWithSd.RLock()
	calls = mock.calls.DeleteChatRoomRemoveMemberActionWithSd
	mock.lockDeleteChatRoomRemoveMemberActionWithSd.RUnlock()
	return calls
}

// DeleteChatRoomRemovedMember calls DeleteChatRoomRemovedMemberFunc.
func (mock *StoreMock) DeleteChatRoomRemovedMember(ctx context.Context, chatRoomRemoveMemberActionID uuid.UUID, memberID uuid.UUID) (int64, error) {
	if mock.DeleteChatRoomRemovedMemberFunc == nil {
		panic("StoreMock.DeleteChatRoomRemovedMemberFunc: method is nil but Store.DeleteChatRoomRemovedMember was just called")
	}
	callInfo := struct {
		Ctx                          context.Context
		ChatRoomRemoveMemberActionID uuid.UUID
		MemberID                     uuid.UUID
	}{
		Ctx:                          ctx,
		ChatRoomRemoveMemberActionID: chatRoomRemoveMemberActionID,
		MemberID:                     memberID,
	}
	mock.lockDeleteChatRoomRemovedMember.Lock()
	mock.calls.DeleteChatRoomRemovedMember = append(mock.calls.DeleteChatRoomRemovedMember, callInfo)
	mock.lockDeleteChatRoomRemovedMember.Unlock()
	return mock.DeleteChatRoomRemovedMemberFunc(ctx, chatRoomRemoveMemberActionID, memberID)
}

// DeleteChatRoomRemovedMemberCalls gets all the calls that were made to DeleteChatRoomRemovedMember.
// Check the length with:
//
//	len(mockedStore.DeleteChatRoomRemovedMemberCalls())
func (mock *StoreMock) DeleteChatRoomRemovedMemberCalls() []struct {
	Ctx                          context.Context
	ChatRoomRemoveMemberActionID uuid.UUID
	MemberID                     uuid.UUID
} {
	var calls []struct {
		Ctx                          context.Context
		ChatRoomRemoveMemberActionID uuid.UUID
		MemberID                     uuid.UUID
	}
	mock.lockDeleteChatRoomRemovedMember.RLock()
	calls = mock.calls.DeleteChatRoomRemovedMember
	mock.lockDeleteChatRoomRemovedMember.RUnlock()
	return calls
}

// DeleteChatRoomRemovedMemberOnChatRoomRemoveMemberActionWithSd calls DeleteChatRoomRemovedMemberOnChatRoomRemoveMemberActionWithSdFunc.
func (mock *StoreMock) DeleteChatRoomRemovedMemberOnChatRoomRemoveMemberActionWithSd(ctx context.Context, sd Sd, chatRoomRemoveMemberActionID uuid.UUID) (int64, error) {
	if mock.DeleteChatRoomRemovedMemberOnChatRoomRemoveMemberActionWithSdFunc == nil {
		panic("StoreMock.DeleteChatRoomRemovedMemberOnChatRoomRemoveMemberActionWithSdFunc: method is nil but Store.DeleteChatRoomRemovedMemberOnChatRoomRemoveMemberActionWithSd was just called")
	}
	callInfo := struct {
		Ctx                          context.Context
		Sd                           Sd
		ChatRoomRemoveMemberActionID uuid.UUID
	}{
		Ctx:                          ctx,
		Sd:                           sd,
		ChatRoomRemoveMemberActionID: chatRoomRemoveMemberActionID,
	}
	mock.lockDeleteChatRoomRemovedMemberOnChatRoomRemoveMemberActionWithSd.Lock()
	mock.calls.DeleteChatRoomRemovedMemberOnChatRoomRemoveMemberActionWithSd = append(mock.calls.DeleteChatRoomRemovedMemberOnChatRoomRemoveMemberActionWithSd, callInfo)
	mock.lockDeleteChatRoomRemovedMemberOnChatRoomRemoveMemberActionWithSd.Unlock()
	return mock.DeleteChatRoomRemovedMemberOnChatRoomRemoveMemberActionWithSdFunc(ctx, sd, chatRoomRemoveMemberActionID)
}

// DeleteChatRoomRemovedMemberOnChatRoomRemoveMemberActionWithSdCalls gets all the calls that were made to DeleteChatRoomRemovedMemberOnChatRoomRemoveMemberActionWithSd.
// Check the length with:
//
//	len(mockedStore.DeleteChatRoomRemovedMemberOnChatRoomRemoveMemberActionWithSdCalls())
func (mock *StoreMock) DeleteChatRoomRemovedMemberOnChatRoomRemoveMemberActionWithSdCalls() []struct {
	Ctx                          context.Context
	Sd                           Sd
	ChatRoomRemoveMemberActionID uuid.UUID
} {
	var calls []struct {
		Ctx                          context.Context
		Sd                           Sd
		ChatRoomRemoveMemberActionID uuid.UUID
	}
	mock.lockDeleteChatRoomRemovedMemberOnChatRoomRemoveMemberActionWithSd.RLock()
	calls = mock.calls.DeleteChatRoomRemovedMemberOnChatRoomRemoveMemberActionWithSd
	mock.lockDeleteChatRoomRemovedMemberOnChatRoomRemoveMemberActionWithSd.RUnlock()
	return calls
}

// DeleteChatRoomRemovedMemberWithSd calls DeleteChatRoomRemovedMemberWithSdFunc.
func (mock *StoreMock) DeleteChatRoomRemovedMemberWithSd(ctx context.Context, sd Sd, chatRoomRemoveMemberActionID uuid.UUID, memberID uuid.UUID) (int64, error) {
	if mock.DeleteChatRoomRemovedMemberWithSdFunc == nil {
		panic("StoreMock.DeleteChatRoomRemovedMemberWithSdFunc: method is nil but Store.DeleteChatRoomRemovedMemberWithSd was just called")
	}
	callInfo := struct {
		Ctx                          context.Context
		Sd                           Sd
		ChatRoomRemoveMemberActionID uuid.UUID
		MemberID                     uuid.UUID
	}{
		Ctx:                          ctx,
		Sd:                           sd,
		ChatRoomRemoveMemberActionID: chatRoomRemoveMemberActionID,
		MemberID:                     memberID,
	}
	mock.lockDeleteChatRoomRemovedMemberWithSd.Lock()
	mock.calls.DeleteChatRoomRemovedMemberWithSd = append(mock.calls.DeleteChatRoomRemovedMemberWithSd, callInfo)
	mock.lockDeleteChatRoomRemovedMemberWithSd.Unlock()
	return mock.DeleteChatRoomRemovedMemberWithSdFunc(ctx, sd, chatRoomRemoveMemberActionID, memberID)
}

// DeleteChatRoomRemovedMemberWithSdCalls gets all the calls that were made to DeleteChatRoomRemovedMemberWithSd.
// Check the length with:
//
//	len(mockedStore.DeleteChatRoomRemovedMemberWithSdCalls())
func (mock *StoreMock) DeleteChatRoomRemovedMemberWithSdCalls() []struct {
	Ctx                          context.Context
	Sd                           Sd
	ChatRoomRemoveMemberActionID uuid.UUID
	MemberID                     uuid.UUID
} {
	var calls []struct {
		Ctx                          context.Context
		Sd                           Sd
		ChatRoomRemoveMemberActionID uuid.UUID
		MemberID                     uuid.UUID
	}
	mock.lockDeleteChatRoomRemovedMemberWithSd.RLock()
	calls = mock.calls.DeleteChatRoomRemovedMemberWithSd
	mock.lockDeleteChatRoomRemovedMemberWithSd.RUnlock()
	return calls
}

// DeleteChatRoomRemovedMembersOnChatRoomRemoveMemberAction calls DeleteChatRoomRemovedMembersOnChatRoomRemoveMemberActionFunc.
func (mock *StoreMock) DeleteChatRoomRemovedMembersOnChatRoomRemoveMemberAction(ctx context.Context, chatRoomRemoveMemberActionID uuid.UUID) (int64, error) {
	if mock.DeleteChatRoomRemovedMembersOnChatRoomRemoveMemberActionFunc == nil {
		panic("StoreMock.DeleteChatRoomRemovedMembersOnChatRoomRemoveMemberActionFunc: method is nil but Store.DeleteChatRoomRemovedMembersOnChatRoomRemoveMemberAction was just called")
	}
	callInfo := struct {
		Ctx                          context.Context
		ChatRoomRemoveMemberActionID uuid.UUID
	}{
		Ctx:                          ctx,
		ChatRoomRemoveMemberActionID: chatRoomRemoveMemberActionID,
	}
	mock.lockDeleteChatRoomRemovedMembersOnChatRoomRemoveMemberAction.Lock()
	mock.calls.DeleteChatRoomRemovedMembersOnChatRoomRemoveMemberAction = append(mock.calls.DeleteChatRoomRemovedMembersOnChatRoomRemoveMemberAction, callInfo)
	mock.lockDeleteChatRoomRemovedMembersOnChatRoomRemoveMemberAction.Unlock()
	return mock.DeleteChatRoomRemovedMembersOnChatRoomRemoveMemberActionFunc(ctx, chatRoomRemoveMemberActionID)
}

// DeleteChatRoomRemovedMembersOnChatRoomRemoveMemberActionCalls gets all the calls that were made to DeleteChatRoomRemovedMembersOnChatRoomRemoveMemberAction.
// Check the length with:
//
//	len(mockedStore.DeleteChatRoomRemovedMembersOnChatRoomRemoveMemberActionCalls())
func (mock *StoreMock) DeleteChatRoomRemovedMembersOnChatRoomRemoveMemberActionCalls() []struct {
	Ctx                          context.Context
	ChatRoomRemoveMemberActionID uuid.UUID
} {
	var calls []struct {
		Ctx                          context.Context
		ChatRoomRemoveMemberActionID uuid.UUID
	}
	mock.lockDeleteChatRoomRemovedMembersOnChatRoomRemoveMemberAction.RLock()
	calls = mock.calls.DeleteChatRoomRemovedMembersOnChatRoomRemoveMemberAction
	mock.lockDeleteChatRoomRemovedMembersOnChatRoomRemoveMemberAction.RUnlock()
	return calls
}

// DeleteChatRoomRemovedMembersOnChatRoomRemoveMemberActions calls DeleteChatRoomRemovedMembersOnChatRoomRemoveMemberActionsFunc.
func (mock *StoreMock) DeleteChatRoomRemovedMembersOnChatRoomRemoveMemberActions(ctx context.Context, chatRoomRemoveMemberActionIDs []uuid.UUID) (int64, error) {
	if mock.DeleteChatRoomRemovedMembersOnChatRoomRemoveMemberActionsFunc == nil {
		panic("StoreMock.DeleteChatRoomRemovedMembersOnChatRoomRemoveMemberActionsFunc: method is nil but Store.DeleteChatRoomRemovedMembersOnChatRoomRemoveMemberActions was just called")
	}
	callInfo := struct {
		Ctx                           context.Context
		ChatRoomRemoveMemberActionIDs []uuid.UUID
	}{
		Ctx:                           ctx,
		ChatRoomRemoveMemberActionIDs: chatRoomRemoveMemberActionIDs,
	}
	mock.lockDeleteChatRoomRemovedMembersOnChatRoomRemoveMemberActions.Lock()
	mock.calls.DeleteChatRoomRemovedMembersOnChatRoomRemoveMemberActions = append(mock.calls.DeleteChatRoomRemovedMembersOnChatRoomRemoveMemberActions, callInfo)
	mock.lockDeleteChatRoomRemovedMembersOnChatRoomRemoveMemberActions.Unlock()
	return mock.DeleteChatRoomRemovedMembersOnChatRoomRemoveMemberActionsFunc(ctx, chatRoomRemoveMemberActionIDs)
}

// DeleteChatRoomRemovedMembersOnChatRoomRemoveMemberActionsCalls gets all the calls that were made to DeleteChatRoomRemovedMembersOnChatRoomRemoveMemberActions.
// Check the length with:
//
//	len(mockedStore.DeleteChatRoomRemovedMembersOnChatRoomRemoveMemberActionsCalls())
func (mock *StoreMock) DeleteChatRoomRemovedMembersOnChatRoomRemoveMemberActionsCalls() []struct {
	Ctx                           context.Context
	ChatRoomRemoveMemberActionIDs []uuid.UUID
} {
	var calls []struct {
		Ctx                           context.Context
		ChatRoomRemoveMemberActionIDs []uuid.UUID
	}
	mock.lockDeleteChatRoomRemovedMembersOnChatRoomRemoveMemberActions.RLock()
	calls = mock.calls.DeleteChatRoomRemovedMembersOnChatRoomRemoveMemberActions
	mock.lockDeleteChatRoomRemovedMembersOnChatRoomRemoveMemberActions.RUnlock()
	return calls
}

// DeleteChatRoomRemovedMembersOnChatRoomRemoveMemberActionsWithSd calls DeleteChatRoomRemovedMembersOnChatRoomRemoveMemberActionsWithSdFunc.
func (mock *StoreMock) DeleteChatRoomRemovedMembersOnChatRoomRemoveMemberActionsWithSd(ctx context.Context, sd Sd, chatRoomRemoveMemberActionIDs []uuid.UUID) (int64, error) {
	if mock.DeleteChatRoomRemovedMembersOnChatRoomRemoveMemberActionsWithSdFunc == nil {
		panic("StoreMock.DeleteChatRoomRemovedMembersOnChatRoomRemoveMemberActionsWithSdFunc: method is nil but Store.DeleteChatRoomRemovedMembersOnChatRoomRemoveMemberActionsWithSd was just called")
	}
	callInfo := struct {
		Ctx                           context.Context
		Sd                            Sd
		ChatRoomRemoveMemberActionIDs []uuid.UUID
	}{
		Ctx:                           ctx,
		Sd:                            sd,
		ChatRoomRemoveMemberActionIDs: chatRoomRemoveMemberActionIDs,
	}
	mock.lockDeleteChatRoomRemovedMembersOnChatRoomRemoveMemberActionsWithSd.Lock()
	mock.calls.DeleteChatRoomRemovedMembersOnChatRoomRemoveMemberActionsWithSd = append(mock.calls.DeleteChatRoomRemovedMembersOnChatRoomRemoveMemberActionsWithSd, callInfo)
	mock.lockDeleteChatRoomRemovedMembersOnChatRoomRemoveMemberActionsWithSd.Unlock()
	return mock.DeleteChatRoomRemovedMembersOnChatRoomRemoveMemberActionsWithSdFunc(ctx, sd, chatRoomRemoveMemberActionIDs)
}

// DeleteChatRoomRemovedMembersOnChatRoomRemoveMemberActionsWithSdCalls gets all the calls that were made to DeleteChatRoomRemovedMembersOnChatRoomRemoveMemberActionsWithSd.
// Check the length with:
//
//	len(mockedStore.DeleteChatRoomRemovedMembersOnChatRoomRemoveMemberActionsWithSdCalls())
func (mock *StoreMock) DeleteChatRoomRemovedMembersOnChatRoomRemoveMemberActionsWithSdCalls() []struct {
	Ctx                           context.Context
	Sd                            Sd
	ChatRoomRemoveMemberActionIDs []uuid.UUID
} {
	var calls []struct {
		Ctx                           context.Context
		Sd                            Sd
		ChatRoomRemoveMemberActionIDs []uuid.UUID
	}
	mock.lockDeleteChatRoomRemovedMembersOnChatRoomRemoveMemberActionsWithSd.RLock()
	calls = mock.calls.DeleteChatRoomRemovedMembersOnChatRoomRemoveMemberActionsWithSd
	mock.lockDeleteChatRoomRemovedMembersOnChatRoomRemoveMemberActionsWithSd.RUnlock()
	return calls
}

// DeleteChatRoomRemovedMembersOnMember calls DeleteChatRoomRemovedMembersOnMemberFunc.
func (mock *StoreMock) DeleteChatRoomRemovedMembersOnMember(ctx context.Context, memberID uuid.UUID) (int64, error) {
	if mock.DeleteChatRoomRemovedMembersOnMemberFunc == nil {
		panic("StoreMock.DeleteChatRoomRemovedMembersOnMemberFunc: method is nil but Store.DeleteChatRoomRemovedMembersOnMember was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		MemberID uuid.UUID
	}{
		Ctx:      ctx,
		MemberID: memberID,
	}
	mock.lockDeleteChatRoomRemovedMembersOnMember.Lock()
	mock.calls.DeleteChatRoomRemovedMembersOnMember = append(mock.calls.DeleteChatRoomRemovedMembersOnMember, callInfo)
	mock.lockDeleteChatRoomRemovedMembersOnMember.Unlock()
	return mock.DeleteChatRoomRemovedMembersOnMemberFunc(ctx, memberID)
}

// DeleteChatRoomRemovedMembersOnMemberCalls gets all the calls that were made to DeleteChatRoomRemovedMembersOnMember.
// Check the length with:
//
//	len(mockedStore.DeleteChatRoomRemovedMembersOnMemberCalls())
func (mock *StoreMock) DeleteChatRoomRemovedMembersOnMemberCalls() []struct {
	Ctx      context.Context
	MemberID uuid.UUID
} {
	var calls []struct {
		Ctx      context.Context
		MemberID uuid.UUID
	}
	mock.lockDeleteChatRoomRemovedMembersOnMember.RLock()
	calls = mock.calls.DeleteChatRoomRemovedMembersOnMember
	mock.lockDeleteChatRoomRemovedMembersOnMember.RUnlock()
	return calls
}

// DeleteChatRoomRemovedMembersOnMemberWithSd calls DeleteChatRoomRemovedMembersOnMemberWithSdFunc.
func (mock *StoreMock) DeleteChatRoomRemovedMembersOnMemberWithSd(ctx context.Context, sd Sd, memberID uuid.UUID) (int64, error) {
	if mock.DeleteChatRoomRemovedMembersOnMemberWithSdFunc == nil {
		panic("StoreMock.DeleteChatRoomRemovedMembersOnMemberWithSdFunc: method is nil but Store.DeleteChatRoomRemovedMembersOnMemberWithSd was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Sd       Sd
		MemberID uuid.UUID
	}{
		Ctx:      ctx,
		Sd:       sd,
		MemberID: memberID,
	}
	mock.lockDeleteChatRoomRemovedMembersOnMemberWithSd.Lock()
	mock.calls.DeleteChatRoomRemovedMembersOnMemberWithSd = append(mock.calls.DeleteChatRoomRemovedMembersOnMemberWithSd, callInfo)
	mock.lockDeleteChatRoomRemovedMembersOnMemberWithSd.Unlock()
	return mock.DeleteChatRoomRemovedMembersOnMemberWithSdFunc(ctx, sd, memberID)
}

// DeleteChatRoomRemovedMembersOnMemberWithSdCalls gets all the calls that were made to DeleteChatRoomRemovedMembersOnMemberWithSd.
// Check the length with:
//
//	len(mockedStore.DeleteChatRoomRemovedMembersOnMemberWithSdCalls())
func (mock *StoreMock) DeleteChatRoomRemovedMembersOnMemberWithSdCalls() []struct {
	Ctx      context.Context
	Sd       Sd
	MemberID uuid.UUID
} {
	var calls []struct {
		Ctx      context.Context
		Sd       Sd
		MemberID uuid.UUID
	}
	mock.lockDeleteChatRoomRemovedMembersOnMemberWithSd.RLock()
	calls = mock.calls.DeleteChatRoomRemovedMembersOnMemberWithSd
	mock.lockDeleteChatRoomRemovedMembersOnMemberWithSd.RUnlock()
	return calls
}

// DeleteChatRoomRemovedMembersOnMembers calls DeleteChatRoomRemovedMembersOnMembersFunc.
func (mock *StoreMock) DeleteChatRoomRemovedMembersOnMembers(ctx context.Context, memberIDs []uuid.UUID) (int64, error) {
	if mock.DeleteChatRoomRemovedMembersOnMembersFunc == nil {
		panic("StoreMock.DeleteChatRoomRemovedMembersOnMembersFunc: method is nil but Store.DeleteChatRoomRemovedMembersOnMembers was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		MemberIDs []uuid.UUID
	}{
		Ctx:       ctx,
		MemberIDs: memberIDs,
	}
	mock.lockDeleteChatRoomRemovedMembersOnMembers.Lock()
	mock.calls.DeleteChatRoomRemovedMembersOnMembers = append(mock.calls.DeleteChatRoomRemovedMembersOnMembers, callInfo)
	mock.lockDeleteChatRoomRemovedMembersOnMembers.Unlock()
	return mock.DeleteChatRoomRemovedMembersOnMembersFunc(ctx, memberIDs)
}

// DeleteChatRoomRemovedMembersOnMembersCalls gets all the calls that were made to DeleteChatRoomRemovedMembersOnMembers.
// Check the length with:
//
//	len(mockedStore.DeleteChatRoomRemovedMembersOnMembersCalls())
func (mock *StoreMock) DeleteChatRoomRemovedMembersOnMembersCalls() []struct {
	Ctx       context.Context
	MemberIDs []uuid.UUID
} {
	var calls []struct {
		Ctx       context.Context
		MemberIDs []uuid.UUID
	}
	mock.lockDeleteChatRoomRemovedMembersOnMembers.RLock()
	calls = mock.calls.DeleteChatRoomRemovedMembersOnMembers
	mock.lockDeleteChatRoomRemovedMembersOnMembers.RUnlock()
	return calls
}

// DeleteChatRoomRemovedMembersOnMembersWithSd calls DeleteChatRoomRemovedMembersOnMembersWithSdFunc.
func (mock *StoreMock) DeleteChatRoomRemovedMembersOnMembersWithSd(ctx context.Context, sd Sd, memberIDs []uuid.UUID) (int64, error) {
	if mock.DeleteChatRoomRemovedMembersOnMembersWithSdFunc == nil {
		panic("StoreMock.DeleteChatRoomRemovedMembersOnMembersWithSdFunc: method is nil but Store.DeleteChatRoomRemovedMembersOnMembersWithSd was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Sd        Sd
		MemberIDs []uuid.UUID
	}{
		Ctx:       ctx,
		Sd:        sd,
		MemberIDs: memberIDs,
	}
	mock.lockDeleteChatRoomRemovedMembersOnMembersWithSd.Lock()
	mock.calls.DeleteChatRoomRemovedMembersOnMembersWithSd = append(mock.calls.DeleteChatRoomRemovedMembersOnMembersWithSd, callInfo)
	mock.lockDeleteChatRoomRemovedMembersOnMembersWithSd.Unlock()
	return mock.DeleteChatRoomRemovedMembersOnMembersWithSdFunc(ctx, sd, memberIDs)
}

// DeleteChatRoomRemovedMembersOnMembersWithSdCalls gets all the calls that were made to DeleteChatRoomRemovedMembersOnMembersWithSd.
// Check the length with:
//
//	len(mockedStore.DeleteChatRoomRemovedMembersOnMembersWithSdCalls())
func (mock *StoreMock) DeleteChatRoomRemovedMembersOnMembersWithSdCalls() []struct {
	Ctx       context.Context
	Sd        Sd
	MemberIDs []uuid.UUID
} {
	var calls []struct {
		Ctx       context.Context
		Sd        Sd
		MemberIDs []uuid.UUID
	}
	mock.lockDeleteChatRoomRemovedMembersOnMembersWithSd.RLock()
	calls = mock.calls.DeleteChatRoomRemovedMembersOnMembersWithSd
	mock.lockDeleteChatRoomRemovedMembersOnMembersWithSd.RUnlock()
	return calls
}

// DeleteChatRoomUpdateNameAction calls DeleteChatRoomUpdateNameActionFunc.
func (mock *StoreMock) DeleteChatRoomUpdateNameAction(ctx context.Context, chatRoomUpdateNameActionID uuid.UUID) (int64, error) {
	if mock.DeleteChatRoomUpdateNameActionFunc == nil {
		panic("StoreMock.DeleteChatRoomUpdateNameActionFunc: method is nil but Store.DeleteChatRoomUpdateNameAction was just called")
	}
	callInfo := struct {
		Ctx                        context.Context
		ChatRoomUpdateNameActionID uuid.UUID
	}{
		Ctx:                        ctx,
		ChatRoomUpdateNameActionID: chatRoomUpdateNameActionID,
	}
	mock.lockDeleteChatRoomUpdateNameAction.Lock()
	mock.calls.DeleteChatRoomUpdateNameAction = append(mock.calls.DeleteChatRoomUpdateNameAction, callInfo)
	mock.lockDeleteChatRoomUpdateNameAction.Unlock()
	return mock.DeleteChatRoomUpdateNameActionFunc(ctx, chatRoomUpdateNameActionID)
}

// DeleteChatRoomUpdateNameActionCalls gets all the calls that were made to DeleteChatRoomUpdateNameAction.
// Check the length with:
//
//	len(mockedStore.DeleteChatRoomUpdateNameActionCalls())
func (mock *StoreMock) DeleteChatRoomUpdateNameActionCalls() []struct {
	Ctx                        context.Context
	ChatRoomUpdateNameActionID uuid.UUID
} {
	var calls []struct {
		Ctx                        context.Context
		ChatRoomUpdateNameActionID uuid.UUID
	}
	mock.lockDeleteChatRoomUpdateNameAction.RLock()
	calls = mock.calls.DeleteChatRoomUpdateNameAction
	mock.lockDeleteChatRoomUpdateNameAction.RUnlock()
	return calls
}

// DeleteChatRoomUpdateNameActionWithSd calls DeleteChatRoomUpdateNameActionWithSdFunc.
func (mock *StoreMock) DeleteChatRoomUpdateNameActionWithSd(ctx context.Context, sd Sd, chatRoomUpdateNameActionID uuid.UUID) (int64, error) {
	if mock.DeleteChatRoomUpdateNameActionWithSdFunc == nil {
		panic("StoreMock.DeleteChatRoomUpdateNameActionWithSdFunc: method is nil but Store.DeleteChatRoomUpdateNameActionWithSd was just called")
	}
	callInfo := struct {
		Ctx                        context.Context
		Sd                         Sd
		ChatRoomUpdateNameActionID uuid.UUID
	}{
		Ctx:                        ctx,
		Sd:                         sd,
		ChatRoomUpdateNameActionID: chatRoomUpdateNameActionID,
	}
	mock.lockDeleteChatRoomUpdateNameActionWithSd.Lock()
	mock.calls.DeleteChatRoomUpdateNameActionWithSd = append(mock.calls.DeleteChatRoomUpdateNameActionWithSd, callInfo)
	mock.lockDeleteChatRoomUpdateNameActionWithSd.Unlock()
	return mock.DeleteChatRoomUpdateNameActionWithSdFunc(ctx, sd, chatRoomUpdateNameActionID)
}

// DeleteChatRoomUpdateNameActionWithSdCalls gets all the calls that were made to DeleteChatRoomUpdateNameActionWithSd.
// Check the length with:
//
//	len(mockedStore.DeleteChatRoomUpdateNameActionWithSdCalls())
func (mock *StoreMock) DeleteChatRoomUpdateNameActionWithSdCalls() []struct {
	Ctx                        context.Context
	Sd                         Sd
	ChatRoomUpdateNameActionID uuid.UUID
} {
	var calls []struct {
		Ctx                        context.Context
		Sd                         Sd
		ChatRoomUpdateNameActionID uuid.UUID
	}
	mock.lockDeleteChatRoomUpdateNameActionWithSd.RLock()
	calls = mock.calls.DeleteChatRoomUpdateNameActionWithSd
	mock.lockDeleteChatRoomUpdateNameActionWithSd.RUnlock()
	return calls
}

// DeleteChatRoomWithSd calls DeleteChatRoomWithSdFunc.
func (mock *StoreMock) DeleteChatRoomWithSd(ctx context.Context, sd Sd, chatRoomID uuid.UUID) (int64, error) {
	if mock.DeleteChatRoomWithSdFunc == nil {
		panic("StoreMock.DeleteChatRoomWithSdFunc: method is nil but Store.DeleteChatRoomWithSd was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Sd         Sd
		ChatRoomID uuid.UUID
	}{
		Ctx:        ctx,
		Sd:         sd,
		ChatRoomID: chatRoomID,
	}
	mock.lockDeleteChatRoomWithSd.Lock()
	mock.calls.DeleteChatRoomWithSd = append(mock.calls.DeleteChatRoomWithSd, callInfo)
	mock.lockDeleteChatRoomWithSd.Unlock()
	return mock.DeleteChatRoomWithSdFunc(ctx, sd, chatRoomID)
}

// DeleteChatRoomWithSdCalls gets all the calls that were made to DeleteChatRoomWithSd.
// Check the length with:
//
//	len(mockedStore.DeleteChatRoomWithSdCalls())
func (mock *StoreMock) DeleteChatRoomWithSdCalls() []struct {
	Ctx        context.Context
	Sd         Sd
	ChatRoomID uuid.UUID
} {
	var calls []struct {
		Ctx        context.Context
		Sd         Sd
		ChatRoomID uuid.UUID
	}
	mock.lockDeleteChatRoomWithSd.RLock()
	calls = mock.calls.DeleteChatRoomWithSd
	mock.lockDeleteChatRoomWithSd.RUnlock()
	return calls
}

// DeleteChatRoomWithdrawAction calls DeleteChatRoomWithdrawActionFunc.
func (mock *StoreMock) DeleteChatRoomWithdrawAction(ctx context.Context, chatRoomWithdrawActionID uuid.UUID) (int64, error) {
	if mock.DeleteChatRoomWithdrawActionFunc == nil {
		panic("StoreMock.DeleteChatRoomWithdrawActionFunc: method is nil but Store.DeleteChatRoomWithdrawAction was just called")
	}
	callInfo := struct {
		Ctx                      context.Context
		ChatRoomWithdrawActionID uuid.UUID
	}{
		Ctx:                      ctx,
		ChatRoomWithdrawActionID: chatRoomWithdrawActionID,
	}
	mock.lockDeleteChatRoomWithdrawAction.Lock()
	mock.calls.DeleteChatRoomWithdrawAction = append(mock.calls.DeleteChatRoomWithdrawAction, callInfo)
	mock.lockDeleteChatRoomWithdrawAction.Unlock()
	return mock.DeleteChatRoomWithdrawActionFunc(ctx, chatRoomWithdrawActionID)
}

// DeleteChatRoomWithdrawActionCalls gets all the calls that were made to DeleteChatRoomWithdrawAction.
// Check the length with:
//
//	len(mockedStore.DeleteChatRoomWithdrawActionCalls())
func (mock *StoreMock) DeleteChatRoomWithdrawActionCalls() []struct {
	Ctx                      context.Context
	ChatRoomWithdrawActionID uuid.UUID
} {
	var calls []struct {
		Ctx                      context.Context
		ChatRoomWithdrawActionID uuid.UUID
	}
	mock.lockDeleteChatRoomWithdrawAction.RLock()
	calls = mock.calls.DeleteChatRoomWithdrawAction
	mock.lockDeleteChatRoomWithdrawAction.RUnlock()
	return calls
}

// DeleteChatRoomWithdrawActionWithSd calls DeleteChatRoomWithdrawActionWithSdFunc.
func (mock *StoreMock) DeleteChatRoomWithdrawActionWithSd(ctx context.Context, sd Sd, chatRoomWithdrawActionID uuid.UUID) (int64, error) {
	if mock.DeleteChatRoomWithdrawActionWithSdFunc == nil {
		panic("StoreMock.DeleteChatRoomWithdrawActionWithSdFunc: method is nil but Store.DeleteChatRoomWithdrawActionWithSd was just called")
	}
	callInfo := struct {
		Ctx                      context.Context
		Sd                       Sd
		ChatRoomWithdrawActionID uuid.UUID
	}{
		Ctx:                      ctx,
		Sd:                       sd,
		ChatRoomWithdrawActionID: chatRoomWithdrawActionID,
	}
	mock.lockDeleteChatRoomWithdrawActionWithSd.Lock()
	mock.calls.DeleteChatRoomWithdrawActionWithSd = append(mock.calls.DeleteChatRoomWithdrawActionWithSd, callInfo)
	mock.lockDeleteChatRoomWithdrawActionWithSd.Unlock()
	return mock.DeleteChatRoomWithdrawActionWithSdFunc(ctx, sd, chatRoomWithdrawActionID)
}

// DeleteChatRoomWithdrawActionWithSdCalls gets all the calls that were made to DeleteChatRoomWithdrawActionWithSd.
// Check the length with:
//
//	len(mockedStore.DeleteChatRoomWithdrawActionWithSdCalls())
func (mock *StoreMock) DeleteChatRoomWithdrawActionWithSdCalls() []struct {
	Ctx                      context.Context
	Sd                       Sd
	ChatRoomWithdrawActionID uuid.UUID
} {
	var calls []struct {
		Ctx                      context.Context
		Sd                       Sd
		ChatRoomWithdrawActionID uuid.UUID
	}
	mock.lockDeleteChatRoomWithdrawActionWithSd.RLock()
	calls = mock.calls.DeleteChatRoomWithdrawActionWithSd
	mock.lockDeleteChatRoomWithdrawActionWithSd.RUnlock()
	return calls
}

// DeleteEventType calls DeleteEventTypeFunc.
func (mock *StoreMock) DeleteEventType(ctx context.Context, eventTypeID uuid.UUID) (int64, error) {
	if mock.DeleteEventTypeFunc == nil {
		panic("StoreMock.DeleteEventTypeFunc: method is nil but Store.DeleteEventType was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		EventTypeID uuid.UUID
	}{
		Ctx:         ctx,
		EventTypeID: eventTypeID,
	}
	mock.lockDeleteEventType.Lock()
	mock.calls.DeleteEventType = append(mock.calls.DeleteEventType, callInfo)
	mock.lockDeleteEventType.Unlock()
	return mock.DeleteEventTypeFunc(ctx, eventTypeID)
}

// DeleteEventTypeCalls gets all the calls that were made to DeleteEventType.
// Check the length with:
//
//	len(mockedStore.DeleteEventTypeCalls())
func (mock *StoreMock) DeleteEventTypeCalls() []struct {
	Ctx         context.Context
	EventTypeID uuid.UUID
} {
	var calls []struct {
		Ctx         context.Context
		EventTypeID uuid.UUID
	}
	mock.lockDeleteEventType.RLock()
	calls = mock.calls.DeleteEventType
	mock.lockDeleteEventType.RUnlock()
	return calls
}

// DeleteEventTypeByKey calls DeleteEventTypeByKeyFunc.
func (mock *StoreMock) DeleteEventTypeByKey(ctx context.Context, key string) (int64, error) {
	if mock.DeleteEventTypeByKeyFunc == nil {
		panic("StoreMock.DeleteEventTypeByKeyFunc: method is nil but Store.DeleteEventTypeByKey was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockDeleteEventTypeByKey.Lock()
	mock.calls.DeleteEventTypeByKey = append(mock.calls.DeleteEventTypeByKey, callInfo)
	mock.lockDeleteEventTypeByKey.Unlock()
	return mock.DeleteEventTypeByKeyFunc(ctx, key)
}

// DeleteEventTypeByKeyCalls gets all the calls that were made to DeleteEventTypeByKey.
// Check the length with:
//
//	len(mockedStore.DeleteEventTypeByKeyCalls())
func (mock *StoreMock) DeleteEventTypeByKeyCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockDeleteEventTypeByKey.RLock()
	calls = mock.calls.DeleteEventTypeByKey
	mock.lockDeleteEventTypeByKey.RUnlock()
	return calls
}

// DeleteEventTypeByKeyWithSd calls DeleteEventTypeByKeyWithSdFunc.
func (mock *StoreMock) DeleteEventTypeByKeyWithSd(ctx context.Context, sd Sd, key string) (int64, error) {
	if mock.DeleteEventTypeByKeyWithSdFunc == nil {
		panic("StoreMock.DeleteEventTypeByKeyWithSdFunc: method is nil but Store.DeleteEventTypeByKeyWithSd was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}{
		Ctx: ctx,
		Sd:  sd,
		Key: key,
	}
	mock.lockDeleteEventTypeByKeyWithSd.Lock()
	mock.calls.DeleteEventTypeByKeyWithSd = append(mock.calls.DeleteEventTypeByKeyWithSd, callInfo)
	mock.lockDeleteEventTypeByKeyWithSd.Unlock()
	return mock.DeleteEventTypeByKeyWithSdFunc(ctx, sd, key)
}

// DeleteEventTypeByKeyWithSdCalls gets all the calls that were made to DeleteEventTypeByKeyWithSd.
// Check the length with:
//
//	len(mockedStore.DeleteEventTypeByKeyWithSdCalls())
func (mock *StoreMock) DeleteEventTypeByKeyWithSdCalls() []struct {
	Ctx context.Context
	Sd  Sd
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}
	mock.lockDeleteEventTypeByKeyWithSd.RLock()
	calls = mock.calls.DeleteEventTypeByKeyWithSd
	mock.lockDeleteEventTypeByKeyWithSd.RUnlock()
	return calls
}

// DeleteEventTypeWithSd calls DeleteEventTypeWithSdFunc.
func (mock *StoreMock) DeleteEventTypeWithSd(ctx context.Context, sd Sd, eventTypeID uuid.UUID) (int64, error) {
	if mock.DeleteEventTypeWithSdFunc == nil {
		panic("StoreMock.DeleteEventTypeWithSdFunc: method is nil but Store.DeleteEventTypeWithSd was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Sd          Sd
		EventTypeID uuid.UUID
	}{
		Ctx:         ctx,
		Sd:          sd,
		EventTypeID: eventTypeID,
	}
	mock.lockDeleteEventTypeWithSd.Lock()
	mock.calls.DeleteEventTypeWithSd = append(mock.calls.DeleteEventTypeWithSd, callInfo)
	mock.lockDeleteEventTypeWithSd.Unlock()
	return mock.DeleteEventTypeWithSdFunc(ctx, sd, eventTypeID)
}

// DeleteEventTypeWithSdCalls gets all the calls that were made to DeleteEventTypeWithSd.
// Check the length with:
//
//	len(mockedStore.DeleteEventTypeWithSdCalls())
func (mock *StoreMock) DeleteEventTypeWithSdCalls() []struct {
	Ctx         context.Context
	Sd          Sd
	EventTypeID uuid.UUID
} {
	var calls []struct {
		Ctx         context.Context
		Sd          Sd
		EventTypeID uuid.UUID
	}
	mock.lockDeleteEventTypeWithSd.RLock()
	calls = mock.calls.DeleteEventTypeWithSd
	mock.lockDeleteEventTypeWithSd.RUnlock()
	return calls
}

// DeleteFile calls DeleteFileFunc.
func (mock *StoreMock) DeleteFile(ctx context.Context, fileID uuid.UUID) (int64, error) {
	if mock.DeleteFileFunc == nil {
		panic("StoreMock.DeleteFileFunc: method is nil but Store.DeleteFile was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		FileID uuid.UUID
	}{
		Ctx:    ctx,
		FileID: fileID,
	}
	mock.lockDeleteFile.Lock()
	mock.calls.DeleteFile = append(mock.calls.DeleteFile, callInfo)
	mock.lockDeleteFile.Unlock()
	return mock.DeleteFileFunc(ctx, fileID)
}

// DeleteFileCalls gets all the calls that were made to DeleteFile.
// Check the length with:
//
//	len(mockedStore.DeleteFileCalls())
func (mock *StoreMock) DeleteFileCalls() []struct {
	Ctx    context.Context
	FileID uuid.UUID
} {
	var calls []struct {
		Ctx    context.Context
		FileID uuid.UUID
	}
	mock.lockDeleteFile.RLock()
	calls = mock.calls.DeleteFile
	mock.lockDeleteFile.RUnlock()
	return calls
}

// DeleteFileWithSd calls DeleteFileWithSdFunc.
func (mock *StoreMock) DeleteFileWithSd(ctx context.Context, sd Sd, fileID uuid.UUID) (int64, error) {
	if mock.DeleteFileWithSdFunc == nil {
		panic("StoreMock.DeleteFileWithSdFunc: method is nil but Store.DeleteFileWithSd was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Sd     Sd
		FileID uuid.UUID
	}{
		Ctx:    ctx,
		Sd:     sd,
		FileID: fileID,
	}
	mock.lockDeleteFileWithSd.Lock()
	mock.calls.DeleteFileWithSd = append(mock.calls.DeleteFileWithSd, callInfo)
	mock.lockDeleteFileWithSd.Unlock()
	return mock.DeleteFileWithSdFunc(ctx, sd, fileID)
}

// DeleteFileWithSdCalls gets all the calls that were made to DeleteFileWithSd.
// Check the length with:
//
//	len(mockedStore.DeleteFileWithSdCalls())
func (mock *StoreMock) DeleteFileWithSdCalls() []struct {
	Ctx    context.Context
	Sd     Sd
	FileID uuid.UUID
} {
	var calls []struct {
		Ctx    context.Context
		Sd     Sd
		FileID uuid.UUID
	}
	mock.lockDeleteFileWithSd.RLock()
	calls = mock.calls.DeleteFileWithSd
	mock.lockDeleteFileWithSd.RUnlock()
	return calls
}

// DeleteGrade calls DeleteGradeFunc.
func (mock *StoreMock) DeleteGrade(ctx context.Context, gradeID uuid.UUID) (int64, error) {
	if mock.DeleteGradeFunc == nil {
		panic("StoreMock.DeleteGradeFunc: method is nil but Store.DeleteGrade was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		GradeID uuid.UUID
	}{
		Ctx:     ctx,
		GradeID: gradeID,
	}
	mock.lockDeleteGrade.Lock()
	mock.calls.DeleteGrade = append(mock.calls.DeleteGrade, callInfo)
	mock.lockDeleteGrade.Unlock()
	return mock.DeleteGradeFunc(ctx, gradeID)
}

// DeleteGradeCalls gets all the calls that were made to DeleteGrade.
// Check the length with:
//
//	len(mockedStore.DeleteGradeCalls())
func (mock *StoreMock) DeleteGradeCalls() []struct {
	Ctx     context.Context
	GradeID uuid.UUID
} {
	var calls []struct {
		Ctx     context.Context
		GradeID uuid.UUID
	}
	mock.lockDeleteGrade.RLock()
	calls = mock.calls.DeleteGrade
	mock.lockDeleteGrade.RUnlock()
	return calls
}

// DeleteGradeWithSd calls DeleteGradeWithSdFunc.
func (mock *StoreMock) DeleteGradeWithSd(ctx context.Context, sd Sd, gradeID uuid.UUID) (int64, error) {
	if mock.DeleteGradeWithSdFunc == nil {
		panic("StoreMock.DeleteGradeWithSdFunc: method is nil but Store.DeleteGradeWithSd was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Sd      Sd
		GradeID uuid.UUID
	}{
		Ctx:     ctx,
		Sd:      sd,
		GradeID: gradeID,
	}
	mock.lockDeleteGradeWithSd.Lock()
	mock.calls.DeleteGradeWithSd = append(mock.calls.DeleteGradeWithSd, callInfo)
	mock.lockDeleteGradeWithSd.Unlock()
	return mock.DeleteGradeWithSdFunc(ctx, sd, gradeID)
}

// DeleteGradeWithSdCalls gets all the calls that were made to DeleteGradeWithSd.
// Check the length with:
//
//	len(mockedStore.DeleteGradeWithSdCalls())
func (mock *StoreMock) DeleteGradeWithSdCalls() []struct {
	Ctx     context.Context
	Sd      Sd
	GradeID uuid.UUID
} {
	var calls []struct {
		Ctx     context.Context
		Sd      Sd
		GradeID uuid.UUID
	}
	mock.lockDeleteGradeWithSd.RLock()
	calls = mock.calls.DeleteGradeWithSd
	mock.lockDeleteGradeWithSd.RUnlock()
	return calls
}

// DeleteGroup calls DeleteGroupFunc.
func (mock *StoreMock) DeleteGroup(ctx context.Context, groupID uuid.UUID) (int64, error) {
	if mock.DeleteGroupFunc == nil {
		panic("StoreMock.DeleteGroupFunc: method is nil but Store.DeleteGroup was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		GroupID uuid.UUID
	}{
		Ctx:     ctx,
		GroupID: groupID,
	}
	mock.lockDeleteGroup.Lock()
	mock.calls.DeleteGroup = append(mock.calls.DeleteGroup, callInfo)
	mock.lockDeleteGroup.Unlock()
	return mock.DeleteGroupFunc(ctx, groupID)
}

// DeleteGroupCalls gets all the calls that were made to DeleteGroup.
// Check the length with:
//
//	len(mockedStore.DeleteGroupCalls())
func (mock *StoreMock) DeleteGroupCalls() []struct {
	Ctx     context.Context
	GroupID uuid.UUID
} {
	var calls []struct {
		Ctx     context.Context
		GroupID uuid.UUID
	}
	mock.lockDeleteGroup.RLock()
	calls = mock.calls.DeleteGroup
	mock.lockDeleteGroup.RUnlock()
	return calls
}

// DeleteGroupWithSd calls DeleteGroupWithSdFunc.
func (mock *StoreMock) DeleteGroupWithSd(ctx context.Context, sd Sd, groupID uuid.UUID) (int64, error) {
	if mock.DeleteGroupWithSdFunc == nil {
		panic("StoreMock.DeleteGroupWithSdFunc: method is nil but Store.DeleteGroupWithSd was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Sd      Sd
		GroupID uuid.UUID
	}{
		Ctx:     ctx,
		Sd:      sd,
		GroupID: groupID,
	}
	mock.lockDeleteGroupWithSd.Lock()
	mock.calls.DeleteGroupWithSd = append(mock.calls.DeleteGroupWithSd, callInfo)
	mock.lockDeleteGroupWithSd.Unlock()
	return mock.DeleteGroupWithSdFunc(ctx, sd, groupID)
}

// DeleteGroupWithSdCalls gets all the calls that were made to DeleteGroupWithSd.
// Check the length with:
//
//	len(mockedStore.DeleteGroupWithSdCalls())
func (mock *StoreMock) DeleteGroupWithSdCalls() []struct {
	Ctx     context.Context
	Sd      Sd
	GroupID uuid.UUID
} {
	var calls []struct {
		Ctx     context.Context
		Sd      Sd
		GroupID uuid.UUID
	}
	mock.lockDeleteGroupWithSd.RLock()
	calls = mock.calls.DeleteGroupWithSd
	mock.lockDeleteGroupWithSd.RUnlock()
	return calls
}

// DeleteImage calls DeleteImageFunc.
func (mock *StoreMock) DeleteImage(ctx context.Context, imageID uuid.UUID) (int64, error) {
	if mock.DeleteImageFunc == nil {
		panic("StoreMock.DeleteImageFunc: method is nil but Store.DeleteImage was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		ImageID uuid.UUID
	}{
		Ctx:     ctx,
		ImageID: imageID,
	}
	mock.lockDeleteImage.Lock()
	mock.calls.DeleteImage = append(mock.calls.DeleteImage, callInfo)
	mock.lockDeleteImage.Unlock()
	return mock.DeleteImageFunc(ctx, imageID)
}

// DeleteImageCalls gets all the calls that were made to DeleteImage.
// Check the length with:
//
//	len(mockedStore.DeleteImageCalls())
func (mock *StoreMock) DeleteImageCalls() []struct {
	Ctx     context.Context
	ImageID uuid.UUID
} {
	var calls []struct {
		Ctx     context.Context
		ImageID uuid.UUID
	}
	mock.lockDeleteImage.RLock()
	calls = mock.calls.DeleteImage
	mock.lockDeleteImage.RUnlock()
	return calls
}

// DeleteImageWithSd calls DeleteImageWithSdFunc.
func (mock *StoreMock) DeleteImageWithSd(ctx context.Context, sd Sd, imageID uuid.UUID) (int64, error) {
	if mock.DeleteImageWithSdFunc == nil {
		panic("StoreMock.DeleteImageWithSdFunc: method is nil but Store.DeleteImageWithSd was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Sd      Sd
		ImageID uuid.UUID
	}{
		Ctx:     ctx,
		Sd:      sd,
		ImageID: imageID,
	}
	mock.lockDeleteImageWithSd.Lock()
	mock.calls.DeleteImageWithSd = append(mock.calls.DeleteImageWithSd, callInfo)
	mock.lockDeleteImageWithSd.Unlock()
	return mock.DeleteImageWithSdFunc(ctx, sd, imageID)
}

// DeleteImageWithSdCalls gets all the calls that were made to DeleteImageWithSd.
// Check the length with:
//
//	len(mockedStore.DeleteImageWithSdCalls())
func (mock *StoreMock) DeleteImageWithSdCalls() []struct {
	Ctx     context.Context
	Sd      Sd
	ImageID uuid.UUID
} {
	var calls []struct {
		Ctx     context.Context
		Sd      Sd
		ImageID uuid.UUID
	}
	mock.lockDeleteImageWithSd.RLock()
	calls = mock.calls.DeleteImageWithSd
	mock.lockDeleteImageWithSd.RUnlock()
	return calls
}

// DeleteMember calls DeleteMemberFunc.
func (mock *StoreMock) DeleteMember(ctx context.Context, memberID uuid.UUID) (int64, error) {
	if mock.DeleteMemberFunc == nil {
		panic("StoreMock.DeleteMemberFunc: method is nil but Store.DeleteMember was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		MemberID uuid.UUID
	}{
		Ctx:      ctx,
		MemberID: memberID,
	}
	mock.lockDeleteMember.Lock()
	mock.calls.DeleteMember = append(mock.calls.DeleteMember, callInfo)
	mock.lockDeleteMember.Unlock()
	return mock.DeleteMemberFunc(ctx, memberID)
}

// DeleteMemberCalls gets all the calls that were made to DeleteMember.
// Check the length with:
//
//	len(mockedStore.DeleteMemberCalls())
func (mock *StoreMock) DeleteMemberCalls() []struct {
	Ctx      context.Context
	MemberID uuid.UUID
} {
	var calls []struct {
		Ctx      context.Context
		MemberID uuid.UUID
	}
	mock.lockDeleteMember.RLock()
	calls = mock.calls.DeleteMember
	mock.lockDeleteMember.RUnlock()
	return calls
}

// DeleteMemberWithSd calls DeleteMemberWithSdFunc.
func (mock *StoreMock) DeleteMemberWithSd(ctx context.Context, sd Sd, memberID uuid.UUID) (int64, error) {
	if mock.DeleteMemberWithSdFunc == nil {
		panic("StoreMock.DeleteMemberWithSdFunc: method is nil but Store.DeleteMemberWithSd was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Sd       Sd
		MemberID uuid.UUID
	}{
		Ctx:      ctx,
		Sd:       sd,
		MemberID: memberID,
	}
	mock.lockDeleteMemberWithSd.Lock()
	mock.calls.DeleteMemberWithSd = append(mock.calls.DeleteMemberWithSd, callInfo)
	mock.lockDeleteMemberWithSd.Unlock()
	return mock.DeleteMemberWithSdFunc(ctx, sd, memberID)
}

// DeleteMemberWithSdCalls gets all the calls that were made to DeleteMemberWithSd.
// Check the length with:
//
//	len(mockedStore.DeleteMemberWithSdCalls())
func (mock *StoreMock) DeleteMemberWithSdCalls() []struct {
	Ctx      context.Context
	Sd       Sd
	MemberID uuid.UUID
} {
	var calls []struct {
		Ctx      context.Context
		Sd       Sd
		MemberID uuid.UUID
	}
	mock.lockDeleteMemberWithSd.RLock()
	calls = mock.calls.DeleteMemberWithSd
	mock.lockDeleteMemberWithSd.RUnlock()
	return calls
}

// DeleteMessage calls DeleteMessageFunc.
func (mock *StoreMock) DeleteMessage(ctx context.Context, messageID uuid.UUID) (int64, error) {
	if mock.DeleteMessageFunc == nil {
		panic("StoreMock.DeleteMessageFunc: method is nil but Store.DeleteMessage was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		MessageID uuid.UUID
	}{
		Ctx:       ctx,
		MessageID: messageID,
	}
	mock.lockDeleteMessage.Lock()
	mock.calls.DeleteMessage = append(mock.calls.DeleteMessage, callInfo)
	mock.lockDeleteMessage.Unlock()
	return mock.DeleteMessageFunc(ctx, messageID)
}

// DeleteMessageCalls gets all the calls that were made to DeleteMessage.
// Check the length with:
//
//	len(mockedStore.DeleteMessageCalls())
func (mock *StoreMock) DeleteMessageCalls() []struct {
	Ctx       context.Context
	MessageID uuid.UUID
} {
	var calls []struct {
		Ctx       context.Context
		MessageID uuid.UUID
	}
	mock.lockDeleteMessage.RLock()
	calls = mock.calls.DeleteMessage
	mock.lockDeleteMessage.RUnlock()
	return calls
}

// DeleteMessageWithSd calls DeleteMessageWithSdFunc.
func (mock *StoreMock) DeleteMessageWithSd(ctx context.Context, sd Sd, messageID uuid.UUID) (int64, error) {
	if mock.DeleteMessageWithSdFunc == nil {
		panic("StoreMock.DeleteMessageWithSdFunc: method is nil but Store.DeleteMessageWithSd was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Sd        Sd
		MessageID uuid.UUID
	}{
		Ctx:       ctx,
		Sd:        sd,
		MessageID: messageID,
	}
	mock.lockDeleteMessageWithSd.Lock()
	mock.calls.DeleteMessageWithSd = append(mock.calls.DeleteMessageWithSd, callInfo)
	mock.lockDeleteMessageWithSd.Unlock()
	return mock.DeleteMessageWithSdFunc(ctx, sd, messageID)
}

// DeleteMessageWithSdCalls gets all the calls that were made to DeleteMessageWithSd.
// Check the length with:
//
//	len(mockedStore.DeleteMessageWithSdCalls())
func (mock *StoreMock) DeleteMessageWithSdCalls() []struct {
	Ctx       context.Context
	Sd        Sd
	MessageID uuid.UUID
} {
	var calls []struct {
		Ctx       context.Context
		Sd        Sd
		MessageID uuid.UUID
	}
	mock.lockDeleteMessageWithSd.RLock()
	calls = mock.calls.DeleteMessageWithSd
	mock.lockDeleteMessageWithSd.RUnlock()
	return calls
}

// DeleteMessagesOnChatRoom calls DeleteMessagesOnChatRoomFunc.
func (mock *StoreMock) DeleteMessagesOnChatRoom(ctx context.Context, chatRoomID uuid.UUID) (int64, error) {
	if mock.DeleteMessagesOnChatRoomFunc == nil {
		panic("StoreMock.DeleteMessagesOnChatRoomFunc: method is nil but Store.DeleteMessagesOnChatRoom was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ChatRoomID uuid.UUID
	}{
		Ctx:        ctx,
		ChatRoomID: chatRoomID,
	}
	mock.lockDeleteMessagesOnChatRoom.Lock()
	mock.calls.DeleteMessagesOnChatRoom = append(mock.calls.DeleteMessagesOnChatRoom, callInfo)
	mock.lockDeleteMessagesOnChatRoom.Unlock()
	return mock.DeleteMessagesOnChatRoomFunc(ctx, chatRoomID)
}

// DeleteMessagesOnChatRoomCalls gets all the calls that were made to DeleteMessagesOnChatRoom.
// Check the length with:
//
//	len(mockedStore.DeleteMessagesOnChatRoomCalls())
func (mock *StoreMock) DeleteMessagesOnChatRoomCalls() []struct {
	Ctx        context.Context
	ChatRoomID uuid.UUID
} {
	var calls []struct {
		Ctx        context.Context
		ChatRoomID uuid.UUID
	}
	mock.lockDeleteMessagesOnChatRoom.RLock()
	calls = mock.calls.DeleteMessagesOnChatRoom
	mock.lockDeleteMessagesOnChatRoom.RUnlock()
	return calls
}

// DeleteMessagesOnChatRoomWithSd calls DeleteMessagesOnChatRoomWithSdFunc.
func (mock *StoreMock) DeleteMessagesOnChatRoomWithSd(ctx context.Context, sd Sd, chatRoomID uuid.UUID) (int64, error) {
	if mock.DeleteMessagesOnChatRoomWithSdFunc == nil {
		panic("StoreMock.DeleteMessagesOnChatRoomWithSdFunc: method is nil but Store.DeleteMessagesOnChatRoomWithSd was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Sd         Sd
		ChatRoomID uuid.UUID
	}{
		Ctx:        ctx,
		Sd:         sd,
		ChatRoomID: chatRoomID,
	}
	mock.lockDeleteMessagesOnChatRoomWithSd.Lock()
	mock.calls.DeleteMessagesOnChatRoomWithSd = append(mock.calls.DeleteMessagesOnChatRoomWithSd, callInfo)
	mock.lockDeleteMessagesOnChatRoomWithSd.Unlock()
	return mock.DeleteMessagesOnChatRoomWithSdFunc(ctx, sd, chatRoomID)
}

// DeleteMessagesOnChatRoomWithSdCalls gets all the calls that were made to DeleteMessagesOnChatRoomWithSd.
// Check the length with:
//
//	len(mockedStore.DeleteMessagesOnChatRoomWithSdCalls())
func (mock *StoreMock) DeleteMessagesOnChatRoomWithSdCalls() []struct {
	Ctx        context.Context
	Sd         Sd
	ChatRoomID uuid.UUID
} {
	var calls []struct {
		Ctx        context.Context
		Sd         Sd
		ChatRoomID uuid.UUID
	}
	mock.lockDeleteMessagesOnChatRoomWithSd.RLock()
	calls = mock.calls.DeleteMessagesOnChatRoomWithSd
	mock.lockDeleteMessagesOnChatRoomWithSd.RUnlock()
	return calls
}

// DeleteMimeType calls DeleteMimeTypeFunc.
func (mock *StoreMock) DeleteMimeType(ctx context.Context, mimeTypeID uuid.UUID) (int64, error) {
	if mock.DeleteMimeTypeFunc == nil {
		panic("StoreMock.DeleteMimeTypeFunc: method is nil but Store.DeleteMimeType was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		MimeTypeID uuid.UUID
	}{
		Ctx:        ctx,
		MimeTypeID: mimeTypeID,
	}
	mock.lockDeleteMimeType.Lock()
	mock.calls.DeleteMimeType = append(mock.calls.DeleteMimeType, callInfo)
	mock.lockDeleteMimeType.Unlock()
	return mock.DeleteMimeTypeFunc(ctx, mimeTypeID)
}

// DeleteMimeTypeCalls gets all the calls that were made to DeleteMimeType.
// Check the length with:
//
//	len(mockedStore.DeleteMimeTypeCalls())
func (mock *StoreMock) DeleteMimeTypeCalls() []struct {
	Ctx        context.Context
	MimeTypeID uuid.UUID
} {
	var calls []struct {
		Ctx        context.Context
		MimeTypeID uuid.UUID
	}
	mock.lockDeleteMimeType.RLock()
	calls = mock.calls.DeleteMimeType
	mock.lockDeleteMimeType.RUnlock()
	return calls
}

// DeleteMimeTypeByKey calls DeleteMimeTypeByKeyFunc.
func (mock *StoreMock) DeleteMimeTypeByKey(ctx context.Context, key string) (int64, error) {
	if mock.DeleteMimeTypeByKeyFunc == nil {
		panic("StoreMock.DeleteMimeTypeByKeyFunc: method is nil but Store.DeleteMimeTypeByKey was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockDeleteMimeTypeByKey.Lock()
	mock.calls.DeleteMimeTypeByKey = append(mock.calls.DeleteMimeTypeByKey, callInfo)
	mock.lockDeleteMimeTypeByKey.Unlock()
	return mock.DeleteMimeTypeByKeyFunc(ctx, key)
}

// DeleteMimeTypeByKeyCalls gets all the calls that were made to DeleteMimeTypeByKey.
// Check the length with:
//
//	len(mockedStore.DeleteMimeTypeByKeyCalls())
func (mock *StoreMock) DeleteMimeTypeByKeyCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockDeleteMimeTypeByKey.RLock()
	calls = mock.calls.DeleteMimeTypeByKey
	mock.lockDeleteMimeTypeByKey.RUnlock()
	return calls
}

// DeleteMimeTypeByKeyWithSd calls DeleteMimeTypeByKeyWithSdFunc.
func (mock *StoreMock) DeleteMimeTypeByKeyWithSd(ctx context.Context, sd Sd, key string) (int64, error) {
	if mock.DeleteMimeTypeByKeyWithSdFunc == nil {
		panic("StoreMock.DeleteMimeTypeByKeyWithSdFunc: method is nil but Store.DeleteMimeTypeByKeyWithSd was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}{
		Ctx: ctx,
		Sd:  sd,
		Key: key,
	}
	mock.lockDeleteMimeTypeByKeyWithSd.Lock()
	mock.calls.DeleteMimeTypeByKeyWithSd = append(mock.calls.DeleteMimeTypeByKeyWithSd, callInfo)
	mock.lockDeleteMimeTypeByKeyWithSd.Unlock()
	return mock.DeleteMimeTypeByKeyWithSdFunc(ctx, sd, key)
}

// DeleteMimeTypeByKeyWithSdCalls gets all the calls that were made to DeleteMimeTypeByKeyWithSd.
// Check the length with:
//
//	len(mockedStore.DeleteMimeTypeByKeyWithSdCalls())
func (mock *StoreMock) DeleteMimeTypeByKeyWithSdCalls() []struct {
	Ctx context.Context
	Sd  Sd
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}
	mock.lockDeleteMimeTypeByKeyWithSd.RLock()
	calls = mock.calls.DeleteMimeTypeByKeyWithSd
	mock.lockDeleteMimeTypeByKeyWithSd.RUnlock()
	return calls
}

// DeleteMimeTypeWithSd calls DeleteMimeTypeWithSdFunc.
func (mock *StoreMock) DeleteMimeTypeWithSd(ctx context.Context, sd Sd, mimeTypeID uuid.UUID) (int64, error) {
	if mock.DeleteMimeTypeWithSdFunc == nil {
		panic("StoreMock.DeleteMimeTypeWithSdFunc: method is nil but Store.DeleteMimeTypeWithSd was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Sd         Sd
		MimeTypeID uuid.UUID
	}{
		Ctx:        ctx,
		Sd:         sd,
		MimeTypeID: mimeTypeID,
	}
	mock.lockDeleteMimeTypeWithSd.Lock()
	mock.calls.DeleteMimeTypeWithSd = append(mock.calls.DeleteMimeTypeWithSd, callInfo)
	mock.lockDeleteMimeTypeWithSd.Unlock()
	return mock.DeleteMimeTypeWithSdFunc(ctx, sd, mimeTypeID)
}

// DeleteMimeTypeWithSdCalls gets all the calls that were made to DeleteMimeTypeWithSd.
// Check the length with:
//
//	len(mockedStore.DeleteMimeTypeWithSdCalls())
func (mock *StoreMock) DeleteMimeTypeWithSdCalls() []struct {
	Ctx        context.Context
	Sd         Sd
	MimeTypeID uuid.UUID
} {
	var calls []struct {
		Ctx        context.Context
		Sd         Sd
		MimeTypeID uuid.UUID
	}
	mock.lockDeleteMimeTypeWithSd.RLock()
	calls = mock.calls.DeleteMimeTypeWithSd
	mock.lockDeleteMimeTypeWithSd.RUnlock()
	return calls
}

// DeleteOrganization calls DeleteOrganizationFunc.
func (mock *StoreMock) DeleteOrganization(ctx context.Context, organizationID uuid.UUID) (int64, error) {
	if mock.DeleteOrganizationFunc == nil {
		panic("StoreMock.DeleteOrganizationFunc: method is nil but Store.DeleteOrganization was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		OrganizationID uuid.UUID
	}{
		Ctx:            ctx,
		OrganizationID: organizationID,
	}
	mock.lockDeleteOrganization.Lock()
	mock.calls.DeleteOrganization = append(mock.calls.DeleteOrganization, callInfo)
	mock.lockDeleteOrganization.Unlock()
	return mock.DeleteOrganizationFunc(ctx, organizationID)
}

// DeleteOrganizationCalls gets all the calls that were made to DeleteOrganization.
// Check the length with:
//
//	len(mockedStore.DeleteOrganizationCalls())
func (mock *StoreMock) DeleteOrganizationCalls() []struct {
	Ctx            context.Context
	OrganizationID uuid.UUID
} {
	var calls []struct {
		Ctx            context.Context
		OrganizationID uuid.UUID
	}
	mock.lockDeleteOrganization.RLock()
	calls = mock.calls.DeleteOrganization
	mock.lockDeleteOrganization.RUnlock()
	return calls
}

// DeleteOrganizationWithSd calls DeleteOrganizationWithSdFunc.
func (mock *StoreMock) DeleteOrganizationWithSd(ctx context.Context, sd Sd, organizationID uuid.UUID) (int64, error) {
	if mock.DeleteOrganizationWithSdFunc == nil {
		panic("StoreMock.DeleteOrganizationWithSdFunc: method is nil but Store.DeleteOrganizationWithSd was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		Sd             Sd
		OrganizationID uuid.UUID
	}{
		Ctx:            ctx,
		Sd:             sd,
		OrganizationID: organizationID,
	}
	mock.lockDeleteOrganizationWithSd.Lock()
	mock.calls.DeleteOrganizationWithSd = append(mock.calls.DeleteOrganizationWithSd, callInfo)
	mock.lockDeleteOrganizationWithSd.Unlock()
	return mock.DeleteOrganizationWithSdFunc(ctx, sd, organizationID)
}

// DeleteOrganizationWithSdCalls gets all the calls that were made to DeleteOrganizationWithSd.
// Check the length with:
//
//	len(mockedStore.DeleteOrganizationWithSdCalls())
func (mock *StoreMock) DeleteOrganizationWithSdCalls() []struct {
	Ctx            context.Context
	Sd             Sd
	OrganizationID uuid.UUID
} {
	var calls []struct {
		Ctx            context.Context
		Sd             Sd
		OrganizationID uuid.UUID
	}
	mock.lockDeleteOrganizationWithSd.RLock()
	calls = mock.calls.DeleteOrganizationWithSd
	mock.lockDeleteOrganizationWithSd.RUnlock()
	return calls
}

// DeletePermission calls DeletePermissionFunc.
func (mock *StoreMock) DeletePermission(ctx context.Context, permissionID uuid.UUID) (int64, error) {
	if mock.DeletePermissionFunc == nil {
		panic("StoreMock.DeletePermissionFunc: method is nil but Store.DeletePermission was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		PermissionID uuid.UUID
	}{
		Ctx:          ctx,
		PermissionID: permissionID,
	}
	mock.lockDeletePermission.Lock()
	mock.calls.DeletePermission = append(mock.calls.DeletePermission, callInfo)
	mock.lockDeletePermission.Unlock()
	return mock.DeletePermissionFunc(ctx, permissionID)
}

// DeletePermissionCalls gets all the calls that were made to DeletePermission.
// Check the length with:
//
//	len(mockedStore.DeletePermissionCalls())
func (mock *StoreMock) DeletePermissionCalls() []struct {
	Ctx          context.Context
	PermissionID uuid.UUID
} {
	var calls []struct {
		Ctx          context.Context
		PermissionID uuid.UUID
	}
	mock.lockDeletePermission.RLock()
	calls = mock.calls.DeletePermission
	mock.lockDeletePermission.RUnlock()
	return calls
}

// DeletePermissionByKey calls DeletePermissionByKeyFunc.
func (mock *StoreMock) DeletePermissionByKey(ctx context.Context, key string) (int64, error) {
	if mock.DeletePermissionByKeyFunc == nil {
		panic("StoreMock.DeletePermissionByKeyFunc: method is nil but Store.DeletePermissionByKey was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockDeletePermissionByKey.Lock()
	mock.calls.DeletePermissionByKey = append(mock.calls.DeletePermissionByKey, callInfo)
	mock.lockDeletePermissionByKey.Unlock()
	return mock.DeletePermissionByKeyFunc(ctx, key)
}

// DeletePermissionByKeyCalls gets all the calls that were made to DeletePermissionByKey.
// Check the length with:
//
//	len(mockedStore.DeletePermissionByKeyCalls())
func (mock *StoreMock) DeletePermissionByKeyCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockDeletePermissionByKey.RLock()
	calls = mock.calls.DeletePermissionByKey
	mock.lockDeletePermissionByKey.RUnlock()
	return calls
}

// DeletePermissionByKeyWithSd calls DeletePermissionByKeyWithSdFunc.
func (mock *StoreMock) DeletePermissionByKeyWithSd(ctx context.Context, sd Sd, key string) (int64, error) {
	if mock.DeletePermissionByKeyWithSdFunc == nil {
		panic("StoreMock.DeletePermissionByKeyWithSdFunc: method is nil but Store.DeletePermissionByKeyWithSd was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}{
		Ctx: ctx,
		Sd:  sd,
		Key: key,
	}
	mock.lockDeletePermissionByKeyWithSd.Lock()
	mock.calls.DeletePermissionByKeyWithSd = append(mock.calls.DeletePermissionByKeyWithSd, callInfo)
	mock.lockDeletePermissionByKeyWithSd.Unlock()
	return mock.DeletePermissionByKeyWithSdFunc(ctx, sd, key)
}

// DeletePermissionByKeyWithSdCalls gets all the calls that were made to DeletePermissionByKeyWithSd.
// Check the length with:
//
//	len(mockedStore.DeletePermissionByKeyWithSdCalls())
func (mock *StoreMock) DeletePermissionByKeyWithSdCalls() []struct {
	Ctx context.Context
	Sd  Sd
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}
	mock.lockDeletePermissionByKeyWithSd.RLock()
	calls = mock.calls.DeletePermissionByKeyWithSd
	mock.lockDeletePermissionByKeyWithSd.RUnlock()
	return calls
}

// DeletePermissionCategory calls DeletePermissionCategoryFunc.
func (mock *StoreMock) DeletePermissionCategory(ctx context.Context, permissionCategoryID uuid.UUID) (int64, error) {
	if mock.DeletePermissionCategoryFunc == nil {
		panic("StoreMock.DeletePermissionCategoryFunc: method is nil but Store.DeletePermissionCategory was just called")
	}
	callInfo := struct {
		Ctx                  context.Context
		PermissionCategoryID uuid.UUID
	}{
		Ctx:                  ctx,
		PermissionCategoryID: permissionCategoryID,
	}
	mock.lockDeletePermissionCategory.Lock()
	mock.calls.DeletePermissionCategory = append(mock.calls.DeletePermissionCategory, callInfo)
	mock.lockDeletePermissionCategory.Unlock()
	return mock.DeletePermissionCategoryFunc(ctx, permissionCategoryID)
}

// DeletePermissionCategoryCalls gets all the calls that were made to DeletePermissionCategory.
// Check the length with:
//
//	len(mockedStore.DeletePermissionCategoryCalls())
func (mock *StoreMock) DeletePermissionCategoryCalls() []struct {
	Ctx                  context.Context
	PermissionCategoryID uuid.UUID
} {
	var calls []struct {
		Ctx                  context.Context
		PermissionCategoryID uuid.UUID
	}
	mock.lockDeletePermissionCategory.RLock()
	calls = mock.calls.DeletePermissionCategory
	mock.lockDeletePermissionCategory.RUnlock()
	return calls
}

// DeletePermissionCategoryByKey calls DeletePermissionCategoryByKeyFunc.
func (mock *StoreMock) DeletePermissionCategoryByKey(ctx context.Context, key string) (int64, error) {
	if mock.DeletePermissionCategoryByKeyFunc == nil {
		panic("StoreMock.DeletePermissionCategoryByKeyFunc: method is nil but Store.DeletePermissionCategoryByKey was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockDeletePermissionCategoryByKey.Lock()
	mock.calls.DeletePermissionCategoryByKey = append(mock.calls.DeletePermissionCategoryByKey, callInfo)
	mock.lockDeletePermissionCategoryByKey.Unlock()
	return mock.DeletePermissionCategoryByKeyFunc(ctx, key)
}

// DeletePermissionCategoryByKeyCalls gets all the calls that were made to DeletePermissionCategoryByKey.
// Check the length with:
//
//	len(mockedStore.DeletePermissionCategoryByKeyCalls())
func (mock *StoreMock) DeletePermissionCategoryByKeyCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockDeletePermissionCategoryByKey.RLock()
	calls = mock.calls.DeletePermissionCategoryByKey
	mock.lockDeletePermissionCategoryByKey.RUnlock()
	return calls
}

// DeletePermissionCategoryByKeyWithSd calls DeletePermissionCategoryByKeyWithSdFunc.
func (mock *StoreMock) DeletePermissionCategoryByKeyWithSd(ctx context.Context, sd Sd, key string) (int64, error) {
	if mock.DeletePermissionCategoryByKeyWithSdFunc == nil {
		panic("StoreMock.DeletePermissionCategoryByKeyWithSdFunc: method is nil but Store.DeletePermissionCategoryByKeyWithSd was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}{
		Ctx: ctx,
		Sd:  sd,
		Key: key,
	}
	mock.lockDeletePermissionCategoryByKeyWithSd.Lock()
	mock.calls.DeletePermissionCategoryByKeyWithSd = append(mock.calls.DeletePermissionCategoryByKeyWithSd, callInfo)
	mock.lockDeletePermissionCategoryByKeyWithSd.Unlock()
	return mock.DeletePermissionCategoryByKeyWithSdFunc(ctx, sd, key)
}

// DeletePermissionCategoryByKeyWithSdCalls gets all the calls that were made to DeletePermissionCategoryByKeyWithSd.
// Check the length with:
//
//	len(mockedStore.DeletePermissionCategoryByKeyWithSdCalls())
func (mock *StoreMock) DeletePermissionCategoryByKeyWithSdCalls() []struct {
	Ctx context.Context
	Sd  Sd
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}
	mock.lockDeletePermissionCategoryByKeyWithSd.RLock()
	calls = mock.calls.DeletePermissionCategoryByKeyWithSd
	mock.lockDeletePermissionCategoryByKeyWithSd.RUnlock()
	return calls
}

// DeletePermissionCategoryWithSd calls DeletePermissionCategoryWithSdFunc.
func (mock *StoreMock) DeletePermissionCategoryWithSd(ctx context.Context, sd Sd, permissionCategoryID uuid.UUID) (int64, error) {
	if mock.DeletePermissionCategoryWithSdFunc == nil {
		panic("StoreMock.DeletePermissionCategoryWithSdFunc: method is nil but Store.DeletePermissionCategoryWithSd was just called")
	}
	callInfo := struct {
		Ctx                  context.Context
		Sd                   Sd
		PermissionCategoryID uuid.UUID
	}{
		Ctx:                  ctx,
		Sd:                   sd,
		PermissionCategoryID: permissionCategoryID,
	}
	mock.lockDeletePermissionCategoryWithSd.Lock()
	mock.calls.DeletePermissionCategoryWithSd = append(mock.calls.DeletePermissionCategoryWithSd, callInfo)
	mock.lockDeletePermissionCategoryWithSd.Unlock()
	return mock.DeletePermissionCategoryWithSdFunc(ctx, sd, permissionCategoryID)
}

// DeletePermissionCategoryWithSdCalls gets all the calls that were made to DeletePermissionCategoryWithSd.
// Check the length with:
//
//	len(mockedStore.DeletePermissionCategoryWithSdCalls())
func (mock *StoreMock) DeletePermissionCategoryWithSdCalls() []struct {
	Ctx                  context.Context
	Sd                   Sd
	PermissionCategoryID uuid.UUID
} {
	var calls []struct {
		Ctx                  context.Context
		Sd                   Sd
		PermissionCategoryID uuid.UUID
	}
	mock.lockDeletePermissionCategoryWithSd.RLock()
	calls = mock.calls.DeletePermissionCategoryWithSd
	mock.lockDeletePermissionCategoryWithSd.RUnlock()
	return calls
}

// DeletePermissionWithSd calls DeletePermissionWithSdFunc.
func (mock *StoreMock) DeletePermissionWithSd(ctx context.Context, sd Sd, permissionID uuid.UUID) (int64, error) {
	if mock.DeletePermissionWithSdFunc == nil {
		panic("StoreMock.DeletePermissionWithSdFunc: method is nil but Store.DeletePermissionWithSd was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		Sd           Sd
		PermissionID uuid.UUID
	}{
		Ctx:          ctx,
		Sd:           sd,
		PermissionID: permissionID,
	}
	mock.lockDeletePermissionWithSd.Lock()
	mock.calls.DeletePermissionWithSd = append(mock.calls.DeletePermissionWithSd, callInfo)
	mock.lockDeletePermissionWithSd.Unlock()
	return mock.DeletePermissionWithSdFunc(ctx, sd, permissionID)
}

// DeletePermissionWithSdCalls gets all the calls that were made to DeletePermissionWithSd.
// Check the length with:
//
//	len(mockedStore.DeletePermissionWithSdCalls())
func (mock *StoreMock) DeletePermissionWithSdCalls() []struct {
	Ctx          context.Context
	Sd           Sd
	PermissionID uuid.UUID
} {
	var calls []struct {
		Ctx          context.Context
		Sd           Sd
		PermissionID uuid.UUID
	}
	mock.lockDeletePermissionWithSd.RLock()
	calls = mock.calls.DeletePermissionWithSd
	mock.lockDeletePermissionWithSd.RUnlock()
	return calls
}

// DeletePolicy calls DeletePolicyFunc.
func (mock *StoreMock) DeletePolicy(ctx context.Context, policyID uuid.UUID) (int64, error) {
	if mock.DeletePolicyFunc == nil {
		panic("StoreMock.DeletePolicyFunc: method is nil but Store.DeletePolicy was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		PolicyID uuid.UUID
	}{
		Ctx:      ctx,
		PolicyID: policyID,
	}
	mock.lockDeletePolicy.Lock()
	mock.calls.DeletePolicy = append(mock.calls.DeletePolicy, callInfo)
	mock.lockDeletePolicy.Unlock()
	return mock.DeletePolicyFunc(ctx, policyID)
}

// DeletePolicyCalls gets all the calls that were made to DeletePolicy.
// Check the length with:
//
//	len(mockedStore.DeletePolicyCalls())
func (mock *StoreMock) DeletePolicyCalls() []struct {
	Ctx      context.Context
	PolicyID uuid.UUID
} {
	var calls []struct {
		Ctx      context.Context
		PolicyID uuid.UUID
	}
	mock.lockDeletePolicy.RLock()
	calls = mock.calls.DeletePolicy
	mock.lockDeletePolicy.RUnlock()
	return calls
}

// DeletePolicyByKey calls DeletePolicyByKeyFunc.
func (mock *StoreMock) DeletePolicyByKey(ctx context.Context, key string) (int64, error) {
	if mock.DeletePolicyByKeyFunc == nil {
		panic("StoreMock.DeletePolicyByKeyFunc: method is nil but Store.DeletePolicyByKey was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockDeletePolicyByKey.Lock()
	mock.calls.DeletePolicyByKey = append(mock.calls.DeletePolicyByKey, callInfo)
	mock.lockDeletePolicyByKey.Unlock()
	return mock.DeletePolicyByKeyFunc(ctx, key)
}

// DeletePolicyByKeyCalls gets all the calls that were made to DeletePolicyByKey.
// Check the length with:
//
//	len(mockedStore.DeletePolicyByKeyCalls())
func (mock *StoreMock) DeletePolicyByKeyCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockDeletePolicyByKey.RLock()
	calls = mock.calls.DeletePolicyByKey
	mock.lockDeletePolicyByKey.RUnlock()
	return calls
}

// DeletePolicyByKeyWithSd calls DeletePolicyByKeyWithSdFunc.
func (mock *StoreMock) DeletePolicyByKeyWithSd(ctx context.Context, sd Sd, key string) (int64, error) {
	if mock.DeletePolicyByKeyWithSdFunc == nil {
		panic("StoreMock.DeletePolicyByKeyWithSdFunc: method is nil but Store.DeletePolicyByKeyWithSd was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}{
		Ctx: ctx,
		Sd:  sd,
		Key: key,
	}
	mock.lockDeletePolicyByKeyWithSd.Lock()
	mock.calls.DeletePolicyByKeyWithSd = append(mock.calls.DeletePolicyByKeyWithSd, callInfo)
	mock.lockDeletePolicyByKeyWithSd.Unlock()
	return mock.DeletePolicyByKeyWithSdFunc(ctx, sd, key)
}

// DeletePolicyByKeyWithSdCalls gets all the calls that were made to DeletePolicyByKeyWithSd.
// Check the length with:
//
//	len(mockedStore.DeletePolicyByKeyWithSdCalls())
func (mock *StoreMock) DeletePolicyByKeyWithSdCalls() []struct {
	Ctx context.Context
	Sd  Sd
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}
	mock.lockDeletePolicyByKeyWithSd.RLock()
	calls = mock.calls.DeletePolicyByKeyWithSd
	mock.lockDeletePolicyByKeyWithSd.RUnlock()
	return calls
}

// DeletePolicyCategory calls DeletePolicyCategoryFunc.
func (mock *StoreMock) DeletePolicyCategory(ctx context.Context, policyCategoryID uuid.UUID) (int64, error) {
	if mock.DeletePolicyCategoryFunc == nil {
		panic("StoreMock.DeletePolicyCategoryFunc: method is nil but Store.DeletePolicyCategory was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		PolicyCategoryID uuid.UUID
	}{
		Ctx:              ctx,
		PolicyCategoryID: policyCategoryID,
	}
	mock.lockDeletePolicyCategory.Lock()
	mock.calls.DeletePolicyCategory = append(mock.calls.DeletePolicyCategory, callInfo)
	mock.lockDeletePolicyCategory.Unlock()
	return mock.DeletePolicyCategoryFunc(ctx, policyCategoryID)
}

// DeletePolicyCategoryCalls gets all the calls that were made to DeletePolicyCategory.
// Check the length with:
//
//	len(mockedStore.DeletePolicyCategoryCalls())
func (mock *StoreMock) DeletePolicyCategoryCalls() []struct {
	Ctx              context.Context
	PolicyCategoryID uuid.UUID
} {
	var calls []struct {
		Ctx              context.Context
		PolicyCategoryID uuid.UUID
	}
	mock.lockDeletePolicyCategory.RLock()
	calls = mock.calls.DeletePolicyCategory
	mock.lockDeletePolicyCategory.RUnlock()
	return calls
}

// DeletePolicyCategoryByKey calls DeletePolicyCategoryByKeyFunc.
func (mock *StoreMock) DeletePolicyCategoryByKey(ctx context.Context, key string) (int64, error) {
	if mock.DeletePolicyCategoryByKeyFunc == nil {
		panic("StoreMock.DeletePolicyCategoryByKeyFunc: method is nil but Store.DeletePolicyCategoryByKey was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockDeletePolicyCategoryByKey.Lock()
	mock.calls.DeletePolicyCategoryByKey = append(mock.calls.DeletePolicyCategoryByKey, callInfo)
	mock.lockDeletePolicyCategoryByKey.Unlock()
	return mock.DeletePolicyCategoryByKeyFunc(ctx, key)
}

// DeletePolicyCategoryByKeyCalls gets all the calls that were made to DeletePolicyCategoryByKey.
// Check the length with:
//
//	len(mockedStore.DeletePolicyCategoryByKeyCalls())
func (mock *StoreMock) DeletePolicyCategoryByKeyCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockDeletePolicyCategoryByKey.RLock()
	calls = mock.calls.DeletePolicyCategoryByKey
	mock.lockDeletePolicyCategoryByKey.RUnlock()
	return calls
}

// DeletePolicyCategoryByKeyWithSd calls DeletePolicyCategoryByKeyWithSdFunc.
func (mock *StoreMock) DeletePolicyCategoryByKeyWithSd(ctx context.Context, sd Sd, key string) (int64, error) {
	if mock.DeletePolicyCategoryByKeyWithSdFunc == nil {
		panic("StoreMock.DeletePolicyCategoryByKeyWithSdFunc: method is nil but Store.DeletePolicyCategoryByKeyWithSd was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}{
		Ctx: ctx,
		Sd:  sd,
		Key: key,
	}
	mock.lockDeletePolicyCategoryByKeyWithSd.Lock()
	mock.calls.DeletePolicyCategoryByKeyWithSd = append(mock.calls.DeletePolicyCategoryByKeyWithSd, callInfo)
	mock.lockDeletePolicyCategoryByKeyWithSd.Unlock()
	return mock.DeletePolicyCategoryByKeyWithSdFunc(ctx, sd, key)
}

// DeletePolicyCategoryByKeyWithSdCalls gets all the calls that were made to DeletePolicyCategoryByKeyWithSd.
// Check the length with:
//
//	len(mockedStore.DeletePolicyCategoryByKeyWithSdCalls())
func (mock *StoreMock) DeletePolicyCategoryByKeyWithSdCalls() []struct {
	Ctx context.Context
	Sd  Sd
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}
	mock.lockDeletePolicyCategoryByKeyWithSd.RLock()
	calls = mock.calls.DeletePolicyCategoryByKeyWithSd
	mock.lockDeletePolicyCategoryByKeyWithSd.RUnlock()
	return calls
}

// DeletePolicyCategoryWithSd calls DeletePolicyCategoryWithSdFunc.
func (mock *StoreMock) DeletePolicyCategoryWithSd(ctx context.Context, sd Sd, policyCategoryID uuid.UUID) (int64, error) {
	if mock.DeletePolicyCategoryWithSdFunc == nil {
		panic("StoreMock.DeletePolicyCategoryWithSdFunc: method is nil but Store.DeletePolicyCategoryWithSd was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		Sd               Sd
		PolicyCategoryID uuid.UUID
	}{
		Ctx:              ctx,
		Sd:               sd,
		PolicyCategoryID: policyCategoryID,
	}
	mock.lockDeletePolicyCategoryWithSd.Lock()
	mock.calls.DeletePolicyCategoryWithSd = append(mock.calls.DeletePolicyCategoryWithSd, callInfo)
	mock.lockDeletePolicyCategoryWithSd.Unlock()
	return mock.DeletePolicyCategoryWithSdFunc(ctx, sd, policyCategoryID)
}

// DeletePolicyCategoryWithSdCalls gets all the calls that were made to DeletePolicyCategoryWithSd.
// Check the length with:
//
//	len(mockedStore.DeletePolicyCategoryWithSdCalls())
func (mock *StoreMock) DeletePolicyCategoryWithSdCalls() []struct {
	Ctx              context.Context
	Sd               Sd
	PolicyCategoryID uuid.UUID
} {
	var calls []struct {
		Ctx              context.Context
		Sd               Sd
		PolicyCategoryID uuid.UUID
	}
	mock.lockDeletePolicyCategoryWithSd.RLock()
	calls = mock.calls.DeletePolicyCategoryWithSd
	mock.lockDeletePolicyCategoryWithSd.RUnlock()
	return calls
}

// DeletePolicyWithSd calls DeletePolicyWithSdFunc.
func (mock *StoreMock) DeletePolicyWithSd(ctx context.Context, sd Sd, policyID uuid.UUID) (int64, error) {
	if mock.DeletePolicyWithSdFunc == nil {
		panic("StoreMock.DeletePolicyWithSdFunc: method is nil but Store.DeletePolicyWithSd was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Sd       Sd
		PolicyID uuid.UUID
	}{
		Ctx:      ctx,
		Sd:       sd,
		PolicyID: policyID,
	}
	mock.lockDeletePolicyWithSd.Lock()
	mock.calls.DeletePolicyWithSd = append(mock.calls.DeletePolicyWithSd, callInfo)
	mock.lockDeletePolicyWithSd.Unlock()
	return mock.DeletePolicyWithSdFunc(ctx, sd, policyID)
}

// DeletePolicyWithSdCalls gets all the calls that were made to DeletePolicyWithSd.
// Check the length with:
//
//	len(mockedStore.DeletePolicyWithSdCalls())
func (mock *StoreMock) DeletePolicyWithSdCalls() []struct {
	Ctx      context.Context
	Sd       Sd
	PolicyID uuid.UUID
} {
	var calls []struct {
		Ctx      context.Context
		Sd       Sd
		PolicyID uuid.UUID
	}
	mock.lockDeletePolicyWithSd.RLock()
	calls = mock.calls.DeletePolicyWithSd
	mock.lockDeletePolicyWithSd.RUnlock()
	return calls
}

// DeleteProfessor calls DeleteProfessorFunc.
func (mock *StoreMock) DeleteProfessor(ctx context.Context, professorID uuid.UUID) (int64, error) {
	if mock.DeleteProfessorFunc == nil {
		panic("StoreMock.DeleteProfessorFunc: method is nil but Store.DeleteProfessor was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		ProfessorID uuid.UUID
	}{
		Ctx:         ctx,
		ProfessorID: professorID,
	}
	mock.lockDeleteProfessor.Lock()
	mock.calls.DeleteProfessor = append(mock.calls.DeleteProfessor, callInfo)
	mock.lockDeleteProfessor.Unlock()
	return mock.DeleteProfessorFunc(ctx, professorID)
}

// DeleteProfessorCalls gets all the calls that were made to DeleteProfessor.
// Check the length with:
//
//	len(mockedStore.DeleteProfessorCalls())
func (mock *StoreMock) DeleteProfessorCalls() []struct {
	Ctx         context.Context
	ProfessorID uuid.UUID
} {
	var calls []struct {
		Ctx         context.Context
		ProfessorID uuid.UUID
	}
	mock.lockDeleteProfessor.RLock()
	calls = mock.calls.DeleteProfessor
	mock.lockDeleteProfessor.RUnlock()
	return calls
}

// DeleteProfessorWithSd calls DeleteProfessorWithSdFunc.
func (mock *StoreMock) DeleteProfessorWithSd(ctx context.Context, sd Sd, professorID uuid.UUID) (int64, error) {
	if mock.DeleteProfessorWithSdFunc == nil {
		panic("StoreMock.DeleteProfessorWithSdFunc: method is nil but Store.DeleteProfessorWithSd was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Sd          Sd
		ProfessorID uuid.UUID
	}{
		Ctx:         ctx,
		Sd:          sd,
		ProfessorID: professorID,
	}
	mock.lockDeleteProfessorWithSd.Lock()
	mock.calls.DeleteProfessorWithSd = append(mock.calls.DeleteProfessorWithSd, callInfo)
	mock.lockDeleteProfessorWithSd.Unlock()
	return mock.DeleteProfessorWithSdFunc(ctx, sd, professorID)
}

// DeleteProfessorWithSdCalls gets all the calls that were made to DeleteProfessorWithSd.
// Check the length with:
//
//	len(mockedStore.DeleteProfessorWithSdCalls())
func (mock *StoreMock) DeleteProfessorWithSdCalls() []struct {
	Ctx         context.Context
	Sd          Sd
	ProfessorID uuid.UUID
} {
	var calls []struct {
		Ctx         context.Context
		Sd          Sd
		ProfessorID uuid.UUID
	}
	mock.lockDeleteProfessorWithSd.RLock()
	calls = mock.calls.DeleteProfessorWithSd
	mock.lockDeleteProfessorWithSd.RUnlock()
	return calls
}

// DeleteRecordType calls DeleteRecordTypeFunc.
func (mock *StoreMock) DeleteRecordType(ctx context.Context, recordTypeID uuid.UUID) (int64, error) {
	if mock.DeleteRecordTypeFunc == nil {
		panic("StoreMock.DeleteRecordTypeFunc: method is nil but Store.DeleteRecordType was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		RecordTypeID uuid.UUID
	}{
		Ctx:          ctx,
		RecordTypeID: recordTypeID,
	}
	mock.lockDeleteRecordType.Lock()
	mock.calls.DeleteRecordType = append(mock.calls.DeleteRecordType, callInfo)
	mock.lockDeleteRecordType.Unlock()
	return mock.DeleteRecordTypeFunc(ctx, recordTypeID)
}

// DeleteRecordTypeCalls gets all the calls that were made to DeleteRecordType.
// Check the length with:
//
//	len(mockedStore.DeleteRecordTypeCalls())
func (mock *StoreMock) DeleteRecordTypeCalls() []struct {
	Ctx          context.Context
	RecordTypeID uuid.UUID
} {
	var calls []struct {
		Ctx          context.Context
		RecordTypeID uuid.UUID
	}
	mock.lockDeleteRecordType.RLock()
	calls = mock.calls.DeleteRecordType
	mock.lockDeleteRecordType.RUnlock()
	return calls
}

// DeleteRecordTypeByKey calls DeleteRecordTypeByKeyFunc.
func (mock *StoreMock) DeleteRecordTypeByKey(ctx context.Context, key string) (int64, error) {
	if mock.DeleteRecordTypeByKeyFunc == nil {
		panic("StoreMock.DeleteRecordTypeByKeyFunc: method is nil but Store.DeleteRecordTypeByKey was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockDeleteRecordTypeByKey.Lock()
	mock.calls.DeleteRecordTypeByKey = append(mock.calls.DeleteRecordTypeByKey, callInfo)
	mock.lockDeleteRecordTypeByKey.Unlock()
	return mock.DeleteRecordTypeByKeyFunc(ctx, key)
}

// DeleteRecordTypeByKeyCalls gets all the calls that were made to DeleteRecordTypeByKey.
// Check the length with:
//
//	len(mockedStore.DeleteRecordTypeByKeyCalls())
func (mock *StoreMock) DeleteRecordTypeByKeyCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockDeleteRecordTypeByKey.RLock()
	calls = mock.calls.DeleteRecordTypeByKey
	mock.lockDeleteRecordTypeByKey.RUnlock()
	return calls
}

// DeleteRecordTypeByKeyWithSd calls DeleteRecordTypeByKeyWithSdFunc.
func (mock *StoreMock) DeleteRecordTypeByKeyWithSd(ctx context.Context, sd Sd, key string) (int64, error) {
	if mock.DeleteRecordTypeByKeyWithSdFunc == nil {
		panic("StoreMock.DeleteRecordTypeByKeyWithSdFunc: method is nil but Store.DeleteRecordTypeByKeyWithSd was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}{
		Ctx: ctx,
		Sd:  sd,
		Key: key,
	}
	mock.lockDeleteRecordTypeByKeyWithSd.Lock()
	mock.calls.DeleteRecordTypeByKeyWithSd = append(mock.calls.DeleteRecordTypeByKeyWithSd, callInfo)
	mock.lockDeleteRecordTypeByKeyWithSd.Unlock()
	return mock.DeleteRecordTypeByKeyWithSdFunc(ctx, sd, key)
}

// DeleteRecordTypeByKeyWithSdCalls gets all the calls that were made to DeleteRecordTypeByKeyWithSd.
// Check the length with:
//
//	len(mockedStore.DeleteRecordTypeByKeyWithSdCalls())
func (mock *StoreMock) DeleteRecordTypeByKeyWithSdCalls() []struct {
	Ctx context.Context
	Sd  Sd
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}
	mock.lockDeleteRecordTypeByKeyWithSd.RLock()
	calls = mock.calls.DeleteRecordTypeByKeyWithSd
	mock.lockDeleteRecordTypeByKeyWithSd.RUnlock()
	return calls
}

// DeleteRecordTypeWithSd calls DeleteRecordTypeWithSdFunc.
func (mock *StoreMock) DeleteRecordTypeWithSd(ctx context.Context, sd Sd, recordTypeID uuid.UUID) (int64, error) {
	if mock.DeleteRecordTypeWithSdFunc == nil {
		panic("StoreMock.DeleteRecordTypeWithSdFunc: method is nil but Store.DeleteRecordTypeWithSd was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		Sd           Sd
		RecordTypeID uuid.UUID
	}{
		Ctx:          ctx,
		Sd:           sd,
		RecordTypeID: recordTypeID,
	}
	mock.lockDeleteRecordTypeWithSd.Lock()
	mock.calls.DeleteRecordTypeWithSd = append(mock.calls.DeleteRecordTypeWithSd, callInfo)
	mock.lockDeleteRecordTypeWithSd.Unlock()
	return mock.DeleteRecordTypeWithSdFunc(ctx, sd, recordTypeID)
}

// DeleteRecordTypeWithSdCalls gets all the calls that were made to DeleteRecordTypeWithSd.
// Check the length with:
//
//	len(mockedStore.DeleteRecordTypeWithSdCalls())
func (mock *StoreMock) DeleteRecordTypeWithSdCalls() []struct {
	Ctx          context.Context
	Sd           Sd
	RecordTypeID uuid.UUID
} {
	var calls []struct {
		Ctx          context.Context
		Sd           Sd
		RecordTypeID uuid.UUID
	}
	mock.lockDeleteRecordTypeWithSd.RLock()
	calls = mock.calls.DeleteRecordTypeWithSd
	mock.lockDeleteRecordTypeWithSd.RUnlock()
	return calls
}

// DeleteRole calls DeleteRoleFunc.
func (mock *StoreMock) DeleteRole(ctx context.Context, roleID uuid.UUID) (int64, error) {
	if mock.DeleteRoleFunc == nil {
		panic("StoreMock.DeleteRoleFunc: method is nil but Store.DeleteRole was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		RoleID uuid.UUID
	}{
		Ctx:    ctx,
		RoleID: roleID,
	}
	mock.lockDeleteRole.Lock()
	mock.calls.DeleteRole = append(mock.calls.DeleteRole, callInfo)
	mock.lockDeleteRole.Unlock()
	return mock.DeleteRoleFunc(ctx, roleID)
}

// DeleteRoleCalls gets all the calls that were made to DeleteRole.
// Check the length with:
//
//	len(mockedStore.DeleteRoleCalls())
func (mock *StoreMock) DeleteRoleCalls() []struct {
	Ctx    context.Context
	RoleID uuid.UUID
} {
	var calls []struct {
		Ctx    context.Context
		RoleID uuid.UUID
	}
	mock.lockDeleteRole.RLock()
	calls = mock.calls.DeleteRole
	mock.lockDeleteRole.RUnlock()
	return calls
}

// DeleteRoleWithSd calls DeleteRoleWithSdFunc.
func (mock *StoreMock) DeleteRoleWithSd(ctx context.Context, sd Sd, roleID uuid.UUID) (int64, error) {
	if mock.DeleteRoleWithSdFunc == nil {
		panic("StoreMock.DeleteRoleWithSdFunc: method is nil but Store.DeleteRoleWithSd was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Sd     Sd
		RoleID uuid.UUID
	}{
		Ctx:    ctx,
		Sd:     sd,
		RoleID: roleID,
	}
	mock.lockDeleteRoleWithSd.Lock()
	mock.calls.DeleteRoleWithSd = append(mock.calls.DeleteRoleWithSd, callInfo)
	mock.lockDeleteRoleWithSd.Unlock()
	return mock.DeleteRoleWithSdFunc(ctx, sd, roleID)
}

// DeleteRoleWithSdCalls gets all the calls that were made to DeleteRoleWithSd.
// Check the length with:
//
//	len(mockedStore.DeleteRoleWithSdCalls())
func (mock *StoreMock) DeleteRoleWithSdCalls() []struct {
	Ctx    context.Context
	Sd     Sd
	RoleID uuid.UUID
} {
	var calls []struct {
		Ctx    context.Context
		Sd     Sd
		RoleID uuid.UUID
	}
	mock.lockDeleteRoleWithSd.RLock()
	calls = mock.calls.DeleteRoleWithSd
	mock.lockDeleteRoleWithSd.RUnlock()
	return calls
}

// DeleteStudent calls DeleteStudentFunc.
func (mock *StoreMock) DeleteStudent(ctx context.Context, studentID uuid.UUID) (int64, error) {
	if mock.DeleteStudentFunc == nil {
		panic("StoreMock.DeleteStudentFunc: method is nil but Store.DeleteStudent was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		StudentID uuid.UUID
	}{
		Ctx:       ctx,
		StudentID: studentID,
	}
	mock.lockDeleteStudent.Lock()
	mock.calls.DeleteStudent = append(mock.calls.DeleteStudent, callInfo)
	mock.lockDeleteStudent.Unlock()
	return mock.DeleteStudentFunc(ctx, studentID)
}

// DeleteStudentCalls gets all the calls that were made to DeleteStudent.
// Check the length with:
//
//	len(mockedStore.DeleteStudentCalls())
func (mock *StoreMock) DeleteStudentCalls() []struct {
	Ctx       context.Context
	StudentID uuid.UUID
} {
	var calls []struct {
		Ctx       context.Context
		StudentID uuid.UUID
	}
	mock.lockDeleteStudent.RLock()
	calls = mock.calls.DeleteStudent
	mock.lockDeleteStudent.RUnlock()
	return calls
}

// DeleteStudentWithSd calls DeleteStudentWithSdFunc.
func (mock *StoreMock) DeleteStudentWithSd(ctx context.Context, sd Sd, studentID uuid.UUID) (int64, error) {
	if mock.DeleteStudentWithSdFunc == nil {
		panic("StoreMock.DeleteStudentWithSdFunc: method is nil but Store.DeleteStudentWithSd was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Sd        Sd
		StudentID uuid.UUID
	}{
		Ctx:       ctx,
		Sd:        sd,
		StudentID: studentID,
	}
	mock.lockDeleteStudentWithSd.Lock()
	mock.calls.DeleteStudentWithSd = append(mock.calls.DeleteStudentWithSd, callInfo)
	mock.lockDeleteStudentWithSd.Unlock()
	return mock.DeleteStudentWithSdFunc(ctx, sd, studentID)
}

// DeleteStudentWithSdCalls gets all the calls that were made to DeleteStudentWithSd.
// Check the length with:
//
//	len(mockedStore.DeleteStudentWithSdCalls())
func (mock *StoreMock) DeleteStudentWithSdCalls() []struct {
	Ctx       context.Context
	Sd        Sd
	StudentID uuid.UUID
} {
	var calls []struct {
		Ctx       context.Context
		Sd        Sd
		StudentID uuid.UUID
	}
	mock.lockDeleteStudentWithSd.RLock()
	calls = mock.calls.DeleteStudentWithSd
	mock.lockDeleteStudentWithSd.RUnlock()
	return calls
}

// DetachAttachedMessage calls DetachAttachedMessageFunc.
func (mock *StoreMock) DetachAttachedMessage(ctx context.Context, attachedMessageID uuid.UUID) (int64, error) {
	if mock.DetachAttachedMessageFunc == nil {
		panic("StoreMock.DetachAttachedMessageFunc: method is nil but Store.DetachAttachedMessage was just called")
	}
	callInfo := struct {
		Ctx               context.Context
		AttachedMessageID uuid.UUID
	}{
		Ctx:               ctx,
		AttachedMessageID: attachedMessageID,
	}
	mock.lockDetachAttachedMessage.Lock()
	mock.calls.DetachAttachedMessage = append(mock.calls.DetachAttachedMessage, callInfo)
	mock.lockDetachAttachedMessage.Unlock()
	return mock.DetachAttachedMessageFunc(ctx, attachedMessageID)
}

// DetachAttachedMessageCalls gets all the calls that were made to DetachAttachedMessage.
// Check the length with:
//
//	len(mockedStore.DetachAttachedMessageCalls())
func (mock *StoreMock) DetachAttachedMessageCalls() []struct {
	Ctx               context.Context
	AttachedMessageID uuid.UUID
} {
	var calls []struct {
		Ctx               context.Context
		AttachedMessageID uuid.UUID
	}
	mock.lockDetachAttachedMessage.RLock()
	calls = mock.calls.DetachAttachedMessage
	mock.lockDetachAttachedMessage.RUnlock()
	return calls
}

// DetachAttachedMessageWithSd calls DetachAttachedMessageWithSdFunc.
func (mock *StoreMock) DetachAttachedMessageWithSd(ctx context.Context, sd Sd, attachedMessageID uuid.UUID) (int64, error) {
	if mock.DetachAttachedMessageWithSdFunc == nil {
		panic("StoreMock.DetachAttachedMessageWithSdFunc: method is nil but Store.DetachAttachedMessageWithSd was just called")
	}
	callInfo := struct {
		Ctx               context.Context
		Sd                Sd
		AttachedMessageID uuid.UUID
	}{
		Ctx:               ctx,
		Sd:                sd,
		AttachedMessageID: attachedMessageID,
	}
	mock.lockDetachAttachedMessageWithSd.Lock()
	mock.calls.DetachAttachedMessageWithSd = append(mock.calls.DetachAttachedMessageWithSd, callInfo)
	mock.lockDetachAttachedMessageWithSd.Unlock()
	return mock.DetachAttachedMessageWithSdFunc(ctx, sd, attachedMessageID)
}

// DetachAttachedMessageWithSdCalls gets all the calls that were made to DetachAttachedMessageWithSd.
// Check the length with:
//
//	len(mockedStore.DetachAttachedMessageWithSdCalls())
func (mock *StoreMock) DetachAttachedMessageWithSdCalls() []struct {
	Ctx               context.Context
	Sd                Sd
	AttachedMessageID uuid.UUID
} {
	var calls []struct {
		Ctx               context.Context
		Sd                Sd
		AttachedMessageID uuid.UUID
	}
	mock.lockDetachAttachedMessageWithSd.RLock()
	calls = mock.calls.DetachAttachedMessageWithSd
	mock.lockDetachAttachedMessageWithSd.RUnlock()
	return calls
}

// DetachItemsOnMessage calls DetachItemsOnMessageFunc.
func (mock *StoreMock) DetachItemsOnMessage(ctx context.Context, messageID uuid.UUID) (int64, error) {
	if mock.DetachItemsOnMessageFunc == nil {
		panic("StoreMock.DetachItemsOnMessageFunc: method is nil but Store.DetachItemsOnMessage was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		MessageID uuid.UUID
	}{
		Ctx:       ctx,
		MessageID: messageID,
	}
	mock.lockDetachItemsOnMessage.Lock()
	mock.calls.DetachItemsOnMessage = append(mock.calls.DetachItemsOnMessage, callInfo)
	mock.lockDetachItemsOnMessage.Unlock()
	return mock.DetachItemsOnMessageFunc(ctx, messageID)
}

// DetachItemsOnMessageCalls gets all the calls that were made to DetachItemsOnMessage.
// Check the length with:
//
//	len(mockedStore.DetachItemsOnMessageCalls())
func (mock *StoreMock) DetachItemsOnMessageCalls() []struct {
	Ctx       context.Context
	MessageID uuid.UUID
} {
	var calls []struct {
		Ctx       context.Context
		MessageID uuid.UUID
	}
	mock.lockDetachItemsOnMessage.RLock()
	calls = mock.calls.DetachItemsOnMessage
	mock.lockDetachItemsOnMessage.RUnlock()
	return calls
}

// DetachItemsOnMessageWithSd calls DetachItemsOnMessageWithSdFunc.
func (mock *StoreMock) DetachItemsOnMessageWithSd(ctx context.Context, sd Sd, messageID uuid.UUID) (int64, error) {
	if mock.DetachItemsOnMessageWithSdFunc == nil {
		panic("StoreMock.DetachItemsOnMessageWithSdFunc: method is nil but Store.DetachItemsOnMessageWithSd was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Sd        Sd
		MessageID uuid.UUID
	}{
		Ctx:       ctx,
		Sd:        sd,
		MessageID: messageID,
	}
	mock.lockDetachItemsOnMessageWithSd.Lock()
	mock.calls.DetachItemsOnMessageWithSd = append(mock.calls.DetachItemsOnMessageWithSd, callInfo)
	mock.lockDetachItemsOnMessageWithSd.Unlock()
	return mock.DetachItemsOnMessageWithSdFunc(ctx, sd, messageID)
}

// DetachItemsOnMessageWithSdCalls gets all the calls that were made to DetachItemsOnMessageWithSd.
// Check the length with:
//
//	len(mockedStore.DetachItemsOnMessageWithSdCalls())
func (mock *StoreMock) DetachItemsOnMessageWithSdCalls() []struct {
	Ctx       context.Context
	Sd        Sd
	MessageID uuid.UUID
} {
	var calls []struct {
		Ctx       context.Context
		Sd        Sd
		MessageID uuid.UUID
	}
	mock.lockDetachItemsOnMessageWithSd.RLock()
	calls = mock.calls.DetachItemsOnMessageWithSd
	mock.lockDetachItemsOnMessageWithSd.RUnlock()
	return calls
}

// DetachItemsOnMessages calls DetachItemsOnMessagesFunc.
func (mock *StoreMock) DetachItemsOnMessages(ctx context.Context, messageIDs []uuid.UUID) (int64, error) {
	if mock.DetachItemsOnMessagesFunc == nil {
		panic("StoreMock.DetachItemsOnMessagesFunc: method is nil but Store.DetachItemsOnMessages was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		MessageIDs []uuid.UUID
	}{
		Ctx:        ctx,
		MessageIDs: messageIDs,
	}
	mock.lockDetachItemsOnMessages.Lock()
	mock.calls.DetachItemsOnMessages = append(mock.calls.DetachItemsOnMessages, callInfo)
	mock.lockDetachItemsOnMessages.Unlock()
	return mock.DetachItemsOnMessagesFunc(ctx, messageIDs)
}

// DetachItemsOnMessagesCalls gets all the calls that were made to DetachItemsOnMessages.
// Check the length with:
//
//	len(mockedStore.DetachItemsOnMessagesCalls())
func (mock *StoreMock) DetachItemsOnMessagesCalls() []struct {
	Ctx        context.Context
	MessageIDs []uuid.UUID
} {
	var calls []struct {
		Ctx        context.Context
		MessageIDs []uuid.UUID
	}
	mock.lockDetachItemsOnMessages.RLock()
	calls = mock.calls.DetachItemsOnMessages
	mock.lockDetachItemsOnMessages.RUnlock()
	return calls
}

// DetachItemsOnMessagesWithSd calls DetachItemsOnMessagesWithSdFunc.
func (mock *StoreMock) DetachItemsOnMessagesWithSd(ctx context.Context, sd Sd, messageIDs []uuid.UUID) (int64, error) {
	if mock.DetachItemsOnMessagesWithSdFunc == nil {
		panic("StoreMock.DetachItemsOnMessagesWithSdFunc: method is nil but Store.DetachItemsOnMessagesWithSd was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Sd         Sd
		MessageIDs []uuid.UUID
	}{
		Ctx:        ctx,
		Sd:         sd,
		MessageIDs: messageIDs,
	}
	mock.lockDetachItemsOnMessagesWithSd.Lock()
	mock.calls.DetachItemsOnMessagesWithSd = append(mock.calls.DetachItemsOnMessagesWithSd, callInfo)
	mock.lockDetachItemsOnMessagesWithSd.Unlock()
	return mock.DetachItemsOnMessagesWithSdFunc(ctx, sd, messageIDs)
}

// DetachItemsOnMessagesWithSdCalls gets all the calls that were made to DetachItemsOnMessagesWithSd.
// Check the length with:
//
//	len(mockedStore.DetachItemsOnMessagesWithSdCalls())
func (mock *StoreMock) DetachItemsOnMessagesWithSdCalls() []struct {
	Ctx        context.Context
	Sd         Sd
	MessageIDs []uuid.UUID
} {
	var calls []struct {
		Ctx        context.Context
		Sd         Sd
		MessageIDs []uuid.UUID
	}
	mock.lockDetachItemsOnMessagesWithSd.RLock()
	calls = mock.calls.DetachItemsOnMessagesWithSd
	mock.lockDetachItemsOnMessagesWithSd.RUnlock()
	return calls
}

// DisassociatePolicyOnRole calls DisassociatePolicyOnRoleFunc.
func (mock *StoreMock) DisassociatePolicyOnRole(ctx context.Context, roleID uuid.UUID) (int64, error) {
	if mock.DisassociatePolicyOnRoleFunc == nil {
		panic("StoreMock.DisassociatePolicyOnRoleFunc: method is nil but Store.DisassociatePolicyOnRole was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		RoleID uuid.UUID
	}{
		Ctx:    ctx,
		RoleID: roleID,
	}
	mock.lockDisassociatePolicyOnRole.Lock()
	mock.calls.DisassociatePolicyOnRole = append(mock.calls.DisassociatePolicyOnRole, callInfo)
	mock.lockDisassociatePolicyOnRole.Unlock()
	return mock.DisassociatePolicyOnRoleFunc(ctx, roleID)
}

// DisassociatePolicyOnRoleCalls gets all the calls that were made to DisassociatePolicyOnRole.
// Check the length with:
//
//	len(mockedStore.DisassociatePolicyOnRoleCalls())
func (mock *StoreMock) DisassociatePolicyOnRoleCalls() []struct {
	Ctx    context.Context
	RoleID uuid.UUID
} {
	var calls []struct {
		Ctx    context.Context
		RoleID uuid.UUID
	}
	mock.lockDisassociatePolicyOnRole.RLock()
	calls = mock.calls.DisassociatePolicyOnRole
	mock.lockDisassociatePolicyOnRole.RUnlock()
	return calls
}

// DisassociatePolicyOnRoleWithSd calls DisassociatePolicyOnRoleWithSdFunc.
func (mock *StoreMock) DisassociatePolicyOnRoleWithSd(ctx context.Context, sd Sd, roleID uuid.UUID) (int64, error) {
	if mock.DisassociatePolicyOnRoleWithSdFunc == nil {
		panic("StoreMock.DisassociatePolicyOnRoleWithSdFunc: method is nil but Store.DisassociatePolicyOnRoleWithSd was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Sd     Sd
		RoleID uuid.UUID
	}{
		Ctx:    ctx,
		Sd:     sd,
		RoleID: roleID,
	}
	mock.lockDisassociatePolicyOnRoleWithSd.Lock()
	mock.calls.DisassociatePolicyOnRoleWithSd = append(mock.calls.DisassociatePolicyOnRoleWithSd, callInfo)
	mock.lockDisassociatePolicyOnRoleWithSd.Unlock()
	return mock.DisassociatePolicyOnRoleWithSdFunc(ctx, sd, roleID)
}

// DisassociatePolicyOnRoleWithSdCalls gets all the calls that were made to DisassociatePolicyOnRoleWithSd.
// Check the length with:
//
//	len(mockedStore.DisassociatePolicyOnRoleWithSdCalls())
func (mock *StoreMock) DisassociatePolicyOnRoleWithSdCalls() []struct {
	Ctx    context.Context
	Sd     Sd
	RoleID uuid.UUID
} {
	var calls []struct {
		Ctx    context.Context
		Sd     Sd
		RoleID uuid.UUID
	}
	mock.lockDisassociatePolicyOnRoleWithSd.RLock()
	calls = mock.calls.DisassociatePolicyOnRoleWithSd
	mock.lockDisassociatePolicyOnRoleWithSd.RUnlock()
	return calls
}

// DisassociatePolicyOnRoles calls DisassociatePolicyOnRolesFunc.
func (mock *StoreMock) DisassociatePolicyOnRoles(ctx context.Context, roleIDs []uuid.UUID) (int64, error) {
	if mock.DisassociatePolicyOnRolesFunc == nil {
		panic("StoreMock.DisassociatePolicyOnRolesFunc: method is nil but Store.DisassociatePolicyOnRoles was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		RoleIDs []uuid.UUID
	}{
		Ctx:     ctx,
		RoleIDs: roleIDs,
	}
	mock.lockDisassociatePolicyOnRoles.Lock()
	mock.calls.DisassociatePolicyOnRoles = append(mock.calls.DisassociatePolicyOnRoles, callInfo)
	mock.lockDisassociatePolicyOnRoles.Unlock()
	return mock.DisassociatePolicyOnRolesFunc(ctx, roleIDs)
}

// DisassociatePolicyOnRolesCalls gets all the calls that were made to DisassociatePolicyOnRoles.
// Check the length with:
//
//	len(mockedStore.DisassociatePolicyOnRolesCalls())
func (mock *StoreMock) DisassociatePolicyOnRolesCalls() []struct {
	Ctx     context.Context
	RoleIDs []uuid.UUID
} {
	var calls []struct {
		Ctx     context.Context
		RoleIDs []uuid.UUID
	}
	mock.lockDisassociatePolicyOnRoles.RLock()
	calls = mock.calls.DisassociatePolicyOnRoles
	mock.lockDisassociatePolicyOnRoles.RUnlock()
	return calls
}

// DisassociatePolicyOnRolesWithSd calls DisassociatePolicyOnRolesWithSdFunc.
func (mock *StoreMock) DisassociatePolicyOnRolesWithSd(ctx context.Context, sd Sd, roleIDs []uuid.UUID) (int64, error) {
	if mock.DisassociatePolicyOnRolesWithSdFunc == nil {
		panic("StoreMock.DisassociatePolicyOnRolesWithSdFunc: method is nil but Store.DisassociatePolicyOnRolesWithSd was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Sd      Sd
		RoleIDs []uuid.UUID
	}{
		Ctx:     ctx,
		Sd:      sd,
		RoleIDs: roleIDs,
	}
	mock.lockDisassociatePolicyOnRolesWithSd.Lock()
	mock.calls.DisassociatePolicyOnRolesWithSd = append(mock.calls.DisassociatePolicyOnRolesWithSd, callInfo)
	mock.lockDisassociatePolicyOnRolesWithSd.Unlock()
	return mock.DisassociatePolicyOnRolesWithSdFunc(ctx, sd, roleIDs)
}

// DisassociatePolicyOnRolesWithSdCalls gets all the calls that were made to DisassociatePolicyOnRolesWithSd.
// Check the length with:
//
//	len(mockedStore.DisassociatePolicyOnRolesWithSdCalls())
func (mock *StoreMock) DisassociatePolicyOnRolesWithSdCalls() []struct {
	Ctx     context.Context
	Sd      Sd
	RoleIDs []uuid.UUID
} {
	var calls []struct {
		Ctx     context.Context
		Sd      Sd
		RoleIDs []uuid.UUID
	}
	mock.lockDisassociatePolicyOnRolesWithSd.RLock()
	calls = mock.calls.DisassociatePolicyOnRolesWithSd
	mock.lockDisassociatePolicyOnRolesWithSd.RUnlock()
	return calls
}

// DisassociateRole calls DisassociateRoleFunc.
func (mock *StoreMock) DisassociateRole(ctx context.Context, roleID uuid.UUID, policyID uuid.UUID) (int64, error) {
	if mock.DisassociateRoleFunc == nil {
		panic("StoreMock.DisassociateRoleFunc: method is nil but Store.DisassociateRole was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		RoleID   uuid.UUID
		PolicyID uuid.UUID
	}{
		Ctx:      ctx,
		RoleID:   roleID,
		PolicyID: policyID,
	}
	mock.lockDisassociateRole.Lock()
	mock.calls.DisassociateRole = append(mock.calls.DisassociateRole, callInfo)
	mock.lockDisassociateRole.Unlock()
	return mock.DisassociateRoleFunc(ctx, roleID, policyID)
}

// DisassociateRoleCalls gets all the calls that were made to DisassociateRole.
// Check the length with:
//
//	len(mockedStore.DisassociateRoleCalls())
func (mock *StoreMock) DisassociateRoleCalls() []struct {
	Ctx      context.Context
	RoleID   uuid.UUID
	PolicyID uuid.UUID
} {
	var calls []struct {
		Ctx      context.Context
		RoleID   uuid.UUID
		PolicyID uuid.UUID
	}
	mock.lockDisassociateRole.RLock()
	calls = mock.calls.DisassociateRole
	mock.lockDisassociateRole.RUnlock()
	return calls
}

// DisassociateRoleOnPolicies calls DisassociateRoleOnPoliciesFunc.
func (mock *StoreMock) DisassociateRoleOnPolicies(ctx context.Context, policyIDs []uuid.UUID) (int64, error) {
	if mock.DisassociateRoleOnPoliciesFunc == nil {
		panic("StoreMock.DisassociateRoleOnPoliciesFunc: method is nil but Store.DisassociateRoleOnPolicies was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		PolicyIDs []uuid.UUID
	}{
		Ctx:       ctx,
		PolicyIDs: policyIDs,
	}
	mock.lockDisassociateRoleOnPolicies.Lock()
	mock.calls.DisassociateRoleOnPolicies = append(mock.calls.DisassociateRoleOnPolicies, callInfo)
	mock.lockDisassociateRoleOnPolicies.Unlock()
	return mock.DisassociateRoleOnPoliciesFunc(ctx, policyIDs)
}

// DisassociateRoleOnPoliciesCalls gets all the calls that were made to DisassociateRoleOnPolicies.
// Check the length with:
//
//	len(mockedStore.DisassociateRoleOnPoliciesCalls())
func (mock *StoreMock) DisassociateRoleOnPoliciesCalls() []struct {
	Ctx       context.Context
	PolicyIDs []uuid.UUID
} {
	var calls []struct {
		Ctx       context.Context
		PolicyIDs []uuid.UUID
	}
	mock.lockDisassociateRoleOnPolicies.RLock()
	calls = mock.calls.DisassociateRoleOnPolicies
	mock.lockDisassociateRoleOnPolicies.RUnlock()
	return calls
}

// DisassociateRoleOnPoliciesWithSd calls DisassociateRoleOnPoliciesWithSdFunc.
func (mock *StoreMock) DisassociateRoleOnPoliciesWithSd(ctx context.Context, sd Sd, policyIDs []uuid.UUID) (int64, error) {
	if mock.DisassociateRoleOnPoliciesWithSdFunc == nil {
		panic("StoreMock.DisassociateRoleOnPoliciesWithSdFunc: method is nil but Store.DisassociateRoleOnPoliciesWithSd was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Sd        Sd
		PolicyIDs []uuid.UUID
	}{
		Ctx:       ctx,
		Sd:        sd,
		PolicyIDs: policyIDs,
	}
	mock.lockDisassociateRoleOnPoliciesWithSd.Lock()
	mock.calls.DisassociateRoleOnPoliciesWithSd = append(mock.calls.DisassociateRoleOnPoliciesWithSd, callInfo)
	mock.lockDisassociateRoleOnPoliciesWithSd.Unlock()
	return mock.DisassociateRoleOnPoliciesWithSdFunc(ctx, sd, policyIDs)
}

// DisassociateRoleOnPoliciesWithSdCalls gets all the calls that were made to DisassociateRoleOnPoliciesWithSd.
// Check the length with:
//
//	len(mockedStore.DisassociateRoleOnPoliciesWithSdCalls())
func (mock *StoreMock) DisassociateRoleOnPoliciesWithSdCalls() []struct {
	Ctx       context.Context
	Sd        Sd
	PolicyIDs []uuid.UUID
} {
	var calls []struct {
		Ctx       context.Context
		Sd        Sd
		PolicyIDs []uuid.UUID
	}
	mock.lockDisassociateRoleOnPoliciesWithSd.RLock()
	calls = mock.calls.DisassociateRoleOnPoliciesWithSd
	mock.lockDisassociateRoleOnPoliciesWithSd.RUnlock()
	return calls
}

// DisassociateRoleOnPolicy calls DisassociateRoleOnPolicyFunc.
func (mock *StoreMock) DisassociateRoleOnPolicy(ctx context.Context, policyID uuid.UUID) (int64, error) {
	if mock.DisassociateRoleOnPolicyFunc == nil {
		panic("StoreMock.DisassociateRoleOnPolicyFunc: method is nil but Store.DisassociateRoleOnPolicy was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		PolicyID uuid.UUID
	}{
		Ctx:      ctx,
		PolicyID: policyID,
	}
	mock.lockDisassociateRoleOnPolicy.Lock()
	mock.calls.DisassociateRoleOnPolicy = append(mock.calls.DisassociateRoleOnPolicy, callInfo)
	mock.lockDisassociateRoleOnPolicy.Unlock()
	return mock.DisassociateRoleOnPolicyFunc(ctx, policyID)
}

// DisassociateRoleOnPolicyCalls gets all the calls that were made to DisassociateRoleOnPolicy.
// Check the length with:
//
//	len(mockedStore.DisassociateRoleOnPolicyCalls())
func (mock *StoreMock) DisassociateRoleOnPolicyCalls() []struct {
	Ctx      context.Context
	PolicyID uuid.UUID
} {
	var calls []struct {
		Ctx      context.Context
		PolicyID uuid.UUID
	}
	mock.lockDisassociateRoleOnPolicy.RLock()
	calls = mock.calls.DisassociateRoleOnPolicy
	mock.lockDisassociateRoleOnPolicy.RUnlock()
	return calls
}

// DisassociateRoleOnPolicyWithSd calls DisassociateRoleOnPolicyWithSdFunc.
func (mock *StoreMock) DisassociateRoleOnPolicyWithSd(ctx context.Context, sd Sd, policyID uuid.UUID) (int64, error) {
	if mock.DisassociateRoleOnPolicyWithSdFunc == nil {
		panic("StoreMock.DisassociateRoleOnPolicyWithSdFunc: method is nil but Store.DisassociateRoleOnPolicyWithSd was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Sd       Sd
		PolicyID uuid.UUID
	}{
		Ctx:      ctx,
		Sd:       sd,
		PolicyID: policyID,
	}
	mock.lockDisassociateRoleOnPolicyWithSd.Lock()
	mock.calls.DisassociateRoleOnPolicyWithSd = append(mock.calls.DisassociateRoleOnPolicyWithSd, callInfo)
	mock.lockDisassociateRoleOnPolicyWithSd.Unlock()
	return mock.DisassociateRoleOnPolicyWithSdFunc(ctx, sd, policyID)
}

// DisassociateRoleOnPolicyWithSdCalls gets all the calls that were made to DisassociateRoleOnPolicyWithSd.
// Check the length with:
//
//	len(mockedStore.DisassociateRoleOnPolicyWithSdCalls())
func (mock *StoreMock) DisassociateRoleOnPolicyWithSdCalls() []struct {
	Ctx      context.Context
	Sd       Sd
	PolicyID uuid.UUID
} {
	var calls []struct {
		Ctx      context.Context
		Sd       Sd
		PolicyID uuid.UUID
	}
	mock.lockDisassociateRoleOnPolicyWithSd.RLock()
	calls = mock.calls.DisassociateRoleOnPolicyWithSd
	mock.lockDisassociateRoleOnPolicyWithSd.RUnlock()
	return calls
}

// DisassociateRoleWithSd calls DisassociateRoleWithSdFunc.
func (mock *StoreMock) DisassociateRoleWithSd(ctx context.Context, sd Sd, roleID uuid.UUID, policyID uuid.UUID) (int64, error) {
	if mock.DisassociateRoleWithSdFunc == nil {
		panic("StoreMock.DisassociateRoleWithSdFunc: method is nil but Store.DisassociateRoleWithSd was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Sd       Sd
		RoleID   uuid.UUID
		PolicyID uuid.UUID
	}{
		Ctx:      ctx,
		Sd:       sd,
		RoleID:   roleID,
		PolicyID: policyID,
	}
	mock.lockDisassociateRoleWithSd.Lock()
	mock.calls.DisassociateRoleWithSd = append(mock.calls.DisassociateRoleWithSd, callInfo)
	mock.lockDisassociateRoleWithSd.Unlock()
	return mock.DisassociateRoleWithSdFunc(ctx, sd, roleID, policyID)
}

// DisassociateRoleWithSdCalls gets all the calls that were made to DisassociateRoleWithSd.
// Check the length with:
//
//	len(mockedStore.DisassociateRoleWithSdCalls())
func (mock *StoreMock) DisassociateRoleWithSdCalls() []struct {
	Ctx      context.Context
	Sd       Sd
	RoleID   uuid.UUID
	PolicyID uuid.UUID
} {
	var calls []struct {
		Ctx      context.Context
		Sd       Sd
		RoleID   uuid.UUID
		PolicyID uuid.UUID
	}
	mock.lockDisassociateRoleWithSd.RLock()
	calls = mock.calls.DisassociateRoleWithSd
	mock.lockDisassociateRoleWithSd.RUnlock()
	return calls
}

// DisbelongChatRoom calls DisbelongChatRoomFunc.
func (mock *StoreMock) DisbelongChatRoom(ctx context.Context, memberID uuid.UUID, chatRoomID uuid.UUID) (int64, error) {
	if mock.DisbelongChatRoomFunc == nil {
		panic("StoreMock.DisbelongChatRoomFunc: method is nil but Store.DisbelongChatRoom was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		MemberID   uuid.UUID
		ChatRoomID uuid.UUID
	}{
		Ctx:        ctx,
		MemberID:   memberID,
		ChatRoomID: chatRoomID,
	}
	mock.lockDisbelongChatRoom.Lock()
	mock.calls.DisbelongChatRoom = append(mock.calls.DisbelongChatRoom, callInfo)
	mock.lockDisbelongChatRoom.Unlock()
	return mock.DisbelongChatRoomFunc(ctx, memberID, chatRoomID)
}

// DisbelongChatRoomCalls gets all the calls that were made to DisbelongChatRoom.
// Check the length with:
//
//	len(mockedStore.DisbelongChatRoomCalls())
func (mock *StoreMock) DisbelongChatRoomCalls() []struct {
	Ctx        context.Context
	MemberID   uuid.UUID
	ChatRoomID uuid.UUID
} {
	var calls []struct {
		Ctx        context.Context
		MemberID   uuid.UUID
		ChatRoomID uuid.UUID
	}
	mock.lockDisbelongChatRoom.RLock()
	calls = mock.calls.DisbelongChatRoom
	mock.lockDisbelongChatRoom.RUnlock()
	return calls
}

// DisbelongChatRoomOnChatRoom calls DisbelongChatRoomOnChatRoomFunc.
func (mock *StoreMock) DisbelongChatRoomOnChatRoom(ctx context.Context, chatRoomID uuid.UUID) (int64, error) {
	if mock.DisbelongChatRoomOnChatRoomFunc == nil {
		panic("StoreMock.DisbelongChatRoomOnChatRoomFunc: method is nil but Store.DisbelongChatRoomOnChatRoom was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ChatRoomID uuid.UUID
	}{
		Ctx:        ctx,
		ChatRoomID: chatRoomID,
	}
	mock.lockDisbelongChatRoomOnChatRoom.Lock()
	mock.calls.DisbelongChatRoomOnChatRoom = append(mock.calls.DisbelongChatRoomOnChatRoom, callInfo)
	mock.lockDisbelongChatRoomOnChatRoom.Unlock()
	return mock.DisbelongChatRoomOnChatRoomFunc(ctx, chatRoomID)
}

// DisbelongChatRoomOnChatRoomCalls gets all the calls that were made to DisbelongChatRoomOnChatRoom.
// Check the length with:
//
//	len(mockedStore.DisbelongChatRoomOnChatRoomCalls())
func (mock *StoreMock) DisbelongChatRoomOnChatRoomCalls() []struct {
	Ctx        context.Context
	ChatRoomID uuid.UUID
} {
	var calls []struct {
		Ctx        context.Context
		ChatRoomID uuid.UUID
	}
	mock.lockDisbelongChatRoomOnChatRoom.RLock()
	calls = mock.calls.DisbelongChatRoomOnChatRoom
	mock.lockDisbelongChatRoomOnChatRoom.RUnlock()
	return calls
}

// DisbelongChatRoomOnChatRoomWithSd calls DisbelongChatRoomOnChatRoomWithSdFunc.
func (mock *StoreMock) DisbelongChatRoomOnChatRoomWithSd(ctx context.Context, sd Sd, chatRoomID uuid.UUID) (int64, error) {
	if mock.DisbelongChatRoomOnChatRoomWithSdFunc == nil {
		panic("StoreMock.DisbelongChatRoomOnChatRoomWithSdFunc: method is nil but Store.DisbelongChatRoomOnChatRoomWithSd was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Sd         Sd
		ChatRoomID uuid.UUID
	}{
		Ctx:        ctx,
		Sd:         sd,
		ChatRoomID: chatRoomID,
	}
	mock.lockDisbelongChatRoomOnChatRoomWithSd.Lock()
	mock.calls.DisbelongChatRoomOnChatRoomWithSd = append(mock.calls.DisbelongChatRoomOnChatRoomWithSd, callInfo)
	mock.lockDisbelongChatRoomOnChatRoomWithSd.Unlock()
	return mock.DisbelongChatRoomOnChatRoomWithSdFunc(ctx, sd, chatRoomID)
}

// DisbelongChatRoomOnChatRoomWithSdCalls gets all the calls that were made to DisbelongChatRoomOnChatRoomWithSd.
// Check the length with:
//
//	len(mockedStore.DisbelongChatRoomOnChatRoomWithSdCalls())
func (mock *StoreMock) DisbelongChatRoomOnChatRoomWithSdCalls() []struct {
	Ctx        context.Context
	Sd         Sd
	ChatRoomID uuid.UUID
} {
	var calls []struct {
		Ctx        context.Context
		Sd         Sd
		ChatRoomID uuid.UUID
	}
	mock.lockDisbelongChatRoomOnChatRoomWithSd.RLock()
	calls = mock.calls.DisbelongChatRoomOnChatRoomWithSd
	mock.lockDisbelongChatRoomOnChatRoomWithSd.RUnlock()
	return calls
}

// DisbelongChatRoomOnChatRooms calls DisbelongChatRoomOnChatRoomsFunc.
func (mock *StoreMock) DisbelongChatRoomOnChatRooms(ctx context.Context, chatRoomIDs []uuid.UUID) (int64, error) {
	if mock.DisbelongChatRoomOnChatRoomsFunc == nil {
		panic("StoreMock.DisbelongChatRoomOnChatRoomsFunc: method is nil but Store.DisbelongChatRoomOnChatRooms was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		ChatRoomIDs []uuid.UUID
	}{
		Ctx:         ctx,
		ChatRoomIDs: chatRoomIDs,
	}
	mock.lockDisbelongChatRoomOnChatRooms.Lock()
	mock.calls.DisbelongChatRoomOnChatRooms = append(mock.calls.DisbelongChatRoomOnChatRooms, callInfo)
	mock.lockDisbelongChatRoomOnChatRooms.Unlock()
	return mock.DisbelongChatRoomOnChatRoomsFunc(ctx, chatRoomIDs)
}

// DisbelongChatRoomOnChatRoomsCalls gets all the calls that were made to DisbelongChatRoomOnChatRooms.
// Check the length with:
//
//	len(mockedStore.DisbelongChatRoomOnChatRoomsCalls())
func (mock *StoreMock) DisbelongChatRoomOnChatRoomsCalls() []struct {
	Ctx         context.Context
	ChatRoomIDs []uuid.UUID
} {
	var calls []struct {
		Ctx         context.Context
		ChatRoomIDs []uuid.UUID
	}
	mock.lockDisbelongChatRoomOnChatRooms.RLock()
	calls = mock.calls.DisbelongChatRoomOnChatRooms
	mock.lockDisbelongChatRoomOnChatRooms.RUnlock()
	return calls
}

// DisbelongChatRoomOnChatRoomsWithSd calls DisbelongChatRoomOnChatRoomsWithSdFunc.
func (mock *StoreMock) DisbelongChatRoomOnChatRoomsWithSd(ctx context.Context, sd Sd, chatRoomIDs []uuid.UUID) (int64, error) {
	if mock.DisbelongChatRoomOnChatRoomsWithSdFunc == nil {
		panic("StoreMock.DisbelongChatRoomOnChatRoomsWithSdFunc: method is nil but Store.DisbelongChatRoomOnChatRoomsWithSd was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Sd          Sd
		ChatRoomIDs []uuid.UUID
	}{
		Ctx:         ctx,
		Sd:          sd,
		ChatRoomIDs: chatRoomIDs,
	}
	mock.lockDisbelongChatRoomOnChatRoomsWithSd.Lock()
	mock.calls.DisbelongChatRoomOnChatRoomsWithSd = append(mock.calls.DisbelongChatRoomOnChatRoomsWithSd, callInfo)
	mock.lockDisbelongChatRoomOnChatRoomsWithSd.Unlock()
	return mock.DisbelongChatRoomOnChatRoomsWithSdFunc(ctx, sd, chatRoomIDs)
}

// DisbelongChatRoomOnChatRoomsWithSdCalls gets all the calls that were made to DisbelongChatRoomOnChatRoomsWithSd.
// Check the length with:
//
//	len(mockedStore.DisbelongChatRoomOnChatRoomsWithSdCalls())
func (mock *StoreMock) DisbelongChatRoomOnChatRoomsWithSdCalls() []struct {
	Ctx         context.Context
	Sd          Sd
	ChatRoomIDs []uuid.UUID
} {
	var calls []struct {
		Ctx         context.Context
		Sd          Sd
		ChatRoomIDs []uuid.UUID
	}
	mock.lockDisbelongChatRoomOnChatRoomsWithSd.RLock()
	calls = mock.calls.DisbelongChatRoomOnChatRoomsWithSd
	mock.lockDisbelongChatRoomOnChatRoomsWithSd.RUnlock()
	return calls
}

// DisbelongChatRoomOnMember calls DisbelongChatRoomOnMemberFunc.
func (mock *StoreMock) DisbelongChatRoomOnMember(ctx context.Context, memberID uuid.UUID) (int64, error) {
	if mock.DisbelongChatRoomOnMemberFunc == nil {
		panic("StoreMock.DisbelongChatRoomOnMemberFunc: method is nil but Store.DisbelongChatRoomOnMember was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		MemberID uuid.UUID
	}{
		Ctx:      ctx,
		MemberID: memberID,
	}
	mock.lockDisbelongChatRoomOnMember.Lock()
	mock.calls.DisbelongChatRoomOnMember = append(mock.calls.DisbelongChatRoomOnMember, callInfo)
	mock.lockDisbelongChatRoomOnMember.Unlock()
	return mock.DisbelongChatRoomOnMemberFunc(ctx, memberID)
}

// DisbelongChatRoomOnMemberCalls gets all the calls that were made to DisbelongChatRoomOnMember.
// Check the length with:
//
//	len(mockedStore.DisbelongChatRoomOnMemberCalls())
func (mock *StoreMock) DisbelongChatRoomOnMemberCalls() []struct {
	Ctx      context.Context
	MemberID uuid.UUID
} {
	var calls []struct {
		Ctx      context.Context
		MemberID uuid.UUID
	}
	mock.lockDisbelongChatRoomOnMember.RLock()
	calls = mock.calls.DisbelongChatRoomOnMember
	mock.lockDisbelongChatRoomOnMember.RUnlock()
	return calls
}

// DisbelongChatRoomOnMemberWithSd calls DisbelongChatRoomOnMemberWithSdFunc.
func (mock *StoreMock) DisbelongChatRoomOnMemberWithSd(ctx context.Context, sd Sd, memberID uuid.UUID) (int64, error) {
	if mock.DisbelongChatRoomOnMemberWithSdFunc == nil {
		panic("StoreMock.DisbelongChatRoomOnMemberWithSdFunc: method is nil but Store.DisbelongChatRoomOnMemberWithSd was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Sd       Sd
		MemberID uuid.UUID
	}{
		Ctx:      ctx,
		Sd:       sd,
		MemberID: memberID,
	}
	mock.lockDisbelongChatRoomOnMemberWithSd.Lock()
	mock.calls.DisbelongChatRoomOnMemberWithSd = append(mock.calls.DisbelongChatRoomOnMemberWithSd, callInfo)
	mock.lockDisbelongChatRoomOnMemberWithSd.Unlock()
	return mock.DisbelongChatRoomOnMemberWithSdFunc(ctx, sd, memberID)
}

// DisbelongChatRoomOnMemberWithSdCalls gets all the calls that were made to DisbelongChatRoomOnMemberWithSd.
// Check the length with:
//
//	len(mockedStore.DisbelongChatRoomOnMemberWithSdCalls())
func (mock *StoreMock) DisbelongChatRoomOnMemberWithSdCalls() []struct {
	Ctx      context.Context
	Sd       Sd
	MemberID uuid.UUID
} {
	var calls []struct {
		Ctx      context.Context
		Sd       Sd
		MemberID uuid.UUID
	}
	mock.lockDisbelongChatRoomOnMemberWithSd.RLock()
	calls = mock.calls.DisbelongChatRoomOnMemberWithSd
	mock.lockDisbelongChatRoomOnMemberWithSd.RUnlock()
	return calls
}

// DisbelongChatRoomOnMembers calls DisbelongChatRoomOnMembersFunc.
func (mock *StoreMock) DisbelongChatRoomOnMembers(ctx context.Context, memberIDs []uuid.UUID) (int64, error) {
	if mock.DisbelongChatRoomOnMembersFunc == nil {
		panic("StoreMock.DisbelongChatRoomOnMembersFunc: method is nil but Store.DisbelongChatRoomOnMembers was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		MemberIDs []uuid.UUID
	}{
		Ctx:       ctx,
		MemberIDs: memberIDs,
	}
	mock.lockDisbelongChatRoomOnMembers.Lock()
	mock.calls.DisbelongChatRoomOnMembers = append(mock.calls.DisbelongChatRoomOnMembers, callInfo)
	mock.lockDisbelongChatRoomOnMembers.Unlock()
	return mock.DisbelongChatRoomOnMembersFunc(ctx, memberIDs)
}

// DisbelongChatRoomOnMembersCalls gets all the calls that were made to DisbelongChatRoomOnMembers.
// Check the length with:
//
//	len(mockedStore.DisbelongChatRoomOnMembersCalls())
func (mock *StoreMock) DisbelongChatRoomOnMembersCalls() []struct {
	Ctx       context.Context
	MemberIDs []uuid.UUID
} {
	var calls []struct {
		Ctx       context.Context
		MemberIDs []uuid.UUID
	}
	mock.lockDisbelongChatRoomOnMembers.RLock()
	calls = mock.calls.DisbelongChatRoomOnMembers
	mock.lockDisbelongChatRoomOnMembers.RUnlock()
	return calls
}

// DisbelongChatRoomOnMembersWithSd calls DisbelongChatRoomOnMembersWithSdFunc.
func (mock *StoreMock) DisbelongChatRoomOnMembersWithSd(ctx context.Context, sd Sd, memberIDs []uuid.UUID) (int64, error) {
	if mock.DisbelongChatRoomOnMembersWithSdFunc == nil {
		panic("StoreMock.DisbelongChatRoomOnMembersWithSdFunc: method is nil but Store.DisbelongChatRoomOnMembersWithSd was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Sd        Sd
		MemberIDs []uuid.UUID
	}{
		Ctx:       ctx,
		Sd:        sd,
		MemberIDs: memberIDs,
	}
	mock.lockDisbelongChatRoomOnMembersWithSd.Lock()
	mock.calls.DisbelongChatRoomOnMembersWithSd = append(mock.calls.DisbelongChatRoomOnMembersWithSd, callInfo)
	mock.lockDisbelongChatRoomOnMembersWithSd.Unlock()
	return mock.DisbelongChatRoomOnMembersWithSdFunc(ctx, sd, memberIDs)
}

// DisbelongChatRoomOnMembersWithSdCalls gets all the calls that were made to DisbelongChatRoomOnMembersWithSd.
// Check the length with:
//
//	len(mockedStore.DisbelongChatRoomOnMembersWithSdCalls())
func (mock *StoreMock) DisbelongChatRoomOnMembersWithSdCalls() []struct {
	Ctx       context.Context
	Sd        Sd
	MemberIDs []uuid.UUID
} {
	var calls []struct {
		Ctx       context.Context
		Sd        Sd
		MemberIDs []uuid.UUID
	}
	mock.lockDisbelongChatRoomOnMembersWithSd.RLock()
	calls = mock.calls.DisbelongChatRoomOnMembersWithSd
	mock.lockDisbelongChatRoomOnMembersWithSd.RUnlock()
	return calls
}

// DisbelongChatRoomWithSd calls DisbelongChatRoomWithSdFunc.
func (mock *StoreMock) DisbelongChatRoomWithSd(ctx context.Context, sd Sd, memberID uuid.UUID, chatRoomID uuid.UUID) (int64, error) {
	if mock.DisbelongChatRoomWithSdFunc == nil {
		panic("StoreMock.DisbelongChatRoomWithSdFunc: method is nil but Store.DisbelongChatRoomWithSd was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Sd         Sd
		MemberID   uuid.UUID
		ChatRoomID uuid.UUID
	}{
		Ctx:        ctx,
		Sd:         sd,
		MemberID:   memberID,
		ChatRoomID: chatRoomID,
	}
	mock.lockDisbelongChatRoomWithSd.Lock()
	mock.calls.DisbelongChatRoomWithSd = append(mock.calls.DisbelongChatRoomWithSd, callInfo)
	mock.lockDisbelongChatRoomWithSd.Unlock()
	return mock.DisbelongChatRoomWithSdFunc(ctx, sd, memberID, chatRoomID)
}

// DisbelongChatRoomWithSdCalls gets all the calls that were made to DisbelongChatRoomWithSd.
// Check the length with:
//
//	len(mockedStore.DisbelongChatRoomWithSdCalls())
func (mock *StoreMock) DisbelongChatRoomWithSdCalls() []struct {
	Ctx        context.Context
	Sd         Sd
	MemberID   uuid.UUID
	ChatRoomID uuid.UUID
} {
	var calls []struct {
		Ctx        context.Context
		Sd         Sd
		MemberID   uuid.UUID
		ChatRoomID uuid.UUID
	}
	mock.lockDisbelongChatRoomWithSd.RLock()
	calls = mock.calls.DisbelongChatRoomWithSd
	mock.lockDisbelongChatRoomWithSd.RUnlock()
	return calls
}

// DisbelongOrganization calls DisbelongOrganizationFunc.
func (mock *StoreMock) DisbelongOrganization(ctx context.Context, memberID uuid.UUID, organizationID uuid.UUID) (int64, error) {
	if mock.DisbelongOrganizationFunc == nil {
		panic("StoreMock.DisbelongOrganizationFunc: method is nil but Store.DisbelongOrganization was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		MemberID       uuid.UUID
		OrganizationID uuid.UUID
	}{
		Ctx:            ctx,
		MemberID:       memberID,
		OrganizationID: organizationID,
	}
	mock.lockDisbelongOrganization.Lock()
	mock.calls.DisbelongOrganization = append(mock.calls.DisbelongOrganization, callInfo)
	mock.lockDisbelongOrganization.Unlock()
	return mock.DisbelongOrganizationFunc(ctx, memberID, organizationID)
}

// DisbelongOrganizationCalls gets all the calls that were made to DisbelongOrganization.
// Check the length with:
//
//	len(mockedStore.DisbelongOrganizationCalls())
func (mock *StoreMock) DisbelongOrganizationCalls() []struct {
	Ctx            context.Context
	MemberID       uuid.UUID
	OrganizationID uuid.UUID
} {
	var calls []struct {
		Ctx            context.Context
		MemberID       uuid.UUID
		OrganizationID uuid.UUID
	}
	mock.lockDisbelongOrganization.RLock()
	calls = mock.calls.DisbelongOrganization
	mock.lockDisbelongOrganization.RUnlock()
	return calls
}

// DisbelongOrganizationOnMember calls DisbelongOrganizationOnMemberFunc.
func (mock *StoreMock) DisbelongOrganizationOnMember(ctx context.Context, memberID uuid.UUID) (int64, error) {
	if mock.DisbelongOrganizationOnMemberFunc == nil {
		panic("StoreMock.DisbelongOrganizationOnMemberFunc: method is nil but Store.DisbelongOrganizationOnMember was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		MemberID uuid.UUID
	}{
		Ctx:      ctx,
		MemberID: memberID,
	}
	mock.lockDisbelongOrganizationOnMember.Lock()
	mock.calls.DisbelongOrganizationOnMember = append(mock.calls.DisbelongOrganizationOnMember, callInfo)
	mock.lockDisbelongOrganizationOnMember.Unlock()
	return mock.DisbelongOrganizationOnMemberFunc(ctx, memberID)
}

// DisbelongOrganizationOnMemberCalls gets all the calls that were made to DisbelongOrganizationOnMember.
// Check the length with:
//
//	len(mockedStore.DisbelongOrganizationOnMemberCalls())
func (mock *StoreMock) DisbelongOrganizationOnMemberCalls() []struct {
	Ctx      context.Context
	MemberID uuid.UUID
} {
	var calls []struct {
		Ctx      context.Context
		MemberID uuid.UUID
	}
	mock.lockDisbelongOrganizationOnMember.RLock()
	calls = mock.calls.DisbelongOrganizationOnMember
	mock.lockDisbelongOrganizationOnMember.RUnlock()
	return calls
}

// DisbelongOrganizationOnMemberWithSd calls DisbelongOrganizationOnMemberWithSdFunc.
func (mock *StoreMock) DisbelongOrganizationOnMemberWithSd(ctx context.Context, sd Sd, memberID uuid.UUID) (int64, error) {
	if mock.DisbelongOrganizationOnMemberWithSdFunc == nil {
		panic("StoreMock.DisbelongOrganizationOnMemberWithSdFunc: method is nil but Store.DisbelongOrganizationOnMemberWithSd was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Sd       Sd
		MemberID uuid.UUID
	}{
		Ctx:      ctx,
		Sd:       sd,
		MemberID: memberID,
	}
	mock.lockDisbelongOrganizationOnMemberWithSd.Lock()
	mock.calls.DisbelongOrganizationOnMemberWithSd = append(mock.calls.DisbelongOrganizationOnMemberWithSd, callInfo)
	mock.lockDisbelongOrganizationOnMemberWithSd.Unlock()
	return mock.DisbelongOrganizationOnMemberWithSdFunc(ctx, sd, memberID)
}

// DisbelongOrganizationOnMemberWithSdCalls gets all the calls that were made to DisbelongOrganizationOnMemberWithSd.
// Check the length with:
//
//	len(mockedStore.DisbelongOrganizationOnMemberWithSdCalls())
func (mock *StoreMock) DisbelongOrganizationOnMemberWithSdCalls() []struct {
	Ctx      context.Context
	Sd       Sd
	MemberID uuid.UUID
} {
	var calls []struct {
		Ctx      context.Context
		Sd       Sd
		MemberID uuid.UUID
	}
	mock.lockDisbelongOrganizationOnMemberWithSd.RLock()
	calls = mock.calls.DisbelongOrganizationOnMemberWithSd
	mock.lockDisbelongOrganizationOnMemberWithSd.RUnlock()
	return calls
}

// DisbelongOrganizationOnMembers calls DisbelongOrganizationOnMembersFunc.
func (mock *StoreMock) DisbelongOrganizationOnMembers(ctx context.Context, memberIDs []uuid.UUID) (int64, error) {
	if mock.DisbelongOrganizationOnMembersFunc == nil {
		panic("StoreMock.DisbelongOrganizationOnMembersFunc: method is nil but Store.DisbelongOrganizationOnMembers was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		MemberIDs []uuid.UUID
	}{
		Ctx:       ctx,
		MemberIDs: memberIDs,
	}
	mock.lockDisbelongOrganizationOnMembers.Lock()
	mock.calls.DisbelongOrganizationOnMembers = append(mock.calls.DisbelongOrganizationOnMembers, callInfo)
	mock.lockDisbelongOrganizationOnMembers.Unlock()
	return mock.DisbelongOrganizationOnMembersFunc(ctx, memberIDs)
}

// DisbelongOrganizationOnMembersCalls gets all the calls that were made to DisbelongOrganizationOnMembers.
// Check the length with:
//
//	len(mockedStore.DisbelongOrganizationOnMembersCalls())
func (mock *StoreMock) DisbelongOrganizationOnMembersCalls() []struct {
	Ctx       context.Context
	MemberIDs []uuid.UUID
} {
	var calls []struct {
		Ctx       context.Context
		MemberIDs []uuid.UUID
	}
	mock.lockDisbelongOrganizationOnMembers.RLock()
	calls = mock.calls.DisbelongOrganizationOnMembers
	mock.lockDisbelongOrganizationOnMembers.RUnlock()
	return calls
}

// DisbelongOrganizationOnMembersWithSd calls DisbelongOrganizationOnMembersWithSdFunc.
func (mock *StoreMock) DisbelongOrganizationOnMembersWithSd(ctx context.Context, sd Sd, memberIDs []uuid.UUID) (int64, error) {
	if mock.DisbelongOrganizationOnMembersWithSdFunc == nil {
		panic("StoreMock.DisbelongOrganizationOnMembersWithSdFunc: method is nil but Store.DisbelongOrganizationOnMembersWithSd was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Sd        Sd
		MemberIDs []uuid.UUID
	}{
		Ctx:       ctx,
		Sd:        sd,
		MemberIDs: memberIDs,
	}
	mock.lockDisbelongOrganizationOnMembersWithSd.Lock()
	mock.calls.DisbelongOrganizationOnMembersWithSd = append(mock.calls.DisbelongOrganizationOnMembersWithSd, callInfo)
	mock.lockDisbelongOrganizationOnMembersWithSd.Unlock()
	return mock.DisbelongOrganizationOnMembersWithSdFunc(ctx, sd, memberIDs)
}

// DisbelongOrganizationOnMembersWithSdCalls gets all the calls that were made to DisbelongOrganizationOnMembersWithSd.
// Check the length with:
//
//	len(mockedStore.DisbelongOrganizationOnMembersWithSdCalls())
func (mock *StoreMock) DisbelongOrganizationOnMembersWithSdCalls() []struct {
	Ctx       context.Context
	Sd        Sd
	MemberIDs []uuid.UUID
} {
	var calls []struct {
		Ctx       context.Context
		Sd        Sd
		MemberIDs []uuid.UUID
	}
	mock.lockDisbelongOrganizationOnMembersWithSd.RLock()
	calls = mock.calls.DisbelongOrganizationOnMembersWithSd
	mock.lockDisbelongOrganizationOnMembersWithSd.RUnlock()
	return calls
}

// DisbelongOrganizationOnOrganization calls DisbelongOrganizationOnOrganizationFunc.
func (mock *StoreMock) DisbelongOrganizationOnOrganization(ctx context.Context, organizationID uuid.UUID) (int64, error) {
	if mock.DisbelongOrganizationOnOrganizationFunc == nil {
		panic("StoreMock.DisbelongOrganizationOnOrganizationFunc: method is nil but Store.DisbelongOrganizationOnOrganization was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		OrganizationID uuid.UUID
	}{
		Ctx:            ctx,
		OrganizationID: organizationID,
	}
	mock.lockDisbelongOrganizationOnOrganization.Lock()
	mock.calls.DisbelongOrganizationOnOrganization = append(mock.calls.DisbelongOrganizationOnOrganization, callInfo)
	mock.lockDisbelongOrganizationOnOrganization.Unlock()
	return mock.DisbelongOrganizationOnOrganizationFunc(ctx, organizationID)
}

// DisbelongOrganizationOnOrganizationCalls gets all the calls that were made to DisbelongOrganizationOnOrganization.
// Check the length with:
//
//	len(mockedStore.DisbelongOrganizationOnOrganizationCalls())
func (mock *StoreMock) DisbelongOrganizationOnOrganizationCalls() []struct {
	Ctx            context.Context
	OrganizationID uuid.UUID
} {
	var calls []struct {
		Ctx            context.Context
		OrganizationID uuid.UUID
	}
	mock.lockDisbelongOrganizationOnOrganization.RLock()
	calls = mock.calls.DisbelongOrganizationOnOrganization
	mock.lockDisbelongOrganizationOnOrganization.RUnlock()
	return calls
}

// DisbelongOrganizationOnOrganizationWithSd calls DisbelongOrganizationOnOrganizationWithSdFunc.
func (mock *StoreMock) DisbelongOrganizationOnOrganizationWithSd(ctx context.Context, sd Sd, organizationID uuid.UUID) (int64, error) {
	if mock.DisbelongOrganizationOnOrganizationWithSdFunc == nil {
		panic("StoreMock.DisbelongOrganizationOnOrganizationWithSdFunc: method is nil but Store.DisbelongOrganizationOnOrganizationWithSd was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		Sd             Sd
		OrganizationID uuid.UUID
	}{
		Ctx:            ctx,
		Sd:             sd,
		OrganizationID: organizationID,
	}
	mock.lockDisbelongOrganizationOnOrganizationWithSd.Lock()
	mock.calls.DisbelongOrganizationOnOrganizationWithSd = append(mock.calls.DisbelongOrganizationOnOrganizationWithSd, callInfo)
	mock.lockDisbelongOrganizationOnOrganizationWithSd.Unlock()
	return mock.DisbelongOrganizationOnOrganizationWithSdFunc(ctx, sd, organizationID)
}

// DisbelongOrganizationOnOrganizationWithSdCalls gets all the calls that were made to DisbelongOrganizationOnOrganizationWithSd.
// Check the length with:
//
//	len(mockedStore.DisbelongOrganizationOnOrganizationWithSdCalls())
func (mock *StoreMock) DisbelongOrganizationOnOrganizationWithSdCalls() []struct {
	Ctx            context.Context
	Sd             Sd
	OrganizationID uuid.UUID
} {
	var calls []struct {
		Ctx            context.Context
		Sd             Sd
		OrganizationID uuid.UUID
	}
	mock.lockDisbelongOrganizationOnOrganizationWithSd.RLock()
	calls = mock.calls.DisbelongOrganizationOnOrganizationWithSd
	mock.lockDisbelongOrganizationOnOrganizationWithSd.RUnlock()
	return calls
}

// DisbelongOrganizationOnOrganizations calls DisbelongOrganizationOnOrganizationsFunc.
func (mock *StoreMock) DisbelongOrganizationOnOrganizations(ctx context.Context, organizationIDs []uuid.UUID) (int64, error) {
	if mock.DisbelongOrganizationOnOrganizationsFunc == nil {
		panic("StoreMock.DisbelongOrganizationOnOrganizationsFunc: method is nil but Store.DisbelongOrganizationOnOrganizations was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		OrganizationIDs []uuid.UUID
	}{
		Ctx:             ctx,
		OrganizationIDs: organizationIDs,
	}
	mock.lockDisbelongOrganizationOnOrganizations.Lock()
	mock.calls.DisbelongOrganizationOnOrganizations = append(mock.calls.DisbelongOrganizationOnOrganizations, callInfo)
	mock.lockDisbelongOrganizationOnOrganizations.Unlock()
	return mock.DisbelongOrganizationOnOrganizationsFunc(ctx, organizationIDs)
}

// DisbelongOrganizationOnOrganizationsCalls gets all the calls that were made to DisbelongOrganizationOnOrganizations.
// Check the length with:
//
//	len(mockedStore.DisbelongOrganizationOnOrganizationsCalls())
func (mock *StoreMock) DisbelongOrganizationOnOrganizationsCalls() []struct {
	Ctx             context.Context
	OrganizationIDs []uuid.UUID
} {
	var calls []struct {
		Ctx             context.Context
		OrganizationIDs []uuid.UUID
	}
	mock.lockDisbelongOrganizationOnOrganizations.RLock()
	calls = mock.calls.DisbelongOrganizationOnOrganizations
	mock.lockDisbelongOrganizationOnOrganizations.RUnlock()
	return calls
}

// DisbelongOrganizationOnOrganizationsWithSd calls DisbelongOrganizationOnOrganizationsWithSdFunc.
func (mock *StoreMock) DisbelongOrganizationOnOrganizationsWithSd(ctx context.Context, sd Sd, organizationIDs []uuid.UUID) (int64, error) {
	if mock.DisbelongOrganizationOnOrganizationsWithSdFunc == nil {
		panic("StoreMock.DisbelongOrganizationOnOrganizationsWithSdFunc: method is nil but Store.DisbelongOrganizationOnOrganizationsWithSd was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		Sd              Sd
		OrganizationIDs []uuid.UUID
	}{
		Ctx:             ctx,
		Sd:              sd,
		OrganizationIDs: organizationIDs,
	}
	mock.lockDisbelongOrganizationOnOrganizationsWithSd.Lock()
	mock.calls.DisbelongOrganizationOnOrganizationsWithSd = append(mock.calls.DisbelongOrganizationOnOrganizationsWithSd, callInfo)
	mock.lockDisbelongOrganizationOnOrganizationsWithSd.Unlock()
	return mock.DisbelongOrganizationOnOrganizationsWithSdFunc(ctx, sd, organizationIDs)
}

// DisbelongOrganizationOnOrganizationsWithSdCalls gets all the calls that were made to DisbelongOrganizationOnOrganizationsWithSd.
// Check the length with:
//
//	len(mockedStore.DisbelongOrganizationOnOrganizationsWithSdCalls())
func (mock *StoreMock) DisbelongOrganizationOnOrganizationsWithSdCalls() []struct {
	Ctx             context.Context
	Sd              Sd
	OrganizationIDs []uuid.UUID
} {
	var calls []struct {
		Ctx             context.Context
		Sd              Sd
		OrganizationIDs []uuid.UUID
	}
	mock.lockDisbelongOrganizationOnOrganizationsWithSd.RLock()
	calls = mock.calls.DisbelongOrganizationOnOrganizationsWithSd
	mock.lockDisbelongOrganizationOnOrganizationsWithSd.RUnlock()
	return calls
}

// DisbelongOrganizationWithSd calls DisbelongOrganizationWithSdFunc.
func (mock *StoreMock) DisbelongOrganizationWithSd(ctx context.Context, sd Sd, memberID uuid.UUID, organizationID uuid.UUID) (int64, error) {
	if mock.DisbelongOrganizationWithSdFunc == nil {
		panic("StoreMock.DisbelongOrganizationWithSdFunc: method is nil but Store.DisbelongOrganizationWithSd was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		Sd             Sd
		MemberID       uuid.UUID
		OrganizationID uuid.UUID
	}{
		Ctx:            ctx,
		Sd:             sd,
		MemberID:       memberID,
		OrganizationID: organizationID,
	}
	mock.lockDisbelongOrganizationWithSd.Lock()
	mock.calls.DisbelongOrganizationWithSd = append(mock.calls.DisbelongOrganizationWithSd, callInfo)
	mock.lockDisbelongOrganizationWithSd.Unlock()
	return mock.DisbelongOrganizationWithSdFunc(ctx, sd, memberID, organizationID)
}

// DisbelongOrganizationWithSdCalls gets all the calls that were made to DisbelongOrganizationWithSd.
// Check the length with:
//
//	len(mockedStore.DisbelongOrganizationWithSdCalls())
func (mock *StoreMock) DisbelongOrganizationWithSdCalls() []struct {
	Ctx            context.Context
	Sd             Sd
	MemberID       uuid.UUID
	OrganizationID uuid.UUID
} {
	var calls []struct {
		Ctx            context.Context
		Sd             Sd
		MemberID       uuid.UUID
		OrganizationID uuid.UUID
	}
	mock.lockDisbelongOrganizationWithSd.RLock()
	calls = mock.calls.DisbelongOrganizationWithSd
	mock.lockDisbelongOrganizationWithSd.RUnlock()
	return calls
}

// DisbelongPluralChatRoomsOnMember calls DisbelongPluralChatRoomsOnMemberFunc.
func (mock *StoreMock) DisbelongPluralChatRoomsOnMember(ctx context.Context, memberID uuid.UUID, chatRoomIDs []uuid.UUID) (int64, error) {
	if mock.DisbelongPluralChatRoomsOnMemberFunc == nil {
		panic("StoreMock.DisbelongPluralChatRoomsOnMemberFunc: method is nil but Store.DisbelongPluralChatRoomsOnMember was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		MemberID    uuid.UUID
		ChatRoomIDs []uuid.UUID
	}{
		Ctx:         ctx,
		MemberID:    memberID,
		ChatRoomIDs: chatRoomIDs,
	}
	mock.lockDisbelongPluralChatRoomsOnMember.Lock()
	mock.calls.DisbelongPluralChatRoomsOnMember = append(mock.calls.DisbelongPluralChatRoomsOnMember, callInfo)
	mock.lockDisbelongPluralChatRoomsOnMember.Unlock()
	return mock.DisbelongPluralChatRoomsOnMemberFunc(ctx, memberID, chatRoomIDs)
}

// DisbelongPluralChatRoomsOnMemberCalls gets all the calls that were made to DisbelongPluralChatRoomsOnMember.
// Check the length with:
//
//	len(mockedStore.DisbelongPluralChatRoomsOnMemberCalls())
func (mock *StoreMock) DisbelongPluralChatRoomsOnMemberCalls() []struct {
	Ctx         context.Context
	MemberID    uuid.UUID
	ChatRoomIDs []uuid.UUID
} {
	var calls []struct {
		Ctx         context.Context
		MemberID    uuid.UUID
		ChatRoomIDs []uuid.UUID
	}
	mock.lockDisbelongPluralChatRoomsOnMember.RLock()
	calls = mock.calls.DisbelongPluralChatRoomsOnMember
	mock.lockDisbelongPluralChatRoomsOnMember.RUnlock()
	return calls
}

// DisbelongPluralChatRoomsOnMemberWithSd calls DisbelongPluralChatRoomsOnMemberWithSdFunc.
func (mock *StoreMock) DisbelongPluralChatRoomsOnMemberWithSd(ctx context.Context, sd Sd, memberID uuid.UUID, chatRoomIDs []uuid.UUID) (int64, error) {
	if mock.DisbelongPluralChatRoomsOnMemberWithSdFunc == nil {
		panic("StoreMock.DisbelongPluralChatRoomsOnMemberWithSdFunc: method is nil but Store.DisbelongPluralChatRoomsOnMemberWithSd was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Sd          Sd
		MemberID    uuid.UUID
		ChatRoomIDs []uuid.UUID
	}{
		Ctx:         ctx,
		Sd:          sd,
		MemberID:    memberID,
		ChatRoomIDs: chatRoomIDs,
	}
	mock.lockDisbelongPluralChatRoomsOnMemberWithSd.Lock()
	mock.calls.DisbelongPluralChatRoomsOnMemberWithSd = append(mock.calls.DisbelongPluralChatRoomsOnMemberWithSd, callInfo)
	mock.lockDisbelongPluralChatRoomsOnMemberWithSd.Unlock()
	return mock.DisbelongPluralChatRoomsOnMemberWithSdFunc(ctx, sd, memberID, chatRoomIDs)
}

// DisbelongPluralChatRoomsOnMemberWithSdCalls gets all the calls that were made to DisbelongPluralChatRoomsOnMemberWithSd.
// Check the length with:
//
//	len(mockedStore.DisbelongPluralChatRoomsOnMemberWithSdCalls())
func (mock *StoreMock) DisbelongPluralChatRoomsOnMemberWithSdCalls() []struct {
	Ctx         context.Context
	Sd          Sd
	MemberID    uuid.UUID
	ChatRoomIDs []uuid.UUID
} {
	var calls []struct {
		Ctx         context.Context
		Sd          Sd
		MemberID    uuid.UUID
		ChatRoomIDs []uuid.UUID
	}
	mock.lockDisbelongPluralChatRoomsOnMemberWithSd.RLock()
	calls = mock.calls.DisbelongPluralChatRoomsOnMemberWithSd
	mock.lockDisbelongPluralChatRoomsOnMemberWithSd.RUnlock()
	return calls
}

// DisbelongPluralMembersOnChatRoom calls DisbelongPluralMembersOnChatRoomFunc.
func (mock *StoreMock) DisbelongPluralMembersOnChatRoom(ctx context.Context, chatRoomID uuid.UUID, memberIDs []uuid.UUID) (int64, error) {
	if mock.DisbelongPluralMembersOnChatRoomFunc == nil {
		panic("StoreMock.DisbelongPluralMembersOnChatRoomFunc: method is nil but Store.DisbelongPluralMembersOnChatRoom was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ChatRoomID uuid.UUID
		MemberIDs  []uuid.UUID
	}{
		Ctx:        ctx,
		ChatRoomID: chatRoomID,
		MemberIDs:  memberIDs,
	}
	mock.lockDisbelongPluralMembersOnChatRoom.Lock()
	mock.calls.DisbelongPluralMembersOnChatRoom = append(mock.calls.DisbelongPluralMembersOnChatRoom, callInfo)
	mock.lockDisbelongPluralMembersOnChatRoom.Unlock()
	return mock.DisbelongPluralMembersOnChatRoomFunc(ctx, chatRoomID, memberIDs)
}

// DisbelongPluralMembersOnChatRoomCalls gets all the calls that were made to DisbelongPluralMembersOnChatRoom.
// Check the length with:
//
//	len(mockedStore.DisbelongPluralMembersOnChatRoomCalls())
func (mock *StoreMock) DisbelongPluralMembersOnChatRoomCalls() []struct {
	Ctx        context.Context
	ChatRoomID uuid.UUID
	MemberIDs  []uuid.UUID
} {
	var calls []struct {
		Ctx        context.Context
		ChatRoomID uuid.UUID
		MemberIDs  []uuid.UUID
	}
	mock.lockDisbelongPluralMembersOnChatRoom.RLock()
	calls = mock.calls.DisbelongPluralMembersOnChatRoom
	mock.lockDisbelongPluralMembersOnChatRoom.RUnlock()
	return calls
}

// DisbelongPluralMembersOnChatRoomWithSd calls DisbelongPluralMembersOnChatRoomWithSdFunc.
func (mock *StoreMock) DisbelongPluralMembersOnChatRoomWithSd(ctx context.Context, sd Sd, chatRoomID uuid.UUID, memberIDs []uuid.UUID) (int64, error) {
	if mock.DisbelongPluralMembersOnChatRoomWithSdFunc == nil {
		panic("StoreMock.DisbelongPluralMembersOnChatRoomWithSdFunc: method is nil but Store.DisbelongPluralMembersOnChatRoomWithSd was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Sd         Sd
		ChatRoomID uuid.UUID
		MemberIDs  []uuid.UUID
	}{
		Ctx:        ctx,
		Sd:         sd,
		ChatRoomID: chatRoomID,
		MemberIDs:  memberIDs,
	}
	mock.lockDisbelongPluralMembersOnChatRoomWithSd.Lock()
	mock.calls.DisbelongPluralMembersOnChatRoomWithSd = append(mock.calls.DisbelongPluralMembersOnChatRoomWithSd, callInfo)
	mock.lockDisbelongPluralMembersOnChatRoomWithSd.Unlock()
	return mock.DisbelongPluralMembersOnChatRoomWithSdFunc(ctx, sd, chatRoomID, memberIDs)
}

// DisbelongPluralMembersOnChatRoomWithSdCalls gets all the calls that were made to DisbelongPluralMembersOnChatRoomWithSd.
// Check the length with:
//
//	len(mockedStore.DisbelongPluralMembersOnChatRoomWithSdCalls())
func (mock *StoreMock) DisbelongPluralMembersOnChatRoomWithSdCalls() []struct {
	Ctx        context.Context
	Sd         Sd
	ChatRoomID uuid.UUID
	MemberIDs  []uuid.UUID
} {
	var calls []struct {
		Ctx        context.Context
		Sd         Sd
		ChatRoomID uuid.UUID
		MemberIDs  []uuid.UUID
	}
	mock.lockDisbelongPluralMembersOnChatRoomWithSd.RLock()
	calls = mock.calls.DisbelongPluralMembersOnChatRoomWithSd
	mock.lockDisbelongPluralMembersOnChatRoomWithSd.RUnlock()
	return calls
}

// DisbelongPluralMembersOnOrganization calls DisbelongPluralMembersOnOrganizationFunc.
func (mock *StoreMock) DisbelongPluralMembersOnOrganization(ctx context.Context, organizationID uuid.UUID, memberIDs []uuid.UUID) (int64, error) {
	if mock.DisbelongPluralMembersOnOrganizationFunc == nil {
		panic("StoreMock.DisbelongPluralMembersOnOrganizationFunc: method is nil but Store.DisbelongPluralMembersOnOrganization was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		OrganizationID uuid.UUID
		MemberIDs      []uuid.UUID
	}{
		Ctx:            ctx,
		OrganizationID: organizationID,
		MemberIDs:      memberIDs,
	}
	mock.lockDisbelongPluralMembersOnOrganization.Lock()
	mock.calls.DisbelongPluralMembersOnOrganization = append(mock.calls.DisbelongPluralMembersOnOrganization, callInfo)
	mock.lockDisbelongPluralMembersOnOrganization.Unlock()
	return mock.DisbelongPluralMembersOnOrganizationFunc(ctx, organizationID, memberIDs)
}

// DisbelongPluralMembersOnOrganizationCalls gets all the calls that were made to DisbelongPluralMembersOnOrganization.
// Check the length with:
//
//	len(mockedStore.DisbelongPluralMembersOnOrganizationCalls())
func (mock *StoreMock) DisbelongPluralMembersOnOrganizationCalls() []struct {
	Ctx            context.Context
	OrganizationID uuid.UUID
	MemberIDs      []uuid.UUID
} {
	var calls []struct {
		Ctx            context.Context
		OrganizationID uuid.UUID
		MemberIDs      []uuid.UUID
	}
	mock.lockDisbelongPluralMembersOnOrganization.RLock()
	calls = mock.calls.DisbelongPluralMembersOnOrganization
	mock.lockDisbelongPluralMembersOnOrganization.RUnlock()
	return calls
}

// DisbelongPluralMembersOnOrganizationWithSd calls DisbelongPluralMembersOnOrganizationWithSdFunc.
func (mock *StoreMock) DisbelongPluralMembersOnOrganizationWithSd(ctx context.Context, sd Sd, organizationID uuid.UUID, memberIDs []uuid.UUID) (int64, error) {
	if mock.DisbelongPluralMembersOnOrganizationWithSdFunc == nil {
		panic("StoreMock.DisbelongPluralMembersOnOrganizationWithSdFunc: method is nil but Store.DisbelongPluralMembersOnOrganizationWithSd was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		Sd             Sd
		OrganizationID uuid.UUID
		MemberIDs      []uuid.UUID
	}{
		Ctx:            ctx,
		Sd:             sd,
		OrganizationID: organizationID,
		MemberIDs:      memberIDs,
	}
	mock.lockDisbelongPluralMembersOnOrganizationWithSd.Lock()
	mock.calls.DisbelongPluralMembersOnOrganizationWithSd = append(mock.calls.DisbelongPluralMembersOnOrganizationWithSd, callInfo)
	mock.lockDisbelongPluralMembersOnOrganizationWithSd.Unlock()
	return mock.DisbelongPluralMembersOnOrganizationWithSdFunc(ctx, sd, organizationID, memberIDs)
}

// DisbelongPluralMembersOnOrganizationWithSdCalls gets all the calls that were made to DisbelongPluralMembersOnOrganizationWithSd.
// Check the length with:
//
//	len(mockedStore.DisbelongPluralMembersOnOrganizationWithSdCalls())
func (mock *StoreMock) DisbelongPluralMembersOnOrganizationWithSdCalls() []struct {
	Ctx            context.Context
	Sd             Sd
	OrganizationID uuid.UUID
	MemberIDs      []uuid.UUID
} {
	var calls []struct {
		Ctx            context.Context
		Sd             Sd
		OrganizationID uuid.UUID
		MemberIDs      []uuid.UUID
	}
	mock.lockDisbelongPluralMembersOnOrganizationWithSd.RLock()
	calls = mock.calls.DisbelongPluralMembersOnOrganizationWithSd
	mock.lockDisbelongPluralMembersOnOrganizationWithSd.RUnlock()
	return calls
}

// DisbelongPluralOrganizationsOnMember calls DisbelongPluralOrganizationsOnMemberFunc.
func (mock *StoreMock) DisbelongPluralOrganizationsOnMember(ctx context.Context, memberID uuid.UUID, organizationIDs []uuid.UUID) (int64, error) {
	if mock.DisbelongPluralOrganizationsOnMemberFunc == nil {
		panic("StoreMock.DisbelongPluralOrganizationsOnMemberFunc: method is nil but Store.DisbelongPluralOrganizationsOnMember was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		MemberID        uuid.UUID
		OrganizationIDs []uuid.UUID
	}{
		Ctx:             ctx,
		MemberID:        memberID,
		OrganizationIDs: organizationIDs,
	}
	mock.lockDisbelongPluralOrganizationsOnMember.Lock()
	mock.calls.DisbelongPluralOrganizationsOnMember = append(mock.calls.DisbelongPluralOrganizationsOnMember, callInfo)
	mock.lockDisbelongPluralOrganizationsOnMember.Unlock()
	return mock.DisbelongPluralOrganizationsOnMemberFunc(ctx, memberID, organizationIDs)
}

// DisbelongPluralOrganizationsOnMemberCalls gets all the calls that were made to DisbelongPluralOrganizationsOnMember.
// Check the length with:
//
//	len(mockedStore.DisbelongPluralOrganizationsOnMemberCalls())
func (mock *StoreMock) DisbelongPluralOrganizationsOnMemberCalls() []struct {
	Ctx             context.Context
	MemberID        uuid.UUID
	OrganizationIDs []uuid.UUID
} {
	var calls []struct {
		Ctx             context.Context
		MemberID        uuid.UUID
		OrganizationIDs []uuid.UUID
	}
	mock.lockDisbelongPluralOrganizationsOnMember.RLock()
	calls = mock.calls.DisbelongPluralOrganizationsOnMember
	mock.lockDisbelongPluralOrganizationsOnMember.RUnlock()
	return calls
}

// DisbelongPluralOrganizationsOnMemberWithSd calls DisbelongPluralOrganizationsOnMemberWithSdFunc.
func (mock *StoreMock) DisbelongPluralOrganizationsOnMemberWithSd(ctx context.Context, sd Sd, memberID uuid.UUID, organizationIDs []uuid.UUID) (int64, error) {
	if mock.DisbelongPluralOrganizationsOnMemberWithSdFunc == nil {
		panic("StoreMock.DisbelongPluralOrganizationsOnMemberWithSdFunc: method is nil but Store.DisbelongPluralOrganizationsOnMemberWithSd was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		Sd              Sd
		MemberID        uuid.UUID
		OrganizationIDs []uuid.UUID
	}{
		Ctx:             ctx,
		Sd:              sd,
		MemberID:        memberID,
		OrganizationIDs: organizationIDs,
	}
	mock.lockDisbelongPluralOrganizationsOnMemberWithSd.Lock()
	mock.calls.DisbelongPluralOrganizationsOnMemberWithSd = append(mock.calls.DisbelongPluralOrganizationsOnMemberWithSd, callInfo)
	mock.lockDisbelongPluralOrganizationsOnMemberWithSd.Unlock()
	return mock.DisbelongPluralOrganizationsOnMemberWithSdFunc(ctx, sd, memberID, organizationIDs)
}

// DisbelongPluralOrganizationsOnMemberWithSdCalls gets all the calls that were made to DisbelongPluralOrganizationsOnMemberWithSd.
// Check the length with:
//
//	len(mockedStore.DisbelongPluralOrganizationsOnMemberWithSdCalls())
func (mock *StoreMock) DisbelongPluralOrganizationsOnMemberWithSdCalls() []struct {
	Ctx             context.Context
	Sd              Sd
	MemberID        uuid.UUID
	OrganizationIDs []uuid.UUID
} {
	var calls []struct {
		Ctx             context.Context
		Sd              Sd
		MemberID        uuid.UUID
		OrganizationIDs []uuid.UUID
	}
	mock.lockDisbelongPluralOrganizationsOnMemberWithSd.RLock()
	calls = mock.calls.DisbelongPluralOrganizationsOnMemberWithSd
	mock.lockDisbelongPluralOrganizationsOnMemberWithSd.RUnlock()
	return calls
}

// ExistsChatRoomBelonging calls ExistsChatRoomBelongingFunc.
func (mock *StoreMock) ExistsChatRoomBelonging(ctx context.Context, memberID uuid.UUID, chatRoomID uuid.UUID) (bool, error) {
	if mock.ExistsChatRoomBelongingFunc == nil {
		panic("StoreMock.ExistsChatRoomBelongingFunc: method is nil but Store.ExistsChatRoomBelonging was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		MemberID   uuid.UUID
		ChatRoomID uuid.UUID
	}{
		Ctx:        ctx,
		MemberID:   memberID,
		ChatRoomID: chatRoomID,
	}
	mock.lockExistsChatRoomBelonging.Lock()
	mock.calls.ExistsChatRoomBelonging = append(mock.calls.ExistsChatRoomBelonging, callInfo)
	mock.lockExistsChatRoomBelonging.Unlock()
	return mock.ExistsChatRoomBelongingFunc(ctx, memberID, chatRoomID)
}

// ExistsChatRoomBelongingCalls gets all the calls that were made to ExistsChatRoomBelonging.
// Check the length with:
//
//	len(mockedStore.ExistsChatRoomBelongingCalls())
func (mock *StoreMock) ExistsChatRoomBelongingCalls() []struct {
	Ctx        context.Context
	MemberID   uuid.UUID
	ChatRoomID uuid.UUID
} {
	var calls []struct {
		Ctx        context.Context
		MemberID   uuid.UUID
		ChatRoomID uuid.UUID
	}
	mock.lockExistsChatRoomBelonging.RLock()
	calls = mock.calls.ExistsChatRoomBelonging
	mock.lockExistsChatRoomBelonging.RUnlock()
	return calls
}

// ExistsChatRoomBelongingWithSd calls ExistsChatRoomBelongingWithSdFunc.
func (mock *StoreMock) ExistsChatRoomBelongingWithSd(ctx context.Context, sd Sd, memberID uuid.UUID, chatRoomID uuid.UUID) (bool, error) {
	if mock.ExistsChatRoomBelongingWithSdFunc == nil {
		panic("StoreMock.ExistsChatRoomBelongingWithSdFunc: method is nil but Store.ExistsChatRoomBelongingWithSd was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Sd         Sd
		MemberID   uuid.UUID
		ChatRoomID uuid.UUID
	}{
		Ctx:        ctx,
		Sd:         sd,
		MemberID:   memberID,
		ChatRoomID: chatRoomID,
	}
	mock.lockExistsChatRoomBelongingWithSd.Lock()
	mock.calls.ExistsChatRoomBelongingWithSd = append(mock.calls.ExistsChatRoomBelongingWithSd, callInfo)
	mock.lockExistsChatRoomBelongingWithSd.Unlock()
	return mock.ExistsChatRoomBelongingWithSdFunc(ctx, sd, memberID, chatRoomID)
}

// ExistsChatRoomBelongingWithSdCalls gets all the calls that were made to ExistsChatRoomBelongingWithSd.
// Check the length with:
//
//	len(mockedStore.ExistsChatRoomBelongingWithSdCalls())
func (mock *StoreMock) ExistsChatRoomBelongingWithSdCalls() []struct {
	Ctx        context.Context
	Sd         Sd
	MemberID   uuid.UUID
	ChatRoomID uuid.UUID
} {
	var calls []struct {
		Ctx        context.Context
		Sd         Sd
		MemberID   uuid.UUID
		ChatRoomID uuid.UUID
	}
	mock.lockExistsChatRoomBelongingWithSd.RLock()
	calls = mock.calls.ExistsChatRoomBelongingWithSd
	mock.lockExistsChatRoomBelongingWithSd.RUnlock()
	return calls
}

// ExistsReadReceipt calls ExistsReadReceiptFunc.
func (mock *StoreMock) ExistsReadReceipt(ctx context.Context, memberID uuid.UUID, messageID uuid.UUID, where parameter.WhereExistsReadReceiptParam) (bool, error) {
	if mock.ExistsReadReceiptFunc == nil {
		panic("StoreMock.ExistsReadReceiptFunc: method is nil but Store.ExistsReadReceipt was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		MemberID  uuid.UUID
		MessageID uuid.UUID
		Where     parameter.WhereExistsReadReceiptParam
	}{
		Ctx:       ctx,
		MemberID:  memberID,
		MessageID: messageID,
		Where:     where,
	}
	mock.lockExistsReadReceipt.Lock()
	mock.calls.ExistsReadReceipt = append(mock.calls.ExistsReadReceipt, callInfo)
	mock.lockExistsReadReceipt.Unlock()
	return mock.ExistsReadReceiptFunc(ctx, memberID, messageID, where)
}

// ExistsReadReceiptCalls gets all the calls that were made to ExistsReadReceipt.
// Check the length with:
//
//	len(mockedStore.ExistsReadReceiptCalls())
func (mock *StoreMock) ExistsReadReceiptCalls() []struct {
	Ctx       context.Context
	MemberID  uuid.UUID
	MessageID uuid.UUID
	Where     parameter.WhereExistsReadReceiptParam
} {
	var calls []struct {
		Ctx       context.Context
		MemberID  uuid.UUID
		MessageID uuid.UUID
		Where     parameter.WhereExistsReadReceiptParam
	}
	mock.lockExistsReadReceipt.RLock()
	calls = mock.calls.ExistsReadReceipt
	mock.lockExistsReadReceipt.RUnlock()
	return calls
}

// ExistsReadReceiptWithSd calls ExistsReadReceiptWithSdFunc.
func (mock *StoreMock) ExistsReadReceiptWithSd(ctx context.Context, sd Sd, memberID uuid.UUID, messageID uuid.UUID, where parameter.WhereExistsReadReceiptParam) (bool, error) {
	if mock.ExistsReadReceiptWithSdFunc == nil {
		panic("StoreMock.ExistsReadReceiptWithSdFunc: method is nil but Store.ExistsReadReceiptWithSd was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Sd        Sd
		MemberID  uuid.UUID
		MessageID uuid.UUID
		Where     parameter.WhereExistsReadReceiptParam
	}{
		Ctx:       ctx,
		Sd:        sd,
		MemberID:  memberID,
		MessageID: messageID,
		Where:     where,
	}
	mock.lockExistsReadReceiptWithSd.Lock()
	mock.calls.ExistsReadReceiptWithSd = append(mock.calls.ExistsReadReceiptWithSd, callInfo)
	mock.lockExistsReadReceiptWithSd.Unlock()
	return mock.ExistsReadReceiptWithSdFunc(ctx, sd, memberID, messageID, where)
}

// ExistsReadReceiptWithSdCalls gets all the calls that were made to ExistsReadReceiptWithSd.
// Check the length with:
//
//	len(mockedStore.ExistsReadReceiptWithSdCalls())
func (mock *StoreMock) ExistsReadReceiptWithSdCalls() []struct {
	Ctx       context.Context
	Sd        Sd
	MemberID  uuid.UUID
	MessageID uuid.UUID
	Where     parameter.WhereExistsReadReceiptParam
} {
	var calls []struct {
		Ctx       context.Context
		Sd        Sd
		MemberID  uuid.UUID
		MessageID uuid.UUID
		Where     parameter.WhereExistsReadReceiptParam
	}
	mock.lockExistsReadReceiptWithSd.RLock()
	calls = mock.calls.ExistsReadReceiptWithSd
	mock.lockExistsReadReceiptWithSd.RUnlock()
	return calls
}

// FindAbsenceByID calls FindAbsenceByIDFunc.
func (mock *StoreMock) FindAbsenceByID(ctx context.Context, absenceID uuid.UUID) (entity.Absence, error) {
	if mock.FindAbsenceByIDFunc == nil {
		panic("StoreMock.FindAbsenceByIDFunc: method is nil but Store.FindAbsenceByID was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		AbsenceID uuid.UUID
	}{
		Ctx:       ctx,
		AbsenceID: absenceID,
	}
	mock.lockFindAbsenceByID.Lock()
	mock.calls.FindAbsenceByID = append(mock.calls.FindAbsenceByID, callInfo)
	mock.lockFindAbsenceByID.Unlock()
	return mock.FindAbsenceByIDFunc(ctx, absenceID)
}

// FindAbsenceByIDCalls gets all the calls that were made to FindAbsenceByID.
// Check the length with:
//
//	len(mockedStore.FindAbsenceByIDCalls())
func (mock *StoreMock) FindAbsenceByIDCalls() []struct {
	Ctx       context.Context
	AbsenceID uuid.UUID
} {
	var calls []struct {
		Ctx       context.Context
		AbsenceID uuid.UUID
	}
	mock.lockFindAbsenceByID.RLock()
	calls = mock.calls.FindAbsenceByID
	mock.lockFindAbsenceByID.RUnlock()
	return calls
}

// FindAbsenceByIDWithSd calls FindAbsenceByIDWithSdFunc.
func (mock *StoreMock) FindAbsenceByIDWithSd(ctx context.Context, sd Sd, absenceID uuid.UUID) (entity.Absence, error) {
	if mock.FindAbsenceByIDWithSdFunc == nil {
		panic("StoreMock.FindAbsenceByIDWithSdFunc: method is nil but Store.FindAbsenceByIDWithSd was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Sd        Sd
		AbsenceID uuid.UUID
	}{
		Ctx:       ctx,
		Sd:        sd,
		AbsenceID: absenceID,
	}
	mock.lockFindAbsenceByIDWithSd.Lock()
	mock.calls.FindAbsenceByIDWithSd = append(mock.calls.FindAbsenceByIDWithSd, callInfo)
	mock.lockFindAbsenceByIDWithSd.Unlock()
	return mock.FindAbsenceByIDWithSdFunc(ctx, sd, absenceID)
}

// FindAbsenceByIDWithSdCalls gets all the calls that were made to FindAbsenceByIDWithSd.
// Check the length with:
//
//	len(mockedStore.FindAbsenceByIDWithSdCalls())
func (mock *StoreMock) FindAbsenceByIDWithSdCalls() []struct {
	Ctx       context.Context
	Sd        Sd
	AbsenceID uuid.UUID
} {
	var calls []struct {
		Ctx       context.Context
		Sd        Sd
		AbsenceID uuid.UUID
	}
	mock.lockFindAbsenceByIDWithSd.RLock()
	calls = mock.calls.FindAbsenceByIDWithSd
	mock.lockFindAbsenceByIDWithSd.RUnlock()
	return calls
}

// FindAttachableItemByID calls FindAttachableItemByIDFunc.
func (mock *StoreMock) FindAttachableItemByID(ctx context.Context, attachableItemID uuid.UUID) (entity.AttachableItemWithContent, error) {
	if mock.FindAttachableItemByIDFunc == nil {
		panic("StoreMock.FindAttachableItemByIDFunc: method is nil but Store.FindAttachableItemByID was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		AttachableItemID uuid.UUID
	}{
		Ctx:              ctx,
		AttachableItemID: attachableItemID,
	}
	mock.lockFindAttachableItemByID.Lock()
	mock.calls.FindAttachableItemByID = append(mock.calls.FindAttachableItemByID, callInfo)
	mock.lockFindAttachableItemByID.Unlock()
	return mock.FindAttachableItemByIDFunc(ctx, attachableItemID)
}

// FindAttachableItemByIDCalls gets all the calls that were made to FindAttachableItemByID.
// Check the length with:
//
//	len(mockedStore.FindAttachableItemByIDCalls())
func (mock *StoreMock) FindAttachableItemByIDCalls() []struct {
	Ctx              context.Context
	AttachableItemID uuid.UUID
} {
	var calls []struct {
		Ctx              context.Context
		AttachableItemID uuid.UUID
	}
	mock.lockFindAttachableItemByID.RLock()
	calls = mock.calls.FindAttachableItemByID
	mock.lockFindAttachableItemByID.RUnlock()
	return calls
}

// FindAttachableItemByIDWithMimeType calls FindAttachableItemByIDWithMimeTypeFunc.
func (mock *StoreMock) FindAttachableItemByIDWithMimeType(ctx context.Context, attachableItemID uuid.UUID) (entity.AttachableItemWithMimeType, error) {
	if mock.FindAttachableItemByIDWithMimeTypeFunc == nil {
		panic("StoreMock.FindAttachableItemByIDWithMimeTypeFunc: method is nil but Store.FindAttachableItemByIDWithMimeType was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		AttachableItemID uuid.UUID
	}{
		Ctx:              ctx,
		AttachableItemID: attachableItemID,
	}
	mock.lockFindAttachableItemByIDWithMimeType.Lock()
	mock.calls.FindAttachableItemByIDWithMimeType = append(mock.calls.FindAttachableItemByIDWithMimeType, callInfo)
	mock.lockFindAttachableItemByIDWithMimeType.Unlock()
	return mock.FindAttachableItemByIDWithMimeTypeFunc(ctx, attachableItemID)
}

// FindAttachableItemByIDWithMimeTypeCalls gets all the calls that were made to FindAttachableItemByIDWithMimeType.
// Check the length with:
//
//	len(mockedStore.FindAttachableItemByIDWithMimeTypeCalls())
func (mock *StoreMock) FindAttachableItemByIDWithMimeTypeCalls() []struct {
	Ctx              context.Context
	AttachableItemID uuid.UUID
} {
	var calls []struct {
		Ctx              context.Context
		AttachableItemID uuid.UUID
	}
	mock.lockFindAttachableItemByIDWithMimeType.RLock()
	calls = mock.calls.FindAttachableItemByIDWithMimeType
	mock.lockFindAttachableItemByIDWithMimeType.RUnlock()
	return calls
}

// FindAttachableItemByIDWithMimeTypeWithSd calls FindAttachableItemByIDWithMimeTypeWithSdFunc.
func (mock *StoreMock) FindAttachableItemByIDWithMimeTypeWithSd(ctx context.Context, sd Sd, attachableItemID uuid.UUID) (entity.AttachableItemWithMimeType, error) {
	if mock.FindAttachableItemByIDWithMimeTypeWithSdFunc == nil {
		panic("StoreMock.FindAttachableItemByIDWithMimeTypeWithSdFunc: method is nil but Store.FindAttachableItemByIDWithMimeTypeWithSd was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		Sd               Sd
		AttachableItemID uuid.UUID
	}{
		Ctx:              ctx,
		Sd:               sd,
		AttachableItemID: attachableItemID,
	}
	mock.lockFindAttachableItemByIDWithMimeTypeWithSd.Lock()
	mock.calls.FindAttachableItemByIDWithMimeTypeWithSd = append(mock.calls.FindAttachableItemByIDWithMimeTypeWithSd, callInfo)
	mock.lockFindAttachableItemByIDWithMimeTypeWithSd.Unlock()
	return mock.FindAttachableItemByIDWithMimeTypeWithSdFunc(ctx, sd, attachableItemID)
}

// FindAttachableItemByIDWithMimeTypeWithSdCalls gets all the calls that were made to FindAttachableItemByIDWithMimeTypeWithSd.
// Check the length with:
//
//	len(mockedStore.FindAttachableItemByIDWithMimeTypeWithSdCalls())
func (mock *StoreMock) FindAttachableItemByIDWithMimeTypeWithSdCalls() []struct {
	Ctx              context.Context
	Sd               Sd
	AttachableItemID uuid.UUID
} {
	var calls []struct {
		Ctx              context.Context
		Sd               Sd
		AttachableItemID uuid.UUID
	}
	mock.lockFindAttachableItemByIDWithMimeTypeWithSd.RLock()
	calls = mock.calls.FindAttachableItemByIDWithMimeTypeWithSd
	mock.lockFindAttachableItemByIDWithMimeTypeWithSd.RUnlock()
	return calls
}

// FindAttachableItemByIDWithSd calls FindAttachableItemByIDWithSdFunc.
func (mock *StoreMock) FindAttachableItemByIDWithSd(ctx context.Context, sd Sd, attachableItemID uuid.UUID) (entity.AttachableItemWithContent, error) {
	if mock.FindAttachableItemByIDWithSdFunc == nil {
		panic("StoreMock.FindAttachableItemByIDWithSdFunc: method is nil but Store.FindAttachableItemByIDWithSd was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		Sd               Sd
		AttachableItemID uuid.UUID
	}{
		Ctx:              ctx,
		Sd:               sd,
		AttachableItemID: attachableItemID,
	}
	mock.lockFindAttachableItemByIDWithSd.Lock()
	mock.calls.FindAttachableItemByIDWithSd = append(mock.calls.FindAttachableItemByIDWithSd, callInfo)
	mock.lockFindAttachableItemByIDWithSd.Unlock()
	return mock.FindAttachableItemByIDWithSdFunc(ctx, sd, attachableItemID)
}

// FindAttachableItemByIDWithSdCalls gets all the calls that were made to FindAttachableItemByIDWithSd.
// Check the length with:
//
//	len(mockedStore.FindAttachableItemByIDWithSdCalls())
func (mock *StoreMock) FindAttachableItemByIDWithSdCalls() []struct {
	Ctx              context.Context
	Sd               Sd
	AttachableItemID uuid.UUID
} {
	var calls []struct {
		Ctx              context.Context
		Sd               Sd
		AttachableItemID uuid.UUID
	}
	mock.lockFindAttachableItemByIDWithSd.RLock()
	calls = mock.calls.FindAttachableItemByIDWithSd
	mock.lockFindAttachableItemByIDWithSd.RUnlock()
	return calls
}

// FindAttachableItemByURL calls FindAttachableItemByURLFunc.
func (mock *StoreMock) FindAttachableItemByURL(ctx context.Context, url string) (entity.AttachableItemWithContent, error) {
	if mock.FindAttachableItemByURLFunc == nil {
		panic("StoreMock.FindAttachableItemByURLFunc: method is nil but Store.FindAttachableItemByURL was just called")
	}
	callInfo := struct {
		Ctx context.Context
		URL string
	}{
		Ctx: ctx,
		URL: url,
	}
	mock.lockFindAttachableItemByURL.Lock()
	mock.calls.FindAttachableItemByURL = append(mock.calls.FindAttachableItemByURL, callInfo)
	mock.lockFindAttachableItemByURL.Unlock()
	return mock.FindAttachableItemByURLFunc(ctx, url)
}

// FindAttachableItemByURLCalls gets all the calls that were made to FindAttachableItemByURL.
// Check the length with:
//
//	len(mockedStore.FindAttachableItemByURLCalls())
func (mock *StoreMock) FindAttachableItemByURLCalls() []struct {
	Ctx context.Context
	URL string
} {
	var calls []struct {
		Ctx context.Context
		URL string
	}
	mock.lockFindAttachableItemByURL.RLock()
	calls = mock.calls.FindAttachableItemByURL
	mock.lockFindAttachableItemByURL.RUnlock()
	return calls
}

// FindAttachableItemByURLWithMimeType calls FindAttachableItemByURLWithMimeTypeFunc.
func (mock *StoreMock) FindAttachableItemByURLWithMimeType(ctx context.Context, url string) (entity.AttachableItemWithMimeType, error) {
	if mock.FindAttachableItemByURLWithMimeTypeFunc == nil {
		panic("StoreMock.FindAttachableItemByURLWithMimeTypeFunc: method is nil but Store.FindAttachableItemByURLWithMimeType was just called")
	}
	callInfo := struct {
		Ctx context.Context
		URL string
	}{
		Ctx: ctx,
		URL: url,
	}
	mock.lockFindAttachableItemByURLWithMimeType.Lock()
	mock.calls.FindAttachableItemByURLWithMimeType = append(mock.calls.FindAttachableItemByURLWithMimeType, callInfo)
	mock.lockFindAttachableItemByURLWithMimeType.Unlock()
	return mock.FindAttachableItemByURLWithMimeTypeFunc(ctx, url)
}

// FindAttachableItemByURLWithMimeTypeCalls gets all the calls that were made to FindAttachableItemByURLWithMimeType.
// Check the length with:
//
//	len(mockedStore.FindAttachableItemByURLWithMimeTypeCalls())
func (mock *StoreMock) FindAttachableItemByURLWithMimeTypeCalls() []struct {
	Ctx context.Context
	URL string
} {
	var calls []struct {
		Ctx context.Context
		URL string
	}
	mock.lockFindAttachableItemByURLWithMimeType.RLock()
	calls = mock.calls.FindAttachableItemByURLWithMimeType
	mock.lockFindAttachableItemByURLWithMimeType.RUnlock()
	return calls
}

// FindAttachableItemByURLWithMimeTypeWithSd calls FindAttachableItemByURLWithMimeTypeWithSdFunc.
func (mock *StoreMock) FindAttachableItemByURLWithMimeTypeWithSd(ctx context.Context, sd Sd, url string) (entity.AttachableItemWithMimeType, error) {
	if mock.FindAttachableItemByURLWithMimeTypeWithSdFunc == nil {
		panic("StoreMock.FindAttachableItemByURLWithMimeTypeWithSdFunc: method is nil but Store.FindAttachableItemByURLWithMimeTypeWithSd was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Sd  Sd
		URL string
	}{
		Ctx: ctx,
		Sd:  sd,
		URL: url,
	}
	mock.lockFindAttachableItemByURLWithMimeTypeWithSd.Lock()
	mock.calls.FindAttachableItemByURLWithMimeTypeWithSd = append(mock.calls.FindAttachableItemByURLWithMimeTypeWithSd, callInfo)
	mock.lockFindAttachableItemByURLWithMimeTypeWithSd.Unlock()
	return mock.FindAttachableItemByURLWithMimeTypeWithSdFunc(ctx, sd, url)
}

// FindAttachableItemByURLWithMimeTypeWithSdCalls gets all the calls that were made to FindAttachableItemByURLWithMimeTypeWithSd.
// Check the length with:
//
//	len(mockedStore.FindAttachableItemByURLWithMimeTypeWithSdCalls())
func (mock *StoreMock) FindAttachableItemByURLWithMimeTypeWithSdCalls() []struct {
	Ctx context.Context
	Sd  Sd
	URL string
} {
	var calls []struct {
		Ctx context.Context
		Sd  Sd
		URL string
	}
	mock.lockFindAttachableItemByURLWithMimeTypeWithSd.RLock()
	calls = mock.calls.FindAttachableItemByURLWithMimeTypeWithSd
	mock.lockFindAttachableItemByURLWithMimeTypeWithSd.RUnlock()
	return calls
}

// FindAttachableItemByURLWithSd calls FindAttachableItemByURLWithSdFunc.
func (mock *StoreMock) FindAttachableItemByURLWithSd(ctx context.Context, sd Sd, url string) (entity.AttachableItemWithContent, error) {
	if mock.FindAttachableItemByURLWithSdFunc == nil {
		panic("StoreMock.FindAttachableItemByURLWithSdFunc: method is nil but Store.FindAttachableItemByURLWithSd was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Sd  Sd
		URL string
	}{
		Ctx: ctx,
		Sd:  sd,
		URL: url,
	}
	mock.lockFindAttachableItemByURLWithSd.Lock()
	mock.calls.FindAttachableItemByURLWithSd = append(mock.calls.FindAttachableItemByURLWithSd, callInfo)
	mock.lockFindAttachableItemByURLWithSd.Unlock()
	return mock.FindAttachableItemByURLWithSdFunc(ctx, sd, url)
}

// FindAttachableItemByURLWithSdCalls gets all the calls that were made to FindAttachableItemByURLWithSd.
// Check the length with:
//
//	len(mockedStore.FindAttachableItemByURLWithSdCalls())
func (mock *StoreMock) FindAttachableItemByURLWithSdCalls() []struct {
	Ctx context.Context
	Sd  Sd
	URL string
} {
	var calls []struct {
		Ctx context.Context
		Sd  Sd
		URL string
	}
	mock.lockFindAttachableItemByURLWithSd.RLock()
	calls = mock.calls.FindAttachableItemByURLWithSd
	mock.lockFindAttachableItemByURLWithSd.RUnlock()
	return calls
}

// FindAttendStatusByID calls FindAttendStatusByIDFunc.
func (mock *StoreMock) FindAttendStatusByID(ctx context.Context, attendStatusID uuid.UUID) (entity.AttendStatus, error) {
	if mock.FindAttendStatusByIDFunc == nil {
		panic("StoreMock.FindAttendStatusByIDFunc: method is nil but Store.FindAttendStatusByID was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		AttendStatusID uuid.UUID
	}{
		Ctx:            ctx,
		AttendStatusID: attendStatusID,
	}
	mock.lockFindAttendStatusByID.Lock()
	mock.calls.FindAttendStatusByID = append(mock.calls.FindAttendStatusByID, callInfo)
	mock.lockFindAttendStatusByID.Unlock()
	return mock.FindAttendStatusByIDFunc(ctx, attendStatusID)
}

// FindAttendStatusByIDCalls gets all the calls that were made to FindAttendStatusByID.
// Check the length with:
//
//	len(mockedStore.FindAttendStatusByIDCalls())
func (mock *StoreMock) FindAttendStatusByIDCalls() []struct {
	Ctx            context.Context
	AttendStatusID uuid.UUID
} {
	var calls []struct {
		Ctx            context.Context
		AttendStatusID uuid.UUID
	}
	mock.lockFindAttendStatusByID.RLock()
	calls = mock.calls.FindAttendStatusByID
	mock.lockFindAttendStatusByID.RUnlock()
	return calls
}

// FindAttendStatusByIDWithSd calls FindAttendStatusByIDWithSdFunc.
func (mock *StoreMock) FindAttendStatusByIDWithSd(ctx context.Context, sd Sd, attendStatusID uuid.UUID) (entity.AttendStatus, error) {
	if mock.FindAttendStatusByIDWithSdFunc == nil {
		panic("StoreMock.FindAttendStatusByIDWithSdFunc: method is nil but Store.FindAttendStatusByIDWithSd was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		Sd             Sd
		AttendStatusID uuid.UUID
	}{
		Ctx:            ctx,
		Sd:             sd,
		AttendStatusID: attendStatusID,
	}
	mock.lockFindAttendStatusByIDWithSd.Lock()
	mock.calls.FindAttendStatusByIDWithSd = append(mock.calls.FindAttendStatusByIDWithSd, callInfo)
	mock.lockFindAttendStatusByIDWithSd.Unlock()
	return mock.FindAttendStatusByIDWithSdFunc(ctx, sd, attendStatusID)
}

// FindAttendStatusByIDWithSdCalls gets all the calls that were made to FindAttendStatusByIDWithSd.
// Check the length with:
//
//	len(mockedStore.FindAttendStatusByIDWithSdCalls())
func (mock *StoreMock) FindAttendStatusByIDWithSdCalls() []struct {
	Ctx            context.Context
	Sd             Sd
	AttendStatusID uuid.UUID
} {
	var calls []struct {
		Ctx            context.Context
		Sd             Sd
		AttendStatusID uuid.UUID
	}
	mock.lockFindAttendStatusByIDWithSd.RLock()
	calls = mock.calls.FindAttendStatusByIDWithSd
	mock.lockFindAttendStatusByIDWithSd.RUnlock()
	return calls
}

// FindAttendStatusByKey calls FindAttendStatusByKeyFunc.
func (mock *StoreMock) FindAttendStatusByKey(ctx context.Context, key string) (entity.AttendStatus, error) {
	if mock.FindAttendStatusByKeyFunc == nil {
		panic("StoreMock.FindAttendStatusByKeyFunc: method is nil but Store.FindAttendStatusByKey was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockFindAttendStatusByKey.Lock()
	mock.calls.FindAttendStatusByKey = append(mock.calls.FindAttendStatusByKey, callInfo)
	mock.lockFindAttendStatusByKey.Unlock()
	return mock.FindAttendStatusByKeyFunc(ctx, key)
}

// FindAttendStatusByKeyCalls gets all the calls that were made to FindAttendStatusByKey.
// Check the length with:
//
//	len(mockedStore.FindAttendStatusByKeyCalls())
func (mock *StoreMock) FindAttendStatusByKeyCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockFindAttendStatusByKey.RLock()
	calls = mock.calls.FindAttendStatusByKey
	mock.lockFindAttendStatusByKey.RUnlock()
	return calls
}

// FindAttendStatusByKeyWithSd calls FindAttendStatusByKeyWithSdFunc.
func (mock *StoreMock) FindAttendStatusByKeyWithSd(ctx context.Context, sd Sd, key string) (entity.AttendStatus, error) {
	if mock.FindAttendStatusByKeyWithSdFunc == nil {
		panic("StoreMock.FindAttendStatusByKeyWithSdFunc: method is nil but Store.FindAttendStatusByKeyWithSd was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}{
		Ctx: ctx,
		Sd:  sd,
		Key: key,
	}
	mock.lockFindAttendStatusByKeyWithSd.Lock()
	mock.calls.FindAttendStatusByKeyWithSd = append(mock.calls.FindAttendStatusByKeyWithSd, callInfo)
	mock.lockFindAttendStatusByKeyWithSd.Unlock()
	return mock.FindAttendStatusByKeyWithSdFunc(ctx, sd, key)
}

// FindAttendStatusByKeyWithSdCalls gets all the calls that were made to FindAttendStatusByKeyWithSd.
// Check the length with:
//
//	len(mockedStore.FindAttendStatusByKeyWithSdCalls())
func (mock *StoreMock) FindAttendStatusByKeyWithSdCalls() []struct {
	Ctx context.Context
	Sd  Sd
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}
	mock.lockFindAttendStatusByKeyWithSd.RLock()
	calls = mock.calls.FindAttendStatusByKeyWithSd
	mock.lockFindAttendStatusByKeyWithSd.RUnlock()
	return calls
}

// FindAttendanceTypeByID calls FindAttendanceTypeByIDFunc.
func (mock *StoreMock) FindAttendanceTypeByID(ctx context.Context, attendanceTypeID uuid.UUID) (entity.AttendanceType, error) {
	if mock.FindAttendanceTypeByIDFunc == nil {
		panic("StoreMock.FindAttendanceTypeByIDFunc: method is nil but Store.FindAttendanceTypeByID was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		AttendanceTypeID uuid.UUID
	}{
		Ctx:              ctx,
		AttendanceTypeID: attendanceTypeID,
	}
	mock.lockFindAttendanceTypeByID.Lock()
	mock.calls.FindAttendanceTypeByID = append(mock.calls.FindAttendanceTypeByID, callInfo)
	mock.lockFindAttendanceTypeByID.Unlock()
	return mock.FindAttendanceTypeByIDFunc(ctx, attendanceTypeID)
}

// FindAttendanceTypeByIDCalls gets all the calls that were made to FindAttendanceTypeByID.
// Check the length with:
//
//	len(mockedStore.FindAttendanceTypeByIDCalls())
func (mock *StoreMock) FindAttendanceTypeByIDCalls() []struct {
	Ctx              context.Context
	AttendanceTypeID uuid.UUID
} {
	var calls []struct {
		Ctx              context.Context
		AttendanceTypeID uuid.UUID
	}
	mock.lockFindAttendanceTypeByID.RLock()
	calls = mock.calls.FindAttendanceTypeByID
	mock.lockFindAttendanceTypeByID.RUnlock()
	return calls
}

// FindAttendanceTypeByIDWithSd calls FindAttendanceTypeByIDWithSdFunc.
func (mock *StoreMock) FindAttendanceTypeByIDWithSd(ctx context.Context, sd Sd, attendanceTypeID uuid.UUID) (entity.AttendanceType, error) {
	if mock.FindAttendanceTypeByIDWithSdFunc == nil {
		panic("StoreMock.FindAttendanceTypeByIDWithSdFunc: method is nil but Store.FindAttendanceTypeByIDWithSd was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		Sd               Sd
		AttendanceTypeID uuid.UUID
	}{
		Ctx:              ctx,
		Sd:               sd,
		AttendanceTypeID: attendanceTypeID,
	}
	mock.lockFindAttendanceTypeByIDWithSd.Lock()
	mock.calls.FindAttendanceTypeByIDWithSd = append(mock.calls.FindAttendanceTypeByIDWithSd, callInfo)
	mock.lockFindAttendanceTypeByIDWithSd.Unlock()
	return mock.FindAttendanceTypeByIDWithSdFunc(ctx, sd, attendanceTypeID)
}

// FindAttendanceTypeByIDWithSdCalls gets all the calls that were made to FindAttendanceTypeByIDWithSd.
// Check the length with:
//
//	len(mockedStore.FindAttendanceTypeByIDWithSdCalls())
func (mock *StoreMock) FindAttendanceTypeByIDWithSdCalls() []struct {
	Ctx              context.Context
	Sd               Sd
	AttendanceTypeID uuid.UUID
} {
	var calls []struct {
		Ctx              context.Context
		Sd               Sd
		AttendanceTypeID uuid.UUID
	}
	mock.lockFindAttendanceTypeByIDWithSd.RLock()
	calls = mock.calls.FindAttendanceTypeByIDWithSd
	mock.lockFindAttendanceTypeByIDWithSd.RUnlock()
	return calls
}

// FindAttendanceTypeByKey calls FindAttendanceTypeByKeyFunc.
func (mock *StoreMock) FindAttendanceTypeByKey(ctx context.Context, key string) (entity.AttendanceType, error) {
	if mock.FindAttendanceTypeByKeyFunc == nil {
		panic("StoreMock.FindAttendanceTypeByKeyFunc: method is nil but Store.FindAttendanceTypeByKey was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockFindAttendanceTypeByKey.Lock()
	mock.calls.FindAttendanceTypeByKey = append(mock.calls.FindAttendanceTypeByKey, callInfo)
	mock.lockFindAttendanceTypeByKey.Unlock()
	return mock.FindAttendanceTypeByKeyFunc(ctx, key)
}

// FindAttendanceTypeByKeyCalls gets all the calls that were made to FindAttendanceTypeByKey.
// Check the length with:
//
//	len(mockedStore.FindAttendanceTypeByKeyCalls())
func (mock *StoreMock) FindAttendanceTypeByKeyCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockFindAttendanceTypeByKey.RLock()
	calls = mock.calls.FindAttendanceTypeByKey
	mock.lockFindAttendanceTypeByKey.RUnlock()
	return calls
}

// FindAttendanceTypeByKeyWithSd calls FindAttendanceTypeByKeyWithSdFunc.
func (mock *StoreMock) FindAttendanceTypeByKeyWithSd(ctx context.Context, sd Sd, key string) (entity.AttendanceType, error) {
	if mock.FindAttendanceTypeByKeyWithSdFunc == nil {
		panic("StoreMock.FindAttendanceTypeByKeyWithSdFunc: method is nil but Store.FindAttendanceTypeByKeyWithSd was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}{
		Ctx: ctx,
		Sd:  sd,
		Key: key,
	}
	mock.lockFindAttendanceTypeByKeyWithSd.Lock()
	mock.calls.FindAttendanceTypeByKeyWithSd = append(mock.calls.FindAttendanceTypeByKeyWithSd, callInfo)
	mock.lockFindAttendanceTypeByKeyWithSd.Unlock()
	return mock.FindAttendanceTypeByKeyWithSdFunc(ctx, sd, key)
}

// FindAttendanceTypeByKeyWithSdCalls gets all the calls that were made to FindAttendanceTypeByKeyWithSd.
// Check the length with:
//
//	len(mockedStore.FindAttendanceTypeByKeyWithSdCalls())
func (mock *StoreMock) FindAttendanceTypeByKeyWithSdCalls() []struct {
	Ctx context.Context
	Sd  Sd
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}
	mock.lockFindAttendanceTypeByKeyWithSd.RLock()
	calls = mock.calls.FindAttendanceTypeByKeyWithSd
	mock.lockFindAttendanceTypeByKeyWithSd.RUnlock()
	return calls
}

// FindChatRoomActionTypeByID calls FindChatRoomActionTypeByIDFunc.
func (mock *StoreMock) FindChatRoomActionTypeByID(ctx context.Context, recordTypeID uuid.UUID) (entity.ChatRoomActionType, error) {
	if mock.FindChatRoomActionTypeByIDFunc == nil {
		panic("StoreMock.FindChatRoomActionTypeByIDFunc: method is nil but Store.FindChatRoomActionTypeByID was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		RecordTypeID uuid.UUID
	}{
		Ctx:          ctx,
		RecordTypeID: recordTypeID,
	}
	mock.lockFindChatRoomActionTypeByID.Lock()
	mock.calls.FindChatRoomActionTypeByID = append(mock.calls.FindChatRoomActionTypeByID, callInfo)
	mock.lockFindChatRoomActionTypeByID.Unlock()
	return mock.FindChatRoomActionTypeByIDFunc(ctx, recordTypeID)
}

// FindChatRoomActionTypeByIDCalls gets all the calls that were made to FindChatRoomActionTypeByID.
// Check the length with:
//
//	len(mockedStore.FindChatRoomActionTypeByIDCalls())
func (mock *StoreMock) FindChatRoomActionTypeByIDCalls() []struct {
	Ctx          context.Context
	RecordTypeID uuid.UUID
} {
	var calls []struct {
		Ctx          context.Context
		RecordTypeID uuid.UUID
	}
	mock.lockFindChatRoomActionTypeByID.RLock()
	calls = mock.calls.FindChatRoomActionTypeByID
	mock.lockFindChatRoomActionTypeByID.RUnlock()
	return calls
}

// FindChatRoomActionTypeByIDWithSd calls FindChatRoomActionTypeByIDWithSdFunc.
func (mock *StoreMock) FindChatRoomActionTypeByIDWithSd(ctx context.Context, sd Sd, recordTypeID uuid.UUID) (entity.ChatRoomActionType, error) {
	if mock.FindChatRoomActionTypeByIDWithSdFunc == nil {
		panic("StoreMock.FindChatRoomActionTypeByIDWithSdFunc: method is nil but Store.FindChatRoomActionTypeByIDWithSd was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		Sd           Sd
		RecordTypeID uuid.UUID
	}{
		Ctx:          ctx,
		Sd:           sd,
		RecordTypeID: recordTypeID,
	}
	mock.lockFindChatRoomActionTypeByIDWithSd.Lock()
	mock.calls.FindChatRoomActionTypeByIDWithSd = append(mock.calls.FindChatRoomActionTypeByIDWithSd, callInfo)
	mock.lockFindChatRoomActionTypeByIDWithSd.Unlock()
	return mock.FindChatRoomActionTypeByIDWithSdFunc(ctx, sd, recordTypeID)
}

// FindChatRoomActionTypeByIDWithSdCalls gets all the calls that were made to FindChatRoomActionTypeByIDWithSd.
// Check the length with:
//
//	len(mockedStore.FindChatRoomActionTypeByIDWithSdCalls())
func (mock *StoreMock) FindChatRoomActionTypeByIDWithSdCalls() []struct {
	Ctx          context.Context
	Sd           Sd
	RecordTypeID uuid.UUID
} {
	var calls []struct {
		Ctx          context.Context
		Sd           Sd
		RecordTypeID uuid.UUID
	}
	mock.lockFindChatRoomActionTypeByIDWithSd.RLock()
	calls = mock.calls.FindChatRoomActionTypeByIDWithSd
	mock.lockFindChatRoomActionTypeByIDWithSd.RUnlock()
	return calls
}

// FindChatRoomActionTypeByKey calls FindChatRoomActionTypeByKeyFunc.
func (mock *StoreMock) FindChatRoomActionTypeByKey(ctx context.Context, key string) (entity.ChatRoomActionType, error) {
	if mock.FindChatRoomActionTypeByKeyFunc == nil {
		panic("StoreMock.FindChatRoomActionTypeByKeyFunc: method is nil but Store.FindChatRoomActionTypeByKey was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockFindChatRoomActionTypeByKey.Lock()
	mock.calls.FindChatRoomActionTypeByKey = append(mock.calls.FindChatRoomActionTypeByKey, callInfo)
	mock.lockFindChatRoomActionTypeByKey.Unlock()
	return mock.FindChatRoomActionTypeByKeyFunc(ctx, key)
}

// FindChatRoomActionTypeByKeyCalls gets all the calls that were made to FindChatRoomActionTypeByKey.
// Check the length with:
//
//	len(mockedStore.FindChatRoomActionTypeByKeyCalls())
func (mock *StoreMock) FindChatRoomActionTypeByKeyCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockFindChatRoomActionTypeByKey.RLock()
	calls = mock.calls.FindChatRoomActionTypeByKey
	mock.lockFindChatRoomActionTypeByKey.RUnlock()
	return calls
}

// FindChatRoomActionTypeByKeyWithSd calls FindChatRoomActionTypeByKeyWithSdFunc.
func (mock *StoreMock) FindChatRoomActionTypeByKeyWithSd(ctx context.Context, sd Sd, key string) (entity.ChatRoomActionType, error) {
	if mock.FindChatRoomActionTypeByKeyWithSdFunc == nil {
		panic("StoreMock.FindChatRoomActionTypeByKeyWithSdFunc: method is nil but Store.FindChatRoomActionTypeByKeyWithSd was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}{
		Ctx: ctx,
		Sd:  sd,
		Key: key,
	}
	mock.lockFindChatRoomActionTypeByKeyWithSd.Lock()
	mock.calls.FindChatRoomActionTypeByKeyWithSd = append(mock.calls.FindChatRoomActionTypeByKeyWithSd, callInfo)
	mock.lockFindChatRoomActionTypeByKeyWithSd.Unlock()
	return mock.FindChatRoomActionTypeByKeyWithSdFunc(ctx, sd, key)
}

// FindChatRoomActionTypeByKeyWithSdCalls gets all the calls that were made to FindChatRoomActionTypeByKeyWithSd.
// Check the length with:
//
//	len(mockedStore.FindChatRoomActionTypeByKeyWithSdCalls())
func (mock *StoreMock) FindChatRoomActionTypeByKeyWithSdCalls() []struct {
	Ctx context.Context
	Sd  Sd
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}
	mock.lockFindChatRoomActionTypeByKeyWithSd.RLock()
	calls = mock.calls.FindChatRoomActionTypeByKeyWithSd
	mock.lockFindChatRoomActionTypeByKeyWithSd.RUnlock()
	return calls
}

// FindChatRoomByID calls FindChatRoomByIDFunc.
func (mock *StoreMock) FindChatRoomByID(ctx context.Context, chatRoomID uuid.UUID) (entity.ChatRoom, error) {
	if mock.FindChatRoomByIDFunc == nil {
		panic("StoreMock.FindChatRoomByIDFunc: method is nil but Store.FindChatRoomByID was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ChatRoomID uuid.UUID
	}{
		Ctx:        ctx,
		ChatRoomID: chatRoomID,
	}
	mock.lockFindChatRoomByID.Lock()
	mock.calls.FindChatRoomByID = append(mock.calls.FindChatRoomByID, callInfo)
	mock.lockFindChatRoomByID.Unlock()
	return mock.FindChatRoomByIDFunc(ctx, chatRoomID)
}

// FindChatRoomByIDCalls gets all the calls that were made to FindChatRoomByID.
// Check the length with:
//
//	len(mockedStore.FindChatRoomByIDCalls())
func (mock *StoreMock) FindChatRoomByIDCalls() []struct {
	Ctx        context.Context
	ChatRoomID uuid.UUID
} {
	var calls []struct {
		Ctx        context.Context
		ChatRoomID uuid.UUID
	}
	mock.lockFindChatRoomByID.RLock()
	calls = mock.calls.FindChatRoomByID
	mock.lockFindChatRoomByID.RUnlock()
	return calls
}

// FindChatRoomByIDWithCoverImage calls FindChatRoomByIDWithCoverImageFunc.
func (mock *StoreMock) FindChatRoomByIDWithCoverImage(ctx context.Context, chatRoomID uuid.UUID) (entity.ChatRoomWithCoverImage, error) {
	if mock.FindChatRoomByIDWithCoverImageFunc == nil {
		panic("StoreMock.FindChatRoomByIDWithCoverImageFunc: method is nil but Store.FindChatRoomByIDWithCoverImage was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ChatRoomID uuid.UUID
	}{
		Ctx:        ctx,
		ChatRoomID: chatRoomID,
	}
	mock.lockFindChatRoomByIDWithCoverImage.Lock()
	mock.calls.FindChatRoomByIDWithCoverImage = append(mock.calls.FindChatRoomByIDWithCoverImage, callInfo)
	mock.lockFindChatRoomByIDWithCoverImage.Unlock()
	return mock.FindChatRoomByIDWithCoverImageFunc(ctx, chatRoomID)
}

// FindChatRoomByIDWithCoverImageCalls gets all the calls that were made to FindChatRoomByIDWithCoverImage.
// Check the length with:
//
//	len(mockedStore.FindChatRoomByIDWithCoverImageCalls())
func (mock *StoreMock) FindChatRoomByIDWithCoverImageCalls() []struct {
	Ctx        context.Context
	ChatRoomID uuid.UUID
} {
	var calls []struct {
		Ctx        context.Context
		ChatRoomID uuid.UUID
	}
	mock.lockFindChatRoomByIDWithCoverImage.RLock()
	calls = mock.calls.FindChatRoomByIDWithCoverImage
	mock.lockFindChatRoomByIDWithCoverImage.RUnlock()
	return calls
}

// FindChatRoomByIDWithCoverImageWithSd calls FindChatRoomByIDWithCoverImageWithSdFunc.
func (mock *StoreMock) FindChatRoomByIDWithCoverImageWithSd(ctx context.Context, sd Sd, chatRoomID uuid.UUID) (entity.ChatRoomWithCoverImage, error) {
	if mock.FindChatRoomByIDWithCoverImageWithSdFunc == nil {
		panic("StoreMock.FindChatRoomByIDWithCoverImageWithSdFunc: method is nil but Store.FindChatRoomByIDWithCoverImageWithSd was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Sd         Sd
		ChatRoomID uuid.UUID
	}{
		Ctx:        ctx,
		Sd:         sd,
		ChatRoomID: chatRoomID,
	}
	mock.lockFindChatRoomByIDWithCoverImageWithSd.Lock()
	mock.calls.FindChatRoomByIDWithCoverImageWithSd = append(mock.calls.FindChatRoomByIDWithCoverImageWithSd, callInfo)
	mock.lockFindChatRoomByIDWithCoverImageWithSd.Unlock()
	return mock.FindChatRoomByIDWithCoverImageWithSdFunc(ctx, sd, chatRoomID)
}

// FindChatRoomByIDWithCoverImageWithSdCalls gets all the calls that were made to FindChatRoomByIDWithCoverImageWithSd.
// Check the length with:
//
//	len(mockedStore.FindChatRoomByIDWithCoverImageWithSdCalls())
func (mock *StoreMock) FindChatRoomByIDWithCoverImageWithSdCalls() []struct {
	Ctx        context.Context
	Sd         Sd
	ChatRoomID uuid.UUID
} {
	var calls []struct {
		Ctx        context.Context
		Sd         Sd
		ChatRoomID uuid.UUID
	}
	mock.lockFindChatRoomByIDWithCoverImageWithSd.RLock()
	calls = mock.calls.FindChatRoomByIDWithCoverImageWithSd
	mock.lockFindChatRoomByIDWithCoverImageWithSd.RUnlock()
	return calls
}

// FindChatRoomByIDWithSd calls FindChatRoomByIDWithSdFunc.
func (mock *StoreMock) FindChatRoomByIDWithSd(ctx context.Context, sd Sd, chatRoomID uuid.UUID) (entity.ChatRoom, error) {
	if mock.FindChatRoomByIDWithSdFunc == nil {
		panic("StoreMock.FindChatRoomByIDWithSdFunc: method is nil but Store.FindChatRoomByIDWithSd was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Sd         Sd
		ChatRoomID uuid.UUID
	}{
		Ctx:        ctx,
		Sd:         sd,
		ChatRoomID: chatRoomID,
	}
	mock.lockFindChatRoomByIDWithSd.Lock()
	mock.calls.FindChatRoomByIDWithSd = append(mock.calls.FindChatRoomByIDWithSd, callInfo)
	mock.lockFindChatRoomByIDWithSd.Unlock()
	return mock.FindChatRoomByIDWithSdFunc(ctx, sd, chatRoomID)
}

// FindChatRoomByIDWithSdCalls gets all the calls that were made to FindChatRoomByIDWithSd.
// Check the length with:
//
//	len(mockedStore.FindChatRoomByIDWithSdCalls())
func (mock *StoreMock) FindChatRoomByIDWithSdCalls() []struct {
	Ctx        context.Context
	Sd         Sd
	ChatRoomID uuid.UUID
} {
	var calls []struct {
		Ctx        context.Context
		Sd         Sd
		ChatRoomID uuid.UUID
	}
	mock.lockFindChatRoomByIDWithSd.RLock()
	calls = mock.calls.FindChatRoomByIDWithSd
	mock.lockFindChatRoomByIDWithSd.RUnlock()
	return calls
}

// FindChatRoomOnPrivate calls FindChatRoomOnPrivateFunc.
func (mock *StoreMock) FindChatRoomOnPrivate(ctx context.Context, ownerID uuid.UUID, memberID uuid.UUID) (entity.ChatRoom, error) {
	if mock.FindChatRoomOnPrivateFunc == nil {
		panic("StoreMock.FindChatRoomOnPrivateFunc: method is nil but Store.FindChatRoomOnPrivate was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		OwnerID  uuid.UUID
		MemberID uuid.UUID
	}{
		Ctx:      ctx,
		OwnerID:  ownerID,
		MemberID: memberID,
	}
	mock.lockFindChatRoomOnPrivate.Lock()
	mock.calls.FindChatRoomOnPrivate = append(mock.calls.FindChatRoomOnPrivate, callInfo)
	mock.lockFindChatRoomOnPrivate.Unlock()
	return mock.FindChatRoomOnPrivateFunc(ctx, ownerID, memberID)
}

// FindChatRoomOnPrivateCalls gets all the calls that were made to FindChatRoomOnPrivate.
// Check the length with:
//
//	len(mockedStore.FindChatRoomOnPrivateCalls())
func (mock *StoreMock) FindChatRoomOnPrivateCalls() []struct {
	Ctx      context.Context
	OwnerID  uuid.UUID
	MemberID uuid.UUID
} {
	var calls []struct {
		Ctx      context.Context
		OwnerID  uuid.UUID
		MemberID uuid.UUID
	}
	mock.lockFindChatRoomOnPrivate.RLock()
	calls = mock.calls.FindChatRoomOnPrivate
	mock.lockFindChatRoomOnPrivate.RUnlock()
	return calls
}

// FindChatRoomOnPrivateWithSd calls FindChatRoomOnPrivateWithSdFunc.
func (mock *StoreMock) FindChatRoomOnPrivateWithSd(ctx context.Context, sd Sd, ownerID uuid.UUID, memberID uuid.UUID) (entity.ChatRoom, error) {
	if mock.FindChatRoomOnPrivateWithSdFunc == nil {
		panic("StoreMock.FindChatRoomOnPrivateWithSdFunc: method is nil but Store.FindChatRoomOnPrivateWithSd was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Sd       Sd
		OwnerID  uuid.UUID
		MemberID uuid.UUID
	}{
		Ctx:      ctx,
		Sd:       sd,
		OwnerID:  ownerID,
		MemberID: memberID,
	}
	mock.lockFindChatRoomOnPrivateWithSd.Lock()
	mock.calls.FindChatRoomOnPrivateWithSd = append(mock.calls.FindChatRoomOnPrivateWithSd, callInfo)
	mock.lockFindChatRoomOnPrivateWithSd.Unlock()
	return mock.FindChatRoomOnPrivateWithSdFunc(ctx, sd, ownerID, memberID)
}

// FindChatRoomOnPrivateWithSdCalls gets all the calls that were made to FindChatRoomOnPrivateWithSd.
// Check the length with:
//
//	len(mockedStore.FindChatRoomOnPrivateWithSdCalls())
func (mock *StoreMock) FindChatRoomOnPrivateWithSdCalls() []struct {
	Ctx      context.Context
	Sd       Sd
	OwnerID  uuid.UUID
	MemberID uuid.UUID
} {
	var calls []struct {
		Ctx      context.Context
		Sd       Sd
		OwnerID  uuid.UUID
		MemberID uuid.UUID
	}
	mock.lockFindChatRoomOnPrivateWithSd.RLock()
	calls = mock.calls.FindChatRoomOnPrivateWithSd
	mock.lockFindChatRoomOnPrivateWithSd.RUnlock()
	return calls
}

// FindEventTypeByID calls FindEventTypeByIDFunc.
func (mock *StoreMock) FindEventTypeByID(ctx context.Context, eventTypeID uuid.UUID) (entity.EventType, error) {
	if mock.FindEventTypeByIDFunc == nil {
		panic("StoreMock.FindEventTypeByIDFunc: method is nil but Store.FindEventTypeByID was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		EventTypeID uuid.UUID
	}{
		Ctx:         ctx,
		EventTypeID: eventTypeID,
	}
	mock.lockFindEventTypeByID.Lock()
	mock.calls.FindEventTypeByID = append(mock.calls.FindEventTypeByID, callInfo)
	mock.lockFindEventTypeByID.Unlock()
	return mock.FindEventTypeByIDFunc(ctx, eventTypeID)
}

// FindEventTypeByIDCalls gets all the calls that were made to FindEventTypeByID.
// Check the length with:
//
//	len(mockedStore.FindEventTypeByIDCalls())
func (mock *StoreMock) FindEventTypeByIDCalls() []struct {
	Ctx         context.Context
	EventTypeID uuid.UUID
} {
	var calls []struct {
		Ctx         context.Context
		EventTypeID uuid.UUID
	}
	mock.lockFindEventTypeByID.RLock()
	calls = mock.calls.FindEventTypeByID
	mock.lockFindEventTypeByID.RUnlock()
	return calls
}

// FindEventTypeByIDWithSd calls FindEventTypeByIDWithSdFunc.
func (mock *StoreMock) FindEventTypeByIDWithSd(ctx context.Context, sd Sd, eventTypeID uuid.UUID) (entity.EventType, error) {
	if mock.FindEventTypeByIDWithSdFunc == nil {
		panic("StoreMock.FindEventTypeByIDWithSdFunc: method is nil but Store.FindEventTypeByIDWithSd was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Sd          Sd
		EventTypeID uuid.UUID
	}{
		Ctx:         ctx,
		Sd:          sd,
		EventTypeID: eventTypeID,
	}
	mock.lockFindEventTypeByIDWithSd.Lock()
	mock.calls.FindEventTypeByIDWithSd = append(mock.calls.FindEventTypeByIDWithSd, callInfo)
	mock.lockFindEventTypeByIDWithSd.Unlock()
	return mock.FindEventTypeByIDWithSdFunc(ctx, sd, eventTypeID)
}

// FindEventTypeByIDWithSdCalls gets all the calls that were made to FindEventTypeByIDWithSd.
// Check the length with:
//
//	len(mockedStore.FindEventTypeByIDWithSdCalls())
func (mock *StoreMock) FindEventTypeByIDWithSdCalls() []struct {
	Ctx         context.Context
	Sd          Sd
	EventTypeID uuid.UUID
} {
	var calls []struct {
		Ctx         context.Context
		Sd          Sd
		EventTypeID uuid.UUID
	}
	mock.lockFindEventTypeByIDWithSd.RLock()
	calls = mock.calls.FindEventTypeByIDWithSd
	mock.lockFindEventTypeByIDWithSd.RUnlock()
	return calls
}

// FindEventTypeByKey calls FindEventTypeByKeyFunc.
func (mock *StoreMock) FindEventTypeByKey(ctx context.Context, key string) (entity.EventType, error) {
	if mock.FindEventTypeByKeyFunc == nil {
		panic("StoreMock.FindEventTypeByKeyFunc: method is nil but Store.FindEventTypeByKey was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockFindEventTypeByKey.Lock()
	mock.calls.FindEventTypeByKey = append(mock.calls.FindEventTypeByKey, callInfo)
	mock.lockFindEventTypeByKey.Unlock()
	return mock.FindEventTypeByKeyFunc(ctx, key)
}

// FindEventTypeByKeyCalls gets all the calls that were made to FindEventTypeByKey.
// Check the length with:
//
//	len(mockedStore.FindEventTypeByKeyCalls())
func (mock *StoreMock) FindEventTypeByKeyCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockFindEventTypeByKey.RLock()
	calls = mock.calls.FindEventTypeByKey
	mock.lockFindEventTypeByKey.RUnlock()
	return calls
}

// FindEventTypeByKeyWithSd calls FindEventTypeByKeyWithSdFunc.
func (mock *StoreMock) FindEventTypeByKeyWithSd(ctx context.Context, sd Sd, key string) (entity.EventType, error) {
	if mock.FindEventTypeByKeyWithSdFunc == nil {
		panic("StoreMock.FindEventTypeByKeyWithSdFunc: method is nil but Store.FindEventTypeByKeyWithSd was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}{
		Ctx: ctx,
		Sd:  sd,
		Key: key,
	}
	mock.lockFindEventTypeByKeyWithSd.Lock()
	mock.calls.FindEventTypeByKeyWithSd = append(mock.calls.FindEventTypeByKeyWithSd, callInfo)
	mock.lockFindEventTypeByKeyWithSd.Unlock()
	return mock.FindEventTypeByKeyWithSdFunc(ctx, sd, key)
}

// FindEventTypeByKeyWithSdCalls gets all the calls that were made to FindEventTypeByKeyWithSd.
// Check the length with:
//
//	len(mockedStore.FindEventTypeByKeyWithSdCalls())
func (mock *StoreMock) FindEventTypeByKeyWithSdCalls() []struct {
	Ctx context.Context
	Sd  Sd
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}
	mock.lockFindEventTypeByKeyWithSd.RLock()
	calls = mock.calls.FindEventTypeByKeyWithSd
	mock.lockFindEventTypeByKeyWithSd.RUnlock()
	return calls
}

// FindFileByID calls FindFileByIDFunc.
func (mock *StoreMock) FindFileByID(ctx context.Context, fileID uuid.UUID) (entity.File, error) {
	if mock.FindFileByIDFunc == nil {
		panic("StoreMock.FindFileByIDFunc: method is nil but Store.FindFileByID was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		FileID uuid.UUID
	}{
		Ctx:    ctx,
		FileID: fileID,
	}
	mock.lockFindFileByID.Lock()
	mock.calls.FindFileByID = append(mock.calls.FindFileByID, callInfo)
	mock.lockFindFileByID.Unlock()
	return mock.FindFileByIDFunc(ctx, fileID)
}

// FindFileByIDCalls gets all the calls that were made to FindFileByID.
// Check the length with:
//
//	len(mockedStore.FindFileByIDCalls())
func (mock *StoreMock) FindFileByIDCalls() []struct {
	Ctx    context.Context
	FileID uuid.UUID
} {
	var calls []struct {
		Ctx    context.Context
		FileID uuid.UUID
	}
	mock.lockFindFileByID.RLock()
	calls = mock.calls.FindFileByID
	mock.lockFindFileByID.RUnlock()
	return calls
}

// FindFileByIDWithSd calls FindFileByIDWithSdFunc.
func (mock *StoreMock) FindFileByIDWithSd(ctx context.Context, sd Sd, fileID uuid.UUID) (entity.File, error) {
	if mock.FindFileByIDWithSdFunc == nil {
		panic("StoreMock.FindFileByIDWithSdFunc: method is nil but Store.FindFileByIDWithSd was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Sd     Sd
		FileID uuid.UUID
	}{
		Ctx:    ctx,
		Sd:     sd,
		FileID: fileID,
	}
	mock.lockFindFileByIDWithSd.Lock()
	mock.calls.FindFileByIDWithSd = append(mock.calls.FindFileByIDWithSd, callInfo)
	mock.lockFindFileByIDWithSd.Unlock()
	return mock.FindFileByIDWithSdFunc(ctx, sd, fileID)
}

// FindFileByIDWithSdCalls gets all the calls that were made to FindFileByIDWithSd.
// Check the length with:
//
//	len(mockedStore.FindFileByIDWithSdCalls())
func (mock *StoreMock) FindFileByIDWithSdCalls() []struct {
	Ctx    context.Context
	Sd     Sd
	FileID uuid.UUID
} {
	var calls []struct {
		Ctx    context.Context
		Sd     Sd
		FileID uuid.UUID
	}
	mock.lockFindFileByIDWithSd.RLock()
	calls = mock.calls.FindFileByIDWithSd
	mock.lockFindFileByIDWithSd.RUnlock()
	return calls
}

// FindFileWithAttachableItem calls FindFileWithAttachableItemFunc.
func (mock *StoreMock) FindFileWithAttachableItem(ctx context.Context, fileID uuid.UUID) (entity.FileWithAttachableItem, error) {
	if mock.FindFileWithAttachableItemFunc == nil {
		panic("StoreMock.FindFileWithAttachableItemFunc: method is nil but Store.FindFileWithAttachableItem was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		FileID uuid.UUID
	}{
		Ctx:    ctx,
		FileID: fileID,
	}
	mock.lockFindFileWithAttachableItem.Lock()
	mock.calls.FindFileWithAttachableItem = append(mock.calls.FindFileWithAttachableItem, callInfo)
	mock.lockFindFileWithAttachableItem.Unlock()
	return mock.FindFileWithAttachableItemFunc(ctx, fileID)
}

// FindFileWithAttachableItemCalls gets all the calls that were made to FindFileWithAttachableItem.
// Check the length with:
//
//	len(mockedStore.FindFileWithAttachableItemCalls())
func (mock *StoreMock) FindFileWithAttachableItemCalls() []struct {
	Ctx    context.Context
	FileID uuid.UUID
} {
	var calls []struct {
		Ctx    context.Context
		FileID uuid.UUID
	}
	mock.lockFindFileWithAttachableItem.RLock()
	calls = mock.calls.FindFileWithAttachableItem
	mock.lockFindFileWithAttachableItem.RUnlock()
	return calls
}

// FindFileWithAttachableItemWithSd calls FindFileWithAttachableItemWithSdFunc.
func (mock *StoreMock) FindFileWithAttachableItemWithSd(ctx context.Context, sd Sd, fileID uuid.UUID) (entity.FileWithAttachableItem, error) {
	if mock.FindFileWithAttachableItemWithSdFunc == nil {
		panic("StoreMock.FindFileWithAttachableItemWithSdFunc: method is nil but Store.FindFileWithAttachableItemWithSd was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Sd     Sd
		FileID uuid.UUID
	}{
		Ctx:    ctx,
		Sd:     sd,
		FileID: fileID,
	}
	mock.lockFindFileWithAttachableItemWithSd.Lock()
	mock.calls.FindFileWithAttachableItemWithSd = append(mock.calls.FindFileWithAttachableItemWithSd, callInfo)
	mock.lockFindFileWithAttachableItemWithSd.Unlock()
	return mock.FindFileWithAttachableItemWithSdFunc(ctx, sd, fileID)
}

// FindFileWithAttachableItemWithSdCalls gets all the calls that were made to FindFileWithAttachableItemWithSd.
// Check the length with:
//
//	len(mockedStore.FindFileWithAttachableItemWithSdCalls())
func (mock *StoreMock) FindFileWithAttachableItemWithSdCalls() []struct {
	Ctx    context.Context
	Sd     Sd
	FileID uuid.UUID
} {
	var calls []struct {
		Ctx    context.Context
		Sd     Sd
		FileID uuid.UUID
	}
	mock.lockFindFileWithAttachableItemWithSd.RLock()
	calls = mock.calls.FindFileWithAttachableItemWithSd
	mock.lockFindFileWithAttachableItemWithSd.RUnlock()
	return calls
}

// FindGradeByID calls FindGradeByIDFunc.
func (mock *StoreMock) FindGradeByID(ctx context.Context, gradeID uuid.UUID) (entity.Grade, error) {
	if mock.FindGradeByIDFunc == nil {
		panic("StoreMock.FindGradeByIDFunc: method is nil but Store.FindGradeByID was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		GradeID uuid.UUID
	}{
		Ctx:     ctx,
		GradeID: gradeID,
	}
	mock.lockFindGradeByID.Lock()
	mock.calls.FindGradeByID = append(mock.calls.FindGradeByID, callInfo)
	mock.lockFindGradeByID.Unlock()
	return mock.FindGradeByIDFunc(ctx, gradeID)
}

// FindGradeByIDCalls gets all the calls that were made to FindGradeByID.
// Check the length with:
//
//	len(mockedStore.FindGradeByIDCalls())
func (mock *StoreMock) FindGradeByIDCalls() []struct {
	Ctx     context.Context
	GradeID uuid.UUID
} {
	var calls []struct {
		Ctx     context.Context
		GradeID uuid.UUID
	}
	mock.lockFindGradeByID.RLock()
	calls = mock.calls.FindGradeByID
	mock.lockFindGradeByID.RUnlock()
	return calls
}

// FindGradeByIDWithSd calls FindGradeByIDWithSdFunc.
func (mock *StoreMock) FindGradeByIDWithSd(ctx context.Context, sd Sd, gradeID uuid.UUID) (entity.Grade, error) {
	if mock.FindGradeByIDWithSdFunc == nil {
		panic("StoreMock.FindGradeByIDWithSdFunc: method is nil but Store.FindGradeByIDWithSd was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Sd      Sd
		GradeID uuid.UUID
	}{
		Ctx:     ctx,
		Sd:      sd,
		GradeID: gradeID,
	}
	mock.lockFindGradeByIDWithSd.Lock()
	mock.calls.FindGradeByIDWithSd = append(mock.calls.FindGradeByIDWithSd, callInfo)
	mock.lockFindGradeByIDWithSd.Unlock()
	return mock.FindGradeByIDWithSdFunc(ctx, sd, gradeID)
}

// FindGradeByIDWithSdCalls gets all the calls that were made to FindGradeByIDWithSd.
// Check the length with:
//
//	len(mockedStore.FindGradeByIDWithSdCalls())
func (mock *StoreMock) FindGradeByIDWithSdCalls() []struct {
	Ctx     context.Context
	Sd      Sd
	GradeID uuid.UUID
} {
	var calls []struct {
		Ctx     context.Context
		Sd      Sd
		GradeID uuid.UUID
	}
	mock.lockFindGradeByIDWithSd.RLock()
	calls = mock.calls.FindGradeByIDWithSd
	mock.lockFindGradeByIDWithSd.RUnlock()
	return calls
}

// FindGradeByKey calls FindGradeByKeyFunc.
func (mock *StoreMock) FindGradeByKey(ctx context.Context, key string) (entity.Grade, error) {
	if mock.FindGradeByKeyFunc == nil {
		panic("StoreMock.FindGradeByKeyFunc: method is nil but Store.FindGradeByKey was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockFindGradeByKey.Lock()
	mock.calls.FindGradeByKey = append(mock.calls.FindGradeByKey, callInfo)
	mock.lockFindGradeByKey.Unlock()
	return mock.FindGradeByKeyFunc(ctx, key)
}

// FindGradeByKeyCalls gets all the calls that were made to FindGradeByKey.
// Check the length with:
//
//	len(mockedStore.FindGradeByKeyCalls())
func (mock *StoreMock) FindGradeByKeyCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockFindGradeByKey.RLock()
	calls = mock.calls.FindGradeByKey
	mock.lockFindGradeByKey.RUnlock()
	return calls
}

// FindGradeByKeyWithSd calls FindGradeByKeyWithSdFunc.
func (mock *StoreMock) FindGradeByKeyWithSd(ctx context.Context, sd Sd, key string) (entity.Grade, error) {
	if mock.FindGradeByKeyWithSdFunc == nil {
		panic("StoreMock.FindGradeByKeyWithSdFunc: method is nil but Store.FindGradeByKeyWithSd was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}{
		Ctx: ctx,
		Sd:  sd,
		Key: key,
	}
	mock.lockFindGradeByKeyWithSd.Lock()
	mock.calls.FindGradeByKeyWithSd = append(mock.calls.FindGradeByKeyWithSd, callInfo)
	mock.lockFindGradeByKeyWithSd.Unlock()
	return mock.FindGradeByKeyWithSdFunc(ctx, sd, key)
}

// FindGradeByKeyWithSdCalls gets all the calls that were made to FindGradeByKeyWithSd.
// Check the length with:
//
//	len(mockedStore.FindGradeByKeyWithSdCalls())
func (mock *StoreMock) FindGradeByKeyWithSdCalls() []struct {
	Ctx context.Context
	Sd  Sd
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}
	mock.lockFindGradeByKeyWithSd.RLock()
	calls = mock.calls.FindGradeByKeyWithSd
	mock.lockFindGradeByKeyWithSd.RUnlock()
	return calls
}

// FindGradeWithOrganization calls FindGradeWithOrganizationFunc.
func (mock *StoreMock) FindGradeWithOrganization(ctx context.Context, gradeID uuid.UUID) (entity.GradeWithOrganization, error) {
	if mock.FindGradeWithOrganizationFunc == nil {
		panic("StoreMock.FindGradeWithOrganizationFunc: method is nil but Store.FindGradeWithOrganization was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		GradeID uuid.UUID
	}{
		Ctx:     ctx,
		GradeID: gradeID,
	}
	mock.lockFindGradeWithOrganization.Lock()
	mock.calls.FindGradeWithOrganization = append(mock.calls.FindGradeWithOrganization, callInfo)
	mock.lockFindGradeWithOrganization.Unlock()
	return mock.FindGradeWithOrganizationFunc(ctx, gradeID)
}

// FindGradeWithOrganizationCalls gets all the calls that were made to FindGradeWithOrganization.
// Check the length with:
//
//	len(mockedStore.FindGradeWithOrganizationCalls())
func (mock *StoreMock) FindGradeWithOrganizationCalls() []struct {
	Ctx     context.Context
	GradeID uuid.UUID
} {
	var calls []struct {
		Ctx     context.Context
		GradeID uuid.UUID
	}
	mock.lockFindGradeWithOrganization.RLock()
	calls = mock.calls.FindGradeWithOrganization
	mock.lockFindGradeWithOrganization.RUnlock()
	return calls
}

// FindGradeWithOrganizationWithSd calls FindGradeWithOrganizationWithSdFunc.
func (mock *StoreMock) FindGradeWithOrganizationWithSd(ctx context.Context, sd Sd, gradeID uuid.UUID) (entity.GradeWithOrganization, error) {
	if mock.FindGradeWithOrganizationWithSdFunc == nil {
		panic("StoreMock.FindGradeWithOrganizationWithSdFunc: method is nil but Store.FindGradeWithOrganizationWithSd was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Sd      Sd
		GradeID uuid.UUID
	}{
		Ctx:     ctx,
		Sd:      sd,
		GradeID: gradeID,
	}
	mock.lockFindGradeWithOrganizationWithSd.Lock()
	mock.calls.FindGradeWithOrganizationWithSd = append(mock.calls.FindGradeWithOrganizationWithSd, callInfo)
	mock.lockFindGradeWithOrganizationWithSd.Unlock()
	return mock.FindGradeWithOrganizationWithSdFunc(ctx, sd, gradeID)
}

// FindGradeWithOrganizationWithSdCalls gets all the calls that were made to FindGradeWithOrganizationWithSd.
// Check the length with:
//
//	len(mockedStore.FindGradeWithOrganizationWithSdCalls())
func (mock *StoreMock) FindGradeWithOrganizationWithSdCalls() []struct {
	Ctx     context.Context
	Sd      Sd
	GradeID uuid.UUID
} {
	var calls []struct {
		Ctx     context.Context
		Sd      Sd
		GradeID uuid.UUID
	}
	mock.lockFindGradeWithOrganizationWithSd.RLock()
	calls = mock.calls.FindGradeWithOrganizationWithSd
	mock.lockFindGradeWithOrganizationWithSd.RUnlock()
	return calls
}

// FindGroupByID calls FindGroupByIDFunc.
func (mock *StoreMock) FindGroupByID(ctx context.Context, groupID uuid.UUID) (entity.Group, error) {
	if mock.FindGroupByIDFunc == nil {
		panic("StoreMock.FindGroupByIDFunc: method is nil but Store.FindGroupByID was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		GroupID uuid.UUID
	}{
		Ctx:     ctx,
		GroupID: groupID,
	}
	mock.lockFindGroupByID.Lock()
	mock.calls.FindGroupByID = append(mock.calls.FindGroupByID, callInfo)
	mock.lockFindGroupByID.Unlock()
	return mock.FindGroupByIDFunc(ctx, groupID)
}

// FindGroupByIDCalls gets all the calls that were made to FindGroupByID.
// Check the length with:
//
//	len(mockedStore.FindGroupByIDCalls())
func (mock *StoreMock) FindGroupByIDCalls() []struct {
	Ctx     context.Context
	GroupID uuid.UUID
} {
	var calls []struct {
		Ctx     context.Context
		GroupID uuid.UUID
	}
	mock.lockFindGroupByID.RLock()
	calls = mock.calls.FindGroupByID
	mock.lockFindGroupByID.RUnlock()
	return calls
}

// FindGroupByIDWithSd calls FindGroupByIDWithSdFunc.
func (mock *StoreMock) FindGroupByIDWithSd(ctx context.Context, sd Sd, groupID uuid.UUID) (entity.Group, error) {
	if mock.FindGroupByIDWithSdFunc == nil {
		panic("StoreMock.FindGroupByIDWithSdFunc: method is nil but Store.FindGroupByIDWithSd was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Sd      Sd
		GroupID uuid.UUID
	}{
		Ctx:     ctx,
		Sd:      sd,
		GroupID: groupID,
	}
	mock.lockFindGroupByIDWithSd.Lock()
	mock.calls.FindGroupByIDWithSd = append(mock.calls.FindGroupByIDWithSd, callInfo)
	mock.lockFindGroupByIDWithSd.Unlock()
	return mock.FindGroupByIDWithSdFunc(ctx, sd, groupID)
}

// FindGroupByIDWithSdCalls gets all the calls that were made to FindGroupByIDWithSd.
// Check the length with:
//
//	len(mockedStore.FindGroupByIDWithSdCalls())
func (mock *StoreMock) FindGroupByIDWithSdCalls() []struct {
	Ctx     context.Context
	Sd      Sd
	GroupID uuid.UUID
} {
	var calls []struct {
		Ctx     context.Context
		Sd      Sd
		GroupID uuid.UUID
	}
	mock.lockFindGroupByIDWithSd.RLock()
	calls = mock.calls.FindGroupByIDWithSd
	mock.lockFindGroupByIDWithSd.RUnlock()
	return calls
}

// FindGroupByKey calls FindGroupByKeyFunc.
func (mock *StoreMock) FindGroupByKey(ctx context.Context, key string) (entity.Group, error) {
	if mock.FindGroupByKeyFunc == nil {
		panic("StoreMock.FindGroupByKeyFunc: method is nil but Store.FindGroupByKey was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockFindGroupByKey.Lock()
	mock.calls.FindGroupByKey = append(mock.calls.FindGroupByKey, callInfo)
	mock.lockFindGroupByKey.Unlock()
	return mock.FindGroupByKeyFunc(ctx, key)
}

// FindGroupByKeyCalls gets all the calls that were made to FindGroupByKey.
// Check the length with:
//
//	len(mockedStore.FindGroupByKeyCalls())
func (mock *StoreMock) FindGroupByKeyCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockFindGroupByKey.RLock()
	calls = mock.calls.FindGroupByKey
	mock.lockFindGroupByKey.RUnlock()
	return calls
}

// FindGroupByKeyWithSd calls FindGroupByKeyWithSdFunc.
func (mock *StoreMock) FindGroupByKeyWithSd(ctx context.Context, sd Sd, key string) (entity.Group, error) {
	if mock.FindGroupByKeyWithSdFunc == nil {
		panic("StoreMock.FindGroupByKeyWithSdFunc: method is nil but Store.FindGroupByKeyWithSd was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}{
		Ctx: ctx,
		Sd:  sd,
		Key: key,
	}
	mock.lockFindGroupByKeyWithSd.Lock()
	mock.calls.FindGroupByKeyWithSd = append(mock.calls.FindGroupByKeyWithSd, callInfo)
	mock.lockFindGroupByKeyWithSd.Unlock()
	return mock.FindGroupByKeyWithSdFunc(ctx, sd, key)
}

// FindGroupByKeyWithSdCalls gets all the calls that were made to FindGroupByKeyWithSd.
// Check the length with:
//
//	len(mockedStore.FindGroupByKeyWithSdCalls())
func (mock *StoreMock) FindGroupByKeyWithSdCalls() []struct {
	Ctx context.Context
	Sd  Sd
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}
	mock.lockFindGroupByKeyWithSd.RLock()
	calls = mock.calls.FindGroupByKeyWithSd
	mock.lockFindGroupByKeyWithSd.RUnlock()
	return calls
}

// FindGroupWithOrganization calls FindGroupWithOrganizationFunc.
func (mock *StoreMock) FindGroupWithOrganization(ctx context.Context, groupID uuid.UUID) (entity.GroupWithOrganization, error) {
	if mock.FindGroupWithOrganizationFunc == nil {
		panic("StoreMock.FindGroupWithOrganizationFunc: method is nil but Store.FindGroupWithOrganization was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		GroupID uuid.UUID
	}{
		Ctx:     ctx,
		GroupID: groupID,
	}
	mock.lockFindGroupWithOrganization.Lock()
	mock.calls.FindGroupWithOrganization = append(mock.calls.FindGroupWithOrganization, callInfo)
	mock.lockFindGroupWithOrganization.Unlock()
	return mock.FindGroupWithOrganizationFunc(ctx, groupID)
}

// FindGroupWithOrganizationCalls gets all the calls that were made to FindGroupWithOrganization.
// Check the length with:
//
//	len(mockedStore.FindGroupWithOrganizationCalls())
func (mock *StoreMock) FindGroupWithOrganizationCalls() []struct {
	Ctx     context.Context
	GroupID uuid.UUID
} {
	var calls []struct {
		Ctx     context.Context
		GroupID uuid.UUID
	}
	mock.lockFindGroupWithOrganization.RLock()
	calls = mock.calls.FindGroupWithOrganization
	mock.lockFindGroupWithOrganization.RUnlock()
	return calls
}

// FindGroupWithOrganizationWithSd calls FindGroupWithOrganizationWithSdFunc.
func (mock *StoreMock) FindGroupWithOrganizationWithSd(ctx context.Context, sd Sd, groupID uuid.UUID) (entity.GroupWithOrganization, error) {
	if mock.FindGroupWithOrganizationWithSdFunc == nil {
		panic("StoreMock.FindGroupWithOrganizationWithSdFunc: method is nil but Store.FindGroupWithOrganizationWithSd was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Sd      Sd
		GroupID uuid.UUID
	}{
		Ctx:     ctx,
		Sd:      sd,
		GroupID: groupID,
	}
	mock.lockFindGroupWithOrganizationWithSd.Lock()
	mock.calls.FindGroupWithOrganizationWithSd = append(mock.calls.FindGroupWithOrganizationWithSd, callInfo)
	mock.lockFindGroupWithOrganizationWithSd.Unlock()
	return mock.FindGroupWithOrganizationWithSdFunc(ctx, sd, groupID)
}

// FindGroupWithOrganizationWithSdCalls gets all the calls that were made to FindGroupWithOrganizationWithSd.
// Check the length with:
//
//	len(mockedStore.FindGroupWithOrganizationWithSdCalls())
func (mock *StoreMock) FindGroupWithOrganizationWithSdCalls() []struct {
	Ctx     context.Context
	Sd      Sd
	GroupID uuid.UUID
} {
	var calls []struct {
		Ctx     context.Context
		Sd      Sd
		GroupID uuid.UUID
	}
	mock.lockFindGroupWithOrganizationWithSd.RLock()
	calls = mock.calls.FindGroupWithOrganizationWithSd
	mock.lockFindGroupWithOrganizationWithSd.RUnlock()
	return calls
}

// FindImageByID calls FindImageByIDFunc.
func (mock *StoreMock) FindImageByID(ctx context.Context, imageID uuid.UUID) (entity.Image, error) {
	if mock.FindImageByIDFunc == nil {
		panic("StoreMock.FindImageByIDFunc: method is nil but Store.FindImageByID was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		ImageID uuid.UUID
	}{
		Ctx:     ctx,
		ImageID: imageID,
	}
	mock.lockFindImageByID.Lock()
	mock.calls.FindImageByID = append(mock.calls.FindImageByID, callInfo)
	mock.lockFindImageByID.Unlock()
	return mock.FindImageByIDFunc(ctx, imageID)
}

// FindImageByIDCalls gets all the calls that were made to FindImageByID.
// Check the length with:
//
//	len(mockedStore.FindImageByIDCalls())
func (mock *StoreMock) FindImageByIDCalls() []struct {
	Ctx     context.Context
	ImageID uuid.UUID
} {
	var calls []struct {
		Ctx     context.Context
		ImageID uuid.UUID
	}
	mock.lockFindImageByID.RLock()
	calls = mock.calls.FindImageByID
	mock.lockFindImageByID.RUnlock()
	return calls
}

// FindImageByIDWithSd calls FindImageByIDWithSdFunc.
func (mock *StoreMock) FindImageByIDWithSd(ctx context.Context, sd Sd, imageID uuid.UUID) (entity.Image, error) {
	if mock.FindImageByIDWithSdFunc == nil {
		panic("StoreMock.FindImageByIDWithSdFunc: method is nil but Store.FindImageByIDWithSd was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Sd      Sd
		ImageID uuid.UUID
	}{
		Ctx:     ctx,
		Sd:      sd,
		ImageID: imageID,
	}
	mock.lockFindImageByIDWithSd.Lock()
	mock.calls.FindImageByIDWithSd = append(mock.calls.FindImageByIDWithSd, callInfo)
	mock.lockFindImageByIDWithSd.Unlock()
	return mock.FindImageByIDWithSdFunc(ctx, sd, imageID)
}

// FindImageByIDWithSdCalls gets all the calls that were made to FindImageByIDWithSd.
// Check the length with:
//
//	len(mockedStore.FindImageByIDWithSdCalls())
func (mock *StoreMock) FindImageByIDWithSdCalls() []struct {
	Ctx     context.Context
	Sd      Sd
	ImageID uuid.UUID
} {
	var calls []struct {
		Ctx     context.Context
		Sd      Sd
		ImageID uuid.UUID
	}
	mock.lockFindImageByIDWithSd.RLock()
	calls = mock.calls.FindImageByIDWithSd
	mock.lockFindImageByIDWithSd.RUnlock()
	return calls
}

// FindImageWithAttachableItem calls FindImageWithAttachableItemFunc.
func (mock *StoreMock) FindImageWithAttachableItem(ctx context.Context, imageID uuid.UUID) (entity.ImageWithAttachableItem, error) {
	if mock.FindImageWithAttachableItemFunc == nil {
		panic("StoreMock.FindImageWithAttachableItemFunc: method is nil but Store.FindImageWithAttachableItem was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		ImageID uuid.UUID
	}{
		Ctx:     ctx,
		ImageID: imageID,
	}
	mock.lockFindImageWithAttachableItem.Lock()
	mock.calls.FindImageWithAttachableItem = append(mock.calls.FindImageWithAttachableItem, callInfo)
	mock.lockFindImageWithAttachableItem.Unlock()
	return mock.FindImageWithAttachableItemFunc(ctx, imageID)
}

// FindImageWithAttachableItemCalls gets all the calls that were made to FindImageWithAttachableItem.
// Check the length with:
//
//	len(mockedStore.FindImageWithAttachableItemCalls())
func (mock *StoreMock) FindImageWithAttachableItemCalls() []struct {
	Ctx     context.Context
	ImageID uuid.UUID
} {
	var calls []struct {
		Ctx     context.Context
		ImageID uuid.UUID
	}
	mock.lockFindImageWithAttachableItem.RLock()
	calls = mock.calls.FindImageWithAttachableItem
	mock.lockFindImageWithAttachableItem.RUnlock()
	return calls
}

// FindImageWithAttachableItemWithSd calls FindImageWithAttachableItemWithSdFunc.
func (mock *StoreMock) FindImageWithAttachableItemWithSd(ctx context.Context, sd Sd, imageID uuid.UUID) (entity.ImageWithAttachableItem, error) {
	if mock.FindImageWithAttachableItemWithSdFunc == nil {
		panic("StoreMock.FindImageWithAttachableItemWithSdFunc: method is nil but Store.FindImageWithAttachableItemWithSd was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Sd      Sd
		ImageID uuid.UUID
	}{
		Ctx:     ctx,
		Sd:      sd,
		ImageID: imageID,
	}
	mock.lockFindImageWithAttachableItemWithSd.Lock()
	mock.calls.FindImageWithAttachableItemWithSd = append(mock.calls.FindImageWithAttachableItemWithSd, callInfo)
	mock.lockFindImageWithAttachableItemWithSd.Unlock()
	return mock.FindImageWithAttachableItemWithSdFunc(ctx, sd, imageID)
}

// FindImageWithAttachableItemWithSdCalls gets all the calls that were made to FindImageWithAttachableItemWithSd.
// Check the length with:
//
//	len(mockedStore.FindImageWithAttachableItemWithSdCalls())
func (mock *StoreMock) FindImageWithAttachableItemWithSdCalls() []struct {
	Ctx     context.Context
	Sd      Sd
	ImageID uuid.UUID
} {
	var calls []struct {
		Ctx     context.Context
		Sd      Sd
		ImageID uuid.UUID
	}
	mock.lockFindImageWithAttachableItemWithSd.RLock()
	calls = mock.calls.FindImageWithAttachableItemWithSd
	mock.lockFindImageWithAttachableItemWithSd.RUnlock()
	return calls
}

// FindMemberByID calls FindMemberByIDFunc.
func (mock *StoreMock) FindMemberByID(ctx context.Context, memberID uuid.UUID) (entity.Member, error) {
	if mock.FindMemberByIDFunc == nil {
		panic("StoreMock.FindMemberByIDFunc: method is nil but Store.FindMemberByID was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		MemberID uuid.UUID
	}{
		Ctx:      ctx,
		MemberID: memberID,
	}
	mock.lockFindMemberByID.Lock()
	mock.calls.FindMemberByID = append(mock.calls.FindMemberByID, callInfo)
	mock.lockFindMemberByID.Unlock()
	return mock.FindMemberByIDFunc(ctx, memberID)
}

// FindMemberByIDCalls gets all the calls that were made to FindMemberByID.
// Check the length with:
//
//	len(mockedStore.FindMemberByIDCalls())
func (mock *StoreMock) FindMemberByIDCalls() []struct {
	Ctx      context.Context
	MemberID uuid.UUID
} {
	var calls []struct {
		Ctx      context.Context
		MemberID uuid.UUID
	}
	mock.lockFindMemberByID.RLock()
	calls = mock.calls.FindMemberByID
	mock.lockFindMemberByID.RUnlock()
	return calls
}

// FindMemberByIDWithSd calls FindMemberByIDWithSdFunc.
func (mock *StoreMock) FindMemberByIDWithSd(ctx context.Context, sd Sd, memberID uuid.UUID) (entity.Member, error) {
	if mock.FindMemberByIDWithSdFunc == nil {
		panic("StoreMock.FindMemberByIDWithSdFunc: method is nil but Store.FindMemberByIDWithSd was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Sd       Sd
		MemberID uuid.UUID
	}{
		Ctx:      ctx,
		Sd:       sd,
		MemberID: memberID,
	}
	mock.lockFindMemberByIDWithSd.Lock()
	mock.calls.FindMemberByIDWithSd = append(mock.calls.FindMemberByIDWithSd, callInfo)
	mock.lockFindMemberByIDWithSd.Unlock()
	return mock.FindMemberByIDWithSdFunc(ctx, sd, memberID)
}

// FindMemberByIDWithSdCalls gets all the calls that were made to FindMemberByIDWithSd.
// Check the length with:
//
//	len(mockedStore.FindMemberByIDWithSdCalls())
func (mock *StoreMock) FindMemberByIDWithSdCalls() []struct {
	Ctx      context.Context
	Sd       Sd
	MemberID uuid.UUID
} {
	var calls []struct {
		Ctx      context.Context
		Sd       Sd
		MemberID uuid.UUID
	}
	mock.lockFindMemberByIDWithSd.RLock()
	calls = mock.calls.FindMemberByIDWithSd
	mock.lockFindMemberByIDWithSd.RUnlock()
	return calls
}

// FindMemberByLoginID calls FindMemberByLoginIDFunc.
func (mock *StoreMock) FindMemberByLoginID(ctx context.Context, loginID string) (entity.Member, error) {
	if mock.FindMemberByLoginIDFunc == nil {
		panic("StoreMock.FindMemberByLoginIDFunc: method is nil but Store.FindMemberByLoginID was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		LoginID string
	}{
		Ctx:     ctx,
		LoginID: loginID,
	}
	mock.lockFindMemberByLoginID.Lock()
	mock.calls.FindMemberByLoginID = append(mock.calls.FindMemberByLoginID, callInfo)
	mock.lockFindMemberByLoginID.Unlock()
	return mock.FindMemberByLoginIDFunc(ctx, loginID)
}

// FindMemberByLoginIDCalls gets all the calls that were made to FindMemberByLoginID.
// Check the length with:
//
//	len(mockedStore.FindMemberByLoginIDCalls())
func (mock *StoreMock) FindMemberByLoginIDCalls() []struct {
	Ctx     context.Context
	LoginID string
} {
	var calls []struct {
		Ctx     context.Context
		LoginID string
	}
	mock.lockFindMemberByLoginID.RLock()
	calls = mock.calls.FindMemberByLoginID
	mock.lockFindMemberByLoginID.RUnlock()
	return calls
}

// FindMemberByLoginIDWithSd calls FindMemberByLoginIDWithSdFunc.
func (mock *StoreMock) FindMemberByLoginIDWithSd(ctx context.Context, sd Sd, loginID string) (entity.Member, error) {
	if mock.FindMemberByLoginIDWithSdFunc == nil {
		panic("StoreMock.FindMemberByLoginIDWithSdFunc: method is nil but Store.FindMemberByLoginIDWithSd was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Sd      Sd
		LoginID string
	}{
		Ctx:     ctx,
		Sd:      sd,
		LoginID: loginID,
	}
	mock.lockFindMemberByLoginIDWithSd.Lock()
	mock.calls.FindMemberByLoginIDWithSd = append(mock.calls.FindMemberByLoginIDWithSd, callInfo)
	mock.lockFindMemberByLoginIDWithSd.Unlock()
	return mock.FindMemberByLoginIDWithSdFunc(ctx, sd, loginID)
}

// FindMemberByLoginIDWithSdCalls gets all the calls that were made to FindMemberByLoginIDWithSd.
// Check the length with:
//
//	len(mockedStore.FindMemberByLoginIDWithSdCalls())
func (mock *StoreMock) FindMemberByLoginIDWithSdCalls() []struct {
	Ctx     context.Context
	Sd      Sd
	LoginID string
} {
	var calls []struct {
		Ctx     context.Context
		Sd      Sd
		LoginID string
	}
	mock.lockFindMemberByLoginIDWithSd.RLock()
	calls = mock.calls.FindMemberByLoginIDWithSd
	mock.lockFindMemberByLoginIDWithSd.RUnlock()
	return calls
}

// FindMemberCredentialsByID calls FindMemberCredentialsByIDFunc.
func (mock *StoreMock) FindMemberCredentialsByID(ctx context.Context, memberID uuid.UUID) (entity.MemberCredentials, error) {
	if mock.FindMemberCredentialsByIDFunc == nil {
		panic("StoreMock.FindMemberCredentialsByIDFunc: method is nil but Store.FindMemberCredentialsByID was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		MemberID uuid.UUID
	}{
		Ctx:      ctx,
		MemberID: memberID,
	}
	mock.lockFindMemberCredentialsByID.Lock()
	mock.calls.FindMemberCredentialsByID = append(mock.calls.FindMemberCredentialsByID, callInfo)
	mock.lockFindMemberCredentialsByID.Unlock()
	return mock.FindMemberCredentialsByIDFunc(ctx, memberID)
}

// FindMemberCredentialsByIDCalls gets all the calls that were made to FindMemberCredentialsByID.
// Check the length with:
//
//	len(mockedStore.FindMemberCredentialsByIDCalls())
func (mock *StoreMock) FindMemberCredentialsByIDCalls() []struct {
	Ctx      context.Context
	MemberID uuid.UUID
} {
	var calls []struct {
		Ctx      context.Context
		MemberID uuid.UUID
	}
	mock.lockFindMemberCredentialsByID.RLock()
	calls = mock.calls.FindMemberCredentialsByID
	mock.lockFindMemberCredentialsByID.RUnlock()
	return calls
}

// FindMemberCredentialsByIDWithSd calls FindMemberCredentialsByIDWithSdFunc.
func (mock *StoreMock) FindMemberCredentialsByIDWithSd(ctx context.Context, sd Sd, memberID uuid.UUID) (entity.MemberCredentials, error) {
	if mock.FindMemberCredentialsByIDWithSdFunc == nil {
		panic("StoreMock.FindMemberCredentialsByIDWithSdFunc: method is nil but Store.FindMemberCredentialsByIDWithSd was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Sd       Sd
		MemberID uuid.UUID
	}{
		Ctx:      ctx,
		Sd:       sd,
		MemberID: memberID,
	}
	mock.lockFindMemberCredentialsByIDWithSd.Lock()
	mock.calls.FindMemberCredentialsByIDWithSd = append(mock.calls.FindMemberCredentialsByIDWithSd, callInfo)
	mock.lockFindMemberCredentialsByIDWithSd.Unlock()
	return mock.FindMemberCredentialsByIDWithSdFunc(ctx, sd, memberID)
}

// FindMemberCredentialsByIDWithSdCalls gets all the calls that were made to FindMemberCredentialsByIDWithSd.
// Check the length with:
//
//	len(mockedStore.FindMemberCredentialsByIDWithSdCalls())
func (mock *StoreMock) FindMemberCredentialsByIDWithSdCalls() []struct {
	Ctx      context.Context
	Sd       Sd
	MemberID uuid.UUID
} {
	var calls []struct {
		Ctx      context.Context
		Sd       Sd
		MemberID uuid.UUID
	}
	mock.lockFindMemberCredentialsByIDWithSd.RLock()
	calls = mock.calls.FindMemberCredentialsByIDWithSd
	mock.lockFindMemberCredentialsByIDWithSd.RUnlock()
	return calls
}

// FindMemberCredentialsByLoginID calls FindMemberCredentialsByLoginIDFunc.
func (mock *StoreMock) FindMemberCredentialsByLoginID(ctx context.Context, loginID string) (entity.MemberCredentials, error) {
	if mock.FindMemberCredentialsByLoginIDFunc == nil {
		panic("StoreMock.FindMemberCredentialsByLoginIDFunc: method is nil but Store.FindMemberCredentialsByLoginID was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		LoginID string
	}{
		Ctx:     ctx,
		LoginID: loginID,
	}
	mock.lockFindMemberCredentialsByLoginID.Lock()
	mock.calls.FindMemberCredentialsByLoginID = append(mock.calls.FindMemberCredentialsByLoginID, callInfo)
	mock.lockFindMemberCredentialsByLoginID.Unlock()
	return mock.FindMemberCredentialsByLoginIDFunc(ctx, loginID)
}

// FindMemberCredentialsByLoginIDCalls gets all the calls that were made to FindMemberCredentialsByLoginID.
// Check the length with:
//
//	len(mockedStore.FindMemberCredentialsByLoginIDCalls())
func (mock *StoreMock) FindMemberCredentialsByLoginIDCalls() []struct {
	Ctx     context.Context
	LoginID string
} {
	var calls []struct {
		Ctx     context.Context
		LoginID string
	}
	mock.lockFindMemberCredentialsByLoginID.RLock()
	calls = mock.calls.FindMemberCredentialsByLoginID
	mock.lockFindMemberCredentialsByLoginID.RUnlock()
	return calls
}

// FindMemberCredentialsByLoginIDWithSd calls FindMemberCredentialsByLoginIDWithSdFunc.
func (mock *StoreMock) FindMemberCredentialsByLoginIDWithSd(ctx context.Context, sd Sd, loginID string) (entity.MemberCredentials, error) {
	if mock.FindMemberCredentialsByLoginIDWithSdFunc == nil {
		panic("StoreMock.FindMemberCredentialsByLoginIDWithSdFunc: method is nil but Store.FindMemberCredentialsByLoginIDWithSd was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Sd      Sd
		LoginID string
	}{
		Ctx:     ctx,
		Sd:      sd,
		LoginID: loginID,
	}
	mock.lockFindMemberCredentialsByLoginIDWithSd.Lock()
	mock.calls.FindMemberCredentialsByLoginIDWithSd = append(mock.calls.FindMemberCredentialsByLoginIDWithSd, callInfo)
	mock.lockFindMemberCredentialsByLoginIDWithSd.Unlock()
	return mock.FindMemberCredentialsByLoginIDWithSdFunc(ctx, sd, loginID)
}

// FindMemberCredentialsByLoginIDWithSdCalls gets all the calls that were made to FindMemberCredentialsByLoginIDWithSd.
// Check the length with:
//
//	len(mockedStore.FindMemberCredentialsByLoginIDWithSdCalls())
func (mock *StoreMock) FindMemberCredentialsByLoginIDWithSdCalls() []struct {
	Ctx     context.Context
	Sd      Sd
	LoginID string
} {
	var calls []struct {
		Ctx     context.Context
		Sd      Sd
		LoginID string
	}
	mock.lockFindMemberCredentialsByLoginIDWithSd.RLock()
	calls = mock.calls.FindMemberCredentialsByLoginIDWithSd
	mock.lockFindMemberCredentialsByLoginIDWithSd.RUnlock()
	return calls
}

// FindMemberWithAttendStatus calls FindMemberWithAttendStatusFunc.
func (mock *StoreMock) FindMemberWithAttendStatus(ctx context.Context, memberID uuid.UUID) (entity.MemberWithAttendStatus, error) {
	if mock.FindMemberWithAttendStatusFunc == nil {
		panic("StoreMock.FindMemberWithAttendStatusFunc: method is nil but Store.FindMemberWithAttendStatus was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		MemberID uuid.UUID
	}{
		Ctx:      ctx,
		MemberID: memberID,
	}
	mock.lockFindMemberWithAttendStatus.Lock()
	mock.calls.FindMemberWithAttendStatus = append(mock.calls.FindMemberWithAttendStatus, callInfo)
	mock.lockFindMemberWithAttendStatus.Unlock()
	return mock.FindMemberWithAttendStatusFunc(ctx, memberID)
}

// FindMemberWithAttendStatusCalls gets all the calls that were made to FindMemberWithAttendStatus.
// Check the length with:
//
//	len(mockedStore.FindMemberWithAttendStatusCalls())
func (mock *StoreMock) FindMemberWithAttendStatusCalls() []struct {
	Ctx      context.Context
	MemberID uuid.UUID
} {
	var calls []struct {
		Ctx      context.Context
		MemberID uuid.UUID
	}
	mock.lockFindMemberWithAttendStatus.RLock()
	calls = mock.calls.FindMemberWithAttendStatus
	mock.lockFindMemberWithAttendStatus.RUnlock()
	return calls
}

// FindMemberWithAttendStatusWithSd calls FindMemberWithAttendStatusWithSdFunc.
func (mock *StoreMock) FindMemberWithAttendStatusWithSd(ctx context.Context, sd Sd, memberID uuid.UUID) (entity.MemberWithAttendStatus, error) {
	if mock.FindMemberWithAttendStatusWithSdFunc == nil {
		panic("StoreMock.FindMemberWithAttendStatusWithSdFunc: method is nil but Store.FindMemberWithAttendStatusWithSd was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Sd       Sd
		MemberID uuid.UUID
	}{
		Ctx:      ctx,
		Sd:       sd,
		MemberID: memberID,
	}
	mock.lockFindMemberWithAttendStatusWithSd.Lock()
	mock.calls.FindMemberWithAttendStatusWithSd = append(mock.calls.FindMemberWithAttendStatusWithSd, callInfo)
	mock.lockFindMemberWithAttendStatusWithSd.Unlock()
	return mock.FindMemberWithAttendStatusWithSdFunc(ctx, sd, memberID)
}

// FindMemberWithAttendStatusWithSdCalls gets all the calls that were made to FindMemberWithAttendStatusWithSd.
// Check the length with:
//
//	len(mockedStore.FindMemberWithAttendStatusWithSdCalls())
func (mock *StoreMock) FindMemberWithAttendStatusWithSdCalls() []struct {
	Ctx      context.Context
	Sd       Sd
	MemberID uuid.UUID
} {
	var calls []struct {
		Ctx      context.Context
		Sd       Sd
		MemberID uuid.UUID
	}
	mock.lockFindMemberWithAttendStatusWithSd.RLock()
	calls = mock.calls.FindMemberWithAttendStatusWithSd
	mock.lockFindMemberWithAttendStatusWithSd.RUnlock()
	return calls
}

// FindMemberWithCrew calls FindMemberWithCrewFunc.
func (mock *StoreMock) FindMemberWithCrew(ctx context.Context, memberID uuid.UUID) (entity.MemberWithCrew, error) {
	if mock.FindMemberWithCrewFunc == nil {
		panic("StoreMock.FindMemberWithCrewFunc: method is nil but Store.FindMemberWithCrew was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		MemberID uuid.UUID
	}{
		Ctx:      ctx,
		MemberID: memberID,
	}
	mock.lockFindMemberWithCrew.Lock()
	mock.calls.FindMemberWithCrew = append(mock.calls.FindMemberWithCrew, callInfo)
	mock.lockFindMemberWithCrew.Unlock()
	return mock.FindMemberWithCrewFunc(ctx, memberID)
}

// FindMemberWithCrewCalls gets all the calls that were made to FindMemberWithCrew.
// Check the length with:
//
//	len(mockedStore.FindMemberWithCrewCalls())
func (mock *StoreMock) FindMemberWithCrewCalls() []struct {
	Ctx      context.Context
	MemberID uuid.UUID
} {
	var calls []struct {
		Ctx      context.Context
		MemberID uuid.UUID
	}
	mock.lockFindMemberWithCrew.RLock()
	calls = mock.calls.FindMemberWithCrew
	mock.lockFindMemberWithCrew.RUnlock()
	return calls
}

// FindMemberWithCrewWithSd calls FindMemberWithCrewWithSdFunc.
func (mock *StoreMock) FindMemberWithCrewWithSd(ctx context.Context, sd Sd, memberID uuid.UUID) (entity.MemberWithCrew, error) {
	if mock.FindMemberWithCrewWithSdFunc == nil {
		panic("StoreMock.FindMemberWithCrewWithSdFunc: method is nil but Store.FindMemberWithCrewWithSd was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Sd       Sd
		MemberID uuid.UUID
	}{
		Ctx:      ctx,
		Sd:       sd,
		MemberID: memberID,
	}
	mock.lockFindMemberWithCrewWithSd.Lock()
	mock.calls.FindMemberWithCrewWithSd = append(mock.calls.FindMemberWithCrewWithSd, callInfo)
	mock.lockFindMemberWithCrewWithSd.Unlock()
	return mock.FindMemberWithCrewWithSdFunc(ctx, sd, memberID)
}

// FindMemberWithCrewWithSdCalls gets all the calls that were made to FindMemberWithCrewWithSd.
// Check the length with:
//
//	len(mockedStore.FindMemberWithCrewWithSdCalls())
func (mock *StoreMock) FindMemberWithCrewWithSdCalls() []struct {
	Ctx      context.Context
	Sd       Sd
	MemberID uuid.UUID
} {
	var calls []struct {
		Ctx      context.Context
		Sd       Sd
		MemberID uuid.UUID
	}
	mock.lockFindMemberWithCrewWithSd.RLock()
	calls = mock.calls.FindMemberWithCrewWithSd
	mock.lockFindMemberWithCrewWithSd.RUnlock()
	return calls
}

// FindMemberWithDetail calls FindMemberWithDetailFunc.
func (mock *StoreMock) FindMemberWithDetail(ctx context.Context, memberID uuid.UUID) (entity.MemberWithDetail, error) {
	if mock.FindMemberWithDetailFunc == nil {
		panic("StoreMock.FindMemberWithDetailFunc: method is nil but Store.FindMemberWithDetail was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		MemberID uuid.UUID
	}{
		Ctx:      ctx,
		MemberID: memberID,
	}
	mock.lockFindMemberWithDetail.Lock()
	mock.calls.FindMemberWithDetail = append(mock.calls.FindMemberWithDetail, callInfo)
	mock.lockFindMemberWithDetail.Unlock()
	return mock.FindMemberWithDetailFunc(ctx, memberID)
}

// FindMemberWithDetailCalls gets all the calls that were made to FindMemberWithDetail.
// Check the length with:
//
//	len(mockedStore.FindMemberWithDetailCalls())
func (mock *StoreMock) FindMemberWithDetailCalls() []struct {
	Ctx      context.Context
	MemberID uuid.UUID
} {
	var calls []struct {
		Ctx      context.Context
		MemberID uuid.UUID
	}
	mock.lockFindMemberWithDetail.RLock()
	calls = mock.calls.FindMemberWithDetail
	mock.lockFindMemberWithDetail.RUnlock()
	return calls
}

// FindMemberWithDetailWithSd calls FindMemberWithDetailWithSdFunc.
func (mock *StoreMock) FindMemberWithDetailWithSd(ctx context.Context, sd Sd, memberID uuid.UUID) (entity.MemberWithDetail, error) {
	if mock.FindMemberWithDetailWithSdFunc == nil {
		panic("StoreMock.FindMemberWithDetailWithSdFunc: method is nil but Store.FindMemberWithDetailWithSd was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Sd       Sd
		MemberID uuid.UUID
	}{
		Ctx:      ctx,
		Sd:       sd,
		MemberID: memberID,
	}
	mock.lockFindMemberWithDetailWithSd.Lock()
	mock.calls.FindMemberWithDetailWithSd = append(mock.calls.FindMemberWithDetailWithSd, callInfo)
	mock.lockFindMemberWithDetailWithSd.Unlock()
	return mock.FindMemberWithDetailWithSdFunc(ctx, sd, memberID)
}

// FindMemberWithDetailWithSdCalls gets all the calls that were made to FindMemberWithDetailWithSd.
// Check the length with:
//
//	len(mockedStore.FindMemberWithDetailWithSdCalls())
func (mock *StoreMock) FindMemberWithDetailWithSdCalls() []struct {
	Ctx      context.Context
	Sd       Sd
	MemberID uuid.UUID
} {
	var calls []struct {
		Ctx      context.Context
		Sd       Sd
		MemberID uuid.UUID
	}
	mock.lockFindMemberWithDetailWithSd.RLock()
	calls = mock.calls.FindMemberWithDetailWithSd
	mock.lockFindMemberWithDetailWithSd.RUnlock()
	return calls
}

// FindMemberWithPersonalOrganization calls FindMemberWithPersonalOrganizationFunc.
func (mock *StoreMock) FindMemberWithPersonalOrganization(ctx context.Context, memberID uuid.UUID) (entity.MemberWithPersonalOrganization, error) {
	if mock.FindMemberWithPersonalOrganizationFunc == nil {
		panic("StoreMock.FindMemberWithPersonalOrganizationFunc: method is nil but Store.FindMemberWithPersonalOrganization was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		MemberID uuid.UUID
	}{
		Ctx:      ctx,
		MemberID: memberID,
	}
	mock.lockFindMemberWithPersonalOrganization.Lock()
	mock.calls.FindMemberWithPersonalOrganization = append(mock.calls.FindMemberWithPersonalOrganization, callInfo)
	mock.lockFindMemberWithPersonalOrganization.Unlock()
	return mock.FindMemberWithPersonalOrganizationFunc(ctx, memberID)
}

// FindMemberWithPersonalOrganizationCalls gets all the calls that were made to FindMemberWithPersonalOrganization.
// Check the length with:
//
//	len(mockedStore.FindMemberWithPersonalOrganizationCalls())
func (mock *StoreMock) FindMemberWithPersonalOrganizationCalls() []struct {
	Ctx      context.Context
	MemberID uuid.UUID
} {
	var calls []struct {
		Ctx      context.Context
		MemberID uuid.UUID
	}
	mock.lockFindMemberWithPersonalOrganization.RLock()
	calls = mock.calls.FindMemberWithPersonalOrganization
	mock.lockFindMemberWithPersonalOrganization.RUnlock()
	return calls
}

// FindMemberWithPersonalOrganizationWithSd calls FindMemberWithPersonalOrganizationWithSdFunc.
func (mock *StoreMock) FindMemberWithPersonalOrganizationWithSd(ctx context.Context, sd Sd, memberID uuid.UUID) (entity.MemberWithPersonalOrganization, error) {
	if mock.FindMemberWithPersonalOrganizationWithSdFunc == nil {
		panic("StoreMock.FindMemberWithPersonalOrganizationWithSdFunc: method is nil but Store.FindMemberWithPersonalOrganizationWithSd was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Sd       Sd
		MemberID uuid.UUID
	}{
		Ctx:      ctx,
		Sd:       sd,
		MemberID: memberID,
	}
	mock.lockFindMemberWithPersonalOrganizationWithSd.Lock()
	mock.calls.FindMemberWithPersonalOrganizationWithSd = append(mock.calls.FindMemberWithPersonalOrganizationWithSd, callInfo)
	mock.lockFindMemberWithPersonalOrganizationWithSd.Unlock()
	return mock.FindMemberWithPersonalOrganizationWithSdFunc(ctx, sd, memberID)
}

// FindMemberWithPersonalOrganizationWithSdCalls gets all the calls that were made to FindMemberWithPersonalOrganizationWithSd.
// Check the length with:
//
//	len(mockedStore.FindMemberWithPersonalOrganizationWithSdCalls())
func (mock *StoreMock) FindMemberWithPersonalOrganizationWithSdCalls() []struct {
	Ctx      context.Context
	Sd       Sd
	MemberID uuid.UUID
} {
	var calls []struct {
		Ctx      context.Context
		Sd       Sd
		MemberID uuid.UUID
	}
	mock.lockFindMemberWithPersonalOrganizationWithSd.RLock()
	calls = mock.calls.FindMemberWithPersonalOrganizationWithSd
	mock.lockFindMemberWithPersonalOrganizationWithSd.RUnlock()
	return calls
}

// FindMemberWithProfileImage calls FindMemberWithProfileImageFunc.
func (mock *StoreMock) FindMemberWithProfileImage(ctx context.Context, memberID uuid.UUID) (entity.MemberWithProfileImage, error) {
	if mock.FindMemberWithProfileImageFunc == nil {
		panic("StoreMock.FindMemberWithProfileImageFunc: method is nil but Store.FindMemberWithProfileImage was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		MemberID uuid.UUID
	}{
		Ctx:      ctx,
		MemberID: memberID,
	}
	mock.lockFindMemberWithProfileImage.Lock()
	mock.calls.FindMemberWithProfileImage = append(mock.calls.FindMemberWithProfileImage, callInfo)
	mock.lockFindMemberWithProfileImage.Unlock()
	return mock.FindMemberWithProfileImageFunc(ctx, memberID)
}

// FindMemberWithProfileImageCalls gets all the calls that were made to FindMemberWithProfileImage.
// Check the length with:
//
//	len(mockedStore.FindMemberWithProfileImageCalls())
func (mock *StoreMock) FindMemberWithProfileImageCalls() []struct {
	Ctx      context.Context
	MemberID uuid.UUID
} {
	var calls []struct {
		Ctx      context.Context
		MemberID uuid.UUID
	}
	mock.lockFindMemberWithProfileImage.RLock()
	calls = mock.calls.FindMemberWithProfileImage
	mock.lockFindMemberWithProfileImage.RUnlock()
	return calls
}

// FindMemberWithProfileImageWithSd calls FindMemberWithProfileImageWithSdFunc.
func (mock *StoreMock) FindMemberWithProfileImageWithSd(ctx context.Context, sd Sd, memberID uuid.UUID) (entity.MemberWithProfileImage, error) {
	if mock.FindMemberWithProfileImageWithSdFunc == nil {
		panic("StoreMock.FindMemberWithProfileImageWithSdFunc: method is nil but Store.FindMemberWithProfileImageWithSd was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Sd       Sd
		MemberID uuid.UUID
	}{
		Ctx:      ctx,
		Sd:       sd,
		MemberID: memberID,
	}
	mock.lockFindMemberWithProfileImageWithSd.Lock()
	mock.calls.FindMemberWithProfileImageWithSd = append(mock.calls.FindMemberWithProfileImageWithSd, callInfo)
	mock.lockFindMemberWithProfileImageWithSd.Unlock()
	return mock.FindMemberWithProfileImageWithSdFunc(ctx, sd, memberID)
}

// FindMemberWithProfileImageWithSdCalls gets all the calls that were made to FindMemberWithProfileImageWithSd.
// Check the length with:
//
//	len(mockedStore.FindMemberWithProfileImageWithSdCalls())
func (mock *StoreMock) FindMemberWithProfileImageWithSdCalls() []struct {
	Ctx      context.Context
	Sd       Sd
	MemberID uuid.UUID
} {
	var calls []struct {
		Ctx      context.Context
		Sd       Sd
		MemberID uuid.UUID
	}
	mock.lockFindMemberWithProfileImageWithSd.RLock()
	calls = mock.calls.FindMemberWithProfileImageWithSd
	mock.lockFindMemberWithProfileImageWithSd.RUnlock()
	return calls
}

// FindMemberWithRole calls FindMemberWithRoleFunc.
func (mock *StoreMock) FindMemberWithRole(ctx context.Context, memberID uuid.UUID) (entity.MemberWithRole, error) {
	if mock.FindMemberWithRoleFunc == nil {
		panic("StoreMock.FindMemberWithRoleFunc: method is nil but Store.FindMemberWithRole was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		MemberID uuid.UUID
	}{
		Ctx:      ctx,
		MemberID: memberID,
	}
	mock.lockFindMemberWithRole.Lock()
	mock.calls.FindMemberWithRole = append(mock.calls.FindMemberWithRole, callInfo)
	mock.lockFindMemberWithRole.Unlock()
	return mock.FindMemberWithRoleFunc(ctx, memberID)
}

// FindMemberWithRoleCalls gets all the calls that were made to FindMemberWithRole.
// Check the length with:
//
//	len(mockedStore.FindMemberWithRoleCalls())
func (mock *StoreMock) FindMemberWithRoleCalls() []struct {
	Ctx      context.Context
	MemberID uuid.UUID
} {
	var calls []struct {
		Ctx      context.Context
		MemberID uuid.UUID
	}
	mock.lockFindMemberWithRole.RLock()
	calls = mock.calls.FindMemberWithRole
	mock.lockFindMemberWithRole.RUnlock()
	return calls
}

// FindMemberWithRoleWithSd calls FindMemberWithRoleWithSdFunc.
func (mock *StoreMock) FindMemberWithRoleWithSd(ctx context.Context, sd Sd, memberID uuid.UUID) (entity.MemberWithRole, error) {
	if mock.FindMemberWithRoleWithSdFunc == nil {
		panic("StoreMock.FindMemberWithRoleWithSdFunc: method is nil but Store.FindMemberWithRoleWithSd was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Sd       Sd
		MemberID uuid.UUID
	}{
		Ctx:      ctx,
		Sd:       sd,
		MemberID: memberID,
	}
	mock.lockFindMemberWithRoleWithSd.Lock()
	mock.calls.FindMemberWithRoleWithSd = append(mock.calls.FindMemberWithRoleWithSd, callInfo)
	mock.lockFindMemberWithRoleWithSd.Unlock()
	return mock.FindMemberWithRoleWithSdFunc(ctx, sd, memberID)
}

// FindMemberWithRoleWithSdCalls gets all the calls that were made to FindMemberWithRoleWithSd.
// Check the length with:
//
//	len(mockedStore.FindMemberWithRoleWithSdCalls())
func (mock *StoreMock) FindMemberWithRoleWithSdCalls() []struct {
	Ctx      context.Context
	Sd       Sd
	MemberID uuid.UUID
} {
	var calls []struct {
		Ctx      context.Context
		Sd       Sd
		MemberID uuid.UUID
	}
	mock.lockFindMemberWithRoleWithSd.RLock()
	calls = mock.calls.FindMemberWithRoleWithSd
	mock.lockFindMemberWithRoleWithSd.RUnlock()
	return calls
}

// FindMessageByID calls FindMessageByIDFunc.
func (mock *StoreMock) FindMessageByID(ctx context.Context, messageID uuid.UUID) (entity.Message, error) {
	if mock.FindMessageByIDFunc == nil {
		panic("StoreMock.FindMessageByIDFunc: method is nil but Store.FindMessageByID was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		MessageID uuid.UUID
	}{
		Ctx:       ctx,
		MessageID: messageID,
	}
	mock.lockFindMessageByID.Lock()
	mock.calls.FindMessageByID = append(mock.calls.FindMessageByID, callInfo)
	mock.lockFindMessageByID.Unlock()
	return mock.FindMessageByIDFunc(ctx, messageID)
}

// FindMessageByIDCalls gets all the calls that were made to FindMessageByID.
// Check the length with:
//
//	len(mockedStore.FindMessageByIDCalls())
func (mock *StoreMock) FindMessageByIDCalls() []struct {
	Ctx       context.Context
	MessageID uuid.UUID
} {
	var calls []struct {
		Ctx       context.Context
		MessageID uuid.UUID
	}
	mock.lockFindMessageByID.RLock()
	calls = mock.calls.FindMessageByID
	mock.lockFindMessageByID.RUnlock()
	return calls
}

// FindMessageByIDWithSd calls FindMessageByIDWithSdFunc.
func (mock *StoreMock) FindMessageByIDWithSd(ctx context.Context, sd Sd, messageID uuid.UUID) (entity.Message, error) {
	if mock.FindMessageByIDWithSdFunc == nil {
		panic("StoreMock.FindMessageByIDWithSdFunc: method is nil but Store.FindMessageByIDWithSd was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Sd        Sd
		MessageID uuid.UUID
	}{
		Ctx:       ctx,
		Sd:        sd,
		MessageID: messageID,
	}
	mock.lockFindMessageByIDWithSd.Lock()
	mock.calls.FindMessageByIDWithSd = append(mock.calls.FindMessageByIDWithSd, callInfo)
	mock.lockFindMessageByIDWithSd.Unlock()
	return mock.FindMessageByIDWithSdFunc(ctx, sd, messageID)
}

// FindMessageByIDWithSdCalls gets all the calls that were made to FindMessageByIDWithSd.
// Check the length with:
//
//	len(mockedStore.FindMessageByIDWithSdCalls())
func (mock *StoreMock) FindMessageByIDWithSdCalls() []struct {
	Ctx       context.Context
	Sd        Sd
	MessageID uuid.UUID
} {
	var calls []struct {
		Ctx       context.Context
		Sd        Sd
		MessageID uuid.UUID
	}
	mock.lockFindMessageByIDWithSd.RLock()
	calls = mock.calls.FindMessageByIDWithSd
	mock.lockFindMessageByIDWithSd.RUnlock()
	return calls
}

// FindMessageWithChatRoom calls FindMessageWithChatRoomFunc.
func (mock *StoreMock) FindMessageWithChatRoom(ctx context.Context, messageID uuid.UUID) (entity.MessageWithChatRoom, error) {
	if mock.FindMessageWithChatRoomFunc == nil {
		panic("StoreMock.FindMessageWithChatRoomFunc: method is nil but Store.FindMessageWithChatRoom was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		MessageID uuid.UUID
	}{
		Ctx:       ctx,
		MessageID: messageID,
	}
	mock.lockFindMessageWithChatRoom.Lock()
	mock.calls.FindMessageWithChatRoom = append(mock.calls.FindMessageWithChatRoom, callInfo)
	mock.lockFindMessageWithChatRoom.Unlock()
	return mock.FindMessageWithChatRoomFunc(ctx, messageID)
}

// FindMessageWithChatRoomCalls gets all the calls that were made to FindMessageWithChatRoom.
// Check the length with:
//
//	len(mockedStore.FindMessageWithChatRoomCalls())
func (mock *StoreMock) FindMessageWithChatRoomCalls() []struct {
	Ctx       context.Context
	MessageID uuid.UUID
} {
	var calls []struct {
		Ctx       context.Context
		MessageID uuid.UUID
	}
	mock.lockFindMessageWithChatRoom.RLock()
	calls = mock.calls.FindMessageWithChatRoom
	mock.lockFindMessageWithChatRoom.RUnlock()
	return calls
}

// FindMessageWithChatRoomAction calls FindMessageWithChatRoomActionFunc.
func (mock *StoreMock) FindMessageWithChatRoomAction(ctx context.Context, messageID uuid.UUID) (entity.MessageWithChatRoomAction, error) {
	if mock.FindMessageWithChatRoomActionFunc == nil {
		panic("StoreMock.FindMessageWithChatRoomActionFunc: method is nil but Store.FindMessageWithChatRoomAction was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		MessageID uuid.UUID
	}{
		Ctx:       ctx,
		MessageID: messageID,
	}
	mock.lockFindMessageWithChatRoomAction.Lock()
	mock.calls.FindMessageWithChatRoomAction = append(mock.calls.FindMessageWithChatRoomAction, callInfo)
	mock.lockFindMessageWithChatRoomAction.Unlock()
	return mock.FindMessageWithChatRoomActionFunc(ctx, messageID)
}

// FindMessageWithChatRoomActionCalls gets all the calls that were made to FindMessageWithChatRoomAction.
// Check the length with:
//
//	len(mockedStore.FindMessageWithChatRoomActionCalls())
func (mock *StoreMock) FindMessageWithChatRoomActionCalls() []struct {
	Ctx       context.Context
	MessageID uuid.UUID
} {
	var calls []struct {
		Ctx       context.Context
		MessageID uuid.UUID
	}
	mock.lockFindMessageWithChatRoomAction.RLock()
	calls = mock.calls.FindMessageWithChatRoomAction
	mock.lockFindMessageWithChatRoomAction.RUnlock()
	return calls
}

// FindMessageWithChatRoomActionWithSd calls FindMessageWithChatRoomActionWithSdFunc.
func (mock *StoreMock) FindMessageWithChatRoomActionWithSd(ctx context.Context, sd Sd, messageID uuid.UUID) (entity.MessageWithChatRoomAction, error) {
	if mock.FindMessageWithChatRoomActionWithSdFunc == nil {
		panic("StoreMock.FindMessageWithChatRoomActionWithSdFunc: method is nil but Store.FindMessageWithChatRoomActionWithSd was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Sd        Sd
		MessageID uuid.UUID
	}{
		Ctx:       ctx,
		Sd:        sd,
		MessageID: messageID,
	}
	mock.lockFindMessageWithChatRoomActionWithSd.Lock()
	mock.calls.FindMessageWithChatRoomActionWithSd = append(mock.calls.FindMessageWithChatRoomActionWithSd, callInfo)
	mock.lockFindMessageWithChatRoomActionWithSd.Unlock()
	return mock.FindMessageWithChatRoomActionWithSdFunc(ctx, sd, messageID)
}

// FindMessageWithChatRoomActionWithSdCalls gets all the calls that were made to FindMessageWithChatRoomActionWithSd.
// Check the length with:
//
//	len(mockedStore.FindMessageWithChatRoomActionWithSdCalls())
func (mock *StoreMock) FindMessageWithChatRoomActionWithSdCalls() []struct {
	Ctx       context.Context
	Sd        Sd
	MessageID uuid.UUID
} {
	var calls []struct {
		Ctx       context.Context
		Sd        Sd
		MessageID uuid.UUID
	}
	mock.lockFindMessageWithChatRoomActionWithSd.RLock()
	calls = mock.calls.FindMessageWithChatRoomActionWithSd
	mock.lockFindMessageWithChatRoomActionWithSd.RUnlock()
	return calls
}

// FindMessageWithChatRoomWithSd calls FindMessageWithChatRoomWithSdFunc.
func (mock *StoreMock) FindMessageWithChatRoomWithSd(ctx context.Context, sd Sd, messageID uuid.UUID) (entity.MessageWithChatRoom, error) {
	if mock.FindMessageWithChatRoomWithSdFunc == nil {
		panic("StoreMock.FindMessageWithChatRoomWithSdFunc: method is nil but Store.FindMessageWithChatRoomWithSd was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Sd        Sd
		MessageID uuid.UUID
	}{
		Ctx:       ctx,
		Sd:        sd,
		MessageID: messageID,
	}
	mock.lockFindMessageWithChatRoomWithSd.Lock()
	mock.calls.FindMessageWithChatRoomWithSd = append(mock.calls.FindMessageWithChatRoomWithSd, callInfo)
	mock.lockFindMessageWithChatRoomWithSd.Unlock()
	return mock.FindMessageWithChatRoomWithSdFunc(ctx, sd, messageID)
}

// FindMessageWithChatRoomWithSdCalls gets all the calls that were made to FindMessageWithChatRoomWithSd.
// Check the length with:
//
//	len(mockedStore.FindMessageWithChatRoomWithSdCalls())
func (mock *StoreMock) FindMessageWithChatRoomWithSdCalls() []struct {
	Ctx       context.Context
	Sd        Sd
	MessageID uuid.UUID
} {
	var calls []struct {
		Ctx       context.Context
		Sd        Sd
		MessageID uuid.UUID
	}
	mock.lockFindMessageWithChatRoomWithSd.RLock()
	calls = mock.calls.FindMessageWithChatRoomWithSd
	mock.lockFindMessageWithChatRoomWithSd.RUnlock()
	return calls
}

// FindMessageWithSender calls FindMessageWithSenderFunc.
func (mock *StoreMock) FindMessageWithSender(ctx context.Context, messageID uuid.UUID) (entity.MessageWithSender, error) {
	if mock.FindMessageWithSenderFunc == nil {
		panic("StoreMock.FindMessageWithSenderFunc: method is nil but Store.FindMessageWithSender was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		MessageID uuid.UUID
	}{
		Ctx:       ctx,
		MessageID: messageID,
	}
	mock.lockFindMessageWithSender.Lock()
	mock.calls.FindMessageWithSender = append(mock.calls.FindMessageWithSender, callInfo)
	mock.lockFindMessageWithSender.Unlock()
	return mock.FindMessageWithSenderFunc(ctx, messageID)
}

// FindMessageWithSenderCalls gets all the calls that were made to FindMessageWithSender.
// Check the length with:
//
//	len(mockedStore.FindMessageWithSenderCalls())
func (mock *StoreMock) FindMessageWithSenderCalls() []struct {
	Ctx       context.Context
	MessageID uuid.UUID
} {
	var calls []struct {
		Ctx       context.Context
		MessageID uuid.UUID
	}
	mock.lockFindMessageWithSender.RLock()
	calls = mock.calls.FindMessageWithSender
	mock.lockFindMessageWithSender.RUnlock()
	return calls
}

// FindMessageWithSenderWithSd calls FindMessageWithSenderWithSdFunc.
func (mock *StoreMock) FindMessageWithSenderWithSd(ctx context.Context, sd Sd, messageID uuid.UUID) (entity.MessageWithSender, error) {
	if mock.FindMessageWithSenderWithSdFunc == nil {
		panic("StoreMock.FindMessageWithSenderWithSdFunc: method is nil but Store.FindMessageWithSenderWithSd was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Sd        Sd
		MessageID uuid.UUID
	}{
		Ctx:       ctx,
		Sd:        sd,
		MessageID: messageID,
	}
	mock.lockFindMessageWithSenderWithSd.Lock()
	mock.calls.FindMessageWithSenderWithSd = append(mock.calls.FindMessageWithSenderWithSd, callInfo)
	mock.lockFindMessageWithSenderWithSd.Unlock()
	return mock.FindMessageWithSenderWithSdFunc(ctx, sd, messageID)
}

// FindMessageWithSenderWithSdCalls gets all the calls that were made to FindMessageWithSenderWithSd.
// Check the length with:
//
//	len(mockedStore.FindMessageWithSenderWithSdCalls())
func (mock *StoreMock) FindMessageWithSenderWithSdCalls() []struct {
	Ctx       context.Context
	Sd        Sd
	MessageID uuid.UUID
} {
	var calls []struct {
		Ctx       context.Context
		Sd        Sd
		MessageID uuid.UUID
	}
	mock.lockFindMessageWithSenderWithSd.RLock()
	calls = mock.calls.FindMessageWithSenderWithSd
	mock.lockFindMessageWithSenderWithSd.RUnlock()
	return calls
}

// FindMimeTypeByID calls FindMimeTypeByIDFunc.
func (mock *StoreMock) FindMimeTypeByID(ctx context.Context, mimeTypeID uuid.UUID) (entity.MimeType, error) {
	if mock.FindMimeTypeByIDFunc == nil {
		panic("StoreMock.FindMimeTypeByIDFunc: method is nil but Store.FindMimeTypeByID was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		MimeTypeID uuid.UUID
	}{
		Ctx:        ctx,
		MimeTypeID: mimeTypeID,
	}
	mock.lockFindMimeTypeByID.Lock()
	mock.calls.FindMimeTypeByID = append(mock.calls.FindMimeTypeByID, callInfo)
	mock.lockFindMimeTypeByID.Unlock()
	return mock.FindMimeTypeByIDFunc(ctx, mimeTypeID)
}

// FindMimeTypeByIDCalls gets all the calls that were made to FindMimeTypeByID.
// Check the length with:
//
//	len(mockedStore.FindMimeTypeByIDCalls())
func (mock *StoreMock) FindMimeTypeByIDCalls() []struct {
	Ctx        context.Context
	MimeTypeID uuid.UUID
} {
	var calls []struct {
		Ctx        context.Context
		MimeTypeID uuid.UUID
	}
	mock.lockFindMimeTypeByID.RLock()
	calls = mock.calls.FindMimeTypeByID
	mock.lockFindMimeTypeByID.RUnlock()
	return calls
}

// FindMimeTypeByIDWithSd calls FindMimeTypeByIDWithSdFunc.
func (mock *StoreMock) FindMimeTypeByIDWithSd(ctx context.Context, sd Sd, mimeTypeID uuid.UUID) (entity.MimeType, error) {
	if mock.FindMimeTypeByIDWithSdFunc == nil {
		panic("StoreMock.FindMimeTypeByIDWithSdFunc: method is nil but Store.FindMimeTypeByIDWithSd was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Sd         Sd
		MimeTypeID uuid.UUID
	}{
		Ctx:        ctx,
		Sd:         sd,
		MimeTypeID: mimeTypeID,
	}
	mock.lockFindMimeTypeByIDWithSd.Lock()
	mock.calls.FindMimeTypeByIDWithSd = append(mock.calls.FindMimeTypeByIDWithSd, callInfo)
	mock.lockFindMimeTypeByIDWithSd.Unlock()
	return mock.FindMimeTypeByIDWithSdFunc(ctx, sd, mimeTypeID)
}

// FindMimeTypeByIDWithSdCalls gets all the calls that were made to FindMimeTypeByIDWithSd.
// Check the length with:
//
//	len(mockedStore.FindMimeTypeByIDWithSdCalls())
func (mock *StoreMock) FindMimeTypeByIDWithSdCalls() []struct {
	Ctx        context.Context
	Sd         Sd
	MimeTypeID uuid.UUID
} {
	var calls []struct {
		Ctx        context.Context
		Sd         Sd
		MimeTypeID uuid.UUID
	}
	mock.lockFindMimeTypeByIDWithSd.RLock()
	calls = mock.calls.FindMimeTypeByIDWithSd
	mock.lockFindMimeTypeByIDWithSd.RUnlock()
	return calls
}

// FindMimeTypeByKey calls FindMimeTypeByKeyFunc.
func (mock *StoreMock) FindMimeTypeByKey(ctx context.Context, key string) (entity.MimeType, error) {
	if mock.FindMimeTypeByKeyFunc == nil {
		panic("StoreMock.FindMimeTypeByKeyFunc: method is nil but Store.FindMimeTypeByKey was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockFindMimeTypeByKey.Lock()
	mock.calls.FindMimeTypeByKey = append(mock.calls.FindMimeTypeByKey, callInfo)
	mock.lockFindMimeTypeByKey.Unlock()
	return mock.FindMimeTypeByKeyFunc(ctx, key)
}

// FindMimeTypeByKeyCalls gets all the calls that were made to FindMimeTypeByKey.
// Check the length with:
//
//	len(mockedStore.FindMimeTypeByKeyCalls())
func (mock *StoreMock) FindMimeTypeByKeyCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockFindMimeTypeByKey.RLock()
	calls = mock.calls.FindMimeTypeByKey
	mock.lockFindMimeTypeByKey.RUnlock()
	return calls
}

// FindMimeTypeByKeyWithSd calls FindMimeTypeByKeyWithSdFunc.
func (mock *StoreMock) FindMimeTypeByKeyWithSd(ctx context.Context, sd Sd, key string) (entity.MimeType, error) {
	if mock.FindMimeTypeByKeyWithSdFunc == nil {
		panic("StoreMock.FindMimeTypeByKeyWithSdFunc: method is nil but Store.FindMimeTypeByKeyWithSd was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}{
		Ctx: ctx,
		Sd:  sd,
		Key: key,
	}
	mock.lockFindMimeTypeByKeyWithSd.Lock()
	mock.calls.FindMimeTypeByKeyWithSd = append(mock.calls.FindMimeTypeByKeyWithSd, callInfo)
	mock.lockFindMimeTypeByKeyWithSd.Unlock()
	return mock.FindMimeTypeByKeyWithSdFunc(ctx, sd, key)
}

// FindMimeTypeByKeyWithSdCalls gets all the calls that were made to FindMimeTypeByKeyWithSd.
// Check the length with:
//
//	len(mockedStore.FindMimeTypeByKeyWithSdCalls())
func (mock *StoreMock) FindMimeTypeByKeyWithSdCalls() []struct {
	Ctx context.Context
	Sd  Sd
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}
	mock.lockFindMimeTypeByKeyWithSd.RLock()
	calls = mock.calls.FindMimeTypeByKeyWithSd
	mock.lockFindMimeTypeByKeyWithSd.RUnlock()
	return calls
}

// FindMimeTypeByKind calls FindMimeTypeByKindFunc.
func (mock *StoreMock) FindMimeTypeByKind(ctx context.Context, kind string) (entity.MimeType, error) {
	if mock.FindMimeTypeByKindFunc == nil {
		panic("StoreMock.FindMimeTypeByKindFunc: method is nil but Store.FindMimeTypeByKind was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Kind string
	}{
		Ctx:  ctx,
		Kind: kind,
	}
	mock.lockFindMimeTypeByKind.Lock()
	mock.calls.FindMimeTypeByKind = append(mock.calls.FindMimeTypeByKind, callInfo)
	mock.lockFindMimeTypeByKind.Unlock()
	return mock.FindMimeTypeByKindFunc(ctx, kind)
}

// FindMimeTypeByKindCalls gets all the calls that were made to FindMimeTypeByKind.
// Check the length with:
//
//	len(mockedStore.FindMimeTypeByKindCalls())
func (mock *StoreMock) FindMimeTypeByKindCalls() []struct {
	Ctx  context.Context
	Kind string
} {
	var calls []struct {
		Ctx  context.Context
		Kind string
	}
	mock.lockFindMimeTypeByKind.RLock()
	calls = mock.calls.FindMimeTypeByKind
	mock.lockFindMimeTypeByKind.RUnlock()
	return calls
}

// FindMimeTypeByKindWithSd calls FindMimeTypeByKindWithSdFunc.
func (mock *StoreMock) FindMimeTypeByKindWithSd(ctx context.Context, sd Sd, kind string) (entity.MimeType, error) {
	if mock.FindMimeTypeByKindWithSdFunc == nil {
		panic("StoreMock.FindMimeTypeByKindWithSdFunc: method is nil but Store.FindMimeTypeByKindWithSd was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Sd   Sd
		Kind string
	}{
		Ctx:  ctx,
		Sd:   sd,
		Kind: kind,
	}
	mock.lockFindMimeTypeByKindWithSd.Lock()
	mock.calls.FindMimeTypeByKindWithSd = append(mock.calls.FindMimeTypeByKindWithSd, callInfo)
	mock.lockFindMimeTypeByKindWithSd.Unlock()
	return mock.FindMimeTypeByKindWithSdFunc(ctx, sd, kind)
}

// FindMimeTypeByKindWithSdCalls gets all the calls that were made to FindMimeTypeByKindWithSd.
// Check the length with:
//
//	len(mockedStore.FindMimeTypeByKindWithSdCalls())
func (mock *StoreMock) FindMimeTypeByKindWithSdCalls() []struct {
	Ctx  context.Context
	Sd   Sd
	Kind string
} {
	var calls []struct {
		Ctx  context.Context
		Sd   Sd
		Kind string
	}
	mock.lockFindMimeTypeByKindWithSd.RLock()
	calls = mock.calls.FindMimeTypeByKindWithSd
	mock.lockFindMimeTypeByKindWithSd.RUnlock()
	return calls
}

// FindOrganizationByID calls FindOrganizationByIDFunc.
func (mock *StoreMock) FindOrganizationByID(ctx context.Context, organizationID uuid.UUID) (entity.Organization, error) {
	if mock.FindOrganizationByIDFunc == nil {
		panic("StoreMock.FindOrganizationByIDFunc: method is nil but Store.FindOrganizationByID was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		OrganizationID uuid.UUID
	}{
		Ctx:            ctx,
		OrganizationID: organizationID,
	}
	mock.lockFindOrganizationByID.Lock()
	mock.calls.FindOrganizationByID = append(mock.calls.FindOrganizationByID, callInfo)
	mock.lockFindOrganizationByID.Unlock()
	return mock.FindOrganizationByIDFunc(ctx, organizationID)
}

// FindOrganizationByIDCalls gets all the calls that were made to FindOrganizationByID.
// Check the length with:
//
//	len(mockedStore.FindOrganizationByIDCalls())
func (mock *StoreMock) FindOrganizationByIDCalls() []struct {
	Ctx            context.Context
	OrganizationID uuid.UUID
} {
	var calls []struct {
		Ctx            context.Context
		OrganizationID uuid.UUID
	}
	mock.lockFindOrganizationByID.RLock()
	calls = mock.calls.FindOrganizationByID
	mock.lockFindOrganizationByID.RUnlock()
	return calls
}

// FindOrganizationByIDWithSd calls FindOrganizationByIDWithSdFunc.
func (mock *StoreMock) FindOrganizationByIDWithSd(ctx context.Context, sd Sd, organizationID uuid.UUID) (entity.Organization, error) {
	if mock.FindOrganizationByIDWithSdFunc == nil {
		panic("StoreMock.FindOrganizationByIDWithSdFunc: method is nil but Store.FindOrganizationByIDWithSd was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		Sd             Sd
		OrganizationID uuid.UUID
	}{
		Ctx:            ctx,
		Sd:             sd,
		OrganizationID: organizationID,
	}
	mock.lockFindOrganizationByIDWithSd.Lock()
	mock.calls.FindOrganizationByIDWithSd = append(mock.calls.FindOrganizationByIDWithSd, callInfo)
	mock.lockFindOrganizationByIDWithSd.Unlock()
	return mock.FindOrganizationByIDWithSdFunc(ctx, sd, organizationID)
}

// FindOrganizationByIDWithSdCalls gets all the calls that were made to FindOrganizationByIDWithSd.
// Check the length with:
//
//	len(mockedStore.FindOrganizationByIDWithSdCalls())
func (mock *StoreMock) FindOrganizationByIDWithSdCalls() []struct {
	Ctx            context.Context
	Sd             Sd
	OrganizationID uuid.UUID
} {
	var calls []struct {
		Ctx            context.Context
		Sd             Sd
		OrganizationID uuid.UUID
	}
	mock.lockFindOrganizationByIDWithSd.RLock()
	calls = mock.calls.FindOrganizationByIDWithSd
	mock.lockFindOrganizationByIDWithSd.RUnlock()
	return calls
}

// FindOrganizationWithChatRoom calls FindOrganizationWithChatRoomFunc.
func (mock *StoreMock) FindOrganizationWithChatRoom(ctx context.Context, organizationID uuid.UUID) (entity.OrganizationWithChatRoom, error) {
	if mock.FindOrganizationWithChatRoomFunc == nil {
		panic("StoreMock.FindOrganizationWithChatRoomFunc: method is nil but Store.FindOrganizationWithChatRoom was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		OrganizationID uuid.UUID
	}{
		Ctx:            ctx,
		OrganizationID: organizationID,
	}
	mock.lockFindOrganizationWithChatRoom.Lock()
	mock.calls.FindOrganizationWithChatRoom = append(mock.calls.FindOrganizationWithChatRoom, callInfo)
	mock.lockFindOrganizationWithChatRoom.Unlock()
	return mock.FindOrganizationWithChatRoomFunc(ctx, organizationID)
}

// FindOrganizationWithChatRoomCalls gets all the calls that were made to FindOrganizationWithChatRoom.
// Check the length with:
//
//	len(mockedStore.FindOrganizationWithChatRoomCalls())
func (mock *StoreMock) FindOrganizationWithChatRoomCalls() []struct {
	Ctx            context.Context
	OrganizationID uuid.UUID
} {
	var calls []struct {
		Ctx            context.Context
		OrganizationID uuid.UUID
	}
	mock.lockFindOrganizationWithChatRoom.RLock()
	calls = mock.calls.FindOrganizationWithChatRoom
	mock.lockFindOrganizationWithChatRoom.RUnlock()
	return calls
}

// FindOrganizationWithChatRoomAndDetail calls FindOrganizationWithChatRoomAndDetailFunc.
func (mock *StoreMock) FindOrganizationWithChatRoomAndDetail(ctx context.Context, organizationID uuid.UUID) (entity.OrganizationWithChatRoomAndDetail, error) {
	if mock.FindOrganizationWithChatRoomAndDetailFunc == nil {
		panic("StoreMock.FindOrganizationWithChatRoomAndDetailFunc: method is nil but Store.FindOrganizationWithChatRoomAndDetail was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		OrganizationID uuid.UUID
	}{
		Ctx:            ctx,
		OrganizationID: organizationID,
	}
	mock.lockFindOrganizationWithChatRoomAndDetail.Lock()
	mock.calls.FindOrganizationWithChatRoomAndDetail = append(mock.calls.FindOrganizationWithChatRoomAndDetail, callInfo)
	mock.lockFindOrganizationWithChatRoomAndDetail.Unlock()
	return mock.FindOrganizationWithChatRoomAndDetailFunc(ctx, organizationID)
}

// FindOrganizationWithChatRoomAndDetailCalls gets all the calls that were made to FindOrganizationWithChatRoomAndDetail.
// Check the length with:
//
//	len(mockedStore.FindOrganizationWithChatRoomAndDetailCalls())
func (mock *StoreMock) FindOrganizationWithChatRoomAndDetailCalls() []struct {
	Ctx            context.Context
	OrganizationID uuid.UUID
} {
	var calls []struct {
		Ctx            context.Context
		OrganizationID uuid.UUID
	}
	mock.lockFindOrganizationWithChatRoomAndDetail.RLock()
	calls = mock.calls.FindOrganizationWithChatRoomAndDetail
	mock.lockFindOrganizationWithChatRoomAndDetail.RUnlock()
	return calls
}

// FindOrganizationWithChatRoomAndDetailWithSd calls FindOrganizationWithChatRoomAndDetailWithSdFunc.
func (mock *StoreMock) FindOrganizationWithChatRoomAndDetailWithSd(ctx context.Context, sd Sd, organizationID uuid.UUID) (entity.OrganizationWithChatRoomAndDetail, error) {
	if mock.FindOrganizationWithChatRoomAndDetailWithSdFunc == nil {
		panic("StoreMock.FindOrganizationWithChatRoomAndDetailWithSdFunc: method is nil but Store.FindOrganizationWithChatRoomAndDetailWithSd was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		Sd             Sd
		OrganizationID uuid.UUID
	}{
		Ctx:            ctx,
		Sd:             sd,
		OrganizationID: organizationID,
	}
	mock.lockFindOrganizationWithChatRoomAndDetailWithSd.Lock()
	mock.calls.FindOrganizationWithChatRoomAndDetailWithSd = append(mock.calls.FindOrganizationWithChatRoomAndDetailWithSd, callInfo)
	mock.lockFindOrganizationWithChatRoomAndDetailWithSd.Unlock()
	return mock.FindOrganizationWithChatRoomAndDetailWithSdFunc(ctx, sd, organizationID)
}

// FindOrganizationWithChatRoomAndDetailWithSdCalls gets all the calls that were made to FindOrganizationWithChatRoomAndDetailWithSd.
// Check the length with:
//
//	len(mockedStore.FindOrganizationWithChatRoomAndDetailWithSdCalls())
func (mock *StoreMock) FindOrganizationWithChatRoomAndDetailWithSdCalls() []struct {
	Ctx            context.Context
	Sd             Sd
	OrganizationID uuid.UUID
} {
	var calls []struct {
		Ctx            context.Context
		Sd             Sd
		OrganizationID uuid.UUID
	}
	mock.lockFindOrganizationWithChatRoomAndDetailWithSd.RLock()
	calls = mock.calls.FindOrganizationWithChatRoomAndDetailWithSd
	mock.lockFindOrganizationWithChatRoomAndDetailWithSd.RUnlock()
	return calls
}

// FindOrganizationWithChatRoomWithSd calls FindOrganizationWithChatRoomWithSdFunc.
func (mock *StoreMock) FindOrganizationWithChatRoomWithSd(ctx context.Context, sd Sd, organizationID uuid.UUID) (entity.OrganizationWithChatRoom, error) {
	if mock.FindOrganizationWithChatRoomWithSdFunc == nil {
		panic("StoreMock.FindOrganizationWithChatRoomWithSdFunc: method is nil but Store.FindOrganizationWithChatRoomWithSd was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		Sd             Sd
		OrganizationID uuid.UUID
	}{
		Ctx:            ctx,
		Sd:             sd,
		OrganizationID: organizationID,
	}
	mock.lockFindOrganizationWithChatRoomWithSd.Lock()
	mock.calls.FindOrganizationWithChatRoomWithSd = append(mock.calls.FindOrganizationWithChatRoomWithSd, callInfo)
	mock.lockFindOrganizationWithChatRoomWithSd.Unlock()
	return mock.FindOrganizationWithChatRoomWithSdFunc(ctx, sd, organizationID)
}

// FindOrganizationWithChatRoomWithSdCalls gets all the calls that were made to FindOrganizationWithChatRoomWithSd.
// Check the length with:
//
//	len(mockedStore.FindOrganizationWithChatRoomWithSdCalls())
func (mock *StoreMock) FindOrganizationWithChatRoomWithSdCalls() []struct {
	Ctx            context.Context
	Sd             Sd
	OrganizationID uuid.UUID
} {
	var calls []struct {
		Ctx            context.Context
		Sd             Sd
		OrganizationID uuid.UUID
	}
	mock.lockFindOrganizationWithChatRoomWithSd.RLock()
	calls = mock.calls.FindOrganizationWithChatRoomWithSd
	mock.lockFindOrganizationWithChatRoomWithSd.RUnlock()
	return calls
}

// FindOrganizationWithDetail calls FindOrganizationWithDetailFunc.
func (mock *StoreMock) FindOrganizationWithDetail(ctx context.Context, organizationID uuid.UUID) (entity.OrganizationWithDetail, error) {
	if mock.FindOrganizationWithDetailFunc == nil {
		panic("StoreMock.FindOrganizationWithDetailFunc: method is nil but Store.FindOrganizationWithDetail was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		OrganizationID uuid.UUID
	}{
		Ctx:            ctx,
		OrganizationID: organizationID,
	}
	mock.lockFindOrganizationWithDetail.Lock()
	mock.calls.FindOrganizationWithDetail = append(mock.calls.FindOrganizationWithDetail, callInfo)
	mock.lockFindOrganizationWithDetail.Unlock()
	return mock.FindOrganizationWithDetailFunc(ctx, organizationID)
}

// FindOrganizationWithDetailCalls gets all the calls that were made to FindOrganizationWithDetail.
// Check the length with:
//
//	len(mockedStore.FindOrganizationWithDetailCalls())
func (mock *StoreMock) FindOrganizationWithDetailCalls() []struct {
	Ctx            context.Context
	OrganizationID uuid.UUID
} {
	var calls []struct {
		Ctx            context.Context
		OrganizationID uuid.UUID
	}
	mock.lockFindOrganizationWithDetail.RLock()
	calls = mock.calls.FindOrganizationWithDetail
	mock.lockFindOrganizationWithDetail.RUnlock()
	return calls
}

// FindOrganizationWithDetailWithSd calls FindOrganizationWithDetailWithSdFunc.
func (mock *StoreMock) FindOrganizationWithDetailWithSd(ctx context.Context, sd Sd, organizationID uuid.UUID) (entity.OrganizationWithDetail, error) {
	if mock.FindOrganizationWithDetailWithSdFunc == nil {
		panic("StoreMock.FindOrganizationWithDetailWithSdFunc: method is nil but Store.FindOrganizationWithDetailWithSd was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		Sd             Sd
		OrganizationID uuid.UUID
	}{
		Ctx:            ctx,
		Sd:             sd,
		OrganizationID: organizationID,
	}
	mock.lockFindOrganizationWithDetailWithSd.Lock()
	mock.calls.FindOrganizationWithDetailWithSd = append(mock.calls.FindOrganizationWithDetailWithSd, callInfo)
	mock.lockFindOrganizationWithDetailWithSd.Unlock()
	return mock.FindOrganizationWithDetailWithSdFunc(ctx, sd, organizationID)
}

// FindOrganizationWithDetailWithSdCalls gets all the calls that were made to FindOrganizationWithDetailWithSd.
// Check the length with:
//
//	len(mockedStore.FindOrganizationWithDetailWithSdCalls())
func (mock *StoreMock) FindOrganizationWithDetailWithSdCalls() []struct {
	Ctx            context.Context
	Sd             Sd
	OrganizationID uuid.UUID
} {
	var calls []struct {
		Ctx            context.Context
		Sd             Sd
		OrganizationID uuid.UUID
	}
	mock.lockFindOrganizationWithDetailWithSd.RLock()
	calls = mock.calls.FindOrganizationWithDetailWithSd
	mock.lockFindOrganizationWithDetailWithSd.RUnlock()
	return calls
}

// FindPermissionByID calls FindPermissionByIDFunc.
func (mock *StoreMock) FindPermissionByID(ctx context.Context, permissionID uuid.UUID) (entity.Permission, error) {
	if mock.FindPermissionByIDFunc == nil {
		panic("StoreMock.FindPermissionByIDFunc: method is nil but Store.FindPermissionByID was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		PermissionID uuid.UUID
	}{
		Ctx:          ctx,
		PermissionID: permissionID,
	}
	mock.lockFindPermissionByID.Lock()
	mock.calls.FindPermissionByID = append(mock.calls.FindPermissionByID, callInfo)
	mock.lockFindPermissionByID.Unlock()
	return mock.FindPermissionByIDFunc(ctx, permissionID)
}

// FindPermissionByIDCalls gets all the calls that were made to FindPermissionByID.
// Check the length with:
//
//	len(mockedStore.FindPermissionByIDCalls())
func (mock *StoreMock) FindPermissionByIDCalls() []struct {
	Ctx          context.Context
	PermissionID uuid.UUID
} {
	var calls []struct {
		Ctx          context.Context
		PermissionID uuid.UUID
	}
	mock.lockFindPermissionByID.RLock()
	calls = mock.calls.FindPermissionByID
	mock.lockFindPermissionByID.RUnlock()
	return calls
}

// FindPermissionByIDWithCategory calls FindPermissionByIDWithCategoryFunc.
func (mock *StoreMock) FindPermissionByIDWithCategory(ctx context.Context, permissionID uuid.UUID) (entity.PermissionWithCategory, error) {
	if mock.FindPermissionByIDWithCategoryFunc == nil {
		panic("StoreMock.FindPermissionByIDWithCategoryFunc: method is nil but Store.FindPermissionByIDWithCategory was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		PermissionID uuid.UUID
	}{
		Ctx:          ctx,
		PermissionID: permissionID,
	}
	mock.lockFindPermissionByIDWithCategory.Lock()
	mock.calls.FindPermissionByIDWithCategory = append(mock.calls.FindPermissionByIDWithCategory, callInfo)
	mock.lockFindPermissionByIDWithCategory.Unlock()
	return mock.FindPermissionByIDWithCategoryFunc(ctx, permissionID)
}

// FindPermissionByIDWithCategoryCalls gets all the calls that were made to FindPermissionByIDWithCategory.
// Check the length with:
//
//	len(mockedStore.FindPermissionByIDWithCategoryCalls())
func (mock *StoreMock) FindPermissionByIDWithCategoryCalls() []struct {
	Ctx          context.Context
	PermissionID uuid.UUID
} {
	var calls []struct {
		Ctx          context.Context
		PermissionID uuid.UUID
	}
	mock.lockFindPermissionByIDWithCategory.RLock()
	calls = mock.calls.FindPermissionByIDWithCategory
	mock.lockFindPermissionByIDWithCategory.RUnlock()
	return calls
}

// FindPermissionByIDWithCategoryWithSd calls FindPermissionByIDWithCategoryWithSdFunc.
func (mock *StoreMock) FindPermissionByIDWithCategoryWithSd(ctx context.Context, sd Sd, permissionID uuid.UUID) (entity.PermissionWithCategory, error) {
	if mock.FindPermissionByIDWithCategoryWithSdFunc == nil {
		panic("StoreMock.FindPermissionByIDWithCategoryWithSdFunc: method is nil but Store.FindPermissionByIDWithCategoryWithSd was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		Sd           Sd
		PermissionID uuid.UUID
	}{
		Ctx:          ctx,
		Sd:           sd,
		PermissionID: permissionID,
	}
	mock.lockFindPermissionByIDWithCategoryWithSd.Lock()
	mock.calls.FindPermissionByIDWithCategoryWithSd = append(mock.calls.FindPermissionByIDWithCategoryWithSd, callInfo)
	mock.lockFindPermissionByIDWithCategoryWithSd.Unlock()
	return mock.FindPermissionByIDWithCategoryWithSdFunc(ctx, sd, permissionID)
}

// FindPermissionByIDWithCategoryWithSdCalls gets all the calls that were made to FindPermissionByIDWithCategoryWithSd.
// Check the length with:
//
//	len(mockedStore.FindPermissionByIDWithCategoryWithSdCalls())
func (mock *StoreMock) FindPermissionByIDWithCategoryWithSdCalls() []struct {
	Ctx          context.Context
	Sd           Sd
	PermissionID uuid.UUID
} {
	var calls []struct {
		Ctx          context.Context
		Sd           Sd
		PermissionID uuid.UUID
	}
	mock.lockFindPermissionByIDWithCategoryWithSd.RLock()
	calls = mock.calls.FindPermissionByIDWithCategoryWithSd
	mock.lockFindPermissionByIDWithCategoryWithSd.RUnlock()
	return calls
}

// FindPermissionByIDWithSd calls FindPermissionByIDWithSdFunc.
func (mock *StoreMock) FindPermissionByIDWithSd(ctx context.Context, sd Sd, permissionID uuid.UUID) (entity.Permission, error) {
	if mock.FindPermissionByIDWithSdFunc == nil {
		panic("StoreMock.FindPermissionByIDWithSdFunc: method is nil but Store.FindPermissionByIDWithSd was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		Sd           Sd
		PermissionID uuid.UUID
	}{
		Ctx:          ctx,
		Sd:           sd,
		PermissionID: permissionID,
	}
	mock.lockFindPermissionByIDWithSd.Lock()
	mock.calls.FindPermissionByIDWithSd = append(mock.calls.FindPermissionByIDWithSd, callInfo)
	mock.lockFindPermissionByIDWithSd.Unlock()
	return mock.FindPermissionByIDWithSdFunc(ctx, sd, permissionID)
}

// FindPermissionByIDWithSdCalls gets all the calls that were made to FindPermissionByIDWithSd.
// Check the length with:
//
//	len(mockedStore.FindPermissionByIDWithSdCalls())
func (mock *StoreMock) FindPermissionByIDWithSdCalls() []struct {
	Ctx          context.Context
	Sd           Sd
	PermissionID uuid.UUID
} {
	var calls []struct {
		Ctx          context.Context
		Sd           Sd
		PermissionID uuid.UUID
	}
	mock.lockFindPermissionByIDWithSd.RLock()
	calls = mock.calls.FindPermissionByIDWithSd
	mock.lockFindPermissionByIDWithSd.RUnlock()
	return calls
}

// FindPermissionByKey calls FindPermissionByKeyFunc.
func (mock *StoreMock) FindPermissionByKey(ctx context.Context, key string) (entity.Permission, error) {
	if mock.FindPermissionByKeyFunc == nil {
		panic("StoreMock.FindPermissionByKeyFunc: method is nil but Store.FindPermissionByKey was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockFindPermissionByKey.Lock()
	mock.calls.FindPermissionByKey = append(mock.calls.FindPermissionByKey, callInfo)
	mock.lockFindPermissionByKey.Unlock()
	return mock.FindPermissionByKeyFunc(ctx, key)
}

// FindPermissionByKeyCalls gets all the calls that were made to FindPermissionByKey.
// Check the length with:
//
//	len(mockedStore.FindPermissionByKeyCalls())
func (mock *StoreMock) FindPermissionByKeyCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockFindPermissionByKey.RLock()
	calls = mock.calls.FindPermissionByKey
	mock.lockFindPermissionByKey.RUnlock()
	return calls
}

// FindPermissionByKeyWithCategory calls FindPermissionByKeyWithCategoryFunc.
func (mock *StoreMock) FindPermissionByKeyWithCategory(ctx context.Context, key string) (entity.PermissionWithCategory, error) {
	if mock.FindPermissionByKeyWithCategoryFunc == nil {
		panic("StoreMock.FindPermissionByKeyWithCategoryFunc: method is nil but Store.FindPermissionByKeyWithCategory was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockFindPermissionByKeyWithCategory.Lock()
	mock.calls.FindPermissionByKeyWithCategory = append(mock.calls.FindPermissionByKeyWithCategory, callInfo)
	mock.lockFindPermissionByKeyWithCategory.Unlock()
	return mock.FindPermissionByKeyWithCategoryFunc(ctx, key)
}

// FindPermissionByKeyWithCategoryCalls gets all the calls that were made to FindPermissionByKeyWithCategory.
// Check the length with:
//
//	len(mockedStore.FindPermissionByKeyWithCategoryCalls())
func (mock *StoreMock) FindPermissionByKeyWithCategoryCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockFindPermissionByKeyWithCategory.RLock()
	calls = mock.calls.FindPermissionByKeyWithCategory
	mock.lockFindPermissionByKeyWithCategory.RUnlock()
	return calls
}

// FindPermissionByKeyWithCategoryWithSd calls FindPermissionByKeyWithCategoryWithSdFunc.
func (mock *StoreMock) FindPermissionByKeyWithCategoryWithSd(ctx context.Context, sd Sd, key string) (entity.PermissionWithCategory, error) {
	if mock.FindPermissionByKeyWithCategoryWithSdFunc == nil {
		panic("StoreMock.FindPermissionByKeyWithCategoryWithSdFunc: method is nil but Store.FindPermissionByKeyWithCategoryWithSd was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}{
		Ctx: ctx,
		Sd:  sd,
		Key: key,
	}
	mock.lockFindPermissionByKeyWithCategoryWithSd.Lock()
	mock.calls.FindPermissionByKeyWithCategoryWithSd = append(mock.calls.FindPermissionByKeyWithCategoryWithSd, callInfo)
	mock.lockFindPermissionByKeyWithCategoryWithSd.Unlock()
	return mock.FindPermissionByKeyWithCategoryWithSdFunc(ctx, sd, key)
}

// FindPermissionByKeyWithCategoryWithSdCalls gets all the calls that were made to FindPermissionByKeyWithCategoryWithSd.
// Check the length with:
//
//	len(mockedStore.FindPermissionByKeyWithCategoryWithSdCalls())
func (mock *StoreMock) FindPermissionByKeyWithCategoryWithSdCalls() []struct {
	Ctx context.Context
	Sd  Sd
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}
	mock.lockFindPermissionByKeyWithCategoryWithSd.RLock()
	calls = mock.calls.FindPermissionByKeyWithCategoryWithSd
	mock.lockFindPermissionByKeyWithCategoryWithSd.RUnlock()
	return calls
}

// FindPermissionByKeyWithSd calls FindPermissionByKeyWithSdFunc.
func (mock *StoreMock) FindPermissionByKeyWithSd(ctx context.Context, sd Sd, key string) (entity.Permission, error) {
	if mock.FindPermissionByKeyWithSdFunc == nil {
		panic("StoreMock.FindPermissionByKeyWithSdFunc: method is nil but Store.FindPermissionByKeyWithSd was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}{
		Ctx: ctx,
		Sd:  sd,
		Key: key,
	}
	mock.lockFindPermissionByKeyWithSd.Lock()
	mock.calls.FindPermissionByKeyWithSd = append(mock.calls.FindPermissionByKeyWithSd, callInfo)
	mock.lockFindPermissionByKeyWithSd.Unlock()
	return mock.FindPermissionByKeyWithSdFunc(ctx, sd, key)
}

// FindPermissionByKeyWithSdCalls gets all the calls that were made to FindPermissionByKeyWithSd.
// Check the length with:
//
//	len(mockedStore.FindPermissionByKeyWithSdCalls())
func (mock *StoreMock) FindPermissionByKeyWithSdCalls() []struct {
	Ctx context.Context
	Sd  Sd
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}
	mock.lockFindPermissionByKeyWithSd.RLock()
	calls = mock.calls.FindPermissionByKeyWithSd
	mock.lockFindPermissionByKeyWithSd.RUnlock()
	return calls
}

// FindPermissionCategoryByID calls FindPermissionCategoryByIDFunc.
func (mock *StoreMock) FindPermissionCategoryByID(ctx context.Context, permissionCategoryID uuid.UUID) (entity.PermissionCategory, error) {
	if mock.FindPermissionCategoryByIDFunc == nil {
		panic("StoreMock.FindPermissionCategoryByIDFunc: method is nil but Store.FindPermissionCategoryByID was just called")
	}
	callInfo := struct {
		Ctx                  context.Context
		PermissionCategoryID uuid.UUID
	}{
		Ctx:                  ctx,
		PermissionCategoryID: permissionCategoryID,
	}
	mock.lockFindPermissionCategoryByID.Lock()
	mock.calls.FindPermissionCategoryByID = append(mock.calls.FindPermissionCategoryByID, callInfo)
	mock.lockFindPermissionCategoryByID.Unlock()
	return mock.FindPermissionCategoryByIDFunc(ctx, permissionCategoryID)
}

// FindPermissionCategoryByIDCalls gets all the calls that were made to FindPermissionCategoryByID.
// Check the length with:
//
//	len(mockedStore.FindPermissionCategoryByIDCalls())
func (mock *StoreMock) FindPermissionCategoryByIDCalls() []struct {
	Ctx                  context.Context
	PermissionCategoryID uuid.UUID
} {
	var calls []struct {
		Ctx                  context.Context
		PermissionCategoryID uuid.UUID
	}
	mock.lockFindPermissionCategoryByID.RLock()
	calls = mock.calls.FindPermissionCategoryByID
	mock.lockFindPermissionCategoryByID.RUnlock()
	return calls
}

// FindPermissionCategoryByIDWithSd calls FindPermissionCategoryByIDWithSdFunc.
func (mock *StoreMock) FindPermissionCategoryByIDWithSd(ctx context.Context, sd Sd, permissionCategoryID uuid.UUID) (entity.PermissionCategory, error) {
	if mock.FindPermissionCategoryByIDWithSdFunc == nil {
		panic("StoreMock.FindPermissionCategoryByIDWithSdFunc: method is nil but Store.FindPermissionCategoryByIDWithSd was just called")
	}
	callInfo := struct {
		Ctx                  context.Context
		Sd                   Sd
		PermissionCategoryID uuid.UUID
	}{
		Ctx:                  ctx,
		Sd:                   sd,
		PermissionCategoryID: permissionCategoryID,
	}
	mock.lockFindPermissionCategoryByIDWithSd.Lock()
	mock.calls.FindPermissionCategoryByIDWithSd = append(mock.calls.FindPermissionCategoryByIDWithSd, callInfo)
	mock.lockFindPermissionCategoryByIDWithSd.Unlock()
	return mock.FindPermissionCategoryByIDWithSdFunc(ctx, sd, permissionCategoryID)
}

// FindPermissionCategoryByIDWithSdCalls gets all the calls that were made to FindPermissionCategoryByIDWithSd.
// Check the length with:
//
//	len(mockedStore.FindPermissionCategoryByIDWithSdCalls())
func (mock *StoreMock) FindPermissionCategoryByIDWithSdCalls() []struct {
	Ctx                  context.Context
	Sd                   Sd
	PermissionCategoryID uuid.UUID
} {
	var calls []struct {
		Ctx                  context.Context
		Sd                   Sd
		PermissionCategoryID uuid.UUID
	}
	mock.lockFindPermissionCategoryByIDWithSd.RLock()
	calls = mock.calls.FindPermissionCategoryByIDWithSd
	mock.lockFindPermissionCategoryByIDWithSd.RUnlock()
	return calls
}

// FindPermissionCategoryByKey calls FindPermissionCategoryByKeyFunc.
func (mock *StoreMock) FindPermissionCategoryByKey(ctx context.Context, key string) (entity.PermissionCategory, error) {
	if mock.FindPermissionCategoryByKeyFunc == nil {
		panic("StoreMock.FindPermissionCategoryByKeyFunc: method is nil but Store.FindPermissionCategoryByKey was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockFindPermissionCategoryByKey.Lock()
	mock.calls.FindPermissionCategoryByKey = append(mock.calls.FindPermissionCategoryByKey, callInfo)
	mock.lockFindPermissionCategoryByKey.Unlock()
	return mock.FindPermissionCategoryByKeyFunc(ctx, key)
}

// FindPermissionCategoryByKeyCalls gets all the calls that were made to FindPermissionCategoryByKey.
// Check the length with:
//
//	len(mockedStore.FindPermissionCategoryByKeyCalls())
func (mock *StoreMock) FindPermissionCategoryByKeyCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockFindPermissionCategoryByKey.RLock()
	calls = mock.calls.FindPermissionCategoryByKey
	mock.lockFindPermissionCategoryByKey.RUnlock()
	return calls
}

// FindPermissionCategoryByKeyWithSd calls FindPermissionCategoryByKeyWithSdFunc.
func (mock *StoreMock) FindPermissionCategoryByKeyWithSd(ctx context.Context, sd Sd, key string) (entity.PermissionCategory, error) {
	if mock.FindPermissionCategoryByKeyWithSdFunc == nil {
		panic("StoreMock.FindPermissionCategoryByKeyWithSdFunc: method is nil but Store.FindPermissionCategoryByKeyWithSd was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}{
		Ctx: ctx,
		Sd:  sd,
		Key: key,
	}
	mock.lockFindPermissionCategoryByKeyWithSd.Lock()
	mock.calls.FindPermissionCategoryByKeyWithSd = append(mock.calls.FindPermissionCategoryByKeyWithSd, callInfo)
	mock.lockFindPermissionCategoryByKeyWithSd.Unlock()
	return mock.FindPermissionCategoryByKeyWithSdFunc(ctx, sd, key)
}

// FindPermissionCategoryByKeyWithSdCalls gets all the calls that were made to FindPermissionCategoryByKeyWithSd.
// Check the length with:
//
//	len(mockedStore.FindPermissionCategoryByKeyWithSdCalls())
func (mock *StoreMock) FindPermissionCategoryByKeyWithSdCalls() []struct {
	Ctx context.Context
	Sd  Sd
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}
	mock.lockFindPermissionCategoryByKeyWithSd.RLock()
	calls = mock.calls.FindPermissionCategoryByKeyWithSd
	mock.lockFindPermissionCategoryByKeyWithSd.RUnlock()
	return calls
}

// FindPersonalOrganization calls FindPersonalOrganizationFunc.
func (mock *StoreMock) FindPersonalOrganization(ctx context.Context, memberID uuid.UUID) (entity.Organization, error) {
	if mock.FindPersonalOrganizationFunc == nil {
		panic("StoreMock.FindPersonalOrganizationFunc: method is nil but Store.FindPersonalOrganization was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		MemberID uuid.UUID
	}{
		Ctx:      ctx,
		MemberID: memberID,
	}
	mock.lockFindPersonalOrganization.Lock()
	mock.calls.FindPersonalOrganization = append(mock.calls.FindPersonalOrganization, callInfo)
	mock.lockFindPersonalOrganization.Unlock()
	return mock.FindPersonalOrganizationFunc(ctx, memberID)
}

// FindPersonalOrganizationCalls gets all the calls that were made to FindPersonalOrganization.
// Check the length with:
//
//	len(mockedStore.FindPersonalOrganizationCalls())
func (mock *StoreMock) FindPersonalOrganizationCalls() []struct {
	Ctx      context.Context
	MemberID uuid.UUID
} {
	var calls []struct {
		Ctx      context.Context
		MemberID uuid.UUID
	}
	mock.lockFindPersonalOrganization.RLock()
	calls = mock.calls.FindPersonalOrganization
	mock.lockFindPersonalOrganization.RUnlock()
	return calls
}

// FindPersonalOrganizationWithSd calls FindPersonalOrganizationWithSdFunc.
func (mock *StoreMock) FindPersonalOrganizationWithSd(ctx context.Context, sd Sd, memberID uuid.UUID) (entity.Organization, error) {
	if mock.FindPersonalOrganizationWithSdFunc == nil {
		panic("StoreMock.FindPersonalOrganizationWithSdFunc: method is nil but Store.FindPersonalOrganizationWithSd was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Sd       Sd
		MemberID uuid.UUID
	}{
		Ctx:      ctx,
		Sd:       sd,
		MemberID: memberID,
	}
	mock.lockFindPersonalOrganizationWithSd.Lock()
	mock.calls.FindPersonalOrganizationWithSd = append(mock.calls.FindPersonalOrganizationWithSd, callInfo)
	mock.lockFindPersonalOrganizationWithSd.Unlock()
	return mock.FindPersonalOrganizationWithSdFunc(ctx, sd, memberID)
}

// FindPersonalOrganizationWithSdCalls gets all the calls that were made to FindPersonalOrganizationWithSd.
// Check the length with:
//
//	len(mockedStore.FindPersonalOrganizationWithSdCalls())
func (mock *StoreMock) FindPersonalOrganizationWithSdCalls() []struct {
	Ctx      context.Context
	Sd       Sd
	MemberID uuid.UUID
} {
	var calls []struct {
		Ctx      context.Context
		Sd       Sd
		MemberID uuid.UUID
	}
	mock.lockFindPersonalOrganizationWithSd.RLock()
	calls = mock.calls.FindPersonalOrganizationWithSd
	mock.lockFindPersonalOrganizationWithSd.RUnlock()
	return calls
}

// FindPolicyByID calls FindPolicyByIDFunc.
func (mock *StoreMock) FindPolicyByID(ctx context.Context, policyID uuid.UUID) (entity.Policy, error) {
	if mock.FindPolicyByIDFunc == nil {
		panic("StoreMock.FindPolicyByIDFunc: method is nil but Store.FindPolicyByID was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		PolicyID uuid.UUID
	}{
		Ctx:      ctx,
		PolicyID: policyID,
	}
	mock.lockFindPolicyByID.Lock()
	mock.calls.FindPolicyByID = append(mock.calls.FindPolicyByID, callInfo)
	mock.lockFindPolicyByID.Unlock()
	return mock.FindPolicyByIDFunc(ctx, policyID)
}

// FindPolicyByIDCalls gets all the calls that were made to FindPolicyByID.
// Check the length with:
//
//	len(mockedStore.FindPolicyByIDCalls())
func (mock *StoreMock) FindPolicyByIDCalls() []struct {
	Ctx      context.Context
	PolicyID uuid.UUID
} {
	var calls []struct {
		Ctx      context.Context
		PolicyID uuid.UUID
	}
	mock.lockFindPolicyByID.RLock()
	calls = mock.calls.FindPolicyByID
	mock.lockFindPolicyByID.RUnlock()
	return calls
}

// FindPolicyByIDWithCategory calls FindPolicyByIDWithCategoryFunc.
func (mock *StoreMock) FindPolicyByIDWithCategory(ctx context.Context, policyID uuid.UUID) (entity.PolicyWithCategory, error) {
	if mock.FindPolicyByIDWithCategoryFunc == nil {
		panic("StoreMock.FindPolicyByIDWithCategoryFunc: method is nil but Store.FindPolicyByIDWithCategory was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		PolicyID uuid.UUID
	}{
		Ctx:      ctx,
		PolicyID: policyID,
	}
	mock.lockFindPolicyByIDWithCategory.Lock()
	mock.calls.FindPolicyByIDWithCategory = append(mock.calls.FindPolicyByIDWithCategory, callInfo)
	mock.lockFindPolicyByIDWithCategory.Unlock()
	return mock.FindPolicyByIDWithCategoryFunc(ctx, policyID)
}

// FindPolicyByIDWithCategoryCalls gets all the calls that were made to FindPolicyByIDWithCategory.
// Check the length with:
//
//	len(mockedStore.FindPolicyByIDWithCategoryCalls())
func (mock *StoreMock) FindPolicyByIDWithCategoryCalls() []struct {
	Ctx      context.Context
	PolicyID uuid.UUID
} {
	var calls []struct {
		Ctx      context.Context
		PolicyID uuid.UUID
	}
	mock.lockFindPolicyByIDWithCategory.RLock()
	calls = mock.calls.FindPolicyByIDWithCategory
	mock.lockFindPolicyByIDWithCategory.RUnlock()
	return calls
}

// FindPolicyByIDWithCategoryWithSd calls FindPolicyByIDWithCategoryWithSdFunc.
func (mock *StoreMock) FindPolicyByIDWithCategoryWithSd(ctx context.Context, sd Sd, policyID uuid.UUID) (entity.PolicyWithCategory, error) {
	if mock.FindPolicyByIDWithCategoryWithSdFunc == nil {
		panic("StoreMock.FindPolicyByIDWithCategoryWithSdFunc: method is nil but Store.FindPolicyByIDWithCategoryWithSd was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Sd       Sd
		PolicyID uuid.UUID
	}{
		Ctx:      ctx,
		Sd:       sd,
		PolicyID: policyID,
	}
	mock.lockFindPolicyByIDWithCategoryWithSd.Lock()
	mock.calls.FindPolicyByIDWithCategoryWithSd = append(mock.calls.FindPolicyByIDWithCategoryWithSd, callInfo)
	mock.lockFindPolicyByIDWithCategoryWithSd.Unlock()
	return mock.FindPolicyByIDWithCategoryWithSdFunc(ctx, sd, policyID)
}

// FindPolicyByIDWithCategoryWithSdCalls gets all the calls that were made to FindPolicyByIDWithCategoryWithSd.
// Check the length with:
//
//	len(mockedStore.FindPolicyByIDWithCategoryWithSdCalls())
func (mock *StoreMock) FindPolicyByIDWithCategoryWithSdCalls() []struct {
	Ctx      context.Context
	Sd       Sd
	PolicyID uuid.UUID
} {
	var calls []struct {
		Ctx      context.Context
		Sd       Sd
		PolicyID uuid.UUID
	}
	mock.lockFindPolicyByIDWithCategoryWithSd.RLock()
	calls = mock.calls.FindPolicyByIDWithCategoryWithSd
	mock.lockFindPolicyByIDWithCategoryWithSd.RUnlock()
	return calls
}

// FindPolicyByIDWithSd calls FindPolicyByIDWithSdFunc.
func (mock *StoreMock) FindPolicyByIDWithSd(ctx context.Context, sd Sd, policyID uuid.UUID) (entity.Policy, error) {
	if mock.FindPolicyByIDWithSdFunc == nil {
		panic("StoreMock.FindPolicyByIDWithSdFunc: method is nil but Store.FindPolicyByIDWithSd was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Sd       Sd
		PolicyID uuid.UUID
	}{
		Ctx:      ctx,
		Sd:       sd,
		PolicyID: policyID,
	}
	mock.lockFindPolicyByIDWithSd.Lock()
	mock.calls.FindPolicyByIDWithSd = append(mock.calls.FindPolicyByIDWithSd, callInfo)
	mock.lockFindPolicyByIDWithSd.Unlock()
	return mock.FindPolicyByIDWithSdFunc(ctx, sd, policyID)
}

// FindPolicyByIDWithSdCalls gets all the calls that were made to FindPolicyByIDWithSd.
// Check the length with:
//
//	len(mockedStore.FindPolicyByIDWithSdCalls())
func (mock *StoreMock) FindPolicyByIDWithSdCalls() []struct {
	Ctx      context.Context
	Sd       Sd
	PolicyID uuid.UUID
} {
	var calls []struct {
		Ctx      context.Context
		Sd       Sd
		PolicyID uuid.UUID
	}
	mock.lockFindPolicyByIDWithSd.RLock()
	calls = mock.calls.FindPolicyByIDWithSd
	mock.lockFindPolicyByIDWithSd.RUnlock()
	return calls
}

// FindPolicyByKey calls FindPolicyByKeyFunc.
func (mock *StoreMock) FindPolicyByKey(ctx context.Context, key string) (entity.Policy, error) {
	if mock.FindPolicyByKeyFunc == nil {
		panic("StoreMock.FindPolicyByKeyFunc: method is nil but Store.FindPolicyByKey was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockFindPolicyByKey.Lock()
	mock.calls.FindPolicyByKey = append(mock.calls.FindPolicyByKey, callInfo)
	mock.lockFindPolicyByKey.Unlock()
	return mock.FindPolicyByKeyFunc(ctx, key)
}

// FindPolicyByKeyCalls gets all the calls that were made to FindPolicyByKey.
// Check the length with:
//
//	len(mockedStore.FindPolicyByKeyCalls())
func (mock *StoreMock) FindPolicyByKeyCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockFindPolicyByKey.RLock()
	calls = mock.calls.FindPolicyByKey
	mock.lockFindPolicyByKey.RUnlock()
	return calls
}

// FindPolicyByKeyWithCategory calls FindPolicyByKeyWithCategoryFunc.
func (mock *StoreMock) FindPolicyByKeyWithCategory(ctx context.Context, key string) (entity.PolicyWithCategory, error) {
	if mock.FindPolicyByKeyWithCategoryFunc == nil {
		panic("StoreMock.FindPolicyByKeyWithCategoryFunc: method is nil but Store.FindPolicyByKeyWithCategory was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockFindPolicyByKeyWithCategory.Lock()
	mock.calls.FindPolicyByKeyWithCategory = append(mock.calls.FindPolicyByKeyWithCategory, callInfo)
	mock.lockFindPolicyByKeyWithCategory.Unlock()
	return mock.FindPolicyByKeyWithCategoryFunc(ctx, key)
}

// FindPolicyByKeyWithCategoryCalls gets all the calls that were made to FindPolicyByKeyWithCategory.
// Check the length with:
//
//	len(mockedStore.FindPolicyByKeyWithCategoryCalls())
func (mock *StoreMock) FindPolicyByKeyWithCategoryCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockFindPolicyByKeyWithCategory.RLock()
	calls = mock.calls.FindPolicyByKeyWithCategory
	mock.lockFindPolicyByKeyWithCategory.RUnlock()
	return calls
}

// FindPolicyByKeyWithCategoryWithSd calls FindPolicyByKeyWithCategoryWithSdFunc.
func (mock *StoreMock) FindPolicyByKeyWithCategoryWithSd(ctx context.Context, sd Sd, key string) (entity.PolicyWithCategory, error) {
	if mock.FindPolicyByKeyWithCategoryWithSdFunc == nil {
		panic("StoreMock.FindPolicyByKeyWithCategoryWithSdFunc: method is nil but Store.FindPolicyByKeyWithCategoryWithSd was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}{
		Ctx: ctx,
		Sd:  sd,
		Key: key,
	}
	mock.lockFindPolicyByKeyWithCategoryWithSd.Lock()
	mock.calls.FindPolicyByKeyWithCategoryWithSd = append(mock.calls.FindPolicyByKeyWithCategoryWithSd, callInfo)
	mock.lockFindPolicyByKeyWithCategoryWithSd.Unlock()
	return mock.FindPolicyByKeyWithCategoryWithSdFunc(ctx, sd, key)
}

// FindPolicyByKeyWithCategoryWithSdCalls gets all the calls that were made to FindPolicyByKeyWithCategoryWithSd.
// Check the length with:
//
//	len(mockedStore.FindPolicyByKeyWithCategoryWithSdCalls())
func (mock *StoreMock) FindPolicyByKeyWithCategoryWithSdCalls() []struct {
	Ctx context.Context
	Sd  Sd
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}
	mock.lockFindPolicyByKeyWithCategoryWithSd.RLock()
	calls = mock.calls.FindPolicyByKeyWithCategoryWithSd
	mock.lockFindPolicyByKeyWithCategoryWithSd.RUnlock()
	return calls
}

// FindPolicyByKeyWithSd calls FindPolicyByKeyWithSdFunc.
func (mock *StoreMock) FindPolicyByKeyWithSd(ctx context.Context, sd Sd, key string) (entity.Policy, error) {
	if mock.FindPolicyByKeyWithSdFunc == nil {
		panic("StoreMock.FindPolicyByKeyWithSdFunc: method is nil but Store.FindPolicyByKeyWithSd was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}{
		Ctx: ctx,
		Sd:  sd,
		Key: key,
	}
	mock.lockFindPolicyByKeyWithSd.Lock()
	mock.calls.FindPolicyByKeyWithSd = append(mock.calls.FindPolicyByKeyWithSd, callInfo)
	mock.lockFindPolicyByKeyWithSd.Unlock()
	return mock.FindPolicyByKeyWithSdFunc(ctx, sd, key)
}

// FindPolicyByKeyWithSdCalls gets all the calls that were made to FindPolicyByKeyWithSd.
// Check the length with:
//
//	len(mockedStore.FindPolicyByKeyWithSdCalls())
func (mock *StoreMock) FindPolicyByKeyWithSdCalls() []struct {
	Ctx context.Context
	Sd  Sd
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}
	mock.lockFindPolicyByKeyWithSd.RLock()
	calls = mock.calls.FindPolicyByKeyWithSd
	mock.lockFindPolicyByKeyWithSd.RUnlock()
	return calls
}

// FindPolicyCategoryByID calls FindPolicyCategoryByIDFunc.
func (mock *StoreMock) FindPolicyCategoryByID(ctx context.Context, policyCategoryID uuid.UUID) (entity.PolicyCategory, error) {
	if mock.FindPolicyCategoryByIDFunc == nil {
		panic("StoreMock.FindPolicyCategoryByIDFunc: method is nil but Store.FindPolicyCategoryByID was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		PolicyCategoryID uuid.UUID
	}{
		Ctx:              ctx,
		PolicyCategoryID: policyCategoryID,
	}
	mock.lockFindPolicyCategoryByID.Lock()
	mock.calls.FindPolicyCategoryByID = append(mock.calls.FindPolicyCategoryByID, callInfo)
	mock.lockFindPolicyCategoryByID.Unlock()
	return mock.FindPolicyCategoryByIDFunc(ctx, policyCategoryID)
}

// FindPolicyCategoryByIDCalls gets all the calls that were made to FindPolicyCategoryByID.
// Check the length with:
//
//	len(mockedStore.FindPolicyCategoryByIDCalls())
func (mock *StoreMock) FindPolicyCategoryByIDCalls() []struct {
	Ctx              context.Context
	PolicyCategoryID uuid.UUID
} {
	var calls []struct {
		Ctx              context.Context
		PolicyCategoryID uuid.UUID
	}
	mock.lockFindPolicyCategoryByID.RLock()
	calls = mock.calls.FindPolicyCategoryByID
	mock.lockFindPolicyCategoryByID.RUnlock()
	return calls
}

// FindPolicyCategoryByIDWithSd calls FindPolicyCategoryByIDWithSdFunc.
func (mock *StoreMock) FindPolicyCategoryByIDWithSd(ctx context.Context, sd Sd, policyCategoryID uuid.UUID) (entity.PolicyCategory, error) {
	if mock.FindPolicyCategoryByIDWithSdFunc == nil {
		panic("StoreMock.FindPolicyCategoryByIDWithSdFunc: method is nil but Store.FindPolicyCategoryByIDWithSd was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		Sd               Sd
		PolicyCategoryID uuid.UUID
	}{
		Ctx:              ctx,
		Sd:               sd,
		PolicyCategoryID: policyCategoryID,
	}
	mock.lockFindPolicyCategoryByIDWithSd.Lock()
	mock.calls.FindPolicyCategoryByIDWithSd = append(mock.calls.FindPolicyCategoryByIDWithSd, callInfo)
	mock.lockFindPolicyCategoryByIDWithSd.Unlock()
	return mock.FindPolicyCategoryByIDWithSdFunc(ctx, sd, policyCategoryID)
}

// FindPolicyCategoryByIDWithSdCalls gets all the calls that were made to FindPolicyCategoryByIDWithSd.
// Check the length with:
//
//	len(mockedStore.FindPolicyCategoryByIDWithSdCalls())
func (mock *StoreMock) FindPolicyCategoryByIDWithSdCalls() []struct {
	Ctx              context.Context
	Sd               Sd
	PolicyCategoryID uuid.UUID
} {
	var calls []struct {
		Ctx              context.Context
		Sd               Sd
		PolicyCategoryID uuid.UUID
	}
	mock.lockFindPolicyCategoryByIDWithSd.RLock()
	calls = mock.calls.FindPolicyCategoryByIDWithSd
	mock.lockFindPolicyCategoryByIDWithSd.RUnlock()
	return calls
}

// FindPolicyCategoryByKey calls FindPolicyCategoryByKeyFunc.
func (mock *StoreMock) FindPolicyCategoryByKey(ctx context.Context, key string) (entity.PolicyCategory, error) {
	if mock.FindPolicyCategoryByKeyFunc == nil {
		panic("StoreMock.FindPolicyCategoryByKeyFunc: method is nil but Store.FindPolicyCategoryByKey was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockFindPolicyCategoryByKey.Lock()
	mock.calls.FindPolicyCategoryByKey = append(mock.calls.FindPolicyCategoryByKey, callInfo)
	mock.lockFindPolicyCategoryByKey.Unlock()
	return mock.FindPolicyCategoryByKeyFunc(ctx, key)
}

// FindPolicyCategoryByKeyCalls gets all the calls that were made to FindPolicyCategoryByKey.
// Check the length with:
//
//	len(mockedStore.FindPolicyCategoryByKeyCalls())
func (mock *StoreMock) FindPolicyCategoryByKeyCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockFindPolicyCategoryByKey.RLock()
	calls = mock.calls.FindPolicyCategoryByKey
	mock.lockFindPolicyCategoryByKey.RUnlock()
	return calls
}

// FindPolicyCategoryByKeyWithSd calls FindPolicyCategoryByKeyWithSdFunc.
func (mock *StoreMock) FindPolicyCategoryByKeyWithSd(ctx context.Context, sd Sd, key string) (entity.PolicyCategory, error) {
	if mock.FindPolicyCategoryByKeyWithSdFunc == nil {
		panic("StoreMock.FindPolicyCategoryByKeyWithSdFunc: method is nil but Store.FindPolicyCategoryByKeyWithSd was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}{
		Ctx: ctx,
		Sd:  sd,
		Key: key,
	}
	mock.lockFindPolicyCategoryByKeyWithSd.Lock()
	mock.calls.FindPolicyCategoryByKeyWithSd = append(mock.calls.FindPolicyCategoryByKeyWithSd, callInfo)
	mock.lockFindPolicyCategoryByKeyWithSd.Unlock()
	return mock.FindPolicyCategoryByKeyWithSdFunc(ctx, sd, key)
}

// FindPolicyCategoryByKeyWithSdCalls gets all the calls that were made to FindPolicyCategoryByKeyWithSd.
// Check the length with:
//
//	len(mockedStore.FindPolicyCategoryByKeyWithSdCalls())
func (mock *StoreMock) FindPolicyCategoryByKeyWithSdCalls() []struct {
	Ctx context.Context
	Sd  Sd
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}
	mock.lockFindPolicyCategoryByKeyWithSd.RLock()
	calls = mock.calls.FindPolicyCategoryByKeyWithSd
	mock.lockFindPolicyCategoryByKeyWithSd.RUnlock()
	return calls
}

// FindProfessorByID calls FindProfessorByIDFunc.
func (mock *StoreMock) FindProfessorByID(ctx context.Context, professorID uuid.UUID) (entity.Professor, error) {
	if mock.FindProfessorByIDFunc == nil {
		panic("StoreMock.FindProfessorByIDFunc: method is nil but Store.FindProfessorByID was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		ProfessorID uuid.UUID
	}{
		Ctx:         ctx,
		ProfessorID: professorID,
	}
	mock.lockFindProfessorByID.Lock()
	mock.calls.FindProfessorByID = append(mock.calls.FindProfessorByID, callInfo)
	mock.lockFindProfessorByID.Unlock()
	return mock.FindProfessorByIDFunc(ctx, professorID)
}

// FindProfessorByIDCalls gets all the calls that were made to FindProfessorByID.
// Check the length with:
//
//	len(mockedStore.FindProfessorByIDCalls())
func (mock *StoreMock) FindProfessorByIDCalls() []struct {
	Ctx         context.Context
	ProfessorID uuid.UUID
} {
	var calls []struct {
		Ctx         context.Context
		ProfessorID uuid.UUID
	}
	mock.lockFindProfessorByID.RLock()
	calls = mock.calls.FindProfessorByID
	mock.lockFindProfessorByID.RUnlock()
	return calls
}

// FindProfessorByIDWithSd calls FindProfessorByIDWithSdFunc.
func (mock *StoreMock) FindProfessorByIDWithSd(ctx context.Context, sd Sd, professorID uuid.UUID) (entity.Professor, error) {
	if mock.FindProfessorByIDWithSdFunc == nil {
		panic("StoreMock.FindProfessorByIDWithSdFunc: method is nil but Store.FindProfessorByIDWithSd was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Sd          Sd
		ProfessorID uuid.UUID
	}{
		Ctx:         ctx,
		Sd:          sd,
		ProfessorID: professorID,
	}
	mock.lockFindProfessorByIDWithSd.Lock()
	mock.calls.FindProfessorByIDWithSd = append(mock.calls.FindProfessorByIDWithSd, callInfo)
	mock.lockFindProfessorByIDWithSd.Unlock()
	return mock.FindProfessorByIDWithSdFunc(ctx, sd, professorID)
}

// FindProfessorByIDWithSdCalls gets all the calls that were made to FindProfessorByIDWithSd.
// Check the length with:
//
//	len(mockedStore.FindProfessorByIDWithSdCalls())
func (mock *StoreMock) FindProfessorByIDWithSdCalls() []struct {
	Ctx         context.Context
	Sd          Sd
	ProfessorID uuid.UUID
} {
	var calls []struct {
		Ctx         context.Context
		Sd          Sd
		ProfessorID uuid.UUID
	}
	mock.lockFindProfessorByIDWithSd.RLock()
	calls = mock.calls.FindProfessorByIDWithSd
	mock.lockFindProfessorByIDWithSd.RUnlock()
	return calls
}

// FindProfessorWithMember calls FindProfessorWithMemberFunc.
func (mock *StoreMock) FindProfessorWithMember(ctx context.Context, professorID uuid.UUID) (entity.ProfessorWithMember, error) {
	if mock.FindProfessorWithMemberFunc == nil {
		panic("StoreMock.FindProfessorWithMemberFunc: method is nil but Store.FindProfessorWithMember was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		ProfessorID uuid.UUID
	}{
		Ctx:         ctx,
		ProfessorID: professorID,
	}
	mock.lockFindProfessorWithMember.Lock()
	mock.calls.FindProfessorWithMember = append(mock.calls.FindProfessorWithMember, callInfo)
	mock.lockFindProfessorWithMember.Unlock()
	return mock.FindProfessorWithMemberFunc(ctx, professorID)
}

// FindProfessorWithMemberCalls gets all the calls that were made to FindProfessorWithMember.
// Check the length with:
//
//	len(mockedStore.FindProfessorWithMemberCalls())
func (mock *StoreMock) FindProfessorWithMemberCalls() []struct {
	Ctx         context.Context
	ProfessorID uuid.UUID
} {
	var calls []struct {
		Ctx         context.Context
		ProfessorID uuid.UUID
	}
	mock.lockFindProfessorWithMember.RLock()
	calls = mock.calls.FindProfessorWithMember
	mock.lockFindProfessorWithMember.RUnlock()
	return calls
}

// FindProfessorWithMemberWithSd calls FindProfessorWithMemberWithSdFunc.
func (mock *StoreMock) FindProfessorWithMemberWithSd(ctx context.Context, sd Sd, professorID uuid.UUID) (entity.ProfessorWithMember, error) {
	if mock.FindProfessorWithMemberWithSdFunc == nil {
		panic("StoreMock.FindProfessorWithMemberWithSdFunc: method is nil but Store.FindProfessorWithMemberWithSd was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Sd          Sd
		ProfessorID uuid.UUID
	}{
		Ctx:         ctx,
		Sd:          sd,
		ProfessorID: professorID,
	}
	mock.lockFindProfessorWithMemberWithSd.Lock()
	mock.calls.FindProfessorWithMemberWithSd = append(mock.calls.FindProfessorWithMemberWithSd, callInfo)
	mock.lockFindProfessorWithMemberWithSd.Unlock()
	return mock.FindProfessorWithMemberWithSdFunc(ctx, sd, professorID)
}

// FindProfessorWithMemberWithSdCalls gets all the calls that were made to FindProfessorWithMemberWithSd.
// Check the length with:
//
//	len(mockedStore.FindProfessorWithMemberWithSdCalls())
func (mock *StoreMock) FindProfessorWithMemberWithSdCalls() []struct {
	Ctx         context.Context
	Sd          Sd
	ProfessorID uuid.UUID
} {
	var calls []struct {
		Ctx         context.Context
		Sd          Sd
		ProfessorID uuid.UUID
	}
	mock.lockFindProfessorWithMemberWithSd.RLock()
	calls = mock.calls.FindProfessorWithMemberWithSd
	mock.lockFindProfessorWithMemberWithSd.RUnlock()
	return calls
}

// FindReadReceipt calls FindReadReceiptFunc.
func (mock *StoreMock) FindReadReceipt(ctx context.Context, memberID uuid.UUID, messageID uuid.UUID) (entity.ReadReceipt, error) {
	if mock.FindReadReceiptFunc == nil {
		panic("StoreMock.FindReadReceiptFunc: method is nil but Store.FindReadReceipt was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		MemberID  uuid.UUID
		MessageID uuid.UUID
	}{
		Ctx:       ctx,
		MemberID:  memberID,
		MessageID: messageID,
	}
	mock.lockFindReadReceipt.Lock()
	mock.calls.FindReadReceipt = append(mock.calls.FindReadReceipt, callInfo)
	mock.lockFindReadReceipt.Unlock()
	return mock.FindReadReceiptFunc(ctx, memberID, messageID)
}

// FindReadReceiptCalls gets all the calls that were made to FindReadReceipt.
// Check the length with:
//
//	len(mockedStore.FindReadReceiptCalls())
func (mock *StoreMock) FindReadReceiptCalls() []struct {
	Ctx       context.Context
	MemberID  uuid.UUID
	MessageID uuid.UUID
} {
	var calls []struct {
		Ctx       context.Context
		MemberID  uuid.UUID
		MessageID uuid.UUID
	}
	mock.lockFindReadReceipt.RLock()
	calls = mock.calls.FindReadReceipt
	mock.lockFindReadReceipt.RUnlock()
	return calls
}

// FindReadReceiptWithSd calls FindReadReceiptWithSdFunc.
func (mock *StoreMock) FindReadReceiptWithSd(ctx context.Context, sd Sd, memberID uuid.UUID, messageID uuid.UUID) (entity.ReadReceipt, error) {
	if mock.FindReadReceiptWithSdFunc == nil {
		panic("StoreMock.FindReadReceiptWithSdFunc: method is nil but Store.FindReadReceiptWithSd was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Sd        Sd
		MemberID  uuid.UUID
		MessageID uuid.UUID
	}{
		Ctx:       ctx,
		Sd:        sd,
		MemberID:  memberID,
		MessageID: messageID,
	}
	mock.lockFindReadReceiptWithSd.Lock()
	mock.calls.FindReadReceiptWithSd = append(mock.calls.FindReadReceiptWithSd, callInfo)
	mock.lockFindReadReceiptWithSd.Unlock()
	return mock.FindReadReceiptWithSdFunc(ctx, sd, memberID, messageID)
}

// FindReadReceiptWithSdCalls gets all the calls that were made to FindReadReceiptWithSd.
// Check the length with:
//
//	len(mockedStore.FindReadReceiptWithSdCalls())
func (mock *StoreMock) FindReadReceiptWithSdCalls() []struct {
	Ctx       context.Context
	Sd        Sd
	MemberID  uuid.UUID
	MessageID uuid.UUID
} {
	var calls []struct {
		Ctx       context.Context
		Sd        Sd
		MemberID  uuid.UUID
		MessageID uuid.UUID
	}
	mock.lockFindReadReceiptWithSd.RLock()
	calls = mock.calls.FindReadReceiptWithSd
	mock.lockFindReadReceiptWithSd.RUnlock()
	return calls
}

// FindRecordTypeByID calls FindRecordTypeByIDFunc.
func (mock *StoreMock) FindRecordTypeByID(ctx context.Context, recordTypeID uuid.UUID) (entity.RecordType, error) {
	if mock.FindRecordTypeByIDFunc == nil {
		panic("StoreMock.FindRecordTypeByIDFunc: method is nil but Store.FindRecordTypeByID was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		RecordTypeID uuid.UUID
	}{
		Ctx:          ctx,
		RecordTypeID: recordTypeID,
	}
	mock.lockFindRecordTypeByID.Lock()
	mock.calls.FindRecordTypeByID = append(mock.calls.FindRecordTypeByID, callInfo)
	mock.lockFindRecordTypeByID.Unlock()
	return mock.FindRecordTypeByIDFunc(ctx, recordTypeID)
}

// FindRecordTypeByIDCalls gets all the calls that were made to FindRecordTypeByID.
// Check the length with:
//
//	len(mockedStore.FindRecordTypeByIDCalls())
func (mock *StoreMock) FindRecordTypeByIDCalls() []struct {
	Ctx          context.Context
	RecordTypeID uuid.UUID
} {
	var calls []struct {
		Ctx          context.Context
		RecordTypeID uuid.UUID
	}
	mock.lockFindRecordTypeByID.RLock()
	calls = mock.calls.FindRecordTypeByID
	mock.lockFindRecordTypeByID.RUnlock()
	return calls
}

// FindRecordTypeByIDWithSd calls FindRecordTypeByIDWithSdFunc.
func (mock *StoreMock) FindRecordTypeByIDWithSd(ctx context.Context, sd Sd, recordTypeID uuid.UUID) (entity.RecordType, error) {
	if mock.FindRecordTypeByIDWithSdFunc == nil {
		panic("StoreMock.FindRecordTypeByIDWithSdFunc: method is nil but Store.FindRecordTypeByIDWithSd was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		Sd           Sd
		RecordTypeID uuid.UUID
	}{
		Ctx:          ctx,
		Sd:           sd,
		RecordTypeID: recordTypeID,
	}
	mock.lockFindRecordTypeByIDWithSd.Lock()
	mock.calls.FindRecordTypeByIDWithSd = append(mock.calls.FindRecordTypeByIDWithSd, callInfo)
	mock.lockFindRecordTypeByIDWithSd.Unlock()
	return mock.FindRecordTypeByIDWithSdFunc(ctx, sd, recordTypeID)
}

// FindRecordTypeByIDWithSdCalls gets all the calls that were made to FindRecordTypeByIDWithSd.
// Check the length with:
//
//	len(mockedStore.FindRecordTypeByIDWithSdCalls())
func (mock *StoreMock) FindRecordTypeByIDWithSdCalls() []struct {
	Ctx          context.Context
	Sd           Sd
	RecordTypeID uuid.UUID
} {
	var calls []struct {
		Ctx          context.Context
		Sd           Sd
		RecordTypeID uuid.UUID
	}
	mock.lockFindRecordTypeByIDWithSd.RLock()
	calls = mock.calls.FindRecordTypeByIDWithSd
	mock.lockFindRecordTypeByIDWithSd.RUnlock()
	return calls
}

// FindRecordTypeByKey calls FindRecordTypeByKeyFunc.
func (mock *StoreMock) FindRecordTypeByKey(ctx context.Context, key string) (entity.RecordType, error) {
	if mock.FindRecordTypeByKeyFunc == nil {
		panic("StoreMock.FindRecordTypeByKeyFunc: method is nil but Store.FindRecordTypeByKey was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockFindRecordTypeByKey.Lock()
	mock.calls.FindRecordTypeByKey = append(mock.calls.FindRecordTypeByKey, callInfo)
	mock.lockFindRecordTypeByKey.Unlock()
	return mock.FindRecordTypeByKeyFunc(ctx, key)
}

// FindRecordTypeByKeyCalls gets all the calls that were made to FindRecordTypeByKey.
// Check the length with:
//
//	len(mockedStore.FindRecordTypeByKeyCalls())
func (mock *StoreMock) FindRecordTypeByKeyCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockFindRecordTypeByKey.RLock()
	calls = mock.calls.FindRecordTypeByKey
	mock.lockFindRecordTypeByKey.RUnlock()
	return calls
}

// FindRecordTypeByKeyWithSd calls FindRecordTypeByKeyWithSdFunc.
func (mock *StoreMock) FindRecordTypeByKeyWithSd(ctx context.Context, sd Sd, key string) (entity.RecordType, error) {
	if mock.FindRecordTypeByKeyWithSdFunc == nil {
		panic("StoreMock.FindRecordTypeByKeyWithSdFunc: method is nil but Store.FindRecordTypeByKeyWithSd was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}{
		Ctx: ctx,
		Sd:  sd,
		Key: key,
	}
	mock.lockFindRecordTypeByKeyWithSd.Lock()
	mock.calls.FindRecordTypeByKeyWithSd = append(mock.calls.FindRecordTypeByKeyWithSd, callInfo)
	mock.lockFindRecordTypeByKeyWithSd.Unlock()
	return mock.FindRecordTypeByKeyWithSdFunc(ctx, sd, key)
}

// FindRecordTypeByKeyWithSdCalls gets all the calls that were made to FindRecordTypeByKeyWithSd.
// Check the length with:
//
//	len(mockedStore.FindRecordTypeByKeyWithSdCalls())
func (mock *StoreMock) FindRecordTypeByKeyWithSdCalls() []struct {
	Ctx context.Context
	Sd  Sd
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}
	mock.lockFindRecordTypeByKeyWithSd.RLock()
	calls = mock.calls.FindRecordTypeByKeyWithSd
	mock.lockFindRecordTypeByKeyWithSd.RUnlock()
	return calls
}

// FindRoleByID calls FindRoleByIDFunc.
func (mock *StoreMock) FindRoleByID(ctx context.Context, roleID uuid.UUID) (entity.Role, error) {
	if mock.FindRoleByIDFunc == nil {
		panic("StoreMock.FindRoleByIDFunc: method is nil but Store.FindRoleByID was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		RoleID uuid.UUID
	}{
		Ctx:    ctx,
		RoleID: roleID,
	}
	mock.lockFindRoleByID.Lock()
	mock.calls.FindRoleByID = append(mock.calls.FindRoleByID, callInfo)
	mock.lockFindRoleByID.Unlock()
	return mock.FindRoleByIDFunc(ctx, roleID)
}

// FindRoleByIDCalls gets all the calls that were made to FindRoleByID.
// Check the length with:
//
//	len(mockedStore.FindRoleByIDCalls())
func (mock *StoreMock) FindRoleByIDCalls() []struct {
	Ctx    context.Context
	RoleID uuid.UUID
} {
	var calls []struct {
		Ctx    context.Context
		RoleID uuid.UUID
	}
	mock.lockFindRoleByID.RLock()
	calls = mock.calls.FindRoleByID
	mock.lockFindRoleByID.RUnlock()
	return calls
}

// FindRoleByIDWithSd calls FindRoleByIDWithSdFunc.
func (mock *StoreMock) FindRoleByIDWithSd(ctx context.Context, sd Sd, roleID uuid.UUID) (entity.Role, error) {
	if mock.FindRoleByIDWithSdFunc == nil {
		panic("StoreMock.FindRoleByIDWithSdFunc: method is nil but Store.FindRoleByIDWithSd was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Sd     Sd
		RoleID uuid.UUID
	}{
		Ctx:    ctx,
		Sd:     sd,
		RoleID: roleID,
	}
	mock.lockFindRoleByIDWithSd.Lock()
	mock.calls.FindRoleByIDWithSd = append(mock.calls.FindRoleByIDWithSd, callInfo)
	mock.lockFindRoleByIDWithSd.Unlock()
	return mock.FindRoleByIDWithSdFunc(ctx, sd, roleID)
}

// FindRoleByIDWithSdCalls gets all the calls that were made to FindRoleByIDWithSd.
// Check the length with:
//
//	len(mockedStore.FindRoleByIDWithSdCalls())
func (mock *StoreMock) FindRoleByIDWithSdCalls() []struct {
	Ctx    context.Context
	Sd     Sd
	RoleID uuid.UUID
} {
	var calls []struct {
		Ctx    context.Context
		Sd     Sd
		RoleID uuid.UUID
	}
	mock.lockFindRoleByIDWithSd.RLock()
	calls = mock.calls.FindRoleByIDWithSd
	mock.lockFindRoleByIDWithSd.RUnlock()
	return calls
}

// FindStudentByID calls FindStudentByIDFunc.
func (mock *StoreMock) FindStudentByID(ctx context.Context, studentID uuid.UUID) (entity.Student, error) {
	if mock.FindStudentByIDFunc == nil {
		panic("StoreMock.FindStudentByIDFunc: method is nil but Store.FindStudentByID was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		StudentID uuid.UUID
	}{
		Ctx:       ctx,
		StudentID: studentID,
	}
	mock.lockFindStudentByID.Lock()
	mock.calls.FindStudentByID = append(mock.calls.FindStudentByID, callInfo)
	mock.lockFindStudentByID.Unlock()
	return mock.FindStudentByIDFunc(ctx, studentID)
}

// FindStudentByIDCalls gets all the calls that were made to FindStudentByID.
// Check the length with:
//
//	len(mockedStore.FindStudentByIDCalls())
func (mock *StoreMock) FindStudentByIDCalls() []struct {
	Ctx       context.Context
	StudentID uuid.UUID
} {
	var calls []struct {
		Ctx       context.Context
		StudentID uuid.UUID
	}
	mock.lockFindStudentByID.RLock()
	calls = mock.calls.FindStudentByID
	mock.lockFindStudentByID.RUnlock()
	return calls
}

// FindStudentByIDWithSd calls FindStudentByIDWithSdFunc.
func (mock *StoreMock) FindStudentByIDWithSd(ctx context.Context, sd Sd, studentID uuid.UUID) (entity.Student, error) {
	if mock.FindStudentByIDWithSdFunc == nil {
		panic("StoreMock.FindStudentByIDWithSdFunc: method is nil but Store.FindStudentByIDWithSd was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Sd        Sd
		StudentID uuid.UUID
	}{
		Ctx:       ctx,
		Sd:        sd,
		StudentID: studentID,
	}
	mock.lockFindStudentByIDWithSd.Lock()
	mock.calls.FindStudentByIDWithSd = append(mock.calls.FindStudentByIDWithSd, callInfo)
	mock.lockFindStudentByIDWithSd.Unlock()
	return mock.FindStudentByIDWithSdFunc(ctx, sd, studentID)
}

// FindStudentByIDWithSdCalls gets all the calls that were made to FindStudentByIDWithSd.
// Check the length with:
//
//	len(mockedStore.FindStudentByIDWithSdCalls())
func (mock *StoreMock) FindStudentByIDWithSdCalls() []struct {
	Ctx       context.Context
	Sd        Sd
	StudentID uuid.UUID
} {
	var calls []struct {
		Ctx       context.Context
		Sd        Sd
		StudentID uuid.UUID
	}
	mock.lockFindStudentByIDWithSd.RLock()
	calls = mock.calls.FindStudentByIDWithSd
	mock.lockFindStudentByIDWithSd.RUnlock()
	return calls
}

// FindStudentWithMember calls FindStudentWithMemberFunc.
func (mock *StoreMock) FindStudentWithMember(ctx context.Context, studentID uuid.UUID) (entity.StudentWithMember, error) {
	if mock.FindStudentWithMemberFunc == nil {
		panic("StoreMock.FindStudentWithMemberFunc: method is nil but Store.FindStudentWithMember was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		StudentID uuid.UUID
	}{
		Ctx:       ctx,
		StudentID: studentID,
	}
	mock.lockFindStudentWithMember.Lock()
	mock.calls.FindStudentWithMember = append(mock.calls.FindStudentWithMember, callInfo)
	mock.lockFindStudentWithMember.Unlock()
	return mock.FindStudentWithMemberFunc(ctx, studentID)
}

// FindStudentWithMemberCalls gets all the calls that were made to FindStudentWithMember.
// Check the length with:
//
//	len(mockedStore.FindStudentWithMemberCalls())
func (mock *StoreMock) FindStudentWithMemberCalls() []struct {
	Ctx       context.Context
	StudentID uuid.UUID
} {
	var calls []struct {
		Ctx       context.Context
		StudentID uuid.UUID
	}
	mock.lockFindStudentWithMember.RLock()
	calls = mock.calls.FindStudentWithMember
	mock.lockFindStudentWithMember.RUnlock()
	return calls
}

// FindStudentWithMemberWithSd calls FindStudentWithMemberWithSdFunc.
func (mock *StoreMock) FindStudentWithMemberWithSd(ctx context.Context, sd Sd, studentID uuid.UUID) (entity.StudentWithMember, error) {
	if mock.FindStudentWithMemberWithSdFunc == nil {
		panic("StoreMock.FindStudentWithMemberWithSdFunc: method is nil but Store.FindStudentWithMemberWithSd was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Sd        Sd
		StudentID uuid.UUID
	}{
		Ctx:       ctx,
		Sd:        sd,
		StudentID: studentID,
	}
	mock.lockFindStudentWithMemberWithSd.Lock()
	mock.calls.FindStudentWithMemberWithSd = append(mock.calls.FindStudentWithMemberWithSd, callInfo)
	mock.lockFindStudentWithMemberWithSd.Unlock()
	return mock.FindStudentWithMemberWithSdFunc(ctx, sd, studentID)
}

// FindStudentWithMemberWithSdCalls gets all the calls that were made to FindStudentWithMemberWithSd.
// Check the length with:
//
//	len(mockedStore.FindStudentWithMemberWithSdCalls())
func (mock *StoreMock) FindStudentWithMemberWithSdCalls() []struct {
	Ctx       context.Context
	Sd        Sd
	StudentID uuid.UUID
} {
	var calls []struct {
		Ctx       context.Context
		Sd        Sd
		StudentID uuid.UUID
	}
	mock.lockFindStudentWithMemberWithSd.RLock()
	calls = mock.calls.FindStudentWithMemberWithSd
	mock.lockFindStudentWithMemberWithSd.RUnlock()
	return calls
}

// FindWholeOrganization calls FindWholeOrganizationFunc.
func (mock *StoreMock) FindWholeOrganization(ctx context.Context) (entity.Organization, error) {
	if mock.FindWholeOrganizationFunc == nil {
		panic("StoreMock.FindWholeOrganizationFunc: method is nil but Store.FindWholeOrganization was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockFindWholeOrganization.Lock()
	mock.calls.FindWholeOrganization = append(mock.calls.FindWholeOrganization, callInfo)
	mock.lockFindWholeOrganization.Unlock()
	return mock.FindWholeOrganizationFunc(ctx)
}

// FindWholeOrganizationCalls gets all the calls that were made to FindWholeOrganization.
// Check the length with:
//
//	len(mockedStore.FindWholeOrganizationCalls())
func (mock *StoreMock) FindWholeOrganizationCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockFindWholeOrganization.RLock()
	calls = mock.calls.FindWholeOrganization
	mock.lockFindWholeOrganization.RUnlock()
	return calls
}

// FindWholeOrganizationWithSd calls FindWholeOrganizationWithSdFunc.
func (mock *StoreMock) FindWholeOrganizationWithSd(ctx context.Context, sd Sd) (entity.Organization, error) {
	if mock.FindWholeOrganizationWithSdFunc == nil {
		panic("StoreMock.FindWholeOrganizationWithSdFunc: method is nil but Store.FindWholeOrganizationWithSd was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Sd  Sd
	}{
		Ctx: ctx,
		Sd:  sd,
	}
	mock.lockFindWholeOrganizationWithSd.Lock()
	mock.calls.FindWholeOrganizationWithSd = append(mock.calls.FindWholeOrganizationWithSd, callInfo)
	mock.lockFindWholeOrganizationWithSd.Unlock()
	return mock.FindWholeOrganizationWithSdFunc(ctx, sd)
}

// FindWholeOrganizationWithSdCalls gets all the calls that were made to FindWholeOrganizationWithSd.
// Check the length with:
//
//	len(mockedStore.FindWholeOrganizationWithSdCalls())
func (mock *StoreMock) FindWholeOrganizationWithSdCalls() []struct {
	Ctx context.Context
	Sd  Sd
} {
	var calls []struct {
		Ctx context.Context
		Sd  Sd
	}
	mock.lockFindWholeOrganizationWithSd.RLock()
	calls = mock.calls.FindWholeOrganizationWithSd
	mock.lockFindWholeOrganizationWithSd.RUnlock()
	return calls
}

// GetAbsences calls GetAbsencesFunc.
func (mock *StoreMock) GetAbsences(ctx context.Context, order parameter.AbsenceOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Absence], error) {
	if mock.GetAbsencesFunc == nil {
		panic("StoreMock.GetAbsencesFunc: method is nil but Store.GetAbsences was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Order parameter.AbsenceOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetAbsences.Lock()
	mock.calls.GetAbsences = append(mock.calls.GetAbsences, callInfo)
	mock.lockGetAbsences.Unlock()
	return mock.GetAbsencesFunc(ctx, order, np, cp, wc)
}

// GetAbsencesCalls gets all the calls that were made to GetAbsences.
// Check the length with:
//
//	len(mockedStore.GetAbsencesCalls())
func (mock *StoreMock) GetAbsencesCalls() []struct {
	Ctx   context.Context
	Order parameter.AbsenceOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Order parameter.AbsenceOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetAbsences.RLock()
	calls = mock.calls.GetAbsences
	mock.lockGetAbsences.RUnlock()
	return calls
}

// GetAbsencesWithSd calls GetAbsencesWithSdFunc.
func (mock *StoreMock) GetAbsencesWithSd(ctx context.Context, sd Sd, order parameter.AbsenceOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Absence], error) {
	if mock.GetAbsencesWithSdFunc == nil {
		panic("StoreMock.GetAbsencesWithSdFunc: method is nil but Store.GetAbsencesWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Order parameter.AbsenceOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetAbsencesWithSd.Lock()
	mock.calls.GetAbsencesWithSd = append(mock.calls.GetAbsencesWithSd, callInfo)
	mock.lockGetAbsencesWithSd.Unlock()
	return mock.GetAbsencesWithSdFunc(ctx, sd, order, np, cp, wc)
}

// GetAbsencesWithSdCalls gets all the calls that were made to GetAbsencesWithSd.
// Check the length with:
//
//	len(mockedStore.GetAbsencesWithSdCalls())
func (mock *StoreMock) GetAbsencesWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Order parameter.AbsenceOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Order parameter.AbsenceOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetAbsencesWithSd.RLock()
	calls = mock.calls.GetAbsencesWithSd
	mock.lockGetAbsencesWithSd.RUnlock()
	return calls
}

// GetAttachableItems calls GetAttachableItemsFunc.
func (mock *StoreMock) GetAttachableItems(ctx context.Context, where parameter.WhereAttachableItemParam, order parameter.AttachableItemOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.AttachableItemWithContent], error) {
	if mock.GetAttachableItemsFunc == nil {
		panic("StoreMock.GetAttachableItemsFunc: method is nil but Store.GetAttachableItems was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereAttachableItemParam
		Order parameter.AttachableItemOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetAttachableItems.Lock()
	mock.calls.GetAttachableItems = append(mock.calls.GetAttachableItems, callInfo)
	mock.lockGetAttachableItems.Unlock()
	return mock.GetAttachableItemsFunc(ctx, where, order, np, cp, wc)
}

// GetAttachableItemsCalls gets all the calls that were made to GetAttachableItems.
// Check the length with:
//
//	len(mockedStore.GetAttachableItemsCalls())
func (mock *StoreMock) GetAttachableItemsCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereAttachableItemParam
	Order parameter.AttachableItemOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereAttachableItemParam
		Order parameter.AttachableItemOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetAttachableItems.RLock()
	calls = mock.calls.GetAttachableItems
	mock.lockGetAttachableItems.RUnlock()
	return calls
}

// GetAttachableItemsWithMimeType calls GetAttachableItemsWithMimeTypeFunc.
func (mock *StoreMock) GetAttachableItemsWithMimeType(ctx context.Context, where parameter.WhereAttachableItemParam, order parameter.AttachableItemOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.AttachableItemWithMimeType], error) {
	if mock.GetAttachableItemsWithMimeTypeFunc == nil {
		panic("StoreMock.GetAttachableItemsWithMimeTypeFunc: method is nil but Store.GetAttachableItemsWithMimeType was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereAttachableItemParam
		Order parameter.AttachableItemOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetAttachableItemsWithMimeType.Lock()
	mock.calls.GetAttachableItemsWithMimeType = append(mock.calls.GetAttachableItemsWithMimeType, callInfo)
	mock.lockGetAttachableItemsWithMimeType.Unlock()
	return mock.GetAttachableItemsWithMimeTypeFunc(ctx, where, order, np, cp, wc)
}

// GetAttachableItemsWithMimeTypeCalls gets all the calls that were made to GetAttachableItemsWithMimeType.
// Check the length with:
//
//	len(mockedStore.GetAttachableItemsWithMimeTypeCalls())
func (mock *StoreMock) GetAttachableItemsWithMimeTypeCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereAttachableItemParam
	Order parameter.AttachableItemOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereAttachableItemParam
		Order parameter.AttachableItemOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetAttachableItemsWithMimeType.RLock()
	calls = mock.calls.GetAttachableItemsWithMimeType
	mock.lockGetAttachableItemsWithMimeType.RUnlock()
	return calls
}

// GetAttachableItemsWithMimeTypeWithSd calls GetAttachableItemsWithMimeTypeWithSdFunc.
func (mock *StoreMock) GetAttachableItemsWithMimeTypeWithSd(ctx context.Context, sd Sd, where parameter.WhereAttachableItemParam, order parameter.AttachableItemOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.AttachableItemWithMimeType], error) {
	if mock.GetAttachableItemsWithMimeTypeWithSdFunc == nil {
		panic("StoreMock.GetAttachableItemsWithMimeTypeWithSdFunc: method is nil but Store.GetAttachableItemsWithMimeTypeWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereAttachableItemParam
		Order parameter.AttachableItemOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetAttachableItemsWithMimeTypeWithSd.Lock()
	mock.calls.GetAttachableItemsWithMimeTypeWithSd = append(mock.calls.GetAttachableItemsWithMimeTypeWithSd, callInfo)
	mock.lockGetAttachableItemsWithMimeTypeWithSd.Unlock()
	return mock.GetAttachableItemsWithMimeTypeWithSdFunc(ctx, sd, where, order, np, cp, wc)
}

// GetAttachableItemsWithMimeTypeWithSdCalls gets all the calls that were made to GetAttachableItemsWithMimeTypeWithSd.
// Check the length with:
//
//	len(mockedStore.GetAttachableItemsWithMimeTypeWithSdCalls())
func (mock *StoreMock) GetAttachableItemsWithMimeTypeWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereAttachableItemParam
	Order parameter.AttachableItemOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereAttachableItemParam
		Order parameter.AttachableItemOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetAttachableItemsWithMimeTypeWithSd.RLock()
	calls = mock.calls.GetAttachableItemsWithMimeTypeWithSd
	mock.lockGetAttachableItemsWithMimeTypeWithSd.RUnlock()
	return calls
}

// GetAttachableItemsWithSd calls GetAttachableItemsWithSdFunc.
func (mock *StoreMock) GetAttachableItemsWithSd(ctx context.Context, sd Sd, where parameter.WhereAttachableItemParam, order parameter.AttachableItemOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.AttachableItemWithContent], error) {
	if mock.GetAttachableItemsWithSdFunc == nil {
		panic("StoreMock.GetAttachableItemsWithSdFunc: method is nil but Store.GetAttachableItemsWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereAttachableItemParam
		Order parameter.AttachableItemOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetAttachableItemsWithSd.Lock()
	mock.calls.GetAttachableItemsWithSd = append(mock.calls.GetAttachableItemsWithSd, callInfo)
	mock.lockGetAttachableItemsWithSd.Unlock()
	return mock.GetAttachableItemsWithSdFunc(ctx, sd, where, order, np, cp, wc)
}

// GetAttachableItemsWithSdCalls gets all the calls that were made to GetAttachableItemsWithSd.
// Check the length with:
//
//	len(mockedStore.GetAttachableItemsWithSdCalls())
func (mock *StoreMock) GetAttachableItemsWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereAttachableItemParam
	Order parameter.AttachableItemOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereAttachableItemParam
		Order parameter.AttachableItemOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetAttachableItemsWithSd.RLock()
	calls = mock.calls.GetAttachableItemsWithSd
	mock.lockGetAttachableItemsWithSd.RUnlock()
	return calls
}

// GetAttachedItemsOnChatRoom calls GetAttachedItemsOnChatRoomFunc.
func (mock *StoreMock) GetAttachedItemsOnChatRoom(ctx context.Context, chatRoomID uuid.UUID, where parameter.WhereAttachedItemOnChatRoomParam, order parameter.AttachedItemOnChatRoomOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.AttachedItemOnChatRoom], error) {
	if mock.GetAttachedItemsOnChatRoomFunc == nil {
		panic("StoreMock.GetAttachedItemsOnChatRoomFunc: method is nil but Store.GetAttachedItemsOnChatRoom was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ChatRoomID uuid.UUID
		Where      parameter.WhereAttachedItemOnChatRoomParam
		Order      parameter.AttachedItemOnChatRoomOrderMethod
		Np         NumberedPaginationParam
		Cp         CursorPaginationParam
		Wc         WithCountParam
	}{
		Ctx:        ctx,
		ChatRoomID: chatRoomID,
		Where:      where,
		Order:      order,
		Np:         np,
		Cp:         cp,
		Wc:         wc,
	}
	mock.lockGetAttachedItemsOnChatRoom.Lock()
	mock.calls.GetAttachedItemsOnChatRoom = append(mock.calls.GetAttachedItemsOnChatRoom, callInfo)
	mock.lockGetAttachedItemsOnChatRoom.Unlock()
	return mock.GetAttachedItemsOnChatRoomFunc(ctx, chatRoomID, where, order, np, cp, wc)
}

// GetAttachedItemsOnChatRoomCalls gets all the calls that were made to GetAttachedItemsOnChatRoom.
// Check the length with:
//
//	len(mockedStore.GetAttachedItemsOnChatRoomCalls())
func (mock *StoreMock) GetAttachedItemsOnChatRoomCalls() []struct {
	Ctx        context.Context
	ChatRoomID uuid.UUID
	Where      parameter.WhereAttachedItemOnChatRoomParam
	Order      parameter.AttachedItemOnChatRoomOrderMethod
	Np         NumberedPaginationParam
	Cp         CursorPaginationParam
	Wc         WithCountParam
} {
	var calls []struct {
		Ctx        context.Context
		ChatRoomID uuid.UUID
		Where      parameter.WhereAttachedItemOnChatRoomParam
		Order      parameter.AttachedItemOnChatRoomOrderMethod
		Np         NumberedPaginationParam
		Cp         CursorPaginationParam
		Wc         WithCountParam
	}
	mock.lockGetAttachedItemsOnChatRoom.RLock()
	calls = mock.calls.GetAttachedItemsOnChatRoom
	mock.lockGetAttachedItemsOnChatRoom.RUnlock()
	return calls
}

// GetAttachedItemsOnChatRoomWithSd calls GetAttachedItemsOnChatRoomWithSdFunc.
func (mock *StoreMock) GetAttachedItemsOnChatRoomWithSd(ctx context.Context, sd Sd, chatRoomID uuid.UUID, where parameter.WhereAttachedItemOnChatRoomParam, order parameter.AttachedItemOnChatRoomOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.AttachedItemOnChatRoom], error) {
	if mock.GetAttachedItemsOnChatRoomWithSdFunc == nil {
		panic("StoreMock.GetAttachedItemsOnChatRoomWithSdFunc: method is nil but Store.GetAttachedItemsOnChatRoomWithSd was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Sd         Sd
		ChatRoomID uuid.UUID
		Where      parameter.WhereAttachedItemOnChatRoomParam
		Order      parameter.AttachedItemOnChatRoomOrderMethod
		Np         NumberedPaginationParam
		Cp         CursorPaginationParam
		Wc         WithCountParam
	}{
		Ctx:        ctx,
		Sd:         sd,
		ChatRoomID: chatRoomID,
		Where:      where,
		Order:      order,
		Np:         np,
		Cp:         cp,
		Wc:         wc,
	}
	mock.lockGetAttachedItemsOnChatRoomWithSd.Lock()
	mock.calls.GetAttachedItemsOnChatRoomWithSd = append(mock.calls.GetAttachedItemsOnChatRoomWithSd, callInfo)
	mock.lockGetAttachedItemsOnChatRoomWithSd.Unlock()
	return mock.GetAttachedItemsOnChatRoomWithSdFunc(ctx, sd, chatRoomID, where, order, np, cp, wc)
}

// GetAttachedItemsOnChatRoomWithSdCalls gets all the calls that were made to GetAttachedItemsOnChatRoomWithSd.
// Check the length with:
//
//	len(mockedStore.GetAttachedItemsOnChatRoomWithSdCalls())
func (mock *StoreMock) GetAttachedItemsOnChatRoomWithSdCalls() []struct {
	Ctx        context.Context
	Sd         Sd
	ChatRoomID uuid.UUID
	Where      parameter.WhereAttachedItemOnChatRoomParam
	Order      parameter.AttachedItemOnChatRoomOrderMethod
	Np         NumberedPaginationParam
	Cp         CursorPaginationParam
	Wc         WithCountParam
} {
	var calls []struct {
		Ctx        context.Context
		Sd         Sd
		ChatRoomID uuid.UUID
		Where      parameter.WhereAttachedItemOnChatRoomParam
		Order      parameter.AttachedItemOnChatRoomOrderMethod
		Np         NumberedPaginationParam
		Cp         CursorPaginationParam
		Wc         WithCountParam
	}
	mock.lockGetAttachedItemsOnChatRoomWithSd.RLock()
	calls = mock.calls.GetAttachedItemsOnChatRoomWithSd
	mock.lockGetAttachedItemsOnChatRoomWithSd.RUnlock()
	return calls
}

// GetAttachedItemsOnMessage calls GetAttachedItemsOnMessageFunc.
func (mock *StoreMock) GetAttachedItemsOnMessage(ctx context.Context, messageID uuid.UUID, where parameter.WhereAttachedItemOnMessageParam, order parameter.AttachedItemOnMessageOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.AttachedItemOnMessage], error) {
	if mock.GetAttachedItemsOnMessageFunc == nil {
		panic("StoreMock.GetAttachedItemsOnMessageFunc: method is nil but Store.GetAttachedItemsOnMessage was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		MessageID uuid.UUID
		Where     parameter.WhereAttachedItemOnMessageParam
		Order     parameter.AttachedItemOnMessageOrderMethod
		Np        NumberedPaginationParam
		Cp        CursorPaginationParam
		Wc        WithCountParam
	}{
		Ctx:       ctx,
		MessageID: messageID,
		Where:     where,
		Order:     order,
		Np:        np,
		Cp:        cp,
		Wc:        wc,
	}
	mock.lockGetAttachedItemsOnMessage.Lock()
	mock.calls.GetAttachedItemsOnMessage = append(mock.calls.GetAttachedItemsOnMessage, callInfo)
	mock.lockGetAttachedItemsOnMessage.Unlock()
	return mock.GetAttachedItemsOnMessageFunc(ctx, messageID, where, order, np, cp, wc)
}

// GetAttachedItemsOnMessageCalls gets all the calls that were made to GetAttachedItemsOnMessage.
// Check the length with:
//
//	len(mockedStore.GetAttachedItemsOnMessageCalls())
func (mock *StoreMock) GetAttachedItemsOnMessageCalls() []struct {
	Ctx       context.Context
	MessageID uuid.UUID
	Where     parameter.WhereAttachedItemOnMessageParam
	Order     parameter.AttachedItemOnMessageOrderMethod
	Np        NumberedPaginationParam
	Cp        CursorPaginationParam
	Wc        WithCountParam
} {
	var calls []struct {
		Ctx       context.Context
		MessageID uuid.UUID
		Where     parameter.WhereAttachedItemOnMessageParam
		Order     parameter.AttachedItemOnMessageOrderMethod
		Np        NumberedPaginationParam
		Cp        CursorPaginationParam
		Wc        WithCountParam
	}
	mock.lockGetAttachedItemsOnMessage.RLock()
	calls = mock.calls.GetAttachedItemsOnMessage
	mock.lockGetAttachedItemsOnMessage.RUnlock()
	return calls
}

// GetAttachedItemsOnMessageWithMimeType calls GetAttachedItemsOnMessageWithMimeTypeFunc.
func (mock *StoreMock) GetAttachedItemsOnMessageWithMimeType(ctx context.Context, messageID uuid.UUID, where parameter.WhereAttachedItemOnMessageParam, order parameter.AttachedItemOnMessageOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.AttachedItemOnMessageWithMimeType], error) {
	if mock.GetAttachedItemsOnMessageWithMimeTypeFunc == nil {
		panic("StoreMock.GetAttachedItemsOnMessageWithMimeTypeFunc: method is nil but Store.GetAttachedItemsOnMessageWithMimeType was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		MessageID uuid.UUID
		Where     parameter.WhereAttachedItemOnMessageParam
		Order     parameter.AttachedItemOnMessageOrderMethod
		Np        NumberedPaginationParam
		Cp        CursorPaginationParam
		Wc        WithCountParam
	}{
		Ctx:       ctx,
		MessageID: messageID,
		Where:     where,
		Order:     order,
		Np:        np,
		Cp:        cp,
		Wc:        wc,
	}
	mock.lockGetAttachedItemsOnMessageWithMimeType.Lock()
	mock.calls.GetAttachedItemsOnMessageWithMimeType = append(mock.calls.GetAttachedItemsOnMessageWithMimeType, callInfo)
	mock.lockGetAttachedItemsOnMessageWithMimeType.Unlock()
	return mock.GetAttachedItemsOnMessageWithMimeTypeFunc(ctx, messageID, where, order, np, cp, wc)
}

// GetAttachedItemsOnMessageWithMimeTypeCalls gets all the calls that were made to GetAttachedItemsOnMessageWithMimeType.
// Check the length with:
//
//	len(mockedStore.GetAttachedItemsOnMessageWithMimeTypeCalls())
func (mock *StoreMock) GetAttachedItemsOnMessageWithMimeTypeCalls() []struct {
	Ctx       context.Context
	MessageID uuid.UUID
	Where     parameter.WhereAttachedItemOnMessageParam
	Order     parameter.AttachedItemOnMessageOrderMethod
	Np        NumberedPaginationParam
	Cp        CursorPaginationParam
	Wc        WithCountParam
} {
	var calls []struct {
		Ctx       context.Context
		MessageID uuid.UUID
		Where     parameter.WhereAttachedItemOnMessageParam
		Order     parameter.AttachedItemOnMessageOrderMethod
		Np        NumberedPaginationParam
		Cp        CursorPaginationParam
		Wc        WithCountParam
	}
	mock.lockGetAttachedItemsOnMessageWithMimeType.RLock()
	calls = mock.calls.GetAttachedItemsOnMessageWithMimeType
	mock.lockGetAttachedItemsOnMessageWithMimeType.RUnlock()
	return calls
}

// GetAttachedItemsOnMessageWithMimeTypeWithSd calls GetAttachedItemsOnMessageWithMimeTypeWithSdFunc.
func (mock *StoreMock) GetAttachedItemsOnMessageWithMimeTypeWithSd(ctx context.Context, sd Sd, messageID uuid.UUID, where parameter.WhereAttachedItemOnMessageParam, order parameter.AttachedItemOnMessageOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.AttachedItemOnMessageWithMimeType], error) {
	if mock.GetAttachedItemsOnMessageWithMimeTypeWithSdFunc == nil {
		panic("StoreMock.GetAttachedItemsOnMessageWithMimeTypeWithSdFunc: method is nil but Store.GetAttachedItemsOnMessageWithMimeTypeWithSd was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Sd        Sd
		MessageID uuid.UUID
		Where     parameter.WhereAttachedItemOnMessageParam
		Order     parameter.AttachedItemOnMessageOrderMethod
		Np        NumberedPaginationParam
		Cp        CursorPaginationParam
		Wc        WithCountParam
	}{
		Ctx:       ctx,
		Sd:        sd,
		MessageID: messageID,
		Where:     where,
		Order:     order,
		Np:        np,
		Cp:        cp,
		Wc:        wc,
	}
	mock.lockGetAttachedItemsOnMessageWithMimeTypeWithSd.Lock()
	mock.calls.GetAttachedItemsOnMessageWithMimeTypeWithSd = append(mock.calls.GetAttachedItemsOnMessageWithMimeTypeWithSd, callInfo)
	mock.lockGetAttachedItemsOnMessageWithMimeTypeWithSd.Unlock()
	return mock.GetAttachedItemsOnMessageWithMimeTypeWithSdFunc(ctx, sd, messageID, where, order, np, cp, wc)
}

// GetAttachedItemsOnMessageWithMimeTypeWithSdCalls gets all the calls that were made to GetAttachedItemsOnMessageWithMimeTypeWithSd.
// Check the length with:
//
//	len(mockedStore.GetAttachedItemsOnMessageWithMimeTypeWithSdCalls())
func (mock *StoreMock) GetAttachedItemsOnMessageWithMimeTypeWithSdCalls() []struct {
	Ctx       context.Context
	Sd        Sd
	MessageID uuid.UUID
	Where     parameter.WhereAttachedItemOnMessageParam
	Order     parameter.AttachedItemOnMessageOrderMethod
	Np        NumberedPaginationParam
	Cp        CursorPaginationParam
	Wc        WithCountParam
} {
	var calls []struct {
		Ctx       context.Context
		Sd        Sd
		MessageID uuid.UUID
		Where     parameter.WhereAttachedItemOnMessageParam
		Order     parameter.AttachedItemOnMessageOrderMethod
		Np        NumberedPaginationParam
		Cp        CursorPaginationParam
		Wc        WithCountParam
	}
	mock.lockGetAttachedItemsOnMessageWithMimeTypeWithSd.RLock()
	calls = mock.calls.GetAttachedItemsOnMessageWithMimeTypeWithSd
	mock.lockGetAttachedItemsOnMessageWithMimeTypeWithSd.RUnlock()
	return calls
}

// GetAttachedItemsOnMessageWithSd calls GetAttachedItemsOnMessageWithSdFunc.
func (mock *StoreMock) GetAttachedItemsOnMessageWithSd(ctx context.Context, sd Sd, messageID uuid.UUID, where parameter.WhereAttachedItemOnMessageParam, order parameter.AttachedItemOnMessageOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.AttachedItemOnMessage], error) {
	if mock.GetAttachedItemsOnMessageWithSdFunc == nil {
		panic("StoreMock.GetAttachedItemsOnMessageWithSdFunc: method is nil but Store.GetAttachedItemsOnMessageWithSd was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Sd        Sd
		MessageID uuid.UUID
		Where     parameter.WhereAttachedItemOnMessageParam
		Order     parameter.AttachedItemOnMessageOrderMethod
		Np        NumberedPaginationParam
		Cp        CursorPaginationParam
		Wc        WithCountParam
	}{
		Ctx:       ctx,
		Sd:        sd,
		MessageID: messageID,
		Where:     where,
		Order:     order,
		Np:        np,
		Cp:        cp,
		Wc:        wc,
	}
	mock.lockGetAttachedItemsOnMessageWithSd.Lock()
	mock.calls.GetAttachedItemsOnMessageWithSd = append(mock.calls.GetAttachedItemsOnMessageWithSd, callInfo)
	mock.lockGetAttachedItemsOnMessageWithSd.Unlock()
	return mock.GetAttachedItemsOnMessageWithSdFunc(ctx, sd, messageID, where, order, np, cp, wc)
}

// GetAttachedItemsOnMessageWithSdCalls gets all the calls that were made to GetAttachedItemsOnMessageWithSd.
// Check the length with:
//
//	len(mockedStore.GetAttachedItemsOnMessageWithSdCalls())
func (mock *StoreMock) GetAttachedItemsOnMessageWithSdCalls() []struct {
	Ctx       context.Context
	Sd        Sd
	MessageID uuid.UUID
	Where     parameter.WhereAttachedItemOnMessageParam
	Order     parameter.AttachedItemOnMessageOrderMethod
	Np        NumberedPaginationParam
	Cp        CursorPaginationParam
	Wc        WithCountParam
} {
	var calls []struct {
		Ctx       context.Context
		Sd        Sd
		MessageID uuid.UUID
		Where     parameter.WhereAttachedItemOnMessageParam
		Order     parameter.AttachedItemOnMessageOrderMethod
		Np        NumberedPaginationParam
		Cp        CursorPaginationParam
		Wc        WithCountParam
	}
	mock.lockGetAttachedItemsOnMessageWithSd.RLock()
	calls = mock.calls.GetAttachedItemsOnMessageWithSd
	mock.lockGetAttachedItemsOnMessageWithSd.RUnlock()
	return calls
}

// GetAttendStatuses calls GetAttendStatusesFunc.
func (mock *StoreMock) GetAttendStatuses(ctx context.Context, where parameter.WhereAttendStatusParam, order parameter.AttendStatusOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.AttendStatus], error) {
	if mock.GetAttendStatusesFunc == nil {
		panic("StoreMock.GetAttendStatusesFunc: method is nil but Store.GetAttendStatuses was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereAttendStatusParam
		Order parameter.AttendStatusOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetAttendStatuses.Lock()
	mock.calls.GetAttendStatuses = append(mock.calls.GetAttendStatuses, callInfo)
	mock.lockGetAttendStatuses.Unlock()
	return mock.GetAttendStatusesFunc(ctx, where, order, np, cp, wc)
}

// GetAttendStatusesCalls gets all the calls that were made to GetAttendStatuses.
// Check the length with:
//
//	len(mockedStore.GetAttendStatusesCalls())
func (mock *StoreMock) GetAttendStatusesCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereAttendStatusParam
	Order parameter.AttendStatusOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereAttendStatusParam
		Order parameter.AttendStatusOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetAttendStatuses.RLock()
	calls = mock.calls.GetAttendStatuses
	mock.lockGetAttendStatuses.RUnlock()
	return calls
}

// GetAttendStatusesWithSd calls GetAttendStatusesWithSdFunc.
func (mock *StoreMock) GetAttendStatusesWithSd(ctx context.Context, sd Sd, where parameter.WhereAttendStatusParam, order parameter.AttendStatusOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.AttendStatus], error) {
	if mock.GetAttendStatusesWithSdFunc == nil {
		panic("StoreMock.GetAttendStatusesWithSdFunc: method is nil but Store.GetAttendStatusesWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereAttendStatusParam
		Order parameter.AttendStatusOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetAttendStatusesWithSd.Lock()
	mock.calls.GetAttendStatusesWithSd = append(mock.calls.GetAttendStatusesWithSd, callInfo)
	mock.lockGetAttendStatusesWithSd.Unlock()
	return mock.GetAttendStatusesWithSdFunc(ctx, sd, where, order, np, cp, wc)
}

// GetAttendStatusesWithSdCalls gets all the calls that were made to GetAttendStatusesWithSd.
// Check the length with:
//
//	len(mockedStore.GetAttendStatusesWithSdCalls())
func (mock *StoreMock) GetAttendStatusesWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereAttendStatusParam
	Order parameter.AttendStatusOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereAttendStatusParam
		Order parameter.AttendStatusOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetAttendStatusesWithSd.RLock()
	calls = mock.calls.GetAttendStatusesWithSd
	mock.lockGetAttendStatusesWithSd.RUnlock()
	return calls
}

// GetAttendanceTypes calls GetAttendanceTypesFunc.
func (mock *StoreMock) GetAttendanceTypes(ctx context.Context, where parameter.WhereAttendanceTypeParam, order parameter.AttendanceTypeOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.AttendanceType], error) {
	if mock.GetAttendanceTypesFunc == nil {
		panic("StoreMock.GetAttendanceTypesFunc: method is nil but Store.GetAttendanceTypes was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereAttendanceTypeParam
		Order parameter.AttendanceTypeOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetAttendanceTypes.Lock()
	mock.calls.GetAttendanceTypes = append(mock.calls.GetAttendanceTypes, callInfo)
	mock.lockGetAttendanceTypes.Unlock()
	return mock.GetAttendanceTypesFunc(ctx, where, order, np, cp, wc)
}

// GetAttendanceTypesCalls gets all the calls that were made to GetAttendanceTypes.
// Check the length with:
//
//	len(mockedStore.GetAttendanceTypesCalls())
func (mock *StoreMock) GetAttendanceTypesCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereAttendanceTypeParam
	Order parameter.AttendanceTypeOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereAttendanceTypeParam
		Order parameter.AttendanceTypeOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetAttendanceTypes.RLock()
	calls = mock.calls.GetAttendanceTypes
	mock.lockGetAttendanceTypes.RUnlock()
	return calls
}

// GetAttendanceTypesWithSd calls GetAttendanceTypesWithSdFunc.
func (mock *StoreMock) GetAttendanceTypesWithSd(ctx context.Context, sd Sd, where parameter.WhereAttendanceTypeParam, order parameter.AttendanceTypeOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.AttendanceType], error) {
	if mock.GetAttendanceTypesWithSdFunc == nil {
		panic("StoreMock.GetAttendanceTypesWithSdFunc: method is nil but Store.GetAttendanceTypesWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereAttendanceTypeParam
		Order parameter.AttendanceTypeOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetAttendanceTypesWithSd.Lock()
	mock.calls.GetAttendanceTypesWithSd = append(mock.calls.GetAttendanceTypesWithSd, callInfo)
	mock.lockGetAttendanceTypesWithSd.Unlock()
	return mock.GetAttendanceTypesWithSdFunc(ctx, sd, where, order, np, cp, wc)
}

// GetAttendanceTypesWithSdCalls gets all the calls that were made to GetAttendanceTypesWithSd.
// Check the length with:
//
//	len(mockedStore.GetAttendanceTypesWithSdCalls())
func (mock *StoreMock) GetAttendanceTypesWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereAttendanceTypeParam
	Order parameter.AttendanceTypeOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereAttendanceTypeParam
		Order parameter.AttendanceTypeOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetAttendanceTypesWithSd.RLock()
	calls = mock.calls.GetAttendanceTypesWithSd
	mock.lockGetAttendanceTypesWithSd.RUnlock()
	return calls
}

// GetChatRoomActionTypes calls GetChatRoomActionTypesFunc.
func (mock *StoreMock) GetChatRoomActionTypes(ctx context.Context, where parameter.WhereChatRoomActionTypeParam, order parameter.ChatRoomActionTypeOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoomActionType], error) {
	if mock.GetChatRoomActionTypesFunc == nil {
		panic("StoreMock.GetChatRoomActionTypesFunc: method is nil but Store.GetChatRoomActionTypes was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereChatRoomActionTypeParam
		Order parameter.ChatRoomActionTypeOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetChatRoomActionTypes.Lock()
	mock.calls.GetChatRoomActionTypes = append(mock.calls.GetChatRoomActionTypes, callInfo)
	mock.lockGetChatRoomActionTypes.Unlock()
	return mock.GetChatRoomActionTypesFunc(ctx, where, order, np, cp, wc)
}

// GetChatRoomActionTypesCalls gets all the calls that were made to GetChatRoomActionTypes.
// Check the length with:
//
//	len(mockedStore.GetChatRoomActionTypesCalls())
func (mock *StoreMock) GetChatRoomActionTypesCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereChatRoomActionTypeParam
	Order parameter.ChatRoomActionTypeOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereChatRoomActionTypeParam
		Order parameter.ChatRoomActionTypeOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetChatRoomActionTypes.RLock()
	calls = mock.calls.GetChatRoomActionTypes
	mock.lockGetChatRoomActionTypes.RUnlock()
	return calls
}

// GetChatRoomActionTypesWithSd calls GetChatRoomActionTypesWithSdFunc.
func (mock *StoreMock) GetChatRoomActionTypesWithSd(ctx context.Context, sd Sd, where parameter.WhereChatRoomActionTypeParam, order parameter.ChatRoomActionTypeOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoomActionType], error) {
	if mock.GetChatRoomActionTypesWithSdFunc == nil {
		panic("StoreMock.GetChatRoomActionTypesWithSdFunc: method is nil but Store.GetChatRoomActionTypesWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereChatRoomActionTypeParam
		Order parameter.ChatRoomActionTypeOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetChatRoomActionTypesWithSd.Lock()
	mock.calls.GetChatRoomActionTypesWithSd = append(mock.calls.GetChatRoomActionTypesWithSd, callInfo)
	mock.lockGetChatRoomActionTypesWithSd.Unlock()
	return mock.GetChatRoomActionTypesWithSdFunc(ctx, sd, where, order, np, cp, wc)
}

// GetChatRoomActionTypesWithSdCalls gets all the calls that were made to GetChatRoomActionTypesWithSd.
// Check the length with:
//
//	len(mockedStore.GetChatRoomActionTypesWithSdCalls())
func (mock *StoreMock) GetChatRoomActionTypesWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereChatRoomActionTypeParam
	Order parameter.ChatRoomActionTypeOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereChatRoomActionTypeParam
		Order parameter.ChatRoomActionTypeOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetChatRoomActionTypesWithSd.RLock()
	calls = mock.calls.GetChatRoomActionTypesWithSd
	mock.lockGetChatRoomActionTypesWithSd.RUnlock()
	return calls
}

// GetChatRoomActionsOnChatRoom calls GetChatRoomActionsOnChatRoomFunc.
func (mock *StoreMock) GetChatRoomActionsOnChatRoom(ctx context.Context, chatRoomID uuid.UUID, where parameter.WhereChatRoomActionParam, order parameter.ChatRoomActionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoomAction], error) {
	if mock.GetChatRoomActionsOnChatRoomFunc == nil {
		panic("StoreMock.GetChatRoomActionsOnChatRoomFunc: method is nil but Store.GetChatRoomActionsOnChatRoom was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ChatRoomID uuid.UUID
		Where      parameter.WhereChatRoomActionParam
		Order      parameter.ChatRoomActionOrderMethod
		Np         NumberedPaginationParam
		Cp         CursorPaginationParam
		Wc         WithCountParam
	}{
		Ctx:        ctx,
		ChatRoomID: chatRoomID,
		Where:      where,
		Order:      order,
		Np:         np,
		Cp:         cp,
		Wc:         wc,
	}
	mock.lockGetChatRoomActionsOnChatRoom.Lock()
	mock.calls.GetChatRoomActionsOnChatRoom = append(mock.calls.GetChatRoomActionsOnChatRoom, callInfo)
	mock.lockGetChatRoomActionsOnChatRoom.Unlock()
	return mock.GetChatRoomActionsOnChatRoomFunc(ctx, chatRoomID, where, order, np, cp, wc)
}

// GetChatRoomActionsOnChatRoomCalls gets all the calls that were made to GetChatRoomActionsOnChatRoom.
// Check the length with:
//
//	len(mockedStore.GetChatRoomActionsOnChatRoomCalls())
func (mock *StoreMock) GetChatRoomActionsOnChatRoomCalls() []struct {
	Ctx        context.Context
	ChatRoomID uuid.UUID
	Where      parameter.WhereChatRoomActionParam
	Order      parameter.ChatRoomActionOrderMethod
	Np         NumberedPaginationParam
	Cp         CursorPaginationParam
	Wc         WithCountParam
} {
	var calls []struct {
		Ctx        context.Context
		ChatRoomID uuid.UUID
		Where      parameter.WhereChatRoomActionParam
		Order      parameter.ChatRoomActionOrderMethod
		Np         NumberedPaginationParam
		Cp         CursorPaginationParam
		Wc         WithCountParam
	}
	mock.lockGetChatRoomActionsOnChatRoom.RLock()
	calls = mock.calls.GetChatRoomActionsOnChatRoom
	mock.lockGetChatRoomActionsOnChatRoom.RUnlock()
	return calls
}

// GetChatRoomActionsOnChatRoomWithSd calls GetChatRoomActionsOnChatRoomWithSdFunc.
func (mock *StoreMock) GetChatRoomActionsOnChatRoomWithSd(ctx context.Context, sd Sd, chatRoomID uuid.UUID, where parameter.WhereChatRoomActionParam, order parameter.ChatRoomActionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoomAction], error) {
	if mock.GetChatRoomActionsOnChatRoomWithSdFunc == nil {
		panic("StoreMock.GetChatRoomActionsOnChatRoomWithSdFunc: method is nil but Store.GetChatRoomActionsOnChatRoomWithSd was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Sd         Sd
		ChatRoomID uuid.UUID
		Where      parameter.WhereChatRoomActionParam
		Order      parameter.ChatRoomActionOrderMethod
		Np         NumberedPaginationParam
		Cp         CursorPaginationParam
		Wc         WithCountParam
	}{
		Ctx:        ctx,
		Sd:         sd,
		ChatRoomID: chatRoomID,
		Where:      where,
		Order:      order,
		Np:         np,
		Cp:         cp,
		Wc:         wc,
	}
	mock.lockGetChatRoomActionsOnChatRoomWithSd.Lock()
	mock.calls.GetChatRoomActionsOnChatRoomWithSd = append(mock.calls.GetChatRoomActionsOnChatRoomWithSd, callInfo)
	mock.lockGetChatRoomActionsOnChatRoomWithSd.Unlock()
	return mock.GetChatRoomActionsOnChatRoomWithSdFunc(ctx, sd, chatRoomID, where, order, np, cp, wc)
}

// GetChatRoomActionsOnChatRoomWithSdCalls gets all the calls that were made to GetChatRoomActionsOnChatRoomWithSd.
// Check the length with:
//
//	len(mockedStore.GetChatRoomActionsOnChatRoomWithSdCalls())
func (mock *StoreMock) GetChatRoomActionsOnChatRoomWithSdCalls() []struct {
	Ctx        context.Context
	Sd         Sd
	ChatRoomID uuid.UUID
	Where      parameter.WhereChatRoomActionParam
	Order      parameter.ChatRoomActionOrderMethod
	Np         NumberedPaginationParam
	Cp         CursorPaginationParam
	Wc         WithCountParam
} {
	var calls []struct {
		Ctx        context.Context
		Sd         Sd
		ChatRoomID uuid.UUID
		Where      parameter.WhereChatRoomActionParam
		Order      parameter.ChatRoomActionOrderMethod
		Np         NumberedPaginationParam
		Cp         CursorPaginationParam
		Wc         WithCountParam
	}
	mock.lockGetChatRoomActionsOnChatRoomWithSd.RLock()
	calls = mock.calls.GetChatRoomActionsOnChatRoomWithSd
	mock.lockGetChatRoomActionsOnChatRoomWithSd.RUnlock()
	return calls
}

// GetChatRoomActionsWithDetailOnChatRoom calls GetChatRoomActionsWithDetailOnChatRoomFunc.
func (mock *StoreMock) GetChatRoomActionsWithDetailOnChatRoom(ctx context.Context, chatRoomID uuid.UUID, where parameter.WhereChatRoomActionParam, order parameter.ChatRoomActionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoomActionWithDetail], error) {
	if mock.GetChatRoomActionsWithDetailOnChatRoomFunc == nil {
		panic("StoreMock.GetChatRoomActionsWithDetailOnChatRoomFunc: method is nil but Store.GetChatRoomActionsWithDetailOnChatRoom was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ChatRoomID uuid.UUID
		Where      parameter.WhereChatRoomActionParam
		Order      parameter.ChatRoomActionOrderMethod
		Np         NumberedPaginationParam
		Cp         CursorPaginationParam
		Wc         WithCountParam
	}{
		Ctx:        ctx,
		ChatRoomID: chatRoomID,
		Where:      where,
		Order:      order,
		Np:         np,
		Cp:         cp,
		Wc:         wc,
	}
	mock.lockGetChatRoomActionsWithDetailOnChatRoom.Lock()
	mock.calls.GetChatRoomActionsWithDetailOnChatRoom = append(mock.calls.GetChatRoomActionsWithDetailOnChatRoom, callInfo)
	mock.lockGetChatRoomActionsWithDetailOnChatRoom.Unlock()
	return mock.GetChatRoomActionsWithDetailOnChatRoomFunc(ctx, chatRoomID, where, order, np, cp, wc)
}

// GetChatRoomActionsWithDetailOnChatRoomCalls gets all the calls that were made to GetChatRoomActionsWithDetailOnChatRoom.
// Check the length with:
//
//	len(mockedStore.GetChatRoomActionsWithDetailOnChatRoomCalls())
func (mock *StoreMock) GetChatRoomActionsWithDetailOnChatRoomCalls() []struct {
	Ctx        context.Context
	ChatRoomID uuid.UUID
	Where      parameter.WhereChatRoomActionParam
	Order      parameter.ChatRoomActionOrderMethod
	Np         NumberedPaginationParam
	Cp         CursorPaginationParam
	Wc         WithCountParam
} {
	var calls []struct {
		Ctx        context.Context
		ChatRoomID uuid.UUID
		Where      parameter.WhereChatRoomActionParam
		Order      parameter.ChatRoomActionOrderMethod
		Np         NumberedPaginationParam
		Cp         CursorPaginationParam
		Wc         WithCountParam
	}
	mock.lockGetChatRoomActionsWithDetailOnChatRoom.RLock()
	calls = mock.calls.GetChatRoomActionsWithDetailOnChatRoom
	mock.lockGetChatRoomActionsWithDetailOnChatRoom.RUnlock()
	return calls
}

// GetChatRoomActionsWithDetailOnChatRoomWithSd calls GetChatRoomActionsWithDetailOnChatRoomWithSdFunc.
func (mock *StoreMock) GetChatRoomActionsWithDetailOnChatRoomWithSd(ctx context.Context, sd Sd, chatRoomID uuid.UUID, where parameter.WhereChatRoomActionParam, order parameter.ChatRoomActionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoomActionWithDetail], error) {
	if mock.GetChatRoomActionsWithDetailOnChatRoomWithSdFunc == nil {
		panic("StoreMock.GetChatRoomActionsWithDetailOnChatRoomWithSdFunc: method is nil but Store.GetChatRoomActionsWithDetailOnChatRoomWithSd was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Sd         Sd
		ChatRoomID uuid.UUID
		Where      parameter.WhereChatRoomActionParam
		Order      parameter.ChatRoomActionOrderMethod
		Np         NumberedPaginationParam
		Cp         CursorPaginationParam
		Wc         WithCountParam
	}{
		Ctx:        ctx,
		Sd:         sd,
		ChatRoomID: chatRoomID,
		Where:      where,
		Order:      order,
		Np:         np,
		Cp:         cp,
		Wc:         wc,
	}
	mock.lockGetChatRoomActionsWithDetailOnChatRoomWithSd.Lock()
	mock.calls.GetChatRoomActionsWithDetailOnChatRoomWithSd = append(mock.calls.GetChatRoomActionsWithDetailOnChatRoomWithSd, callInfo)
	mock.lockGetChatRoomActionsWithDetailOnChatRoomWithSd.Unlock()
	return mock.GetChatRoomActionsWithDetailOnChatRoomWithSdFunc(ctx, sd, chatRoomID, where, order, np, cp, wc)
}

// GetChatRoomActionsWithDetailOnChatRoomWithSdCalls gets all the calls that were made to GetChatRoomActionsWithDetailOnChatRoomWithSd.
// Check the length with:
//
//	len(mockedStore.GetChatRoomActionsWithDetailOnChatRoomWithSdCalls())
func (mock *StoreMock) GetChatRoomActionsWithDetailOnChatRoomWithSdCalls() []struct {
	Ctx        context.Context
	Sd         Sd
	ChatRoomID uuid.UUID
	Where      parameter.WhereChatRoomActionParam
	Order      parameter.ChatRoomActionOrderMethod
	Np         NumberedPaginationParam
	Cp         CursorPaginationParam
	Wc         WithCountParam
} {
	var calls []struct {
		Ctx        context.Context
		Sd         Sd
		ChatRoomID uuid.UUID
		Where      parameter.WhereChatRoomActionParam
		Order      parameter.ChatRoomActionOrderMethod
		Np         NumberedPaginationParam
		Cp         CursorPaginationParam
		Wc         WithCountParam
	}
	mock.lockGetChatRoomActionsWithDetailOnChatRoomWithSd.RLock()
	calls = mock.calls.GetChatRoomActionsWithDetailOnChatRoomWithSd
	mock.lockGetChatRoomActionsWithDetailOnChatRoomWithSd.RUnlock()
	return calls
}

// GetChatRoomAddMemberActionsOnChatRoom calls GetChatRoomAddMemberActionsOnChatRoomFunc.
func (mock *StoreMock) GetChatRoomAddMemberActionsOnChatRoom(ctx context.Context, chatRoomID uuid.UUID, where parameter.WhereChatRoomAddMemberActionParam, order parameter.ChatRoomAddMemberActionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoomAddMemberActionWithAddedBy], error) {
	if mock.GetChatRoomAddMemberActionsOnChatRoomFunc == nil {
		panic("StoreMock.GetChatRoomAddMemberActionsOnChatRoomFunc: method is nil but Store.GetChatRoomAddMemberActionsOnChatRoom was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ChatRoomID uuid.UUID
		Where      parameter.WhereChatRoomAddMemberActionParam
		Order      parameter.ChatRoomAddMemberActionOrderMethod
		Np         NumberedPaginationParam
		Cp         CursorPaginationParam
		Wc         WithCountParam
	}{
		Ctx:        ctx,
		ChatRoomID: chatRoomID,
		Where:      where,
		Order:      order,
		Np:         np,
		Cp:         cp,
		Wc:         wc,
	}
	mock.lockGetChatRoomAddMemberActionsOnChatRoom.Lock()
	mock.calls.GetChatRoomAddMemberActionsOnChatRoom = append(mock.calls.GetChatRoomAddMemberActionsOnChatRoom, callInfo)
	mock.lockGetChatRoomAddMemberActionsOnChatRoom.Unlock()
	return mock.GetChatRoomAddMemberActionsOnChatRoomFunc(ctx, chatRoomID, where, order, np, cp, wc)
}

// GetChatRoomAddMemberActionsOnChatRoomCalls gets all the calls that were made to GetChatRoomAddMemberActionsOnChatRoom.
// Check the length with:
//
//	len(mockedStore.GetChatRoomAddMemberActionsOnChatRoomCalls())
func (mock *StoreMock) GetChatRoomAddMemberActionsOnChatRoomCalls() []struct {
	Ctx        context.Context
	ChatRoomID uuid.UUID
	Where      parameter.WhereChatRoomAddMemberActionParam
	Order      parameter.ChatRoomAddMemberActionOrderMethod
	Np         NumberedPaginationParam
	Cp         CursorPaginationParam
	Wc         WithCountParam
} {
	var calls []struct {
		Ctx        context.Context
		ChatRoomID uuid.UUID
		Where      parameter.WhereChatRoomAddMemberActionParam
		Order      parameter.ChatRoomAddMemberActionOrderMethod
		Np         NumberedPaginationParam
		Cp         CursorPaginationParam
		Wc         WithCountParam
	}
	mock.lockGetChatRoomAddMemberActionsOnChatRoom.RLock()
	calls = mock.calls.GetChatRoomAddMemberActionsOnChatRoom
	mock.lockGetChatRoomAddMemberActionsOnChatRoom.RUnlock()
	return calls
}

// GetChatRoomAddMemberActionsOnChatRoomWithSd calls GetChatRoomAddMemberActionsOnChatRoomWithSdFunc.
func (mock *StoreMock) GetChatRoomAddMemberActionsOnChatRoomWithSd(ctx context.Context, sd Sd, chatRoomID uuid.UUID, where parameter.WhereChatRoomAddMemberActionParam, order parameter.ChatRoomAddMemberActionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoomAddMemberActionWithAddedBy], error) {
	if mock.GetChatRoomAddMemberActionsOnChatRoomWithSdFunc == nil {
		panic("StoreMock.GetChatRoomAddMemberActionsOnChatRoomWithSdFunc: method is nil but Store.GetChatRoomAddMemberActionsOnChatRoomWithSd was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Sd         Sd
		ChatRoomID uuid.UUID
		Where      parameter.WhereChatRoomAddMemberActionParam
		Order      parameter.ChatRoomAddMemberActionOrderMethod
		Np         NumberedPaginationParam
		Cp         CursorPaginationParam
		Wc         WithCountParam
	}{
		Ctx:        ctx,
		Sd:         sd,
		ChatRoomID: chatRoomID,
		Where:      where,
		Order:      order,
		Np:         np,
		Cp:         cp,
		Wc:         wc,
	}
	mock.lockGetChatRoomAddMemberActionsOnChatRoomWithSd.Lock()
	mock.calls.GetChatRoomAddMemberActionsOnChatRoomWithSd = append(mock.calls.GetChatRoomAddMemberActionsOnChatRoomWithSd, callInfo)
	mock.lockGetChatRoomAddMemberActionsOnChatRoomWithSd.Unlock()
	return mock.GetChatRoomAddMemberActionsOnChatRoomWithSdFunc(ctx, sd, chatRoomID, where, order, np, cp, wc)
}

// GetChatRoomAddMemberActionsOnChatRoomWithSdCalls gets all the calls that were made to GetChatRoomAddMemberActionsOnChatRoomWithSd.
// Check the length with:
//
//	len(mockedStore.GetChatRoomAddMemberActionsOnChatRoomWithSdCalls())
func (mock *StoreMock) GetChatRoomAddMemberActionsOnChatRoomWithSdCalls() []struct {
	Ctx        context.Context
	Sd         Sd
	ChatRoomID uuid.UUID
	Where      parameter.WhereChatRoomAddMemberActionParam
	Order      parameter.ChatRoomAddMemberActionOrderMethod
	Np         NumberedPaginationParam
	Cp         CursorPaginationParam
	Wc         WithCountParam
} {
	var calls []struct {
		Ctx        context.Context
		Sd         Sd
		ChatRoomID uuid.UUID
		Where      parameter.WhereChatRoomAddMemberActionParam
		Order      parameter.ChatRoomAddMemberActionOrderMethod
		Np         NumberedPaginationParam
		Cp         CursorPaginationParam
		Wc         WithCountParam
	}
	mock.lockGetChatRoomAddMemberActionsOnChatRoomWithSd.RLock()
	calls = mock.calls.GetChatRoomAddMemberActionsOnChatRoomWithSd
	mock.lockGetChatRoomAddMemberActionsOnChatRoomWithSd.RUnlock()
	return calls
}

// GetChatRoomCreateActionsOnChatRoom calls GetChatRoomCreateActionsOnChatRoomFunc.
func (mock *StoreMock) GetChatRoomCreateActionsOnChatRoom(ctx context.Context, chatRoomID uuid.UUID, where parameter.WhereChatRoomCreateActionParam, order parameter.ChatRoomCreateActionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoomCreateActionWithCreatedBy], error) {
	if mock.GetChatRoomCreateActionsOnChatRoomFunc == nil {
		panic("StoreMock.GetChatRoomCreateActionsOnChatRoomFunc: method is nil but Store.GetChatRoomCreateActionsOnChatRoom was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ChatRoomID uuid.UUID
		Where      parameter.WhereChatRoomCreateActionParam
		Order      parameter.ChatRoomCreateActionOrderMethod
		Np         NumberedPaginationParam
		Cp         CursorPaginationParam
		Wc         WithCountParam
	}{
		Ctx:        ctx,
		ChatRoomID: chatRoomID,
		Where:      where,
		Order:      order,
		Np:         np,
		Cp:         cp,
		Wc:         wc,
	}
	mock.lockGetChatRoomCreateActionsOnChatRoom.Lock()
	mock.calls.GetChatRoomCreateActionsOnChatRoom = append(mock.calls.GetChatRoomCreateActionsOnChatRoom, callInfo)
	mock.lockGetChatRoomCreateActionsOnChatRoom.Unlock()
	return mock.GetChatRoomCreateActionsOnChatRoomFunc(ctx, chatRoomID, where, order, np, cp, wc)
}

// GetChatRoomCreateActionsOnChatRoomCalls gets all the calls that were made to GetChatRoomCreateActionsOnChatRoom.
// Check the length with:
//
//	len(mockedStore.GetChatRoomCreateActionsOnChatRoomCalls())
func (mock *StoreMock) GetChatRoomCreateActionsOnChatRoomCalls() []struct {
	Ctx        context.Context
	ChatRoomID uuid.UUID
	Where      parameter.WhereChatRoomCreateActionParam
	Order      parameter.ChatRoomCreateActionOrderMethod
	Np         NumberedPaginationParam
	Cp         CursorPaginationParam
	Wc         WithCountParam
} {
	var calls []struct {
		Ctx        context.Context
		ChatRoomID uuid.UUID
		Where      parameter.WhereChatRoomCreateActionParam
		Order      parameter.ChatRoomCreateActionOrderMethod
		Np         NumberedPaginationParam
		Cp         CursorPaginationParam
		Wc         WithCountParam
	}
	mock.lockGetChatRoomCreateActionsOnChatRoom.RLock()
	calls = mock.calls.GetChatRoomCreateActionsOnChatRoom
	mock.lockGetChatRoomCreateActionsOnChatRoom.RUnlock()
	return calls
}

// GetChatRoomCreateActionsOnChatRoomWithSd calls GetChatRoomCreateActionsOnChatRoomWithSdFunc.
func (mock *StoreMock) GetChatRoomCreateActionsOnChatRoomWithSd(ctx context.Context, sd Sd, chatRoomID uuid.UUID, where parameter.WhereChatRoomCreateActionParam, order parameter.ChatRoomCreateActionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoomCreateActionWithCreatedBy], error) {
	if mock.GetChatRoomCreateActionsOnChatRoomWithSdFunc == nil {
		panic("StoreMock.GetChatRoomCreateActionsOnChatRoomWithSdFunc: method is nil but Store.GetChatRoomCreateActionsOnChatRoomWithSd was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Sd         Sd
		ChatRoomID uuid.UUID
		Where      parameter.WhereChatRoomCreateActionParam
		Order      parameter.ChatRoomCreateActionOrderMethod
		Np         NumberedPaginationParam
		Cp         CursorPaginationParam
		Wc         WithCountParam
	}{
		Ctx:        ctx,
		Sd:         sd,
		ChatRoomID: chatRoomID,
		Where:      where,
		Order:      order,
		Np:         np,
		Cp:         cp,
		Wc:         wc,
	}
	mock.lockGetChatRoomCreateActionsOnChatRoomWithSd.Lock()
	mock.calls.GetChatRoomCreateActionsOnChatRoomWithSd = append(mock.calls.GetChatRoomCreateActionsOnChatRoomWithSd, callInfo)
	mock.lockGetChatRoomCreateActionsOnChatRoomWithSd.Unlock()
	return mock.GetChatRoomCreateActionsOnChatRoomWithSdFunc(ctx, sd, chatRoomID, where, order, np, cp, wc)
}

// GetChatRoomCreateActionsOnChatRoomWithSdCalls gets all the calls that were made to GetChatRoomCreateActionsOnChatRoomWithSd.
// Check the length with:
//
//	len(mockedStore.GetChatRoomCreateActionsOnChatRoomWithSdCalls())
func (mock *StoreMock) GetChatRoomCreateActionsOnChatRoomWithSdCalls() []struct {
	Ctx        context.Context
	Sd         Sd
	ChatRoomID uuid.UUID
	Where      parameter.WhereChatRoomCreateActionParam
	Order      parameter.ChatRoomCreateActionOrderMethod
	Np         NumberedPaginationParam
	Cp         CursorPaginationParam
	Wc         WithCountParam
} {
	var calls []struct {
		Ctx        context.Context
		Sd         Sd
		ChatRoomID uuid.UUID
		Where      parameter.WhereChatRoomCreateActionParam
		Order      parameter.ChatRoomCreateActionOrderMethod
		Np         NumberedPaginationParam
		Cp         CursorPaginationParam
		Wc         WithCountParam
	}
	mock.lockGetChatRoomCreateActionsOnChatRoomWithSd.RLock()
	calls = mock.calls.GetChatRoomCreateActionsOnChatRoomWithSd
	mock.lockGetChatRoomCreateActionsOnChatRoomWithSd.RUnlock()
	return calls
}

// GetChatRoomDeleteMessageActionsOnChatRoom calls GetChatRoomDeleteMessageActionsOnChatRoomFunc.
func (mock *StoreMock) GetChatRoomDeleteMessageActionsOnChatRoom(ctx context.Context, chatRoomID uuid.UUID, where parameter.WhereChatRoomDeleteMessageActionParam, order parameter.ChatRoomDeleteMessageActionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoomDeleteMessageActionWithDeletedBy], error) {
	if mock.GetChatRoomDeleteMessageActionsOnChatRoomFunc == nil {
		panic("StoreMock.GetChatRoomDeleteMessageActionsOnChatRoomFunc: method is nil but Store.GetChatRoomDeleteMessageActionsOnChatRoom was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ChatRoomID uuid.UUID
		Where      parameter.WhereChatRoomDeleteMessageActionParam
		Order      parameter.ChatRoomDeleteMessageActionOrderMethod
		Np         NumberedPaginationParam
		Cp         CursorPaginationParam
		Wc         WithCountParam
	}{
		Ctx:        ctx,
		ChatRoomID: chatRoomID,
		Where:      where,
		Order:      order,
		Np:         np,
		Cp:         cp,
		Wc:         wc,
	}
	mock.lockGetChatRoomDeleteMessageActionsOnChatRoom.Lock()
	mock.calls.GetChatRoomDeleteMessageActionsOnChatRoom = append(mock.calls.GetChatRoomDeleteMessageActionsOnChatRoom, callInfo)
	mock.lockGetChatRoomDeleteMessageActionsOnChatRoom.Unlock()
	return mock.GetChatRoomDeleteMessageActionsOnChatRoomFunc(ctx, chatRoomID, where, order, np, cp, wc)
}

// GetChatRoomDeleteMessageActionsOnChatRoomCalls gets all the calls that were made to GetChatRoomDeleteMessageActionsOnChatRoom.
// Check the length with:
//
//	len(mockedStore.GetChatRoomDeleteMessageActionsOnChatRoomCalls())
func (mock *StoreMock) GetChatRoomDeleteMessageActionsOnChatRoomCalls() []struct {
	Ctx        context.Context
	ChatRoomID uuid.UUID
	Where      parameter.WhereChatRoomDeleteMessageActionParam
	Order      parameter.ChatRoomDeleteMessageActionOrderMethod
	Np         NumberedPaginationParam
	Cp         CursorPaginationParam
	Wc         WithCountParam
} {
	var calls []struct {
		Ctx        context.Context
		ChatRoomID uuid.UUID
		Where      parameter.WhereChatRoomDeleteMessageActionParam
		Order      parameter.ChatRoomDeleteMessageActionOrderMethod
		Np         NumberedPaginationParam
		Cp         CursorPaginationParam
		Wc         WithCountParam
	}
	mock.lockGetChatRoomDeleteMessageActionsOnChatRoom.RLock()
	calls = mock.calls.GetChatRoomDeleteMessageActionsOnChatRoom
	mock.lockGetChatRoomDeleteMessageActionsOnChatRoom.RUnlock()
	return calls
}

// GetChatRoomDeleteMessageActionsOnChatRoomWithSd calls GetChatRoomDeleteMessageActionsOnChatRoomWithSdFunc.
func (mock *StoreMock) GetChatRoomDeleteMessageActionsOnChatRoomWithSd(ctx context.Context, sd Sd, chatRoomID uuid.UUID, where parameter.WhereChatRoomDeleteMessageActionParam, order parameter.ChatRoomDeleteMessageActionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoomDeleteMessageActionWithDeletedBy], error) {
	if mock.GetChatRoomDeleteMessageActionsOnChatRoomWithSdFunc == nil {
		panic("StoreMock.GetChatRoomDeleteMessageActionsOnChatRoomWithSdFunc: method is nil but Store.GetChatRoomDeleteMessageActionsOnChatRoomWithSd was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Sd         Sd
		ChatRoomID uuid.UUID
		Where      parameter.WhereChatRoomDeleteMessageActionParam
		Order      parameter.ChatRoomDeleteMessageActionOrderMethod
		Np         NumberedPaginationParam
		Cp         CursorPaginationParam
		Wc         WithCountParam
	}{
		Ctx:        ctx,
		Sd:         sd,
		ChatRoomID: chatRoomID,
		Where:      where,
		Order:      order,
		Np:         np,
		Cp:         cp,
		Wc:         wc,
	}
	mock.lockGetChatRoomDeleteMessageActionsOnChatRoomWithSd.Lock()
	mock.calls.GetChatRoomDeleteMessageActionsOnChatRoomWithSd = append(mock.calls.GetChatRoomDeleteMessageActionsOnChatRoomWithSd, callInfo)
	mock.lockGetChatRoomDeleteMessageActionsOnChatRoomWithSd.Unlock()
	return mock.GetChatRoomDeleteMessageActionsOnChatRoomWithSdFunc(ctx, sd, chatRoomID, where, order, np, cp, wc)
}

// GetChatRoomDeleteMessageActionsOnChatRoomWithSdCalls gets all the calls that were made to GetChatRoomDeleteMessageActionsOnChatRoomWithSd.
// Check the length with:
//
//	len(mockedStore.GetChatRoomDeleteMessageActionsOnChatRoomWithSdCalls())
func (mock *StoreMock) GetChatRoomDeleteMessageActionsOnChatRoomWithSdCalls() []struct {
	Ctx        context.Context
	Sd         Sd
	ChatRoomID uuid.UUID
	Where      parameter.WhereChatRoomDeleteMessageActionParam
	Order      parameter.ChatRoomDeleteMessageActionOrderMethod
	Np         NumberedPaginationParam
	Cp         CursorPaginationParam
	Wc         WithCountParam
} {
	var calls []struct {
		Ctx        context.Context
		Sd         Sd
		ChatRoomID uuid.UUID
		Where      parameter.WhereChatRoomDeleteMessageActionParam
		Order      parameter.ChatRoomDeleteMessageActionOrderMethod
		Np         NumberedPaginationParam
		Cp         CursorPaginationParam
		Wc         WithCountParam
	}
	mock.lockGetChatRoomDeleteMessageActionsOnChatRoomWithSd.RLock()
	calls = mock.calls.GetChatRoomDeleteMessageActionsOnChatRoomWithSd
	mock.lockGetChatRoomDeleteMessageActionsOnChatRoomWithSd.RUnlock()
	return calls
}

// GetChatRoomRemoveMemberActionsOnChatRoom calls GetChatRoomRemoveMemberActionsOnChatRoomFunc.
func (mock *StoreMock) GetChatRoomRemoveMemberActionsOnChatRoom(ctx context.Context, chatRoomID uuid.UUID, where parameter.WhereChatRoomRemoveMemberActionParam, order parameter.ChatRoomRemoveMemberActionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoomRemoveMemberActionWithRemovedBy], error) {
	if mock.GetChatRoomRemoveMemberActionsOnChatRoomFunc == nil {
		panic("StoreMock.GetChatRoomRemoveMemberActionsOnChatRoomFunc: method is nil but Store.GetChatRoomRemoveMemberActionsOnChatRoom was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ChatRoomID uuid.UUID
		Where      parameter.WhereChatRoomRemoveMemberActionParam
		Order      parameter.ChatRoomRemoveMemberActionOrderMethod
		Np         NumberedPaginationParam
		Cp         CursorPaginationParam
		Wc         WithCountParam
	}{
		Ctx:        ctx,
		ChatRoomID: chatRoomID,
		Where:      where,
		Order:      order,
		Np:         np,
		Cp:         cp,
		Wc:         wc,
	}
	mock.lockGetChatRoomRemoveMemberActionsOnChatRoom.Lock()
	mock.calls.GetChatRoomRemoveMemberActionsOnChatRoom = append(mock.calls.GetChatRoomRemoveMemberActionsOnChatRoom, callInfo)
	mock.lockGetChatRoomRemoveMemberActionsOnChatRoom.Unlock()
	return mock.GetChatRoomRemoveMemberActionsOnChatRoomFunc(ctx, chatRoomID, where, order, np, cp, wc)
}

// GetChatRoomRemoveMemberActionsOnChatRoomCalls gets all the calls that were made to GetChatRoomRemoveMemberActionsOnChatRoom.
// Check the length with:
//
//	len(mockedStore.GetChatRoomRemoveMemberActionsOnChatRoomCalls())
func (mock *StoreMock) GetChatRoomRemoveMemberActionsOnChatRoomCalls() []struct {
	Ctx        context.Context
	ChatRoomID uuid.UUID
	Where      parameter.WhereChatRoomRemoveMemberActionParam
	Order      parameter.ChatRoomRemoveMemberActionOrderMethod
	Np         NumberedPaginationParam
	Cp         CursorPaginationParam
	Wc         WithCountParam
} {
	var calls []struct {
		Ctx        context.Context
		ChatRoomID uuid.UUID
		Where      parameter.WhereChatRoomRemoveMemberActionParam
		Order      parameter.ChatRoomRemoveMemberActionOrderMethod
		Np         NumberedPaginationParam
		Cp         CursorPaginationParam
		Wc         WithCountParam
	}
	mock.lockGetChatRoomRemoveMemberActionsOnChatRoom.RLock()
	calls = mock.calls.GetChatRoomRemoveMemberActionsOnChatRoom
	mock.lockGetChatRoomRemoveMemberActionsOnChatRoom.RUnlock()
	return calls
}

// GetChatRoomRemoveMemberActionsOnChatRoomWithSd calls GetChatRoomRemoveMemberActionsOnChatRoomWithSdFunc.
func (mock *StoreMock) GetChatRoomRemoveMemberActionsOnChatRoomWithSd(ctx context.Context, sd Sd, chatRoomID uuid.UUID, where parameter.WhereChatRoomRemoveMemberActionParam, order parameter.ChatRoomRemoveMemberActionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoomRemoveMemberActionWithRemovedBy], error) {
	if mock.GetChatRoomRemoveMemberActionsOnChatRoomWithSdFunc == nil {
		panic("StoreMock.GetChatRoomRemoveMemberActionsOnChatRoomWithSdFunc: method is nil but Store.GetChatRoomRemoveMemberActionsOnChatRoomWithSd was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Sd         Sd
		ChatRoomID uuid.UUID
		Where      parameter.WhereChatRoomRemoveMemberActionParam
		Order      parameter.ChatRoomRemoveMemberActionOrderMethod
		Np         NumberedPaginationParam
		Cp         CursorPaginationParam
		Wc         WithCountParam
	}{
		Ctx:        ctx,
		Sd:         sd,
		ChatRoomID: chatRoomID,
		Where:      where,
		Order:      order,
		Np:         np,
		Cp:         cp,
		Wc:         wc,
	}
	mock.lockGetChatRoomRemoveMemberActionsOnChatRoomWithSd.Lock()
	mock.calls.GetChatRoomRemoveMemberActionsOnChatRoomWithSd = append(mock.calls.GetChatRoomRemoveMemberActionsOnChatRoomWithSd, callInfo)
	mock.lockGetChatRoomRemoveMemberActionsOnChatRoomWithSd.Unlock()
	return mock.GetChatRoomRemoveMemberActionsOnChatRoomWithSdFunc(ctx, sd, chatRoomID, where, order, np, cp, wc)
}

// GetChatRoomRemoveMemberActionsOnChatRoomWithSdCalls gets all the calls that were made to GetChatRoomRemoveMemberActionsOnChatRoomWithSd.
// Check the length with:
//
//	len(mockedStore.GetChatRoomRemoveMemberActionsOnChatRoomWithSdCalls())
func (mock *StoreMock) GetChatRoomRemoveMemberActionsOnChatRoomWithSdCalls() []struct {
	Ctx        context.Context
	Sd         Sd
	ChatRoomID uuid.UUID
	Where      parameter.WhereChatRoomRemoveMemberActionParam
	Order      parameter.ChatRoomRemoveMemberActionOrderMethod
	Np         NumberedPaginationParam
	Cp         CursorPaginationParam
	Wc         WithCountParam
} {
	var calls []struct {
		Ctx        context.Context
		Sd         Sd
		ChatRoomID uuid.UUID
		Where      parameter.WhereChatRoomRemoveMemberActionParam
		Order      parameter.ChatRoomRemoveMemberActionOrderMethod
		Np         NumberedPaginationParam
		Cp         CursorPaginationParam
		Wc         WithCountParam
	}
	mock.lockGetChatRoomRemoveMemberActionsOnChatRoomWithSd.RLock()
	calls = mock.calls.GetChatRoomRemoveMemberActionsOnChatRoomWithSd
	mock.lockGetChatRoomRemoveMemberActionsOnChatRoomWithSd.RUnlock()
	return calls
}

// GetChatRoomUpdateNameActionsOnChatRoom calls GetChatRoomUpdateNameActionsOnChatRoomFunc.
func (mock *StoreMock) GetChatRoomUpdateNameActionsOnChatRoom(ctx context.Context, chatRoomID uuid.UUID, where parameter.WhereChatRoomUpdateNameActionParam, order parameter.ChatRoomUpdateNameActionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoomUpdateNameActionWithUpdatedBy], error) {
	if mock.GetChatRoomUpdateNameActionsOnChatRoomFunc == nil {
		panic("StoreMock.GetChatRoomUpdateNameActionsOnChatRoomFunc: method is nil but Store.GetChatRoomUpdateNameActionsOnChatRoom was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ChatRoomID uuid.UUID
		Where      parameter.WhereChatRoomUpdateNameActionParam
		Order      parameter.ChatRoomUpdateNameActionOrderMethod
		Np         NumberedPaginationParam
		Cp         CursorPaginationParam
		Wc         WithCountParam
	}{
		Ctx:        ctx,
		ChatRoomID: chatRoomID,
		Where:      where,
		Order:      order,
		Np:         np,
		Cp:         cp,
		Wc:         wc,
	}
	mock.lockGetChatRoomUpdateNameActionsOnChatRoom.Lock()
	mock.calls.GetChatRoomUpdateNameActionsOnChatRoom = append(mock.calls.GetChatRoomUpdateNameActionsOnChatRoom, callInfo)
	mock.lockGetChatRoomUpdateNameActionsOnChatRoom.Unlock()
	return mock.GetChatRoomUpdateNameActionsOnChatRoomFunc(ctx, chatRoomID, where, order, np, cp, wc)
}

// GetChatRoomUpdateNameActionsOnChatRoomCalls gets all the calls that were made to GetChatRoomUpdateNameActionsOnChatRoom.
// Check the length with:
//
//	len(mockedStore.GetChatRoomUpdateNameActionsOnChatRoomCalls())
func (mock *StoreMock) GetChatRoomUpdateNameActionsOnChatRoomCalls() []struct {
	Ctx        context.Context
	ChatRoomID uuid.UUID
	Where      parameter.WhereChatRoomUpdateNameActionParam
	Order      parameter.ChatRoomUpdateNameActionOrderMethod
	Np         NumberedPaginationParam
	Cp         CursorPaginationParam
	Wc         WithCountParam
} {
	var calls []struct {
		Ctx        context.Context
		ChatRoomID uuid.UUID
		Where      parameter.WhereChatRoomUpdateNameActionParam
		Order      parameter.ChatRoomUpdateNameActionOrderMethod
		Np         NumberedPaginationParam
		Cp         CursorPaginationParam
		Wc         WithCountParam
	}
	mock.lockGetChatRoomUpdateNameActionsOnChatRoom.RLock()
	calls = mock.calls.GetChatRoomUpdateNameActionsOnChatRoom
	mock.lockGetChatRoomUpdateNameActionsOnChatRoom.RUnlock()
	return calls
}

// GetChatRoomUpdateNameActionsOnChatRoomWithSd calls GetChatRoomUpdateNameActionsOnChatRoomWithSdFunc.
func (mock *StoreMock) GetChatRoomUpdateNameActionsOnChatRoomWithSd(ctx context.Context, sd Sd, chatRoomID uuid.UUID, where parameter.WhereChatRoomUpdateNameActionParam, order parameter.ChatRoomUpdateNameActionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoomUpdateNameActionWithUpdatedBy], error) {
	if mock.GetChatRoomUpdateNameActionsOnChatRoomWithSdFunc == nil {
		panic("StoreMock.GetChatRoomUpdateNameActionsOnChatRoomWithSdFunc: method is nil but Store.GetChatRoomUpdateNameActionsOnChatRoomWithSd was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Sd         Sd
		ChatRoomID uuid.UUID
		Where      parameter.WhereChatRoomUpdateNameActionParam
		Order      parameter.ChatRoomUpdateNameActionOrderMethod
		Np         NumberedPaginationParam
		Cp         CursorPaginationParam
		Wc         WithCountParam
	}{
		Ctx:        ctx,
		Sd:         sd,
		ChatRoomID: chatRoomID,
		Where:      where,
		Order:      order,
		Np:         np,
		Cp:         cp,
		Wc:         wc,
	}
	mock.lockGetChatRoomUpdateNameActionsOnChatRoomWithSd.Lock()
	mock.calls.GetChatRoomUpdateNameActionsOnChatRoomWithSd = append(mock.calls.GetChatRoomUpdateNameActionsOnChatRoomWithSd, callInfo)
	mock.lockGetChatRoomUpdateNameActionsOnChatRoomWithSd.Unlock()
	return mock.GetChatRoomUpdateNameActionsOnChatRoomWithSdFunc(ctx, sd, chatRoomID, where, order, np, cp, wc)
}

// GetChatRoomUpdateNameActionsOnChatRoomWithSdCalls gets all the calls that were made to GetChatRoomUpdateNameActionsOnChatRoomWithSd.
// Check the length with:
//
//	len(mockedStore.GetChatRoomUpdateNameActionsOnChatRoomWithSdCalls())
func (mock *StoreMock) GetChatRoomUpdateNameActionsOnChatRoomWithSdCalls() []struct {
	Ctx        context.Context
	Sd         Sd
	ChatRoomID uuid.UUID
	Where      parameter.WhereChatRoomUpdateNameActionParam
	Order      parameter.ChatRoomUpdateNameActionOrderMethod
	Np         NumberedPaginationParam
	Cp         CursorPaginationParam
	Wc         WithCountParam
} {
	var calls []struct {
		Ctx        context.Context
		Sd         Sd
		ChatRoomID uuid.UUID
		Where      parameter.WhereChatRoomUpdateNameActionParam
		Order      parameter.ChatRoomUpdateNameActionOrderMethod
		Np         NumberedPaginationParam
		Cp         CursorPaginationParam
		Wc         WithCountParam
	}
	mock.lockGetChatRoomUpdateNameActionsOnChatRoomWithSd.RLock()
	calls = mock.calls.GetChatRoomUpdateNameActionsOnChatRoomWithSd
	mock.lockGetChatRoomUpdateNameActionsOnChatRoomWithSd.RUnlock()
	return calls
}

// GetChatRoomWithdrawActionsOnChatRoom calls GetChatRoomWithdrawActionsOnChatRoomFunc.
func (mock *StoreMock) GetChatRoomWithdrawActionsOnChatRoom(ctx context.Context, chatRoomID uuid.UUID, where parameter.WhereChatRoomWithdrawActionParam, order parameter.ChatRoomWithdrawActionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoomWithdrawActionWithMember], error) {
	if mock.GetChatRoomWithdrawActionsOnChatRoomFunc == nil {
		panic("StoreMock.GetChatRoomWithdrawActionsOnChatRoomFunc: method is nil but Store.GetChatRoomWithdrawActionsOnChatRoom was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ChatRoomID uuid.UUID
		Where      parameter.WhereChatRoomWithdrawActionParam
		Order      parameter.ChatRoomWithdrawActionOrderMethod
		Np         NumberedPaginationParam
		Cp         CursorPaginationParam
		Wc         WithCountParam
	}{
		Ctx:        ctx,
		ChatRoomID: chatRoomID,
		Where:      where,
		Order:      order,
		Np:         np,
		Cp:         cp,
		Wc:         wc,
	}
	mock.lockGetChatRoomWithdrawActionsOnChatRoom.Lock()
	mock.calls.GetChatRoomWithdrawActionsOnChatRoom = append(mock.calls.GetChatRoomWithdrawActionsOnChatRoom, callInfo)
	mock.lockGetChatRoomWithdrawActionsOnChatRoom.Unlock()
	return mock.GetChatRoomWithdrawActionsOnChatRoomFunc(ctx, chatRoomID, where, order, np, cp, wc)
}

// GetChatRoomWithdrawActionsOnChatRoomCalls gets all the calls that were made to GetChatRoomWithdrawActionsOnChatRoom.
// Check the length with:
//
//	len(mockedStore.GetChatRoomWithdrawActionsOnChatRoomCalls())
func (mock *StoreMock) GetChatRoomWithdrawActionsOnChatRoomCalls() []struct {
	Ctx        context.Context
	ChatRoomID uuid.UUID
	Where      parameter.WhereChatRoomWithdrawActionParam
	Order      parameter.ChatRoomWithdrawActionOrderMethod
	Np         NumberedPaginationParam
	Cp         CursorPaginationParam
	Wc         WithCountParam
} {
	var calls []struct {
		Ctx        context.Context
		ChatRoomID uuid.UUID
		Where      parameter.WhereChatRoomWithdrawActionParam
		Order      parameter.ChatRoomWithdrawActionOrderMethod
		Np         NumberedPaginationParam
		Cp         CursorPaginationParam
		Wc         WithCountParam
	}
	mock.lockGetChatRoomWithdrawActionsOnChatRoom.RLock()
	calls = mock.calls.GetChatRoomWithdrawActionsOnChatRoom
	mock.lockGetChatRoomWithdrawActionsOnChatRoom.RUnlock()
	return calls
}

// GetChatRoomWithdrawActionsOnChatRoomWithSd calls GetChatRoomWithdrawActionsOnChatRoomWithSdFunc.
func (mock *StoreMock) GetChatRoomWithdrawActionsOnChatRoomWithSd(ctx context.Context, sd Sd, chatRoomID uuid.UUID, where parameter.WhereChatRoomWithdrawActionParam, order parameter.ChatRoomWithdrawActionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoomWithdrawActionWithMember], error) {
	if mock.GetChatRoomWithdrawActionsOnChatRoomWithSdFunc == nil {
		panic("StoreMock.GetChatRoomWithdrawActionsOnChatRoomWithSdFunc: method is nil but Store.GetChatRoomWithdrawActionsOnChatRoomWithSd was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Sd         Sd
		ChatRoomID uuid.UUID
		Where      parameter.WhereChatRoomWithdrawActionParam
		Order      parameter.ChatRoomWithdrawActionOrderMethod
		Np         NumberedPaginationParam
		Cp         CursorPaginationParam
		Wc         WithCountParam
	}{
		Ctx:        ctx,
		Sd:         sd,
		ChatRoomID: chatRoomID,
		Where:      where,
		Order:      order,
		Np:         np,
		Cp:         cp,
		Wc:         wc,
	}
	mock.lockGetChatRoomWithdrawActionsOnChatRoomWithSd.Lock()
	mock.calls.GetChatRoomWithdrawActionsOnChatRoomWithSd = append(mock.calls.GetChatRoomWithdrawActionsOnChatRoomWithSd, callInfo)
	mock.lockGetChatRoomWithdrawActionsOnChatRoomWithSd.Unlock()
	return mock.GetChatRoomWithdrawActionsOnChatRoomWithSdFunc(ctx, sd, chatRoomID, where, order, np, cp, wc)
}

// GetChatRoomWithdrawActionsOnChatRoomWithSdCalls gets all the calls that were made to GetChatRoomWithdrawActionsOnChatRoomWithSd.
// Check the length with:
//
//	len(mockedStore.GetChatRoomWithdrawActionsOnChatRoomWithSdCalls())
func (mock *StoreMock) GetChatRoomWithdrawActionsOnChatRoomWithSdCalls() []struct {
	Ctx        context.Context
	Sd         Sd
	ChatRoomID uuid.UUID
	Where      parameter.WhereChatRoomWithdrawActionParam
	Order      parameter.ChatRoomWithdrawActionOrderMethod
	Np         NumberedPaginationParam
	Cp         CursorPaginationParam
	Wc         WithCountParam
} {
	var calls []struct {
		Ctx        context.Context
		Sd         Sd
		ChatRoomID uuid.UUID
		Where      parameter.WhereChatRoomWithdrawActionParam
		Order      parameter.ChatRoomWithdrawActionOrderMethod
		Np         NumberedPaginationParam
		Cp         CursorPaginationParam
		Wc         WithCountParam
	}
	mock.lockGetChatRoomWithdrawActionsOnChatRoomWithSd.RLock()
	calls = mock.calls.GetChatRoomWithdrawActionsOnChatRoomWithSd
	mock.lockGetChatRoomWithdrawActionsOnChatRoomWithSd.RUnlock()
	return calls
}

// GetChatRooms calls GetChatRoomsFunc.
func (mock *StoreMock) GetChatRooms(ctx context.Context, where parameter.WhereChatRoomParam, order parameter.ChatRoomOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoom], error) {
	if mock.GetChatRoomsFunc == nil {
		panic("StoreMock.GetChatRoomsFunc: method is nil but Store.GetChatRooms was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereChatRoomParam
		Order parameter.ChatRoomOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetChatRooms.Lock()
	mock.calls.GetChatRooms = append(mock.calls.GetChatRooms, callInfo)
	mock.lockGetChatRooms.Unlock()
	return mock.GetChatRoomsFunc(ctx, where, order, np, cp, wc)
}

// GetChatRoomsCalls gets all the calls that were made to GetChatRooms.
// Check the length with:
//
//	len(mockedStore.GetChatRoomsCalls())
func (mock *StoreMock) GetChatRoomsCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereChatRoomParam
	Order parameter.ChatRoomOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereChatRoomParam
		Order parameter.ChatRoomOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetChatRooms.RLock()
	calls = mock.calls.GetChatRooms
	mock.lockGetChatRooms.RUnlock()
	return calls
}

// GetChatRoomsOnMember calls GetChatRoomsOnMemberFunc.
func (mock *StoreMock) GetChatRoomsOnMember(ctx context.Context, memberID uuid.UUID, where parameter.WhereChatRoomOnMemberParam, order parameter.ChatRoomOnMemberOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoomOnMember], error) {
	if mock.GetChatRoomsOnMemberFunc == nil {
		panic("StoreMock.GetChatRoomsOnMemberFunc: method is nil but Store.GetChatRoomsOnMember was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		MemberID uuid.UUID
		Where    parameter.WhereChatRoomOnMemberParam
		Order    parameter.ChatRoomOnMemberOrderMethod
		Np       NumberedPaginationParam
		Cp       CursorPaginationParam
		Wc       WithCountParam
	}{
		Ctx:      ctx,
		MemberID: memberID,
		Where:    where,
		Order:    order,
		Np:       np,
		Cp:       cp,
		Wc:       wc,
	}
	mock.lockGetChatRoomsOnMember.Lock()
	mock.calls.GetChatRoomsOnMember = append(mock.calls.GetChatRoomsOnMember, callInfo)
	mock.lockGetChatRoomsOnMember.Unlock()
	return mock.GetChatRoomsOnMemberFunc(ctx, memberID, where, order, np, cp, wc)
}

// GetChatRoomsOnMemberCalls gets all the calls that were made to GetChatRoomsOnMember.
// Check the length with:
//
//	len(mockedStore.GetChatRoomsOnMemberCalls())
func (mock *StoreMock) GetChatRoomsOnMemberCalls() []struct {
	Ctx      context.Context
	MemberID uuid.UUID
	Where    parameter.WhereChatRoomOnMemberParam
	Order    parameter.ChatRoomOnMemberOrderMethod
	Np       NumberedPaginationParam
	Cp       CursorPaginationParam
	Wc       WithCountParam
} {
	var calls []struct {
		Ctx      context.Context
		MemberID uuid.UUID
		Where    parameter.WhereChatRoomOnMemberParam
		Order    parameter.ChatRoomOnMemberOrderMethod
		Np       NumberedPaginationParam
		Cp       CursorPaginationParam
		Wc       WithCountParam
	}
	mock.lockGetChatRoomsOnMember.RLock()
	calls = mock.calls.GetChatRoomsOnMember
	mock.lockGetChatRoomsOnMember.RUnlock()
	return calls
}

// GetChatRoomsOnMemberWithSd calls GetChatRoomsOnMemberWithSdFunc.
func (mock *StoreMock) GetChatRoomsOnMemberWithSd(ctx context.Context, sd Sd, memberID uuid.UUID, where parameter.WhereChatRoomOnMemberParam, order parameter.ChatRoomOnMemberOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoomOnMember], error) {
	if mock.GetChatRoomsOnMemberWithSdFunc == nil {
		panic("StoreMock.GetChatRoomsOnMemberWithSdFunc: method is nil but Store.GetChatRoomsOnMemberWithSd was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Sd       Sd
		MemberID uuid.UUID
		Where    parameter.WhereChatRoomOnMemberParam
		Order    parameter.ChatRoomOnMemberOrderMethod
		Np       NumberedPaginationParam
		Cp       CursorPaginationParam
		Wc       WithCountParam
	}{
		Ctx:      ctx,
		Sd:       sd,
		MemberID: memberID,
		Where:    where,
		Order:    order,
		Np:       np,
		Cp:       cp,
		Wc:       wc,
	}
	mock.lockGetChatRoomsOnMemberWithSd.Lock()
	mock.calls.GetChatRoomsOnMemberWithSd = append(mock.calls.GetChatRoomsOnMemberWithSd, callInfo)
	mock.lockGetChatRoomsOnMemberWithSd.Unlock()
	return mock.GetChatRoomsOnMemberWithSdFunc(ctx, sd, memberID, where, order, np, cp, wc)
}

// GetChatRoomsOnMemberWithSdCalls gets all the calls that were made to GetChatRoomsOnMemberWithSd.
// Check the length with:
//
//	len(mockedStore.GetChatRoomsOnMemberWithSdCalls())
func (mock *StoreMock) GetChatRoomsOnMemberWithSdCalls() []struct {
	Ctx      context.Context
	Sd       Sd
	MemberID uuid.UUID
	Where    parameter.WhereChatRoomOnMemberParam
	Order    parameter.ChatRoomOnMemberOrderMethod
	Np       NumberedPaginationParam
	Cp       CursorPaginationParam
	Wc       WithCountParam
} {
	var calls []struct {
		Ctx      context.Context
		Sd       Sd
		MemberID uuid.UUID
		Where    parameter.WhereChatRoomOnMemberParam
		Order    parameter.ChatRoomOnMemberOrderMethod
		Np       NumberedPaginationParam
		Cp       CursorPaginationParam
		Wc       WithCountParam
	}
	mock.lockGetChatRoomsOnMemberWithSd.RLock()
	calls = mock.calls.GetChatRoomsOnMemberWithSd
	mock.lockGetChatRoomsOnMemberWithSd.RUnlock()
	return calls
}

// GetChatRoomsWithCoverImage calls GetChatRoomsWithCoverImageFunc.
func (mock *StoreMock) GetChatRoomsWithCoverImage(ctx context.Context, where parameter.WhereChatRoomParam, order parameter.ChatRoomOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoomWithCoverImage], error) {
	if mock.GetChatRoomsWithCoverImageFunc == nil {
		panic("StoreMock.GetChatRoomsWithCoverImageFunc: method is nil but Store.GetChatRoomsWithCoverImage was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereChatRoomParam
		Order parameter.ChatRoomOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetChatRoomsWithCoverImage.Lock()
	mock.calls.GetChatRoomsWithCoverImage = append(mock.calls.GetChatRoomsWithCoverImage, callInfo)
	mock.lockGetChatRoomsWithCoverImage.Unlock()
	return mock.GetChatRoomsWithCoverImageFunc(ctx, where, order, np, cp, wc)
}

// GetChatRoomsWithCoverImageCalls gets all the calls that were made to GetChatRoomsWithCoverImage.
// Check the length with:
//
//	len(mockedStore.GetChatRoomsWithCoverImageCalls())
func (mock *StoreMock) GetChatRoomsWithCoverImageCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereChatRoomParam
	Order parameter.ChatRoomOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereChatRoomParam
		Order parameter.ChatRoomOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetChatRoomsWithCoverImage.RLock()
	calls = mock.calls.GetChatRoomsWithCoverImage
	mock.lockGetChatRoomsWithCoverImage.RUnlock()
	return calls
}

// GetChatRoomsWithCoverImageWithSd calls GetChatRoomsWithCoverImageWithSdFunc.
func (mock *StoreMock) GetChatRoomsWithCoverImageWithSd(ctx context.Context, sd Sd, where parameter.WhereChatRoomParam, order parameter.ChatRoomOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoomWithCoverImage], error) {
	if mock.GetChatRoomsWithCoverImageWithSdFunc == nil {
		panic("StoreMock.GetChatRoomsWithCoverImageWithSdFunc: method is nil but Store.GetChatRoomsWithCoverImageWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereChatRoomParam
		Order parameter.ChatRoomOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetChatRoomsWithCoverImageWithSd.Lock()
	mock.calls.GetChatRoomsWithCoverImageWithSd = append(mock.calls.GetChatRoomsWithCoverImageWithSd, callInfo)
	mock.lockGetChatRoomsWithCoverImageWithSd.Unlock()
	return mock.GetChatRoomsWithCoverImageWithSdFunc(ctx, sd, where, order, np, cp, wc)
}

// GetChatRoomsWithCoverImageWithSdCalls gets all the calls that were made to GetChatRoomsWithCoverImageWithSd.
// Check the length with:
//
//	len(mockedStore.GetChatRoomsWithCoverImageWithSdCalls())
func (mock *StoreMock) GetChatRoomsWithCoverImageWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereChatRoomParam
	Order parameter.ChatRoomOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereChatRoomParam
		Order parameter.ChatRoomOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetChatRoomsWithCoverImageWithSd.RLock()
	calls = mock.calls.GetChatRoomsWithCoverImageWithSd
	mock.lockGetChatRoomsWithCoverImageWithSd.RUnlock()
	return calls
}

// GetChatRoomsWithSd calls GetChatRoomsWithSdFunc.
func (mock *StoreMock) GetChatRoomsWithSd(ctx context.Context, sd Sd, where parameter.WhereChatRoomParam, order parameter.ChatRoomOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ChatRoom], error) {
	if mock.GetChatRoomsWithSdFunc == nil {
		panic("StoreMock.GetChatRoomsWithSdFunc: method is nil but Store.GetChatRoomsWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereChatRoomParam
		Order parameter.ChatRoomOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetChatRoomsWithSd.Lock()
	mock.calls.GetChatRoomsWithSd = append(mock.calls.GetChatRoomsWithSd, callInfo)
	mock.lockGetChatRoomsWithSd.Unlock()
	return mock.GetChatRoomsWithSdFunc(ctx, sd, where, order, np, cp, wc)
}

// GetChatRoomsWithSdCalls gets all the calls that were made to GetChatRoomsWithSd.
// Check the length with:
//
//	len(mockedStore.GetChatRoomsWithSdCalls())
func (mock *StoreMock) GetChatRoomsWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereChatRoomParam
	Order parameter.ChatRoomOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereChatRoomParam
		Order parameter.ChatRoomOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetChatRoomsWithSd.RLock()
	calls = mock.calls.GetChatRoomsWithSd
	mock.lockGetChatRoomsWithSd.RUnlock()
	return calls
}

// GetEventTypes calls GetEventTypesFunc.
func (mock *StoreMock) GetEventTypes(ctx context.Context, where parameter.WhereEventTypeParam, order parameter.EventTypeOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.EventType], error) {
	if mock.GetEventTypesFunc == nil {
		panic("StoreMock.GetEventTypesFunc: method is nil but Store.GetEventTypes was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereEventTypeParam
		Order parameter.EventTypeOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetEventTypes.Lock()
	mock.calls.GetEventTypes = append(mock.calls.GetEventTypes, callInfo)
	mock.lockGetEventTypes.Unlock()
	return mock.GetEventTypesFunc(ctx, where, order, np, cp, wc)
}

// GetEventTypesCalls gets all the calls that were made to GetEventTypes.
// Check the length with:
//
//	len(mockedStore.GetEventTypesCalls())
func (mock *StoreMock) GetEventTypesCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereEventTypeParam
	Order parameter.EventTypeOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereEventTypeParam
		Order parameter.EventTypeOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetEventTypes.RLock()
	calls = mock.calls.GetEventTypes
	mock.lockGetEventTypes.RUnlock()
	return calls
}

// GetEventTypesWithSd calls GetEventTypesWithSdFunc.
func (mock *StoreMock) GetEventTypesWithSd(ctx context.Context, sd Sd, where parameter.WhereEventTypeParam, order parameter.EventTypeOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.EventType], error) {
	if mock.GetEventTypesWithSdFunc == nil {
		panic("StoreMock.GetEventTypesWithSdFunc: method is nil but Store.GetEventTypesWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereEventTypeParam
		Order parameter.EventTypeOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetEventTypesWithSd.Lock()
	mock.calls.GetEventTypesWithSd = append(mock.calls.GetEventTypesWithSd, callInfo)
	mock.lockGetEventTypesWithSd.Unlock()
	return mock.GetEventTypesWithSdFunc(ctx, sd, where, order, np, cp, wc)
}

// GetEventTypesWithSdCalls gets all the calls that were made to GetEventTypesWithSd.
// Check the length with:
//
//	len(mockedStore.GetEventTypesWithSdCalls())
func (mock *StoreMock) GetEventTypesWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereEventTypeParam
	Order parameter.EventTypeOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereEventTypeParam
		Order parameter.EventTypeOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetEventTypesWithSd.RLock()
	calls = mock.calls.GetEventTypesWithSd
	mock.lockGetEventTypesWithSd.RUnlock()
	return calls
}

// GetFiles calls GetFilesFunc.
func (mock *StoreMock) GetFiles(ctx context.Context, where parameter.WhereFileParam, order parameter.FileOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.File], error) {
	if mock.GetFilesFunc == nil {
		panic("StoreMock.GetFilesFunc: method is nil but Store.GetFiles was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereFileParam
		Order parameter.FileOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetFiles.Lock()
	mock.calls.GetFiles = append(mock.calls.GetFiles, callInfo)
	mock.lockGetFiles.Unlock()
	return mock.GetFilesFunc(ctx, where, order, np, cp, wc)
}

// GetFilesCalls gets all the calls that were made to GetFiles.
// Check the length with:
//
//	len(mockedStore.GetFilesCalls())
func (mock *StoreMock) GetFilesCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereFileParam
	Order parameter.FileOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereFileParam
		Order parameter.FileOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetFiles.RLock()
	calls = mock.calls.GetFiles
	mock.lockGetFiles.RUnlock()
	return calls
}

// GetFilesWithAttachableItem calls GetFilesWithAttachableItemFunc.
func (mock *StoreMock) GetFilesWithAttachableItem(ctx context.Context, where parameter.WhereFileParam, order parameter.FileOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.FileWithAttachableItem], error) {
	if mock.GetFilesWithAttachableItemFunc == nil {
		panic("StoreMock.GetFilesWithAttachableItemFunc: method is nil but Store.GetFilesWithAttachableItem was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereFileParam
		Order parameter.FileOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetFilesWithAttachableItem.Lock()
	mock.calls.GetFilesWithAttachableItem = append(mock.calls.GetFilesWithAttachableItem, callInfo)
	mock.lockGetFilesWithAttachableItem.Unlock()
	return mock.GetFilesWithAttachableItemFunc(ctx, where, order, np, cp, wc)
}

// GetFilesWithAttachableItemCalls gets all the calls that were made to GetFilesWithAttachableItem.
// Check the length with:
//
//	len(mockedStore.GetFilesWithAttachableItemCalls())
func (mock *StoreMock) GetFilesWithAttachableItemCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereFileParam
	Order parameter.FileOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereFileParam
		Order parameter.FileOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetFilesWithAttachableItem.RLock()
	calls = mock.calls.GetFilesWithAttachableItem
	mock.lockGetFilesWithAttachableItem.RUnlock()
	return calls
}

// GetFilesWithAttachableItemWithSd calls GetFilesWithAttachableItemWithSdFunc.
func (mock *StoreMock) GetFilesWithAttachableItemWithSd(ctx context.Context, sd Sd, where parameter.WhereFileParam, order parameter.FileOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.FileWithAttachableItem], error) {
	if mock.GetFilesWithAttachableItemWithSdFunc == nil {
		panic("StoreMock.GetFilesWithAttachableItemWithSdFunc: method is nil but Store.GetFilesWithAttachableItemWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereFileParam
		Order parameter.FileOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetFilesWithAttachableItemWithSd.Lock()
	mock.calls.GetFilesWithAttachableItemWithSd = append(mock.calls.GetFilesWithAttachableItemWithSd, callInfo)
	mock.lockGetFilesWithAttachableItemWithSd.Unlock()
	return mock.GetFilesWithAttachableItemWithSdFunc(ctx, sd, where, order, np, cp, wc)
}

// GetFilesWithAttachableItemWithSdCalls gets all the calls that were made to GetFilesWithAttachableItemWithSd.
// Check the length with:
//
//	len(mockedStore.GetFilesWithAttachableItemWithSdCalls())
func (mock *StoreMock) GetFilesWithAttachableItemWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereFileParam
	Order parameter.FileOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereFileParam
		Order parameter.FileOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetFilesWithAttachableItemWithSd.RLock()
	calls = mock.calls.GetFilesWithAttachableItemWithSd
	mock.lockGetFilesWithAttachableItemWithSd.RUnlock()
	return calls
}

// GetFilesWithSd calls GetFilesWithSdFunc.
func (mock *StoreMock) GetFilesWithSd(ctx context.Context, sd Sd, where parameter.WhereFileParam, order parameter.FileOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.File], error) {
	if mock.GetFilesWithSdFunc == nil {
		panic("StoreMock.GetFilesWithSdFunc: method is nil but Store.GetFilesWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereFileParam
		Order parameter.FileOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetFilesWithSd.Lock()
	mock.calls.GetFilesWithSd = append(mock.calls.GetFilesWithSd, callInfo)
	mock.lockGetFilesWithSd.Unlock()
	return mock.GetFilesWithSdFunc(ctx, sd, where, order, np, cp, wc)
}

// GetFilesWithSdCalls gets all the calls that were made to GetFilesWithSd.
// Check the length with:
//
//	len(mockedStore.GetFilesWithSdCalls())
func (mock *StoreMock) GetFilesWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereFileParam
	Order parameter.FileOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereFileParam
		Order parameter.FileOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetFilesWithSd.RLock()
	calls = mock.calls.GetFilesWithSd
	mock.lockGetFilesWithSd.RUnlock()
	return calls
}

// GetGrades calls GetGradesFunc.
func (mock *StoreMock) GetGrades(ctx context.Context, where parameter.WhereGradeParam, order parameter.GradeOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Grade], error) {
	if mock.GetGradesFunc == nil {
		panic("StoreMock.GetGradesFunc: method is nil but Store.GetGrades was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereGradeParam
		Order parameter.GradeOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetGrades.Lock()
	mock.calls.GetGrades = append(mock.calls.GetGrades, callInfo)
	mock.lockGetGrades.Unlock()
	return mock.GetGradesFunc(ctx, where, order, np, cp, wc)
}

// GetGradesCalls gets all the calls that were made to GetGrades.
// Check the length with:
//
//	len(mockedStore.GetGradesCalls())
func (mock *StoreMock) GetGradesCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereGradeParam
	Order parameter.GradeOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereGradeParam
		Order parameter.GradeOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetGrades.RLock()
	calls = mock.calls.GetGrades
	mock.lockGetGrades.RUnlock()
	return calls
}

// GetGradesWithOrganization calls GetGradesWithOrganizationFunc.
func (mock *StoreMock) GetGradesWithOrganization(ctx context.Context, where parameter.WhereGradeParam, order parameter.GradeOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.GradeWithOrganization], error) {
	if mock.GetGradesWithOrganizationFunc == nil {
		panic("StoreMock.GetGradesWithOrganizationFunc: method is nil but Store.GetGradesWithOrganization was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereGradeParam
		Order parameter.GradeOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetGradesWithOrganization.Lock()
	mock.calls.GetGradesWithOrganization = append(mock.calls.GetGradesWithOrganization, callInfo)
	mock.lockGetGradesWithOrganization.Unlock()
	return mock.GetGradesWithOrganizationFunc(ctx, where, order, np, cp, wc)
}

// GetGradesWithOrganizationCalls gets all the calls that were made to GetGradesWithOrganization.
// Check the length with:
//
//	len(mockedStore.GetGradesWithOrganizationCalls())
func (mock *StoreMock) GetGradesWithOrganizationCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereGradeParam
	Order parameter.GradeOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereGradeParam
		Order parameter.GradeOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetGradesWithOrganization.RLock()
	calls = mock.calls.GetGradesWithOrganization
	mock.lockGetGradesWithOrganization.RUnlock()
	return calls
}

// GetGradesWithOrganizationWithSd calls GetGradesWithOrganizationWithSdFunc.
func (mock *StoreMock) GetGradesWithOrganizationWithSd(ctx context.Context, sd Sd, where parameter.WhereGradeParam, order parameter.GradeOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.GradeWithOrganization], error) {
	if mock.GetGradesWithOrganizationWithSdFunc == nil {
		panic("StoreMock.GetGradesWithOrganizationWithSdFunc: method is nil but Store.GetGradesWithOrganizationWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereGradeParam
		Order parameter.GradeOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetGradesWithOrganizationWithSd.Lock()
	mock.calls.GetGradesWithOrganizationWithSd = append(mock.calls.GetGradesWithOrganizationWithSd, callInfo)
	mock.lockGetGradesWithOrganizationWithSd.Unlock()
	return mock.GetGradesWithOrganizationWithSdFunc(ctx, sd, where, order, np, cp, wc)
}

// GetGradesWithOrganizationWithSdCalls gets all the calls that were made to GetGradesWithOrganizationWithSd.
// Check the length with:
//
//	len(mockedStore.GetGradesWithOrganizationWithSdCalls())
func (mock *StoreMock) GetGradesWithOrganizationWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereGradeParam
	Order parameter.GradeOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereGradeParam
		Order parameter.GradeOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetGradesWithOrganizationWithSd.RLock()
	calls = mock.calls.GetGradesWithOrganizationWithSd
	mock.lockGetGradesWithOrganizationWithSd.RUnlock()
	return calls
}

// GetGradesWithSd calls GetGradesWithSdFunc.
func (mock *StoreMock) GetGradesWithSd(ctx context.Context, sd Sd, where parameter.WhereGradeParam, order parameter.GradeOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Grade], error) {
	if mock.GetGradesWithSdFunc == nil {
		panic("StoreMock.GetGradesWithSdFunc: method is nil but Store.GetGradesWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereGradeParam
		Order parameter.GradeOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetGradesWithSd.Lock()
	mock.calls.GetGradesWithSd = append(mock.calls.GetGradesWithSd, callInfo)
	mock.lockGetGradesWithSd.Unlock()
	return mock.GetGradesWithSdFunc(ctx, sd, where, order, np, cp, wc)
}

// GetGradesWithSdCalls gets all the calls that were made to GetGradesWithSd.
// Check the length with:
//
//	len(mockedStore.GetGradesWithSdCalls())
func (mock *StoreMock) GetGradesWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereGradeParam
	Order parameter.GradeOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereGradeParam
		Order parameter.GradeOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetGradesWithSd.RLock()
	calls = mock.calls.GetGradesWithSd
	mock.lockGetGradesWithSd.RUnlock()
	return calls
}

// GetGroups calls GetGroupsFunc.
func (mock *StoreMock) GetGroups(ctx context.Context, where parameter.WhereGroupParam, order parameter.GroupOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Group], error) {
	if mock.GetGroupsFunc == nil {
		panic("StoreMock.GetGroupsFunc: method is nil but Store.GetGroups was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereGroupParam
		Order parameter.GroupOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetGroups.Lock()
	mock.calls.GetGroups = append(mock.calls.GetGroups, callInfo)
	mock.lockGetGroups.Unlock()
	return mock.GetGroupsFunc(ctx, where, order, np, cp, wc)
}

// GetGroupsCalls gets all the calls that were made to GetGroups.
// Check the length with:
//
//	len(mockedStore.GetGroupsCalls())
func (mock *StoreMock) GetGroupsCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereGroupParam
	Order parameter.GroupOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereGroupParam
		Order parameter.GroupOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetGroups.RLock()
	calls = mock.calls.GetGroups
	mock.lockGetGroups.RUnlock()
	return calls
}

// GetGroupsWithOrganization calls GetGroupsWithOrganizationFunc.
func (mock *StoreMock) GetGroupsWithOrganization(ctx context.Context, where parameter.WhereGroupParam, order parameter.GroupOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.GroupWithOrganization], error) {
	if mock.GetGroupsWithOrganizationFunc == nil {
		panic("StoreMock.GetGroupsWithOrganizationFunc: method is nil but Store.GetGroupsWithOrganization was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereGroupParam
		Order parameter.GroupOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetGroupsWithOrganization.Lock()
	mock.calls.GetGroupsWithOrganization = append(mock.calls.GetGroupsWithOrganization, callInfo)
	mock.lockGetGroupsWithOrganization.Unlock()
	return mock.GetGroupsWithOrganizationFunc(ctx, where, order, np, cp, wc)
}

// GetGroupsWithOrganizationCalls gets all the calls that were made to GetGroupsWithOrganization.
// Check the length with:
//
//	len(mockedStore.GetGroupsWithOrganizationCalls())
func (mock *StoreMock) GetGroupsWithOrganizationCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereGroupParam
	Order parameter.GroupOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereGroupParam
		Order parameter.GroupOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetGroupsWithOrganization.RLock()
	calls = mock.calls.GetGroupsWithOrganization
	mock.lockGetGroupsWithOrganization.RUnlock()
	return calls
}

// GetGroupsWithOrganizationWithSd calls GetGroupsWithOrganizationWithSdFunc.
func (mock *StoreMock) GetGroupsWithOrganizationWithSd(ctx context.Context, sd Sd, where parameter.WhereGroupParam, order parameter.GroupOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.GroupWithOrganization], error) {
	if mock.GetGroupsWithOrganizationWithSdFunc == nil {
		panic("StoreMock.GetGroupsWithOrganizationWithSdFunc: method is nil but Store.GetGroupsWithOrganizationWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereGroupParam
		Order parameter.GroupOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetGroupsWithOrganizationWithSd.Lock()
	mock.calls.GetGroupsWithOrganizationWithSd = append(mock.calls.GetGroupsWithOrganizationWithSd, callInfo)
	mock.lockGetGroupsWithOrganizationWithSd.Unlock()
	return mock.GetGroupsWithOrganizationWithSdFunc(ctx, sd, where, order, np, cp, wc)
}

// GetGroupsWithOrganizationWithSdCalls gets all the calls that were made to GetGroupsWithOrganizationWithSd.
// Check the length with:
//
//	len(mockedStore.GetGroupsWithOrganizationWithSdCalls())
func (mock *StoreMock) GetGroupsWithOrganizationWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereGroupParam
	Order parameter.GroupOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereGroupParam
		Order parameter.GroupOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetGroupsWithOrganizationWithSd.RLock()
	calls = mock.calls.GetGroupsWithOrganizationWithSd
	mock.lockGetGroupsWithOrganizationWithSd.RUnlock()
	return calls
}

// GetGroupsWithSd calls GetGroupsWithSdFunc.
func (mock *StoreMock) GetGroupsWithSd(ctx context.Context, sd Sd, where parameter.WhereGroupParam, order parameter.GroupOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Group], error) {
	if mock.GetGroupsWithSdFunc == nil {
		panic("StoreMock.GetGroupsWithSdFunc: method is nil but Store.GetGroupsWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereGroupParam
		Order parameter.GroupOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetGroupsWithSd.Lock()
	mock.calls.GetGroupsWithSd = append(mock.calls.GetGroupsWithSd, callInfo)
	mock.lockGetGroupsWithSd.Unlock()
	return mock.GetGroupsWithSdFunc(ctx, sd, where, order, np, cp, wc)
}

// GetGroupsWithSdCalls gets all the calls that were made to GetGroupsWithSd.
// Check the length with:
//
//	len(mockedStore.GetGroupsWithSdCalls())
func (mock *StoreMock) GetGroupsWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereGroupParam
	Order parameter.GroupOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereGroupParam
		Order parameter.GroupOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetGroupsWithSd.RLock()
	calls = mock.calls.GetGroupsWithSd
	mock.lockGetGroupsWithSd.RUnlock()
	return calls
}

// GetImages calls GetImagesFunc.
func (mock *StoreMock) GetImages(ctx context.Context, where parameter.WhereImageParam, order parameter.ImageOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Image], error) {
	if mock.GetImagesFunc == nil {
		panic("StoreMock.GetImagesFunc: method is nil but Store.GetImages was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereImageParam
		Order parameter.ImageOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetImages.Lock()
	mock.calls.GetImages = append(mock.calls.GetImages, callInfo)
	mock.lockGetImages.Unlock()
	return mock.GetImagesFunc(ctx, where, order, np, cp, wc)
}

// GetImagesCalls gets all the calls that were made to GetImages.
// Check the length with:
//
//	len(mockedStore.GetImagesCalls())
func (mock *StoreMock) GetImagesCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereImageParam
	Order parameter.ImageOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereImageParam
		Order parameter.ImageOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetImages.RLock()
	calls = mock.calls.GetImages
	mock.lockGetImages.RUnlock()
	return calls
}

// GetImagesWithAttachableItem calls GetImagesWithAttachableItemFunc.
func (mock *StoreMock) GetImagesWithAttachableItem(ctx context.Context, where parameter.WhereImageParam, order parameter.ImageOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ImageWithAttachableItem], error) {
	if mock.GetImagesWithAttachableItemFunc == nil {
		panic("StoreMock.GetImagesWithAttachableItemFunc: method is nil but Store.GetImagesWithAttachableItem was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereImageParam
		Order parameter.ImageOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetImagesWithAttachableItem.Lock()
	mock.calls.GetImagesWithAttachableItem = append(mock.calls.GetImagesWithAttachableItem, callInfo)
	mock.lockGetImagesWithAttachableItem.Unlock()
	return mock.GetImagesWithAttachableItemFunc(ctx, where, order, np, cp, wc)
}

// GetImagesWithAttachableItemCalls gets all the calls that were made to GetImagesWithAttachableItem.
// Check the length with:
//
//	len(mockedStore.GetImagesWithAttachableItemCalls())
func (mock *StoreMock) GetImagesWithAttachableItemCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereImageParam
	Order parameter.ImageOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereImageParam
		Order parameter.ImageOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetImagesWithAttachableItem.RLock()
	calls = mock.calls.GetImagesWithAttachableItem
	mock.lockGetImagesWithAttachableItem.RUnlock()
	return calls
}

// GetImagesWithAttachableItemWithSd calls GetImagesWithAttachableItemWithSdFunc.
func (mock *StoreMock) GetImagesWithAttachableItemWithSd(ctx context.Context, sd Sd, where parameter.WhereImageParam, order parameter.ImageOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ImageWithAttachableItem], error) {
	if mock.GetImagesWithAttachableItemWithSdFunc == nil {
		panic("StoreMock.GetImagesWithAttachableItemWithSdFunc: method is nil but Store.GetImagesWithAttachableItemWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereImageParam
		Order parameter.ImageOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetImagesWithAttachableItemWithSd.Lock()
	mock.calls.GetImagesWithAttachableItemWithSd = append(mock.calls.GetImagesWithAttachableItemWithSd, callInfo)
	mock.lockGetImagesWithAttachableItemWithSd.Unlock()
	return mock.GetImagesWithAttachableItemWithSdFunc(ctx, sd, where, order, np, cp, wc)
}

// GetImagesWithAttachableItemWithSdCalls gets all the calls that were made to GetImagesWithAttachableItemWithSd.
// Check the length with:
//
//	len(mockedStore.GetImagesWithAttachableItemWithSdCalls())
func (mock *StoreMock) GetImagesWithAttachableItemWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereImageParam
	Order parameter.ImageOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereImageParam
		Order parameter.ImageOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetImagesWithAttachableItemWithSd.RLock()
	calls = mock.calls.GetImagesWithAttachableItemWithSd
	mock.lockGetImagesWithAttachableItemWithSd.RUnlock()
	return calls
}

// GetImagesWithSd calls GetImagesWithSdFunc.
func (mock *StoreMock) GetImagesWithSd(ctx context.Context, sd Sd, where parameter.WhereImageParam, order parameter.ImageOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Image], error) {
	if mock.GetImagesWithSdFunc == nil {
		panic("StoreMock.GetImagesWithSdFunc: method is nil but Store.GetImagesWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereImageParam
		Order parameter.ImageOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetImagesWithSd.Lock()
	mock.calls.GetImagesWithSd = append(mock.calls.GetImagesWithSd, callInfo)
	mock.lockGetImagesWithSd.Unlock()
	return mock.GetImagesWithSdFunc(ctx, sd, where, order, np, cp, wc)
}

// GetImagesWithSdCalls gets all the calls that were made to GetImagesWithSd.
// Check the length with:
//
//	len(mockedStore.GetImagesWithSdCalls())
func (mock *StoreMock) GetImagesWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereImageParam
	Order parameter.ImageOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereImageParam
		Order parameter.ImageOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetImagesWithSd.RLock()
	calls = mock.calls.GetImagesWithSd
	mock.lockGetImagesWithSd.RUnlock()
	return calls
}

// GetMembers calls GetMembersFunc.
func (mock *StoreMock) GetMembers(ctx context.Context, where parameter.WhereMemberParam, order parameter.MemberOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Member], error) {
	if mock.GetMembersFunc == nil {
		panic("StoreMock.GetMembersFunc: method is nil but Store.GetMembers was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereMemberParam
		Order parameter.MemberOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetMembers.Lock()
	mock.calls.GetMembers = append(mock.calls.GetMembers, callInfo)
	mock.lockGetMembers.Unlock()
	return mock.GetMembersFunc(ctx, where, order, np, cp, wc)
}

// GetMembersCalls gets all the calls that were made to GetMembers.
// Check the length with:
//
//	len(mockedStore.GetMembersCalls())
func (mock *StoreMock) GetMembersCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereMemberParam
	Order parameter.MemberOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereMemberParam
		Order parameter.MemberOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetMembers.RLock()
	calls = mock.calls.GetMembers
	mock.lockGetMembers.RUnlock()
	return calls
}

// GetMembersOnChatRoom calls GetMembersOnChatRoomFunc.
func (mock *StoreMock) GetMembersOnChatRoom(ctx context.Context, chatRoomID uuid.UUID, where parameter.WhereMemberOnChatRoomParam, order parameter.MemberOnChatRoomOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MemberOnChatRoom], error) {
	if mock.GetMembersOnChatRoomFunc == nil {
		panic("StoreMock.GetMembersOnChatRoomFunc: method is nil but Store.GetMembersOnChatRoom was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ChatRoomID uuid.UUID
		Where      parameter.WhereMemberOnChatRoomParam
		Order      parameter.MemberOnChatRoomOrderMethod
		Np         NumberedPaginationParam
		Cp         CursorPaginationParam
		Wc         WithCountParam
	}{
		Ctx:        ctx,
		ChatRoomID: chatRoomID,
		Where:      where,
		Order:      order,
		Np:         np,
		Cp:         cp,
		Wc:         wc,
	}
	mock.lockGetMembersOnChatRoom.Lock()
	mock.calls.GetMembersOnChatRoom = append(mock.calls.GetMembersOnChatRoom, callInfo)
	mock.lockGetMembersOnChatRoom.Unlock()
	return mock.GetMembersOnChatRoomFunc(ctx, chatRoomID, where, order, np, cp, wc)
}

// GetMembersOnChatRoomCalls gets all the calls that were made to GetMembersOnChatRoom.
// Check the length with:
//
//	len(mockedStore.GetMembersOnChatRoomCalls())
func (mock *StoreMock) GetMembersOnChatRoomCalls() []struct {
	Ctx        context.Context
	ChatRoomID uuid.UUID
	Where      parameter.WhereMemberOnChatRoomParam
	Order      parameter.MemberOnChatRoomOrderMethod
	Np         NumberedPaginationParam
	Cp         CursorPaginationParam
	Wc         WithCountParam
} {
	var calls []struct {
		Ctx        context.Context
		ChatRoomID uuid.UUID
		Where      parameter.WhereMemberOnChatRoomParam
		Order      parameter.MemberOnChatRoomOrderMethod
		Np         NumberedPaginationParam
		Cp         CursorPaginationParam
		Wc         WithCountParam
	}
	mock.lockGetMembersOnChatRoom.RLock()
	calls = mock.calls.GetMembersOnChatRoom
	mock.lockGetMembersOnChatRoom.RUnlock()
	return calls
}

// GetMembersOnChatRoomAddMemberAction calls GetMembersOnChatRoomAddMemberActionFunc.
func (mock *StoreMock) GetMembersOnChatRoomAddMemberAction(ctx context.Context, chatRoomAddMemberActionID uuid.UUID, where parameter.WhereMemberOnChatRoomAddMemberActionParam, order parameter.MemberOnChatRoomAddMemberActionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MemberOnChatRoomAddMemberAction], error) {
	if mock.GetMembersOnChatRoomAddMemberActionFunc == nil {
		panic("StoreMock.GetMembersOnChatRoomAddMemberActionFunc: method is nil but Store.GetMembersOnChatRoomAddMemberAction was just called")
	}
	callInfo := struct {
		Ctx                       context.Context
		ChatRoomAddMemberActionID uuid.UUID
		Where                     parameter.WhereMemberOnChatRoomAddMemberActionParam
		Order                     parameter.MemberOnChatRoomAddMemberActionOrderMethod
		Np                        NumberedPaginationParam
		Cp                        CursorPaginationParam
		Wc                        WithCountParam
	}{
		Ctx:                       ctx,
		ChatRoomAddMemberActionID: chatRoomAddMemberActionID,
		Where:                     where,
		Order:                     order,
		Np:                        np,
		Cp:                        cp,
		Wc:                        wc,
	}
	mock.lockGetMembersOnChatRoomAddMemberAction.Lock()
	mock.calls.GetMembersOnChatRoomAddMemberAction = append(mock.calls.GetMembersOnChatRoomAddMemberAction, callInfo)
	mock.lockGetMembersOnChatRoomAddMemberAction.Unlock()
	return mock.GetMembersOnChatRoomAddMemberActionFunc(ctx, chatRoomAddMemberActionID, where, order, np, cp, wc)
}

// GetMembersOnChatRoomAddMemberActionCalls gets all the calls that were made to GetMembersOnChatRoomAddMemberAction.
// Check the length with:
//
//	len(mockedStore.GetMembersOnChatRoomAddMemberActionCalls())
func (mock *StoreMock) GetMembersOnChatRoomAddMemberActionCalls() []struct {
	Ctx                       context.Context
	ChatRoomAddMemberActionID uuid.UUID
	Where                     parameter.WhereMemberOnChatRoomAddMemberActionParam
	Order                     parameter.MemberOnChatRoomAddMemberActionOrderMethod
	Np                        NumberedPaginationParam
	Cp                        CursorPaginationParam
	Wc                        WithCountParam
} {
	var calls []struct {
		Ctx                       context.Context
		ChatRoomAddMemberActionID uuid.UUID
		Where                     parameter.WhereMemberOnChatRoomAddMemberActionParam
		Order                     parameter.MemberOnChatRoomAddMemberActionOrderMethod
		Np                        NumberedPaginationParam
		Cp                        CursorPaginationParam
		Wc                        WithCountParam
	}
	mock.lockGetMembersOnChatRoomAddMemberAction.RLock()
	calls = mock.calls.GetMembersOnChatRoomAddMemberAction
	mock.lockGetMembersOnChatRoomAddMemberAction.RUnlock()
	return calls
}

// GetMembersOnChatRoomAddMemberActionWithSd calls GetMembersOnChatRoomAddMemberActionWithSdFunc.
func (mock *StoreMock) GetMembersOnChatRoomAddMemberActionWithSd(ctx context.Context, sd Sd, chatRoomAddMemberActionID uuid.UUID, where parameter.WhereMemberOnChatRoomAddMemberActionParam, order parameter.MemberOnChatRoomAddMemberActionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MemberOnChatRoomAddMemberAction], error) {
	if mock.GetMembersOnChatRoomAddMemberActionWithSdFunc == nil {
		panic("StoreMock.GetMembersOnChatRoomAddMemberActionWithSdFunc: method is nil but Store.GetMembersOnChatRoomAddMemberActionWithSd was just called")
	}
	callInfo := struct {
		Ctx                       context.Context
		Sd                        Sd
		ChatRoomAddMemberActionID uuid.UUID
		Where                     parameter.WhereMemberOnChatRoomAddMemberActionParam
		Order                     parameter.MemberOnChatRoomAddMemberActionOrderMethod
		Np                        NumberedPaginationParam
		Cp                        CursorPaginationParam
		Wc                        WithCountParam
	}{
		Ctx:                       ctx,
		Sd:                        sd,
		ChatRoomAddMemberActionID: chatRoomAddMemberActionID,
		Where:                     where,
		Order:                     order,
		Np:                        np,
		Cp:                        cp,
		Wc:                        wc,
	}
	mock.lockGetMembersOnChatRoomAddMemberActionWithSd.Lock()
	mock.calls.GetMembersOnChatRoomAddMemberActionWithSd = append(mock.calls.GetMembersOnChatRoomAddMemberActionWithSd, callInfo)
	mock.lockGetMembersOnChatRoomAddMemberActionWithSd.Unlock()
	return mock.GetMembersOnChatRoomAddMemberActionWithSdFunc(ctx, sd, chatRoomAddMemberActionID, where, order, np, cp, wc)
}

// GetMembersOnChatRoomAddMemberActionWithSdCalls gets all the calls that were made to GetMembersOnChatRoomAddMemberActionWithSd.
// Check the length with:
//
//	len(mockedStore.GetMembersOnChatRoomAddMemberActionWithSdCalls())
func (mock *StoreMock) GetMembersOnChatRoomAddMemberActionWithSdCalls() []struct {
	Ctx                       context.Context
	Sd                        Sd
	ChatRoomAddMemberActionID uuid.UUID
	Where                     parameter.WhereMemberOnChatRoomAddMemberActionParam
	Order                     parameter.MemberOnChatRoomAddMemberActionOrderMethod
	Np                        NumberedPaginationParam
	Cp                        CursorPaginationParam
	Wc                        WithCountParam
} {
	var calls []struct {
		Ctx                       context.Context
		Sd                        Sd
		ChatRoomAddMemberActionID uuid.UUID
		Where                     parameter.WhereMemberOnChatRoomAddMemberActionParam
		Order                     parameter.MemberOnChatRoomAddMemberActionOrderMethod
		Np                        NumberedPaginationParam
		Cp                        CursorPaginationParam
		Wc                        WithCountParam
	}
	mock.lockGetMembersOnChatRoomAddMemberActionWithSd.RLock()
	calls = mock.calls.GetMembersOnChatRoomAddMemberActionWithSd
	mock.lockGetMembersOnChatRoomAddMemberActionWithSd.RUnlock()
	return calls
}

// GetMembersOnChatRoomRemoveMemberAction calls GetMembersOnChatRoomRemoveMemberActionFunc.
func (mock *StoreMock) GetMembersOnChatRoomRemoveMemberAction(ctx context.Context, chatRoomRemoveMemberActionID uuid.UUID, where parameter.WhereMemberOnChatRoomRemoveMemberActionParam, order parameter.MemberOnChatRoomRemoveMemberActionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MemberOnChatRoomRemoveMemberAction], error) {
	if mock.GetMembersOnChatRoomRemoveMemberActionFunc == nil {
		panic("StoreMock.GetMembersOnChatRoomRemoveMemberActionFunc: method is nil but Store.GetMembersOnChatRoomRemoveMemberAction was just called")
	}
	callInfo := struct {
		Ctx                          context.Context
		ChatRoomRemoveMemberActionID uuid.UUID
		Where                        parameter.WhereMemberOnChatRoomRemoveMemberActionParam
		Order                        parameter.MemberOnChatRoomRemoveMemberActionOrderMethod
		Np                           NumberedPaginationParam
		Cp                           CursorPaginationParam
		Wc                           WithCountParam
	}{
		Ctx:                          ctx,
		ChatRoomRemoveMemberActionID: chatRoomRemoveMemberActionID,
		Where:                        where,
		Order:                        order,
		Np:                           np,
		Cp:                           cp,
		Wc:                           wc,
	}
	mock.lockGetMembersOnChatRoomRemoveMemberAction.Lock()
	mock.calls.GetMembersOnChatRoomRemoveMemberAction = append(mock.calls.GetMembersOnChatRoomRemoveMemberAction, callInfo)
	mock.lockGetMembersOnChatRoomRemoveMemberAction.Unlock()
	return mock.GetMembersOnChatRoomRemoveMemberActionFunc(ctx, chatRoomRemoveMemberActionID, where, order, np, cp, wc)
}

// GetMembersOnChatRoomRemoveMemberActionCalls gets all the calls that were made to GetMembersOnChatRoomRemoveMemberAction.
// Check the length with:
//
//	len(mockedStore.GetMembersOnChatRoomRemoveMemberActionCalls())
func (mock *StoreMock) GetMembersOnChatRoomRemoveMemberActionCalls() []struct {
	Ctx                          context.Context
	ChatRoomRemoveMemberActionID uuid.UUID
	Where                        parameter.WhereMemberOnChatRoomRemoveMemberActionParam
	Order                        parameter.MemberOnChatRoomRemoveMemberActionOrderMethod
	Np                           NumberedPaginationParam
	Cp                           CursorPaginationParam
	Wc                           WithCountParam
} {
	var calls []struct {
		Ctx                          context.Context
		ChatRoomRemoveMemberActionID uuid.UUID
		Where                        parameter.WhereMemberOnChatRoomRemoveMemberActionParam
		Order                        parameter.MemberOnChatRoomRemoveMemberActionOrderMethod
		Np                           NumberedPaginationParam
		Cp                           CursorPaginationParam
		Wc                           WithCountParam
	}
	mock.lockGetMembersOnChatRoomRemoveMemberAction.RLock()
	calls = mock.calls.GetMembersOnChatRoomRemoveMemberAction
	mock.lockGetMembersOnChatRoomRemoveMemberAction.RUnlock()
	return calls
}

// GetMembersOnChatRoomRemoveMemberActionWithSd calls GetMembersOnChatRoomRemoveMemberActionWithSdFunc.
func (mock *StoreMock) GetMembersOnChatRoomRemoveMemberActionWithSd(ctx context.Context, sd Sd, chatRoomRemoveMemberActionID uuid.UUID, where parameter.WhereMemberOnChatRoomRemoveMemberActionParam, order parameter.MemberOnChatRoomRemoveMemberActionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MemberOnChatRoomRemoveMemberAction], error) {
	if mock.GetMembersOnChatRoomRemoveMemberActionWithSdFunc == nil {
		panic("StoreMock.GetMembersOnChatRoomRemoveMemberActionWithSdFunc: method is nil but Store.GetMembersOnChatRoomRemoveMemberActionWithSd was just called")
	}
	callInfo := struct {
		Ctx                          context.Context
		Sd                           Sd
		ChatRoomRemoveMemberActionID uuid.UUID
		Where                        parameter.WhereMemberOnChatRoomRemoveMemberActionParam
		Order                        parameter.MemberOnChatRoomRemoveMemberActionOrderMethod
		Np                           NumberedPaginationParam
		Cp                           CursorPaginationParam
		Wc                           WithCountParam
	}{
		Ctx:                          ctx,
		Sd:                           sd,
		ChatRoomRemoveMemberActionID: chatRoomRemoveMemberActionID,
		Where:                        where,
		Order:                        order,
		Np:                           np,
		Cp:                           cp,
		Wc:                           wc,
	}
	mock.lockGetMembersOnChatRoomRemoveMemberActionWithSd.Lock()
	mock.calls.GetMembersOnChatRoomRemoveMemberActionWithSd = append(mock.calls.GetMembersOnChatRoomRemoveMemberActionWithSd, callInfo)
	mock.lockGetMembersOnChatRoomRemoveMemberActionWithSd.Unlock()
	return mock.GetMembersOnChatRoomRemoveMemberActionWithSdFunc(ctx, sd, chatRoomRemoveMemberActionID, where, order, np, cp, wc)
}

// GetMembersOnChatRoomRemoveMemberActionWithSdCalls gets all the calls that were made to GetMembersOnChatRoomRemoveMemberActionWithSd.
// Check the length with:
//
//	len(mockedStore.GetMembersOnChatRoomRemoveMemberActionWithSdCalls())
func (mock *StoreMock) GetMembersOnChatRoomRemoveMemberActionWithSdCalls() []struct {
	Ctx                          context.Context
	Sd                           Sd
	ChatRoomRemoveMemberActionID uuid.UUID
	Where                        parameter.WhereMemberOnChatRoomRemoveMemberActionParam
	Order                        parameter.MemberOnChatRoomRemoveMemberActionOrderMethod
	Np                           NumberedPaginationParam
	Cp                           CursorPaginationParam
	Wc                           WithCountParam
} {
	var calls []struct {
		Ctx                          context.Context
		Sd                           Sd
		ChatRoomRemoveMemberActionID uuid.UUID
		Where                        parameter.WhereMemberOnChatRoomRemoveMemberActionParam
		Order                        parameter.MemberOnChatRoomRemoveMemberActionOrderMethod
		Np                           NumberedPaginationParam
		Cp                           CursorPaginationParam
		Wc                           WithCountParam
	}
	mock.lockGetMembersOnChatRoomRemoveMemberActionWithSd.RLock()
	calls = mock.calls.GetMembersOnChatRoomRemoveMemberActionWithSd
	mock.lockGetMembersOnChatRoomRemoveMemberActionWithSd.RUnlock()
	return calls
}

// GetMembersOnChatRoomWithSd calls GetMembersOnChatRoomWithSdFunc.
func (mock *StoreMock) GetMembersOnChatRoomWithSd(ctx context.Context, sd Sd, chatRoomID uuid.UUID, where parameter.WhereMemberOnChatRoomParam, order parameter.MemberOnChatRoomOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MemberOnChatRoom], error) {
	if mock.GetMembersOnChatRoomWithSdFunc == nil {
		panic("StoreMock.GetMembersOnChatRoomWithSdFunc: method is nil but Store.GetMembersOnChatRoomWithSd was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Sd         Sd
		ChatRoomID uuid.UUID
		Where      parameter.WhereMemberOnChatRoomParam
		Order      parameter.MemberOnChatRoomOrderMethod
		Np         NumberedPaginationParam
		Cp         CursorPaginationParam
		Wc         WithCountParam
	}{
		Ctx:        ctx,
		Sd:         sd,
		ChatRoomID: chatRoomID,
		Where:      where,
		Order:      order,
		Np:         np,
		Cp:         cp,
		Wc:         wc,
	}
	mock.lockGetMembersOnChatRoomWithSd.Lock()
	mock.calls.GetMembersOnChatRoomWithSd = append(mock.calls.GetMembersOnChatRoomWithSd, callInfo)
	mock.lockGetMembersOnChatRoomWithSd.Unlock()
	return mock.GetMembersOnChatRoomWithSdFunc(ctx, sd, chatRoomID, where, order, np, cp, wc)
}

// GetMembersOnChatRoomWithSdCalls gets all the calls that were made to GetMembersOnChatRoomWithSd.
// Check the length with:
//
//	len(mockedStore.GetMembersOnChatRoomWithSdCalls())
func (mock *StoreMock) GetMembersOnChatRoomWithSdCalls() []struct {
	Ctx        context.Context
	Sd         Sd
	ChatRoomID uuid.UUID
	Where      parameter.WhereMemberOnChatRoomParam
	Order      parameter.MemberOnChatRoomOrderMethod
	Np         NumberedPaginationParam
	Cp         CursorPaginationParam
	Wc         WithCountParam
} {
	var calls []struct {
		Ctx        context.Context
		Sd         Sd
		ChatRoomID uuid.UUID
		Where      parameter.WhereMemberOnChatRoomParam
		Order      parameter.MemberOnChatRoomOrderMethod
		Np         NumberedPaginationParam
		Cp         CursorPaginationParam
		Wc         WithCountParam
	}
	mock.lockGetMembersOnChatRoomWithSd.RLock()
	calls = mock.calls.GetMembersOnChatRoomWithSd
	mock.lockGetMembersOnChatRoomWithSd.RUnlock()
	return calls
}

// GetMembersOnOrganization calls GetMembersOnOrganizationFunc.
func (mock *StoreMock) GetMembersOnOrganization(ctx context.Context, organizationID uuid.UUID, where parameter.WhereMemberOnOrganizationParam, order parameter.MemberOnOrganizationOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MemberOnOrganization], error) {
	if mock.GetMembersOnOrganizationFunc == nil {
		panic("StoreMock.GetMembersOnOrganizationFunc: method is nil but Store.GetMembersOnOrganization was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		OrganizationID uuid.UUID
		Where          parameter.WhereMemberOnOrganizationParam
		Order          parameter.MemberOnOrganizationOrderMethod
		Np             NumberedPaginationParam
		Cp             CursorPaginationParam
		Wc             WithCountParam
	}{
		Ctx:            ctx,
		OrganizationID: organizationID,
		Where:          where,
		Order:          order,
		Np:             np,
		Cp:             cp,
		Wc:             wc,
	}
	mock.lockGetMembersOnOrganization.Lock()
	mock.calls.GetMembersOnOrganization = append(mock.calls.GetMembersOnOrganization, callInfo)
	mock.lockGetMembersOnOrganization.Unlock()
	return mock.GetMembersOnOrganizationFunc(ctx, organizationID, where, order, np, cp, wc)
}

// GetMembersOnOrganizationCalls gets all the calls that were made to GetMembersOnOrganization.
// Check the length with:
//
//	len(mockedStore.GetMembersOnOrganizationCalls())
func (mock *StoreMock) GetMembersOnOrganizationCalls() []struct {
	Ctx            context.Context
	OrganizationID uuid.UUID
	Where          parameter.WhereMemberOnOrganizationParam
	Order          parameter.MemberOnOrganizationOrderMethod
	Np             NumberedPaginationParam
	Cp             CursorPaginationParam
	Wc             WithCountParam
} {
	var calls []struct {
		Ctx            context.Context
		OrganizationID uuid.UUID
		Where          parameter.WhereMemberOnOrganizationParam
		Order          parameter.MemberOnOrganizationOrderMethod
		Np             NumberedPaginationParam
		Cp             CursorPaginationParam
		Wc             WithCountParam
	}
	mock.lockGetMembersOnOrganization.RLock()
	calls = mock.calls.GetMembersOnOrganization
	mock.lockGetMembersOnOrganization.RUnlock()
	return calls
}

// GetMembersOnOrganizationWithSd calls GetMembersOnOrganizationWithSdFunc.
func (mock *StoreMock) GetMembersOnOrganizationWithSd(ctx context.Context, sd Sd, organizationID uuid.UUID, where parameter.WhereMemberOnOrganizationParam, order parameter.MemberOnOrganizationOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MemberOnOrganization], error) {
	if mock.GetMembersOnOrganizationWithSdFunc == nil {
		panic("StoreMock.GetMembersOnOrganizationWithSdFunc: method is nil but Store.GetMembersOnOrganizationWithSd was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		Sd             Sd
		OrganizationID uuid.UUID
		Where          parameter.WhereMemberOnOrganizationParam
		Order          parameter.MemberOnOrganizationOrderMethod
		Np             NumberedPaginationParam
		Cp             CursorPaginationParam
		Wc             WithCountParam
	}{
		Ctx:            ctx,
		Sd:             sd,
		OrganizationID: organizationID,
		Where:          where,
		Order:          order,
		Np:             np,
		Cp:             cp,
		Wc:             wc,
	}
	mock.lockGetMembersOnOrganizationWithSd.Lock()
	mock.calls.GetMembersOnOrganizationWithSd = append(mock.calls.GetMembersOnOrganizationWithSd, callInfo)
	mock.lockGetMembersOnOrganizationWithSd.Unlock()
	return mock.GetMembersOnOrganizationWithSdFunc(ctx, sd, organizationID, where, order, np, cp, wc)
}

// GetMembersOnOrganizationWithSdCalls gets all the calls that were made to GetMembersOnOrganizationWithSd.
// Check the length with:
//
//	len(mockedStore.GetMembersOnOrganizationWithSdCalls())
func (mock *StoreMock) GetMembersOnOrganizationWithSdCalls() []struct {
	Ctx            context.Context
	Sd             Sd
	OrganizationID uuid.UUID
	Where          parameter.WhereMemberOnOrganizationParam
	Order          parameter.MemberOnOrganizationOrderMethod
	Np             NumberedPaginationParam
	Cp             CursorPaginationParam
	Wc             WithCountParam
} {
	var calls []struct {
		Ctx            context.Context
		Sd             Sd
		OrganizationID uuid.UUID
		Where          parameter.WhereMemberOnOrganizationParam
		Order          parameter.MemberOnOrganizationOrderMethod
		Np             NumberedPaginationParam
		Cp             CursorPaginationParam
		Wc             WithCountParam
	}
	mock.lockGetMembersOnOrganizationWithSd.RLock()
	calls = mock.calls.GetMembersOnOrganizationWithSd
	mock.lockGetMembersOnOrganizationWithSd.RUnlock()
	return calls
}

// GetMembersWithAttendStatus calls GetMembersWithAttendStatusFunc.
func (mock *StoreMock) GetMembersWithAttendStatus(ctx context.Context, where parameter.WhereMemberParam, order parameter.MemberOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MemberWithAttendStatus], error) {
	if mock.GetMembersWithAttendStatusFunc == nil {
		panic("StoreMock.GetMembersWithAttendStatusFunc: method is nil but Store.GetMembersWithAttendStatus was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereMemberParam
		Order parameter.MemberOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetMembersWithAttendStatus.Lock()
	mock.calls.GetMembersWithAttendStatus = append(mock.calls.GetMembersWithAttendStatus, callInfo)
	mock.lockGetMembersWithAttendStatus.Unlock()
	return mock.GetMembersWithAttendStatusFunc(ctx, where, order, np, cp, wc)
}

// GetMembersWithAttendStatusCalls gets all the calls that were made to GetMembersWithAttendStatus.
// Check the length with:
//
//	len(mockedStore.GetMembersWithAttendStatusCalls())
func (mock *StoreMock) GetMembersWithAttendStatusCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereMemberParam
	Order parameter.MemberOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereMemberParam
		Order parameter.MemberOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetMembersWithAttendStatus.RLock()
	calls = mock.calls.GetMembersWithAttendStatus
	mock.lockGetMembersWithAttendStatus.RUnlock()
	return calls
}

// GetMembersWithAttendStatusWithSd calls GetMembersWithAttendStatusWithSdFunc.
func (mock *StoreMock) GetMembersWithAttendStatusWithSd(ctx context.Context, sd Sd, where parameter.WhereMemberParam, order parameter.MemberOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MemberWithAttendStatus], error) {
	if mock.GetMembersWithAttendStatusWithSdFunc == nil {
		panic("StoreMock.GetMembersWithAttendStatusWithSdFunc: method is nil but Store.GetMembersWithAttendStatusWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereMemberParam
		Order parameter.MemberOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetMembersWithAttendStatusWithSd.Lock()
	mock.calls.GetMembersWithAttendStatusWithSd = append(mock.calls.GetMembersWithAttendStatusWithSd, callInfo)
	mock.lockGetMembersWithAttendStatusWithSd.Unlock()
	return mock.GetMembersWithAttendStatusWithSdFunc(ctx, sd, where, order, np, cp, wc)
}

// GetMembersWithAttendStatusWithSdCalls gets all the calls that were made to GetMembersWithAttendStatusWithSd.
// Check the length with:
//
//	len(mockedStore.GetMembersWithAttendStatusWithSdCalls())
func (mock *StoreMock) GetMembersWithAttendStatusWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereMemberParam
	Order parameter.MemberOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereMemberParam
		Order parameter.MemberOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetMembersWithAttendStatusWithSd.RLock()
	calls = mock.calls.GetMembersWithAttendStatusWithSd
	mock.lockGetMembersWithAttendStatusWithSd.RUnlock()
	return calls
}

// GetMembersWithCrew calls GetMembersWithCrewFunc.
func (mock *StoreMock) GetMembersWithCrew(ctx context.Context, where parameter.WhereMemberParam, order parameter.MemberOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MemberWithCrew], error) {
	if mock.GetMembersWithCrewFunc == nil {
		panic("StoreMock.GetMembersWithCrewFunc: method is nil but Store.GetMembersWithCrew was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereMemberParam
		Order parameter.MemberOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetMembersWithCrew.Lock()
	mock.calls.GetMembersWithCrew = append(mock.calls.GetMembersWithCrew, callInfo)
	mock.lockGetMembersWithCrew.Unlock()
	return mock.GetMembersWithCrewFunc(ctx, where, order, np, cp, wc)
}

// GetMembersWithCrewCalls gets all the calls that were made to GetMembersWithCrew.
// Check the length with:
//
//	len(mockedStore.GetMembersWithCrewCalls())
func (mock *StoreMock) GetMembersWithCrewCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereMemberParam
	Order parameter.MemberOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereMemberParam
		Order parameter.MemberOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetMembersWithCrew.RLock()
	calls = mock.calls.GetMembersWithCrew
	mock.lockGetMembersWithCrew.RUnlock()
	return calls
}

// GetMembersWithCrewWithSd calls GetMembersWithCrewWithSdFunc.
func (mock *StoreMock) GetMembersWithCrewWithSd(ctx context.Context, sd Sd, where parameter.WhereMemberParam, order parameter.MemberOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MemberWithCrew], error) {
	if mock.GetMembersWithCrewWithSdFunc == nil {
		panic("StoreMock.GetMembersWithCrewWithSdFunc: method is nil but Store.GetMembersWithCrewWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereMemberParam
		Order parameter.MemberOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetMembersWithCrewWithSd.Lock()
	mock.calls.GetMembersWithCrewWithSd = append(mock.calls.GetMembersWithCrewWithSd, callInfo)
	mock.lockGetMembersWithCrewWithSd.Unlock()
	return mock.GetMembersWithCrewWithSdFunc(ctx, sd, where, order, np, cp, wc)
}

// GetMembersWithCrewWithSdCalls gets all the calls that were made to GetMembersWithCrewWithSd.
// Check the length with:
//
//	len(mockedStore.GetMembersWithCrewWithSdCalls())
func (mock *StoreMock) GetMembersWithCrewWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereMemberParam
	Order parameter.MemberOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereMemberParam
		Order parameter.MemberOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetMembersWithCrewWithSd.RLock()
	calls = mock.calls.GetMembersWithCrewWithSd
	mock.lockGetMembersWithCrewWithSd.RUnlock()
	return calls
}

// GetMembersWithDetail calls GetMembersWithDetailFunc.
func (mock *StoreMock) GetMembersWithDetail(ctx context.Context, where parameter.WhereMemberParam, order parameter.MemberOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MemberWithDetail], error) {
	if mock.GetMembersWithDetailFunc == nil {
		panic("StoreMock.GetMembersWithDetailFunc: method is nil but Store.GetMembersWithDetail was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereMemberParam
		Order parameter.MemberOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetMembersWithDetail.Lock()
	mock.calls.GetMembersWithDetail = append(mock.calls.GetMembersWithDetail, callInfo)
	mock.lockGetMembersWithDetail.Unlock()
	return mock.GetMembersWithDetailFunc(ctx, where, order, np, cp, wc)
}

// GetMembersWithDetailCalls gets all the calls that were made to GetMembersWithDetail.
// Check the length with:
//
//	len(mockedStore.GetMembersWithDetailCalls())
func (mock *StoreMock) GetMembersWithDetailCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereMemberParam
	Order parameter.MemberOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereMemberParam
		Order parameter.MemberOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetMembersWithDetail.RLock()
	calls = mock.calls.GetMembersWithDetail
	mock.lockGetMembersWithDetail.RUnlock()
	return calls
}

// GetMembersWithDetailWithSd calls GetMembersWithDetailWithSdFunc.
func (mock *StoreMock) GetMembersWithDetailWithSd(ctx context.Context, sd Sd, where parameter.WhereMemberParam, order parameter.MemberOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MemberWithDetail], error) {
	if mock.GetMembersWithDetailWithSdFunc == nil {
		panic("StoreMock.GetMembersWithDetailWithSdFunc: method is nil but Store.GetMembersWithDetailWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereMemberParam
		Order parameter.MemberOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetMembersWithDetailWithSd.Lock()
	mock.calls.GetMembersWithDetailWithSd = append(mock.calls.GetMembersWithDetailWithSd, callInfo)
	mock.lockGetMembersWithDetailWithSd.Unlock()
	return mock.GetMembersWithDetailWithSdFunc(ctx, sd, where, order, np, cp, wc)
}

// GetMembersWithDetailWithSdCalls gets all the calls that were made to GetMembersWithDetailWithSd.
// Check the length with:
//
//	len(mockedStore.GetMembersWithDetailWithSdCalls())
func (mock *StoreMock) GetMembersWithDetailWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereMemberParam
	Order parameter.MemberOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereMemberParam
		Order parameter.MemberOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetMembersWithDetailWithSd.RLock()
	calls = mock.calls.GetMembersWithDetailWithSd
	mock.lockGetMembersWithDetailWithSd.RUnlock()
	return calls
}

// GetMembersWithPersonalOrganization calls GetMembersWithPersonalOrganizationFunc.
func (mock *StoreMock) GetMembersWithPersonalOrganization(ctx context.Context, where parameter.WhereMemberParam, order parameter.MemberOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MemberWithPersonalOrganization], error) {
	if mock.GetMembersWithPersonalOrganizationFunc == nil {
		panic("StoreMock.GetMembersWithPersonalOrganizationFunc: method is nil but Store.GetMembersWithPersonalOrganization was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereMemberParam
		Order parameter.MemberOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetMembersWithPersonalOrganization.Lock()
	mock.calls.GetMembersWithPersonalOrganization = append(mock.calls.GetMembersWithPersonalOrganization, callInfo)
	mock.lockGetMembersWithPersonalOrganization.Unlock()
	return mock.GetMembersWithPersonalOrganizationFunc(ctx, where, order, np, cp, wc)
}

// GetMembersWithPersonalOrganizationCalls gets all the calls that were made to GetMembersWithPersonalOrganization.
// Check the length with:
//
//	len(mockedStore.GetMembersWithPersonalOrganizationCalls())
func (mock *StoreMock) GetMembersWithPersonalOrganizationCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereMemberParam
	Order parameter.MemberOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereMemberParam
		Order parameter.MemberOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetMembersWithPersonalOrganization.RLock()
	calls = mock.calls.GetMembersWithPersonalOrganization
	mock.lockGetMembersWithPersonalOrganization.RUnlock()
	return calls
}

// GetMembersWithPersonalOrganizationWithSd calls GetMembersWithPersonalOrganizationWithSdFunc.
func (mock *StoreMock) GetMembersWithPersonalOrganizationWithSd(ctx context.Context, sd Sd, where parameter.WhereMemberParam, order parameter.MemberOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MemberWithPersonalOrganization], error) {
	if mock.GetMembersWithPersonalOrganizationWithSdFunc == nil {
		panic("StoreMock.GetMembersWithPersonalOrganizationWithSdFunc: method is nil but Store.GetMembersWithPersonalOrganizationWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereMemberParam
		Order parameter.MemberOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetMembersWithPersonalOrganizationWithSd.Lock()
	mock.calls.GetMembersWithPersonalOrganizationWithSd = append(mock.calls.GetMembersWithPersonalOrganizationWithSd, callInfo)
	mock.lockGetMembersWithPersonalOrganizationWithSd.Unlock()
	return mock.GetMembersWithPersonalOrganizationWithSdFunc(ctx, sd, where, order, np, cp, wc)
}

// GetMembersWithPersonalOrganizationWithSdCalls gets all the calls that were made to GetMembersWithPersonalOrganizationWithSd.
// Check the length with:
//
//	len(mockedStore.GetMembersWithPersonalOrganizationWithSdCalls())
func (mock *StoreMock) GetMembersWithPersonalOrganizationWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereMemberParam
	Order parameter.MemberOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereMemberParam
		Order parameter.MemberOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetMembersWithPersonalOrganizationWithSd.RLock()
	calls = mock.calls.GetMembersWithPersonalOrganizationWithSd
	mock.lockGetMembersWithPersonalOrganizationWithSd.RUnlock()
	return calls
}

// GetMembersWithProfileImage calls GetMembersWithProfileImageFunc.
func (mock *StoreMock) GetMembersWithProfileImage(ctx context.Context, where parameter.WhereMemberParam, order parameter.MemberOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MemberWithProfileImage], error) {
	if mock.GetMembersWithProfileImageFunc == nil {
		panic("StoreMock.GetMembersWithProfileImageFunc: method is nil but Store.GetMembersWithProfileImage was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereMemberParam
		Order parameter.MemberOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetMembersWithProfileImage.Lock()
	mock.calls.GetMembersWithProfileImage = append(mock.calls.GetMembersWithProfileImage, callInfo)
	mock.lockGetMembersWithProfileImage.Unlock()
	return mock.GetMembersWithProfileImageFunc(ctx, where, order, np, cp, wc)
}

// GetMembersWithProfileImageCalls gets all the calls that were made to GetMembersWithProfileImage.
// Check the length with:
//
//	len(mockedStore.GetMembersWithProfileImageCalls())
func (mock *StoreMock) GetMembersWithProfileImageCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereMemberParam
	Order parameter.MemberOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereMemberParam
		Order parameter.MemberOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetMembersWithProfileImage.RLock()
	calls = mock.calls.GetMembersWithProfileImage
	mock.lockGetMembersWithProfileImage.RUnlock()
	return calls
}

// GetMembersWithProfileImageWithSd calls GetMembersWithProfileImageWithSdFunc.
func (mock *StoreMock) GetMembersWithProfileImageWithSd(ctx context.Context, sd Sd, where parameter.WhereMemberParam, order parameter.MemberOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MemberWithProfileImage], error) {
	if mock.GetMembersWithProfileImageWithSdFunc == nil {
		panic("StoreMock.GetMembersWithProfileImageWithSdFunc: method is nil but Store.GetMembersWithProfileImageWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereMemberParam
		Order parameter.MemberOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetMembersWithProfileImageWithSd.Lock()
	mock.calls.GetMembersWithProfileImageWithSd = append(mock.calls.GetMembersWithProfileImageWithSd, callInfo)
	mock.lockGetMembersWithProfileImageWithSd.Unlock()
	return mock.GetMembersWithProfileImageWithSdFunc(ctx, sd, where, order, np, cp, wc)
}

// GetMembersWithProfileImageWithSdCalls gets all the calls that were made to GetMembersWithProfileImageWithSd.
// Check the length with:
//
//	len(mockedStore.GetMembersWithProfileImageWithSdCalls())
func (mock *StoreMock) GetMembersWithProfileImageWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereMemberParam
	Order parameter.MemberOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereMemberParam
		Order parameter.MemberOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetMembersWithProfileImageWithSd.RLock()
	calls = mock.calls.GetMembersWithProfileImageWithSd
	mock.lockGetMembersWithProfileImageWithSd.RUnlock()
	return calls
}

// GetMembersWithRole calls GetMembersWithRoleFunc.
func (mock *StoreMock) GetMembersWithRole(ctx context.Context, where parameter.WhereMemberParam, order parameter.MemberOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MemberWithRole], error) {
	if mock.GetMembersWithRoleFunc == nil {
		panic("StoreMock.GetMembersWithRoleFunc: method is nil but Store.GetMembersWithRole was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereMemberParam
		Order parameter.MemberOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetMembersWithRole.Lock()
	mock.calls.GetMembersWithRole = append(mock.calls.GetMembersWithRole, callInfo)
	mock.lockGetMembersWithRole.Unlock()
	return mock.GetMembersWithRoleFunc(ctx, where, order, np, cp, wc)
}

// GetMembersWithRoleCalls gets all the calls that were made to GetMembersWithRole.
// Check the length with:
//
//	len(mockedStore.GetMembersWithRoleCalls())
func (mock *StoreMock) GetMembersWithRoleCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereMemberParam
	Order parameter.MemberOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereMemberParam
		Order parameter.MemberOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetMembersWithRole.RLock()
	calls = mock.calls.GetMembersWithRole
	mock.lockGetMembersWithRole.RUnlock()
	return calls
}

// GetMembersWithRoleWithSd calls GetMembersWithRoleWithSdFunc.
func (mock *StoreMock) GetMembersWithRoleWithSd(ctx context.Context, sd Sd, where parameter.WhereMemberParam, order parameter.MemberOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MemberWithRole], error) {
	if mock.GetMembersWithRoleWithSdFunc == nil {
		panic("StoreMock.GetMembersWithRoleWithSdFunc: method is nil but Store.GetMembersWithRoleWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereMemberParam
		Order parameter.MemberOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetMembersWithRoleWithSd.Lock()
	mock.calls.GetMembersWithRoleWithSd = append(mock.calls.GetMembersWithRoleWithSd, callInfo)
	mock.lockGetMembersWithRoleWithSd.Unlock()
	return mock.GetMembersWithRoleWithSdFunc(ctx, sd, where, order, np, cp, wc)
}

// GetMembersWithRoleWithSdCalls gets all the calls that were made to GetMembersWithRoleWithSd.
// Check the length with:
//
//	len(mockedStore.GetMembersWithRoleWithSdCalls())
func (mock *StoreMock) GetMembersWithRoleWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereMemberParam
	Order parameter.MemberOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereMemberParam
		Order parameter.MemberOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetMembersWithRoleWithSd.RLock()
	calls = mock.calls.GetMembersWithRoleWithSd
	mock.lockGetMembersWithRoleWithSd.RUnlock()
	return calls
}

// GetMembersWithSd calls GetMembersWithSdFunc.
func (mock *StoreMock) GetMembersWithSd(ctx context.Context, sd Sd, where parameter.WhereMemberParam, order parameter.MemberOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Member], error) {
	if mock.GetMembersWithSdFunc == nil {
		panic("StoreMock.GetMembersWithSdFunc: method is nil but Store.GetMembersWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereMemberParam
		Order parameter.MemberOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetMembersWithSd.Lock()
	mock.calls.GetMembersWithSd = append(mock.calls.GetMembersWithSd, callInfo)
	mock.lockGetMembersWithSd.Unlock()
	return mock.GetMembersWithSdFunc(ctx, sd, where, order, np, cp, wc)
}

// GetMembersWithSdCalls gets all the calls that were made to GetMembersWithSd.
// Check the length with:
//
//	len(mockedStore.GetMembersWithSdCalls())
func (mock *StoreMock) GetMembersWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereMemberParam
	Order parameter.MemberOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereMemberParam
		Order parameter.MemberOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetMembersWithSd.RLock()
	calls = mock.calls.GetMembersWithSd
	mock.lockGetMembersWithSd.RUnlock()
	return calls
}

// GetMessages calls GetMessagesFunc.
func (mock *StoreMock) GetMessages(ctx context.Context, where parameter.WhereMessageParam, order parameter.MessageOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Message], error) {
	if mock.GetMessagesFunc == nil {
		panic("StoreMock.GetMessagesFunc: method is nil but Store.GetMessages was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereMessageParam
		Order parameter.MessageOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetMessages.Lock()
	mock.calls.GetMessages = append(mock.calls.GetMessages, callInfo)
	mock.lockGetMessages.Unlock()
	return mock.GetMessagesFunc(ctx, where, order, np, cp, wc)
}

// GetMessagesCalls gets all the calls that were made to GetMessages.
// Check the length with:
//
//	len(mockedStore.GetMessagesCalls())
func (mock *StoreMock) GetMessagesCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereMessageParam
	Order parameter.MessageOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereMessageParam
		Order parameter.MessageOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetMessages.RLock()
	calls = mock.calls.GetMessages
	mock.lockGetMessages.RUnlock()
	return calls
}

// GetMessagesWithChatRoom calls GetMessagesWithChatRoomFunc.
func (mock *StoreMock) GetMessagesWithChatRoom(ctx context.Context, where parameter.WhereMessageParam, order parameter.MessageOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MessageWithChatRoom], error) {
	if mock.GetMessagesWithChatRoomFunc == nil {
		panic("StoreMock.GetMessagesWithChatRoomFunc: method is nil but Store.GetMessagesWithChatRoom was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereMessageParam
		Order parameter.MessageOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetMessagesWithChatRoom.Lock()
	mock.calls.GetMessagesWithChatRoom = append(mock.calls.GetMessagesWithChatRoom, callInfo)
	mock.lockGetMessagesWithChatRoom.Unlock()
	return mock.GetMessagesWithChatRoomFunc(ctx, where, order, np, cp, wc)
}

// GetMessagesWithChatRoomCalls gets all the calls that were made to GetMessagesWithChatRoom.
// Check the length with:
//
//	len(mockedStore.GetMessagesWithChatRoomCalls())
func (mock *StoreMock) GetMessagesWithChatRoomCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereMessageParam
	Order parameter.MessageOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereMessageParam
		Order parameter.MessageOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetMessagesWithChatRoom.RLock()
	calls = mock.calls.GetMessagesWithChatRoom
	mock.lockGetMessagesWithChatRoom.RUnlock()
	return calls
}

// GetMessagesWithChatRoomWithSd calls GetMessagesWithChatRoomWithSdFunc.
func (mock *StoreMock) GetMessagesWithChatRoomWithSd(ctx context.Context, sd Sd, where parameter.WhereMessageParam, order parameter.MessageOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MessageWithChatRoom], error) {
	if mock.GetMessagesWithChatRoomWithSdFunc == nil {
		panic("StoreMock.GetMessagesWithChatRoomWithSdFunc: method is nil but Store.GetMessagesWithChatRoomWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereMessageParam
		Order parameter.MessageOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetMessagesWithChatRoomWithSd.Lock()
	mock.calls.GetMessagesWithChatRoomWithSd = append(mock.calls.GetMessagesWithChatRoomWithSd, callInfo)
	mock.lockGetMessagesWithChatRoomWithSd.Unlock()
	return mock.GetMessagesWithChatRoomWithSdFunc(ctx, sd, where, order, np, cp, wc)
}

// GetMessagesWithChatRoomWithSdCalls gets all the calls that were made to GetMessagesWithChatRoomWithSd.
// Check the length with:
//
//	len(mockedStore.GetMessagesWithChatRoomWithSdCalls())
func (mock *StoreMock) GetMessagesWithChatRoomWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereMessageParam
	Order parameter.MessageOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereMessageParam
		Order parameter.MessageOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetMessagesWithChatRoomWithSd.RLock()
	calls = mock.calls.GetMessagesWithChatRoomWithSd
	mock.lockGetMessagesWithChatRoomWithSd.RUnlock()
	return calls
}

// GetMessagesWithSd calls GetMessagesWithSdFunc.
func (mock *StoreMock) GetMessagesWithSd(ctx context.Context, sd Sd, where parameter.WhereMessageParam, order parameter.MessageOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Message], error) {
	if mock.GetMessagesWithSdFunc == nil {
		panic("StoreMock.GetMessagesWithSdFunc: method is nil but Store.GetMessagesWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereMessageParam
		Order parameter.MessageOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetMessagesWithSd.Lock()
	mock.calls.GetMessagesWithSd = append(mock.calls.GetMessagesWithSd, callInfo)
	mock.lockGetMessagesWithSd.Unlock()
	return mock.GetMessagesWithSdFunc(ctx, sd, where, order, np, cp, wc)
}

// GetMessagesWithSdCalls gets all the calls that were made to GetMessagesWithSd.
// Check the length with:
//
//	len(mockedStore.GetMessagesWithSdCalls())
func (mock *StoreMock) GetMessagesWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereMessageParam
	Order parameter.MessageOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereMessageParam
		Order parameter.MessageOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetMessagesWithSd.RLock()
	calls = mock.calls.GetMessagesWithSd
	mock.lockGetMessagesWithSd.RUnlock()
	return calls
}

// GetMessagesWithSender calls GetMessagesWithSenderFunc.
func (mock *StoreMock) GetMessagesWithSender(ctx context.Context, where parameter.WhereMessageParam, order parameter.MessageOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MessageWithSender], error) {
	if mock.GetMessagesWithSenderFunc == nil {
		panic("StoreMock.GetMessagesWithSenderFunc: method is nil but Store.GetMessagesWithSender was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereMessageParam
		Order parameter.MessageOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetMessagesWithSender.Lock()
	mock.calls.GetMessagesWithSender = append(mock.calls.GetMessagesWithSender, callInfo)
	mock.lockGetMessagesWithSender.Unlock()
	return mock.GetMessagesWithSenderFunc(ctx, where, order, np, cp, wc)
}

// GetMessagesWithSenderCalls gets all the calls that were made to GetMessagesWithSender.
// Check the length with:
//
//	len(mockedStore.GetMessagesWithSenderCalls())
func (mock *StoreMock) GetMessagesWithSenderCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereMessageParam
	Order parameter.MessageOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereMessageParam
		Order parameter.MessageOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetMessagesWithSender.RLock()
	calls = mock.calls.GetMessagesWithSender
	mock.lockGetMessagesWithSender.RUnlock()
	return calls
}

// GetMessagesWithSenderWithSd calls GetMessagesWithSenderWithSdFunc.
func (mock *StoreMock) GetMessagesWithSenderWithSd(ctx context.Context, sd Sd, where parameter.WhereMessageParam, order parameter.MessageOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MessageWithSender], error) {
	if mock.GetMessagesWithSenderWithSdFunc == nil {
		panic("StoreMock.GetMessagesWithSenderWithSdFunc: method is nil but Store.GetMessagesWithSenderWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereMessageParam
		Order parameter.MessageOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetMessagesWithSenderWithSd.Lock()
	mock.calls.GetMessagesWithSenderWithSd = append(mock.calls.GetMessagesWithSenderWithSd, callInfo)
	mock.lockGetMessagesWithSenderWithSd.Unlock()
	return mock.GetMessagesWithSenderWithSdFunc(ctx, sd, where, order, np, cp, wc)
}

// GetMessagesWithSenderWithSdCalls gets all the calls that were made to GetMessagesWithSenderWithSd.
// Check the length with:
//
//	len(mockedStore.GetMessagesWithSenderWithSdCalls())
func (mock *StoreMock) GetMessagesWithSenderWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereMessageParam
	Order parameter.MessageOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereMessageParam
		Order parameter.MessageOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetMessagesWithSenderWithSd.RLock()
	calls = mock.calls.GetMessagesWithSenderWithSd
	mock.lockGetMessagesWithSenderWithSd.RUnlock()
	return calls
}

// GetMimeTypes calls GetMimeTypesFunc.
func (mock *StoreMock) GetMimeTypes(ctx context.Context, where parameter.WhereMimeTypeParam, order parameter.MimeTypeOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MimeType], error) {
	if mock.GetMimeTypesFunc == nil {
		panic("StoreMock.GetMimeTypesFunc: method is nil but Store.GetMimeTypes was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereMimeTypeParam
		Order parameter.MimeTypeOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetMimeTypes.Lock()
	mock.calls.GetMimeTypes = append(mock.calls.GetMimeTypes, callInfo)
	mock.lockGetMimeTypes.Unlock()
	return mock.GetMimeTypesFunc(ctx, where, order, np, cp, wc)
}

// GetMimeTypesCalls gets all the calls that were made to GetMimeTypes.
// Check the length with:
//
//	len(mockedStore.GetMimeTypesCalls())
func (mock *StoreMock) GetMimeTypesCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereMimeTypeParam
	Order parameter.MimeTypeOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereMimeTypeParam
		Order parameter.MimeTypeOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetMimeTypes.RLock()
	calls = mock.calls.GetMimeTypes
	mock.lockGetMimeTypes.RUnlock()
	return calls
}

// GetMimeTypesWithSd calls GetMimeTypesWithSdFunc.
func (mock *StoreMock) GetMimeTypesWithSd(ctx context.Context, sd Sd, where parameter.WhereMimeTypeParam, order parameter.MimeTypeOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MimeType], error) {
	if mock.GetMimeTypesWithSdFunc == nil {
		panic("StoreMock.GetMimeTypesWithSdFunc: method is nil but Store.GetMimeTypesWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereMimeTypeParam
		Order parameter.MimeTypeOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetMimeTypesWithSd.Lock()
	mock.calls.GetMimeTypesWithSd = append(mock.calls.GetMimeTypesWithSd, callInfo)
	mock.lockGetMimeTypesWithSd.Unlock()
	return mock.GetMimeTypesWithSdFunc(ctx, sd, where, order, np, cp, wc)
}

// GetMimeTypesWithSdCalls gets all the calls that were made to GetMimeTypesWithSd.
// Check the length with:
//
//	len(mockedStore.GetMimeTypesWithSdCalls())
func (mock *StoreMock) GetMimeTypesWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereMimeTypeParam
	Order parameter.MimeTypeOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereMimeTypeParam
		Order parameter.MimeTypeOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetMimeTypesWithSd.RLock()
	calls = mock.calls.GetMimeTypesWithSd
	mock.lockGetMimeTypesWithSd.RUnlock()
	return calls
}

// GetOrganizations calls GetOrganizationsFunc.
func (mock *StoreMock) GetOrganizations(ctx context.Context, where parameter.WhereOrganizationParam, order parameter.OrganizationOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Organization], error) {
	if mock.GetOrganizationsFunc == nil {
		panic("StoreMock.GetOrganizationsFunc: method is nil but Store.GetOrganizations was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereOrganizationParam
		Order parameter.OrganizationOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetOrganizations.Lock()
	mock.calls.GetOrganizations = append(mock.calls.GetOrganizations, callInfo)
	mock.lockGetOrganizations.Unlock()
	return mock.GetOrganizationsFunc(ctx, where, order, np, cp, wc)
}

// GetOrganizationsCalls gets all the calls that were made to GetOrganizations.
// Check the length with:
//
//	len(mockedStore.GetOrganizationsCalls())
func (mock *StoreMock) GetOrganizationsCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereOrganizationParam
	Order parameter.OrganizationOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereOrganizationParam
		Order parameter.OrganizationOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetOrganizations.RLock()
	calls = mock.calls.GetOrganizations
	mock.lockGetOrganizations.RUnlock()
	return calls
}

// GetOrganizationsOnMember calls GetOrganizationsOnMemberFunc.
func (mock *StoreMock) GetOrganizationsOnMember(ctx context.Context, memberID uuid.UUID, where parameter.WhereOrganizationOnMemberParam, order parameter.OrganizationOnMemberOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.OrganizationOnMember], error) {
	if mock.GetOrganizationsOnMemberFunc == nil {
		panic("StoreMock.GetOrganizationsOnMemberFunc: method is nil but Store.GetOrganizationsOnMember was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		MemberID uuid.UUID
		Where    parameter.WhereOrganizationOnMemberParam
		Order    parameter.OrganizationOnMemberOrderMethod
		Np       NumberedPaginationParam
		Cp       CursorPaginationParam
		Wc       WithCountParam
	}{
		Ctx:      ctx,
		MemberID: memberID,
		Where:    where,
		Order:    order,
		Np:       np,
		Cp:       cp,
		Wc:       wc,
	}
	mock.lockGetOrganizationsOnMember.Lock()
	mock.calls.GetOrganizationsOnMember = append(mock.calls.GetOrganizationsOnMember, callInfo)
	mock.lockGetOrganizationsOnMember.Unlock()
	return mock.GetOrganizationsOnMemberFunc(ctx, memberID, where, order, np, cp, wc)
}

// GetOrganizationsOnMemberCalls gets all the calls that were made to GetOrganizationsOnMember.
// Check the length with:
//
//	len(mockedStore.GetOrganizationsOnMemberCalls())
func (mock *StoreMock) GetOrganizationsOnMemberCalls() []struct {
	Ctx      context.Context
	MemberID uuid.UUID
	Where    parameter.WhereOrganizationOnMemberParam
	Order    parameter.OrganizationOnMemberOrderMethod
	Np       NumberedPaginationParam
	Cp       CursorPaginationParam
	Wc       WithCountParam
} {
	var calls []struct {
		Ctx      context.Context
		MemberID uuid.UUID
		Where    parameter.WhereOrganizationOnMemberParam
		Order    parameter.OrganizationOnMemberOrderMethod
		Np       NumberedPaginationParam
		Cp       CursorPaginationParam
		Wc       WithCountParam
	}
	mock.lockGetOrganizationsOnMember.RLock()
	calls = mock.calls.GetOrganizationsOnMember
	mock.lockGetOrganizationsOnMember.RUnlock()
	return calls
}

// GetOrganizationsOnMemberWithSd calls GetOrganizationsOnMemberWithSdFunc.
func (mock *StoreMock) GetOrganizationsOnMemberWithSd(ctx context.Context, sd Sd, memberID uuid.UUID, where parameter.WhereOrganizationOnMemberParam, order parameter.OrganizationOnMemberOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.OrganizationOnMember], error) {
	if mock.GetOrganizationsOnMemberWithSdFunc == nil {
		panic("StoreMock.GetOrganizationsOnMemberWithSdFunc: method is nil but Store.GetOrganizationsOnMemberWithSd was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Sd       Sd
		MemberID uuid.UUID
		Where    parameter.WhereOrganizationOnMemberParam
		Order    parameter.OrganizationOnMemberOrderMethod
		Np       NumberedPaginationParam
		Cp       CursorPaginationParam
		Wc       WithCountParam
	}{
		Ctx:      ctx,
		Sd:       sd,
		MemberID: memberID,
		Where:    where,
		Order:    order,
		Np:       np,
		Cp:       cp,
		Wc:       wc,
	}
	mock.lockGetOrganizationsOnMemberWithSd.Lock()
	mock.calls.GetOrganizationsOnMemberWithSd = append(mock.calls.GetOrganizationsOnMemberWithSd, callInfo)
	mock.lockGetOrganizationsOnMemberWithSd.Unlock()
	return mock.GetOrganizationsOnMemberWithSdFunc(ctx, sd, memberID, where, order, np, cp, wc)
}

// GetOrganizationsOnMemberWithSdCalls gets all the calls that were made to GetOrganizationsOnMemberWithSd.
// Check the length with:
//
//	len(mockedStore.GetOrganizationsOnMemberWithSdCalls())
func (mock *StoreMock) GetOrganizationsOnMemberWithSdCalls() []struct {
	Ctx      context.Context
	Sd       Sd
	MemberID uuid.UUID
	Where    parameter.WhereOrganizationOnMemberParam
	Order    parameter.OrganizationOnMemberOrderMethod
	Np       NumberedPaginationParam
	Cp       CursorPaginationParam
	Wc       WithCountParam
} {
	var calls []struct {
		Ctx      context.Context
		Sd       Sd
		MemberID uuid.UUID
		Where    parameter.WhereOrganizationOnMemberParam
		Order    parameter.OrganizationOnMemberOrderMethod
		Np       NumberedPaginationParam
		Cp       CursorPaginationParam
		Wc       WithCountParam
	}
	mock.lockGetOrganizationsOnMemberWithSd.RLock()
	calls = mock.calls.GetOrganizationsOnMemberWithSd
	mock.lockGetOrganizationsOnMemberWithSd.RUnlock()
	return calls
}

// GetOrganizationsWithChatRoom calls GetOrganizationsWithChatRoomFunc.
func (mock *StoreMock) GetOrganizationsWithChatRoom(ctx context.Context, where parameter.WhereOrganizationParam, order parameter.OrganizationOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.OrganizationWithChatRoom], error) {
	if mock.GetOrganizationsWithChatRoomFunc == nil {
		panic("StoreMock.GetOrganizationsWithChatRoomFunc: method is nil but Store.GetOrganizationsWithChatRoom was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereOrganizationParam
		Order parameter.OrganizationOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetOrganizationsWithChatRoom.Lock()
	mock.calls.GetOrganizationsWithChatRoom = append(mock.calls.GetOrganizationsWithChatRoom, callInfo)
	mock.lockGetOrganizationsWithChatRoom.Unlock()
	return mock.GetOrganizationsWithChatRoomFunc(ctx, where, order, np, cp, wc)
}

// GetOrganizationsWithChatRoomCalls gets all the calls that were made to GetOrganizationsWithChatRoom.
// Check the length with:
//
//	len(mockedStore.GetOrganizationsWithChatRoomCalls())
func (mock *StoreMock) GetOrganizationsWithChatRoomCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereOrganizationParam
	Order parameter.OrganizationOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereOrganizationParam
		Order parameter.OrganizationOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetOrganizationsWithChatRoom.RLock()
	calls = mock.calls.GetOrganizationsWithChatRoom
	mock.lockGetOrganizationsWithChatRoom.RUnlock()
	return calls
}

// GetOrganizationsWithChatRoomAndDetail calls GetOrganizationsWithChatRoomAndDetailFunc.
func (mock *StoreMock) GetOrganizationsWithChatRoomAndDetail(ctx context.Context, where parameter.WhereOrganizationParam, order parameter.OrganizationOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.OrganizationWithChatRoomAndDetail], error) {
	if mock.GetOrganizationsWithChatRoomAndDetailFunc == nil {
		panic("StoreMock.GetOrganizationsWithChatRoomAndDetailFunc: method is nil but Store.GetOrganizationsWithChatRoomAndDetail was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereOrganizationParam
		Order parameter.OrganizationOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetOrganizationsWithChatRoomAndDetail.Lock()
	mock.calls.GetOrganizationsWithChatRoomAndDetail = append(mock.calls.GetOrganizationsWithChatRoomAndDetail, callInfo)
	mock.lockGetOrganizationsWithChatRoomAndDetail.Unlock()
	return mock.GetOrganizationsWithChatRoomAndDetailFunc(ctx, where, order, np, cp, wc)
}

// GetOrganizationsWithChatRoomAndDetailCalls gets all the calls that were made to GetOrganizationsWithChatRoomAndDetail.
// Check the length with:
//
//	len(mockedStore.GetOrganizationsWithChatRoomAndDetailCalls())
func (mock *StoreMock) GetOrganizationsWithChatRoomAndDetailCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereOrganizationParam
	Order parameter.OrganizationOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereOrganizationParam
		Order parameter.OrganizationOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetOrganizationsWithChatRoomAndDetail.RLock()
	calls = mock.calls.GetOrganizationsWithChatRoomAndDetail
	mock.lockGetOrganizationsWithChatRoomAndDetail.RUnlock()
	return calls
}

// GetOrganizationsWithChatRoomAndDetailWithSd calls GetOrganizationsWithChatRoomAndDetailWithSdFunc.
func (mock *StoreMock) GetOrganizationsWithChatRoomAndDetailWithSd(ctx context.Context, sd Sd, where parameter.WhereOrganizationParam, order parameter.OrganizationOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.OrganizationWithChatRoomAndDetail], error) {
	if mock.GetOrganizationsWithChatRoomAndDetailWithSdFunc == nil {
		panic("StoreMock.GetOrganizationsWithChatRoomAndDetailWithSdFunc: method is nil but Store.GetOrganizationsWithChatRoomAndDetailWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereOrganizationParam
		Order parameter.OrganizationOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetOrganizationsWithChatRoomAndDetailWithSd.Lock()
	mock.calls.GetOrganizationsWithChatRoomAndDetailWithSd = append(mock.calls.GetOrganizationsWithChatRoomAndDetailWithSd, callInfo)
	mock.lockGetOrganizationsWithChatRoomAndDetailWithSd.Unlock()
	return mock.GetOrganizationsWithChatRoomAndDetailWithSdFunc(ctx, sd, where, order, np, cp, wc)
}

// GetOrganizationsWithChatRoomAndDetailWithSdCalls gets all the calls that were made to GetOrganizationsWithChatRoomAndDetailWithSd.
// Check the length with:
//
//	len(mockedStore.GetOrganizationsWithChatRoomAndDetailWithSdCalls())
func (mock *StoreMock) GetOrganizationsWithChatRoomAndDetailWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereOrganizationParam
	Order parameter.OrganizationOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereOrganizationParam
		Order parameter.OrganizationOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetOrganizationsWithChatRoomAndDetailWithSd.RLock()
	calls = mock.calls.GetOrganizationsWithChatRoomAndDetailWithSd
	mock.lockGetOrganizationsWithChatRoomAndDetailWithSd.RUnlock()
	return calls
}

// GetOrganizationsWithChatRoomWithSd calls GetOrganizationsWithChatRoomWithSdFunc.
func (mock *StoreMock) GetOrganizationsWithChatRoomWithSd(ctx context.Context, sd Sd, where parameter.WhereOrganizationParam, order parameter.OrganizationOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.OrganizationWithChatRoom], error) {
	if mock.GetOrganizationsWithChatRoomWithSdFunc == nil {
		panic("StoreMock.GetOrganizationsWithChatRoomWithSdFunc: method is nil but Store.GetOrganizationsWithChatRoomWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereOrganizationParam
		Order parameter.OrganizationOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetOrganizationsWithChatRoomWithSd.Lock()
	mock.calls.GetOrganizationsWithChatRoomWithSd = append(mock.calls.GetOrganizationsWithChatRoomWithSd, callInfo)
	mock.lockGetOrganizationsWithChatRoomWithSd.Unlock()
	return mock.GetOrganizationsWithChatRoomWithSdFunc(ctx, sd, where, order, np, cp, wc)
}

// GetOrganizationsWithChatRoomWithSdCalls gets all the calls that were made to GetOrganizationsWithChatRoomWithSd.
// Check the length with:
//
//	len(mockedStore.GetOrganizationsWithChatRoomWithSdCalls())
func (mock *StoreMock) GetOrganizationsWithChatRoomWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereOrganizationParam
	Order parameter.OrganizationOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereOrganizationParam
		Order parameter.OrganizationOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetOrganizationsWithChatRoomWithSd.RLock()
	calls = mock.calls.GetOrganizationsWithChatRoomWithSd
	mock.lockGetOrganizationsWithChatRoomWithSd.RUnlock()
	return calls
}

// GetOrganizationsWithDetail calls GetOrganizationsWithDetailFunc.
func (mock *StoreMock) GetOrganizationsWithDetail(ctx context.Context, where parameter.WhereOrganizationParam, order parameter.OrganizationOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.OrganizationWithDetail], error) {
	if mock.GetOrganizationsWithDetailFunc == nil {
		panic("StoreMock.GetOrganizationsWithDetailFunc: method is nil but Store.GetOrganizationsWithDetail was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereOrganizationParam
		Order parameter.OrganizationOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetOrganizationsWithDetail.Lock()
	mock.calls.GetOrganizationsWithDetail = append(mock.calls.GetOrganizationsWithDetail, callInfo)
	mock.lockGetOrganizationsWithDetail.Unlock()
	return mock.GetOrganizationsWithDetailFunc(ctx, where, order, np, cp, wc)
}

// GetOrganizationsWithDetailCalls gets all the calls that were made to GetOrganizationsWithDetail.
// Check the length with:
//
//	len(mockedStore.GetOrganizationsWithDetailCalls())
func (mock *StoreMock) GetOrganizationsWithDetailCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereOrganizationParam
	Order parameter.OrganizationOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereOrganizationParam
		Order parameter.OrganizationOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetOrganizationsWithDetail.RLock()
	calls = mock.calls.GetOrganizationsWithDetail
	mock.lockGetOrganizationsWithDetail.RUnlock()
	return calls
}

// GetOrganizationsWithDetailWithSd calls GetOrganizationsWithDetailWithSdFunc.
func (mock *StoreMock) GetOrganizationsWithDetailWithSd(ctx context.Context, sd Sd, where parameter.WhereOrganizationParam, order parameter.OrganizationOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.OrganizationWithDetail], error) {
	if mock.GetOrganizationsWithDetailWithSdFunc == nil {
		panic("StoreMock.GetOrganizationsWithDetailWithSdFunc: method is nil but Store.GetOrganizationsWithDetailWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereOrganizationParam
		Order parameter.OrganizationOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetOrganizationsWithDetailWithSd.Lock()
	mock.calls.GetOrganizationsWithDetailWithSd = append(mock.calls.GetOrganizationsWithDetailWithSd, callInfo)
	mock.lockGetOrganizationsWithDetailWithSd.Unlock()
	return mock.GetOrganizationsWithDetailWithSdFunc(ctx, sd, where, order, np, cp, wc)
}

// GetOrganizationsWithDetailWithSdCalls gets all the calls that were made to GetOrganizationsWithDetailWithSd.
// Check the length with:
//
//	len(mockedStore.GetOrganizationsWithDetailWithSdCalls())
func (mock *StoreMock) GetOrganizationsWithDetailWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereOrganizationParam
	Order parameter.OrganizationOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereOrganizationParam
		Order parameter.OrganizationOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetOrganizationsWithDetailWithSd.RLock()
	calls = mock.calls.GetOrganizationsWithDetailWithSd
	mock.lockGetOrganizationsWithDetailWithSd.RUnlock()
	return calls
}

// GetOrganizationsWithSd calls GetOrganizationsWithSdFunc.
func (mock *StoreMock) GetOrganizationsWithSd(ctx context.Context, sd Sd, where parameter.WhereOrganizationParam, order parameter.OrganizationOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Organization], error) {
	if mock.GetOrganizationsWithSdFunc == nil {
		panic("StoreMock.GetOrganizationsWithSdFunc: method is nil but Store.GetOrganizationsWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereOrganizationParam
		Order parameter.OrganizationOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetOrganizationsWithSd.Lock()
	mock.calls.GetOrganizationsWithSd = append(mock.calls.GetOrganizationsWithSd, callInfo)
	mock.lockGetOrganizationsWithSd.Unlock()
	return mock.GetOrganizationsWithSdFunc(ctx, sd, where, order, np, cp, wc)
}

// GetOrganizationsWithSdCalls gets all the calls that were made to GetOrganizationsWithSd.
// Check the length with:
//
//	len(mockedStore.GetOrganizationsWithSdCalls())
func (mock *StoreMock) GetOrganizationsWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereOrganizationParam
	Order parameter.OrganizationOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereOrganizationParam
		Order parameter.OrganizationOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetOrganizationsWithSd.RLock()
	calls = mock.calls.GetOrganizationsWithSd
	mock.lockGetOrganizationsWithSd.RUnlock()
	return calls
}

// GetPermissionCategories calls GetPermissionCategoriesFunc.
func (mock *StoreMock) GetPermissionCategories(ctx context.Context, where parameter.WherePermissionCategoryParam, order parameter.PermissionCategoryOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.PermissionCategory], error) {
	if mock.GetPermissionCategoriesFunc == nil {
		panic("StoreMock.GetPermissionCategoriesFunc: method is nil but Store.GetPermissionCategories was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WherePermissionCategoryParam
		Order parameter.PermissionCategoryOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetPermissionCategories.Lock()
	mock.calls.GetPermissionCategories = append(mock.calls.GetPermissionCategories, callInfo)
	mock.lockGetPermissionCategories.Unlock()
	return mock.GetPermissionCategoriesFunc(ctx, where, order, np, cp, wc)
}

// GetPermissionCategoriesCalls gets all the calls that were made to GetPermissionCategories.
// Check the length with:
//
//	len(mockedStore.GetPermissionCategoriesCalls())
func (mock *StoreMock) GetPermissionCategoriesCalls() []struct {
	Ctx   context.Context
	Where parameter.WherePermissionCategoryParam
	Order parameter.PermissionCategoryOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WherePermissionCategoryParam
		Order parameter.PermissionCategoryOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetPermissionCategories.RLock()
	calls = mock.calls.GetPermissionCategories
	mock.lockGetPermissionCategories.RUnlock()
	return calls
}

// GetPermissionCategoriesWithSd calls GetPermissionCategoriesWithSdFunc.
func (mock *StoreMock) GetPermissionCategoriesWithSd(ctx context.Context, sd Sd, where parameter.WherePermissionCategoryParam, order parameter.PermissionCategoryOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.PermissionCategory], error) {
	if mock.GetPermissionCategoriesWithSdFunc == nil {
		panic("StoreMock.GetPermissionCategoriesWithSdFunc: method is nil but Store.GetPermissionCategoriesWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WherePermissionCategoryParam
		Order parameter.PermissionCategoryOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetPermissionCategoriesWithSd.Lock()
	mock.calls.GetPermissionCategoriesWithSd = append(mock.calls.GetPermissionCategoriesWithSd, callInfo)
	mock.lockGetPermissionCategoriesWithSd.Unlock()
	return mock.GetPermissionCategoriesWithSdFunc(ctx, sd, where, order, np, cp, wc)
}

// GetPermissionCategoriesWithSdCalls gets all the calls that were made to GetPermissionCategoriesWithSd.
// Check the length with:
//
//	len(mockedStore.GetPermissionCategoriesWithSdCalls())
func (mock *StoreMock) GetPermissionCategoriesWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WherePermissionCategoryParam
	Order parameter.PermissionCategoryOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WherePermissionCategoryParam
		Order parameter.PermissionCategoryOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetPermissionCategoriesWithSd.RLock()
	calls = mock.calls.GetPermissionCategoriesWithSd
	mock.lockGetPermissionCategoriesWithSd.RUnlock()
	return calls
}

// GetPermissions calls GetPermissionsFunc.
func (mock *StoreMock) GetPermissions(ctx context.Context, where parameter.WherePermissionParam, order parameter.PermissionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Permission], error) {
	if mock.GetPermissionsFunc == nil {
		panic("StoreMock.GetPermissionsFunc: method is nil but Store.GetPermissions was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WherePermissionParam
		Order parameter.PermissionOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetPermissions.Lock()
	mock.calls.GetPermissions = append(mock.calls.GetPermissions, callInfo)
	mock.lockGetPermissions.Unlock()
	return mock.GetPermissionsFunc(ctx, where, order, np, cp, wc)
}

// GetPermissionsCalls gets all the calls that were made to GetPermissions.
// Check the length with:
//
//	len(mockedStore.GetPermissionsCalls())
func (mock *StoreMock) GetPermissionsCalls() []struct {
	Ctx   context.Context
	Where parameter.WherePermissionParam
	Order parameter.PermissionOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WherePermissionParam
		Order parameter.PermissionOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetPermissions.RLock()
	calls = mock.calls.GetPermissions
	mock.lockGetPermissions.RUnlock()
	return calls
}

// GetPermissionsWithCategory calls GetPermissionsWithCategoryFunc.
func (mock *StoreMock) GetPermissionsWithCategory(ctx context.Context, where parameter.WherePermissionParam, order parameter.PermissionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.PermissionWithCategory], error) {
	if mock.GetPermissionsWithCategoryFunc == nil {
		panic("StoreMock.GetPermissionsWithCategoryFunc: method is nil but Store.GetPermissionsWithCategory was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WherePermissionParam
		Order parameter.PermissionOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetPermissionsWithCategory.Lock()
	mock.calls.GetPermissionsWithCategory = append(mock.calls.GetPermissionsWithCategory, callInfo)
	mock.lockGetPermissionsWithCategory.Unlock()
	return mock.GetPermissionsWithCategoryFunc(ctx, where, order, np, cp, wc)
}

// GetPermissionsWithCategoryCalls gets all the calls that were made to GetPermissionsWithCategory.
// Check the length with:
//
//	len(mockedStore.GetPermissionsWithCategoryCalls())
func (mock *StoreMock) GetPermissionsWithCategoryCalls() []struct {
	Ctx   context.Context
	Where parameter.WherePermissionParam
	Order parameter.PermissionOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WherePermissionParam
		Order parameter.PermissionOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetPermissionsWithCategory.RLock()
	calls = mock.calls.GetPermissionsWithCategory
	mock.lockGetPermissionsWithCategory.RUnlock()
	return calls
}

// GetPermissionsWithCategoryWithSd calls GetPermissionsWithCategoryWithSdFunc.
func (mock *StoreMock) GetPermissionsWithCategoryWithSd(ctx context.Context, sd Sd, where parameter.WherePermissionParam, order parameter.PermissionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.PermissionWithCategory], error) {
	if mock.GetPermissionsWithCategoryWithSdFunc == nil {
		panic("StoreMock.GetPermissionsWithCategoryWithSdFunc: method is nil but Store.GetPermissionsWithCategoryWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WherePermissionParam
		Order parameter.PermissionOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetPermissionsWithCategoryWithSd.Lock()
	mock.calls.GetPermissionsWithCategoryWithSd = append(mock.calls.GetPermissionsWithCategoryWithSd, callInfo)
	mock.lockGetPermissionsWithCategoryWithSd.Unlock()
	return mock.GetPermissionsWithCategoryWithSdFunc(ctx, sd, where, order, np, cp, wc)
}

// GetPermissionsWithCategoryWithSdCalls gets all the calls that were made to GetPermissionsWithCategoryWithSd.
// Check the length with:
//
//	len(mockedStore.GetPermissionsWithCategoryWithSdCalls())
func (mock *StoreMock) GetPermissionsWithCategoryWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WherePermissionParam
	Order parameter.PermissionOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WherePermissionParam
		Order parameter.PermissionOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetPermissionsWithCategoryWithSd.RLock()
	calls = mock.calls.GetPermissionsWithCategoryWithSd
	mock.lockGetPermissionsWithCategoryWithSd.RUnlock()
	return calls
}

// GetPermissionsWithSd calls GetPermissionsWithSdFunc.
func (mock *StoreMock) GetPermissionsWithSd(ctx context.Context, sd Sd, where parameter.WherePermissionParam, order parameter.PermissionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Permission], error) {
	if mock.GetPermissionsWithSdFunc == nil {
		panic("StoreMock.GetPermissionsWithSdFunc: method is nil but Store.GetPermissionsWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WherePermissionParam
		Order parameter.PermissionOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetPermissionsWithSd.Lock()
	mock.calls.GetPermissionsWithSd = append(mock.calls.GetPermissionsWithSd, callInfo)
	mock.lockGetPermissionsWithSd.Unlock()
	return mock.GetPermissionsWithSdFunc(ctx, sd, where, order, np, cp, wc)
}

// GetPermissionsWithSdCalls gets all the calls that were made to GetPermissionsWithSd.
// Check the length with:
//
//	len(mockedStore.GetPermissionsWithSdCalls())
func (mock *StoreMock) GetPermissionsWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WherePermissionParam
	Order parameter.PermissionOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WherePermissionParam
		Order parameter.PermissionOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetPermissionsWithSd.RLock()
	calls = mock.calls.GetPermissionsWithSd
	mock.lockGetPermissionsWithSd.RUnlock()
	return calls
}

// GetPluralAbsences calls GetPluralAbsencesFunc.
func (mock *StoreMock) GetPluralAbsences(ctx context.Context, ids []uuid.UUID, order parameter.AbsenceOrderMethod, np NumberedPaginationParam) (ListResult[entity.Absence], error) {
	if mock.GetPluralAbsencesFunc == nil {
		panic("StoreMock.GetPluralAbsencesFunc: method is nil but Store.GetPluralAbsences was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Ids   []uuid.UUID
		Order parameter.AbsenceOrderMethod
		Np    NumberedPaginationParam
	}{
		Ctx:   ctx,
		Ids:   ids,
		Order: order,
		Np:    np,
	}
	mock.lockGetPluralAbsences.Lock()
	mock.calls.GetPluralAbsences = append(mock.calls.GetPluralAbsences, callInfo)
	mock.lockGetPluralAbsences.Unlock()
	return mock.GetPluralAbsencesFunc(ctx, ids, order, np)
}

// GetPluralAbsencesCalls gets all the calls that were made to GetPluralAbsences.
// Check the length with:
//
//	len(mockedStore.GetPluralAbsencesCalls())
func (mock *StoreMock) GetPluralAbsencesCalls() []struct {
	Ctx   context.Context
	Ids   []uuid.UUID
	Order parameter.AbsenceOrderMethod
	Np    NumberedPaginationParam
} {
	var calls []struct {
		Ctx   context.Context
		Ids   []uuid.UUID
		Order parameter.AbsenceOrderMethod
		Np    NumberedPaginationParam
	}
	mock.lockGetPluralAbsences.RLock()
	calls = mock.calls.GetPluralAbsences
	mock.lockGetPluralAbsences.RUnlock()
	return calls
}

// GetPluralAbsencesWithSd calls GetPluralAbsencesWithSdFunc.
func (mock *StoreMock) GetPluralAbsencesWithSd(ctx context.Context, sd Sd, ids []uuid.UUID, order parameter.AbsenceOrderMethod, np NumberedPaginationParam) (ListResult[entity.Absence], error) {
	if mock.GetPluralAbsencesWithSdFunc == nil {
		panic("StoreMock.GetPluralAbsencesWithSdFunc: method is nil but Store.GetPluralAbsencesWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Ids   []uuid.UUID
		Order parameter.AbsenceOrderMethod
		Np    NumberedPaginationParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Ids:   ids,
		Order: order,
		Np:    np,
	}
	mock.lockGetPluralAbsencesWithSd.Lock()
	mock.calls.GetPluralAbsencesWithSd = append(mock.calls.GetPluralAbsencesWithSd, callInfo)
	mock.lockGetPluralAbsencesWithSd.Unlock()
	return mock.GetPluralAbsencesWithSdFunc(ctx, sd, ids, order, np)
}

// GetPluralAbsencesWithSdCalls gets all the calls that were made to GetPluralAbsencesWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralAbsencesWithSdCalls())
func (mock *StoreMock) GetPluralAbsencesWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Ids   []uuid.UUID
	Order parameter.AbsenceOrderMethod
	Np    NumberedPaginationParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Ids   []uuid.UUID
		Order parameter.AbsenceOrderMethod
		Np    NumberedPaginationParam
	}
	mock.lockGetPluralAbsencesWithSd.RLock()
	calls = mock.calls.GetPluralAbsencesWithSd
	mock.lockGetPluralAbsencesWithSd.RUnlock()
	return calls
}

// GetPluralAttachableItems calls GetPluralAttachableItemsFunc.
func (mock *StoreMock) GetPluralAttachableItems(ctx context.Context, attachableItemIDs []uuid.UUID, order parameter.AttachableItemOrderMethod, np NumberedPaginationParam) (ListResult[entity.AttachableItemWithContent], error) {
	if mock.GetPluralAttachableItemsFunc == nil {
		panic("StoreMock.GetPluralAttachableItemsFunc: method is nil but Store.GetPluralAttachableItems was just called")
	}
	callInfo := struct {
		Ctx               context.Context
		AttachableItemIDs []uuid.UUID
		Order             parameter.AttachableItemOrderMethod
		Np                NumberedPaginationParam
	}{
		Ctx:               ctx,
		AttachableItemIDs: attachableItemIDs,
		Order:             order,
		Np:                np,
	}
	mock.lockGetPluralAttachableItems.Lock()
	mock.calls.GetPluralAttachableItems = append(mock.calls.GetPluralAttachableItems, callInfo)
	mock.lockGetPluralAttachableItems.Unlock()
	return mock.GetPluralAttachableItemsFunc(ctx, attachableItemIDs, order, np)
}

// GetPluralAttachableItemsCalls gets all the calls that were made to GetPluralAttachableItems.
// Check the length with:
//
//	len(mockedStore.GetPluralAttachableItemsCalls())
func (mock *StoreMock) GetPluralAttachableItemsCalls() []struct {
	Ctx               context.Context
	AttachableItemIDs []uuid.UUID
	Order             parameter.AttachableItemOrderMethod
	Np                NumberedPaginationParam
} {
	var calls []struct {
		Ctx               context.Context
		AttachableItemIDs []uuid.UUID
		Order             parameter.AttachableItemOrderMethod
		Np                NumberedPaginationParam
	}
	mock.lockGetPluralAttachableItems.RLock()
	calls = mock.calls.GetPluralAttachableItems
	mock.lockGetPluralAttachableItems.RUnlock()
	return calls
}

// GetPluralAttachableItemsWithMimeType calls GetPluralAttachableItemsWithMimeTypeFunc.
func (mock *StoreMock) GetPluralAttachableItemsWithMimeType(ctx context.Context, attachableItemIDs []uuid.UUID, order parameter.AttachableItemOrderMethod, np NumberedPaginationParam) (ListResult[entity.AttachableItemWithMimeType], error) {
	if mock.GetPluralAttachableItemsWithMimeTypeFunc == nil {
		panic("StoreMock.GetPluralAttachableItemsWithMimeTypeFunc: method is nil but Store.GetPluralAttachableItemsWithMimeType was just called")
	}
	callInfo := struct {
		Ctx               context.Context
		AttachableItemIDs []uuid.UUID
		Order             parameter.AttachableItemOrderMethod
		Np                NumberedPaginationParam
	}{
		Ctx:               ctx,
		AttachableItemIDs: attachableItemIDs,
		Order:             order,
		Np:                np,
	}
	mock.lockGetPluralAttachableItemsWithMimeType.Lock()
	mock.calls.GetPluralAttachableItemsWithMimeType = append(mock.calls.GetPluralAttachableItemsWithMimeType, callInfo)
	mock.lockGetPluralAttachableItemsWithMimeType.Unlock()
	return mock.GetPluralAttachableItemsWithMimeTypeFunc(ctx, attachableItemIDs, order, np)
}

// GetPluralAttachableItemsWithMimeTypeCalls gets all the calls that were made to GetPluralAttachableItemsWithMimeType.
// Check the length with:
//
//	len(mockedStore.GetPluralAttachableItemsWithMimeTypeCalls())
func (mock *StoreMock) GetPluralAttachableItemsWithMimeTypeCalls() []struct {
	Ctx               context.Context
	AttachableItemIDs []uuid.UUID
	Order             parameter.AttachableItemOrderMethod
	Np                NumberedPaginationParam
} {
	var calls []struct {
		Ctx               context.Context
		AttachableItemIDs []uuid.UUID
		Order             parameter.AttachableItemOrderMethod
		Np                NumberedPaginationParam
	}
	mock.lockGetPluralAttachableItemsWithMimeType.RLock()
	calls = mock.calls.GetPluralAttachableItemsWithMimeType
	mock.lockGetPluralAttachableItemsWithMimeType.RUnlock()
	return calls
}

// GetPluralAttachableItemsWithMimeTypeWithSd calls GetPluralAttachableItemsWithMimeTypeWithSdFunc.
func (mock *StoreMock) GetPluralAttachableItemsWithMimeTypeWithSd(ctx context.Context, sd Sd, attachableItemIDs []uuid.UUID, order parameter.AttachableItemOrderMethod, np NumberedPaginationParam) (ListResult[entity.AttachableItemWithMimeType], error) {
	if mock.GetPluralAttachableItemsWithMimeTypeWithSdFunc == nil {
		panic("StoreMock.GetPluralAttachableItemsWithMimeTypeWithSdFunc: method is nil but Store.GetPluralAttachableItemsWithMimeTypeWithSd was just called")
	}
	callInfo := struct {
		Ctx               context.Context
		Sd                Sd
		AttachableItemIDs []uuid.UUID
		Order             parameter.AttachableItemOrderMethod
		Np                NumberedPaginationParam
	}{
		Ctx:               ctx,
		Sd:                sd,
		AttachableItemIDs: attachableItemIDs,
		Order:             order,
		Np:                np,
	}
	mock.lockGetPluralAttachableItemsWithMimeTypeWithSd.Lock()
	mock.calls.GetPluralAttachableItemsWithMimeTypeWithSd = append(mock.calls.GetPluralAttachableItemsWithMimeTypeWithSd, callInfo)
	mock.lockGetPluralAttachableItemsWithMimeTypeWithSd.Unlock()
	return mock.GetPluralAttachableItemsWithMimeTypeWithSdFunc(ctx, sd, attachableItemIDs, order, np)
}

// GetPluralAttachableItemsWithMimeTypeWithSdCalls gets all the calls that were made to GetPluralAttachableItemsWithMimeTypeWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralAttachableItemsWithMimeTypeWithSdCalls())
func (mock *StoreMock) GetPluralAttachableItemsWithMimeTypeWithSdCalls() []struct {
	Ctx               context.Context
	Sd                Sd
	AttachableItemIDs []uuid.UUID
	Order             parameter.AttachableItemOrderMethod
	Np                NumberedPaginationParam
} {
	var calls []struct {
		Ctx               context.Context
		Sd                Sd
		AttachableItemIDs []uuid.UUID
		Order             parameter.AttachableItemOrderMethod
		Np                NumberedPaginationParam
	}
	mock.lockGetPluralAttachableItemsWithMimeTypeWithSd.RLock()
	calls = mock.calls.GetPluralAttachableItemsWithMimeTypeWithSd
	mock.lockGetPluralAttachableItemsWithMimeTypeWithSd.RUnlock()
	return calls
}

// GetPluralAttachableItemsWithSd calls GetPluralAttachableItemsWithSdFunc.
func (mock *StoreMock) GetPluralAttachableItemsWithSd(ctx context.Context, sd Sd, attachableItemIDs []uuid.UUID, order parameter.AttachableItemOrderMethod, np NumberedPaginationParam) (ListResult[entity.AttachableItemWithContent], error) {
	if mock.GetPluralAttachableItemsWithSdFunc == nil {
		panic("StoreMock.GetPluralAttachableItemsWithSdFunc: method is nil but Store.GetPluralAttachableItemsWithSd was just called")
	}
	callInfo := struct {
		Ctx               context.Context
		Sd                Sd
		AttachableItemIDs []uuid.UUID
		Order             parameter.AttachableItemOrderMethod
		Np                NumberedPaginationParam
	}{
		Ctx:               ctx,
		Sd:                sd,
		AttachableItemIDs: attachableItemIDs,
		Order:             order,
		Np:                np,
	}
	mock.lockGetPluralAttachableItemsWithSd.Lock()
	mock.calls.GetPluralAttachableItemsWithSd = append(mock.calls.GetPluralAttachableItemsWithSd, callInfo)
	mock.lockGetPluralAttachableItemsWithSd.Unlock()
	return mock.GetPluralAttachableItemsWithSdFunc(ctx, sd, attachableItemIDs, order, np)
}

// GetPluralAttachableItemsWithSdCalls gets all the calls that were made to GetPluralAttachableItemsWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralAttachableItemsWithSdCalls())
func (mock *StoreMock) GetPluralAttachableItemsWithSdCalls() []struct {
	Ctx               context.Context
	Sd                Sd
	AttachableItemIDs []uuid.UUID
	Order             parameter.AttachableItemOrderMethod
	Np                NumberedPaginationParam
} {
	var calls []struct {
		Ctx               context.Context
		Sd                Sd
		AttachableItemIDs []uuid.UUID
		Order             parameter.AttachableItemOrderMethod
		Np                NumberedPaginationParam
	}
	mock.lockGetPluralAttachableItemsWithSd.RLock()
	calls = mock.calls.GetPluralAttachableItemsWithSd
	mock.lockGetPluralAttachableItemsWithSd.RUnlock()
	return calls
}

// GetPluralAttachedItemsOnMessage calls GetPluralAttachedItemsOnMessageFunc.
func (mock *StoreMock) GetPluralAttachedItemsOnMessage(ctx context.Context, messageIDs []uuid.UUID, order parameter.AttachedItemOnMessageOrderMethod, np NumberedPaginationParam) (ListResult[entity.AttachedItemOnMessage], error) {
	if mock.GetPluralAttachedItemsOnMessageFunc == nil {
		panic("StoreMock.GetPluralAttachedItemsOnMessageFunc: method is nil but Store.GetPluralAttachedItemsOnMessage was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		MessageIDs []uuid.UUID
		Order      parameter.AttachedItemOnMessageOrderMethod
		Np         NumberedPaginationParam
	}{
		Ctx:        ctx,
		MessageIDs: messageIDs,
		Order:      order,
		Np:         np,
	}
	mock.lockGetPluralAttachedItemsOnMessage.Lock()
	mock.calls.GetPluralAttachedItemsOnMessage = append(mock.calls.GetPluralAttachedItemsOnMessage, callInfo)
	mock.lockGetPluralAttachedItemsOnMessage.Unlock()
	return mock.GetPluralAttachedItemsOnMessageFunc(ctx, messageIDs, order, np)
}

// GetPluralAttachedItemsOnMessageCalls gets all the calls that were made to GetPluralAttachedItemsOnMessage.
// Check the length with:
//
//	len(mockedStore.GetPluralAttachedItemsOnMessageCalls())
func (mock *StoreMock) GetPluralAttachedItemsOnMessageCalls() []struct {
	Ctx        context.Context
	MessageIDs []uuid.UUID
	Order      parameter.AttachedItemOnMessageOrderMethod
	Np         NumberedPaginationParam
} {
	var calls []struct {
		Ctx        context.Context
		MessageIDs []uuid.UUID
		Order      parameter.AttachedItemOnMessageOrderMethod
		Np         NumberedPaginationParam
	}
	mock.lockGetPluralAttachedItemsOnMessage.RLock()
	calls = mock.calls.GetPluralAttachedItemsOnMessage
	mock.lockGetPluralAttachedItemsOnMessage.RUnlock()
	return calls
}

// GetPluralAttachedItemsOnMessageWithMimeType calls GetPluralAttachedItemsOnMessageWithMimeTypeFunc.
func (mock *StoreMock) GetPluralAttachedItemsOnMessageWithMimeType(ctx context.Context, messageIDs []uuid.UUID, order parameter.AttachedItemOnMessageOrderMethod, np NumberedPaginationParam) (ListResult[entity.AttachedItemOnMessageWithMimeType], error) {
	if mock.GetPluralAttachedItemsOnMessageWithMimeTypeFunc == nil {
		panic("StoreMock.GetPluralAttachedItemsOnMessageWithMimeTypeFunc: method is nil but Store.GetPluralAttachedItemsOnMessageWithMimeType was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		MessageIDs []uuid.UUID
		Order      parameter.AttachedItemOnMessageOrderMethod
		Np         NumberedPaginationParam
	}{
		Ctx:        ctx,
		MessageIDs: messageIDs,
		Order:      order,
		Np:         np,
	}
	mock.lockGetPluralAttachedItemsOnMessageWithMimeType.Lock()
	mock.calls.GetPluralAttachedItemsOnMessageWithMimeType = append(mock.calls.GetPluralAttachedItemsOnMessageWithMimeType, callInfo)
	mock.lockGetPluralAttachedItemsOnMessageWithMimeType.Unlock()
	return mock.GetPluralAttachedItemsOnMessageWithMimeTypeFunc(ctx, messageIDs, order, np)
}

// GetPluralAttachedItemsOnMessageWithMimeTypeCalls gets all the calls that were made to GetPluralAttachedItemsOnMessageWithMimeType.
// Check the length with:
//
//	len(mockedStore.GetPluralAttachedItemsOnMessageWithMimeTypeCalls())
func (mock *StoreMock) GetPluralAttachedItemsOnMessageWithMimeTypeCalls() []struct {
	Ctx        context.Context
	MessageIDs []uuid.UUID
	Order      parameter.AttachedItemOnMessageOrderMethod
	Np         NumberedPaginationParam
} {
	var calls []struct {
		Ctx        context.Context
		MessageIDs []uuid.UUID
		Order      parameter.AttachedItemOnMessageOrderMethod
		Np         NumberedPaginationParam
	}
	mock.lockGetPluralAttachedItemsOnMessageWithMimeType.RLock()
	calls = mock.calls.GetPluralAttachedItemsOnMessageWithMimeType
	mock.lockGetPluralAttachedItemsOnMessageWithMimeType.RUnlock()
	return calls
}

// GetPluralAttachedItemsOnMessageWithMimeTypeWithSd calls GetPluralAttachedItemsOnMessageWithMimeTypeWithSdFunc.
func (mock *StoreMock) GetPluralAttachedItemsOnMessageWithMimeTypeWithSd(ctx context.Context, sd Sd, messageIDs []uuid.UUID, order parameter.AttachedItemOnMessageOrderMethod, np NumberedPaginationParam) (ListResult[entity.AttachedItemOnMessageWithMimeType], error) {
	if mock.GetPluralAttachedItemsOnMessageWithMimeTypeWithSdFunc == nil {
		panic("StoreMock.GetPluralAttachedItemsOnMessageWithMimeTypeWithSdFunc: method is nil but Store.GetPluralAttachedItemsOnMessageWithMimeTypeWithSd was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Sd         Sd
		MessageIDs []uuid.UUID
		Order      parameter.AttachedItemOnMessageOrderMethod
		Np         NumberedPaginationParam
	}{
		Ctx:        ctx,
		Sd:         sd,
		MessageIDs: messageIDs,
		Order:      order,
		Np:         np,
	}
	mock.lockGetPluralAttachedItemsOnMessageWithMimeTypeWithSd.Lock()
	mock.calls.GetPluralAttachedItemsOnMessageWithMimeTypeWithSd = append(mock.calls.GetPluralAttachedItemsOnMessageWithMimeTypeWithSd, callInfo)
	mock.lockGetPluralAttachedItemsOnMessageWithMimeTypeWithSd.Unlock()
	return mock.GetPluralAttachedItemsOnMessageWithMimeTypeWithSdFunc(ctx, sd, messageIDs, order, np)
}

// GetPluralAttachedItemsOnMessageWithMimeTypeWithSdCalls gets all the calls that were made to GetPluralAttachedItemsOnMessageWithMimeTypeWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralAttachedItemsOnMessageWithMimeTypeWithSdCalls())
func (mock *StoreMock) GetPluralAttachedItemsOnMessageWithMimeTypeWithSdCalls() []struct {
	Ctx        context.Context
	Sd         Sd
	MessageIDs []uuid.UUID
	Order      parameter.AttachedItemOnMessageOrderMethod
	Np         NumberedPaginationParam
} {
	var calls []struct {
		Ctx        context.Context
		Sd         Sd
		MessageIDs []uuid.UUID
		Order      parameter.AttachedItemOnMessageOrderMethod
		Np         NumberedPaginationParam
	}
	mock.lockGetPluralAttachedItemsOnMessageWithMimeTypeWithSd.RLock()
	calls = mock.calls.GetPluralAttachedItemsOnMessageWithMimeTypeWithSd
	mock.lockGetPluralAttachedItemsOnMessageWithMimeTypeWithSd.RUnlock()
	return calls
}

// GetPluralAttachedItemsOnMessageWithSd calls GetPluralAttachedItemsOnMessageWithSdFunc.
func (mock *StoreMock) GetPluralAttachedItemsOnMessageWithSd(ctx context.Context, sd Sd, messageIDs []uuid.UUID, order parameter.AttachedItemOnMessageOrderMethod, np NumberedPaginationParam) (ListResult[entity.AttachedItemOnMessage], error) {
	if mock.GetPluralAttachedItemsOnMessageWithSdFunc == nil {
		panic("StoreMock.GetPluralAttachedItemsOnMessageWithSdFunc: method is nil but Store.GetPluralAttachedItemsOnMessageWithSd was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Sd         Sd
		MessageIDs []uuid.UUID
		Order      parameter.AttachedItemOnMessageOrderMethod
		Np         NumberedPaginationParam
	}{
		Ctx:        ctx,
		Sd:         sd,
		MessageIDs: messageIDs,
		Order:      order,
		Np:         np,
	}
	mock.lockGetPluralAttachedItemsOnMessageWithSd.Lock()
	mock.calls.GetPluralAttachedItemsOnMessageWithSd = append(mock.calls.GetPluralAttachedItemsOnMessageWithSd, callInfo)
	mock.lockGetPluralAttachedItemsOnMessageWithSd.Unlock()
	return mock.GetPluralAttachedItemsOnMessageWithSdFunc(ctx, sd, messageIDs, order, np)
}

// GetPluralAttachedItemsOnMessageWithSdCalls gets all the calls that were made to GetPluralAttachedItemsOnMessageWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralAttachedItemsOnMessageWithSdCalls())
func (mock *StoreMock) GetPluralAttachedItemsOnMessageWithSdCalls() []struct {
	Ctx        context.Context
	Sd         Sd
	MessageIDs []uuid.UUID
	Order      parameter.AttachedItemOnMessageOrderMethod
	Np         NumberedPaginationParam
} {
	var calls []struct {
		Ctx        context.Context
		Sd         Sd
		MessageIDs []uuid.UUID
		Order      parameter.AttachedItemOnMessageOrderMethod
		Np         NumberedPaginationParam
	}
	mock.lockGetPluralAttachedItemsOnMessageWithSd.RLock()
	calls = mock.calls.GetPluralAttachedItemsOnMessageWithSd
	mock.lockGetPluralAttachedItemsOnMessageWithSd.RUnlock()
	return calls
}

// GetPluralAttendStatuses calls GetPluralAttendStatusesFunc.
func (mock *StoreMock) GetPluralAttendStatuses(ctx context.Context, attendStatusIDs []uuid.UUID, order parameter.AttendStatusOrderMethod, np NumberedPaginationParam) (ListResult[entity.AttendStatus], error) {
	if mock.GetPluralAttendStatusesFunc == nil {
		panic("StoreMock.GetPluralAttendStatusesFunc: method is nil but Store.GetPluralAttendStatuses was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		AttendStatusIDs []uuid.UUID
		Order           parameter.AttendStatusOrderMethod
		Np              NumberedPaginationParam
	}{
		Ctx:             ctx,
		AttendStatusIDs: attendStatusIDs,
		Order:           order,
		Np:              np,
	}
	mock.lockGetPluralAttendStatuses.Lock()
	mock.calls.GetPluralAttendStatuses = append(mock.calls.GetPluralAttendStatuses, callInfo)
	mock.lockGetPluralAttendStatuses.Unlock()
	return mock.GetPluralAttendStatusesFunc(ctx, attendStatusIDs, order, np)
}

// GetPluralAttendStatusesCalls gets all the calls that were made to GetPluralAttendStatuses.
// Check the length with:
//
//	len(mockedStore.GetPluralAttendStatusesCalls())
func (mock *StoreMock) GetPluralAttendStatusesCalls() []struct {
	Ctx             context.Context
	AttendStatusIDs []uuid.UUID
	Order           parameter.AttendStatusOrderMethod
	Np              NumberedPaginationParam
} {
	var calls []struct {
		Ctx             context.Context
		AttendStatusIDs []uuid.UUID
		Order           parameter.AttendStatusOrderMethod
		Np              NumberedPaginationParam
	}
	mock.lockGetPluralAttendStatuses.RLock()
	calls = mock.calls.GetPluralAttendStatuses
	mock.lockGetPluralAttendStatuses.RUnlock()
	return calls
}

// GetPluralAttendStatusesWithSd calls GetPluralAttendStatusesWithSdFunc.
func (mock *StoreMock) GetPluralAttendStatusesWithSd(ctx context.Context, sd Sd, attendStatusIDs []uuid.UUID, order parameter.AttendStatusOrderMethod, np NumberedPaginationParam) (ListResult[entity.AttendStatus], error) {
	if mock.GetPluralAttendStatusesWithSdFunc == nil {
		panic("StoreMock.GetPluralAttendStatusesWithSdFunc: method is nil but Store.GetPluralAttendStatusesWithSd was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		Sd              Sd
		AttendStatusIDs []uuid.UUID
		Order           parameter.AttendStatusOrderMethod
		Np              NumberedPaginationParam
	}{
		Ctx:             ctx,
		Sd:              sd,
		AttendStatusIDs: attendStatusIDs,
		Order:           order,
		Np:              np,
	}
	mock.lockGetPluralAttendStatusesWithSd.Lock()
	mock.calls.GetPluralAttendStatusesWithSd = append(mock.calls.GetPluralAttendStatusesWithSd, callInfo)
	mock.lockGetPluralAttendStatusesWithSd.Unlock()
	return mock.GetPluralAttendStatusesWithSdFunc(ctx, sd, attendStatusIDs, order, np)
}

// GetPluralAttendStatusesWithSdCalls gets all the calls that were made to GetPluralAttendStatusesWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralAttendStatusesWithSdCalls())
func (mock *StoreMock) GetPluralAttendStatusesWithSdCalls() []struct {
	Ctx             context.Context
	Sd              Sd
	AttendStatusIDs []uuid.UUID
	Order           parameter.AttendStatusOrderMethod
	Np              NumberedPaginationParam
} {
	var calls []struct {
		Ctx             context.Context
		Sd              Sd
		AttendStatusIDs []uuid.UUID
		Order           parameter.AttendStatusOrderMethod
		Np              NumberedPaginationParam
	}
	mock.lockGetPluralAttendStatusesWithSd.RLock()
	calls = mock.calls.GetPluralAttendStatusesWithSd
	mock.lockGetPluralAttendStatusesWithSd.RUnlock()
	return calls
}

// GetPluralAttendanceTypes calls GetPluralAttendanceTypesFunc.
func (mock *StoreMock) GetPluralAttendanceTypes(ctx context.Context, attendanceTypeIDs []uuid.UUID, order parameter.AttendanceTypeOrderMethod, np NumberedPaginationParam) (ListResult[entity.AttendanceType], error) {
	if mock.GetPluralAttendanceTypesFunc == nil {
		panic("StoreMock.GetPluralAttendanceTypesFunc: method is nil but Store.GetPluralAttendanceTypes was just called")
	}
	callInfo := struct {
		Ctx               context.Context
		AttendanceTypeIDs []uuid.UUID
		Order             parameter.AttendanceTypeOrderMethod
		Np                NumberedPaginationParam
	}{
		Ctx:               ctx,
		AttendanceTypeIDs: attendanceTypeIDs,
		Order:             order,
		Np:                np,
	}
	mock.lockGetPluralAttendanceTypes.Lock()
	mock.calls.GetPluralAttendanceTypes = append(mock.calls.GetPluralAttendanceTypes, callInfo)
	mock.lockGetPluralAttendanceTypes.Unlock()
	return mock.GetPluralAttendanceTypesFunc(ctx, attendanceTypeIDs, order, np)
}

// GetPluralAttendanceTypesCalls gets all the calls that were made to GetPluralAttendanceTypes.
// Check the length with:
//
//	len(mockedStore.GetPluralAttendanceTypesCalls())
func (mock *StoreMock) GetPluralAttendanceTypesCalls() []struct {
	Ctx               context.Context
	AttendanceTypeIDs []uuid.UUID
	Order             parameter.AttendanceTypeOrderMethod
	Np                NumberedPaginationParam
} {
	var calls []struct {
		Ctx               context.Context
		AttendanceTypeIDs []uuid.UUID
		Order             parameter.AttendanceTypeOrderMethod
		Np                NumberedPaginationParam
	}
	mock.lockGetPluralAttendanceTypes.RLock()
	calls = mock.calls.GetPluralAttendanceTypes
	mock.lockGetPluralAttendanceTypes.RUnlock()
	return calls
}

// GetPluralAttendanceTypesWithSd calls GetPluralAttendanceTypesWithSdFunc.
func (mock *StoreMock) GetPluralAttendanceTypesWithSd(ctx context.Context, sd Sd, attendanceTypeIDs []uuid.UUID, order parameter.AttendanceTypeOrderMethod, np NumberedPaginationParam) (ListResult[entity.AttendanceType], error) {
	if mock.GetPluralAttendanceTypesWithSdFunc == nil {
		panic("StoreMock.GetPluralAttendanceTypesWithSdFunc: method is nil but Store.GetPluralAttendanceTypesWithSd was just called")
	}
	callInfo := struct {
		Ctx               context.Context
		Sd                Sd
		AttendanceTypeIDs []uuid.UUID
		Order             parameter.AttendanceTypeOrderMethod
		Np                NumberedPaginationParam
	}{
		Ctx:               ctx,
		Sd:                sd,
		AttendanceTypeIDs: attendanceTypeIDs,
		Order:             order,
		Np:                np,
	}
	mock.lockGetPluralAttendanceTypesWithSd.Lock()
	mock.calls.GetPluralAttendanceTypesWithSd = append(mock.calls.GetPluralAttendanceTypesWithSd, callInfo)
	mock.lockGetPluralAttendanceTypesWithSd.Unlock()
	return mock.GetPluralAttendanceTypesWithSdFunc(ctx, sd, attendanceTypeIDs, order, np)
}

// GetPluralAttendanceTypesWithSdCalls gets all the calls that were made to GetPluralAttendanceTypesWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralAttendanceTypesWithSdCalls())
func (mock *StoreMock) GetPluralAttendanceTypesWithSdCalls() []struct {
	Ctx               context.Context
	Sd                Sd
	AttendanceTypeIDs []uuid.UUID
	Order             parameter.AttendanceTypeOrderMethod
	Np                NumberedPaginationParam
} {
	var calls []struct {
		Ctx               context.Context
		Sd                Sd
		AttendanceTypeIDs []uuid.UUID
		Order             parameter.AttendanceTypeOrderMethod
		Np                NumberedPaginationParam
	}
	mock.lockGetPluralAttendanceTypesWithSd.RLock()
	calls = mock.calls.GetPluralAttendanceTypesWithSd
	mock.lockGetPluralAttendanceTypesWithSd.RUnlock()
	return calls
}

// GetPluralChatRoomActionTypes calls GetPluralChatRoomActionTypesFunc.
func (mock *StoreMock) GetPluralChatRoomActionTypes(ctx context.Context, recordTypeIDs []uuid.UUID, order parameter.ChatRoomActionTypeOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomActionType], error) {
	if mock.GetPluralChatRoomActionTypesFunc == nil {
		panic("StoreMock.GetPluralChatRoomActionTypesFunc: method is nil but Store.GetPluralChatRoomActionTypes was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		RecordTypeIDs []uuid.UUID
		Order         parameter.ChatRoomActionTypeOrderMethod
		Np            NumberedPaginationParam
	}{
		Ctx:           ctx,
		RecordTypeIDs: recordTypeIDs,
		Order:         order,
		Np:            np,
	}
	mock.lockGetPluralChatRoomActionTypes.Lock()
	mock.calls.GetPluralChatRoomActionTypes = append(mock.calls.GetPluralChatRoomActionTypes, callInfo)
	mock.lockGetPluralChatRoomActionTypes.Unlock()
	return mock.GetPluralChatRoomActionTypesFunc(ctx, recordTypeIDs, order, np)
}

// GetPluralChatRoomActionTypesCalls gets all the calls that were made to GetPluralChatRoomActionTypes.
// Check the length with:
//
//	len(mockedStore.GetPluralChatRoomActionTypesCalls())
func (mock *StoreMock) GetPluralChatRoomActionTypesCalls() []struct {
	Ctx           context.Context
	RecordTypeIDs []uuid.UUID
	Order         parameter.ChatRoomActionTypeOrderMethod
	Np            NumberedPaginationParam
} {
	var calls []struct {
		Ctx           context.Context
		RecordTypeIDs []uuid.UUID
		Order         parameter.ChatRoomActionTypeOrderMethod
		Np            NumberedPaginationParam
	}
	mock.lockGetPluralChatRoomActionTypes.RLock()
	calls = mock.calls.GetPluralChatRoomActionTypes
	mock.lockGetPluralChatRoomActionTypes.RUnlock()
	return calls
}

// GetPluralChatRoomActionTypesWithSd calls GetPluralChatRoomActionTypesWithSdFunc.
func (mock *StoreMock) GetPluralChatRoomActionTypesWithSd(ctx context.Context, sd Sd, recordTypeIDs []uuid.UUID, order parameter.ChatRoomActionTypeOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomActionType], error) {
	if mock.GetPluralChatRoomActionTypesWithSdFunc == nil {
		panic("StoreMock.GetPluralChatRoomActionTypesWithSdFunc: method is nil but Store.GetPluralChatRoomActionTypesWithSd was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		Sd            Sd
		RecordTypeIDs []uuid.UUID
		Order         parameter.ChatRoomActionTypeOrderMethod
		Np            NumberedPaginationParam
	}{
		Ctx:           ctx,
		Sd:            sd,
		RecordTypeIDs: recordTypeIDs,
		Order:         order,
		Np:            np,
	}
	mock.lockGetPluralChatRoomActionTypesWithSd.Lock()
	mock.calls.GetPluralChatRoomActionTypesWithSd = append(mock.calls.GetPluralChatRoomActionTypesWithSd, callInfo)
	mock.lockGetPluralChatRoomActionTypesWithSd.Unlock()
	return mock.GetPluralChatRoomActionTypesWithSdFunc(ctx, sd, recordTypeIDs, order, np)
}

// GetPluralChatRoomActionTypesWithSdCalls gets all the calls that were made to GetPluralChatRoomActionTypesWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralChatRoomActionTypesWithSdCalls())
func (mock *StoreMock) GetPluralChatRoomActionTypesWithSdCalls() []struct {
	Ctx           context.Context
	Sd            Sd
	RecordTypeIDs []uuid.UUID
	Order         parameter.ChatRoomActionTypeOrderMethod
	Np            NumberedPaginationParam
} {
	var calls []struct {
		Ctx           context.Context
		Sd            Sd
		RecordTypeIDs []uuid.UUID
		Order         parameter.ChatRoomActionTypeOrderMethod
		Np            NumberedPaginationParam
	}
	mock.lockGetPluralChatRoomActionTypesWithSd.RLock()
	calls = mock.calls.GetPluralChatRoomActionTypesWithSd
	mock.lockGetPluralChatRoomActionTypesWithSd.RUnlock()
	return calls
}

// GetPluralChatRoomActions calls GetPluralChatRoomActionsFunc.
func (mock *StoreMock) GetPluralChatRoomActions(ctx context.Context, chatRoomActionIDs []uuid.UUID, order parameter.ChatRoomActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomAction], error) {
	if mock.GetPluralChatRoomActionsFunc == nil {
		panic("StoreMock.GetPluralChatRoomActionsFunc: method is nil but Store.GetPluralChatRoomActions was just called")
	}
	callInfo := struct {
		Ctx               context.Context
		ChatRoomActionIDs []uuid.UUID
		Order             parameter.ChatRoomActionOrderMethod
		Np                NumberedPaginationParam
	}{
		Ctx:               ctx,
		ChatRoomActionIDs: chatRoomActionIDs,
		Order:             order,
		Np:                np,
	}
	mock.lockGetPluralChatRoomActions.Lock()
	mock.calls.GetPluralChatRoomActions = append(mock.calls.GetPluralChatRoomActions, callInfo)
	mock.lockGetPluralChatRoomActions.Unlock()
	return mock.GetPluralChatRoomActionsFunc(ctx, chatRoomActionIDs, order, np)
}

// GetPluralChatRoomActionsCalls gets all the calls that were made to GetPluralChatRoomActions.
// Check the length with:
//
//	len(mockedStore.GetPluralChatRoomActionsCalls())
func (mock *StoreMock) GetPluralChatRoomActionsCalls() []struct {
	Ctx               context.Context
	ChatRoomActionIDs []uuid.UUID
	Order             parameter.ChatRoomActionOrderMethod
	Np                NumberedPaginationParam
} {
	var calls []struct {
		Ctx               context.Context
		ChatRoomActionIDs []uuid.UUID
		Order             parameter.ChatRoomActionOrderMethod
		Np                NumberedPaginationParam
	}
	mock.lockGetPluralChatRoomActions.RLock()
	calls = mock.calls.GetPluralChatRoomActions
	mock.lockGetPluralChatRoomActions.RUnlock()
	return calls
}

// GetPluralChatRoomActionsWithDetail calls GetPluralChatRoomActionsWithDetailFunc.
func (mock *StoreMock) GetPluralChatRoomActionsWithDetail(ctx context.Context, chatRoomActionIDs []uuid.UUID, order parameter.ChatRoomActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomActionWithDetail], error) {
	if mock.GetPluralChatRoomActionsWithDetailFunc == nil {
		panic("StoreMock.GetPluralChatRoomActionsWithDetailFunc: method is nil but Store.GetPluralChatRoomActionsWithDetail was just called")
	}
	callInfo := struct {
		Ctx               context.Context
		ChatRoomActionIDs []uuid.UUID
		Order             parameter.ChatRoomActionOrderMethod
		Np                NumberedPaginationParam
	}{
		Ctx:               ctx,
		ChatRoomActionIDs: chatRoomActionIDs,
		Order:             order,
		Np:                np,
	}
	mock.lockGetPluralChatRoomActionsWithDetail.Lock()
	mock.calls.GetPluralChatRoomActionsWithDetail = append(mock.calls.GetPluralChatRoomActionsWithDetail, callInfo)
	mock.lockGetPluralChatRoomActionsWithDetail.Unlock()
	return mock.GetPluralChatRoomActionsWithDetailFunc(ctx, chatRoomActionIDs, order, np)
}

// GetPluralChatRoomActionsWithDetailCalls gets all the calls that were made to GetPluralChatRoomActionsWithDetail.
// Check the length with:
//
//	len(mockedStore.GetPluralChatRoomActionsWithDetailCalls())
func (mock *StoreMock) GetPluralChatRoomActionsWithDetailCalls() []struct {
	Ctx               context.Context
	ChatRoomActionIDs []uuid.UUID
	Order             parameter.ChatRoomActionOrderMethod
	Np                NumberedPaginationParam
} {
	var calls []struct {
		Ctx               context.Context
		ChatRoomActionIDs []uuid.UUID
		Order             parameter.ChatRoomActionOrderMethod
		Np                NumberedPaginationParam
	}
	mock.lockGetPluralChatRoomActionsWithDetail.RLock()
	calls = mock.calls.GetPluralChatRoomActionsWithDetail
	mock.lockGetPluralChatRoomActionsWithDetail.RUnlock()
	return calls
}

// GetPluralChatRoomActionsWithDetailWithSd calls GetPluralChatRoomActionsWithDetailWithSdFunc.
func (mock *StoreMock) GetPluralChatRoomActionsWithDetailWithSd(ctx context.Context, sd Sd, chatRoomActionIDs []uuid.UUID, order parameter.ChatRoomActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomActionWithDetail], error) {
	if mock.GetPluralChatRoomActionsWithDetailWithSdFunc == nil {
		panic("StoreMock.GetPluralChatRoomActionsWithDetailWithSdFunc: method is nil but Store.GetPluralChatRoomActionsWithDetailWithSd was just called")
	}
	callInfo := struct {
		Ctx               context.Context
		Sd                Sd
		ChatRoomActionIDs []uuid.UUID
		Order             parameter.ChatRoomActionOrderMethod
		Np                NumberedPaginationParam
	}{
		Ctx:               ctx,
		Sd:                sd,
		ChatRoomActionIDs: chatRoomActionIDs,
		Order:             order,
		Np:                np,
	}
	mock.lockGetPluralChatRoomActionsWithDetailWithSd.Lock()
	mock.calls.GetPluralChatRoomActionsWithDetailWithSd = append(mock.calls.GetPluralChatRoomActionsWithDetailWithSd, callInfo)
	mock.lockGetPluralChatRoomActionsWithDetailWithSd.Unlock()
	return mock.GetPluralChatRoomActionsWithDetailWithSdFunc(ctx, sd, chatRoomActionIDs, order, np)
}

// GetPluralChatRoomActionsWithDetailWithSdCalls gets all the calls that were made to GetPluralChatRoomActionsWithDetailWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralChatRoomActionsWithDetailWithSdCalls())
func (mock *StoreMock) GetPluralChatRoomActionsWithDetailWithSdCalls() []struct {
	Ctx               context.Context
	Sd                Sd
	ChatRoomActionIDs []uuid.UUID
	Order             parameter.ChatRoomActionOrderMethod
	Np                NumberedPaginationParam
} {
	var calls []struct {
		Ctx               context.Context
		Sd                Sd
		ChatRoomActionIDs []uuid.UUID
		Order             parameter.ChatRoomActionOrderMethod
		Np                NumberedPaginationParam
	}
	mock.lockGetPluralChatRoomActionsWithDetailWithSd.RLock()
	calls = mock.calls.GetPluralChatRoomActionsWithDetailWithSd
	mock.lockGetPluralChatRoomActionsWithDetailWithSd.RUnlock()
	return calls
}

// GetPluralChatRoomActionsWithSd calls GetPluralChatRoomActionsWithSdFunc.
func (mock *StoreMock) GetPluralChatRoomActionsWithSd(ctx context.Context, sd Sd, chatRoomActionIDs []uuid.UUID, order parameter.ChatRoomActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomAction], error) {
	if mock.GetPluralChatRoomActionsWithSdFunc == nil {
		panic("StoreMock.GetPluralChatRoomActionsWithSdFunc: method is nil but Store.GetPluralChatRoomActionsWithSd was just called")
	}
	callInfo := struct {
		Ctx               context.Context
		Sd                Sd
		ChatRoomActionIDs []uuid.UUID
		Order             parameter.ChatRoomActionOrderMethod
		Np                NumberedPaginationParam
	}{
		Ctx:               ctx,
		Sd:                sd,
		ChatRoomActionIDs: chatRoomActionIDs,
		Order:             order,
		Np:                np,
	}
	mock.lockGetPluralChatRoomActionsWithSd.Lock()
	mock.calls.GetPluralChatRoomActionsWithSd = append(mock.calls.GetPluralChatRoomActionsWithSd, callInfo)
	mock.lockGetPluralChatRoomActionsWithSd.Unlock()
	return mock.GetPluralChatRoomActionsWithSdFunc(ctx, sd, chatRoomActionIDs, order, np)
}

// GetPluralChatRoomActionsWithSdCalls gets all the calls that were made to GetPluralChatRoomActionsWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralChatRoomActionsWithSdCalls())
func (mock *StoreMock) GetPluralChatRoomActionsWithSdCalls() []struct {
	Ctx               context.Context
	Sd                Sd
	ChatRoomActionIDs []uuid.UUID
	Order             parameter.ChatRoomActionOrderMethod
	Np                NumberedPaginationParam
} {
	var calls []struct {
		Ctx               context.Context
		Sd                Sd
		ChatRoomActionIDs []uuid.UUID
		Order             parameter.ChatRoomActionOrderMethod
		Np                NumberedPaginationParam
	}
	mock.lockGetPluralChatRoomActionsWithSd.RLock()
	calls = mock.calls.GetPluralChatRoomActionsWithSd
	mock.lockGetPluralChatRoomActionsWithSd.RUnlock()
	return calls
}

// GetPluralChatRoomAddMemberActions calls GetPluralChatRoomAddMemberActionsFunc.
func (mock *StoreMock) GetPluralChatRoomAddMemberActions(ctx context.Context, chatRoomAddMemberActionIDs []uuid.UUID, order parameter.ChatRoomAddMemberActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomAddMemberActionWithAddedBy], error) {
	if mock.GetPluralChatRoomAddMemberActionsFunc == nil {
		panic("StoreMock.GetPluralChatRoomAddMemberActionsFunc: method is nil but Store.GetPluralChatRoomAddMemberActions was just called")
	}
	callInfo := struct {
		Ctx                        context.Context
		ChatRoomAddMemberActionIDs []uuid.UUID
		Order                      parameter.ChatRoomAddMemberActionOrderMethod
		Np                         NumberedPaginationParam
	}{
		Ctx:                        ctx,
		ChatRoomAddMemberActionIDs: chatRoomAddMemberActionIDs,
		Order:                      order,
		Np:                         np,
	}
	mock.lockGetPluralChatRoomAddMemberActions.Lock()
	mock.calls.GetPluralChatRoomAddMemberActions = append(mock.calls.GetPluralChatRoomAddMemberActions, callInfo)
	mock.lockGetPluralChatRoomAddMemberActions.Unlock()
	return mock.GetPluralChatRoomAddMemberActionsFunc(ctx, chatRoomAddMemberActionIDs, order, np)
}

// GetPluralChatRoomAddMemberActionsCalls gets all the calls that were made to GetPluralChatRoomAddMemberActions.
// Check the length with:
//
//	len(mockedStore.GetPluralChatRoomAddMemberActionsCalls())
func (mock *StoreMock) GetPluralChatRoomAddMemberActionsCalls() []struct {
	Ctx                        context.Context
	ChatRoomAddMemberActionIDs []uuid.UUID
	Order                      parameter.ChatRoomAddMemberActionOrderMethod
	Np                         NumberedPaginationParam
} {
	var calls []struct {
		Ctx                        context.Context
		ChatRoomAddMemberActionIDs []uuid.UUID
		Order                      parameter.ChatRoomAddMemberActionOrderMethod
		Np                         NumberedPaginationParam
	}
	mock.lockGetPluralChatRoomAddMemberActions.RLock()
	calls = mock.calls.GetPluralChatRoomAddMemberActions
	mock.lockGetPluralChatRoomAddMemberActions.RUnlock()
	return calls
}

// GetPluralChatRoomAddMemberActionsByChatRoomActionIDs calls GetPluralChatRoomAddMemberActionsByChatRoomActionIDsFunc.
func (mock *StoreMock) GetPluralChatRoomAddMemberActionsByChatRoomActionIDs(ctx context.Context, chatRoomActionIDs []uuid.UUID, order parameter.ChatRoomAddMemberActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomAddMemberActionWithAddedBy], error) {
	if mock.GetPluralChatRoomAddMemberActionsByChatRoomActionIDsFunc == nil {
		panic("StoreMock.GetPluralChatRoomAddMemberActionsByChatRoomActionIDsFunc: method is nil but Store.GetPluralChatRoomAddMemberActionsByChatRoomActionIDs was just called")
	}
	callInfo := struct {
		Ctx               context.Context
		ChatRoomActionIDs []uuid.UUID
		Order             parameter.ChatRoomAddMemberActionOrderMethod
		Np                NumberedPaginationParam
	}{
		Ctx:               ctx,
		ChatRoomActionIDs: chatRoomActionIDs,
		Order:             order,
		Np:                np,
	}
	mock.lockGetPluralChatRoomAddMemberActionsByChatRoomActionIDs.Lock()
	mock.calls.GetPluralChatRoomAddMemberActionsByChatRoomActionIDs = append(mock.calls.GetPluralChatRoomAddMemberActionsByChatRoomActionIDs, callInfo)
	mock.lockGetPluralChatRoomAddMemberActionsByChatRoomActionIDs.Unlock()
	return mock.GetPluralChatRoomAddMemberActionsByChatRoomActionIDsFunc(ctx, chatRoomActionIDs, order, np)
}

// GetPluralChatRoomAddMemberActionsByChatRoomActionIDsCalls gets all the calls that were made to GetPluralChatRoomAddMemberActionsByChatRoomActionIDs.
// Check the length with:
//
//	len(mockedStore.GetPluralChatRoomAddMemberActionsByChatRoomActionIDsCalls())
func (mock *StoreMock) GetPluralChatRoomAddMemberActionsByChatRoomActionIDsCalls() []struct {
	Ctx               context.Context
	ChatRoomActionIDs []uuid.UUID
	Order             parameter.ChatRoomAddMemberActionOrderMethod
	Np                NumberedPaginationParam
} {
	var calls []struct {
		Ctx               context.Context
		ChatRoomActionIDs []uuid.UUID
		Order             parameter.ChatRoomAddMemberActionOrderMethod
		Np                NumberedPaginationParam
	}
	mock.lockGetPluralChatRoomAddMemberActionsByChatRoomActionIDs.RLock()
	calls = mock.calls.GetPluralChatRoomAddMemberActionsByChatRoomActionIDs
	mock.lockGetPluralChatRoomAddMemberActionsByChatRoomActionIDs.RUnlock()
	return calls
}

// GetPluralChatRoomAddMemberActionsByChatRoomActionIDsWithSd calls GetPluralChatRoomAddMemberActionsByChatRoomActionIDsWithSdFunc.
func (mock *StoreMock) GetPluralChatRoomAddMemberActionsByChatRoomActionIDsWithSd(ctx context.Context, sd Sd, chatRoomActionIDs []uuid.UUID, order parameter.ChatRoomAddMemberActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomAddMemberActionWithAddedBy], error) {
	if mock.GetPluralChatRoomAddMemberActionsByChatRoomActionIDsWithSdFunc == nil {
		panic("StoreMock.GetPluralChatRoomAddMemberActionsByChatRoomActionIDsWithSdFunc: method is nil but Store.GetPluralChatRoomAddMemberActionsByChatRoomActionIDsWithSd was just called")
	}
	callInfo := struct {
		Ctx               context.Context
		Sd                Sd
		ChatRoomActionIDs []uuid.UUID
		Order             parameter.ChatRoomAddMemberActionOrderMethod
		Np                NumberedPaginationParam
	}{
		Ctx:               ctx,
		Sd:                sd,
		ChatRoomActionIDs: chatRoomActionIDs,
		Order:             order,
		Np:                np,
	}
	mock.lockGetPluralChatRoomAddMemberActionsByChatRoomActionIDsWithSd.Lock()
	mock.calls.GetPluralChatRoomAddMemberActionsByChatRoomActionIDsWithSd = append(mock.calls.GetPluralChatRoomAddMemberActionsByChatRoomActionIDsWithSd, callInfo)
	mock.lockGetPluralChatRoomAddMemberActionsByChatRoomActionIDsWithSd.Unlock()
	return mock.GetPluralChatRoomAddMemberActionsByChatRoomActionIDsWithSdFunc(ctx, sd, chatRoomActionIDs, order, np)
}

// GetPluralChatRoomAddMemberActionsByChatRoomActionIDsWithSdCalls gets all the calls that were made to GetPluralChatRoomAddMemberActionsByChatRoomActionIDsWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralChatRoomAddMemberActionsByChatRoomActionIDsWithSdCalls())
func (mock *StoreMock) GetPluralChatRoomAddMemberActionsByChatRoomActionIDsWithSdCalls() []struct {
	Ctx               context.Context
	Sd                Sd
	ChatRoomActionIDs []uuid.UUID
	Order             parameter.ChatRoomAddMemberActionOrderMethod
	Np                NumberedPaginationParam
} {
	var calls []struct {
		Ctx               context.Context
		Sd                Sd
		ChatRoomActionIDs []uuid.UUID
		Order             parameter.ChatRoomAddMemberActionOrderMethod
		Np                NumberedPaginationParam
	}
	mock.lockGetPluralChatRoomAddMemberActionsByChatRoomActionIDsWithSd.RLock()
	calls = mock.calls.GetPluralChatRoomAddMemberActionsByChatRoomActionIDsWithSd
	mock.lockGetPluralChatRoomAddMemberActionsByChatRoomActionIDsWithSd.RUnlock()
	return calls
}

// GetPluralChatRoomAddMemberActionsWithSd calls GetPluralChatRoomAddMemberActionsWithSdFunc.
func (mock *StoreMock) GetPluralChatRoomAddMemberActionsWithSd(ctx context.Context, sd Sd, chatRoomAddMemberActionIDs []uuid.UUID, order parameter.ChatRoomAddMemberActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomAddMemberActionWithAddedBy], error) {
	if mock.GetPluralChatRoomAddMemberActionsWithSdFunc == nil {
		panic("StoreMock.GetPluralChatRoomAddMemberActionsWithSdFunc: method is nil but Store.GetPluralChatRoomAddMemberActionsWithSd was just called")
	}
	callInfo := struct {
		Ctx                        context.Context
		Sd                         Sd
		ChatRoomAddMemberActionIDs []uuid.UUID
		Order                      parameter.ChatRoomAddMemberActionOrderMethod
		Np                         NumberedPaginationParam
	}{
		Ctx:                        ctx,
		Sd:                         sd,
		ChatRoomAddMemberActionIDs: chatRoomAddMemberActionIDs,
		Order:                      order,
		Np:                         np,
	}
	mock.lockGetPluralChatRoomAddMemberActionsWithSd.Lock()
	mock.calls.GetPluralChatRoomAddMemberActionsWithSd = append(mock.calls.GetPluralChatRoomAddMemberActionsWithSd, callInfo)
	mock.lockGetPluralChatRoomAddMemberActionsWithSd.Unlock()
	return mock.GetPluralChatRoomAddMemberActionsWithSdFunc(ctx, sd, chatRoomAddMemberActionIDs, order, np)
}

// GetPluralChatRoomAddMemberActionsWithSdCalls gets all the calls that were made to GetPluralChatRoomAddMemberActionsWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralChatRoomAddMemberActionsWithSdCalls())
func (mock *StoreMock) GetPluralChatRoomAddMemberActionsWithSdCalls() []struct {
	Ctx                        context.Context
	Sd                         Sd
	ChatRoomAddMemberActionIDs []uuid.UUID
	Order                      parameter.ChatRoomAddMemberActionOrderMethod
	Np                         NumberedPaginationParam
} {
	var calls []struct {
		Ctx                        context.Context
		Sd                         Sd
		ChatRoomAddMemberActionIDs []uuid.UUID
		Order                      parameter.ChatRoomAddMemberActionOrderMethod
		Np                         NumberedPaginationParam
	}
	mock.lockGetPluralChatRoomAddMemberActionsWithSd.RLock()
	calls = mock.calls.GetPluralChatRoomAddMemberActionsWithSd
	mock.lockGetPluralChatRoomAddMemberActionsWithSd.RUnlock()
	return calls
}

// GetPluralChatRoomCreateActions calls GetPluralChatRoomCreateActionsFunc.
func (mock *StoreMock) GetPluralChatRoomCreateActions(ctx context.Context, chatRoomCreateActionIDs []uuid.UUID, order parameter.ChatRoomCreateActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomCreateActionWithCreatedBy], error) {
	if mock.GetPluralChatRoomCreateActionsFunc == nil {
		panic("StoreMock.GetPluralChatRoomCreateActionsFunc: method is nil but Store.GetPluralChatRoomCreateActions was just called")
	}
	callInfo := struct {
		Ctx                     context.Context
		ChatRoomCreateActionIDs []uuid.UUID
		Order                   parameter.ChatRoomCreateActionOrderMethod
		Np                      NumberedPaginationParam
	}{
		Ctx:                     ctx,
		ChatRoomCreateActionIDs: chatRoomCreateActionIDs,
		Order:                   order,
		Np:                      np,
	}
	mock.lockGetPluralChatRoomCreateActions.Lock()
	mock.calls.GetPluralChatRoomCreateActions = append(mock.calls.GetPluralChatRoomCreateActions, callInfo)
	mock.lockGetPluralChatRoomCreateActions.Unlock()
	return mock.GetPluralChatRoomCreateActionsFunc(ctx, chatRoomCreateActionIDs, order, np)
}

// GetPluralChatRoomCreateActionsCalls gets all the calls that were made to GetPluralChatRoomCreateActions.
// Check the length with:
//
//	len(mockedStore.GetPluralChatRoomCreateActionsCalls())
func (mock *StoreMock) GetPluralChatRoomCreateActionsCalls() []struct {
	Ctx                     context.Context
	ChatRoomCreateActionIDs []uuid.UUID
	Order                   parameter.ChatRoomCreateActionOrderMethod
	Np                      NumberedPaginationParam
} {
	var calls []struct {
		Ctx                     context.Context
		ChatRoomCreateActionIDs []uuid.UUID
		Order                   parameter.ChatRoomCreateActionOrderMethod
		Np                      NumberedPaginationParam
	}
	mock.lockGetPluralChatRoomCreateActions.RLock()
	calls = mock.calls.GetPluralChatRoomCreateActions
	mock.lockGetPluralChatRoomCreateActions.RUnlock()
	return calls
}

// GetPluralChatRoomCreateActionsByChatRoomActionIDs calls GetPluralChatRoomCreateActionsByChatRoomActionIDsFunc.
func (mock *StoreMock) GetPluralChatRoomCreateActionsByChatRoomActionIDs(ctx context.Context, chatRoomActionIDs []uuid.UUID, order parameter.ChatRoomCreateActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomCreateActionWithCreatedBy], error) {
	if mock.GetPluralChatRoomCreateActionsByChatRoomActionIDsFunc == nil {
		panic("StoreMock.GetPluralChatRoomCreateActionsByChatRoomActionIDsFunc: method is nil but Store.GetPluralChatRoomCreateActionsByChatRoomActionIDs was just called")
	}
	callInfo := struct {
		Ctx               context.Context
		ChatRoomActionIDs []uuid.UUID
		Order             parameter.ChatRoomCreateActionOrderMethod
		Np                NumberedPaginationParam
	}{
		Ctx:               ctx,
		ChatRoomActionIDs: chatRoomActionIDs,
		Order:             order,
		Np:                np,
	}
	mock.lockGetPluralChatRoomCreateActionsByChatRoomActionIDs.Lock()
	mock.calls.GetPluralChatRoomCreateActionsByChatRoomActionIDs = append(mock.calls.GetPluralChatRoomCreateActionsByChatRoomActionIDs, callInfo)
	mock.lockGetPluralChatRoomCreateActionsByChatRoomActionIDs.Unlock()
	return mock.GetPluralChatRoomCreateActionsByChatRoomActionIDsFunc(ctx, chatRoomActionIDs, order, np)
}

// GetPluralChatRoomCreateActionsByChatRoomActionIDsCalls gets all the calls that were made to GetPluralChatRoomCreateActionsByChatRoomActionIDs.
// Check the length with:
//
//	len(mockedStore.GetPluralChatRoomCreateActionsByChatRoomActionIDsCalls())
func (mock *StoreMock) GetPluralChatRoomCreateActionsByChatRoomActionIDsCalls() []struct {
	Ctx               context.Context
	ChatRoomActionIDs []uuid.UUID
	Order             parameter.ChatRoomCreateActionOrderMethod
	Np                NumberedPaginationParam
} {
	var calls []struct {
		Ctx               context.Context
		ChatRoomActionIDs []uuid.UUID
		Order             parameter.ChatRoomCreateActionOrderMethod
		Np                NumberedPaginationParam
	}
	mock.lockGetPluralChatRoomCreateActionsByChatRoomActionIDs.RLock()
	calls = mock.calls.GetPluralChatRoomCreateActionsByChatRoomActionIDs
	mock.lockGetPluralChatRoomCreateActionsByChatRoomActionIDs.RUnlock()
	return calls
}

// GetPluralChatRoomCreateActionsByChatRoomActionIDsWithSd calls GetPluralChatRoomCreateActionsByChatRoomActionIDsWithSdFunc.
func (mock *StoreMock) GetPluralChatRoomCreateActionsByChatRoomActionIDsWithSd(ctx context.Context, sd Sd, chatRoomActionIDs []uuid.UUID, order parameter.ChatRoomCreateActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomCreateActionWithCreatedBy], error) {
	if mock.GetPluralChatRoomCreateActionsByChatRoomActionIDsWithSdFunc == nil {
		panic("StoreMock.GetPluralChatRoomCreateActionsByChatRoomActionIDsWithSdFunc: method is nil but Store.GetPluralChatRoomCreateActionsByChatRoomActionIDsWithSd was just called")
	}
	callInfo := struct {
		Ctx               context.Context
		Sd                Sd
		ChatRoomActionIDs []uuid.UUID
		Order             parameter.ChatRoomCreateActionOrderMethod
		Np                NumberedPaginationParam
	}{
		Ctx:               ctx,
		Sd:                sd,
		ChatRoomActionIDs: chatRoomActionIDs,
		Order:             order,
		Np:                np,
	}
	mock.lockGetPluralChatRoomCreateActionsByChatRoomActionIDsWithSd.Lock()
	mock.calls.GetPluralChatRoomCreateActionsByChatRoomActionIDsWithSd = append(mock.calls.GetPluralChatRoomCreateActionsByChatRoomActionIDsWithSd, callInfo)
	mock.lockGetPluralChatRoomCreateActionsByChatRoomActionIDsWithSd.Unlock()
	return mock.GetPluralChatRoomCreateActionsByChatRoomActionIDsWithSdFunc(ctx, sd, chatRoomActionIDs, order, np)
}

// GetPluralChatRoomCreateActionsByChatRoomActionIDsWithSdCalls gets all the calls that were made to GetPluralChatRoomCreateActionsByChatRoomActionIDsWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralChatRoomCreateActionsByChatRoomActionIDsWithSdCalls())
func (mock *StoreMock) GetPluralChatRoomCreateActionsByChatRoomActionIDsWithSdCalls() []struct {
	Ctx               context.Context
	Sd                Sd
	ChatRoomActionIDs []uuid.UUID
	Order             parameter.ChatRoomCreateActionOrderMethod
	Np                NumberedPaginationParam
} {
	var calls []struct {
		Ctx               context.Context
		Sd                Sd
		ChatRoomActionIDs []uuid.UUID
		Order             parameter.ChatRoomCreateActionOrderMethod
		Np                NumberedPaginationParam
	}
	mock.lockGetPluralChatRoomCreateActionsByChatRoomActionIDsWithSd.RLock()
	calls = mock.calls.GetPluralChatRoomCreateActionsByChatRoomActionIDsWithSd
	mock.lockGetPluralChatRoomCreateActionsByChatRoomActionIDsWithSd.RUnlock()
	return calls
}

// GetPluralChatRoomCreateActionsWithSd calls GetPluralChatRoomCreateActionsWithSdFunc.
func (mock *StoreMock) GetPluralChatRoomCreateActionsWithSd(ctx context.Context, sd Sd, chatRoomCreateActionIDs []uuid.UUID, order parameter.ChatRoomCreateActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomCreateActionWithCreatedBy], error) {
	if mock.GetPluralChatRoomCreateActionsWithSdFunc == nil {
		panic("StoreMock.GetPluralChatRoomCreateActionsWithSdFunc: method is nil but Store.GetPluralChatRoomCreateActionsWithSd was just called")
	}
	callInfo := struct {
		Ctx                     context.Context
		Sd                      Sd
		ChatRoomCreateActionIDs []uuid.UUID
		Order                   parameter.ChatRoomCreateActionOrderMethod
		Np                      NumberedPaginationParam
	}{
		Ctx:                     ctx,
		Sd:                      sd,
		ChatRoomCreateActionIDs: chatRoomCreateActionIDs,
		Order:                   order,
		Np:                      np,
	}
	mock.lockGetPluralChatRoomCreateActionsWithSd.Lock()
	mock.calls.GetPluralChatRoomCreateActionsWithSd = append(mock.calls.GetPluralChatRoomCreateActionsWithSd, callInfo)
	mock.lockGetPluralChatRoomCreateActionsWithSd.Unlock()
	return mock.GetPluralChatRoomCreateActionsWithSdFunc(ctx, sd, chatRoomCreateActionIDs, order, np)
}

// GetPluralChatRoomCreateActionsWithSdCalls gets all the calls that were made to GetPluralChatRoomCreateActionsWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralChatRoomCreateActionsWithSdCalls())
func (mock *StoreMock) GetPluralChatRoomCreateActionsWithSdCalls() []struct {
	Ctx                     context.Context
	Sd                      Sd
	ChatRoomCreateActionIDs []uuid.UUID
	Order                   parameter.ChatRoomCreateActionOrderMethod
	Np                      NumberedPaginationParam
} {
	var calls []struct {
		Ctx                     context.Context
		Sd                      Sd
		ChatRoomCreateActionIDs []uuid.UUID
		Order                   parameter.ChatRoomCreateActionOrderMethod
		Np                      NumberedPaginationParam
	}
	mock.lockGetPluralChatRoomCreateActionsWithSd.RLock()
	calls = mock.calls.GetPluralChatRoomCreateActionsWithSd
	mock.lockGetPluralChatRoomCreateActionsWithSd.RUnlock()
	return calls
}

// GetPluralChatRoomDeleteMessageActions calls GetPluralChatRoomDeleteMessageActionsFunc.
func (mock *StoreMock) GetPluralChatRoomDeleteMessageActions(ctx context.Context, chatRoomDeleteMessageActionIDs []uuid.UUID, order parameter.ChatRoomDeleteMessageActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomDeleteMessageActionWithDeletedBy], error) {
	if mock.GetPluralChatRoomDeleteMessageActionsFunc == nil {
		panic("StoreMock.GetPluralChatRoomDeleteMessageActionsFunc: method is nil but Store.GetPluralChatRoomDeleteMessageActions was just called")
	}
	callInfo := struct {
		Ctx                            context.Context
		ChatRoomDeleteMessageActionIDs []uuid.UUID
		Order                          parameter.ChatRoomDeleteMessageActionOrderMethod
		Np                             NumberedPaginationParam
	}{
		Ctx:                            ctx,
		ChatRoomDeleteMessageActionIDs: chatRoomDeleteMessageActionIDs,
		Order:                          order,
		Np:                             np,
	}
	mock.lockGetPluralChatRoomDeleteMessageActions.Lock()
	mock.calls.GetPluralChatRoomDeleteMessageActions = append(mock.calls.GetPluralChatRoomDeleteMessageActions, callInfo)
	mock.lockGetPluralChatRoomDeleteMessageActions.Unlock()
	return mock.GetPluralChatRoomDeleteMessageActionsFunc(ctx, chatRoomDeleteMessageActionIDs, order, np)
}

// GetPluralChatRoomDeleteMessageActionsCalls gets all the calls that were made to GetPluralChatRoomDeleteMessageActions.
// Check the length with:
//
//	len(mockedStore.GetPluralChatRoomDeleteMessageActionsCalls())
func (mock *StoreMock) GetPluralChatRoomDeleteMessageActionsCalls() []struct {
	Ctx                            context.Context
	ChatRoomDeleteMessageActionIDs []uuid.UUID
	Order                          parameter.ChatRoomDeleteMessageActionOrderMethod
	Np                             NumberedPaginationParam
} {
	var calls []struct {
		Ctx                            context.Context
		ChatRoomDeleteMessageActionIDs []uuid.UUID
		Order                          parameter.ChatRoomDeleteMessageActionOrderMethod
		Np                             NumberedPaginationParam
	}
	mock.lockGetPluralChatRoomDeleteMessageActions.RLock()
	calls = mock.calls.GetPluralChatRoomDeleteMessageActions
	mock.lockGetPluralChatRoomDeleteMessageActions.RUnlock()
	return calls
}

// GetPluralChatRoomDeleteMessageActionsByChatRoomActionIDs calls GetPluralChatRoomDeleteMessageActionsByChatRoomActionIDsFunc.
func (mock *StoreMock) GetPluralChatRoomDeleteMessageActionsByChatRoomActionIDs(ctx context.Context, chatRoomActionIDs []uuid.UUID, order parameter.ChatRoomDeleteMessageActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomDeleteMessageActionWithDeletedBy], error) {
	if mock.GetPluralChatRoomDeleteMessageActionsByChatRoomActionIDsFunc == nil {
		panic("StoreMock.GetPluralChatRoomDeleteMessageActionsByChatRoomActionIDsFunc: method is nil but Store.GetPluralChatRoomDeleteMessageActionsByChatRoomActionIDs was just called")
	}
	callInfo := struct {
		Ctx               context.Context
		ChatRoomActionIDs []uuid.UUID
		Order             parameter.ChatRoomDeleteMessageActionOrderMethod
		Np                NumberedPaginationParam
	}{
		Ctx:               ctx,
		ChatRoomActionIDs: chatRoomActionIDs,
		Order:             order,
		Np:                np,
	}
	mock.lockGetPluralChatRoomDeleteMessageActionsByChatRoomActionIDs.Lock()
	mock.calls.GetPluralChatRoomDeleteMessageActionsByChatRoomActionIDs = append(mock.calls.GetPluralChatRoomDeleteMessageActionsByChatRoomActionIDs, callInfo)
	mock.lockGetPluralChatRoomDeleteMessageActionsByChatRoomActionIDs.Unlock()
	return mock.GetPluralChatRoomDeleteMessageActionsByChatRoomActionIDsFunc(ctx, chatRoomActionIDs, order, np)
}

// GetPluralChatRoomDeleteMessageActionsByChatRoomActionIDsCalls gets all the calls that were made to GetPluralChatRoomDeleteMessageActionsByChatRoomActionIDs.
// Check the length with:
//
//	len(mockedStore.GetPluralChatRoomDeleteMessageActionsByChatRoomActionIDsCalls())
func (mock *StoreMock) GetPluralChatRoomDeleteMessageActionsByChatRoomActionIDsCalls() []struct {
	Ctx               context.Context
	ChatRoomActionIDs []uuid.UUID
	Order             parameter.ChatRoomDeleteMessageActionOrderMethod
	Np                NumberedPaginationParam
} {
	var calls []struct {
		Ctx               context.Context
		ChatRoomActionIDs []uuid.UUID
		Order             parameter.ChatRoomDeleteMessageActionOrderMethod
		Np                NumberedPaginationParam
	}
	mock.lockGetPluralChatRoomDeleteMessageActionsByChatRoomActionIDs.RLock()
	calls = mock.calls.GetPluralChatRoomDeleteMessageActionsByChatRoomActionIDs
	mock.lockGetPluralChatRoomDeleteMessageActionsByChatRoomActionIDs.RUnlock()
	return calls
}

// GetPluralChatRoomDeleteMessageActionsByChatRoomActionIDsWithSd calls GetPluralChatRoomDeleteMessageActionsByChatRoomActionIDsWithSdFunc.
func (mock *StoreMock) GetPluralChatRoomDeleteMessageActionsByChatRoomActionIDsWithSd(ctx context.Context, sd Sd, chatRoomActionIDs []uuid.UUID, order parameter.ChatRoomDeleteMessageActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomDeleteMessageActionWithDeletedBy], error) {
	if mock.GetPluralChatRoomDeleteMessageActionsByChatRoomActionIDsWithSdFunc == nil {
		panic("StoreMock.GetPluralChatRoomDeleteMessageActionsByChatRoomActionIDsWithSdFunc: method is nil but Store.GetPluralChatRoomDeleteMessageActionsByChatRoomActionIDsWithSd was just called")
	}
	callInfo := struct {
		Ctx               context.Context
		Sd                Sd
		ChatRoomActionIDs []uuid.UUID
		Order             parameter.ChatRoomDeleteMessageActionOrderMethod
		Np                NumberedPaginationParam
	}{
		Ctx:               ctx,
		Sd:                sd,
		ChatRoomActionIDs: chatRoomActionIDs,
		Order:             order,
		Np:                np,
	}
	mock.lockGetPluralChatRoomDeleteMessageActionsByChatRoomActionIDsWithSd.Lock()
	mock.calls.GetPluralChatRoomDeleteMessageActionsByChatRoomActionIDsWithSd = append(mock.calls.GetPluralChatRoomDeleteMessageActionsByChatRoomActionIDsWithSd, callInfo)
	mock.lockGetPluralChatRoomDeleteMessageActionsByChatRoomActionIDsWithSd.Unlock()
	return mock.GetPluralChatRoomDeleteMessageActionsByChatRoomActionIDsWithSdFunc(ctx, sd, chatRoomActionIDs, order, np)
}

// GetPluralChatRoomDeleteMessageActionsByChatRoomActionIDsWithSdCalls gets all the calls that were made to GetPluralChatRoomDeleteMessageActionsByChatRoomActionIDsWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralChatRoomDeleteMessageActionsByChatRoomActionIDsWithSdCalls())
func (mock *StoreMock) GetPluralChatRoomDeleteMessageActionsByChatRoomActionIDsWithSdCalls() []struct {
	Ctx               context.Context
	Sd                Sd
	ChatRoomActionIDs []uuid.UUID
	Order             parameter.ChatRoomDeleteMessageActionOrderMethod
	Np                NumberedPaginationParam
} {
	var calls []struct {
		Ctx               context.Context
		Sd                Sd
		ChatRoomActionIDs []uuid.UUID
		Order             parameter.ChatRoomDeleteMessageActionOrderMethod
		Np                NumberedPaginationParam
	}
	mock.lockGetPluralChatRoomDeleteMessageActionsByChatRoomActionIDsWithSd.RLock()
	calls = mock.calls.GetPluralChatRoomDeleteMessageActionsByChatRoomActionIDsWithSd
	mock.lockGetPluralChatRoomDeleteMessageActionsByChatRoomActionIDsWithSd.RUnlock()
	return calls
}

// GetPluralChatRoomDeleteMessageActionsWithSd calls GetPluralChatRoomDeleteMessageActionsWithSdFunc.
func (mock *StoreMock) GetPluralChatRoomDeleteMessageActionsWithSd(ctx context.Context, sd Sd, chatRoomDeleteMessageActionIDs []uuid.UUID, order parameter.ChatRoomDeleteMessageActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomDeleteMessageActionWithDeletedBy], error) {
	if mock.GetPluralChatRoomDeleteMessageActionsWithSdFunc == nil {
		panic("StoreMock.GetPluralChatRoomDeleteMessageActionsWithSdFunc: method is nil but Store.GetPluralChatRoomDeleteMessageActionsWithSd was just called")
	}
	callInfo := struct {
		Ctx                            context.Context
		Sd                             Sd
		ChatRoomDeleteMessageActionIDs []uuid.UUID
		Order                          parameter.ChatRoomDeleteMessageActionOrderMethod
		Np                             NumberedPaginationParam
	}{
		Ctx:                            ctx,
		Sd:                             sd,
		ChatRoomDeleteMessageActionIDs: chatRoomDeleteMessageActionIDs,
		Order:                          order,
		Np:                             np,
	}
	mock.lockGetPluralChatRoomDeleteMessageActionsWithSd.Lock()
	mock.calls.GetPluralChatRoomDeleteMessageActionsWithSd = append(mock.calls.GetPluralChatRoomDeleteMessageActionsWithSd, callInfo)
	mock.lockGetPluralChatRoomDeleteMessageActionsWithSd.Unlock()
	return mock.GetPluralChatRoomDeleteMessageActionsWithSdFunc(ctx, sd, chatRoomDeleteMessageActionIDs, order, np)
}

// GetPluralChatRoomDeleteMessageActionsWithSdCalls gets all the calls that were made to GetPluralChatRoomDeleteMessageActionsWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralChatRoomDeleteMessageActionsWithSdCalls())
func (mock *StoreMock) GetPluralChatRoomDeleteMessageActionsWithSdCalls() []struct {
	Ctx                            context.Context
	Sd                             Sd
	ChatRoomDeleteMessageActionIDs []uuid.UUID
	Order                          parameter.ChatRoomDeleteMessageActionOrderMethod
	Np                             NumberedPaginationParam
} {
	var calls []struct {
		Ctx                            context.Context
		Sd                             Sd
		ChatRoomDeleteMessageActionIDs []uuid.UUID
		Order                          parameter.ChatRoomDeleteMessageActionOrderMethod
		Np                             NumberedPaginationParam
	}
	mock.lockGetPluralChatRoomDeleteMessageActionsWithSd.RLock()
	calls = mock.calls.GetPluralChatRoomDeleteMessageActionsWithSd
	mock.lockGetPluralChatRoomDeleteMessageActionsWithSd.RUnlock()
	return calls
}

// GetPluralChatRoomRemoveMemberActions calls GetPluralChatRoomRemoveMemberActionsFunc.
func (mock *StoreMock) GetPluralChatRoomRemoveMemberActions(ctx context.Context, chatRoomRemoveMemberActionIDs []uuid.UUID, order parameter.ChatRoomRemoveMemberActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomRemoveMemberActionWithRemovedBy], error) {
	if mock.GetPluralChatRoomRemoveMemberActionsFunc == nil {
		panic("StoreMock.GetPluralChatRoomRemoveMemberActionsFunc: method is nil but Store.GetPluralChatRoomRemoveMemberActions was just called")
	}
	callInfo := struct {
		Ctx                           context.Context
		ChatRoomRemoveMemberActionIDs []uuid.UUID
		Order                         parameter.ChatRoomRemoveMemberActionOrderMethod
		Np                            NumberedPaginationParam
	}{
		Ctx:                           ctx,
		ChatRoomRemoveMemberActionIDs: chatRoomRemoveMemberActionIDs,
		Order:                         order,
		Np:                            np,
	}
	mock.lockGetPluralChatRoomRemoveMemberActions.Lock()
	mock.calls.GetPluralChatRoomRemoveMemberActions = append(mock.calls.GetPluralChatRoomRemoveMemberActions, callInfo)
	mock.lockGetPluralChatRoomRemoveMemberActions.Unlock()
	return mock.GetPluralChatRoomRemoveMemberActionsFunc(ctx, chatRoomRemoveMemberActionIDs, order, np)
}

// GetPluralChatRoomRemoveMemberActionsCalls gets all the calls that were made to GetPluralChatRoomRemoveMemberActions.
// Check the length with:
//
//	len(mockedStore.GetPluralChatRoomRemoveMemberActionsCalls())
func (mock *StoreMock) GetPluralChatRoomRemoveMemberActionsCalls() []struct {
	Ctx                           context.Context
	ChatRoomRemoveMemberActionIDs []uuid.UUID
	Order                         parameter.ChatRoomRemoveMemberActionOrderMethod
	Np                            NumberedPaginationParam
} {
	var calls []struct {
		Ctx                           context.Context
		ChatRoomRemoveMemberActionIDs []uuid.UUID
		Order                         parameter.ChatRoomRemoveMemberActionOrderMethod
		Np                            NumberedPaginationParam
	}
	mock.lockGetPluralChatRoomRemoveMemberActions.RLock()
	calls = mock.calls.GetPluralChatRoomRemoveMemberActions
	mock.lockGetPluralChatRoomRemoveMemberActions.RUnlock()
	return calls
}

// GetPluralChatRoomRemoveMemberActionsByChatRoomActionIDs calls GetPluralChatRoomRemoveMemberActionsByChatRoomActionIDsFunc.
func (mock *StoreMock) GetPluralChatRoomRemoveMemberActionsByChatRoomActionIDs(ctx context.Context, chatRoomActionIDs []uuid.UUID, order parameter.ChatRoomRemoveMemberActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomRemoveMemberActionWithRemovedBy], error) {
	if mock.GetPluralChatRoomRemoveMemberActionsByChatRoomActionIDsFunc == nil {
		panic("StoreMock.GetPluralChatRoomRemoveMemberActionsByChatRoomActionIDsFunc: method is nil but Store.GetPluralChatRoomRemoveMemberActionsByChatRoomActionIDs was just called")
	}
	callInfo := struct {
		Ctx               context.Context
		ChatRoomActionIDs []uuid.UUID
		Order             parameter.ChatRoomRemoveMemberActionOrderMethod
		Np                NumberedPaginationParam
	}{
		Ctx:               ctx,
		ChatRoomActionIDs: chatRoomActionIDs,
		Order:             order,
		Np:                np,
	}
	mock.lockGetPluralChatRoomRemoveMemberActionsByChatRoomActionIDs.Lock()
	mock.calls.GetPluralChatRoomRemoveMemberActionsByChatRoomActionIDs = append(mock.calls.GetPluralChatRoomRemoveMemberActionsByChatRoomActionIDs, callInfo)
	mock.lockGetPluralChatRoomRemoveMemberActionsByChatRoomActionIDs.Unlock()
	return mock.GetPluralChatRoomRemoveMemberActionsByChatRoomActionIDsFunc(ctx, chatRoomActionIDs, order, np)
}

// GetPluralChatRoomRemoveMemberActionsByChatRoomActionIDsCalls gets all the calls that were made to GetPluralChatRoomRemoveMemberActionsByChatRoomActionIDs.
// Check the length with:
//
//	len(mockedStore.GetPluralChatRoomRemoveMemberActionsByChatRoomActionIDsCalls())
func (mock *StoreMock) GetPluralChatRoomRemoveMemberActionsByChatRoomActionIDsCalls() []struct {
	Ctx               context.Context
	ChatRoomActionIDs []uuid.UUID
	Order             parameter.ChatRoomRemoveMemberActionOrderMethod
	Np                NumberedPaginationParam
} {
	var calls []struct {
		Ctx               context.Context
		ChatRoomActionIDs []uuid.UUID
		Order             parameter.ChatRoomRemoveMemberActionOrderMethod
		Np                NumberedPaginationParam
	}
	mock.lockGetPluralChatRoomRemoveMemberActionsByChatRoomActionIDs.RLock()
	calls = mock.calls.GetPluralChatRoomRemoveMemberActionsByChatRoomActionIDs
	mock.lockGetPluralChatRoomRemoveMemberActionsByChatRoomActionIDs.RUnlock()
	return calls
}

// GetPluralChatRoomRemoveMemberActionsByChatRoomActionIDsWithSd calls GetPluralChatRoomRemoveMemberActionsByChatRoomActionIDsWithSdFunc.
func (mock *StoreMock) GetPluralChatRoomRemoveMemberActionsByChatRoomActionIDsWithSd(ctx context.Context, sd Sd, chatRoomActionIDs []uuid.UUID, order parameter.ChatRoomRemoveMemberActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomRemoveMemberActionWithRemovedBy], error) {
	if mock.GetPluralChatRoomRemoveMemberActionsByChatRoomActionIDsWithSdFunc == nil {
		panic("StoreMock.GetPluralChatRoomRemoveMemberActionsByChatRoomActionIDsWithSdFunc: method is nil but Store.GetPluralChatRoomRemoveMemberActionsByChatRoomActionIDsWithSd was just called")
	}
	callInfo := struct {
		Ctx               context.Context
		Sd                Sd
		ChatRoomActionIDs []uuid.UUID
		Order             parameter.ChatRoomRemoveMemberActionOrderMethod
		Np                NumberedPaginationParam
	}{
		Ctx:               ctx,
		Sd:                sd,
		ChatRoomActionIDs: chatRoomActionIDs,
		Order:             order,
		Np:                np,
	}
	mock.lockGetPluralChatRoomRemoveMemberActionsByChatRoomActionIDsWithSd.Lock()
	mock.calls.GetPluralChatRoomRemoveMemberActionsByChatRoomActionIDsWithSd = append(mock.calls.GetPluralChatRoomRemoveMemberActionsByChatRoomActionIDsWithSd, callInfo)
	mock.lockGetPluralChatRoomRemoveMemberActionsByChatRoomActionIDsWithSd.Unlock()
	return mock.GetPluralChatRoomRemoveMemberActionsByChatRoomActionIDsWithSdFunc(ctx, sd, chatRoomActionIDs, order, np)
}

// GetPluralChatRoomRemoveMemberActionsByChatRoomActionIDsWithSdCalls gets all the calls that were made to GetPluralChatRoomRemoveMemberActionsByChatRoomActionIDsWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralChatRoomRemoveMemberActionsByChatRoomActionIDsWithSdCalls())
func (mock *StoreMock) GetPluralChatRoomRemoveMemberActionsByChatRoomActionIDsWithSdCalls() []struct {
	Ctx               context.Context
	Sd                Sd
	ChatRoomActionIDs []uuid.UUID
	Order             parameter.ChatRoomRemoveMemberActionOrderMethod
	Np                NumberedPaginationParam
} {
	var calls []struct {
		Ctx               context.Context
		Sd                Sd
		ChatRoomActionIDs []uuid.UUID
		Order             parameter.ChatRoomRemoveMemberActionOrderMethod
		Np                NumberedPaginationParam
	}
	mock.lockGetPluralChatRoomRemoveMemberActionsByChatRoomActionIDsWithSd.RLock()
	calls = mock.calls.GetPluralChatRoomRemoveMemberActionsByChatRoomActionIDsWithSd
	mock.lockGetPluralChatRoomRemoveMemberActionsByChatRoomActionIDsWithSd.RUnlock()
	return calls
}

// GetPluralChatRoomRemoveMemberActionsWithSd calls GetPluralChatRoomRemoveMemberActionsWithSdFunc.
func (mock *StoreMock) GetPluralChatRoomRemoveMemberActionsWithSd(ctx context.Context, sd Sd, chatRoomRemoveMemberActionIDs []uuid.UUID, order parameter.ChatRoomRemoveMemberActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomRemoveMemberActionWithRemovedBy], error) {
	if mock.GetPluralChatRoomRemoveMemberActionsWithSdFunc == nil {
		panic("StoreMock.GetPluralChatRoomRemoveMemberActionsWithSdFunc: method is nil but Store.GetPluralChatRoomRemoveMemberActionsWithSd was just called")
	}
	callInfo := struct {
		Ctx                           context.Context
		Sd                            Sd
		ChatRoomRemoveMemberActionIDs []uuid.UUID
		Order                         parameter.ChatRoomRemoveMemberActionOrderMethod
		Np                            NumberedPaginationParam
	}{
		Ctx:                           ctx,
		Sd:                            sd,
		ChatRoomRemoveMemberActionIDs: chatRoomRemoveMemberActionIDs,
		Order:                         order,
		Np:                            np,
	}
	mock.lockGetPluralChatRoomRemoveMemberActionsWithSd.Lock()
	mock.calls.GetPluralChatRoomRemoveMemberActionsWithSd = append(mock.calls.GetPluralChatRoomRemoveMemberActionsWithSd, callInfo)
	mock.lockGetPluralChatRoomRemoveMemberActionsWithSd.Unlock()
	return mock.GetPluralChatRoomRemoveMemberActionsWithSdFunc(ctx, sd, chatRoomRemoveMemberActionIDs, order, np)
}

// GetPluralChatRoomRemoveMemberActionsWithSdCalls gets all the calls that were made to GetPluralChatRoomRemoveMemberActionsWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralChatRoomRemoveMemberActionsWithSdCalls())
func (mock *StoreMock) GetPluralChatRoomRemoveMemberActionsWithSdCalls() []struct {
	Ctx                           context.Context
	Sd                            Sd
	ChatRoomRemoveMemberActionIDs []uuid.UUID
	Order                         parameter.ChatRoomRemoveMemberActionOrderMethod
	Np                            NumberedPaginationParam
} {
	var calls []struct {
		Ctx                           context.Context
		Sd                            Sd
		ChatRoomRemoveMemberActionIDs []uuid.UUID
		Order                         parameter.ChatRoomRemoveMemberActionOrderMethod
		Np                            NumberedPaginationParam
	}
	mock.lockGetPluralChatRoomRemoveMemberActionsWithSd.RLock()
	calls = mock.calls.GetPluralChatRoomRemoveMemberActionsWithSd
	mock.lockGetPluralChatRoomRemoveMemberActionsWithSd.RUnlock()
	return calls
}

// GetPluralChatRoomUpdateNameActions calls GetPluralChatRoomUpdateNameActionsFunc.
func (mock *StoreMock) GetPluralChatRoomUpdateNameActions(ctx context.Context, chatRoomUpdateNameActionIDs []uuid.UUID, order parameter.ChatRoomUpdateNameActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomUpdateNameActionWithUpdatedBy], error) {
	if mock.GetPluralChatRoomUpdateNameActionsFunc == nil {
		panic("StoreMock.GetPluralChatRoomUpdateNameActionsFunc: method is nil but Store.GetPluralChatRoomUpdateNameActions was just called")
	}
	callInfo := struct {
		Ctx                         context.Context
		ChatRoomUpdateNameActionIDs []uuid.UUID
		Order                       parameter.ChatRoomUpdateNameActionOrderMethod
		Np                          NumberedPaginationParam
	}{
		Ctx:                         ctx,
		ChatRoomUpdateNameActionIDs: chatRoomUpdateNameActionIDs,
		Order:                       order,
		Np:                          np,
	}
	mock.lockGetPluralChatRoomUpdateNameActions.Lock()
	mock.calls.GetPluralChatRoomUpdateNameActions = append(mock.calls.GetPluralChatRoomUpdateNameActions, callInfo)
	mock.lockGetPluralChatRoomUpdateNameActions.Unlock()
	return mock.GetPluralChatRoomUpdateNameActionsFunc(ctx, chatRoomUpdateNameActionIDs, order, np)
}

// GetPluralChatRoomUpdateNameActionsCalls gets all the calls that were made to GetPluralChatRoomUpdateNameActions.
// Check the length with:
//
//	len(mockedStore.GetPluralChatRoomUpdateNameActionsCalls())
func (mock *StoreMock) GetPluralChatRoomUpdateNameActionsCalls() []struct {
	Ctx                         context.Context
	ChatRoomUpdateNameActionIDs []uuid.UUID
	Order                       parameter.ChatRoomUpdateNameActionOrderMethod
	Np                          NumberedPaginationParam
} {
	var calls []struct {
		Ctx                         context.Context
		ChatRoomUpdateNameActionIDs []uuid.UUID
		Order                       parameter.ChatRoomUpdateNameActionOrderMethod
		Np                          NumberedPaginationParam
	}
	mock.lockGetPluralChatRoomUpdateNameActions.RLock()
	calls = mock.calls.GetPluralChatRoomUpdateNameActions
	mock.lockGetPluralChatRoomUpdateNameActions.RUnlock()
	return calls
}

// GetPluralChatRoomUpdateNameActionsByChatRoomActionIDs calls GetPluralChatRoomUpdateNameActionsByChatRoomActionIDsFunc.
func (mock *StoreMock) GetPluralChatRoomUpdateNameActionsByChatRoomActionIDs(ctx context.Context, chatRoomActionIDs []uuid.UUID, order parameter.ChatRoomUpdateNameActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomUpdateNameActionWithUpdatedBy], error) {
	if mock.GetPluralChatRoomUpdateNameActionsByChatRoomActionIDsFunc == nil {
		panic("StoreMock.GetPluralChatRoomUpdateNameActionsByChatRoomActionIDsFunc: method is nil but Store.GetPluralChatRoomUpdateNameActionsByChatRoomActionIDs was just called")
	}
	callInfo := struct {
		Ctx               context.Context
		ChatRoomActionIDs []uuid.UUID
		Order             parameter.ChatRoomUpdateNameActionOrderMethod
		Np                NumberedPaginationParam
	}{
		Ctx:               ctx,
		ChatRoomActionIDs: chatRoomActionIDs,
		Order:             order,
		Np:                np,
	}
	mock.lockGetPluralChatRoomUpdateNameActionsByChatRoomActionIDs.Lock()
	mock.calls.GetPluralChatRoomUpdateNameActionsByChatRoomActionIDs = append(mock.calls.GetPluralChatRoomUpdateNameActionsByChatRoomActionIDs, callInfo)
	mock.lockGetPluralChatRoomUpdateNameActionsByChatRoomActionIDs.Unlock()
	return mock.GetPluralChatRoomUpdateNameActionsByChatRoomActionIDsFunc(ctx, chatRoomActionIDs, order, np)
}

// GetPluralChatRoomUpdateNameActionsByChatRoomActionIDsCalls gets all the calls that were made to GetPluralChatRoomUpdateNameActionsByChatRoomActionIDs.
// Check the length with:
//
//	len(mockedStore.GetPluralChatRoomUpdateNameActionsByChatRoomActionIDsCalls())
func (mock *StoreMock) GetPluralChatRoomUpdateNameActionsByChatRoomActionIDsCalls() []struct {
	Ctx               context.Context
	ChatRoomActionIDs []uuid.UUID
	Order             parameter.ChatRoomUpdateNameActionOrderMethod
	Np                NumberedPaginationParam
} {
	var calls []struct {
		Ctx               context.Context
		ChatRoomActionIDs []uuid.UUID
		Order             parameter.ChatRoomUpdateNameActionOrderMethod
		Np                NumberedPaginationParam
	}
	mock.lockGetPluralChatRoomUpdateNameActionsByChatRoomActionIDs.RLock()
	calls = mock.calls.GetPluralChatRoomUpdateNameActionsByChatRoomActionIDs
	mock.lockGetPluralChatRoomUpdateNameActionsByChatRoomActionIDs.RUnlock()
	return calls
}

// GetPluralChatRoomUpdateNameActionsByChatRoomActionIDsWithSd calls GetPluralChatRoomUpdateNameActionsByChatRoomActionIDsWithSdFunc.
func (mock *StoreMock) GetPluralChatRoomUpdateNameActionsByChatRoomActionIDsWithSd(ctx context.Context, sd Sd, chatRoomActionIDs []uuid.UUID, order parameter.ChatRoomUpdateNameActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomUpdateNameActionWithUpdatedBy], error) {
	if mock.GetPluralChatRoomUpdateNameActionsByChatRoomActionIDsWithSdFunc == nil {
		panic("StoreMock.GetPluralChatRoomUpdateNameActionsByChatRoomActionIDsWithSdFunc: method is nil but Store.GetPluralChatRoomUpdateNameActionsByChatRoomActionIDsWithSd was just called")
	}
	callInfo := struct {
		Ctx               context.Context
		Sd                Sd
		ChatRoomActionIDs []uuid.UUID
		Order             parameter.ChatRoomUpdateNameActionOrderMethod
		Np                NumberedPaginationParam
	}{
		Ctx:               ctx,
		Sd:                sd,
		ChatRoomActionIDs: chatRoomActionIDs,
		Order:             order,
		Np:                np,
	}
	mock.lockGetPluralChatRoomUpdateNameActionsByChatRoomActionIDsWithSd.Lock()
	mock.calls.GetPluralChatRoomUpdateNameActionsByChatRoomActionIDsWithSd = append(mock.calls.GetPluralChatRoomUpdateNameActionsByChatRoomActionIDsWithSd, callInfo)
	mock.lockGetPluralChatRoomUpdateNameActionsByChatRoomActionIDsWithSd.Unlock()
	return mock.GetPluralChatRoomUpdateNameActionsByChatRoomActionIDsWithSdFunc(ctx, sd, chatRoomActionIDs, order, np)
}

// GetPluralChatRoomUpdateNameActionsByChatRoomActionIDsWithSdCalls gets all the calls that were made to GetPluralChatRoomUpdateNameActionsByChatRoomActionIDsWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralChatRoomUpdateNameActionsByChatRoomActionIDsWithSdCalls())
func (mock *StoreMock) GetPluralChatRoomUpdateNameActionsByChatRoomActionIDsWithSdCalls() []struct {
	Ctx               context.Context
	Sd                Sd
	ChatRoomActionIDs []uuid.UUID
	Order             parameter.ChatRoomUpdateNameActionOrderMethod
	Np                NumberedPaginationParam
} {
	var calls []struct {
		Ctx               context.Context
		Sd                Sd
		ChatRoomActionIDs []uuid.UUID
		Order             parameter.ChatRoomUpdateNameActionOrderMethod
		Np                NumberedPaginationParam
	}
	mock.lockGetPluralChatRoomUpdateNameActionsByChatRoomActionIDsWithSd.RLock()
	calls = mock.calls.GetPluralChatRoomUpdateNameActionsByChatRoomActionIDsWithSd
	mock.lockGetPluralChatRoomUpdateNameActionsByChatRoomActionIDsWithSd.RUnlock()
	return calls
}

// GetPluralChatRoomUpdateNameActionsWithSd calls GetPluralChatRoomUpdateNameActionsWithSdFunc.
func (mock *StoreMock) GetPluralChatRoomUpdateNameActionsWithSd(ctx context.Context, sd Sd, chatRoomUpdateNameActionIDs []uuid.UUID, order parameter.ChatRoomUpdateNameActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomUpdateNameActionWithUpdatedBy], error) {
	if mock.GetPluralChatRoomUpdateNameActionsWithSdFunc == nil {
		panic("StoreMock.GetPluralChatRoomUpdateNameActionsWithSdFunc: method is nil but Store.GetPluralChatRoomUpdateNameActionsWithSd was just called")
	}
	callInfo := struct {
		Ctx                         context.Context
		Sd                          Sd
		ChatRoomUpdateNameActionIDs []uuid.UUID
		Order                       parameter.ChatRoomUpdateNameActionOrderMethod
		Np                          NumberedPaginationParam
	}{
		Ctx:                         ctx,
		Sd:                          sd,
		ChatRoomUpdateNameActionIDs: chatRoomUpdateNameActionIDs,
		Order:                       order,
		Np:                          np,
	}
	mock.lockGetPluralChatRoomUpdateNameActionsWithSd.Lock()
	mock.calls.GetPluralChatRoomUpdateNameActionsWithSd = append(mock.calls.GetPluralChatRoomUpdateNameActionsWithSd, callInfo)
	mock.lockGetPluralChatRoomUpdateNameActionsWithSd.Unlock()
	return mock.GetPluralChatRoomUpdateNameActionsWithSdFunc(ctx, sd, chatRoomUpdateNameActionIDs, order, np)
}

// GetPluralChatRoomUpdateNameActionsWithSdCalls gets all the calls that were made to GetPluralChatRoomUpdateNameActionsWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralChatRoomUpdateNameActionsWithSdCalls())
func (mock *StoreMock) GetPluralChatRoomUpdateNameActionsWithSdCalls() []struct {
	Ctx                         context.Context
	Sd                          Sd
	ChatRoomUpdateNameActionIDs []uuid.UUID
	Order                       parameter.ChatRoomUpdateNameActionOrderMethod
	Np                          NumberedPaginationParam
} {
	var calls []struct {
		Ctx                         context.Context
		Sd                          Sd
		ChatRoomUpdateNameActionIDs []uuid.UUID
		Order                       parameter.ChatRoomUpdateNameActionOrderMethod
		Np                          NumberedPaginationParam
	}
	mock.lockGetPluralChatRoomUpdateNameActionsWithSd.RLock()
	calls = mock.calls.GetPluralChatRoomUpdateNameActionsWithSd
	mock.lockGetPluralChatRoomUpdateNameActionsWithSd.RUnlock()
	return calls
}

// GetPluralChatRoomWithdrawActions calls GetPluralChatRoomWithdrawActionsFunc.
func (mock *StoreMock) GetPluralChatRoomWithdrawActions(ctx context.Context, chatRoomWithdrawActionIDs []uuid.UUID, order parameter.ChatRoomWithdrawActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomWithdrawActionWithMember], error) {
	if mock.GetPluralChatRoomWithdrawActionsFunc == nil {
		panic("StoreMock.GetPluralChatRoomWithdrawActionsFunc: method is nil but Store.GetPluralChatRoomWithdrawActions was just called")
	}
	callInfo := struct {
		Ctx                       context.Context
		ChatRoomWithdrawActionIDs []uuid.UUID
		Order                     parameter.ChatRoomWithdrawActionOrderMethod
		Np                        NumberedPaginationParam
	}{
		Ctx:                       ctx,
		ChatRoomWithdrawActionIDs: chatRoomWithdrawActionIDs,
		Order:                     order,
		Np:                        np,
	}
	mock.lockGetPluralChatRoomWithdrawActions.Lock()
	mock.calls.GetPluralChatRoomWithdrawActions = append(mock.calls.GetPluralChatRoomWithdrawActions, callInfo)
	mock.lockGetPluralChatRoomWithdrawActions.Unlock()
	return mock.GetPluralChatRoomWithdrawActionsFunc(ctx, chatRoomWithdrawActionIDs, order, np)
}

// GetPluralChatRoomWithdrawActionsCalls gets all the calls that were made to GetPluralChatRoomWithdrawActions.
// Check the length with:
//
//	len(mockedStore.GetPluralChatRoomWithdrawActionsCalls())
func (mock *StoreMock) GetPluralChatRoomWithdrawActionsCalls() []struct {
	Ctx                       context.Context
	ChatRoomWithdrawActionIDs []uuid.UUID
	Order                     parameter.ChatRoomWithdrawActionOrderMethod
	Np                        NumberedPaginationParam
} {
	var calls []struct {
		Ctx                       context.Context
		ChatRoomWithdrawActionIDs []uuid.UUID
		Order                     parameter.ChatRoomWithdrawActionOrderMethod
		Np                        NumberedPaginationParam
	}
	mock.lockGetPluralChatRoomWithdrawActions.RLock()
	calls = mock.calls.GetPluralChatRoomWithdrawActions
	mock.lockGetPluralChatRoomWithdrawActions.RUnlock()
	return calls
}

// GetPluralChatRoomWithdrawActionsByChatRoomActionIDs calls GetPluralChatRoomWithdrawActionsByChatRoomActionIDsFunc.
func (mock *StoreMock) GetPluralChatRoomWithdrawActionsByChatRoomActionIDs(ctx context.Context, chatRoomActionIDs []uuid.UUID, order parameter.ChatRoomWithdrawActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomWithdrawActionWithMember], error) {
	if mock.GetPluralChatRoomWithdrawActionsByChatRoomActionIDsFunc == nil {
		panic("StoreMock.GetPluralChatRoomWithdrawActionsByChatRoomActionIDsFunc: method is nil but Store.GetPluralChatRoomWithdrawActionsByChatRoomActionIDs was just called")
	}
	callInfo := struct {
		Ctx               context.Context
		ChatRoomActionIDs []uuid.UUID
		Order             parameter.ChatRoomWithdrawActionOrderMethod
		Np                NumberedPaginationParam
	}{
		Ctx:               ctx,
		ChatRoomActionIDs: chatRoomActionIDs,
		Order:             order,
		Np:                np,
	}
	mock.lockGetPluralChatRoomWithdrawActionsByChatRoomActionIDs.Lock()
	mock.calls.GetPluralChatRoomWithdrawActionsByChatRoomActionIDs = append(mock.calls.GetPluralChatRoomWithdrawActionsByChatRoomActionIDs, callInfo)
	mock.lockGetPluralChatRoomWithdrawActionsByChatRoomActionIDs.Unlock()
	return mock.GetPluralChatRoomWithdrawActionsByChatRoomActionIDsFunc(ctx, chatRoomActionIDs, order, np)
}

// GetPluralChatRoomWithdrawActionsByChatRoomActionIDsCalls gets all the calls that were made to GetPluralChatRoomWithdrawActionsByChatRoomActionIDs.
// Check the length with:
//
//	len(mockedStore.GetPluralChatRoomWithdrawActionsByChatRoomActionIDsCalls())
func (mock *StoreMock) GetPluralChatRoomWithdrawActionsByChatRoomActionIDsCalls() []struct {
	Ctx               context.Context
	ChatRoomActionIDs []uuid.UUID
	Order             parameter.ChatRoomWithdrawActionOrderMethod
	Np                NumberedPaginationParam
} {
	var calls []struct {
		Ctx               context.Context
		ChatRoomActionIDs []uuid.UUID
		Order             parameter.ChatRoomWithdrawActionOrderMethod
		Np                NumberedPaginationParam
	}
	mock.lockGetPluralChatRoomWithdrawActionsByChatRoomActionIDs.RLock()
	calls = mock.calls.GetPluralChatRoomWithdrawActionsByChatRoomActionIDs
	mock.lockGetPluralChatRoomWithdrawActionsByChatRoomActionIDs.RUnlock()
	return calls
}

// GetPluralChatRoomWithdrawActionsByChatRoomActionIDsWithSd calls GetPluralChatRoomWithdrawActionsByChatRoomActionIDsWithSdFunc.
func (mock *StoreMock) GetPluralChatRoomWithdrawActionsByChatRoomActionIDsWithSd(ctx context.Context, sd Sd, chatRoomActionIDs []uuid.UUID, order parameter.ChatRoomWithdrawActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomWithdrawActionWithMember], error) {
	if mock.GetPluralChatRoomWithdrawActionsByChatRoomActionIDsWithSdFunc == nil {
		panic("StoreMock.GetPluralChatRoomWithdrawActionsByChatRoomActionIDsWithSdFunc: method is nil but Store.GetPluralChatRoomWithdrawActionsByChatRoomActionIDsWithSd was just called")
	}
	callInfo := struct {
		Ctx               context.Context
		Sd                Sd
		ChatRoomActionIDs []uuid.UUID
		Order             parameter.ChatRoomWithdrawActionOrderMethod
		Np                NumberedPaginationParam
	}{
		Ctx:               ctx,
		Sd:                sd,
		ChatRoomActionIDs: chatRoomActionIDs,
		Order:             order,
		Np:                np,
	}
	mock.lockGetPluralChatRoomWithdrawActionsByChatRoomActionIDsWithSd.Lock()
	mock.calls.GetPluralChatRoomWithdrawActionsByChatRoomActionIDsWithSd = append(mock.calls.GetPluralChatRoomWithdrawActionsByChatRoomActionIDsWithSd, callInfo)
	mock.lockGetPluralChatRoomWithdrawActionsByChatRoomActionIDsWithSd.Unlock()
	return mock.GetPluralChatRoomWithdrawActionsByChatRoomActionIDsWithSdFunc(ctx, sd, chatRoomActionIDs, order, np)
}

// GetPluralChatRoomWithdrawActionsByChatRoomActionIDsWithSdCalls gets all the calls that were made to GetPluralChatRoomWithdrawActionsByChatRoomActionIDsWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralChatRoomWithdrawActionsByChatRoomActionIDsWithSdCalls())
func (mock *StoreMock) GetPluralChatRoomWithdrawActionsByChatRoomActionIDsWithSdCalls() []struct {
	Ctx               context.Context
	Sd                Sd
	ChatRoomActionIDs []uuid.UUID
	Order             parameter.ChatRoomWithdrawActionOrderMethod
	Np                NumberedPaginationParam
} {
	var calls []struct {
		Ctx               context.Context
		Sd                Sd
		ChatRoomActionIDs []uuid.UUID
		Order             parameter.ChatRoomWithdrawActionOrderMethod
		Np                NumberedPaginationParam
	}
	mock.lockGetPluralChatRoomWithdrawActionsByChatRoomActionIDsWithSd.RLock()
	calls = mock.calls.GetPluralChatRoomWithdrawActionsByChatRoomActionIDsWithSd
	mock.lockGetPluralChatRoomWithdrawActionsByChatRoomActionIDsWithSd.RUnlock()
	return calls
}

// GetPluralChatRoomWithdrawActionsWithSd calls GetPluralChatRoomWithdrawActionsWithSdFunc.
func (mock *StoreMock) GetPluralChatRoomWithdrawActionsWithSd(ctx context.Context, sd Sd, chatRoomWithdrawActionIDs []uuid.UUID, order parameter.ChatRoomWithdrawActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomWithdrawActionWithMember], error) {
	if mock.GetPluralChatRoomWithdrawActionsWithSdFunc == nil {
		panic("StoreMock.GetPluralChatRoomWithdrawActionsWithSdFunc: method is nil but Store.GetPluralChatRoomWithdrawActionsWithSd was just called")
	}
	callInfo := struct {
		Ctx                       context.Context
		Sd                        Sd
		ChatRoomWithdrawActionIDs []uuid.UUID
		Order                     parameter.ChatRoomWithdrawActionOrderMethod
		Np                        NumberedPaginationParam
	}{
		Ctx:                       ctx,
		Sd:                        sd,
		ChatRoomWithdrawActionIDs: chatRoomWithdrawActionIDs,
		Order:                     order,
		Np:                        np,
	}
	mock.lockGetPluralChatRoomWithdrawActionsWithSd.Lock()
	mock.calls.GetPluralChatRoomWithdrawActionsWithSd = append(mock.calls.GetPluralChatRoomWithdrawActionsWithSd, callInfo)
	mock.lockGetPluralChatRoomWithdrawActionsWithSd.Unlock()
	return mock.GetPluralChatRoomWithdrawActionsWithSdFunc(ctx, sd, chatRoomWithdrawActionIDs, order, np)
}

// GetPluralChatRoomWithdrawActionsWithSdCalls gets all the calls that were made to GetPluralChatRoomWithdrawActionsWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralChatRoomWithdrawActionsWithSdCalls())
func (mock *StoreMock) GetPluralChatRoomWithdrawActionsWithSdCalls() []struct {
	Ctx                       context.Context
	Sd                        Sd
	ChatRoomWithdrawActionIDs []uuid.UUID
	Order                     parameter.ChatRoomWithdrawActionOrderMethod
	Np                        NumberedPaginationParam
} {
	var calls []struct {
		Ctx                       context.Context
		Sd                        Sd
		ChatRoomWithdrawActionIDs []uuid.UUID
		Order                     parameter.ChatRoomWithdrawActionOrderMethod
		Np                        NumberedPaginationParam
	}
	mock.lockGetPluralChatRoomWithdrawActionsWithSd.RLock()
	calls = mock.calls.GetPluralChatRoomWithdrawActionsWithSd
	mock.lockGetPluralChatRoomWithdrawActionsWithSd.RUnlock()
	return calls
}

// GetPluralChatRooms calls GetPluralChatRoomsFunc.
func (mock *StoreMock) GetPluralChatRooms(ctx context.Context, chatRoomIDs []uuid.UUID, order parameter.ChatRoomOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoom], error) {
	if mock.GetPluralChatRoomsFunc == nil {
		panic("StoreMock.GetPluralChatRoomsFunc: method is nil but Store.GetPluralChatRooms was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		ChatRoomIDs []uuid.UUID
		Order       parameter.ChatRoomOrderMethod
		Np          NumberedPaginationParam
	}{
		Ctx:         ctx,
		ChatRoomIDs: chatRoomIDs,
		Order:       order,
		Np:          np,
	}
	mock.lockGetPluralChatRooms.Lock()
	mock.calls.GetPluralChatRooms = append(mock.calls.GetPluralChatRooms, callInfo)
	mock.lockGetPluralChatRooms.Unlock()
	return mock.GetPluralChatRoomsFunc(ctx, chatRoomIDs, order, np)
}

// GetPluralChatRoomsCalls gets all the calls that were made to GetPluralChatRooms.
// Check the length with:
//
//	len(mockedStore.GetPluralChatRoomsCalls())
func (mock *StoreMock) GetPluralChatRoomsCalls() []struct {
	Ctx         context.Context
	ChatRoomIDs []uuid.UUID
	Order       parameter.ChatRoomOrderMethod
	Np          NumberedPaginationParam
} {
	var calls []struct {
		Ctx         context.Context
		ChatRoomIDs []uuid.UUID
		Order       parameter.ChatRoomOrderMethod
		Np          NumberedPaginationParam
	}
	mock.lockGetPluralChatRooms.RLock()
	calls = mock.calls.GetPluralChatRooms
	mock.lockGetPluralChatRooms.RUnlock()
	return calls
}

// GetPluralChatRoomsOnMember calls GetPluralChatRoomsOnMemberFunc.
func (mock *StoreMock) GetPluralChatRoomsOnMember(ctx context.Context, memberIDs []uuid.UUID, np NumberedPaginationParam, order parameter.ChatRoomOnMemberOrderMethod) (ListResult[entity.ChatRoomOnMember], error) {
	if mock.GetPluralChatRoomsOnMemberFunc == nil {
		panic("StoreMock.GetPluralChatRoomsOnMemberFunc: method is nil but Store.GetPluralChatRoomsOnMember was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		MemberIDs []uuid.UUID
		Np        NumberedPaginationParam
		Order     parameter.ChatRoomOnMemberOrderMethod
	}{
		Ctx:       ctx,
		MemberIDs: memberIDs,
		Np:        np,
		Order:     order,
	}
	mock.lockGetPluralChatRoomsOnMember.Lock()
	mock.calls.GetPluralChatRoomsOnMember = append(mock.calls.GetPluralChatRoomsOnMember, callInfo)
	mock.lockGetPluralChatRoomsOnMember.Unlock()
	return mock.GetPluralChatRoomsOnMemberFunc(ctx, memberIDs, np, order)
}

// GetPluralChatRoomsOnMemberCalls gets all the calls that were made to GetPluralChatRoomsOnMember.
// Check the length with:
//
//	len(mockedStore.GetPluralChatRoomsOnMemberCalls())
func (mock *StoreMock) GetPluralChatRoomsOnMemberCalls() []struct {
	Ctx       context.Context
	MemberIDs []uuid.UUID
	Np        NumberedPaginationParam
	Order     parameter.ChatRoomOnMemberOrderMethod
} {
	var calls []struct {
		Ctx       context.Context
		MemberIDs []uuid.UUID
		Np        NumberedPaginationParam
		Order     parameter.ChatRoomOnMemberOrderMethod
	}
	mock.lockGetPluralChatRoomsOnMember.RLock()
	calls = mock.calls.GetPluralChatRoomsOnMember
	mock.lockGetPluralChatRoomsOnMember.RUnlock()
	return calls
}

// GetPluralChatRoomsOnMemberWithSd calls GetPluralChatRoomsOnMemberWithSdFunc.
func (mock *StoreMock) GetPluralChatRoomsOnMemberWithSd(ctx context.Context, sd Sd, memberIDs []uuid.UUID, np NumberedPaginationParam, order parameter.ChatRoomOnMemberOrderMethod) (ListResult[entity.ChatRoomOnMember], error) {
	if mock.GetPluralChatRoomsOnMemberWithSdFunc == nil {
		panic("StoreMock.GetPluralChatRoomsOnMemberWithSdFunc: method is nil but Store.GetPluralChatRoomsOnMemberWithSd was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Sd        Sd
		MemberIDs []uuid.UUID
		Np        NumberedPaginationParam
		Order     parameter.ChatRoomOnMemberOrderMethod
	}{
		Ctx:       ctx,
		Sd:        sd,
		MemberIDs: memberIDs,
		Np:        np,
		Order:     order,
	}
	mock.lockGetPluralChatRoomsOnMemberWithSd.Lock()
	mock.calls.GetPluralChatRoomsOnMemberWithSd = append(mock.calls.GetPluralChatRoomsOnMemberWithSd, callInfo)
	mock.lockGetPluralChatRoomsOnMemberWithSd.Unlock()
	return mock.GetPluralChatRoomsOnMemberWithSdFunc(ctx, sd, memberIDs, np, order)
}

// GetPluralChatRoomsOnMemberWithSdCalls gets all the calls that were made to GetPluralChatRoomsOnMemberWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralChatRoomsOnMemberWithSdCalls())
func (mock *StoreMock) GetPluralChatRoomsOnMemberWithSdCalls() []struct {
	Ctx       context.Context
	Sd        Sd
	MemberIDs []uuid.UUID
	Np        NumberedPaginationParam
	Order     parameter.ChatRoomOnMemberOrderMethod
} {
	var calls []struct {
		Ctx       context.Context
		Sd        Sd
		MemberIDs []uuid.UUID
		Np        NumberedPaginationParam
		Order     parameter.ChatRoomOnMemberOrderMethod
	}
	mock.lockGetPluralChatRoomsOnMemberWithSd.RLock()
	calls = mock.calls.GetPluralChatRoomsOnMemberWithSd
	mock.lockGetPluralChatRoomsOnMemberWithSd.RUnlock()
	return calls
}

// GetPluralChatRoomsWithCoverImage calls GetPluralChatRoomsWithCoverImageFunc.
func (mock *StoreMock) GetPluralChatRoomsWithCoverImage(ctx context.Context, chatRoomIDs []uuid.UUID, order parameter.ChatRoomOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomWithCoverImage], error) {
	if mock.GetPluralChatRoomsWithCoverImageFunc == nil {
		panic("StoreMock.GetPluralChatRoomsWithCoverImageFunc: method is nil but Store.GetPluralChatRoomsWithCoverImage was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		ChatRoomIDs []uuid.UUID
		Order       parameter.ChatRoomOrderMethod
		Np          NumberedPaginationParam
	}{
		Ctx:         ctx,
		ChatRoomIDs: chatRoomIDs,
		Order:       order,
		Np:          np,
	}
	mock.lockGetPluralChatRoomsWithCoverImage.Lock()
	mock.calls.GetPluralChatRoomsWithCoverImage = append(mock.calls.GetPluralChatRoomsWithCoverImage, callInfo)
	mock.lockGetPluralChatRoomsWithCoverImage.Unlock()
	return mock.GetPluralChatRoomsWithCoverImageFunc(ctx, chatRoomIDs, order, np)
}

// GetPluralChatRoomsWithCoverImageCalls gets all the calls that were made to GetPluralChatRoomsWithCoverImage.
// Check the length with:
//
//	len(mockedStore.GetPluralChatRoomsWithCoverImageCalls())
func (mock *StoreMock) GetPluralChatRoomsWithCoverImageCalls() []struct {
	Ctx         context.Context
	ChatRoomIDs []uuid.UUID
	Order       parameter.ChatRoomOrderMethod
	Np          NumberedPaginationParam
} {
	var calls []struct {
		Ctx         context.Context
		ChatRoomIDs []uuid.UUID
		Order       parameter.ChatRoomOrderMethod
		Np          NumberedPaginationParam
	}
	mock.lockGetPluralChatRoomsWithCoverImage.RLock()
	calls = mock.calls.GetPluralChatRoomsWithCoverImage
	mock.lockGetPluralChatRoomsWithCoverImage.RUnlock()
	return calls
}

// GetPluralChatRoomsWithCoverImageWithSd calls GetPluralChatRoomsWithCoverImageWithSdFunc.
func (mock *StoreMock) GetPluralChatRoomsWithCoverImageWithSd(ctx context.Context, sd Sd, chatRoomIDs []uuid.UUID, order parameter.ChatRoomOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoomWithCoverImage], error) {
	if mock.GetPluralChatRoomsWithCoverImageWithSdFunc == nil {
		panic("StoreMock.GetPluralChatRoomsWithCoverImageWithSdFunc: method is nil but Store.GetPluralChatRoomsWithCoverImageWithSd was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Sd          Sd
		ChatRoomIDs []uuid.UUID
		Order       parameter.ChatRoomOrderMethod
		Np          NumberedPaginationParam
	}{
		Ctx:         ctx,
		Sd:          sd,
		ChatRoomIDs: chatRoomIDs,
		Order:       order,
		Np:          np,
	}
	mock.lockGetPluralChatRoomsWithCoverImageWithSd.Lock()
	mock.calls.GetPluralChatRoomsWithCoverImageWithSd = append(mock.calls.GetPluralChatRoomsWithCoverImageWithSd, callInfo)
	mock.lockGetPluralChatRoomsWithCoverImageWithSd.Unlock()
	return mock.GetPluralChatRoomsWithCoverImageWithSdFunc(ctx, sd, chatRoomIDs, order, np)
}

// GetPluralChatRoomsWithCoverImageWithSdCalls gets all the calls that were made to GetPluralChatRoomsWithCoverImageWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralChatRoomsWithCoverImageWithSdCalls())
func (mock *StoreMock) GetPluralChatRoomsWithCoverImageWithSdCalls() []struct {
	Ctx         context.Context
	Sd          Sd
	ChatRoomIDs []uuid.UUID
	Order       parameter.ChatRoomOrderMethod
	Np          NumberedPaginationParam
} {
	var calls []struct {
		Ctx         context.Context
		Sd          Sd
		ChatRoomIDs []uuid.UUID
		Order       parameter.ChatRoomOrderMethod
		Np          NumberedPaginationParam
	}
	mock.lockGetPluralChatRoomsWithCoverImageWithSd.RLock()
	calls = mock.calls.GetPluralChatRoomsWithCoverImageWithSd
	mock.lockGetPluralChatRoomsWithCoverImageWithSd.RUnlock()
	return calls
}

// GetPluralChatRoomsWithSd calls GetPluralChatRoomsWithSdFunc.
func (mock *StoreMock) GetPluralChatRoomsWithSd(ctx context.Context, sd Sd, chatRoomIDs []uuid.UUID, order parameter.ChatRoomOrderMethod, np NumberedPaginationParam) (ListResult[entity.ChatRoom], error) {
	if mock.GetPluralChatRoomsWithSdFunc == nil {
		panic("StoreMock.GetPluralChatRoomsWithSdFunc: method is nil but Store.GetPluralChatRoomsWithSd was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Sd          Sd
		ChatRoomIDs []uuid.UUID
		Order       parameter.ChatRoomOrderMethod
		Np          NumberedPaginationParam
	}{
		Ctx:         ctx,
		Sd:          sd,
		ChatRoomIDs: chatRoomIDs,
		Order:       order,
		Np:          np,
	}
	mock.lockGetPluralChatRoomsWithSd.Lock()
	mock.calls.GetPluralChatRoomsWithSd = append(mock.calls.GetPluralChatRoomsWithSd, callInfo)
	mock.lockGetPluralChatRoomsWithSd.Unlock()
	return mock.GetPluralChatRoomsWithSdFunc(ctx, sd, chatRoomIDs, order, np)
}

// GetPluralChatRoomsWithSdCalls gets all the calls that were made to GetPluralChatRoomsWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralChatRoomsWithSdCalls())
func (mock *StoreMock) GetPluralChatRoomsWithSdCalls() []struct {
	Ctx         context.Context
	Sd          Sd
	ChatRoomIDs []uuid.UUID
	Order       parameter.ChatRoomOrderMethod
	Np          NumberedPaginationParam
} {
	var calls []struct {
		Ctx         context.Context
		Sd          Sd
		ChatRoomIDs []uuid.UUID
		Order       parameter.ChatRoomOrderMethod
		Np          NumberedPaginationParam
	}
	mock.lockGetPluralChatRoomsWithSd.RLock()
	calls = mock.calls.GetPluralChatRoomsWithSd
	mock.lockGetPluralChatRoomsWithSd.RUnlock()
	return calls
}

// GetPluralEventTypes calls GetPluralEventTypesFunc.
func (mock *StoreMock) GetPluralEventTypes(ctx context.Context, eventTypeIDs []uuid.UUID, order parameter.EventTypeOrderMethod, np NumberedPaginationParam) (ListResult[entity.EventType], error) {
	if mock.GetPluralEventTypesFunc == nil {
		panic("StoreMock.GetPluralEventTypesFunc: method is nil but Store.GetPluralEventTypes was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		EventTypeIDs []uuid.UUID
		Order        parameter.EventTypeOrderMethod
		Np           NumberedPaginationParam
	}{
		Ctx:          ctx,
		EventTypeIDs: eventTypeIDs,
		Order:        order,
		Np:           np,
	}
	mock.lockGetPluralEventTypes.Lock()
	mock.calls.GetPluralEventTypes = append(mock.calls.GetPluralEventTypes, callInfo)
	mock.lockGetPluralEventTypes.Unlock()
	return mock.GetPluralEventTypesFunc(ctx, eventTypeIDs, order, np)
}

// GetPluralEventTypesCalls gets all the calls that were made to GetPluralEventTypes.
// Check the length with:
//
//	len(mockedStore.GetPluralEventTypesCalls())
func (mock *StoreMock) GetPluralEventTypesCalls() []struct {
	Ctx          context.Context
	EventTypeIDs []uuid.UUID
	Order        parameter.EventTypeOrderMethod
	Np           NumberedPaginationParam
} {
	var calls []struct {
		Ctx          context.Context
		EventTypeIDs []uuid.UUID
		Order        parameter.EventTypeOrderMethod
		Np           NumberedPaginationParam
	}
	mock.lockGetPluralEventTypes.RLock()
	calls = mock.calls.GetPluralEventTypes
	mock.lockGetPluralEventTypes.RUnlock()
	return calls
}

// GetPluralEventTypesWithSd calls GetPluralEventTypesWithSdFunc.
func (mock *StoreMock) GetPluralEventTypesWithSd(ctx context.Context, sd Sd, eventTypeIDs []uuid.UUID, order parameter.EventTypeOrderMethod, np NumberedPaginationParam) (ListResult[entity.EventType], error) {
	if mock.GetPluralEventTypesWithSdFunc == nil {
		panic("StoreMock.GetPluralEventTypesWithSdFunc: method is nil but Store.GetPluralEventTypesWithSd was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		Sd           Sd
		EventTypeIDs []uuid.UUID
		Order        parameter.EventTypeOrderMethod
		Np           NumberedPaginationParam
	}{
		Ctx:          ctx,
		Sd:           sd,
		EventTypeIDs: eventTypeIDs,
		Order:        order,
		Np:           np,
	}
	mock.lockGetPluralEventTypesWithSd.Lock()
	mock.calls.GetPluralEventTypesWithSd = append(mock.calls.GetPluralEventTypesWithSd, callInfo)
	mock.lockGetPluralEventTypesWithSd.Unlock()
	return mock.GetPluralEventTypesWithSdFunc(ctx, sd, eventTypeIDs, order, np)
}

// GetPluralEventTypesWithSdCalls gets all the calls that were made to GetPluralEventTypesWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralEventTypesWithSdCalls())
func (mock *StoreMock) GetPluralEventTypesWithSdCalls() []struct {
	Ctx          context.Context
	Sd           Sd
	EventTypeIDs []uuid.UUID
	Order        parameter.EventTypeOrderMethod
	Np           NumberedPaginationParam
} {
	var calls []struct {
		Ctx          context.Context
		Sd           Sd
		EventTypeIDs []uuid.UUID
		Order        parameter.EventTypeOrderMethod
		Np           NumberedPaginationParam
	}
	mock.lockGetPluralEventTypesWithSd.RLock()
	calls = mock.calls.GetPluralEventTypesWithSd
	mock.lockGetPluralEventTypesWithSd.RUnlock()
	return calls
}

// GetPluralFiles calls GetPluralFilesFunc.
func (mock *StoreMock) GetPluralFiles(ctx context.Context, fileIDs []uuid.UUID, order parameter.FileOrderMethod, np NumberedPaginationParam) (ListResult[entity.File], error) {
	if mock.GetPluralFilesFunc == nil {
		panic("StoreMock.GetPluralFilesFunc: method is nil but Store.GetPluralFiles was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		FileIDs []uuid.UUID
		Order   parameter.FileOrderMethod
		Np      NumberedPaginationParam
	}{
		Ctx:     ctx,
		FileIDs: fileIDs,
		Order:   order,
		Np:      np,
	}
	mock.lockGetPluralFiles.Lock()
	mock.calls.GetPluralFiles = append(mock.calls.GetPluralFiles, callInfo)
	mock.lockGetPluralFiles.Unlock()
	return mock.GetPluralFilesFunc(ctx, fileIDs, order, np)
}

// GetPluralFilesCalls gets all the calls that were made to GetPluralFiles.
// Check the length with:
//
//	len(mockedStore.GetPluralFilesCalls())
func (mock *StoreMock) GetPluralFilesCalls() []struct {
	Ctx     context.Context
	FileIDs []uuid.UUID
	Order   parameter.FileOrderMethod
	Np      NumberedPaginationParam
} {
	var calls []struct {
		Ctx     context.Context
		FileIDs []uuid.UUID
		Order   parameter.FileOrderMethod
		Np      NumberedPaginationParam
	}
	mock.lockGetPluralFiles.RLock()
	calls = mock.calls.GetPluralFiles
	mock.lockGetPluralFiles.RUnlock()
	return calls
}

// GetPluralFilesWithAttachableItem calls GetPluralFilesWithAttachableItemFunc.
func (mock *StoreMock) GetPluralFilesWithAttachableItem(ctx context.Context, fileIDs []uuid.UUID, order parameter.FileOrderMethod, np NumberedPaginationParam) (ListResult[entity.FileWithAttachableItem], error) {
	if mock.GetPluralFilesWithAttachableItemFunc == nil {
		panic("StoreMock.GetPluralFilesWithAttachableItemFunc: method is nil but Store.GetPluralFilesWithAttachableItem was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		FileIDs []uuid.UUID
		Order   parameter.FileOrderMethod
		Np      NumberedPaginationParam
	}{
		Ctx:     ctx,
		FileIDs: fileIDs,
		Order:   order,
		Np:      np,
	}
	mock.lockGetPluralFilesWithAttachableItem.Lock()
	mock.calls.GetPluralFilesWithAttachableItem = append(mock.calls.GetPluralFilesWithAttachableItem, callInfo)
	mock.lockGetPluralFilesWithAttachableItem.Unlock()
	return mock.GetPluralFilesWithAttachableItemFunc(ctx, fileIDs, order, np)
}

// GetPluralFilesWithAttachableItemCalls gets all the calls that were made to GetPluralFilesWithAttachableItem.
// Check the length with:
//
//	len(mockedStore.GetPluralFilesWithAttachableItemCalls())
func (mock *StoreMock) GetPluralFilesWithAttachableItemCalls() []struct {
	Ctx     context.Context
	FileIDs []uuid.UUID
	Order   parameter.FileOrderMethod
	Np      NumberedPaginationParam
} {
	var calls []struct {
		Ctx     context.Context
		FileIDs []uuid.UUID
		Order   parameter.FileOrderMethod
		Np      NumberedPaginationParam
	}
	mock.lockGetPluralFilesWithAttachableItem.RLock()
	calls = mock.calls.GetPluralFilesWithAttachableItem
	mock.lockGetPluralFilesWithAttachableItem.RUnlock()
	return calls
}

// GetPluralFilesWithAttachableItemWithSd calls GetPluralFilesWithAttachableItemWithSdFunc.
func (mock *StoreMock) GetPluralFilesWithAttachableItemWithSd(ctx context.Context, sd Sd, fileIDs []uuid.UUID, order parameter.FileOrderMethod, np NumberedPaginationParam) (ListResult[entity.FileWithAttachableItem], error) {
	if mock.GetPluralFilesWithAttachableItemWithSdFunc == nil {
		panic("StoreMock.GetPluralFilesWithAttachableItemWithSdFunc: method is nil but Store.GetPluralFilesWithAttachableItemWithSd was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Sd      Sd
		FileIDs []uuid.UUID
		Order   parameter.FileOrderMethod
		Np      NumberedPaginationParam
	}{
		Ctx:     ctx,
		Sd:      sd,
		FileIDs: fileIDs,
		Order:   order,
		Np:      np,
	}
	mock.lockGetPluralFilesWithAttachableItemWithSd.Lock()
	mock.calls.GetPluralFilesWithAttachableItemWithSd = append(mock.calls.GetPluralFilesWithAttachableItemWithSd, callInfo)
	mock.lockGetPluralFilesWithAttachableItemWithSd.Unlock()
	return mock.GetPluralFilesWithAttachableItemWithSdFunc(ctx, sd, fileIDs, order, np)
}

// GetPluralFilesWithAttachableItemWithSdCalls gets all the calls that were made to GetPluralFilesWithAttachableItemWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralFilesWithAttachableItemWithSdCalls())
func (mock *StoreMock) GetPluralFilesWithAttachableItemWithSdCalls() []struct {
	Ctx     context.Context
	Sd      Sd
	FileIDs []uuid.UUID
	Order   parameter.FileOrderMethod
	Np      NumberedPaginationParam
} {
	var calls []struct {
		Ctx     context.Context
		Sd      Sd
		FileIDs []uuid.UUID
		Order   parameter.FileOrderMethod
		Np      NumberedPaginationParam
	}
	mock.lockGetPluralFilesWithAttachableItemWithSd.RLock()
	calls = mock.calls.GetPluralFilesWithAttachableItemWithSd
	mock.lockGetPluralFilesWithAttachableItemWithSd.RUnlock()
	return calls
}

// GetPluralFilesWithSd calls GetPluralFilesWithSdFunc.
func (mock *StoreMock) GetPluralFilesWithSd(ctx context.Context, sd Sd, fileIDs []uuid.UUID, order parameter.FileOrderMethod, np NumberedPaginationParam) (ListResult[entity.File], error) {
	if mock.GetPluralFilesWithSdFunc == nil {
		panic("StoreMock.GetPluralFilesWithSdFunc: method is nil but Store.GetPluralFilesWithSd was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Sd      Sd
		FileIDs []uuid.UUID
		Order   parameter.FileOrderMethod
		Np      NumberedPaginationParam
	}{
		Ctx:     ctx,
		Sd:      sd,
		FileIDs: fileIDs,
		Order:   order,
		Np:      np,
	}
	mock.lockGetPluralFilesWithSd.Lock()
	mock.calls.GetPluralFilesWithSd = append(mock.calls.GetPluralFilesWithSd, callInfo)
	mock.lockGetPluralFilesWithSd.Unlock()
	return mock.GetPluralFilesWithSdFunc(ctx, sd, fileIDs, order, np)
}

// GetPluralFilesWithSdCalls gets all the calls that were made to GetPluralFilesWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralFilesWithSdCalls())
func (mock *StoreMock) GetPluralFilesWithSdCalls() []struct {
	Ctx     context.Context
	Sd      Sd
	FileIDs []uuid.UUID
	Order   parameter.FileOrderMethod
	Np      NumberedPaginationParam
} {
	var calls []struct {
		Ctx     context.Context
		Sd      Sd
		FileIDs []uuid.UUID
		Order   parameter.FileOrderMethod
		Np      NumberedPaginationParam
	}
	mock.lockGetPluralFilesWithSd.RLock()
	calls = mock.calls.GetPluralFilesWithSd
	mock.lockGetPluralFilesWithSd.RUnlock()
	return calls
}

// GetPluralGrades calls GetPluralGradesFunc.
func (mock *StoreMock) GetPluralGrades(ctx context.Context, gradeIDs []uuid.UUID, order parameter.GradeOrderMethod, np NumberedPaginationParam) (ListResult[entity.Grade], error) {
	if mock.GetPluralGradesFunc == nil {
		panic("StoreMock.GetPluralGradesFunc: method is nil but Store.GetPluralGrades was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		GradeIDs []uuid.UUID
		Order    parameter.GradeOrderMethod
		Np       NumberedPaginationParam
	}{
		Ctx:      ctx,
		GradeIDs: gradeIDs,
		Order:    order,
		Np:       np,
	}
	mock.lockGetPluralGrades.Lock()
	mock.calls.GetPluralGrades = append(mock.calls.GetPluralGrades, callInfo)
	mock.lockGetPluralGrades.Unlock()
	return mock.GetPluralGradesFunc(ctx, gradeIDs, order, np)
}

// GetPluralGradesCalls gets all the calls that were made to GetPluralGrades.
// Check the length with:
//
//	len(mockedStore.GetPluralGradesCalls())
func (mock *StoreMock) GetPluralGradesCalls() []struct {
	Ctx      context.Context
	GradeIDs []uuid.UUID
	Order    parameter.GradeOrderMethod
	Np       NumberedPaginationParam
} {
	var calls []struct {
		Ctx      context.Context
		GradeIDs []uuid.UUID
		Order    parameter.GradeOrderMethod
		Np       NumberedPaginationParam
	}
	mock.lockGetPluralGrades.RLock()
	calls = mock.calls.GetPluralGrades
	mock.lockGetPluralGrades.RUnlock()
	return calls
}

// GetPluralGradesWithOrganization calls GetPluralGradesWithOrganizationFunc.
func (mock *StoreMock) GetPluralGradesWithOrganization(ctx context.Context, gradeIDs []uuid.UUID, order parameter.GradeOrderMethod, np NumberedPaginationParam) (ListResult[entity.GradeWithOrganization], error) {
	if mock.GetPluralGradesWithOrganizationFunc == nil {
		panic("StoreMock.GetPluralGradesWithOrganizationFunc: method is nil but Store.GetPluralGradesWithOrganization was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		GradeIDs []uuid.UUID
		Order    parameter.GradeOrderMethod
		Np       NumberedPaginationParam
	}{
		Ctx:      ctx,
		GradeIDs: gradeIDs,
		Order:    order,
		Np:       np,
	}
	mock.lockGetPluralGradesWithOrganization.Lock()
	mock.calls.GetPluralGradesWithOrganization = append(mock.calls.GetPluralGradesWithOrganization, callInfo)
	mock.lockGetPluralGradesWithOrganization.Unlock()
	return mock.GetPluralGradesWithOrganizationFunc(ctx, gradeIDs, order, np)
}

// GetPluralGradesWithOrganizationCalls gets all the calls that were made to GetPluralGradesWithOrganization.
// Check the length with:
//
//	len(mockedStore.GetPluralGradesWithOrganizationCalls())
func (mock *StoreMock) GetPluralGradesWithOrganizationCalls() []struct {
	Ctx      context.Context
	GradeIDs []uuid.UUID
	Order    parameter.GradeOrderMethod
	Np       NumberedPaginationParam
} {
	var calls []struct {
		Ctx      context.Context
		GradeIDs []uuid.UUID
		Order    parameter.GradeOrderMethod
		Np       NumberedPaginationParam
	}
	mock.lockGetPluralGradesWithOrganization.RLock()
	calls = mock.calls.GetPluralGradesWithOrganization
	mock.lockGetPluralGradesWithOrganization.RUnlock()
	return calls
}

// GetPluralGradesWithOrganizationWithSd calls GetPluralGradesWithOrganizationWithSdFunc.
func (mock *StoreMock) GetPluralGradesWithOrganizationWithSd(ctx context.Context, sd Sd, gradeIDs []uuid.UUID, order parameter.GradeOrderMethod, np NumberedPaginationParam) (ListResult[entity.GradeWithOrganization], error) {
	if mock.GetPluralGradesWithOrganizationWithSdFunc == nil {
		panic("StoreMock.GetPluralGradesWithOrganizationWithSdFunc: method is nil but Store.GetPluralGradesWithOrganizationWithSd was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Sd       Sd
		GradeIDs []uuid.UUID
		Order    parameter.GradeOrderMethod
		Np       NumberedPaginationParam
	}{
		Ctx:      ctx,
		Sd:       sd,
		GradeIDs: gradeIDs,
		Order:    order,
		Np:       np,
	}
	mock.lockGetPluralGradesWithOrganizationWithSd.Lock()
	mock.calls.GetPluralGradesWithOrganizationWithSd = append(mock.calls.GetPluralGradesWithOrganizationWithSd, callInfo)
	mock.lockGetPluralGradesWithOrganizationWithSd.Unlock()
	return mock.GetPluralGradesWithOrganizationWithSdFunc(ctx, sd, gradeIDs, order, np)
}

// GetPluralGradesWithOrganizationWithSdCalls gets all the calls that were made to GetPluralGradesWithOrganizationWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralGradesWithOrganizationWithSdCalls())
func (mock *StoreMock) GetPluralGradesWithOrganizationWithSdCalls() []struct {
	Ctx      context.Context
	Sd       Sd
	GradeIDs []uuid.UUID
	Order    parameter.GradeOrderMethod
	Np       NumberedPaginationParam
} {
	var calls []struct {
		Ctx      context.Context
		Sd       Sd
		GradeIDs []uuid.UUID
		Order    parameter.GradeOrderMethod
		Np       NumberedPaginationParam
	}
	mock.lockGetPluralGradesWithOrganizationWithSd.RLock()
	calls = mock.calls.GetPluralGradesWithOrganizationWithSd
	mock.lockGetPluralGradesWithOrganizationWithSd.RUnlock()
	return calls
}

// GetPluralGradesWithSd calls GetPluralGradesWithSdFunc.
func (mock *StoreMock) GetPluralGradesWithSd(ctx context.Context, sd Sd, gradeIDs []uuid.UUID, order parameter.GradeOrderMethod, np NumberedPaginationParam) (ListResult[entity.Grade], error) {
	if mock.GetPluralGradesWithSdFunc == nil {
		panic("StoreMock.GetPluralGradesWithSdFunc: method is nil but Store.GetPluralGradesWithSd was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Sd       Sd
		GradeIDs []uuid.UUID
		Order    parameter.GradeOrderMethod
		Np       NumberedPaginationParam
	}{
		Ctx:      ctx,
		Sd:       sd,
		GradeIDs: gradeIDs,
		Order:    order,
		Np:       np,
	}
	mock.lockGetPluralGradesWithSd.Lock()
	mock.calls.GetPluralGradesWithSd = append(mock.calls.GetPluralGradesWithSd, callInfo)
	mock.lockGetPluralGradesWithSd.Unlock()
	return mock.GetPluralGradesWithSdFunc(ctx, sd, gradeIDs, order, np)
}

// GetPluralGradesWithSdCalls gets all the calls that were made to GetPluralGradesWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralGradesWithSdCalls())
func (mock *StoreMock) GetPluralGradesWithSdCalls() []struct {
	Ctx      context.Context
	Sd       Sd
	GradeIDs []uuid.UUID
	Order    parameter.GradeOrderMethod
	Np       NumberedPaginationParam
} {
	var calls []struct {
		Ctx      context.Context
		Sd       Sd
		GradeIDs []uuid.UUID
		Order    parameter.GradeOrderMethod
		Np       NumberedPaginationParam
	}
	mock.lockGetPluralGradesWithSd.RLock()
	calls = mock.calls.GetPluralGradesWithSd
	mock.lockGetPluralGradesWithSd.RUnlock()
	return calls
}

// GetPluralGroups calls GetPluralGroupsFunc.
func (mock *StoreMock) GetPluralGroups(ctx context.Context, groupIDs []uuid.UUID, order parameter.GroupOrderMethod, np NumberedPaginationParam) (ListResult[entity.Group], error) {
	if mock.GetPluralGroupsFunc == nil {
		panic("StoreMock.GetPluralGroupsFunc: method is nil but Store.GetPluralGroups was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		GroupIDs []uuid.UUID
		Order    parameter.GroupOrderMethod
		Np       NumberedPaginationParam
	}{
		Ctx:      ctx,
		GroupIDs: groupIDs,
		Order:    order,
		Np:       np,
	}
	mock.lockGetPluralGroups.Lock()
	mock.calls.GetPluralGroups = append(mock.calls.GetPluralGroups, callInfo)
	mock.lockGetPluralGroups.Unlock()
	return mock.GetPluralGroupsFunc(ctx, groupIDs, order, np)
}

// GetPluralGroupsCalls gets all the calls that were made to GetPluralGroups.
// Check the length with:
//
//	len(mockedStore.GetPluralGroupsCalls())
func (mock *StoreMock) GetPluralGroupsCalls() []struct {
	Ctx      context.Context
	GroupIDs []uuid.UUID
	Order    parameter.GroupOrderMethod
	Np       NumberedPaginationParam
} {
	var calls []struct {
		Ctx      context.Context
		GroupIDs []uuid.UUID
		Order    parameter.GroupOrderMethod
		Np       NumberedPaginationParam
	}
	mock.lockGetPluralGroups.RLock()
	calls = mock.calls.GetPluralGroups
	mock.lockGetPluralGroups.RUnlock()
	return calls
}

// GetPluralGroupsWithOrganization calls GetPluralGroupsWithOrganizationFunc.
func (mock *StoreMock) GetPluralGroupsWithOrganization(ctx context.Context, groupIDs []uuid.UUID, order parameter.GroupOrderMethod, np NumberedPaginationParam) (ListResult[entity.GroupWithOrganization], error) {
	if mock.GetPluralGroupsWithOrganizationFunc == nil {
		panic("StoreMock.GetPluralGroupsWithOrganizationFunc: method is nil but Store.GetPluralGroupsWithOrganization was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		GroupIDs []uuid.UUID
		Order    parameter.GroupOrderMethod
		Np       NumberedPaginationParam
	}{
		Ctx:      ctx,
		GroupIDs: groupIDs,
		Order:    order,
		Np:       np,
	}
	mock.lockGetPluralGroupsWithOrganization.Lock()
	mock.calls.GetPluralGroupsWithOrganization = append(mock.calls.GetPluralGroupsWithOrganization, callInfo)
	mock.lockGetPluralGroupsWithOrganization.Unlock()
	return mock.GetPluralGroupsWithOrganizationFunc(ctx, groupIDs, order, np)
}

// GetPluralGroupsWithOrganizationCalls gets all the calls that were made to GetPluralGroupsWithOrganization.
// Check the length with:
//
//	len(mockedStore.GetPluralGroupsWithOrganizationCalls())
func (mock *StoreMock) GetPluralGroupsWithOrganizationCalls() []struct {
	Ctx      context.Context
	GroupIDs []uuid.UUID
	Order    parameter.GroupOrderMethod
	Np       NumberedPaginationParam
} {
	var calls []struct {
		Ctx      context.Context
		GroupIDs []uuid.UUID
		Order    parameter.GroupOrderMethod
		Np       NumberedPaginationParam
	}
	mock.lockGetPluralGroupsWithOrganization.RLock()
	calls = mock.calls.GetPluralGroupsWithOrganization
	mock.lockGetPluralGroupsWithOrganization.RUnlock()
	return calls
}

// GetPluralGroupsWithOrganizationWithSd calls GetPluralGroupsWithOrganizationWithSdFunc.
func (mock *StoreMock) GetPluralGroupsWithOrganizationWithSd(ctx context.Context, sd Sd, groupIDs []uuid.UUID, order parameter.GroupOrderMethod, np NumberedPaginationParam) (ListResult[entity.GroupWithOrganization], error) {
	if mock.GetPluralGroupsWithOrganizationWithSdFunc == nil {
		panic("StoreMock.GetPluralGroupsWithOrganizationWithSdFunc: method is nil but Store.GetPluralGroupsWithOrganizationWithSd was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Sd       Sd
		GroupIDs []uuid.UUID
		Order    parameter.GroupOrderMethod
		Np       NumberedPaginationParam
	}{
		Ctx:      ctx,
		Sd:       sd,
		GroupIDs: groupIDs,
		Order:    order,
		Np:       np,
	}
	mock.lockGetPluralGroupsWithOrganizationWithSd.Lock()
	mock.calls.GetPluralGroupsWithOrganizationWithSd = append(mock.calls.GetPluralGroupsWithOrganizationWithSd, callInfo)
	mock.lockGetPluralGroupsWithOrganizationWithSd.Unlock()
	return mock.GetPluralGroupsWithOrganizationWithSdFunc(ctx, sd, groupIDs, order, np)
}

// GetPluralGroupsWithOrganizationWithSdCalls gets all the calls that were made to GetPluralGroupsWithOrganizationWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralGroupsWithOrganizationWithSdCalls())
func (mock *StoreMock) GetPluralGroupsWithOrganizationWithSdCalls() []struct {
	Ctx      context.Context
	Sd       Sd
	GroupIDs []uuid.UUID
	Order    parameter.GroupOrderMethod
	Np       NumberedPaginationParam
} {
	var calls []struct {
		Ctx      context.Context
		Sd       Sd
		GroupIDs []uuid.UUID
		Order    parameter.GroupOrderMethod
		Np       NumberedPaginationParam
	}
	mock.lockGetPluralGroupsWithOrganizationWithSd.RLock()
	calls = mock.calls.GetPluralGroupsWithOrganizationWithSd
	mock.lockGetPluralGroupsWithOrganizationWithSd.RUnlock()
	return calls
}

// GetPluralGroupsWithSd calls GetPluralGroupsWithSdFunc.
func (mock *StoreMock) GetPluralGroupsWithSd(ctx context.Context, sd Sd, groupIDs []uuid.UUID, order parameter.GroupOrderMethod, np NumberedPaginationParam) (ListResult[entity.Group], error) {
	if mock.GetPluralGroupsWithSdFunc == nil {
		panic("StoreMock.GetPluralGroupsWithSdFunc: method is nil but Store.GetPluralGroupsWithSd was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Sd       Sd
		GroupIDs []uuid.UUID
		Order    parameter.GroupOrderMethod
		Np       NumberedPaginationParam
	}{
		Ctx:      ctx,
		Sd:       sd,
		GroupIDs: groupIDs,
		Order:    order,
		Np:       np,
	}
	mock.lockGetPluralGroupsWithSd.Lock()
	mock.calls.GetPluralGroupsWithSd = append(mock.calls.GetPluralGroupsWithSd, callInfo)
	mock.lockGetPluralGroupsWithSd.Unlock()
	return mock.GetPluralGroupsWithSdFunc(ctx, sd, groupIDs, order, np)
}

// GetPluralGroupsWithSdCalls gets all the calls that were made to GetPluralGroupsWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralGroupsWithSdCalls())
func (mock *StoreMock) GetPluralGroupsWithSdCalls() []struct {
	Ctx      context.Context
	Sd       Sd
	GroupIDs []uuid.UUID
	Order    parameter.GroupOrderMethod
	Np       NumberedPaginationParam
} {
	var calls []struct {
		Ctx      context.Context
		Sd       Sd
		GroupIDs []uuid.UUID
		Order    parameter.GroupOrderMethod
		Np       NumberedPaginationParam
	}
	mock.lockGetPluralGroupsWithSd.RLock()
	calls = mock.calls.GetPluralGroupsWithSd
	mock.lockGetPluralGroupsWithSd.RUnlock()
	return calls
}

// GetPluralImages calls GetPluralImagesFunc.
func (mock *StoreMock) GetPluralImages(ctx context.Context, imageIDs []uuid.UUID, order parameter.ImageOrderMethod, np NumberedPaginationParam) (ListResult[entity.Image], error) {
	if mock.GetPluralImagesFunc == nil {
		panic("StoreMock.GetPluralImagesFunc: method is nil but Store.GetPluralImages was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		ImageIDs []uuid.UUID
		Order    parameter.ImageOrderMethod
		Np       NumberedPaginationParam
	}{
		Ctx:      ctx,
		ImageIDs: imageIDs,
		Order:    order,
		Np:       np,
	}
	mock.lockGetPluralImages.Lock()
	mock.calls.GetPluralImages = append(mock.calls.GetPluralImages, callInfo)
	mock.lockGetPluralImages.Unlock()
	return mock.GetPluralImagesFunc(ctx, imageIDs, order, np)
}

// GetPluralImagesCalls gets all the calls that were made to GetPluralImages.
// Check the length with:
//
//	len(mockedStore.GetPluralImagesCalls())
func (mock *StoreMock) GetPluralImagesCalls() []struct {
	Ctx      context.Context
	ImageIDs []uuid.UUID
	Order    parameter.ImageOrderMethod
	Np       NumberedPaginationParam
} {
	var calls []struct {
		Ctx      context.Context
		ImageIDs []uuid.UUID
		Order    parameter.ImageOrderMethod
		Np       NumberedPaginationParam
	}
	mock.lockGetPluralImages.RLock()
	calls = mock.calls.GetPluralImages
	mock.lockGetPluralImages.RUnlock()
	return calls
}

// GetPluralImagesWithAttachableItem calls GetPluralImagesWithAttachableItemFunc.
func (mock *StoreMock) GetPluralImagesWithAttachableItem(ctx context.Context, imageIDs []uuid.UUID, order parameter.ImageOrderMethod, np NumberedPaginationParam) (ListResult[entity.ImageWithAttachableItem], error) {
	if mock.GetPluralImagesWithAttachableItemFunc == nil {
		panic("StoreMock.GetPluralImagesWithAttachableItemFunc: method is nil but Store.GetPluralImagesWithAttachableItem was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		ImageIDs []uuid.UUID
		Order    parameter.ImageOrderMethod
		Np       NumberedPaginationParam
	}{
		Ctx:      ctx,
		ImageIDs: imageIDs,
		Order:    order,
		Np:       np,
	}
	mock.lockGetPluralImagesWithAttachableItem.Lock()
	mock.calls.GetPluralImagesWithAttachableItem = append(mock.calls.GetPluralImagesWithAttachableItem, callInfo)
	mock.lockGetPluralImagesWithAttachableItem.Unlock()
	return mock.GetPluralImagesWithAttachableItemFunc(ctx, imageIDs, order, np)
}

// GetPluralImagesWithAttachableItemCalls gets all the calls that were made to GetPluralImagesWithAttachableItem.
// Check the length with:
//
//	len(mockedStore.GetPluralImagesWithAttachableItemCalls())
func (mock *StoreMock) GetPluralImagesWithAttachableItemCalls() []struct {
	Ctx      context.Context
	ImageIDs []uuid.UUID
	Order    parameter.ImageOrderMethod
	Np       NumberedPaginationParam
} {
	var calls []struct {
		Ctx      context.Context
		ImageIDs []uuid.UUID
		Order    parameter.ImageOrderMethod
		Np       NumberedPaginationParam
	}
	mock.lockGetPluralImagesWithAttachableItem.RLock()
	calls = mock.calls.GetPluralImagesWithAttachableItem
	mock.lockGetPluralImagesWithAttachableItem.RUnlock()
	return calls
}

// GetPluralImagesWithAttachableItemWithSd calls GetPluralImagesWithAttachableItemWithSdFunc.
func (mock *StoreMock) GetPluralImagesWithAttachableItemWithSd(ctx context.Context, sd Sd, imageIDs []uuid.UUID, order parameter.ImageOrderMethod, np NumberedPaginationParam) (ListResult[entity.ImageWithAttachableItem], error) {
	if mock.GetPluralImagesWithAttachableItemWithSdFunc == nil {
		panic("StoreMock.GetPluralImagesWithAttachableItemWithSdFunc: method is nil but Store.GetPluralImagesWithAttachableItemWithSd was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Sd       Sd
		ImageIDs []uuid.UUID
		Order    parameter.ImageOrderMethod
		Np       NumberedPaginationParam
	}{
		Ctx:      ctx,
		Sd:       sd,
		ImageIDs: imageIDs,
		Order:    order,
		Np:       np,
	}
	mock.lockGetPluralImagesWithAttachableItemWithSd.Lock()
	mock.calls.GetPluralImagesWithAttachableItemWithSd = append(mock.calls.GetPluralImagesWithAttachableItemWithSd, callInfo)
	mock.lockGetPluralImagesWithAttachableItemWithSd.Unlock()
	return mock.GetPluralImagesWithAttachableItemWithSdFunc(ctx, sd, imageIDs, order, np)
}

// GetPluralImagesWithAttachableItemWithSdCalls gets all the calls that were made to GetPluralImagesWithAttachableItemWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralImagesWithAttachableItemWithSdCalls())
func (mock *StoreMock) GetPluralImagesWithAttachableItemWithSdCalls() []struct {
	Ctx      context.Context
	Sd       Sd
	ImageIDs []uuid.UUID
	Order    parameter.ImageOrderMethod
	Np       NumberedPaginationParam
} {
	var calls []struct {
		Ctx      context.Context
		Sd       Sd
		ImageIDs []uuid.UUID
		Order    parameter.ImageOrderMethod
		Np       NumberedPaginationParam
	}
	mock.lockGetPluralImagesWithAttachableItemWithSd.RLock()
	calls = mock.calls.GetPluralImagesWithAttachableItemWithSd
	mock.lockGetPluralImagesWithAttachableItemWithSd.RUnlock()
	return calls
}

// GetPluralImagesWithSd calls GetPluralImagesWithSdFunc.
func (mock *StoreMock) GetPluralImagesWithSd(ctx context.Context, sd Sd, imageIDs []uuid.UUID, order parameter.ImageOrderMethod, np NumberedPaginationParam) (ListResult[entity.Image], error) {
	if mock.GetPluralImagesWithSdFunc == nil {
		panic("StoreMock.GetPluralImagesWithSdFunc: method is nil but Store.GetPluralImagesWithSd was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Sd       Sd
		ImageIDs []uuid.UUID
		Order    parameter.ImageOrderMethod
		Np       NumberedPaginationParam
	}{
		Ctx:      ctx,
		Sd:       sd,
		ImageIDs: imageIDs,
		Order:    order,
		Np:       np,
	}
	mock.lockGetPluralImagesWithSd.Lock()
	mock.calls.GetPluralImagesWithSd = append(mock.calls.GetPluralImagesWithSd, callInfo)
	mock.lockGetPluralImagesWithSd.Unlock()
	return mock.GetPluralImagesWithSdFunc(ctx, sd, imageIDs, order, np)
}

// GetPluralImagesWithSdCalls gets all the calls that were made to GetPluralImagesWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralImagesWithSdCalls())
func (mock *StoreMock) GetPluralImagesWithSdCalls() []struct {
	Ctx      context.Context
	Sd       Sd
	ImageIDs []uuid.UUID
	Order    parameter.ImageOrderMethod
	Np       NumberedPaginationParam
} {
	var calls []struct {
		Ctx      context.Context
		Sd       Sd
		ImageIDs []uuid.UUID
		Order    parameter.ImageOrderMethod
		Np       NumberedPaginationParam
	}
	mock.lockGetPluralImagesWithSd.RLock()
	calls = mock.calls.GetPluralImagesWithSd
	mock.lockGetPluralImagesWithSd.RUnlock()
	return calls
}

// GetPluralMembers calls GetPluralMembersFunc.
func (mock *StoreMock) GetPluralMembers(ctx context.Context, memberIDs []uuid.UUID, order parameter.MemberOrderMethod, np NumberedPaginationParam) (ListResult[entity.Member], error) {
	if mock.GetPluralMembersFunc == nil {
		panic("StoreMock.GetPluralMembersFunc: method is nil but Store.GetPluralMembers was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		MemberIDs []uuid.UUID
		Order     parameter.MemberOrderMethod
		Np        NumberedPaginationParam
	}{
		Ctx:       ctx,
		MemberIDs: memberIDs,
		Order:     order,
		Np:        np,
	}
	mock.lockGetPluralMembers.Lock()
	mock.calls.GetPluralMembers = append(mock.calls.GetPluralMembers, callInfo)
	mock.lockGetPluralMembers.Unlock()
	return mock.GetPluralMembersFunc(ctx, memberIDs, order, np)
}

// GetPluralMembersCalls gets all the calls that were made to GetPluralMembers.
// Check the length with:
//
//	len(mockedStore.GetPluralMembersCalls())
func (mock *StoreMock) GetPluralMembersCalls() []struct {
	Ctx       context.Context
	MemberIDs []uuid.UUID
	Order     parameter.MemberOrderMethod
	Np        NumberedPaginationParam
} {
	var calls []struct {
		Ctx       context.Context
		MemberIDs []uuid.UUID
		Order     parameter.MemberOrderMethod
		Np        NumberedPaginationParam
	}
	mock.lockGetPluralMembers.RLock()
	calls = mock.calls.GetPluralMembers
	mock.lockGetPluralMembers.RUnlock()
	return calls
}

// GetPluralMembersOnChatRoom calls GetPluralMembersOnChatRoomFunc.
func (mock *StoreMock) GetPluralMembersOnChatRoom(ctx context.Context, chatRoomIDs []uuid.UUID, np NumberedPaginationParam, order parameter.MemberOnChatRoomOrderMethod) (ListResult[entity.MemberOnChatRoom], error) {
	if mock.GetPluralMembersOnChatRoomFunc == nil {
		panic("StoreMock.GetPluralMembersOnChatRoomFunc: method is nil but Store.GetPluralMembersOnChatRoom was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		ChatRoomIDs []uuid.UUID
		Np          NumberedPaginationParam
		Order       parameter.MemberOnChatRoomOrderMethod
	}{
		Ctx:         ctx,
		ChatRoomIDs: chatRoomIDs,
		Np:          np,
		Order:       order,
	}
	mock.lockGetPluralMembersOnChatRoom.Lock()
	mock.calls.GetPluralMembersOnChatRoom = append(mock.calls.GetPluralMembersOnChatRoom, callInfo)
	mock.lockGetPluralMembersOnChatRoom.Unlock()
	return mock.GetPluralMembersOnChatRoomFunc(ctx, chatRoomIDs, np, order)
}

// GetPluralMembersOnChatRoomCalls gets all the calls that were made to GetPluralMembersOnChatRoom.
// Check the length with:
//
//	len(mockedStore.GetPluralMembersOnChatRoomCalls())
func (mock *StoreMock) GetPluralMembersOnChatRoomCalls() []struct {
	Ctx         context.Context
	ChatRoomIDs []uuid.UUID
	Np          NumberedPaginationParam
	Order       parameter.MemberOnChatRoomOrderMethod
} {
	var calls []struct {
		Ctx         context.Context
		ChatRoomIDs []uuid.UUID
		Np          NumberedPaginationParam
		Order       parameter.MemberOnChatRoomOrderMethod
	}
	mock.lockGetPluralMembersOnChatRoom.RLock()
	calls = mock.calls.GetPluralMembersOnChatRoom
	mock.lockGetPluralMembersOnChatRoom.RUnlock()
	return calls
}

// GetPluralMembersOnChatRoomAddMemberAction calls GetPluralMembersOnChatRoomAddMemberActionFunc.
func (mock *StoreMock) GetPluralMembersOnChatRoomAddMemberAction(ctx context.Context, chatRoomAddMemberActionIDs []uuid.UUID, order parameter.MemberOnChatRoomAddMemberActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.MemberOnChatRoomAddMemberAction], error) {
	if mock.GetPluralMembersOnChatRoomAddMemberActionFunc == nil {
		panic("StoreMock.GetPluralMembersOnChatRoomAddMemberActionFunc: method is nil but Store.GetPluralMembersOnChatRoomAddMemberAction was just called")
	}
	callInfo := struct {
		Ctx                        context.Context
		ChatRoomAddMemberActionIDs []uuid.UUID
		Order                      parameter.MemberOnChatRoomAddMemberActionOrderMethod
		Np                         NumberedPaginationParam
	}{
		Ctx:                        ctx,
		ChatRoomAddMemberActionIDs: chatRoomAddMemberActionIDs,
		Order:                      order,
		Np:                         np,
	}
	mock.lockGetPluralMembersOnChatRoomAddMemberAction.Lock()
	mock.calls.GetPluralMembersOnChatRoomAddMemberAction = append(mock.calls.GetPluralMembersOnChatRoomAddMemberAction, callInfo)
	mock.lockGetPluralMembersOnChatRoomAddMemberAction.Unlock()
	return mock.GetPluralMembersOnChatRoomAddMemberActionFunc(ctx, chatRoomAddMemberActionIDs, order, np)
}

// GetPluralMembersOnChatRoomAddMemberActionCalls gets all the calls that were made to GetPluralMembersOnChatRoomAddMemberAction.
// Check the length with:
//
//	len(mockedStore.GetPluralMembersOnChatRoomAddMemberActionCalls())
func (mock *StoreMock) GetPluralMembersOnChatRoomAddMemberActionCalls() []struct {
	Ctx                        context.Context
	ChatRoomAddMemberActionIDs []uuid.UUID
	Order                      parameter.MemberOnChatRoomAddMemberActionOrderMethod
	Np                         NumberedPaginationParam
} {
	var calls []struct {
		Ctx                        context.Context
		ChatRoomAddMemberActionIDs []uuid.UUID
		Order                      parameter.MemberOnChatRoomAddMemberActionOrderMethod
		Np                         NumberedPaginationParam
	}
	mock.lockGetPluralMembersOnChatRoomAddMemberAction.RLock()
	calls = mock.calls.GetPluralMembersOnChatRoomAddMemberAction
	mock.lockGetPluralMembersOnChatRoomAddMemberAction.RUnlock()
	return calls
}

// GetPluralMembersOnChatRoomAddMemberActionWithSd calls GetPluralMembersOnChatRoomAddMemberActionWithSdFunc.
func (mock *StoreMock) GetPluralMembersOnChatRoomAddMemberActionWithSd(ctx context.Context, sd Sd, chatRoomAddMemberActionIDs []uuid.UUID, order parameter.MemberOnChatRoomAddMemberActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.MemberOnChatRoomAddMemberAction], error) {
	if mock.GetPluralMembersOnChatRoomAddMemberActionWithSdFunc == nil {
		panic("StoreMock.GetPluralMembersOnChatRoomAddMemberActionWithSdFunc: method is nil but Store.GetPluralMembersOnChatRoomAddMemberActionWithSd was just called")
	}
	callInfo := struct {
		Ctx                        context.Context
		Sd                         Sd
		ChatRoomAddMemberActionIDs []uuid.UUID
		Order                      parameter.MemberOnChatRoomAddMemberActionOrderMethod
		Np                         NumberedPaginationParam
	}{
		Ctx:                        ctx,
		Sd:                         sd,
		ChatRoomAddMemberActionIDs: chatRoomAddMemberActionIDs,
		Order:                      order,
		Np:                         np,
	}
	mock.lockGetPluralMembersOnChatRoomAddMemberActionWithSd.Lock()
	mock.calls.GetPluralMembersOnChatRoomAddMemberActionWithSd = append(mock.calls.GetPluralMembersOnChatRoomAddMemberActionWithSd, callInfo)
	mock.lockGetPluralMembersOnChatRoomAddMemberActionWithSd.Unlock()
	return mock.GetPluralMembersOnChatRoomAddMemberActionWithSdFunc(ctx, sd, chatRoomAddMemberActionIDs, order, np)
}

// GetPluralMembersOnChatRoomAddMemberActionWithSdCalls gets all the calls that were made to GetPluralMembersOnChatRoomAddMemberActionWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralMembersOnChatRoomAddMemberActionWithSdCalls())
func (mock *StoreMock) GetPluralMembersOnChatRoomAddMemberActionWithSdCalls() []struct {
	Ctx                        context.Context
	Sd                         Sd
	ChatRoomAddMemberActionIDs []uuid.UUID
	Order                      parameter.MemberOnChatRoomAddMemberActionOrderMethod
	Np                         NumberedPaginationParam
} {
	var calls []struct {
		Ctx                        context.Context
		Sd                         Sd
		ChatRoomAddMemberActionIDs []uuid.UUID
		Order                      parameter.MemberOnChatRoomAddMemberActionOrderMethod
		Np                         NumberedPaginationParam
	}
	mock.lockGetPluralMembersOnChatRoomAddMemberActionWithSd.RLock()
	calls = mock.calls.GetPluralMembersOnChatRoomAddMemberActionWithSd
	mock.lockGetPluralMembersOnChatRoomAddMemberActionWithSd.RUnlock()
	return calls
}

// GetPluralMembersOnChatRoomRemoveMemberAction calls GetPluralMembersOnChatRoomRemoveMemberActionFunc.
func (mock *StoreMock) GetPluralMembersOnChatRoomRemoveMemberAction(ctx context.Context, chatRoomRemoveMemberActionIDs []uuid.UUID, order parameter.MemberOnChatRoomRemoveMemberActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.MemberOnChatRoomRemoveMemberAction], error) {
	if mock.GetPluralMembersOnChatRoomRemoveMemberActionFunc == nil {
		panic("StoreMock.GetPluralMembersOnChatRoomRemoveMemberActionFunc: method is nil but Store.GetPluralMembersOnChatRoomRemoveMemberAction was just called")
	}
	callInfo := struct {
		Ctx                           context.Context
		ChatRoomRemoveMemberActionIDs []uuid.UUID
		Order                         parameter.MemberOnChatRoomRemoveMemberActionOrderMethod
		Np                            NumberedPaginationParam
	}{
		Ctx:                           ctx,
		ChatRoomRemoveMemberActionIDs: chatRoomRemoveMemberActionIDs,
		Order:                         order,
		Np:                            np,
	}
	mock.lockGetPluralMembersOnChatRoomRemoveMemberAction.Lock()
	mock.calls.GetPluralMembersOnChatRoomRemoveMemberAction = append(mock.calls.GetPluralMembersOnChatRoomRemoveMemberAction, callInfo)
	mock.lockGetPluralMembersOnChatRoomRemoveMemberAction.Unlock()
	return mock.GetPluralMembersOnChatRoomRemoveMemberActionFunc(ctx, chatRoomRemoveMemberActionIDs, order, np)
}

// GetPluralMembersOnChatRoomRemoveMemberActionCalls gets all the calls that were made to GetPluralMembersOnChatRoomRemoveMemberAction.
// Check the length with:
//
//	len(mockedStore.GetPluralMembersOnChatRoomRemoveMemberActionCalls())
func (mock *StoreMock) GetPluralMembersOnChatRoomRemoveMemberActionCalls() []struct {
	Ctx                           context.Context
	ChatRoomRemoveMemberActionIDs []uuid.UUID
	Order                         parameter.MemberOnChatRoomRemoveMemberActionOrderMethod
	Np                            NumberedPaginationParam
} {
	var calls []struct {
		Ctx                           context.Context
		ChatRoomRemoveMemberActionIDs []uuid.UUID
		Order                         parameter.MemberOnChatRoomRemoveMemberActionOrderMethod
		Np                            NumberedPaginationParam
	}
	mock.lockGetPluralMembersOnChatRoomRemoveMemberAction.RLock()
	calls = mock.calls.GetPluralMembersOnChatRoomRemoveMemberAction
	mock.lockGetPluralMembersOnChatRoomRemoveMemberAction.RUnlock()
	return calls
}

// GetPluralMembersOnChatRoomRemoveMemberActionWithSd calls GetPluralMembersOnChatRoomRemoveMemberActionWithSdFunc.
func (mock *StoreMock) GetPluralMembersOnChatRoomRemoveMemberActionWithSd(ctx context.Context, sd Sd, chatRoomRemoveMemberActionIDs []uuid.UUID, order parameter.MemberOnChatRoomRemoveMemberActionOrderMethod, np NumberedPaginationParam) (ListResult[entity.MemberOnChatRoomRemoveMemberAction], error) {
	if mock.GetPluralMembersOnChatRoomRemoveMemberActionWithSdFunc == nil {
		panic("StoreMock.GetPluralMembersOnChatRoomRemoveMemberActionWithSdFunc: method is nil but Store.GetPluralMembersOnChatRoomRemoveMemberActionWithSd was just called")
	}
	callInfo := struct {
		Ctx                           context.Context
		Sd                            Sd
		ChatRoomRemoveMemberActionIDs []uuid.UUID
		Order                         parameter.MemberOnChatRoomRemoveMemberActionOrderMethod
		Np                            NumberedPaginationParam
	}{
		Ctx:                           ctx,
		Sd:                            sd,
		ChatRoomRemoveMemberActionIDs: chatRoomRemoveMemberActionIDs,
		Order:                         order,
		Np:                            np,
	}
	mock.lockGetPluralMembersOnChatRoomRemoveMemberActionWithSd.Lock()
	mock.calls.GetPluralMembersOnChatRoomRemoveMemberActionWithSd = append(mock.calls.GetPluralMembersOnChatRoomRemoveMemberActionWithSd, callInfo)
	mock.lockGetPluralMembersOnChatRoomRemoveMemberActionWithSd.Unlock()
	return mock.GetPluralMembersOnChatRoomRemoveMemberActionWithSdFunc(ctx, sd, chatRoomRemoveMemberActionIDs, order, np)
}

// GetPluralMembersOnChatRoomRemoveMemberActionWithSdCalls gets all the calls that were made to GetPluralMembersOnChatRoomRemoveMemberActionWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralMembersOnChatRoomRemoveMemberActionWithSdCalls())
func (mock *StoreMock) GetPluralMembersOnChatRoomRemoveMemberActionWithSdCalls() []struct {
	Ctx                           context.Context
	Sd                            Sd
	ChatRoomRemoveMemberActionIDs []uuid.UUID
	Order                         parameter.MemberOnChatRoomRemoveMemberActionOrderMethod
	Np                            NumberedPaginationParam
} {
	var calls []struct {
		Ctx                           context.Context
		Sd                            Sd
		ChatRoomRemoveMemberActionIDs []uuid.UUID
		Order                         parameter.MemberOnChatRoomRemoveMemberActionOrderMethod
		Np                            NumberedPaginationParam
	}
	mock.lockGetPluralMembersOnChatRoomRemoveMemberActionWithSd.RLock()
	calls = mock.calls.GetPluralMembersOnChatRoomRemoveMemberActionWithSd
	mock.lockGetPluralMembersOnChatRoomRemoveMemberActionWithSd.RUnlock()
	return calls
}

// GetPluralMembersOnChatRoomWithSd calls GetPluralMembersOnChatRoomWithSdFunc.
func (mock *StoreMock) GetPluralMembersOnChatRoomWithSd(ctx context.Context, sd Sd, chatRoomIDs []uuid.UUID, np NumberedPaginationParam, order parameter.MemberOnChatRoomOrderMethod) (ListResult[entity.MemberOnChatRoom], error) {
	if mock.GetPluralMembersOnChatRoomWithSdFunc == nil {
		panic("StoreMock.GetPluralMembersOnChatRoomWithSdFunc: method is nil but Store.GetPluralMembersOnChatRoomWithSd was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Sd          Sd
		ChatRoomIDs []uuid.UUID
		Np          NumberedPaginationParam
		Order       parameter.MemberOnChatRoomOrderMethod
	}{
		Ctx:         ctx,
		Sd:          sd,
		ChatRoomIDs: chatRoomIDs,
		Np:          np,
		Order:       order,
	}
	mock.lockGetPluralMembersOnChatRoomWithSd.Lock()
	mock.calls.GetPluralMembersOnChatRoomWithSd = append(mock.calls.GetPluralMembersOnChatRoomWithSd, callInfo)
	mock.lockGetPluralMembersOnChatRoomWithSd.Unlock()
	return mock.GetPluralMembersOnChatRoomWithSdFunc(ctx, sd, chatRoomIDs, np, order)
}

// GetPluralMembersOnChatRoomWithSdCalls gets all the calls that were made to GetPluralMembersOnChatRoomWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralMembersOnChatRoomWithSdCalls())
func (mock *StoreMock) GetPluralMembersOnChatRoomWithSdCalls() []struct {
	Ctx         context.Context
	Sd          Sd
	ChatRoomIDs []uuid.UUID
	Np          NumberedPaginationParam
	Order       parameter.MemberOnChatRoomOrderMethod
} {
	var calls []struct {
		Ctx         context.Context
		Sd          Sd
		ChatRoomIDs []uuid.UUID
		Np          NumberedPaginationParam
		Order       parameter.MemberOnChatRoomOrderMethod
	}
	mock.lockGetPluralMembersOnChatRoomWithSd.RLock()
	calls = mock.calls.GetPluralMembersOnChatRoomWithSd
	mock.lockGetPluralMembersOnChatRoomWithSd.RUnlock()
	return calls
}

// GetPluralMembersOnOrganization calls GetPluralMembersOnOrganizationFunc.
func (mock *StoreMock) GetPluralMembersOnOrganization(ctx context.Context, organizationIDs []uuid.UUID, np NumberedPaginationParam, order parameter.MemberOnOrganizationOrderMethod) (ListResult[entity.MemberOnOrganization], error) {
	if mock.GetPluralMembersOnOrganizationFunc == nil {
		panic("StoreMock.GetPluralMembersOnOrganizationFunc: method is nil but Store.GetPluralMembersOnOrganization was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		OrganizationIDs []uuid.UUID
		Np              NumberedPaginationParam
		Order           parameter.MemberOnOrganizationOrderMethod
	}{
		Ctx:             ctx,
		OrganizationIDs: organizationIDs,
		Np:              np,
		Order:           order,
	}
	mock.lockGetPluralMembersOnOrganization.Lock()
	mock.calls.GetPluralMembersOnOrganization = append(mock.calls.GetPluralMembersOnOrganization, callInfo)
	mock.lockGetPluralMembersOnOrganization.Unlock()
	return mock.GetPluralMembersOnOrganizationFunc(ctx, organizationIDs, np, order)
}

// GetPluralMembersOnOrganizationCalls gets all the calls that were made to GetPluralMembersOnOrganization.
// Check the length with:
//
//	len(mockedStore.GetPluralMembersOnOrganizationCalls())
func (mock *StoreMock) GetPluralMembersOnOrganizationCalls() []struct {
	Ctx             context.Context
	OrganizationIDs []uuid.UUID
	Np              NumberedPaginationParam
	Order           parameter.MemberOnOrganizationOrderMethod
} {
	var calls []struct {
		Ctx             context.Context
		OrganizationIDs []uuid.UUID
		Np              NumberedPaginationParam
		Order           parameter.MemberOnOrganizationOrderMethod
	}
	mock.lockGetPluralMembersOnOrganization.RLock()
	calls = mock.calls.GetPluralMembersOnOrganization
	mock.lockGetPluralMembersOnOrganization.RUnlock()
	return calls
}

// GetPluralMembersOnOrganizationWithSd calls GetPluralMembersOnOrganizationWithSdFunc.
func (mock *StoreMock) GetPluralMembersOnOrganizationWithSd(ctx context.Context, sd Sd, organizationIDs []uuid.UUID, np NumberedPaginationParam, order parameter.MemberOnOrganizationOrderMethod) (ListResult[entity.MemberOnOrganization], error) {
	if mock.GetPluralMembersOnOrganizationWithSdFunc == nil {
		panic("StoreMock.GetPluralMembersOnOrganizationWithSdFunc: method is nil but Store.GetPluralMembersOnOrganizationWithSd was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		Sd              Sd
		OrganizationIDs []uuid.UUID
		Np              NumberedPaginationParam
		Order           parameter.MemberOnOrganizationOrderMethod
	}{
		Ctx:             ctx,
		Sd:              sd,
		OrganizationIDs: organizationIDs,
		Np:              np,
		Order:           order,
	}
	mock.lockGetPluralMembersOnOrganizationWithSd.Lock()
	mock.calls.GetPluralMembersOnOrganizationWithSd = append(mock.calls.GetPluralMembersOnOrganizationWithSd, callInfo)
	mock.lockGetPluralMembersOnOrganizationWithSd.Unlock()
	return mock.GetPluralMembersOnOrganizationWithSdFunc(ctx, sd, organizationIDs, np, order)
}

// GetPluralMembersOnOrganizationWithSdCalls gets all the calls that were made to GetPluralMembersOnOrganizationWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralMembersOnOrganizationWithSdCalls())
func (mock *StoreMock) GetPluralMembersOnOrganizationWithSdCalls() []struct {
	Ctx             context.Context
	Sd              Sd
	OrganizationIDs []uuid.UUID
	Np              NumberedPaginationParam
	Order           parameter.MemberOnOrganizationOrderMethod
} {
	var calls []struct {
		Ctx             context.Context
		Sd              Sd
		OrganizationIDs []uuid.UUID
		Np              NumberedPaginationParam
		Order           parameter.MemberOnOrganizationOrderMethod
	}
	mock.lockGetPluralMembersOnOrganizationWithSd.RLock()
	calls = mock.calls.GetPluralMembersOnOrganizationWithSd
	mock.lockGetPluralMembersOnOrganizationWithSd.RUnlock()
	return calls
}

// GetPluralMembersWithAttendStatus calls GetPluralMembersWithAttendStatusFunc.
func (mock *StoreMock) GetPluralMembersWithAttendStatus(ctx context.Context, memberIDs []uuid.UUID, order parameter.MemberOrderMethod, np NumberedPaginationParam) (ListResult[entity.MemberWithAttendStatus], error) {
	if mock.GetPluralMembersWithAttendStatusFunc == nil {
		panic("StoreMock.GetPluralMembersWithAttendStatusFunc: method is nil but Store.GetPluralMembersWithAttendStatus was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		MemberIDs []uuid.UUID
		Order     parameter.MemberOrderMethod
		Np        NumberedPaginationParam
	}{
		Ctx:       ctx,
		MemberIDs: memberIDs,
		Order:     order,
		Np:        np,
	}
	mock.lockGetPluralMembersWithAttendStatus.Lock()
	mock.calls.GetPluralMembersWithAttendStatus = append(mock.calls.GetPluralMembersWithAttendStatus, callInfo)
	mock.lockGetPluralMembersWithAttendStatus.Unlock()
	return mock.GetPluralMembersWithAttendStatusFunc(ctx, memberIDs, order, np)
}

// GetPluralMembersWithAttendStatusCalls gets all the calls that were made to GetPluralMembersWithAttendStatus.
// Check the length with:
//
//	len(mockedStore.GetPluralMembersWithAttendStatusCalls())
func (mock *StoreMock) GetPluralMembersWithAttendStatusCalls() []struct {
	Ctx       context.Context
	MemberIDs []uuid.UUID
	Order     parameter.MemberOrderMethod
	Np        NumberedPaginationParam
} {
	var calls []struct {
		Ctx       context.Context
		MemberIDs []uuid.UUID
		Order     parameter.MemberOrderMethod
		Np        NumberedPaginationParam
	}
	mock.lockGetPluralMembersWithAttendStatus.RLock()
	calls = mock.calls.GetPluralMembersWithAttendStatus
	mock.lockGetPluralMembersWithAttendStatus.RUnlock()
	return calls
}

// GetPluralMembersWithAttendStatusWithSd calls GetPluralMembersWithAttendStatusWithSdFunc.
func (mock *StoreMock) GetPluralMembersWithAttendStatusWithSd(ctx context.Context, sd Sd, memberIDs []uuid.UUID, order parameter.MemberOrderMethod, np NumberedPaginationParam) (ListResult[entity.MemberWithAttendStatus], error) {
	if mock.GetPluralMembersWithAttendStatusWithSdFunc == nil {
		panic("StoreMock.GetPluralMembersWithAttendStatusWithSdFunc: method is nil but Store.GetPluralMembersWithAttendStatusWithSd was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Sd        Sd
		MemberIDs []uuid.UUID
		Order     parameter.MemberOrderMethod
		Np        NumberedPaginationParam
	}{
		Ctx:       ctx,
		Sd:        sd,
		MemberIDs: memberIDs,
		Order:     order,
		Np:        np,
	}
	mock.lockGetPluralMembersWithAttendStatusWithSd.Lock()
	mock.calls.GetPluralMembersWithAttendStatusWithSd = append(mock.calls.GetPluralMembersWithAttendStatusWithSd, callInfo)
	mock.lockGetPluralMembersWithAttendStatusWithSd.Unlock()
	return mock.GetPluralMembersWithAttendStatusWithSdFunc(ctx, sd, memberIDs, order, np)
}

// GetPluralMembersWithAttendStatusWithSdCalls gets all the calls that were made to GetPluralMembersWithAttendStatusWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralMembersWithAttendStatusWithSdCalls())
func (mock *StoreMock) GetPluralMembersWithAttendStatusWithSdCalls() []struct {
	Ctx       context.Context
	Sd        Sd
	MemberIDs []uuid.UUID
	Order     parameter.MemberOrderMethod
	Np        NumberedPaginationParam
} {
	var calls []struct {
		Ctx       context.Context
		Sd        Sd
		MemberIDs []uuid.UUID
		Order     parameter.MemberOrderMethod
		Np        NumberedPaginationParam
	}
	mock.lockGetPluralMembersWithAttendStatusWithSd.RLock()
	calls = mock.calls.GetPluralMembersWithAttendStatusWithSd
	mock.lockGetPluralMembersWithAttendStatusWithSd.RUnlock()
	return calls
}

// GetPluralMembersWithCrew calls GetPluralMembersWithCrewFunc.
func (mock *StoreMock) GetPluralMembersWithCrew(ctx context.Context, memberIDs []uuid.UUID, order parameter.MemberOrderMethod, np NumberedPaginationParam) (ListResult[entity.MemberWithCrew], error) {
	if mock.GetPluralMembersWithCrewFunc == nil {
		panic("StoreMock.GetPluralMembersWithCrewFunc: method is nil but Store.GetPluralMembersWithCrew was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		MemberIDs []uuid.UUID
		Order     parameter.MemberOrderMethod
		Np        NumberedPaginationParam
	}{
		Ctx:       ctx,
		MemberIDs: memberIDs,
		Order:     order,
		Np:        np,
	}
	mock.lockGetPluralMembersWithCrew.Lock()
	mock.calls.GetPluralMembersWithCrew = append(mock.calls.GetPluralMembersWithCrew, callInfo)
	mock.lockGetPluralMembersWithCrew.Unlock()
	return mock.GetPluralMembersWithCrewFunc(ctx, memberIDs, order, np)
}

// GetPluralMembersWithCrewCalls gets all the calls that were made to GetPluralMembersWithCrew.
// Check the length with:
//
//	len(mockedStore.GetPluralMembersWithCrewCalls())
func (mock *StoreMock) GetPluralMembersWithCrewCalls() []struct {
	Ctx       context.Context
	MemberIDs []uuid.UUID
	Order     parameter.MemberOrderMethod
	Np        NumberedPaginationParam
} {
	var calls []struct {
		Ctx       context.Context
		MemberIDs []uuid.UUID
		Order     parameter.MemberOrderMethod
		Np        NumberedPaginationParam
	}
	mock.lockGetPluralMembersWithCrew.RLock()
	calls = mock.calls.GetPluralMembersWithCrew
	mock.lockGetPluralMembersWithCrew.RUnlock()
	return calls
}

// GetPluralMembersWithCrewWithSd calls GetPluralMembersWithCrewWithSdFunc.
func (mock *StoreMock) GetPluralMembersWithCrewWithSd(ctx context.Context, sd Sd, memberIDs []uuid.UUID, order parameter.MemberOrderMethod, np NumberedPaginationParam) (ListResult[entity.MemberWithCrew], error) {
	if mock.GetPluralMembersWithCrewWithSdFunc == nil {
		panic("StoreMock.GetPluralMembersWithCrewWithSdFunc: method is nil but Store.GetPluralMembersWithCrewWithSd was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Sd        Sd
		MemberIDs []uuid.UUID
		Order     parameter.MemberOrderMethod
		Np        NumberedPaginationParam
	}{
		Ctx:       ctx,
		Sd:        sd,
		MemberIDs: memberIDs,
		Order:     order,
		Np:        np,
	}
	mock.lockGetPluralMembersWithCrewWithSd.Lock()
	mock.calls.GetPluralMembersWithCrewWithSd = append(mock.calls.GetPluralMembersWithCrewWithSd, callInfo)
	mock.lockGetPluralMembersWithCrewWithSd.Unlock()
	return mock.GetPluralMembersWithCrewWithSdFunc(ctx, sd, memberIDs, order, np)
}

// GetPluralMembersWithCrewWithSdCalls gets all the calls that were made to GetPluralMembersWithCrewWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralMembersWithCrewWithSdCalls())
func (mock *StoreMock) GetPluralMembersWithCrewWithSdCalls() []struct {
	Ctx       context.Context
	Sd        Sd
	MemberIDs []uuid.UUID
	Order     parameter.MemberOrderMethod
	Np        NumberedPaginationParam
} {
	var calls []struct {
		Ctx       context.Context
		Sd        Sd
		MemberIDs []uuid.UUID
		Order     parameter.MemberOrderMethod
		Np        NumberedPaginationParam
	}
	mock.lockGetPluralMembersWithCrewWithSd.RLock()
	calls = mock.calls.GetPluralMembersWithCrewWithSd
	mock.lockGetPluralMembersWithCrewWithSd.RUnlock()
	return calls
}

// GetPluralMembersWithDetail calls GetPluralMembersWithDetailFunc.
func (mock *StoreMock) GetPluralMembersWithDetail(ctx context.Context, memberIDs []uuid.UUID, order parameter.MemberOrderMethod, np NumberedPaginationParam) (ListResult[entity.MemberWithDetail], error) {
	if mock.GetPluralMembersWithDetailFunc == nil {
		panic("StoreMock.GetPluralMembersWithDetailFunc: method is nil but Store.GetPluralMembersWithDetail was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		MemberIDs []uuid.UUID
		Order     parameter.MemberOrderMethod
		Np        NumberedPaginationParam
	}{
		Ctx:       ctx,
		MemberIDs: memberIDs,
		Order:     order,
		Np:        np,
	}
	mock.lockGetPluralMembersWithDetail.Lock()
	mock.calls.GetPluralMembersWithDetail = append(mock.calls.GetPluralMembersWithDetail, callInfo)
	mock.lockGetPluralMembersWithDetail.Unlock()
	return mock.GetPluralMembersWithDetailFunc(ctx, memberIDs, order, np)
}

// GetPluralMembersWithDetailCalls gets all the calls that were made to GetPluralMembersWithDetail.
// Check the length with:
//
//	len(mockedStore.GetPluralMembersWithDetailCalls())
func (mock *StoreMock) GetPluralMembersWithDetailCalls() []struct {
	Ctx       context.Context
	MemberIDs []uuid.UUID
	Order     parameter.MemberOrderMethod
	Np        NumberedPaginationParam
} {
	var calls []struct {
		Ctx       context.Context
		MemberIDs []uuid.UUID
		Order     parameter.MemberOrderMethod
		Np        NumberedPaginationParam
	}
	mock.lockGetPluralMembersWithDetail.RLock()
	calls = mock.calls.GetPluralMembersWithDetail
	mock.lockGetPluralMembersWithDetail.RUnlock()
	return calls
}

// GetPluralMembersWithDetailWithSd calls GetPluralMembersWithDetailWithSdFunc.
func (mock *StoreMock) GetPluralMembersWithDetailWithSd(ctx context.Context, sd Sd, memberIDs []uuid.UUID, order parameter.MemberOrderMethod, np NumberedPaginationParam) (ListResult[entity.MemberWithDetail], error) {
	if mock.GetPluralMembersWithDetailWithSdFunc == nil {
		panic("StoreMock.GetPluralMembersWithDetailWithSdFunc: method is nil but Store.GetPluralMembersWithDetailWithSd was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Sd        Sd
		MemberIDs []uuid.UUID
		Order     parameter.MemberOrderMethod
		Np        NumberedPaginationParam
	}{
		Ctx:       ctx,
		Sd:        sd,
		MemberIDs: memberIDs,
		Order:     order,
		Np:        np,
	}
	mock.lockGetPluralMembersWithDetailWithSd.Lock()
	mock.calls.GetPluralMembersWithDetailWithSd = append(mock.calls.GetPluralMembersWithDetailWithSd, callInfo)
	mock.lockGetPluralMembersWithDetailWithSd.Unlock()
	return mock.GetPluralMembersWithDetailWithSdFunc(ctx, sd, memberIDs, order, np)
}

// GetPluralMembersWithDetailWithSdCalls gets all the calls that were made to GetPluralMembersWithDetailWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralMembersWithDetailWithSdCalls())
func (mock *StoreMock) GetPluralMembersWithDetailWithSdCalls() []struct {
	Ctx       context.Context
	Sd        Sd
	MemberIDs []uuid.UUID
	Order     parameter.MemberOrderMethod
	Np        NumberedPaginationParam
} {
	var calls []struct {
		Ctx       context.Context
		Sd        Sd
		MemberIDs []uuid.UUID
		Order     parameter.MemberOrderMethod
		Np        NumberedPaginationParam
	}
	mock.lockGetPluralMembersWithDetailWithSd.RLock()
	calls = mock.calls.GetPluralMembersWithDetailWithSd
	mock.lockGetPluralMembersWithDetailWithSd.RUnlock()
	return calls
}

// GetPluralMembersWithPersonalOrganization calls GetPluralMembersWithPersonalOrganizationFunc.
func (mock *StoreMock) GetPluralMembersWithPersonalOrganization(ctx context.Context, memberIDs []uuid.UUID, order parameter.MemberOrderMethod, np NumberedPaginationParam) (ListResult[entity.MemberWithPersonalOrganization], error) {
	if mock.GetPluralMembersWithPersonalOrganizationFunc == nil {
		panic("StoreMock.GetPluralMembersWithPersonalOrganizationFunc: method is nil but Store.GetPluralMembersWithPersonalOrganization was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		MemberIDs []uuid.UUID
		Order     parameter.MemberOrderMethod
		Np        NumberedPaginationParam
	}{
		Ctx:       ctx,
		MemberIDs: memberIDs,
		Order:     order,
		Np:        np,
	}
	mock.lockGetPluralMembersWithPersonalOrganization.Lock()
	mock.calls.GetPluralMembersWithPersonalOrganization = append(mock.calls.GetPluralMembersWithPersonalOrganization, callInfo)
	mock.lockGetPluralMembersWithPersonalOrganization.Unlock()
	return mock.GetPluralMembersWithPersonalOrganizationFunc(ctx, memberIDs, order, np)
}

// GetPluralMembersWithPersonalOrganizationCalls gets all the calls that were made to GetPluralMembersWithPersonalOrganization.
// Check the length with:
//
//	len(mockedStore.GetPluralMembersWithPersonalOrganizationCalls())
func (mock *StoreMock) GetPluralMembersWithPersonalOrganizationCalls() []struct {
	Ctx       context.Context
	MemberIDs []uuid.UUID
	Order     parameter.MemberOrderMethod
	Np        NumberedPaginationParam
} {
	var calls []struct {
		Ctx       context.Context
		MemberIDs []uuid.UUID
		Order     parameter.MemberOrderMethod
		Np        NumberedPaginationParam
	}
	mock.lockGetPluralMembersWithPersonalOrganization.RLock()
	calls = mock.calls.GetPluralMembersWithPersonalOrganization
	mock.lockGetPluralMembersWithPersonalOrganization.RUnlock()
	return calls
}

// GetPluralMembersWithPersonalOrganizationWithSd calls GetPluralMembersWithPersonalOrganizationWithSdFunc.
func (mock *StoreMock) GetPluralMembersWithPersonalOrganizationWithSd(ctx context.Context, sd Sd, memberIDs []uuid.UUID, order parameter.MemberOrderMethod, np NumberedPaginationParam) (ListResult[entity.MemberWithPersonalOrganization], error) {
	if mock.GetPluralMembersWithPersonalOrganizationWithSdFunc == nil {
		panic("StoreMock.GetPluralMembersWithPersonalOrganizationWithSdFunc: method is nil but Store.GetPluralMembersWithPersonalOrganizationWithSd was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Sd        Sd
		MemberIDs []uuid.UUID
		Order     parameter.MemberOrderMethod
		Np        NumberedPaginationParam
	}{
		Ctx:       ctx,
		Sd:        sd,
		MemberIDs: memberIDs,
		Order:     order,
		Np:        np,
	}
	mock.lockGetPluralMembersWithPersonalOrganizationWithSd.Lock()
	mock.calls.GetPluralMembersWithPersonalOrganizationWithSd = append(mock.calls.GetPluralMembersWithPersonalOrganizationWithSd, callInfo)
	mock.lockGetPluralMembersWithPersonalOrganizationWithSd.Unlock()
	return mock.GetPluralMembersWithPersonalOrganizationWithSdFunc(ctx, sd, memberIDs, order, np)
}

// GetPluralMembersWithPersonalOrganizationWithSdCalls gets all the calls that were made to GetPluralMembersWithPersonalOrganizationWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralMembersWithPersonalOrganizationWithSdCalls())
func (mock *StoreMock) GetPluralMembersWithPersonalOrganizationWithSdCalls() []struct {
	Ctx       context.Context
	Sd        Sd
	MemberIDs []uuid.UUID
	Order     parameter.MemberOrderMethod
	Np        NumberedPaginationParam
} {
	var calls []struct {
		Ctx       context.Context
		Sd        Sd
		MemberIDs []uuid.UUID
		Order     parameter.MemberOrderMethod
		Np        NumberedPaginationParam
	}
	mock.lockGetPluralMembersWithPersonalOrganizationWithSd.RLock()
	calls = mock.calls.GetPluralMembersWithPersonalOrganizationWithSd
	mock.lockGetPluralMembersWithPersonalOrganizationWithSd.RUnlock()
	return calls
}

// GetPluralMembersWithProfileImage calls GetPluralMembersWithProfileImageFunc.
func (mock *StoreMock) GetPluralMembersWithProfileImage(ctx context.Context, memberIDs []uuid.UUID, order parameter.MemberOrderMethod, np NumberedPaginationParam) (ListResult[entity.MemberWithProfileImage], error) {
	if mock.GetPluralMembersWithProfileImageFunc == nil {
		panic("StoreMock.GetPluralMembersWithProfileImageFunc: method is nil but Store.GetPluralMembersWithProfileImage was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		MemberIDs []uuid.UUID
		Order     parameter.MemberOrderMethod
		Np        NumberedPaginationParam
	}{
		Ctx:       ctx,
		MemberIDs: memberIDs,
		Order:     order,
		Np:        np,
	}
	mock.lockGetPluralMembersWithProfileImage.Lock()
	mock.calls.GetPluralMembersWithProfileImage = append(mock.calls.GetPluralMembersWithProfileImage, callInfo)
	mock.lockGetPluralMembersWithProfileImage.Unlock()
	return mock.GetPluralMembersWithProfileImageFunc(ctx, memberIDs, order, np)
}

// GetPluralMembersWithProfileImageCalls gets all the calls that were made to GetPluralMembersWithProfileImage.
// Check the length with:
//
//	len(mockedStore.GetPluralMembersWithProfileImageCalls())
func (mock *StoreMock) GetPluralMembersWithProfileImageCalls() []struct {
	Ctx       context.Context
	MemberIDs []uuid.UUID
	Order     parameter.MemberOrderMethod
	Np        NumberedPaginationParam
} {
	var calls []struct {
		Ctx       context.Context
		MemberIDs []uuid.UUID
		Order     parameter.MemberOrderMethod
		Np        NumberedPaginationParam
	}
	mock.lockGetPluralMembersWithProfileImage.RLock()
	calls = mock.calls.GetPluralMembersWithProfileImage
	mock.lockGetPluralMembersWithProfileImage.RUnlock()
	return calls
}

// GetPluralMembersWithProfileImageWithSd calls GetPluralMembersWithProfileImageWithSdFunc.
func (mock *StoreMock) GetPluralMembersWithProfileImageWithSd(ctx context.Context, sd Sd, memberIDs []uuid.UUID, order parameter.MemberOrderMethod, np NumberedPaginationParam) (ListResult[entity.MemberWithProfileImage], error) {
	if mock.GetPluralMembersWithProfileImageWithSdFunc == nil {
		panic("StoreMock.GetPluralMembersWithProfileImageWithSdFunc: method is nil but Store.GetPluralMembersWithProfileImageWithSd was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Sd        Sd
		MemberIDs []uuid.UUID
		Order     parameter.MemberOrderMethod
		Np        NumberedPaginationParam
	}{
		Ctx:       ctx,
		Sd:        sd,
		MemberIDs: memberIDs,
		Order:     order,
		Np:        np,
	}
	mock.lockGetPluralMembersWithProfileImageWithSd.Lock()
	mock.calls.GetPluralMembersWithProfileImageWithSd = append(mock.calls.GetPluralMembersWithProfileImageWithSd, callInfo)
	mock.lockGetPluralMembersWithProfileImageWithSd.Unlock()
	return mock.GetPluralMembersWithProfileImageWithSdFunc(ctx, sd, memberIDs, order, np)
}

// GetPluralMembersWithProfileImageWithSdCalls gets all the calls that were made to GetPluralMembersWithProfileImageWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralMembersWithProfileImageWithSdCalls())
func (mock *StoreMock) GetPluralMembersWithProfileImageWithSdCalls() []struct {
	Ctx       context.Context
	Sd        Sd
	MemberIDs []uuid.UUID
	Order     parameter.MemberOrderMethod
	Np        NumberedPaginationParam
} {
	var calls []struct {
		Ctx       context.Context
		Sd        Sd
		MemberIDs []uuid.UUID
		Order     parameter.MemberOrderMethod
		Np        NumberedPaginationParam
	}
	mock.lockGetPluralMembersWithProfileImageWithSd.RLock()
	calls = mock.calls.GetPluralMembersWithProfileImageWithSd
	mock.lockGetPluralMembersWithProfileImageWithSd.RUnlock()
	return calls
}

// GetPluralMembersWithRole calls GetPluralMembersWithRoleFunc.
func (mock *StoreMock) GetPluralMembersWithRole(ctx context.Context, memberIDs []uuid.UUID, order parameter.MemberOrderMethod, np NumberedPaginationParam) (ListResult[entity.MemberWithRole], error) {
	if mock.GetPluralMembersWithRoleFunc == nil {
		panic("StoreMock.GetPluralMembersWithRoleFunc: method is nil but Store.GetPluralMembersWithRole was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		MemberIDs []uuid.UUID
		Order     parameter.MemberOrderMethod
		Np        NumberedPaginationParam
	}{
		Ctx:       ctx,
		MemberIDs: memberIDs,
		Order:     order,
		Np:        np,
	}
	mock.lockGetPluralMembersWithRole.Lock()
	mock.calls.GetPluralMembersWithRole = append(mock.calls.GetPluralMembersWithRole, callInfo)
	mock.lockGetPluralMembersWithRole.Unlock()
	return mock.GetPluralMembersWithRoleFunc(ctx, memberIDs, order, np)
}

// GetPluralMembersWithRoleCalls gets all the calls that were made to GetPluralMembersWithRole.
// Check the length with:
//
//	len(mockedStore.GetPluralMembersWithRoleCalls())
func (mock *StoreMock) GetPluralMembersWithRoleCalls() []struct {
	Ctx       context.Context
	MemberIDs []uuid.UUID
	Order     parameter.MemberOrderMethod
	Np        NumberedPaginationParam
} {
	var calls []struct {
		Ctx       context.Context
		MemberIDs []uuid.UUID
		Order     parameter.MemberOrderMethod
		Np        NumberedPaginationParam
	}
	mock.lockGetPluralMembersWithRole.RLock()
	calls = mock.calls.GetPluralMembersWithRole
	mock.lockGetPluralMembersWithRole.RUnlock()
	return calls
}

// GetPluralMembersWithRoleWithSd calls GetPluralMembersWithRoleWithSdFunc.
func (mock *StoreMock) GetPluralMembersWithRoleWithSd(ctx context.Context, sd Sd, memberIDs []uuid.UUID, order parameter.MemberOrderMethod, np NumberedPaginationParam) (ListResult[entity.MemberWithRole], error) {
	if mock.GetPluralMembersWithRoleWithSdFunc == nil {
		panic("StoreMock.GetPluralMembersWithRoleWithSdFunc: method is nil but Store.GetPluralMembersWithRoleWithSd was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Sd        Sd
		MemberIDs []uuid.UUID
		Order     parameter.MemberOrderMethod
		Np        NumberedPaginationParam
	}{
		Ctx:       ctx,
		Sd:        sd,
		MemberIDs: memberIDs,
		Order:     order,
		Np:        np,
	}
	mock.lockGetPluralMembersWithRoleWithSd.Lock()
	mock.calls.GetPluralMembersWithRoleWithSd = append(mock.calls.GetPluralMembersWithRoleWithSd, callInfo)
	mock.lockGetPluralMembersWithRoleWithSd.Unlock()
	return mock.GetPluralMembersWithRoleWithSdFunc(ctx, sd, memberIDs, order, np)
}

// GetPluralMembersWithRoleWithSdCalls gets all the calls that were made to GetPluralMembersWithRoleWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralMembersWithRoleWithSdCalls())
func (mock *StoreMock) GetPluralMembersWithRoleWithSdCalls() []struct {
	Ctx       context.Context
	Sd        Sd
	MemberIDs []uuid.UUID
	Order     parameter.MemberOrderMethod
	Np        NumberedPaginationParam
} {
	var calls []struct {
		Ctx       context.Context
		Sd        Sd
		MemberIDs []uuid.UUID
		Order     parameter.MemberOrderMethod
		Np        NumberedPaginationParam
	}
	mock.lockGetPluralMembersWithRoleWithSd.RLock()
	calls = mock.calls.GetPluralMembersWithRoleWithSd
	mock.lockGetPluralMembersWithRoleWithSd.RUnlock()
	return calls
}

// GetPluralMembersWithSd calls GetPluralMembersWithSdFunc.
func (mock *StoreMock) GetPluralMembersWithSd(ctx context.Context, sd Sd, memberIDs []uuid.UUID, order parameter.MemberOrderMethod, np NumberedPaginationParam) (ListResult[entity.Member], error) {
	if mock.GetPluralMembersWithSdFunc == nil {
		panic("StoreMock.GetPluralMembersWithSdFunc: method is nil but Store.GetPluralMembersWithSd was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Sd        Sd
		MemberIDs []uuid.UUID
		Order     parameter.MemberOrderMethod
		Np        NumberedPaginationParam
	}{
		Ctx:       ctx,
		Sd:        sd,
		MemberIDs: memberIDs,
		Order:     order,
		Np:        np,
	}
	mock.lockGetPluralMembersWithSd.Lock()
	mock.calls.GetPluralMembersWithSd = append(mock.calls.GetPluralMembersWithSd, callInfo)
	mock.lockGetPluralMembersWithSd.Unlock()
	return mock.GetPluralMembersWithSdFunc(ctx, sd, memberIDs, order, np)
}

// GetPluralMembersWithSdCalls gets all the calls that were made to GetPluralMembersWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralMembersWithSdCalls())
func (mock *StoreMock) GetPluralMembersWithSdCalls() []struct {
	Ctx       context.Context
	Sd        Sd
	MemberIDs []uuid.UUID
	Order     parameter.MemberOrderMethod
	Np        NumberedPaginationParam
} {
	var calls []struct {
		Ctx       context.Context
		Sd        Sd
		MemberIDs []uuid.UUID
		Order     parameter.MemberOrderMethod
		Np        NumberedPaginationParam
	}
	mock.lockGetPluralMembersWithSd.RLock()
	calls = mock.calls.GetPluralMembersWithSd
	mock.lockGetPluralMembersWithSd.RUnlock()
	return calls
}

// GetPluralMessages calls GetPluralMessagesFunc.
func (mock *StoreMock) GetPluralMessages(ctx context.Context, messageIDs []uuid.UUID, order parameter.MessageOrderMethod, np NumberedPaginationParam) (ListResult[entity.Message], error) {
	if mock.GetPluralMessagesFunc == nil {
		panic("StoreMock.GetPluralMessagesFunc: method is nil but Store.GetPluralMessages was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		MessageIDs []uuid.UUID
		Order      parameter.MessageOrderMethod
		Np         NumberedPaginationParam
	}{
		Ctx:        ctx,
		MessageIDs: messageIDs,
		Order:      order,
		Np:         np,
	}
	mock.lockGetPluralMessages.Lock()
	mock.calls.GetPluralMessages = append(mock.calls.GetPluralMessages, callInfo)
	mock.lockGetPluralMessages.Unlock()
	return mock.GetPluralMessagesFunc(ctx, messageIDs, order, np)
}

// GetPluralMessagesCalls gets all the calls that were made to GetPluralMessages.
// Check the length with:
//
//	len(mockedStore.GetPluralMessagesCalls())
func (mock *StoreMock) GetPluralMessagesCalls() []struct {
	Ctx        context.Context
	MessageIDs []uuid.UUID
	Order      parameter.MessageOrderMethod
	Np         NumberedPaginationParam
} {
	var calls []struct {
		Ctx        context.Context
		MessageIDs []uuid.UUID
		Order      parameter.MessageOrderMethod
		Np         NumberedPaginationParam
	}
	mock.lockGetPluralMessages.RLock()
	calls = mock.calls.GetPluralMessages
	mock.lockGetPluralMessages.RUnlock()
	return calls
}

// GetPluralMessagesWithChatRoom calls GetPluralMessagesWithChatRoomFunc.
func (mock *StoreMock) GetPluralMessagesWithChatRoom(ctx context.Context, messageIDs []uuid.UUID, order parameter.MessageOrderMethod, np NumberedPaginationParam) (ListResult[entity.MessageWithChatRoom], error) {
	if mock.GetPluralMessagesWithChatRoomFunc == nil {
		panic("StoreMock.GetPluralMessagesWithChatRoomFunc: method is nil but Store.GetPluralMessagesWithChatRoom was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		MessageIDs []uuid.UUID
		Order      parameter.MessageOrderMethod
		Np         NumberedPaginationParam
	}{
		Ctx:        ctx,
		MessageIDs: messageIDs,
		Order:      order,
		Np:         np,
	}
	mock.lockGetPluralMessagesWithChatRoom.Lock()
	mock.calls.GetPluralMessagesWithChatRoom = append(mock.calls.GetPluralMessagesWithChatRoom, callInfo)
	mock.lockGetPluralMessagesWithChatRoom.Unlock()
	return mock.GetPluralMessagesWithChatRoomFunc(ctx, messageIDs, order, np)
}

// GetPluralMessagesWithChatRoomCalls gets all the calls that were made to GetPluralMessagesWithChatRoom.
// Check the length with:
//
//	len(mockedStore.GetPluralMessagesWithChatRoomCalls())
func (mock *StoreMock) GetPluralMessagesWithChatRoomCalls() []struct {
	Ctx        context.Context
	MessageIDs []uuid.UUID
	Order      parameter.MessageOrderMethod
	Np         NumberedPaginationParam
} {
	var calls []struct {
		Ctx        context.Context
		MessageIDs []uuid.UUID
		Order      parameter.MessageOrderMethod
		Np         NumberedPaginationParam
	}
	mock.lockGetPluralMessagesWithChatRoom.RLock()
	calls = mock.calls.GetPluralMessagesWithChatRoom
	mock.lockGetPluralMessagesWithChatRoom.RUnlock()
	return calls
}

// GetPluralMessagesWithChatRoomWithSd calls GetPluralMessagesWithChatRoomWithSdFunc.
func (mock *StoreMock) GetPluralMessagesWithChatRoomWithSd(ctx context.Context, sd Sd, messageIDs []uuid.UUID, order parameter.MessageOrderMethod, np NumberedPaginationParam) (ListResult[entity.MessageWithChatRoom], error) {
	if mock.GetPluralMessagesWithChatRoomWithSdFunc == nil {
		panic("StoreMock.GetPluralMessagesWithChatRoomWithSdFunc: method is nil but Store.GetPluralMessagesWithChatRoomWithSd was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Sd         Sd
		MessageIDs []uuid.UUID
		Order      parameter.MessageOrderMethod
		Np         NumberedPaginationParam
	}{
		Ctx:        ctx,
		Sd:         sd,
		MessageIDs: messageIDs,
		Order:      order,
		Np:         np,
	}
	mock.lockGetPluralMessagesWithChatRoomWithSd.Lock()
	mock.calls.GetPluralMessagesWithChatRoomWithSd = append(mock.calls.GetPluralMessagesWithChatRoomWithSd, callInfo)
	mock.lockGetPluralMessagesWithChatRoomWithSd.Unlock()
	return mock.GetPluralMessagesWithChatRoomWithSdFunc(ctx, sd, messageIDs, order, np)
}

// GetPluralMessagesWithChatRoomWithSdCalls gets all the calls that were made to GetPluralMessagesWithChatRoomWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralMessagesWithChatRoomWithSdCalls())
func (mock *StoreMock) GetPluralMessagesWithChatRoomWithSdCalls() []struct {
	Ctx        context.Context
	Sd         Sd
	MessageIDs []uuid.UUID
	Order      parameter.MessageOrderMethod
	Np         NumberedPaginationParam
} {
	var calls []struct {
		Ctx        context.Context
		Sd         Sd
		MessageIDs []uuid.UUID
		Order      parameter.MessageOrderMethod
		Np         NumberedPaginationParam
	}
	mock.lockGetPluralMessagesWithChatRoomWithSd.RLock()
	calls = mock.calls.GetPluralMessagesWithChatRoomWithSd
	mock.lockGetPluralMessagesWithChatRoomWithSd.RUnlock()
	return calls
}

// GetPluralMessagesWithSd calls GetPluralMessagesWithSdFunc.
func (mock *StoreMock) GetPluralMessagesWithSd(ctx context.Context, sd Sd, messageIDs []uuid.UUID, order parameter.MessageOrderMethod, np NumberedPaginationParam) (ListResult[entity.Message], error) {
	if mock.GetPluralMessagesWithSdFunc == nil {
		panic("StoreMock.GetPluralMessagesWithSdFunc: method is nil but Store.GetPluralMessagesWithSd was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Sd         Sd
		MessageIDs []uuid.UUID
		Order      parameter.MessageOrderMethod
		Np         NumberedPaginationParam
	}{
		Ctx:        ctx,
		Sd:         sd,
		MessageIDs: messageIDs,
		Order:      order,
		Np:         np,
	}
	mock.lockGetPluralMessagesWithSd.Lock()
	mock.calls.GetPluralMessagesWithSd = append(mock.calls.GetPluralMessagesWithSd, callInfo)
	mock.lockGetPluralMessagesWithSd.Unlock()
	return mock.GetPluralMessagesWithSdFunc(ctx, sd, messageIDs, order, np)
}

// GetPluralMessagesWithSdCalls gets all the calls that were made to GetPluralMessagesWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralMessagesWithSdCalls())
func (mock *StoreMock) GetPluralMessagesWithSdCalls() []struct {
	Ctx        context.Context
	Sd         Sd
	MessageIDs []uuid.UUID
	Order      parameter.MessageOrderMethod
	Np         NumberedPaginationParam
} {
	var calls []struct {
		Ctx        context.Context
		Sd         Sd
		MessageIDs []uuid.UUID
		Order      parameter.MessageOrderMethod
		Np         NumberedPaginationParam
	}
	mock.lockGetPluralMessagesWithSd.RLock()
	calls = mock.calls.GetPluralMessagesWithSd
	mock.lockGetPluralMessagesWithSd.RUnlock()
	return calls
}

// GetPluralMessagesWithSender calls GetPluralMessagesWithSenderFunc.
func (mock *StoreMock) GetPluralMessagesWithSender(ctx context.Context, messageIDs []uuid.UUID, order parameter.MessageOrderMethod, np NumberedPaginationParam) (ListResult[entity.MessageWithSender], error) {
	if mock.GetPluralMessagesWithSenderFunc == nil {
		panic("StoreMock.GetPluralMessagesWithSenderFunc: method is nil but Store.GetPluralMessagesWithSender was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		MessageIDs []uuid.UUID
		Order      parameter.MessageOrderMethod
		Np         NumberedPaginationParam
	}{
		Ctx:        ctx,
		MessageIDs: messageIDs,
		Order:      order,
		Np:         np,
	}
	mock.lockGetPluralMessagesWithSender.Lock()
	mock.calls.GetPluralMessagesWithSender = append(mock.calls.GetPluralMessagesWithSender, callInfo)
	mock.lockGetPluralMessagesWithSender.Unlock()
	return mock.GetPluralMessagesWithSenderFunc(ctx, messageIDs, order, np)
}

// GetPluralMessagesWithSenderCalls gets all the calls that were made to GetPluralMessagesWithSender.
// Check the length with:
//
//	len(mockedStore.GetPluralMessagesWithSenderCalls())
func (mock *StoreMock) GetPluralMessagesWithSenderCalls() []struct {
	Ctx        context.Context
	MessageIDs []uuid.UUID
	Order      parameter.MessageOrderMethod
	Np         NumberedPaginationParam
} {
	var calls []struct {
		Ctx        context.Context
		MessageIDs []uuid.UUID
		Order      parameter.MessageOrderMethod
		Np         NumberedPaginationParam
	}
	mock.lockGetPluralMessagesWithSender.RLock()
	calls = mock.calls.GetPluralMessagesWithSender
	mock.lockGetPluralMessagesWithSender.RUnlock()
	return calls
}

// GetPluralMessagesWithSenderByChatRoomActionIDs calls GetPluralMessagesWithSenderByChatRoomActionIDsFunc.
func (mock *StoreMock) GetPluralMessagesWithSenderByChatRoomActionIDs(ctx context.Context, chatRoomActionIDs []uuid.UUID, order parameter.MessageOrderMethod, np NumberedPaginationParam) (ListResult[entity.MessageWithSender], error) {
	if mock.GetPluralMessagesWithSenderByChatRoomActionIDsFunc == nil {
		panic("StoreMock.GetPluralMessagesWithSenderByChatRoomActionIDsFunc: method is nil but Store.GetPluralMessagesWithSenderByChatRoomActionIDs was just called")
	}
	callInfo := struct {
		Ctx               context.Context
		ChatRoomActionIDs []uuid.UUID
		Order             parameter.MessageOrderMethod
		Np                NumberedPaginationParam
	}{
		Ctx:               ctx,
		ChatRoomActionIDs: chatRoomActionIDs,
		Order:             order,
		Np:                np,
	}
	mock.lockGetPluralMessagesWithSenderByChatRoomActionIDs.Lock()
	mock.calls.GetPluralMessagesWithSenderByChatRoomActionIDs = append(mock.calls.GetPluralMessagesWithSenderByChatRoomActionIDs, callInfo)
	mock.lockGetPluralMessagesWithSenderByChatRoomActionIDs.Unlock()
	return mock.GetPluralMessagesWithSenderByChatRoomActionIDsFunc(ctx, chatRoomActionIDs, order, np)
}

// GetPluralMessagesWithSenderByChatRoomActionIDsCalls gets all the calls that were made to GetPluralMessagesWithSenderByChatRoomActionIDs.
// Check the length with:
//
//	len(mockedStore.GetPluralMessagesWithSenderByChatRoomActionIDsCalls())
func (mock *StoreMock) GetPluralMessagesWithSenderByChatRoomActionIDsCalls() []struct {
	Ctx               context.Context
	ChatRoomActionIDs []uuid.UUID
	Order             parameter.MessageOrderMethod
	Np                NumberedPaginationParam
} {
	var calls []struct {
		Ctx               context.Context
		ChatRoomActionIDs []uuid.UUID
		Order             parameter.MessageOrderMethod
		Np                NumberedPaginationParam
	}
	mock.lockGetPluralMessagesWithSenderByChatRoomActionIDs.RLock()
	calls = mock.calls.GetPluralMessagesWithSenderByChatRoomActionIDs
	mock.lockGetPluralMessagesWithSenderByChatRoomActionIDs.RUnlock()
	return calls
}

// GetPluralMessagesWithSenderByChatRoomActionIDsWithSd calls GetPluralMessagesWithSenderByChatRoomActionIDsWithSdFunc.
func (mock *StoreMock) GetPluralMessagesWithSenderByChatRoomActionIDsWithSd(ctx context.Context, sd Sd, chatRoomActionIDs []uuid.UUID, order parameter.MessageOrderMethod, np NumberedPaginationParam) (ListResult[entity.MessageWithSender], error) {
	if mock.GetPluralMessagesWithSenderByChatRoomActionIDsWithSdFunc == nil {
		panic("StoreMock.GetPluralMessagesWithSenderByChatRoomActionIDsWithSdFunc: method is nil but Store.GetPluralMessagesWithSenderByChatRoomActionIDsWithSd was just called")
	}
	callInfo := struct {
		Ctx               context.Context
		Sd                Sd
		ChatRoomActionIDs []uuid.UUID
		Order             parameter.MessageOrderMethod
		Np                NumberedPaginationParam
	}{
		Ctx:               ctx,
		Sd:                sd,
		ChatRoomActionIDs: chatRoomActionIDs,
		Order:             order,
		Np:                np,
	}
	mock.lockGetPluralMessagesWithSenderByChatRoomActionIDsWithSd.Lock()
	mock.calls.GetPluralMessagesWithSenderByChatRoomActionIDsWithSd = append(mock.calls.GetPluralMessagesWithSenderByChatRoomActionIDsWithSd, callInfo)
	mock.lockGetPluralMessagesWithSenderByChatRoomActionIDsWithSd.Unlock()
	return mock.GetPluralMessagesWithSenderByChatRoomActionIDsWithSdFunc(ctx, sd, chatRoomActionIDs, order, np)
}

// GetPluralMessagesWithSenderByChatRoomActionIDsWithSdCalls gets all the calls that were made to GetPluralMessagesWithSenderByChatRoomActionIDsWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralMessagesWithSenderByChatRoomActionIDsWithSdCalls())
func (mock *StoreMock) GetPluralMessagesWithSenderByChatRoomActionIDsWithSdCalls() []struct {
	Ctx               context.Context
	Sd                Sd
	ChatRoomActionIDs []uuid.UUID
	Order             parameter.MessageOrderMethod
	Np                NumberedPaginationParam
} {
	var calls []struct {
		Ctx               context.Context
		Sd                Sd
		ChatRoomActionIDs []uuid.UUID
		Order             parameter.MessageOrderMethod
		Np                NumberedPaginationParam
	}
	mock.lockGetPluralMessagesWithSenderByChatRoomActionIDsWithSd.RLock()
	calls = mock.calls.GetPluralMessagesWithSenderByChatRoomActionIDsWithSd
	mock.lockGetPluralMessagesWithSenderByChatRoomActionIDsWithSd.RUnlock()
	return calls
}

// GetPluralMessagesWithSenderWithSd calls GetPluralMessagesWithSenderWithSdFunc.
func (mock *StoreMock) GetPluralMessagesWithSenderWithSd(ctx context.Context, sd Sd, messageIDs []uuid.UUID, order parameter.MessageOrderMethod, np NumberedPaginationParam) (ListResult[entity.MessageWithSender], error) {
	if mock.GetPluralMessagesWithSenderWithSdFunc == nil {
		panic("StoreMock.GetPluralMessagesWithSenderWithSdFunc: method is nil but Store.GetPluralMessagesWithSenderWithSd was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Sd         Sd
		MessageIDs []uuid.UUID
		Order      parameter.MessageOrderMethod
		Np         NumberedPaginationParam
	}{
		Ctx:        ctx,
		Sd:         sd,
		MessageIDs: messageIDs,
		Order:      order,
		Np:         np,
	}
	mock.lockGetPluralMessagesWithSenderWithSd.Lock()
	mock.calls.GetPluralMessagesWithSenderWithSd = append(mock.calls.GetPluralMessagesWithSenderWithSd, callInfo)
	mock.lockGetPluralMessagesWithSenderWithSd.Unlock()
	return mock.GetPluralMessagesWithSenderWithSdFunc(ctx, sd, messageIDs, order, np)
}

// GetPluralMessagesWithSenderWithSdCalls gets all the calls that were made to GetPluralMessagesWithSenderWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralMessagesWithSenderWithSdCalls())
func (mock *StoreMock) GetPluralMessagesWithSenderWithSdCalls() []struct {
	Ctx        context.Context
	Sd         Sd
	MessageIDs []uuid.UUID
	Order      parameter.MessageOrderMethod
	Np         NumberedPaginationParam
} {
	var calls []struct {
		Ctx        context.Context
		Sd         Sd
		MessageIDs []uuid.UUID
		Order      parameter.MessageOrderMethod
		Np         NumberedPaginationParam
	}
	mock.lockGetPluralMessagesWithSenderWithSd.RLock()
	calls = mock.calls.GetPluralMessagesWithSenderWithSd
	mock.lockGetPluralMessagesWithSenderWithSd.RUnlock()
	return calls
}

// GetPluralMimeTypes calls GetPluralMimeTypesFunc.
func (mock *StoreMock) GetPluralMimeTypes(ctx context.Context, mimeTypeIDs []uuid.UUID, order parameter.MimeTypeOrderMethod, np NumberedPaginationParam) (ListResult[entity.MimeType], error) {
	if mock.GetPluralMimeTypesFunc == nil {
		panic("StoreMock.GetPluralMimeTypesFunc: method is nil but Store.GetPluralMimeTypes was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		MimeTypeIDs []uuid.UUID
		Order       parameter.MimeTypeOrderMethod
		Np          NumberedPaginationParam
	}{
		Ctx:         ctx,
		MimeTypeIDs: mimeTypeIDs,
		Order:       order,
		Np:          np,
	}
	mock.lockGetPluralMimeTypes.Lock()
	mock.calls.GetPluralMimeTypes = append(mock.calls.GetPluralMimeTypes, callInfo)
	mock.lockGetPluralMimeTypes.Unlock()
	return mock.GetPluralMimeTypesFunc(ctx, mimeTypeIDs, order, np)
}

// GetPluralMimeTypesCalls gets all the calls that were made to GetPluralMimeTypes.
// Check the length with:
//
//	len(mockedStore.GetPluralMimeTypesCalls())
func (mock *StoreMock) GetPluralMimeTypesCalls() []struct {
	Ctx         context.Context
	MimeTypeIDs []uuid.UUID
	Order       parameter.MimeTypeOrderMethod
	Np          NumberedPaginationParam
} {
	var calls []struct {
		Ctx         context.Context
		MimeTypeIDs []uuid.UUID
		Order       parameter.MimeTypeOrderMethod
		Np          NumberedPaginationParam
	}
	mock.lockGetPluralMimeTypes.RLock()
	calls = mock.calls.GetPluralMimeTypes
	mock.lockGetPluralMimeTypes.RUnlock()
	return calls
}

// GetPluralMimeTypesWithSd calls GetPluralMimeTypesWithSdFunc.
func (mock *StoreMock) GetPluralMimeTypesWithSd(ctx context.Context, sd Sd, mimeTypeIDs []uuid.UUID, order parameter.MimeTypeOrderMethod, np NumberedPaginationParam) (ListResult[entity.MimeType], error) {
	if mock.GetPluralMimeTypesWithSdFunc == nil {
		panic("StoreMock.GetPluralMimeTypesWithSdFunc: method is nil but Store.GetPluralMimeTypesWithSd was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Sd          Sd
		MimeTypeIDs []uuid.UUID
		Order       parameter.MimeTypeOrderMethod
		Np          NumberedPaginationParam
	}{
		Ctx:         ctx,
		Sd:          sd,
		MimeTypeIDs: mimeTypeIDs,
		Order:       order,
		Np:          np,
	}
	mock.lockGetPluralMimeTypesWithSd.Lock()
	mock.calls.GetPluralMimeTypesWithSd = append(mock.calls.GetPluralMimeTypesWithSd, callInfo)
	mock.lockGetPluralMimeTypesWithSd.Unlock()
	return mock.GetPluralMimeTypesWithSdFunc(ctx, sd, mimeTypeIDs, order, np)
}

// GetPluralMimeTypesWithSdCalls gets all the calls that were made to GetPluralMimeTypesWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralMimeTypesWithSdCalls())
func (mock *StoreMock) GetPluralMimeTypesWithSdCalls() []struct {
	Ctx         context.Context
	Sd          Sd
	MimeTypeIDs []uuid.UUID
	Order       parameter.MimeTypeOrderMethod
	Np          NumberedPaginationParam
} {
	var calls []struct {
		Ctx         context.Context
		Sd          Sd
		MimeTypeIDs []uuid.UUID
		Order       parameter.MimeTypeOrderMethod
		Np          NumberedPaginationParam
	}
	mock.lockGetPluralMimeTypesWithSd.RLock()
	calls = mock.calls.GetPluralMimeTypesWithSd
	mock.lockGetPluralMimeTypesWithSd.RUnlock()
	return calls
}

// GetPluralOrganizations calls GetPluralOrganizationsFunc.
func (mock *StoreMock) GetPluralOrganizations(ctx context.Context, organizationIDs []uuid.UUID, order parameter.OrganizationOrderMethod, np NumberedPaginationParam) (ListResult[entity.Organization], error) {
	if mock.GetPluralOrganizationsFunc == nil {
		panic("StoreMock.GetPluralOrganizationsFunc: method is nil but Store.GetPluralOrganizations was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		OrganizationIDs []uuid.UUID
		Order           parameter.OrganizationOrderMethod
		Np              NumberedPaginationParam
	}{
		Ctx:             ctx,
		OrganizationIDs: organizationIDs,
		Order:           order,
		Np:              np,
	}
	mock.lockGetPluralOrganizations.Lock()
	mock.calls.GetPluralOrganizations = append(mock.calls.GetPluralOrganizations, callInfo)
	mock.lockGetPluralOrganizations.Unlock()
	return mock.GetPluralOrganizationsFunc(ctx, organizationIDs, order, np)
}

// GetPluralOrganizationsCalls gets all the calls that were made to GetPluralOrganizations.
// Check the length with:
//
//	len(mockedStore.GetPluralOrganizationsCalls())
func (mock *StoreMock) GetPluralOrganizationsCalls() []struct {
	Ctx             context.Context
	OrganizationIDs []uuid.UUID
	Order           parameter.OrganizationOrderMethod
	Np              NumberedPaginationParam
} {
	var calls []struct {
		Ctx             context.Context
		OrganizationIDs []uuid.UUID
		Order           parameter.OrganizationOrderMethod
		Np              NumberedPaginationParam
	}
	mock.lockGetPluralOrganizations.RLock()
	calls = mock.calls.GetPluralOrganizations
	mock.lockGetPluralOrganizations.RUnlock()
	return calls
}

// GetPluralOrganizationsOnMember calls GetPluralOrganizationsOnMemberFunc.
func (mock *StoreMock) GetPluralOrganizationsOnMember(ctx context.Context, memberIDs []uuid.UUID, np NumberedPaginationParam, order parameter.OrganizationOnMemberOrderMethod) (ListResult[entity.OrganizationOnMember], error) {
	if mock.GetPluralOrganizationsOnMemberFunc == nil {
		panic("StoreMock.GetPluralOrganizationsOnMemberFunc: method is nil but Store.GetPluralOrganizationsOnMember was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		MemberIDs []uuid.UUID
		Np        NumberedPaginationParam
		Order     parameter.OrganizationOnMemberOrderMethod
	}{
		Ctx:       ctx,
		MemberIDs: memberIDs,
		Np:        np,
		Order:     order,
	}
	mock.lockGetPluralOrganizationsOnMember.Lock()
	mock.calls.GetPluralOrganizationsOnMember = append(mock.calls.GetPluralOrganizationsOnMember, callInfo)
	mock.lockGetPluralOrganizationsOnMember.Unlock()
	return mock.GetPluralOrganizationsOnMemberFunc(ctx, memberIDs, np, order)
}

// GetPluralOrganizationsOnMemberCalls gets all the calls that were made to GetPluralOrganizationsOnMember.
// Check the length with:
//
//	len(mockedStore.GetPluralOrganizationsOnMemberCalls())
func (mock *StoreMock) GetPluralOrganizationsOnMemberCalls() []struct {
	Ctx       context.Context
	MemberIDs []uuid.UUID
	Np        NumberedPaginationParam
	Order     parameter.OrganizationOnMemberOrderMethod
} {
	var calls []struct {
		Ctx       context.Context
		MemberIDs []uuid.UUID
		Np        NumberedPaginationParam
		Order     parameter.OrganizationOnMemberOrderMethod
	}
	mock.lockGetPluralOrganizationsOnMember.RLock()
	calls = mock.calls.GetPluralOrganizationsOnMember
	mock.lockGetPluralOrganizationsOnMember.RUnlock()
	return calls
}

// GetPluralOrganizationsOnMemberWithSd calls GetPluralOrganizationsOnMemberWithSdFunc.
func (mock *StoreMock) GetPluralOrganizationsOnMemberWithSd(ctx context.Context, sd Sd, memberIDs []uuid.UUID, np NumberedPaginationParam, order parameter.OrganizationOnMemberOrderMethod) (ListResult[entity.OrganizationOnMember], error) {
	if mock.GetPluralOrganizationsOnMemberWithSdFunc == nil {
		panic("StoreMock.GetPluralOrganizationsOnMemberWithSdFunc: method is nil but Store.GetPluralOrganizationsOnMemberWithSd was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Sd        Sd
		MemberIDs []uuid.UUID
		Np        NumberedPaginationParam
		Order     parameter.OrganizationOnMemberOrderMethod
	}{
		Ctx:       ctx,
		Sd:        sd,
		MemberIDs: memberIDs,
		Np:        np,
		Order:     order,
	}
	mock.lockGetPluralOrganizationsOnMemberWithSd.Lock()
	mock.calls.GetPluralOrganizationsOnMemberWithSd = append(mock.calls.GetPluralOrganizationsOnMemberWithSd, callInfo)
	mock.lockGetPluralOrganizationsOnMemberWithSd.Unlock()
	return mock.GetPluralOrganizationsOnMemberWithSdFunc(ctx, sd, memberIDs, np, order)
}

// GetPluralOrganizationsOnMemberWithSdCalls gets all the calls that were made to GetPluralOrganizationsOnMemberWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralOrganizationsOnMemberWithSdCalls())
func (mock *StoreMock) GetPluralOrganizationsOnMemberWithSdCalls() []struct {
	Ctx       context.Context
	Sd        Sd
	MemberIDs []uuid.UUID
	Np        NumberedPaginationParam
	Order     parameter.OrganizationOnMemberOrderMethod
} {
	var calls []struct {
		Ctx       context.Context
		Sd        Sd
		MemberIDs []uuid.UUID
		Np        NumberedPaginationParam
		Order     parameter.OrganizationOnMemberOrderMethod
	}
	mock.lockGetPluralOrganizationsOnMemberWithSd.RLock()
	calls = mock.calls.GetPluralOrganizationsOnMemberWithSd
	mock.lockGetPluralOrganizationsOnMemberWithSd.RUnlock()
	return calls
}

// GetPluralOrganizationsWithChatRoom calls GetPluralOrganizationsWithChatRoomFunc.
func (mock *StoreMock) GetPluralOrganizationsWithChatRoom(ctx context.Context, organizationIDs []uuid.UUID, order parameter.OrganizationOrderMethod, np NumberedPaginationParam) (ListResult[entity.OrganizationWithChatRoom], error) {
	if mock.GetPluralOrganizationsWithChatRoomFunc == nil {
		panic("StoreMock.GetPluralOrganizationsWithChatRoomFunc: method is nil but Store.GetPluralOrganizationsWithChatRoom was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		OrganizationIDs []uuid.UUID
		Order           parameter.OrganizationOrderMethod
		Np              NumberedPaginationParam
	}{
		Ctx:             ctx,
		OrganizationIDs: organizationIDs,
		Order:           order,
		Np:              np,
	}
	mock.lockGetPluralOrganizationsWithChatRoom.Lock()
	mock.calls.GetPluralOrganizationsWithChatRoom = append(mock.calls.GetPluralOrganizationsWithChatRoom, callInfo)
	mock.lockGetPluralOrganizationsWithChatRoom.Unlock()
	return mock.GetPluralOrganizationsWithChatRoomFunc(ctx, organizationIDs, order, np)
}

// GetPluralOrganizationsWithChatRoomCalls gets all the calls that were made to GetPluralOrganizationsWithChatRoom.
// Check the length with:
//
//	len(mockedStore.GetPluralOrganizationsWithChatRoomCalls())
func (mock *StoreMock) GetPluralOrganizationsWithChatRoomCalls() []struct {
	Ctx             context.Context
	OrganizationIDs []uuid.UUID
	Order           parameter.OrganizationOrderMethod
	Np              NumberedPaginationParam
} {
	var calls []struct {
		Ctx             context.Context
		OrganizationIDs []uuid.UUID
		Order           parameter.OrganizationOrderMethod
		Np              NumberedPaginationParam
	}
	mock.lockGetPluralOrganizationsWithChatRoom.RLock()
	calls = mock.calls.GetPluralOrganizationsWithChatRoom
	mock.lockGetPluralOrganizationsWithChatRoom.RUnlock()
	return calls
}

// GetPluralOrganizationsWithChatRoomAndDetail calls GetPluralOrganizationsWithChatRoomAndDetailFunc.
func (mock *StoreMock) GetPluralOrganizationsWithChatRoomAndDetail(ctx context.Context, organizationIDs []uuid.UUID, order parameter.OrganizationOrderMethod, np NumberedPaginationParam) (ListResult[entity.OrganizationWithChatRoomAndDetail], error) {
	if mock.GetPluralOrganizationsWithChatRoomAndDetailFunc == nil {
		panic("StoreMock.GetPluralOrganizationsWithChatRoomAndDetailFunc: method is nil but Store.GetPluralOrganizationsWithChatRoomAndDetail was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		OrganizationIDs []uuid.UUID
		Order           parameter.OrganizationOrderMethod
		Np              NumberedPaginationParam
	}{
		Ctx:             ctx,
		OrganizationIDs: organizationIDs,
		Order:           order,
		Np:              np,
	}
	mock.lockGetPluralOrganizationsWithChatRoomAndDetail.Lock()
	mock.calls.GetPluralOrganizationsWithChatRoomAndDetail = append(mock.calls.GetPluralOrganizationsWithChatRoomAndDetail, callInfo)
	mock.lockGetPluralOrganizationsWithChatRoomAndDetail.Unlock()
	return mock.GetPluralOrganizationsWithChatRoomAndDetailFunc(ctx, organizationIDs, order, np)
}

// GetPluralOrganizationsWithChatRoomAndDetailCalls gets all the calls that were made to GetPluralOrganizationsWithChatRoomAndDetail.
// Check the length with:
//
//	len(mockedStore.GetPluralOrganizationsWithChatRoomAndDetailCalls())
func (mock *StoreMock) GetPluralOrganizationsWithChatRoomAndDetailCalls() []struct {
	Ctx             context.Context
	OrganizationIDs []uuid.UUID
	Order           parameter.OrganizationOrderMethod
	Np              NumberedPaginationParam
} {
	var calls []struct {
		Ctx             context.Context
		OrganizationIDs []uuid.UUID
		Order           parameter.OrganizationOrderMethod
		Np              NumberedPaginationParam
	}
	mock.lockGetPluralOrganizationsWithChatRoomAndDetail.RLock()
	calls = mock.calls.GetPluralOrganizationsWithChatRoomAndDetail
	mock.lockGetPluralOrganizationsWithChatRoomAndDetail.RUnlock()
	return calls
}

// GetPluralOrganizationsWithChatRoomAndDetailWithSd calls GetPluralOrganizationsWithChatRoomAndDetailWithSdFunc.
func (mock *StoreMock) GetPluralOrganizationsWithChatRoomAndDetailWithSd(ctx context.Context, sd Sd, organizationIDs []uuid.UUID, order parameter.OrganizationOrderMethod, np NumberedPaginationParam) (ListResult[entity.OrganizationWithChatRoomAndDetail], error) {
	if mock.GetPluralOrganizationsWithChatRoomAndDetailWithSdFunc == nil {
		panic("StoreMock.GetPluralOrganizationsWithChatRoomAndDetailWithSdFunc: method is nil but Store.GetPluralOrganizationsWithChatRoomAndDetailWithSd was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		Sd              Sd
		OrganizationIDs []uuid.UUID
		Order           parameter.OrganizationOrderMethod
		Np              NumberedPaginationParam
	}{
		Ctx:             ctx,
		Sd:              sd,
		OrganizationIDs: organizationIDs,
		Order:           order,
		Np:              np,
	}
	mock.lockGetPluralOrganizationsWithChatRoomAndDetailWithSd.Lock()
	mock.calls.GetPluralOrganizationsWithChatRoomAndDetailWithSd = append(mock.calls.GetPluralOrganizationsWithChatRoomAndDetailWithSd, callInfo)
	mock.lockGetPluralOrganizationsWithChatRoomAndDetailWithSd.Unlock()
	return mock.GetPluralOrganizationsWithChatRoomAndDetailWithSdFunc(ctx, sd, organizationIDs, order, np)
}

// GetPluralOrganizationsWithChatRoomAndDetailWithSdCalls gets all the calls that were made to GetPluralOrganizationsWithChatRoomAndDetailWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralOrganizationsWithChatRoomAndDetailWithSdCalls())
func (mock *StoreMock) GetPluralOrganizationsWithChatRoomAndDetailWithSdCalls() []struct {
	Ctx             context.Context
	Sd              Sd
	OrganizationIDs []uuid.UUID
	Order           parameter.OrganizationOrderMethod
	Np              NumberedPaginationParam
} {
	var calls []struct {
		Ctx             context.Context
		Sd              Sd
		OrganizationIDs []uuid.UUID
		Order           parameter.OrganizationOrderMethod
		Np              NumberedPaginationParam
	}
	mock.lockGetPluralOrganizationsWithChatRoomAndDetailWithSd.RLock()
	calls = mock.calls.GetPluralOrganizationsWithChatRoomAndDetailWithSd
	mock.lockGetPluralOrganizationsWithChatRoomAndDetailWithSd.RUnlock()
	return calls
}

// GetPluralOrganizationsWithChatRoomWithSd calls GetPluralOrganizationsWithChatRoomWithSdFunc.
func (mock *StoreMock) GetPluralOrganizationsWithChatRoomWithSd(ctx context.Context, sd Sd, organizationIDs []uuid.UUID, order parameter.OrganizationOrderMethod, np NumberedPaginationParam) (ListResult[entity.OrganizationWithChatRoom], error) {
	if mock.GetPluralOrganizationsWithChatRoomWithSdFunc == nil {
		panic("StoreMock.GetPluralOrganizationsWithChatRoomWithSdFunc: method is nil but Store.GetPluralOrganizationsWithChatRoomWithSd was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		Sd              Sd
		OrganizationIDs []uuid.UUID
		Order           parameter.OrganizationOrderMethod
		Np              NumberedPaginationParam
	}{
		Ctx:             ctx,
		Sd:              sd,
		OrganizationIDs: organizationIDs,
		Order:           order,
		Np:              np,
	}
	mock.lockGetPluralOrganizationsWithChatRoomWithSd.Lock()
	mock.calls.GetPluralOrganizationsWithChatRoomWithSd = append(mock.calls.GetPluralOrganizationsWithChatRoomWithSd, callInfo)
	mock.lockGetPluralOrganizationsWithChatRoomWithSd.Unlock()
	return mock.GetPluralOrganizationsWithChatRoomWithSdFunc(ctx, sd, organizationIDs, order, np)
}

// GetPluralOrganizationsWithChatRoomWithSdCalls gets all the calls that were made to GetPluralOrganizationsWithChatRoomWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralOrganizationsWithChatRoomWithSdCalls())
func (mock *StoreMock) GetPluralOrganizationsWithChatRoomWithSdCalls() []struct {
	Ctx             context.Context
	Sd              Sd
	OrganizationIDs []uuid.UUID
	Order           parameter.OrganizationOrderMethod
	Np              NumberedPaginationParam
} {
	var calls []struct {
		Ctx             context.Context
		Sd              Sd
		OrganizationIDs []uuid.UUID
		Order           parameter.OrganizationOrderMethod
		Np              NumberedPaginationParam
	}
	mock.lockGetPluralOrganizationsWithChatRoomWithSd.RLock()
	calls = mock.calls.GetPluralOrganizationsWithChatRoomWithSd
	mock.lockGetPluralOrganizationsWithChatRoomWithSd.RUnlock()
	return calls
}

// GetPluralOrganizationsWithDetail calls GetPluralOrganizationsWithDetailFunc.
func (mock *StoreMock) GetPluralOrganizationsWithDetail(ctx context.Context, organizationIDs []uuid.UUID, order parameter.OrganizationOrderMethod, np NumberedPaginationParam) (ListResult[entity.OrganizationWithDetail], error) {
	if mock.GetPluralOrganizationsWithDetailFunc == nil {
		panic("StoreMock.GetPluralOrganizationsWithDetailFunc: method is nil but Store.GetPluralOrganizationsWithDetail was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		OrganizationIDs []uuid.UUID
		Order           parameter.OrganizationOrderMethod
		Np              NumberedPaginationParam
	}{
		Ctx:             ctx,
		OrganizationIDs: organizationIDs,
		Order:           order,
		Np:              np,
	}
	mock.lockGetPluralOrganizationsWithDetail.Lock()
	mock.calls.GetPluralOrganizationsWithDetail = append(mock.calls.GetPluralOrganizationsWithDetail, callInfo)
	mock.lockGetPluralOrganizationsWithDetail.Unlock()
	return mock.GetPluralOrganizationsWithDetailFunc(ctx, organizationIDs, order, np)
}

// GetPluralOrganizationsWithDetailCalls gets all the calls that were made to GetPluralOrganizationsWithDetail.
// Check the length with:
//
//	len(mockedStore.GetPluralOrganizationsWithDetailCalls())
func (mock *StoreMock) GetPluralOrganizationsWithDetailCalls() []struct {
	Ctx             context.Context
	OrganizationIDs []uuid.UUID
	Order           parameter.OrganizationOrderMethod
	Np              NumberedPaginationParam
} {
	var calls []struct {
		Ctx             context.Context
		OrganizationIDs []uuid.UUID
		Order           parameter.OrganizationOrderMethod
		Np              NumberedPaginationParam
	}
	mock.lockGetPluralOrganizationsWithDetail.RLock()
	calls = mock.calls.GetPluralOrganizationsWithDetail
	mock.lockGetPluralOrganizationsWithDetail.RUnlock()
	return calls
}

// GetPluralOrganizationsWithDetailWithSd calls GetPluralOrganizationsWithDetailWithSdFunc.
func (mock *StoreMock) GetPluralOrganizationsWithDetailWithSd(ctx context.Context, sd Sd, organizationIDs []uuid.UUID, order parameter.OrganizationOrderMethod, np NumberedPaginationParam) (ListResult[entity.OrganizationWithDetail], error) {
	if mock.GetPluralOrganizationsWithDetailWithSdFunc == nil {
		panic("StoreMock.GetPluralOrganizationsWithDetailWithSdFunc: method is nil but Store.GetPluralOrganizationsWithDetailWithSd was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		Sd              Sd
		OrganizationIDs []uuid.UUID
		Order           parameter.OrganizationOrderMethod
		Np              NumberedPaginationParam
	}{
		Ctx:             ctx,
		Sd:              sd,
		OrganizationIDs: organizationIDs,
		Order:           order,
		Np:              np,
	}
	mock.lockGetPluralOrganizationsWithDetailWithSd.Lock()
	mock.calls.GetPluralOrganizationsWithDetailWithSd = append(mock.calls.GetPluralOrganizationsWithDetailWithSd, callInfo)
	mock.lockGetPluralOrganizationsWithDetailWithSd.Unlock()
	return mock.GetPluralOrganizationsWithDetailWithSdFunc(ctx, sd, organizationIDs, order, np)
}

// GetPluralOrganizationsWithDetailWithSdCalls gets all the calls that were made to GetPluralOrganizationsWithDetailWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralOrganizationsWithDetailWithSdCalls())
func (mock *StoreMock) GetPluralOrganizationsWithDetailWithSdCalls() []struct {
	Ctx             context.Context
	Sd              Sd
	OrganizationIDs []uuid.UUID
	Order           parameter.OrganizationOrderMethod
	Np              NumberedPaginationParam
} {
	var calls []struct {
		Ctx             context.Context
		Sd              Sd
		OrganizationIDs []uuid.UUID
		Order           parameter.OrganizationOrderMethod
		Np              NumberedPaginationParam
	}
	mock.lockGetPluralOrganizationsWithDetailWithSd.RLock()
	calls = mock.calls.GetPluralOrganizationsWithDetailWithSd
	mock.lockGetPluralOrganizationsWithDetailWithSd.RUnlock()
	return calls
}

// GetPluralOrganizationsWithSd calls GetPluralOrganizationsWithSdFunc.
func (mock *StoreMock) GetPluralOrganizationsWithSd(ctx context.Context, sd Sd, organizationIDs []uuid.UUID, order parameter.OrganizationOrderMethod, np NumberedPaginationParam) (ListResult[entity.Organization], error) {
	if mock.GetPluralOrganizationsWithSdFunc == nil {
		panic("StoreMock.GetPluralOrganizationsWithSdFunc: method is nil but Store.GetPluralOrganizationsWithSd was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		Sd              Sd
		OrganizationIDs []uuid.UUID
		Order           parameter.OrganizationOrderMethod
		Np              NumberedPaginationParam
	}{
		Ctx:             ctx,
		Sd:              sd,
		OrganizationIDs: organizationIDs,
		Order:           order,
		Np:              np,
	}
	mock.lockGetPluralOrganizationsWithSd.Lock()
	mock.calls.GetPluralOrganizationsWithSd = append(mock.calls.GetPluralOrganizationsWithSd, callInfo)
	mock.lockGetPluralOrganizationsWithSd.Unlock()
	return mock.GetPluralOrganizationsWithSdFunc(ctx, sd, organizationIDs, order, np)
}

// GetPluralOrganizationsWithSdCalls gets all the calls that were made to GetPluralOrganizationsWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralOrganizationsWithSdCalls())
func (mock *StoreMock) GetPluralOrganizationsWithSdCalls() []struct {
	Ctx             context.Context
	Sd              Sd
	OrganizationIDs []uuid.UUID
	Order           parameter.OrganizationOrderMethod
	Np              NumberedPaginationParam
} {
	var calls []struct {
		Ctx             context.Context
		Sd              Sd
		OrganizationIDs []uuid.UUID
		Order           parameter.OrganizationOrderMethod
		Np              NumberedPaginationParam
	}
	mock.lockGetPluralOrganizationsWithSd.RLock()
	calls = mock.calls.GetPluralOrganizationsWithSd
	mock.lockGetPluralOrganizationsWithSd.RUnlock()
	return calls
}

// GetPluralPermissionCategories calls GetPluralPermissionCategoriesFunc.
func (mock *StoreMock) GetPluralPermissionCategories(ctx context.Context, permissionCategoryIDs []uuid.UUID, order parameter.PermissionCategoryOrderMethod, np NumberedPaginationParam) (ListResult[entity.PermissionCategory], error) {
	if mock.GetPluralPermissionCategoriesFunc == nil {
		panic("StoreMock.GetPluralPermissionCategoriesFunc: method is nil but Store.GetPluralPermissionCategories was just called")
	}
	callInfo := struct {
		Ctx                   context.Context
		PermissionCategoryIDs []uuid.UUID
		Order                 parameter.PermissionCategoryOrderMethod
		Np                    NumberedPaginationParam
	}{
		Ctx:                   ctx,
		PermissionCategoryIDs: permissionCategoryIDs,
		Order:                 order,
		Np:                    np,
	}
	mock.lockGetPluralPermissionCategories.Lock()
	mock.calls.GetPluralPermissionCategories = append(mock.calls.GetPluralPermissionCategories, callInfo)
	mock.lockGetPluralPermissionCategories.Unlock()
	return mock.GetPluralPermissionCategoriesFunc(ctx, permissionCategoryIDs, order, np)
}

// GetPluralPermissionCategoriesCalls gets all the calls that were made to GetPluralPermissionCategories.
// Check the length with:
//
//	len(mockedStore.GetPluralPermissionCategoriesCalls())
func (mock *StoreMock) GetPluralPermissionCategoriesCalls() []struct {
	Ctx                   context.Context
	PermissionCategoryIDs []uuid.UUID
	Order                 parameter.PermissionCategoryOrderMethod
	Np                    NumberedPaginationParam
} {
	var calls []struct {
		Ctx                   context.Context
		PermissionCategoryIDs []uuid.UUID
		Order                 parameter.PermissionCategoryOrderMethod
		Np                    NumberedPaginationParam
	}
	mock.lockGetPluralPermissionCategories.RLock()
	calls = mock.calls.GetPluralPermissionCategories
	mock.lockGetPluralPermissionCategories.RUnlock()
	return calls
}

// GetPluralPermissionCategoriesWithSd calls GetPluralPermissionCategoriesWithSdFunc.
func (mock *StoreMock) GetPluralPermissionCategoriesWithSd(ctx context.Context, sd Sd, permissionCategoryIDs []uuid.UUID, order parameter.PermissionCategoryOrderMethod, np NumberedPaginationParam) (ListResult[entity.PermissionCategory], error) {
	if mock.GetPluralPermissionCategoriesWithSdFunc == nil {
		panic("StoreMock.GetPluralPermissionCategoriesWithSdFunc: method is nil but Store.GetPluralPermissionCategoriesWithSd was just called")
	}
	callInfo := struct {
		Ctx                   context.Context
		Sd                    Sd
		PermissionCategoryIDs []uuid.UUID
		Order                 parameter.PermissionCategoryOrderMethod
		Np                    NumberedPaginationParam
	}{
		Ctx:                   ctx,
		Sd:                    sd,
		PermissionCategoryIDs: permissionCategoryIDs,
		Order:                 order,
		Np:                    np,
	}
	mock.lockGetPluralPermissionCategoriesWithSd.Lock()
	mock.calls.GetPluralPermissionCategoriesWithSd = append(mock.calls.GetPluralPermissionCategoriesWithSd, callInfo)
	mock.lockGetPluralPermissionCategoriesWithSd.Unlock()
	return mock.GetPluralPermissionCategoriesWithSdFunc(ctx, sd, permissionCategoryIDs, order, np)
}

// GetPluralPermissionCategoriesWithSdCalls gets all the calls that were made to GetPluralPermissionCategoriesWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralPermissionCategoriesWithSdCalls())
func (mock *StoreMock) GetPluralPermissionCategoriesWithSdCalls() []struct {
	Ctx                   context.Context
	Sd                    Sd
	PermissionCategoryIDs []uuid.UUID
	Order                 parameter.PermissionCategoryOrderMethod
	Np                    NumberedPaginationParam
} {
	var calls []struct {
		Ctx                   context.Context
		Sd                    Sd
		PermissionCategoryIDs []uuid.UUID
		Order                 parameter.PermissionCategoryOrderMethod
		Np                    NumberedPaginationParam
	}
	mock.lockGetPluralPermissionCategoriesWithSd.RLock()
	calls = mock.calls.GetPluralPermissionCategoriesWithSd
	mock.lockGetPluralPermissionCategoriesWithSd.RUnlock()
	return calls
}

// GetPluralPermissions calls GetPluralPermissionsFunc.
func (mock *StoreMock) GetPluralPermissions(ctx context.Context, permissionIDs []uuid.UUID, order parameter.PermissionOrderMethod, np NumberedPaginationParam) (ListResult[entity.Permission], error) {
	if mock.GetPluralPermissionsFunc == nil {
		panic("StoreMock.GetPluralPermissionsFunc: method is nil but Store.GetPluralPermissions was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		PermissionIDs []uuid.UUID
		Order         parameter.PermissionOrderMethod
		Np            NumberedPaginationParam
	}{
		Ctx:           ctx,
		PermissionIDs: permissionIDs,
		Order:         order,
		Np:            np,
	}
	mock.lockGetPluralPermissions.Lock()
	mock.calls.GetPluralPermissions = append(mock.calls.GetPluralPermissions, callInfo)
	mock.lockGetPluralPermissions.Unlock()
	return mock.GetPluralPermissionsFunc(ctx, permissionIDs, order, np)
}

// GetPluralPermissionsCalls gets all the calls that were made to GetPluralPermissions.
// Check the length with:
//
//	len(mockedStore.GetPluralPermissionsCalls())
func (mock *StoreMock) GetPluralPermissionsCalls() []struct {
	Ctx           context.Context
	PermissionIDs []uuid.UUID
	Order         parameter.PermissionOrderMethod
	Np            NumberedPaginationParam
} {
	var calls []struct {
		Ctx           context.Context
		PermissionIDs []uuid.UUID
		Order         parameter.PermissionOrderMethod
		Np            NumberedPaginationParam
	}
	mock.lockGetPluralPermissions.RLock()
	calls = mock.calls.GetPluralPermissions
	mock.lockGetPluralPermissions.RUnlock()
	return calls
}

// GetPluralPermissionsWithSd calls GetPluralPermissionsWithSdFunc.
func (mock *StoreMock) GetPluralPermissionsWithSd(ctx context.Context, sd Sd, permissionIDs []uuid.UUID, order parameter.PermissionOrderMethod, np NumberedPaginationParam) (ListResult[entity.Permission], error) {
	if mock.GetPluralPermissionsWithSdFunc == nil {
		panic("StoreMock.GetPluralPermissionsWithSdFunc: method is nil but Store.GetPluralPermissionsWithSd was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		Sd            Sd
		PermissionIDs []uuid.UUID
		Order         parameter.PermissionOrderMethod
		Np            NumberedPaginationParam
	}{
		Ctx:           ctx,
		Sd:            sd,
		PermissionIDs: permissionIDs,
		Order:         order,
		Np:            np,
	}
	mock.lockGetPluralPermissionsWithSd.Lock()
	mock.calls.GetPluralPermissionsWithSd = append(mock.calls.GetPluralPermissionsWithSd, callInfo)
	mock.lockGetPluralPermissionsWithSd.Unlock()
	return mock.GetPluralPermissionsWithSdFunc(ctx, sd, permissionIDs, order, np)
}

// GetPluralPermissionsWithSdCalls gets all the calls that were made to GetPluralPermissionsWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralPermissionsWithSdCalls())
func (mock *StoreMock) GetPluralPermissionsWithSdCalls() []struct {
	Ctx           context.Context
	Sd            Sd
	PermissionIDs []uuid.UUID
	Order         parameter.PermissionOrderMethod
	Np            NumberedPaginationParam
} {
	var calls []struct {
		Ctx           context.Context
		Sd            Sd
		PermissionIDs []uuid.UUID
		Order         parameter.PermissionOrderMethod
		Np            NumberedPaginationParam
	}
	mock.lockGetPluralPermissionsWithSd.RLock()
	calls = mock.calls.GetPluralPermissionsWithSd
	mock.lockGetPluralPermissionsWithSd.RUnlock()
	return calls
}

// GetPluralPolicies calls GetPluralPoliciesFunc.
func (mock *StoreMock) GetPluralPolicies(ctx context.Context, policyIDs []uuid.UUID, order parameter.PolicyOrderMethod, np NumberedPaginationParam) (ListResult[entity.Policy], error) {
	if mock.GetPluralPoliciesFunc == nil {
		panic("StoreMock.GetPluralPoliciesFunc: method is nil but Store.GetPluralPolicies was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		PolicyIDs []uuid.UUID
		Order     parameter.PolicyOrderMethod
		Np        NumberedPaginationParam
	}{
		Ctx:       ctx,
		PolicyIDs: policyIDs,
		Order:     order,
		Np:        np,
	}
	mock.lockGetPluralPolicies.Lock()
	mock.calls.GetPluralPolicies = append(mock.calls.GetPluralPolicies, callInfo)
	mock.lockGetPluralPolicies.Unlock()
	return mock.GetPluralPoliciesFunc(ctx, policyIDs, order, np)
}

// GetPluralPoliciesCalls gets all the calls that were made to GetPluralPolicies.
// Check the length with:
//
//	len(mockedStore.GetPluralPoliciesCalls())
func (mock *StoreMock) GetPluralPoliciesCalls() []struct {
	Ctx       context.Context
	PolicyIDs []uuid.UUID
	Order     parameter.PolicyOrderMethod
	Np        NumberedPaginationParam
} {
	var calls []struct {
		Ctx       context.Context
		PolicyIDs []uuid.UUID
		Order     parameter.PolicyOrderMethod
		Np        NumberedPaginationParam
	}
	mock.lockGetPluralPolicies.RLock()
	calls = mock.calls.GetPluralPolicies
	mock.lockGetPluralPolicies.RUnlock()
	return calls
}

// GetPluralPoliciesWithSd calls GetPluralPoliciesWithSdFunc.
func (mock *StoreMock) GetPluralPoliciesWithSd(ctx context.Context, sd Sd, policyIDs []uuid.UUID, order parameter.PolicyOrderMethod, np NumberedPaginationParam) (ListResult[entity.Policy], error) {
	if mock.GetPluralPoliciesWithSdFunc == nil {
		panic("StoreMock.GetPluralPoliciesWithSdFunc: method is nil but Store.GetPluralPoliciesWithSd was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Sd        Sd
		PolicyIDs []uuid.UUID
		Order     parameter.PolicyOrderMethod
		Np        NumberedPaginationParam
	}{
		Ctx:       ctx,
		Sd:        sd,
		PolicyIDs: policyIDs,
		Order:     order,
		Np:        np,
	}
	mock.lockGetPluralPoliciesWithSd.Lock()
	mock.calls.GetPluralPoliciesWithSd = append(mock.calls.GetPluralPoliciesWithSd, callInfo)
	mock.lockGetPluralPoliciesWithSd.Unlock()
	return mock.GetPluralPoliciesWithSdFunc(ctx, sd, policyIDs, order, np)
}

// GetPluralPoliciesWithSdCalls gets all the calls that were made to GetPluralPoliciesWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralPoliciesWithSdCalls())
func (mock *StoreMock) GetPluralPoliciesWithSdCalls() []struct {
	Ctx       context.Context
	Sd        Sd
	PolicyIDs []uuid.UUID
	Order     parameter.PolicyOrderMethod
	Np        NumberedPaginationParam
} {
	var calls []struct {
		Ctx       context.Context
		Sd        Sd
		PolicyIDs []uuid.UUID
		Order     parameter.PolicyOrderMethod
		Np        NumberedPaginationParam
	}
	mock.lockGetPluralPoliciesWithSd.RLock()
	calls = mock.calls.GetPluralPoliciesWithSd
	mock.lockGetPluralPoliciesWithSd.RUnlock()
	return calls
}

// GetPluralPolicyCategories calls GetPluralPolicyCategoriesFunc.
func (mock *StoreMock) GetPluralPolicyCategories(ctx context.Context, policyCategoryIDs []uuid.UUID, order parameter.PolicyCategoryOrderMethod, np NumberedPaginationParam) (ListResult[entity.PolicyCategory], error) {
	if mock.GetPluralPolicyCategoriesFunc == nil {
		panic("StoreMock.GetPluralPolicyCategoriesFunc: method is nil but Store.GetPluralPolicyCategories was just called")
	}
	callInfo := struct {
		Ctx               context.Context
		PolicyCategoryIDs []uuid.UUID
		Order             parameter.PolicyCategoryOrderMethod
		Np                NumberedPaginationParam
	}{
		Ctx:               ctx,
		PolicyCategoryIDs: policyCategoryIDs,
		Order:             order,
		Np:                np,
	}
	mock.lockGetPluralPolicyCategories.Lock()
	mock.calls.GetPluralPolicyCategories = append(mock.calls.GetPluralPolicyCategories, callInfo)
	mock.lockGetPluralPolicyCategories.Unlock()
	return mock.GetPluralPolicyCategoriesFunc(ctx, policyCategoryIDs, order, np)
}

// GetPluralPolicyCategoriesCalls gets all the calls that were made to GetPluralPolicyCategories.
// Check the length with:
//
//	len(mockedStore.GetPluralPolicyCategoriesCalls())
func (mock *StoreMock) GetPluralPolicyCategoriesCalls() []struct {
	Ctx               context.Context
	PolicyCategoryIDs []uuid.UUID
	Order             parameter.PolicyCategoryOrderMethod
	Np                NumberedPaginationParam
} {
	var calls []struct {
		Ctx               context.Context
		PolicyCategoryIDs []uuid.UUID
		Order             parameter.PolicyCategoryOrderMethod
		Np                NumberedPaginationParam
	}
	mock.lockGetPluralPolicyCategories.RLock()
	calls = mock.calls.GetPluralPolicyCategories
	mock.lockGetPluralPolicyCategories.RUnlock()
	return calls
}

// GetPluralPolicyCategoriesWithSd calls GetPluralPolicyCategoriesWithSdFunc.
func (mock *StoreMock) GetPluralPolicyCategoriesWithSd(ctx context.Context, sd Sd, policyCategoryIDs []uuid.UUID, order parameter.PolicyCategoryOrderMethod, np NumberedPaginationParam) (ListResult[entity.PolicyCategory], error) {
	if mock.GetPluralPolicyCategoriesWithSdFunc == nil {
		panic("StoreMock.GetPluralPolicyCategoriesWithSdFunc: method is nil but Store.GetPluralPolicyCategoriesWithSd was just called")
	}
	callInfo := struct {
		Ctx               context.Context
		Sd                Sd
		PolicyCategoryIDs []uuid.UUID
		Order             parameter.PolicyCategoryOrderMethod
		Np                NumberedPaginationParam
	}{
		Ctx:               ctx,
		Sd:                sd,
		PolicyCategoryIDs: policyCategoryIDs,
		Order:             order,
		Np:                np,
	}
	mock.lockGetPluralPolicyCategoriesWithSd.Lock()
	mock.calls.GetPluralPolicyCategoriesWithSd = append(mock.calls.GetPluralPolicyCategoriesWithSd, callInfo)
	mock.lockGetPluralPolicyCategoriesWithSd.Unlock()
	return mock.GetPluralPolicyCategoriesWithSdFunc(ctx, sd, policyCategoryIDs, order, np)
}

// GetPluralPolicyCategoriesWithSdCalls gets all the calls that were made to GetPluralPolicyCategoriesWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralPolicyCategoriesWithSdCalls())
func (mock *StoreMock) GetPluralPolicyCategoriesWithSdCalls() []struct {
	Ctx               context.Context
	Sd                Sd
	PolicyCategoryIDs []uuid.UUID
	Order             parameter.PolicyCategoryOrderMethod
	Np                NumberedPaginationParam
} {
	var calls []struct {
		Ctx               context.Context
		Sd                Sd
		PolicyCategoryIDs []uuid.UUID
		Order             parameter.PolicyCategoryOrderMethod
		Np                NumberedPaginationParam
	}
	mock.lockGetPluralPolicyCategoriesWithSd.RLock()
	calls = mock.calls.GetPluralPolicyCategoriesWithSd
	mock.lockGetPluralPolicyCategoriesWithSd.RUnlock()
	return calls
}

// GetPluralPrivateChatRoomCompanions calls GetPluralPrivateChatRoomCompanionsFunc.
func (mock *StoreMock) GetPluralPrivateChatRoomCompanions(ctx context.Context, chatRoomIDs []uuid.UUID, memberID uuid.UUID, np NumberedPaginationParam, order parameter.MemberOnChatRoomOrderMethod) (ListResult[entity.PrivateChatRoomCompanions], error) {
	if mock.GetPluralPrivateChatRoomCompanionsFunc == nil {
		panic("StoreMock.GetPluralPrivateChatRoomCompanionsFunc: method is nil but Store.GetPluralPrivateChatRoomCompanions was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		ChatRoomIDs []uuid.UUID
		MemberID    uuid.UUID
		Np          NumberedPaginationParam
		Order       parameter.MemberOnChatRoomOrderMethod
	}{
		Ctx:         ctx,
		ChatRoomIDs: chatRoomIDs,
		MemberID:    memberID,
		Np:          np,
		Order:       order,
	}
	mock.lockGetPluralPrivateChatRoomCompanions.Lock()
	mock.calls.GetPluralPrivateChatRoomCompanions = append(mock.calls.GetPluralPrivateChatRoomCompanions, callInfo)
	mock.lockGetPluralPrivateChatRoomCompanions.Unlock()
	return mock.GetPluralPrivateChatRoomCompanionsFunc(ctx, chatRoomIDs, memberID, np, order)
}

// GetPluralPrivateChatRoomCompanionsCalls gets all the calls that were made to GetPluralPrivateChatRoomCompanions.
// Check the length with:
//
//	len(mockedStore.GetPluralPrivateChatRoomCompanionsCalls())
func (mock *StoreMock) GetPluralPrivateChatRoomCompanionsCalls() []struct {
	Ctx         context.Context
	ChatRoomIDs []uuid.UUID
	MemberID    uuid.UUID
	Np          NumberedPaginationParam
	Order       parameter.MemberOnChatRoomOrderMethod
} {
	var calls []struct {
		Ctx         context.Context
		ChatRoomIDs []uuid.UUID
		MemberID    uuid.UUID
		Np          NumberedPaginationParam
		Order       parameter.MemberOnChatRoomOrderMethod
	}
	mock.lockGetPluralPrivateChatRoomCompanions.RLock()
	calls = mock.calls.GetPluralPrivateChatRoomCompanions
	mock.lockGetPluralPrivateChatRoomCompanions.RUnlock()
	return calls
}

// GetPluralPrivateChatRoomCompanionsWithSd calls GetPluralPrivateChatRoomCompanionsWithSdFunc.
func (mock *StoreMock) GetPluralPrivateChatRoomCompanionsWithSd(ctx context.Context, sd Sd, chatRoomIDs []uuid.UUID, memberID uuid.UUID, np NumberedPaginationParam, order parameter.MemberOnChatRoomOrderMethod) (ListResult[entity.PrivateChatRoomCompanions], error) {
	if mock.GetPluralPrivateChatRoomCompanionsWithSdFunc == nil {
		panic("StoreMock.GetPluralPrivateChatRoomCompanionsWithSdFunc: method is nil but Store.GetPluralPrivateChatRoomCompanionsWithSd was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Sd          Sd
		ChatRoomIDs []uuid.UUID
		MemberID    uuid.UUID
		Np          NumberedPaginationParam
		Order       parameter.MemberOnChatRoomOrderMethod
	}{
		Ctx:         ctx,
		Sd:          sd,
		ChatRoomIDs: chatRoomIDs,
		MemberID:    memberID,
		Np:          np,
		Order:       order,
	}
	mock.lockGetPluralPrivateChatRoomCompanionsWithSd.Lock()
	mock.calls.GetPluralPrivateChatRoomCompanionsWithSd = append(mock.calls.GetPluralPrivateChatRoomCompanionsWithSd, callInfo)
	mock.lockGetPluralPrivateChatRoomCompanionsWithSd.Unlock()
	return mock.GetPluralPrivateChatRoomCompanionsWithSdFunc(ctx, sd, chatRoomIDs, memberID, np, order)
}

// GetPluralPrivateChatRoomCompanionsWithSdCalls gets all the calls that were made to GetPluralPrivateChatRoomCompanionsWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralPrivateChatRoomCompanionsWithSdCalls())
func (mock *StoreMock) GetPluralPrivateChatRoomCompanionsWithSdCalls() []struct {
	Ctx         context.Context
	Sd          Sd
	ChatRoomIDs []uuid.UUID
	MemberID    uuid.UUID
	Np          NumberedPaginationParam
	Order       parameter.MemberOnChatRoomOrderMethod
} {
	var calls []struct {
		Ctx         context.Context
		Sd          Sd
		ChatRoomIDs []uuid.UUID
		MemberID    uuid.UUID
		Np          NumberedPaginationParam
		Order       parameter.MemberOnChatRoomOrderMethod
	}
	mock.lockGetPluralPrivateChatRoomCompanionsWithSd.RLock()
	calls = mock.calls.GetPluralPrivateChatRoomCompanionsWithSd
	mock.lockGetPluralPrivateChatRoomCompanionsWithSd.RUnlock()
	return calls
}

// GetPluralProfessors calls GetPluralProfessorsFunc.
func (mock *StoreMock) GetPluralProfessors(ctx context.Context, professorIDs []uuid.UUID, order parameter.ProfessorOrderMethod, np NumberedPaginationParam) (ListResult[entity.Professor], error) {
	if mock.GetPluralProfessorsFunc == nil {
		panic("StoreMock.GetPluralProfessorsFunc: method is nil but Store.GetPluralProfessors was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		ProfessorIDs []uuid.UUID
		Order        parameter.ProfessorOrderMethod
		Np           NumberedPaginationParam
	}{
		Ctx:          ctx,
		ProfessorIDs: professorIDs,
		Order:        order,
		Np:           np,
	}
	mock.lockGetPluralProfessors.Lock()
	mock.calls.GetPluralProfessors = append(mock.calls.GetPluralProfessors, callInfo)
	mock.lockGetPluralProfessors.Unlock()
	return mock.GetPluralProfessorsFunc(ctx, professorIDs, order, np)
}

// GetPluralProfessorsCalls gets all the calls that were made to GetPluralProfessors.
// Check the length with:
//
//	len(mockedStore.GetPluralProfessorsCalls())
func (mock *StoreMock) GetPluralProfessorsCalls() []struct {
	Ctx          context.Context
	ProfessorIDs []uuid.UUID
	Order        parameter.ProfessorOrderMethod
	Np           NumberedPaginationParam
} {
	var calls []struct {
		Ctx          context.Context
		ProfessorIDs []uuid.UUID
		Order        parameter.ProfessorOrderMethod
		Np           NumberedPaginationParam
	}
	mock.lockGetPluralProfessors.RLock()
	calls = mock.calls.GetPluralProfessors
	mock.lockGetPluralProfessors.RUnlock()
	return calls
}

// GetPluralProfessorsWithMember calls GetPluralProfessorsWithMemberFunc.
func (mock *StoreMock) GetPluralProfessorsWithMember(ctx context.Context, professorIDs []uuid.UUID, order parameter.ProfessorOrderMethod, np NumberedPaginationParam) (ListResult[entity.ProfessorWithMember], error) {
	if mock.GetPluralProfessorsWithMemberFunc == nil {
		panic("StoreMock.GetPluralProfessorsWithMemberFunc: method is nil but Store.GetPluralProfessorsWithMember was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		ProfessorIDs []uuid.UUID
		Order        parameter.ProfessorOrderMethod
		Np           NumberedPaginationParam
	}{
		Ctx:          ctx,
		ProfessorIDs: professorIDs,
		Order:        order,
		Np:           np,
	}
	mock.lockGetPluralProfessorsWithMember.Lock()
	mock.calls.GetPluralProfessorsWithMember = append(mock.calls.GetPluralProfessorsWithMember, callInfo)
	mock.lockGetPluralProfessorsWithMember.Unlock()
	return mock.GetPluralProfessorsWithMemberFunc(ctx, professorIDs, order, np)
}

// GetPluralProfessorsWithMemberCalls gets all the calls that were made to GetPluralProfessorsWithMember.
// Check the length with:
//
//	len(mockedStore.GetPluralProfessorsWithMemberCalls())
func (mock *StoreMock) GetPluralProfessorsWithMemberCalls() []struct {
	Ctx          context.Context
	ProfessorIDs []uuid.UUID
	Order        parameter.ProfessorOrderMethod
	Np           NumberedPaginationParam
} {
	var calls []struct {
		Ctx          context.Context
		ProfessorIDs []uuid.UUID
		Order        parameter.ProfessorOrderMethod
		Np           NumberedPaginationParam
	}
	mock.lockGetPluralProfessorsWithMember.RLock()
	calls = mock.calls.GetPluralProfessorsWithMember
	mock.lockGetPluralProfessorsWithMember.RUnlock()
	return calls
}

// GetPluralProfessorsWithMemberWithSd calls GetPluralProfessorsWithMemberWithSdFunc.
func (mock *StoreMock) GetPluralProfessorsWithMemberWithSd(ctx context.Context, sd Sd, professorIDs []uuid.UUID, order parameter.ProfessorOrderMethod, np NumberedPaginationParam) (ListResult[entity.ProfessorWithMember], error) {
	if mock.GetPluralProfessorsWithMemberWithSdFunc == nil {
		panic("StoreMock.GetPluralProfessorsWithMemberWithSdFunc: method is nil but Store.GetPluralProfessorsWithMemberWithSd was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		Sd           Sd
		ProfessorIDs []uuid.UUID
		Order        parameter.ProfessorOrderMethod
		Np           NumberedPaginationParam
	}{
		Ctx:          ctx,
		Sd:           sd,
		ProfessorIDs: professorIDs,
		Order:        order,
		Np:           np,
	}
	mock.lockGetPluralProfessorsWithMemberWithSd.Lock()
	mock.calls.GetPluralProfessorsWithMemberWithSd = append(mock.calls.GetPluralProfessorsWithMemberWithSd, callInfo)
	mock.lockGetPluralProfessorsWithMemberWithSd.Unlock()
	return mock.GetPluralProfessorsWithMemberWithSdFunc(ctx, sd, professorIDs, order, np)
}

// GetPluralProfessorsWithMemberWithSdCalls gets all the calls that were made to GetPluralProfessorsWithMemberWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralProfessorsWithMemberWithSdCalls())
func (mock *StoreMock) GetPluralProfessorsWithMemberWithSdCalls() []struct {
	Ctx          context.Context
	Sd           Sd
	ProfessorIDs []uuid.UUID
	Order        parameter.ProfessorOrderMethod
	Np           NumberedPaginationParam
} {
	var calls []struct {
		Ctx          context.Context
		Sd           Sd
		ProfessorIDs []uuid.UUID
		Order        parameter.ProfessorOrderMethod
		Np           NumberedPaginationParam
	}
	mock.lockGetPluralProfessorsWithMemberWithSd.RLock()
	calls = mock.calls.GetPluralProfessorsWithMemberWithSd
	mock.lockGetPluralProfessorsWithMemberWithSd.RUnlock()
	return calls
}

// GetPluralProfessorsWithSd calls GetPluralProfessorsWithSdFunc.
func (mock *StoreMock) GetPluralProfessorsWithSd(ctx context.Context, sd Sd, professorIDs []uuid.UUID, order parameter.ProfessorOrderMethod, np NumberedPaginationParam) (ListResult[entity.Professor], error) {
	if mock.GetPluralProfessorsWithSdFunc == nil {
		panic("StoreMock.GetPluralProfessorsWithSdFunc: method is nil but Store.GetPluralProfessorsWithSd was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		Sd           Sd
		ProfessorIDs []uuid.UUID
		Order        parameter.ProfessorOrderMethod
		Np           NumberedPaginationParam
	}{
		Ctx:          ctx,
		Sd:           sd,
		ProfessorIDs: professorIDs,
		Order:        order,
		Np:           np,
	}
	mock.lockGetPluralProfessorsWithSd.Lock()
	mock.calls.GetPluralProfessorsWithSd = append(mock.calls.GetPluralProfessorsWithSd, callInfo)
	mock.lockGetPluralProfessorsWithSd.Unlock()
	return mock.GetPluralProfessorsWithSdFunc(ctx, sd, professorIDs, order, np)
}

// GetPluralProfessorsWithSdCalls gets all the calls that were made to GetPluralProfessorsWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralProfessorsWithSdCalls())
func (mock *StoreMock) GetPluralProfessorsWithSdCalls() []struct {
	Ctx          context.Context
	Sd           Sd
	ProfessorIDs []uuid.UUID
	Order        parameter.ProfessorOrderMethod
	Np           NumberedPaginationParam
} {
	var calls []struct {
		Ctx          context.Context
		Sd           Sd
		ProfessorIDs []uuid.UUID
		Order        parameter.ProfessorOrderMethod
		Np           NumberedPaginationParam
	}
	mock.lockGetPluralProfessorsWithSd.RLock()
	calls = mock.calls.GetPluralProfessorsWithSd
	mock.lockGetPluralProfessorsWithSd.RUnlock()
	return calls
}

// GetPluralReadableMembersOnMessage calls GetPluralReadableMembersOnMessageFunc.
func (mock *StoreMock) GetPluralReadableMembersOnMessage(ctx context.Context, messageIDs []uuid.UUID, np NumberedPaginationParam, order parameter.ReadableMemberOnMessageOrderMethod) (ListResult[entity.ReadableMemberOnMessage], error) {
	if mock.GetPluralReadableMembersOnMessageFunc == nil {
		panic("StoreMock.GetPluralReadableMembersOnMessageFunc: method is nil but Store.GetPluralReadableMembersOnMessage was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		MessageIDs []uuid.UUID
		Np         NumberedPaginationParam
		Order      parameter.ReadableMemberOnMessageOrderMethod
	}{
		Ctx:        ctx,
		MessageIDs: messageIDs,
		Np:         np,
		Order:      order,
	}
	mock.lockGetPluralReadableMembersOnMessage.Lock()
	mock.calls.GetPluralReadableMembersOnMessage = append(mock.calls.GetPluralReadableMembersOnMessage, callInfo)
	mock.lockGetPluralReadableMembersOnMessage.Unlock()
	return mock.GetPluralReadableMembersOnMessageFunc(ctx, messageIDs, np, order)
}

// GetPluralReadableMembersOnMessageCalls gets all the calls that were made to GetPluralReadableMembersOnMessage.
// Check the length with:
//
//	len(mockedStore.GetPluralReadableMembersOnMessageCalls())
func (mock *StoreMock) GetPluralReadableMembersOnMessageCalls() []struct {
	Ctx        context.Context
	MessageIDs []uuid.UUID
	Np         NumberedPaginationParam
	Order      parameter.ReadableMemberOnMessageOrderMethod
} {
	var calls []struct {
		Ctx        context.Context
		MessageIDs []uuid.UUID
		Np         NumberedPaginationParam
		Order      parameter.ReadableMemberOnMessageOrderMethod
	}
	mock.lockGetPluralReadableMembersOnMessage.RLock()
	calls = mock.calls.GetPluralReadableMembersOnMessage
	mock.lockGetPluralReadableMembersOnMessage.RUnlock()
	return calls
}

// GetPluralReadableMembersOnMessageWithSd calls GetPluralReadableMembersOnMessageWithSdFunc.
func (mock *StoreMock) GetPluralReadableMembersOnMessageWithSd(ctx context.Context, sd Sd, messageIDs []uuid.UUID, np NumberedPaginationParam, order parameter.ReadableMemberOnMessageOrderMethod) (ListResult[entity.ReadableMemberOnMessage], error) {
	if mock.GetPluralReadableMembersOnMessageWithSdFunc == nil {
		panic("StoreMock.GetPluralReadableMembersOnMessageWithSdFunc: method is nil but Store.GetPluralReadableMembersOnMessageWithSd was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Sd         Sd
		MessageIDs []uuid.UUID
		Np         NumberedPaginationParam
		Order      parameter.ReadableMemberOnMessageOrderMethod
	}{
		Ctx:        ctx,
		Sd:         sd,
		MessageIDs: messageIDs,
		Np:         np,
		Order:      order,
	}
	mock.lockGetPluralReadableMembersOnMessageWithSd.Lock()
	mock.calls.GetPluralReadableMembersOnMessageWithSd = append(mock.calls.GetPluralReadableMembersOnMessageWithSd, callInfo)
	mock.lockGetPluralReadableMembersOnMessageWithSd.Unlock()
	return mock.GetPluralReadableMembersOnMessageWithSdFunc(ctx, sd, messageIDs, np, order)
}

// GetPluralReadableMembersOnMessageWithSdCalls gets all the calls that were made to GetPluralReadableMembersOnMessageWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralReadableMembersOnMessageWithSdCalls())
func (mock *StoreMock) GetPluralReadableMembersOnMessageWithSdCalls() []struct {
	Ctx        context.Context
	Sd         Sd
	MessageIDs []uuid.UUID
	Np         NumberedPaginationParam
	Order      parameter.ReadableMemberOnMessageOrderMethod
} {
	var calls []struct {
		Ctx        context.Context
		Sd         Sd
		MessageIDs []uuid.UUID
		Np         NumberedPaginationParam
		Order      parameter.ReadableMemberOnMessageOrderMethod
	}
	mock.lockGetPluralReadableMembersOnMessageWithSd.RLock()
	calls = mock.calls.GetPluralReadableMembersOnMessageWithSd
	mock.lockGetPluralReadableMembersOnMessageWithSd.RUnlock()
	return calls
}

// GetPluralReadableMessagesOnMember calls GetPluralReadableMessagesOnMemberFunc.
func (mock *StoreMock) GetPluralReadableMessagesOnMember(ctx context.Context, memberIDs []uuid.UUID, np NumberedPaginationParam, order parameter.ReadableMessageOnMemberOrderMethod) (ListResult[entity.ReadableMessageOnMember], error) {
	if mock.GetPluralReadableMessagesOnMemberFunc == nil {
		panic("StoreMock.GetPluralReadableMessagesOnMemberFunc: method is nil but Store.GetPluralReadableMessagesOnMember was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		MemberIDs []uuid.UUID
		Np        NumberedPaginationParam
		Order     parameter.ReadableMessageOnMemberOrderMethod
	}{
		Ctx:       ctx,
		MemberIDs: memberIDs,
		Np:        np,
		Order:     order,
	}
	mock.lockGetPluralReadableMessagesOnMember.Lock()
	mock.calls.GetPluralReadableMessagesOnMember = append(mock.calls.GetPluralReadableMessagesOnMember, callInfo)
	mock.lockGetPluralReadableMessagesOnMember.Unlock()
	return mock.GetPluralReadableMessagesOnMemberFunc(ctx, memberIDs, np, order)
}

// GetPluralReadableMessagesOnMemberCalls gets all the calls that were made to GetPluralReadableMessagesOnMember.
// Check the length with:
//
//	len(mockedStore.GetPluralReadableMessagesOnMemberCalls())
func (mock *StoreMock) GetPluralReadableMessagesOnMemberCalls() []struct {
	Ctx       context.Context
	MemberIDs []uuid.UUID
	Np        NumberedPaginationParam
	Order     parameter.ReadableMessageOnMemberOrderMethod
} {
	var calls []struct {
		Ctx       context.Context
		MemberIDs []uuid.UUID
		Np        NumberedPaginationParam
		Order     parameter.ReadableMessageOnMemberOrderMethod
	}
	mock.lockGetPluralReadableMessagesOnMember.RLock()
	calls = mock.calls.GetPluralReadableMessagesOnMember
	mock.lockGetPluralReadableMessagesOnMember.RUnlock()
	return calls
}

// GetPluralReadableMessagesOnMemberWithSd calls GetPluralReadableMessagesOnMemberWithSdFunc.
func (mock *StoreMock) GetPluralReadableMessagesOnMemberWithSd(ctx context.Context, sd Sd, memberIDs []uuid.UUID, np NumberedPaginationParam, order parameter.ReadableMessageOnMemberOrderMethod) (ListResult[entity.ReadableMessageOnMember], error) {
	if mock.GetPluralReadableMessagesOnMemberWithSdFunc == nil {
		panic("StoreMock.GetPluralReadableMessagesOnMemberWithSdFunc: method is nil but Store.GetPluralReadableMessagesOnMemberWithSd was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Sd        Sd
		MemberIDs []uuid.UUID
		Np        NumberedPaginationParam
		Order     parameter.ReadableMessageOnMemberOrderMethod
	}{
		Ctx:       ctx,
		Sd:        sd,
		MemberIDs: memberIDs,
		Np:        np,
		Order:     order,
	}
	mock.lockGetPluralReadableMessagesOnMemberWithSd.Lock()
	mock.calls.GetPluralReadableMessagesOnMemberWithSd = append(mock.calls.GetPluralReadableMessagesOnMemberWithSd, callInfo)
	mock.lockGetPluralReadableMessagesOnMemberWithSd.Unlock()
	return mock.GetPluralReadableMessagesOnMemberWithSdFunc(ctx, sd, memberIDs, np, order)
}

// GetPluralReadableMessagesOnMemberWithSdCalls gets all the calls that were made to GetPluralReadableMessagesOnMemberWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralReadableMessagesOnMemberWithSdCalls())
func (mock *StoreMock) GetPluralReadableMessagesOnMemberWithSdCalls() []struct {
	Ctx       context.Context
	Sd        Sd
	MemberIDs []uuid.UUID
	Np        NumberedPaginationParam
	Order     parameter.ReadableMessageOnMemberOrderMethod
} {
	var calls []struct {
		Ctx       context.Context
		Sd        Sd
		MemberIDs []uuid.UUID
		Np        NumberedPaginationParam
		Order     parameter.ReadableMessageOnMemberOrderMethod
	}
	mock.lockGetPluralReadableMessagesOnMemberWithSd.RLock()
	calls = mock.calls.GetPluralReadableMessagesOnMemberWithSd
	mock.lockGetPluralReadableMessagesOnMemberWithSd.RUnlock()
	return calls
}

// GetPluralRecordTypes calls GetPluralRecordTypesFunc.
func (mock *StoreMock) GetPluralRecordTypes(ctx context.Context, recordTypeIDs []uuid.UUID, order parameter.RecordTypeOrderMethod, np NumberedPaginationParam) (ListResult[entity.RecordType], error) {
	if mock.GetPluralRecordTypesFunc == nil {
		panic("StoreMock.GetPluralRecordTypesFunc: method is nil but Store.GetPluralRecordTypes was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		RecordTypeIDs []uuid.UUID
		Order         parameter.RecordTypeOrderMethod
		Np            NumberedPaginationParam
	}{
		Ctx:           ctx,
		RecordTypeIDs: recordTypeIDs,
		Order:         order,
		Np:            np,
	}
	mock.lockGetPluralRecordTypes.Lock()
	mock.calls.GetPluralRecordTypes = append(mock.calls.GetPluralRecordTypes, callInfo)
	mock.lockGetPluralRecordTypes.Unlock()
	return mock.GetPluralRecordTypesFunc(ctx, recordTypeIDs, order, np)
}

// GetPluralRecordTypesCalls gets all the calls that were made to GetPluralRecordTypes.
// Check the length with:
//
//	len(mockedStore.GetPluralRecordTypesCalls())
func (mock *StoreMock) GetPluralRecordTypesCalls() []struct {
	Ctx           context.Context
	RecordTypeIDs []uuid.UUID
	Order         parameter.RecordTypeOrderMethod
	Np            NumberedPaginationParam
} {
	var calls []struct {
		Ctx           context.Context
		RecordTypeIDs []uuid.UUID
		Order         parameter.RecordTypeOrderMethod
		Np            NumberedPaginationParam
	}
	mock.lockGetPluralRecordTypes.RLock()
	calls = mock.calls.GetPluralRecordTypes
	mock.lockGetPluralRecordTypes.RUnlock()
	return calls
}

// GetPluralRecordTypesWithSd calls GetPluralRecordTypesWithSdFunc.
func (mock *StoreMock) GetPluralRecordTypesWithSd(ctx context.Context, sd Sd, recordTypeIDs []uuid.UUID, order parameter.RecordTypeOrderMethod, np NumberedPaginationParam) (ListResult[entity.RecordType], error) {
	if mock.GetPluralRecordTypesWithSdFunc == nil {
		panic("StoreMock.GetPluralRecordTypesWithSdFunc: method is nil but Store.GetPluralRecordTypesWithSd was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		Sd            Sd
		RecordTypeIDs []uuid.UUID
		Order         parameter.RecordTypeOrderMethod
		Np            NumberedPaginationParam
	}{
		Ctx:           ctx,
		Sd:            sd,
		RecordTypeIDs: recordTypeIDs,
		Order:         order,
		Np:            np,
	}
	mock.lockGetPluralRecordTypesWithSd.Lock()
	mock.calls.GetPluralRecordTypesWithSd = append(mock.calls.GetPluralRecordTypesWithSd, callInfo)
	mock.lockGetPluralRecordTypesWithSd.Unlock()
	return mock.GetPluralRecordTypesWithSdFunc(ctx, sd, recordTypeIDs, order, np)
}

// GetPluralRecordTypesWithSdCalls gets all the calls that were made to GetPluralRecordTypesWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralRecordTypesWithSdCalls())
func (mock *StoreMock) GetPluralRecordTypesWithSdCalls() []struct {
	Ctx           context.Context
	Sd            Sd
	RecordTypeIDs []uuid.UUID
	Order         parameter.RecordTypeOrderMethod
	Np            NumberedPaginationParam
} {
	var calls []struct {
		Ctx           context.Context
		Sd            Sd
		RecordTypeIDs []uuid.UUID
		Order         parameter.RecordTypeOrderMethod
		Np            NumberedPaginationParam
	}
	mock.lockGetPluralRecordTypesWithSd.RLock()
	calls = mock.calls.GetPluralRecordTypesWithSd
	mock.lockGetPluralRecordTypesWithSd.RUnlock()
	return calls
}

// GetPluralRoles calls GetPluralRolesFunc.
func (mock *StoreMock) GetPluralRoles(ctx context.Context, roleIDs []uuid.UUID, order parameter.RoleOrderMethod, np NumberedPaginationParam) (ListResult[entity.Role], error) {
	if mock.GetPluralRolesFunc == nil {
		panic("StoreMock.GetPluralRolesFunc: method is nil but Store.GetPluralRoles was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		RoleIDs []uuid.UUID
		Order   parameter.RoleOrderMethod
		Np      NumberedPaginationParam
	}{
		Ctx:     ctx,
		RoleIDs: roleIDs,
		Order:   order,
		Np:      np,
	}
	mock.lockGetPluralRoles.Lock()
	mock.calls.GetPluralRoles = append(mock.calls.GetPluralRoles, callInfo)
	mock.lockGetPluralRoles.Unlock()
	return mock.GetPluralRolesFunc(ctx, roleIDs, order, np)
}

// GetPluralRolesCalls gets all the calls that were made to GetPluralRoles.
// Check the length with:
//
//	len(mockedStore.GetPluralRolesCalls())
func (mock *StoreMock) GetPluralRolesCalls() []struct {
	Ctx     context.Context
	RoleIDs []uuid.UUID
	Order   parameter.RoleOrderMethod
	Np      NumberedPaginationParam
} {
	var calls []struct {
		Ctx     context.Context
		RoleIDs []uuid.UUID
		Order   parameter.RoleOrderMethod
		Np      NumberedPaginationParam
	}
	mock.lockGetPluralRoles.RLock()
	calls = mock.calls.GetPluralRoles
	mock.lockGetPluralRoles.RUnlock()
	return calls
}

// GetPluralRolesWithSd calls GetPluralRolesWithSdFunc.
func (mock *StoreMock) GetPluralRolesWithSd(ctx context.Context, sd Sd, roleIDs []uuid.UUID, order parameter.RoleOrderMethod, np NumberedPaginationParam) (ListResult[entity.Role], error) {
	if mock.GetPluralRolesWithSdFunc == nil {
		panic("StoreMock.GetPluralRolesWithSdFunc: method is nil but Store.GetPluralRolesWithSd was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Sd      Sd
		RoleIDs []uuid.UUID
		Order   parameter.RoleOrderMethod
		Np      NumberedPaginationParam
	}{
		Ctx:     ctx,
		Sd:      sd,
		RoleIDs: roleIDs,
		Order:   order,
		Np:      np,
	}
	mock.lockGetPluralRolesWithSd.Lock()
	mock.calls.GetPluralRolesWithSd = append(mock.calls.GetPluralRolesWithSd, callInfo)
	mock.lockGetPluralRolesWithSd.Unlock()
	return mock.GetPluralRolesWithSdFunc(ctx, sd, roleIDs, order, np)
}

// GetPluralRolesWithSdCalls gets all the calls that were made to GetPluralRolesWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralRolesWithSdCalls())
func (mock *StoreMock) GetPluralRolesWithSdCalls() []struct {
	Ctx     context.Context
	Sd      Sd
	RoleIDs []uuid.UUID
	Order   parameter.RoleOrderMethod
	Np      NumberedPaginationParam
} {
	var calls []struct {
		Ctx     context.Context
		Sd      Sd
		RoleIDs []uuid.UUID
		Order   parameter.RoleOrderMethod
		Np      NumberedPaginationParam
	}
	mock.lockGetPluralRolesWithSd.RLock()
	calls = mock.calls.GetPluralRolesWithSd
	mock.lockGetPluralRolesWithSd.RUnlock()
	return calls
}

// GetPluralStudents calls GetPluralStudentsFunc.
func (mock *StoreMock) GetPluralStudents(ctx context.Context, studentIDs []uuid.UUID, order parameter.StudentOrderMethod, np NumberedPaginationParam) (ListResult[entity.Student], error) {
	if mock.GetPluralStudentsFunc == nil {
		panic("StoreMock.GetPluralStudentsFunc: method is nil but Store.GetPluralStudents was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		StudentIDs []uuid.UUID
		Order      parameter.StudentOrderMethod
		Np         NumberedPaginationParam
	}{
		Ctx:        ctx,
		StudentIDs: studentIDs,
		Order:      order,
		Np:         np,
	}
	mock.lockGetPluralStudents.Lock()
	mock.calls.GetPluralStudents = append(mock.calls.GetPluralStudents, callInfo)
	mock.lockGetPluralStudents.Unlock()
	return mock.GetPluralStudentsFunc(ctx, studentIDs, order, np)
}

// GetPluralStudentsCalls gets all the calls that were made to GetPluralStudents.
// Check the length with:
//
//	len(mockedStore.GetPluralStudentsCalls())
func (mock *StoreMock) GetPluralStudentsCalls() []struct {
	Ctx        context.Context
	StudentIDs []uuid.UUID
	Order      parameter.StudentOrderMethod
	Np         NumberedPaginationParam
} {
	var calls []struct {
		Ctx        context.Context
		StudentIDs []uuid.UUID
		Order      parameter.StudentOrderMethod
		Np         NumberedPaginationParam
	}
	mock.lockGetPluralStudents.RLock()
	calls = mock.calls.GetPluralStudents
	mock.lockGetPluralStudents.RUnlock()
	return calls
}

// GetPluralStudentsWithMember calls GetPluralStudentsWithMemberFunc.
func (mock *StoreMock) GetPluralStudentsWithMember(ctx context.Context, studentIDs []uuid.UUID, order parameter.StudentOrderMethod, np NumberedPaginationParam) (ListResult[entity.StudentWithMember], error) {
	if mock.GetPluralStudentsWithMemberFunc == nil {
		panic("StoreMock.GetPluralStudentsWithMemberFunc: method is nil but Store.GetPluralStudentsWithMember was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		StudentIDs []uuid.UUID
		Order      parameter.StudentOrderMethod
		Np         NumberedPaginationParam
	}{
		Ctx:        ctx,
		StudentIDs: studentIDs,
		Order:      order,
		Np:         np,
	}
	mock.lockGetPluralStudentsWithMember.Lock()
	mock.calls.GetPluralStudentsWithMember = append(mock.calls.GetPluralStudentsWithMember, callInfo)
	mock.lockGetPluralStudentsWithMember.Unlock()
	return mock.GetPluralStudentsWithMemberFunc(ctx, studentIDs, order, np)
}

// GetPluralStudentsWithMemberCalls gets all the calls that were made to GetPluralStudentsWithMember.
// Check the length with:
//
//	len(mockedStore.GetPluralStudentsWithMemberCalls())
func (mock *StoreMock) GetPluralStudentsWithMemberCalls() []struct {
	Ctx        context.Context
	StudentIDs []uuid.UUID
	Order      parameter.StudentOrderMethod
	Np         NumberedPaginationParam
} {
	var calls []struct {
		Ctx        context.Context
		StudentIDs []uuid.UUID
		Order      parameter.StudentOrderMethod
		Np         NumberedPaginationParam
	}
	mock.lockGetPluralStudentsWithMember.RLock()
	calls = mock.calls.GetPluralStudentsWithMember
	mock.lockGetPluralStudentsWithMember.RUnlock()
	return calls
}

// GetPluralStudentsWithMemberWithSd calls GetPluralStudentsWithMemberWithSdFunc.
func (mock *StoreMock) GetPluralStudentsWithMemberWithSd(ctx context.Context, sd Sd, studentIDs []uuid.UUID, order parameter.StudentOrderMethod, np NumberedPaginationParam) (ListResult[entity.StudentWithMember], error) {
	if mock.GetPluralStudentsWithMemberWithSdFunc == nil {
		panic("StoreMock.GetPluralStudentsWithMemberWithSdFunc: method is nil but Store.GetPluralStudentsWithMemberWithSd was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Sd         Sd
		StudentIDs []uuid.UUID
		Order      parameter.StudentOrderMethod
		Np         NumberedPaginationParam
	}{
		Ctx:        ctx,
		Sd:         sd,
		StudentIDs: studentIDs,
		Order:      order,
		Np:         np,
	}
	mock.lockGetPluralStudentsWithMemberWithSd.Lock()
	mock.calls.GetPluralStudentsWithMemberWithSd = append(mock.calls.GetPluralStudentsWithMemberWithSd, callInfo)
	mock.lockGetPluralStudentsWithMemberWithSd.Unlock()
	return mock.GetPluralStudentsWithMemberWithSdFunc(ctx, sd, studentIDs, order, np)
}

// GetPluralStudentsWithMemberWithSdCalls gets all the calls that were made to GetPluralStudentsWithMemberWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralStudentsWithMemberWithSdCalls())
func (mock *StoreMock) GetPluralStudentsWithMemberWithSdCalls() []struct {
	Ctx        context.Context
	Sd         Sd
	StudentIDs []uuid.UUID
	Order      parameter.StudentOrderMethod
	Np         NumberedPaginationParam
} {
	var calls []struct {
		Ctx        context.Context
		Sd         Sd
		StudentIDs []uuid.UUID
		Order      parameter.StudentOrderMethod
		Np         NumberedPaginationParam
	}
	mock.lockGetPluralStudentsWithMemberWithSd.RLock()
	calls = mock.calls.GetPluralStudentsWithMemberWithSd
	mock.lockGetPluralStudentsWithMemberWithSd.RUnlock()
	return calls
}

// GetPluralStudentsWithSd calls GetPluralStudentsWithSdFunc.
func (mock *StoreMock) GetPluralStudentsWithSd(ctx context.Context, sd Sd, studentIDs []uuid.UUID, order parameter.StudentOrderMethod, np NumberedPaginationParam) (ListResult[entity.Student], error) {
	if mock.GetPluralStudentsWithSdFunc == nil {
		panic("StoreMock.GetPluralStudentsWithSdFunc: method is nil but Store.GetPluralStudentsWithSd was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Sd         Sd
		StudentIDs []uuid.UUID
		Order      parameter.StudentOrderMethod
		Np         NumberedPaginationParam
	}{
		Ctx:        ctx,
		Sd:         sd,
		StudentIDs: studentIDs,
		Order:      order,
		Np:         np,
	}
	mock.lockGetPluralStudentsWithSd.Lock()
	mock.calls.GetPluralStudentsWithSd = append(mock.calls.GetPluralStudentsWithSd, callInfo)
	mock.lockGetPluralStudentsWithSd.Unlock()
	return mock.GetPluralStudentsWithSdFunc(ctx, sd, studentIDs, order, np)
}

// GetPluralStudentsWithSdCalls gets all the calls that were made to GetPluralStudentsWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralStudentsWithSdCalls())
func (mock *StoreMock) GetPluralStudentsWithSdCalls() []struct {
	Ctx        context.Context
	Sd         Sd
	StudentIDs []uuid.UUID
	Order      parameter.StudentOrderMethod
	Np         NumberedPaginationParam
} {
	var calls []struct {
		Ctx        context.Context
		Sd         Sd
		StudentIDs []uuid.UUID
		Order      parameter.StudentOrderMethod
		Np         NumberedPaginationParam
	}
	mock.lockGetPluralStudentsWithSd.RLock()
	calls = mock.calls.GetPluralStudentsWithSd
	mock.lockGetPluralStudentsWithSd.RUnlock()
	return calls
}

// GetPolicies calls GetPoliciesFunc.
func (mock *StoreMock) GetPolicies(ctx context.Context, where parameter.WherePolicyParam, order parameter.PolicyOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Policy], error) {
	if mock.GetPoliciesFunc == nil {
		panic("StoreMock.GetPoliciesFunc: method is nil but Store.GetPolicies was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WherePolicyParam
		Order parameter.PolicyOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetPolicies.Lock()
	mock.calls.GetPolicies = append(mock.calls.GetPolicies, callInfo)
	mock.lockGetPolicies.Unlock()
	return mock.GetPoliciesFunc(ctx, where, order, np, cp, wc)
}

// GetPoliciesCalls gets all the calls that were made to GetPolicies.
// Check the length with:
//
//	len(mockedStore.GetPoliciesCalls())
func (mock *StoreMock) GetPoliciesCalls() []struct {
	Ctx   context.Context
	Where parameter.WherePolicyParam
	Order parameter.PolicyOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WherePolicyParam
		Order parameter.PolicyOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetPolicies.RLock()
	calls = mock.calls.GetPolicies
	mock.lockGetPolicies.RUnlock()
	return calls
}

// GetPoliciesOnRole calls GetPoliciesOnRoleFunc.
func (mock *StoreMock) GetPoliciesOnRole(ctx context.Context, roleID uuid.UUID, where parameter.WherePolicyOnRoleParam, order parameter.PolicyOnRoleOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.PolicyOnRole], error) {
	if mock.GetPoliciesOnRoleFunc == nil {
		panic("StoreMock.GetPoliciesOnRoleFunc: method is nil but Store.GetPoliciesOnRole was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		RoleID uuid.UUID
		Where  parameter.WherePolicyOnRoleParam
		Order  parameter.PolicyOnRoleOrderMethod
		Np     NumberedPaginationParam
		Cp     CursorPaginationParam
		Wc     WithCountParam
	}{
		Ctx:    ctx,
		RoleID: roleID,
		Where:  where,
		Order:  order,
		Np:     np,
		Cp:     cp,
		Wc:     wc,
	}
	mock.lockGetPoliciesOnRole.Lock()
	mock.calls.GetPoliciesOnRole = append(mock.calls.GetPoliciesOnRole, callInfo)
	mock.lockGetPoliciesOnRole.Unlock()
	return mock.GetPoliciesOnRoleFunc(ctx, roleID, where, order, np, cp, wc)
}

// GetPoliciesOnRoleCalls gets all the calls that were made to GetPoliciesOnRole.
// Check the length with:
//
//	len(mockedStore.GetPoliciesOnRoleCalls())
func (mock *StoreMock) GetPoliciesOnRoleCalls() []struct {
	Ctx    context.Context
	RoleID uuid.UUID
	Where  parameter.WherePolicyOnRoleParam
	Order  parameter.PolicyOnRoleOrderMethod
	Np     NumberedPaginationParam
	Cp     CursorPaginationParam
	Wc     WithCountParam
} {
	var calls []struct {
		Ctx    context.Context
		RoleID uuid.UUID
		Where  parameter.WherePolicyOnRoleParam
		Order  parameter.PolicyOnRoleOrderMethod
		Np     NumberedPaginationParam
		Cp     CursorPaginationParam
		Wc     WithCountParam
	}
	mock.lockGetPoliciesOnRole.RLock()
	calls = mock.calls.GetPoliciesOnRole
	mock.lockGetPoliciesOnRole.RUnlock()
	return calls
}

// GetPoliciesOnRoleWithSd calls GetPoliciesOnRoleWithSdFunc.
func (mock *StoreMock) GetPoliciesOnRoleWithSd(ctx context.Context, sd Sd, roleID uuid.UUID, where parameter.WherePolicyOnRoleParam, order parameter.PolicyOnRoleOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.PolicyOnRole], error) {
	if mock.GetPoliciesOnRoleWithSdFunc == nil {
		panic("StoreMock.GetPoliciesOnRoleWithSdFunc: method is nil but Store.GetPoliciesOnRoleWithSd was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Sd     Sd
		RoleID uuid.UUID
		Where  parameter.WherePolicyOnRoleParam
		Order  parameter.PolicyOnRoleOrderMethod
		Np     NumberedPaginationParam
		Cp     CursorPaginationParam
		Wc     WithCountParam
	}{
		Ctx:    ctx,
		Sd:     sd,
		RoleID: roleID,
		Where:  where,
		Order:  order,
		Np:     np,
		Cp:     cp,
		Wc:     wc,
	}
	mock.lockGetPoliciesOnRoleWithSd.Lock()
	mock.calls.GetPoliciesOnRoleWithSd = append(mock.calls.GetPoliciesOnRoleWithSd, callInfo)
	mock.lockGetPoliciesOnRoleWithSd.Unlock()
	return mock.GetPoliciesOnRoleWithSdFunc(ctx, sd, roleID, where, order, np, cp, wc)
}

// GetPoliciesOnRoleWithSdCalls gets all the calls that were made to GetPoliciesOnRoleWithSd.
// Check the length with:
//
//	len(mockedStore.GetPoliciesOnRoleWithSdCalls())
func (mock *StoreMock) GetPoliciesOnRoleWithSdCalls() []struct {
	Ctx    context.Context
	Sd     Sd
	RoleID uuid.UUID
	Where  parameter.WherePolicyOnRoleParam
	Order  parameter.PolicyOnRoleOrderMethod
	Np     NumberedPaginationParam
	Cp     CursorPaginationParam
	Wc     WithCountParam
} {
	var calls []struct {
		Ctx    context.Context
		Sd     Sd
		RoleID uuid.UUID
		Where  parameter.WherePolicyOnRoleParam
		Order  parameter.PolicyOnRoleOrderMethod
		Np     NumberedPaginationParam
		Cp     CursorPaginationParam
		Wc     WithCountParam
	}
	mock.lockGetPoliciesOnRoleWithSd.RLock()
	calls = mock.calls.GetPoliciesOnRoleWithSd
	mock.lockGetPoliciesOnRoleWithSd.RUnlock()
	return calls
}

// GetPoliciesWithCategory calls GetPoliciesWithCategoryFunc.
func (mock *StoreMock) GetPoliciesWithCategory(ctx context.Context, where parameter.WherePolicyParam, order parameter.PolicyOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.PolicyWithCategory], error) {
	if mock.GetPoliciesWithCategoryFunc == nil {
		panic("StoreMock.GetPoliciesWithCategoryFunc: method is nil but Store.GetPoliciesWithCategory was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WherePolicyParam
		Order parameter.PolicyOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetPoliciesWithCategory.Lock()
	mock.calls.GetPoliciesWithCategory = append(mock.calls.GetPoliciesWithCategory, callInfo)
	mock.lockGetPoliciesWithCategory.Unlock()
	return mock.GetPoliciesWithCategoryFunc(ctx, where, order, np, cp, wc)
}

// GetPoliciesWithCategoryCalls gets all the calls that were made to GetPoliciesWithCategory.
// Check the length with:
//
//	len(mockedStore.GetPoliciesWithCategoryCalls())
func (mock *StoreMock) GetPoliciesWithCategoryCalls() []struct {
	Ctx   context.Context
	Where parameter.WherePolicyParam
	Order parameter.PolicyOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WherePolicyParam
		Order parameter.PolicyOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetPoliciesWithCategory.RLock()
	calls = mock.calls.GetPoliciesWithCategory
	mock.lockGetPoliciesWithCategory.RUnlock()
	return calls
}

// GetPoliciesWithCategoryWithSd calls GetPoliciesWithCategoryWithSdFunc.
func (mock *StoreMock) GetPoliciesWithCategoryWithSd(ctx context.Context, sd Sd, where parameter.WherePolicyParam, order parameter.PolicyOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.PolicyWithCategory], error) {
	if mock.GetPoliciesWithCategoryWithSdFunc == nil {
		panic("StoreMock.GetPoliciesWithCategoryWithSdFunc: method is nil but Store.GetPoliciesWithCategoryWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WherePolicyParam
		Order parameter.PolicyOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetPoliciesWithCategoryWithSd.Lock()
	mock.calls.GetPoliciesWithCategoryWithSd = append(mock.calls.GetPoliciesWithCategoryWithSd, callInfo)
	mock.lockGetPoliciesWithCategoryWithSd.Unlock()
	return mock.GetPoliciesWithCategoryWithSdFunc(ctx, sd, where, order, np, cp, wc)
}

// GetPoliciesWithCategoryWithSdCalls gets all the calls that were made to GetPoliciesWithCategoryWithSd.
// Check the length with:
//
//	len(mockedStore.GetPoliciesWithCategoryWithSdCalls())
func (mock *StoreMock) GetPoliciesWithCategoryWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WherePolicyParam
	Order parameter.PolicyOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WherePolicyParam
		Order parameter.PolicyOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetPoliciesWithCategoryWithSd.RLock()
	calls = mock.calls.GetPoliciesWithCategoryWithSd
	mock.lockGetPoliciesWithCategoryWithSd.RUnlock()
	return calls
}

// GetPoliciesWithSd calls GetPoliciesWithSdFunc.
func (mock *StoreMock) GetPoliciesWithSd(ctx context.Context, sd Sd, where parameter.WherePolicyParam, order parameter.PolicyOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Policy], error) {
	if mock.GetPoliciesWithSdFunc == nil {
		panic("StoreMock.GetPoliciesWithSdFunc: method is nil but Store.GetPoliciesWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WherePolicyParam
		Order parameter.PolicyOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetPoliciesWithSd.Lock()
	mock.calls.GetPoliciesWithSd = append(mock.calls.GetPoliciesWithSd, callInfo)
	mock.lockGetPoliciesWithSd.Unlock()
	return mock.GetPoliciesWithSdFunc(ctx, sd, where, order, np, cp, wc)
}

// GetPoliciesWithSdCalls gets all the calls that were made to GetPoliciesWithSd.
// Check the length with:
//
//	len(mockedStore.GetPoliciesWithSdCalls())
func (mock *StoreMock) GetPoliciesWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WherePolicyParam
	Order parameter.PolicyOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WherePolicyParam
		Order parameter.PolicyOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetPoliciesWithSd.RLock()
	calls = mock.calls.GetPoliciesWithSd
	mock.lockGetPoliciesWithSd.RUnlock()
	return calls
}

// GetPolicyCategories calls GetPolicyCategoriesFunc.
func (mock *StoreMock) GetPolicyCategories(ctx context.Context, where parameter.WherePolicyCategoryParam, order parameter.PolicyCategoryOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.PolicyCategory], error) {
	if mock.GetPolicyCategoriesFunc == nil {
		panic("StoreMock.GetPolicyCategoriesFunc: method is nil but Store.GetPolicyCategories was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WherePolicyCategoryParam
		Order parameter.PolicyCategoryOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetPolicyCategories.Lock()
	mock.calls.GetPolicyCategories = append(mock.calls.GetPolicyCategories, callInfo)
	mock.lockGetPolicyCategories.Unlock()
	return mock.GetPolicyCategoriesFunc(ctx, where, order, np, cp, wc)
}

// GetPolicyCategoriesCalls gets all the calls that were made to GetPolicyCategories.
// Check the length with:
//
//	len(mockedStore.GetPolicyCategoriesCalls())
func (mock *StoreMock) GetPolicyCategoriesCalls() []struct {
	Ctx   context.Context
	Where parameter.WherePolicyCategoryParam
	Order parameter.PolicyCategoryOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WherePolicyCategoryParam
		Order parameter.PolicyCategoryOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetPolicyCategories.RLock()
	calls = mock.calls.GetPolicyCategories
	mock.lockGetPolicyCategories.RUnlock()
	return calls
}

// GetPolicyCategoriesWithSd calls GetPolicyCategoriesWithSdFunc.
func (mock *StoreMock) GetPolicyCategoriesWithSd(ctx context.Context, sd Sd, where parameter.WherePolicyCategoryParam, order parameter.PolicyCategoryOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.PolicyCategory], error) {
	if mock.GetPolicyCategoriesWithSdFunc == nil {
		panic("StoreMock.GetPolicyCategoriesWithSdFunc: method is nil but Store.GetPolicyCategoriesWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WherePolicyCategoryParam
		Order parameter.PolicyCategoryOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetPolicyCategoriesWithSd.Lock()
	mock.calls.GetPolicyCategoriesWithSd = append(mock.calls.GetPolicyCategoriesWithSd, callInfo)
	mock.lockGetPolicyCategoriesWithSd.Unlock()
	return mock.GetPolicyCategoriesWithSdFunc(ctx, sd, where, order, np, cp, wc)
}

// GetPolicyCategoriesWithSdCalls gets all the calls that were made to GetPolicyCategoriesWithSd.
// Check the length with:
//
//	len(mockedStore.GetPolicyCategoriesWithSdCalls())
func (mock *StoreMock) GetPolicyCategoriesWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WherePolicyCategoryParam
	Order parameter.PolicyCategoryOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WherePolicyCategoryParam
		Order parameter.PolicyCategoryOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetPolicyCategoriesWithSd.RLock()
	calls = mock.calls.GetPolicyCategoriesWithSd
	mock.lockGetPolicyCategoriesWithSd.RUnlock()
	return calls
}

// GetProfessors calls GetProfessorsFunc.
func (mock *StoreMock) GetProfessors(ctx context.Context, where parameter.WhereProfessorParam, order parameter.ProfessorOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Professor], error) {
	if mock.GetProfessorsFunc == nil {
		panic("StoreMock.GetProfessorsFunc: method is nil but Store.GetProfessors was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereProfessorParam
		Order parameter.ProfessorOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetProfessors.Lock()
	mock.calls.GetProfessors = append(mock.calls.GetProfessors, callInfo)
	mock.lockGetProfessors.Unlock()
	return mock.GetProfessorsFunc(ctx, where, order, np, cp, wc)
}

// GetProfessorsCalls gets all the calls that were made to GetProfessors.
// Check the length with:
//
//	len(mockedStore.GetProfessorsCalls())
func (mock *StoreMock) GetProfessorsCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereProfessorParam
	Order parameter.ProfessorOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereProfessorParam
		Order parameter.ProfessorOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetProfessors.RLock()
	calls = mock.calls.GetProfessors
	mock.lockGetProfessors.RUnlock()
	return calls
}

// GetProfessorsWithMember calls GetProfessorsWithMemberFunc.
func (mock *StoreMock) GetProfessorsWithMember(ctx context.Context, where parameter.WhereProfessorParam, order parameter.ProfessorOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ProfessorWithMember], error) {
	if mock.GetProfessorsWithMemberFunc == nil {
		panic("StoreMock.GetProfessorsWithMemberFunc: method is nil but Store.GetProfessorsWithMember was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereProfessorParam
		Order parameter.ProfessorOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetProfessorsWithMember.Lock()
	mock.calls.GetProfessorsWithMember = append(mock.calls.GetProfessorsWithMember, callInfo)
	mock.lockGetProfessorsWithMember.Unlock()
	return mock.GetProfessorsWithMemberFunc(ctx, where, order, np, cp, wc)
}

// GetProfessorsWithMemberCalls gets all the calls that were made to GetProfessorsWithMember.
// Check the length with:
//
//	len(mockedStore.GetProfessorsWithMemberCalls())
func (mock *StoreMock) GetProfessorsWithMemberCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereProfessorParam
	Order parameter.ProfessorOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereProfessorParam
		Order parameter.ProfessorOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetProfessorsWithMember.RLock()
	calls = mock.calls.GetProfessorsWithMember
	mock.lockGetProfessorsWithMember.RUnlock()
	return calls
}

// GetProfessorsWithMemberWithSd calls GetProfessorsWithMemberWithSdFunc.
func (mock *StoreMock) GetProfessorsWithMemberWithSd(ctx context.Context, sd Sd, where parameter.WhereProfessorParam, order parameter.ProfessorOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ProfessorWithMember], error) {
	if mock.GetProfessorsWithMemberWithSdFunc == nil {
		panic("StoreMock.GetProfessorsWithMemberWithSdFunc: method is nil but Store.GetProfessorsWithMemberWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereProfessorParam
		Order parameter.ProfessorOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetProfessorsWithMemberWithSd.Lock()
	mock.calls.GetProfessorsWithMemberWithSd = append(mock.calls.GetProfessorsWithMemberWithSd, callInfo)
	mock.lockGetProfessorsWithMemberWithSd.Unlock()
	return mock.GetProfessorsWithMemberWithSdFunc(ctx, sd, where, order, np, cp, wc)
}

// GetProfessorsWithMemberWithSdCalls gets all the calls that were made to GetProfessorsWithMemberWithSd.
// Check the length with:
//
//	len(mockedStore.GetProfessorsWithMemberWithSdCalls())
func (mock *StoreMock) GetProfessorsWithMemberWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereProfessorParam
	Order parameter.ProfessorOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereProfessorParam
		Order parameter.ProfessorOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetProfessorsWithMemberWithSd.RLock()
	calls = mock.calls.GetProfessorsWithMemberWithSd
	mock.lockGetProfessorsWithMemberWithSd.RUnlock()
	return calls
}

// GetProfessorsWithSd calls GetProfessorsWithSdFunc.
func (mock *StoreMock) GetProfessorsWithSd(ctx context.Context, sd Sd, where parameter.WhereProfessorParam, order parameter.ProfessorOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Professor], error) {
	if mock.GetProfessorsWithSdFunc == nil {
		panic("StoreMock.GetProfessorsWithSdFunc: method is nil but Store.GetProfessorsWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereProfessorParam
		Order parameter.ProfessorOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetProfessorsWithSd.Lock()
	mock.calls.GetProfessorsWithSd = append(mock.calls.GetProfessorsWithSd, callInfo)
	mock.lockGetProfessorsWithSd.Unlock()
	return mock.GetProfessorsWithSdFunc(ctx, sd, where, order, np, cp, wc)
}

// GetProfessorsWithSdCalls gets all the calls that were made to GetProfessorsWithSd.
// Check the length with:
//
//	len(mockedStore.GetProfessorsWithSdCalls())
func (mock *StoreMock) GetProfessorsWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereProfessorParam
	Order parameter.ProfessorOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereProfessorParam
		Order parameter.ProfessorOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetProfessorsWithSd.RLock()
	calls = mock.calls.GetProfessorsWithSd
	mock.lockGetProfessorsWithSd.RUnlock()
	return calls
}

// GetReadableMembersOnMessage calls GetReadableMembersOnMessageFunc.
func (mock *StoreMock) GetReadableMembersOnMessage(ctx context.Context, memberID uuid.UUID, where parameter.WhereReadableMemberOnMessageParam, order parameter.ReadableMemberOnMessageOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ReadableMemberOnMessage], error) {
	if mock.GetReadableMembersOnMessageFunc == nil {
		panic("StoreMock.GetReadableMembersOnMessageFunc: method is nil but Store.GetReadableMembersOnMessage was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		MemberID uuid.UUID
		Where    parameter.WhereReadableMemberOnMessageParam
		Order    parameter.ReadableMemberOnMessageOrderMethod
		Np       NumberedPaginationParam
		Cp       CursorPaginationParam
		Wc       WithCountParam
	}{
		Ctx:      ctx,
		MemberID: memberID,
		Where:    where,
		Order:    order,
		Np:       np,
		Cp:       cp,
		Wc:       wc,
	}
	mock.lockGetReadableMembersOnMessage.Lock()
	mock.calls.GetReadableMembersOnMessage = append(mock.calls.GetReadableMembersOnMessage, callInfo)
	mock.lockGetReadableMembersOnMessage.Unlock()
	return mock.GetReadableMembersOnMessageFunc(ctx, memberID, where, order, np, cp, wc)
}

// GetReadableMembersOnMessageCalls gets all the calls that were made to GetReadableMembersOnMessage.
// Check the length with:
//
//	len(mockedStore.GetReadableMembersOnMessageCalls())
func (mock *StoreMock) GetReadableMembersOnMessageCalls() []struct {
	Ctx      context.Context
	MemberID uuid.UUID
	Where    parameter.WhereReadableMemberOnMessageParam
	Order    parameter.ReadableMemberOnMessageOrderMethod
	Np       NumberedPaginationParam
	Cp       CursorPaginationParam
	Wc       WithCountParam
} {
	var calls []struct {
		Ctx      context.Context
		MemberID uuid.UUID
		Where    parameter.WhereReadableMemberOnMessageParam
		Order    parameter.ReadableMemberOnMessageOrderMethod
		Np       NumberedPaginationParam
		Cp       CursorPaginationParam
		Wc       WithCountParam
	}
	mock.lockGetReadableMembersOnMessage.RLock()
	calls = mock.calls.GetReadableMembersOnMessage
	mock.lockGetReadableMembersOnMessage.RUnlock()
	return calls
}

// GetReadableMembersOnMessageWithSd calls GetReadableMembersOnMessageWithSdFunc.
func (mock *StoreMock) GetReadableMembersOnMessageWithSd(ctx context.Context, sd Sd, memberID uuid.UUID, where parameter.WhereReadableMemberOnMessageParam, order parameter.ReadableMemberOnMessageOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ReadableMemberOnMessage], error) {
	if mock.GetReadableMembersOnMessageWithSdFunc == nil {
		panic("StoreMock.GetReadableMembersOnMessageWithSdFunc: method is nil but Store.GetReadableMembersOnMessageWithSd was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Sd       Sd
		MemberID uuid.UUID
		Where    parameter.WhereReadableMemberOnMessageParam
		Order    parameter.ReadableMemberOnMessageOrderMethod
		Np       NumberedPaginationParam
		Cp       CursorPaginationParam
		Wc       WithCountParam
	}{
		Ctx:      ctx,
		Sd:       sd,
		MemberID: memberID,
		Where:    where,
		Order:    order,
		Np:       np,
		Cp:       cp,
		Wc:       wc,
	}
	mock.lockGetReadableMembersOnMessageWithSd.Lock()
	mock.calls.GetReadableMembersOnMessageWithSd = append(mock.calls.GetReadableMembersOnMessageWithSd, callInfo)
	mock.lockGetReadableMembersOnMessageWithSd.Unlock()
	return mock.GetReadableMembersOnMessageWithSdFunc(ctx, sd, memberID, where, order, np, cp, wc)
}

// GetReadableMembersOnMessageWithSdCalls gets all the calls that were made to GetReadableMembersOnMessageWithSd.
// Check the length with:
//
//	len(mockedStore.GetReadableMembersOnMessageWithSdCalls())
func (mock *StoreMock) GetReadableMembersOnMessageWithSdCalls() []struct {
	Ctx      context.Context
	Sd       Sd
	MemberID uuid.UUID
	Where    parameter.WhereReadableMemberOnMessageParam
	Order    parameter.ReadableMemberOnMessageOrderMethod
	Np       NumberedPaginationParam
	Cp       CursorPaginationParam
	Wc       WithCountParam
} {
	var calls []struct {
		Ctx      context.Context
		Sd       Sd
		MemberID uuid.UUID
		Where    parameter.WhereReadableMemberOnMessageParam
		Order    parameter.ReadableMemberOnMessageOrderMethod
		Np       NumberedPaginationParam
		Cp       CursorPaginationParam
		Wc       WithCountParam
	}
	mock.lockGetReadableMembersOnMessageWithSd.RLock()
	calls = mock.calls.GetReadableMembersOnMessageWithSd
	mock.lockGetReadableMembersOnMessageWithSd.RUnlock()
	return calls
}

// GetReadableMessagesOnMember calls GetReadableMessagesOnMemberFunc.
func (mock *StoreMock) GetReadableMessagesOnMember(ctx context.Context, memberID uuid.UUID, where parameter.WhereReadableMessageOnMemberParam, order parameter.ReadableMessageOnMemberOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ReadableMessageOnMember], error) {
	if mock.GetReadableMessagesOnMemberFunc == nil {
		panic("StoreMock.GetReadableMessagesOnMemberFunc: method is nil but Store.GetReadableMessagesOnMember was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		MemberID uuid.UUID
		Where    parameter.WhereReadableMessageOnMemberParam
		Order    parameter.ReadableMessageOnMemberOrderMethod
		Np       NumberedPaginationParam
		Cp       CursorPaginationParam
		Wc       WithCountParam
	}{
		Ctx:      ctx,
		MemberID: memberID,
		Where:    where,
		Order:    order,
		Np:       np,
		Cp:       cp,
		Wc:       wc,
	}
	mock.lockGetReadableMessagesOnMember.Lock()
	mock.calls.GetReadableMessagesOnMember = append(mock.calls.GetReadableMessagesOnMember, callInfo)
	mock.lockGetReadableMessagesOnMember.Unlock()
	return mock.GetReadableMessagesOnMemberFunc(ctx, memberID, where, order, np, cp, wc)
}

// GetReadableMessagesOnMemberCalls gets all the calls that were made to GetReadableMessagesOnMember.
// Check the length with:
//
//	len(mockedStore.GetReadableMessagesOnMemberCalls())
func (mock *StoreMock) GetReadableMessagesOnMemberCalls() []struct {
	Ctx      context.Context
	MemberID uuid.UUID
	Where    parameter.WhereReadableMessageOnMemberParam
	Order    parameter.ReadableMessageOnMemberOrderMethod
	Np       NumberedPaginationParam
	Cp       CursorPaginationParam
	Wc       WithCountParam
} {
	var calls []struct {
		Ctx      context.Context
		MemberID uuid.UUID
		Where    parameter.WhereReadableMessageOnMemberParam
		Order    parameter.ReadableMessageOnMemberOrderMethod
		Np       NumberedPaginationParam
		Cp       CursorPaginationParam
		Wc       WithCountParam
	}
	mock.lockGetReadableMessagesOnMember.RLock()
	calls = mock.calls.GetReadableMessagesOnMember
	mock.lockGetReadableMessagesOnMember.RUnlock()
	return calls
}

// GetReadableMessagesOnMemberWithSd calls GetReadableMessagesOnMemberWithSdFunc.
func (mock *StoreMock) GetReadableMessagesOnMemberWithSd(ctx context.Context, sd Sd, memberID uuid.UUID, where parameter.WhereReadableMessageOnMemberParam, order parameter.ReadableMessageOnMemberOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.ReadableMessageOnMember], error) {
	if mock.GetReadableMessagesOnMemberWithSdFunc == nil {
		panic("StoreMock.GetReadableMessagesOnMemberWithSdFunc: method is nil but Store.GetReadableMessagesOnMemberWithSd was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Sd       Sd
		MemberID uuid.UUID
		Where    parameter.WhereReadableMessageOnMemberParam
		Order    parameter.ReadableMessageOnMemberOrderMethod
		Np       NumberedPaginationParam
		Cp       CursorPaginationParam
		Wc       WithCountParam
	}{
		Ctx:      ctx,
		Sd:       sd,
		MemberID: memberID,
		Where:    where,
		Order:    order,
		Np:       np,
		Cp:       cp,
		Wc:       wc,
	}
	mock.lockGetReadableMessagesOnMemberWithSd.Lock()
	mock.calls.GetReadableMessagesOnMemberWithSd = append(mock.calls.GetReadableMessagesOnMemberWithSd, callInfo)
	mock.lockGetReadableMessagesOnMemberWithSd.Unlock()
	return mock.GetReadableMessagesOnMemberWithSdFunc(ctx, sd, memberID, where, order, np, cp, wc)
}

// GetReadableMessagesOnMemberWithSdCalls gets all the calls that were made to GetReadableMessagesOnMemberWithSd.
// Check the length with:
//
//	len(mockedStore.GetReadableMessagesOnMemberWithSdCalls())
func (mock *StoreMock) GetReadableMessagesOnMemberWithSdCalls() []struct {
	Ctx      context.Context
	Sd       Sd
	MemberID uuid.UUID
	Where    parameter.WhereReadableMessageOnMemberParam
	Order    parameter.ReadableMessageOnMemberOrderMethod
	Np       NumberedPaginationParam
	Cp       CursorPaginationParam
	Wc       WithCountParam
} {
	var calls []struct {
		Ctx      context.Context
		Sd       Sd
		MemberID uuid.UUID
		Where    parameter.WhereReadableMessageOnMemberParam
		Order    parameter.ReadableMessageOnMemberOrderMethod
		Np       NumberedPaginationParam
		Cp       CursorPaginationParam
		Wc       WithCountParam
	}
	mock.lockGetReadableMessagesOnMemberWithSd.RLock()
	calls = mock.calls.GetReadableMessagesOnMemberWithSd
	mock.lockGetReadableMessagesOnMemberWithSd.RUnlock()
	return calls
}

// GetRecordTypes calls GetRecordTypesFunc.
func (mock *StoreMock) GetRecordTypes(ctx context.Context, where parameter.WhereRecordTypeParam, order parameter.RecordTypeOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.RecordType], error) {
	if mock.GetRecordTypesFunc == nil {
		panic("StoreMock.GetRecordTypesFunc: method is nil but Store.GetRecordTypes was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereRecordTypeParam
		Order parameter.RecordTypeOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetRecordTypes.Lock()
	mock.calls.GetRecordTypes = append(mock.calls.GetRecordTypes, callInfo)
	mock.lockGetRecordTypes.Unlock()
	return mock.GetRecordTypesFunc(ctx, where, order, np, cp, wc)
}

// GetRecordTypesCalls gets all the calls that were made to GetRecordTypes.
// Check the length with:
//
//	len(mockedStore.GetRecordTypesCalls())
func (mock *StoreMock) GetRecordTypesCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereRecordTypeParam
	Order parameter.RecordTypeOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereRecordTypeParam
		Order parameter.RecordTypeOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetRecordTypes.RLock()
	calls = mock.calls.GetRecordTypes
	mock.lockGetRecordTypes.RUnlock()
	return calls
}

// GetRecordTypesWithSd calls GetRecordTypesWithSdFunc.
func (mock *StoreMock) GetRecordTypesWithSd(ctx context.Context, sd Sd, where parameter.WhereRecordTypeParam, order parameter.RecordTypeOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.RecordType], error) {
	if mock.GetRecordTypesWithSdFunc == nil {
		panic("StoreMock.GetRecordTypesWithSdFunc: method is nil but Store.GetRecordTypesWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereRecordTypeParam
		Order parameter.RecordTypeOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetRecordTypesWithSd.Lock()
	mock.calls.GetRecordTypesWithSd = append(mock.calls.GetRecordTypesWithSd, callInfo)
	mock.lockGetRecordTypesWithSd.Unlock()
	return mock.GetRecordTypesWithSdFunc(ctx, sd, where, order, np, cp, wc)
}

// GetRecordTypesWithSdCalls gets all the calls that were made to GetRecordTypesWithSd.
// Check the length with:
//
//	len(mockedStore.GetRecordTypesWithSdCalls())
func (mock *StoreMock) GetRecordTypesWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereRecordTypeParam
	Order parameter.RecordTypeOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereRecordTypeParam
		Order parameter.RecordTypeOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetRecordTypesWithSd.RLock()
	calls = mock.calls.GetRecordTypesWithSd
	mock.lockGetRecordTypesWithSd.RUnlock()
	return calls
}

// GetRoles calls GetRolesFunc.
func (mock *StoreMock) GetRoles(ctx context.Context, where parameter.WhereRoleParam, order parameter.RoleOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Role], error) {
	if mock.GetRolesFunc == nil {
		panic("StoreMock.GetRolesFunc: method is nil but Store.GetRoles was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereRoleParam
		Order parameter.RoleOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetRoles.Lock()
	mock.calls.GetRoles = append(mock.calls.GetRoles, callInfo)
	mock.lockGetRoles.Unlock()
	return mock.GetRolesFunc(ctx, where, order, np, cp, wc)
}

// GetRolesCalls gets all the calls that were made to GetRoles.
// Check the length with:
//
//	len(mockedStore.GetRolesCalls())
func (mock *StoreMock) GetRolesCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereRoleParam
	Order parameter.RoleOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereRoleParam
		Order parameter.RoleOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetRoles.RLock()
	calls = mock.calls.GetRoles
	mock.lockGetRoles.RUnlock()
	return calls
}

// GetRolesOnPolicy calls GetRolesOnPolicyFunc.
func (mock *StoreMock) GetRolesOnPolicy(ctx context.Context, policyID uuid.UUID, where parameter.WhereRoleOnPolicyParam, order parameter.RoleOnPolicyOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.RoleOnPolicy], error) {
	if mock.GetRolesOnPolicyFunc == nil {
		panic("StoreMock.GetRolesOnPolicyFunc: method is nil but Store.GetRolesOnPolicy was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		PolicyID uuid.UUID
		Where    parameter.WhereRoleOnPolicyParam
		Order    parameter.RoleOnPolicyOrderMethod
		Np       NumberedPaginationParam
		Cp       CursorPaginationParam
		Wc       WithCountParam
	}{
		Ctx:      ctx,
		PolicyID: policyID,
		Where:    where,
		Order:    order,
		Np:       np,
		Cp:       cp,
		Wc:       wc,
	}
	mock.lockGetRolesOnPolicy.Lock()
	mock.calls.GetRolesOnPolicy = append(mock.calls.GetRolesOnPolicy, callInfo)
	mock.lockGetRolesOnPolicy.Unlock()
	return mock.GetRolesOnPolicyFunc(ctx, policyID, where, order, np, cp, wc)
}

// GetRolesOnPolicyCalls gets all the calls that were made to GetRolesOnPolicy.
// Check the length with:
//
//	len(mockedStore.GetRolesOnPolicyCalls())
func (mock *StoreMock) GetRolesOnPolicyCalls() []struct {
	Ctx      context.Context
	PolicyID uuid.UUID
	Where    parameter.WhereRoleOnPolicyParam
	Order    parameter.RoleOnPolicyOrderMethod
	Np       NumberedPaginationParam
	Cp       CursorPaginationParam
	Wc       WithCountParam
} {
	var calls []struct {
		Ctx      context.Context
		PolicyID uuid.UUID
		Where    parameter.WhereRoleOnPolicyParam
		Order    parameter.RoleOnPolicyOrderMethod
		Np       NumberedPaginationParam
		Cp       CursorPaginationParam
		Wc       WithCountParam
	}
	mock.lockGetRolesOnPolicy.RLock()
	calls = mock.calls.GetRolesOnPolicy
	mock.lockGetRolesOnPolicy.RUnlock()
	return calls
}

// GetRolesOnPolicyWithSd calls GetRolesOnPolicyWithSdFunc.
func (mock *StoreMock) GetRolesOnPolicyWithSd(ctx context.Context, sd Sd, policyID uuid.UUID, where parameter.WhereRoleOnPolicyParam, order parameter.RoleOnPolicyOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.RoleOnPolicy], error) {
	if mock.GetRolesOnPolicyWithSdFunc == nil {
		panic("StoreMock.GetRolesOnPolicyWithSdFunc: method is nil but Store.GetRolesOnPolicyWithSd was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Sd       Sd
		PolicyID uuid.UUID
		Where    parameter.WhereRoleOnPolicyParam
		Order    parameter.RoleOnPolicyOrderMethod
		Np       NumberedPaginationParam
		Cp       CursorPaginationParam
		Wc       WithCountParam
	}{
		Ctx:      ctx,
		Sd:       sd,
		PolicyID: policyID,
		Where:    where,
		Order:    order,
		Np:       np,
		Cp:       cp,
		Wc:       wc,
	}
	mock.lockGetRolesOnPolicyWithSd.Lock()
	mock.calls.GetRolesOnPolicyWithSd = append(mock.calls.GetRolesOnPolicyWithSd, callInfo)
	mock.lockGetRolesOnPolicyWithSd.Unlock()
	return mock.GetRolesOnPolicyWithSdFunc(ctx, sd, policyID, where, order, np, cp, wc)
}

// GetRolesOnPolicyWithSdCalls gets all the calls that were made to GetRolesOnPolicyWithSd.
// Check the length with:
//
//	len(mockedStore.GetRolesOnPolicyWithSdCalls())
func (mock *StoreMock) GetRolesOnPolicyWithSdCalls() []struct {
	Ctx      context.Context
	Sd       Sd
	PolicyID uuid.UUID
	Where    parameter.WhereRoleOnPolicyParam
	Order    parameter.RoleOnPolicyOrderMethod
	Np       NumberedPaginationParam
	Cp       CursorPaginationParam
	Wc       WithCountParam
} {
	var calls []struct {
		Ctx      context.Context
		Sd       Sd
		PolicyID uuid.UUID
		Where    parameter.WhereRoleOnPolicyParam
		Order    parameter.RoleOnPolicyOrderMethod
		Np       NumberedPaginationParam
		Cp       CursorPaginationParam
		Wc       WithCountParam
	}
	mock.lockGetRolesOnPolicyWithSd.RLock()
	calls = mock.calls.GetRolesOnPolicyWithSd
	mock.lockGetRolesOnPolicyWithSd.RUnlock()
	return calls
}

// GetRolesWithSd calls GetRolesWithSdFunc.
func (mock *StoreMock) GetRolesWithSd(ctx context.Context, sd Sd, where parameter.WhereRoleParam, order parameter.RoleOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Role], error) {
	if mock.GetRolesWithSdFunc == nil {
		panic("StoreMock.GetRolesWithSdFunc: method is nil but Store.GetRolesWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereRoleParam
		Order parameter.RoleOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetRolesWithSd.Lock()
	mock.calls.GetRolesWithSd = append(mock.calls.GetRolesWithSd, callInfo)
	mock.lockGetRolesWithSd.Unlock()
	return mock.GetRolesWithSdFunc(ctx, sd, where, order, np, cp, wc)
}

// GetRolesWithSdCalls gets all the calls that were made to GetRolesWithSd.
// Check the length with:
//
//	len(mockedStore.GetRolesWithSdCalls())
func (mock *StoreMock) GetRolesWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereRoleParam
	Order parameter.RoleOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereRoleParam
		Order parameter.RoleOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetRolesWithSd.RLock()
	calls = mock.calls.GetRolesWithSd
	mock.lockGetRolesWithSd.RUnlock()
	return calls
}

// GetStudents calls GetStudentsFunc.
func (mock *StoreMock) GetStudents(ctx context.Context, where parameter.WhereStudentParam, order parameter.StudentOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Student], error) {
	if mock.GetStudentsFunc == nil {
		panic("StoreMock.GetStudentsFunc: method is nil but Store.GetStudents was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereStudentParam
		Order parameter.StudentOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetStudents.Lock()
	mock.calls.GetStudents = append(mock.calls.GetStudents, callInfo)
	mock.lockGetStudents.Unlock()
	return mock.GetStudentsFunc(ctx, where, order, np, cp, wc)
}

// GetStudentsCalls gets all the calls that were made to GetStudents.
// Check the length with:
//
//	len(mockedStore.GetStudentsCalls())
func (mock *StoreMock) GetStudentsCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereStudentParam
	Order parameter.StudentOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereStudentParam
		Order parameter.StudentOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetStudents.RLock()
	calls = mock.calls.GetStudents
	mock.lockGetStudents.RUnlock()
	return calls
}

// GetStudentsWithMember calls GetStudentsWithMemberFunc.
func (mock *StoreMock) GetStudentsWithMember(ctx context.Context, where parameter.WhereStudentParam, order parameter.StudentOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.StudentWithMember], error) {
	if mock.GetStudentsWithMemberFunc == nil {
		panic("StoreMock.GetStudentsWithMemberFunc: method is nil but Store.GetStudentsWithMember was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereStudentParam
		Order parameter.StudentOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetStudentsWithMember.Lock()
	mock.calls.GetStudentsWithMember = append(mock.calls.GetStudentsWithMember, callInfo)
	mock.lockGetStudentsWithMember.Unlock()
	return mock.GetStudentsWithMemberFunc(ctx, where, order, np, cp, wc)
}

// GetStudentsWithMemberCalls gets all the calls that were made to GetStudentsWithMember.
// Check the length with:
//
//	len(mockedStore.GetStudentsWithMemberCalls())
func (mock *StoreMock) GetStudentsWithMemberCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereStudentParam
	Order parameter.StudentOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereStudentParam
		Order parameter.StudentOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetStudentsWithMember.RLock()
	calls = mock.calls.GetStudentsWithMember
	mock.lockGetStudentsWithMember.RUnlock()
	return calls
}

// GetStudentsWithMemberWithSd calls GetStudentsWithMemberWithSdFunc.
func (mock *StoreMock) GetStudentsWithMemberWithSd(ctx context.Context, sd Sd, where parameter.WhereStudentParam, order parameter.StudentOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.StudentWithMember], error) {
	if mock.GetStudentsWithMemberWithSdFunc == nil {
		panic("StoreMock.GetStudentsWithMemberWithSdFunc: method is nil but Store.GetStudentsWithMemberWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereStudentParam
		Order parameter.StudentOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetStudentsWithMemberWithSd.Lock()
	mock.calls.GetStudentsWithMemberWithSd = append(mock.calls.GetStudentsWithMemberWithSd, callInfo)
	mock.lockGetStudentsWithMemberWithSd.Unlock()
	return mock.GetStudentsWithMemberWithSdFunc(ctx, sd, where, order, np, cp, wc)
}

// GetStudentsWithMemberWithSdCalls gets all the calls that were made to GetStudentsWithMemberWithSd.
// Check the length with:
//
//	len(mockedStore.GetStudentsWithMemberWithSdCalls())
func (mock *StoreMock) GetStudentsWithMemberWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereStudentParam
	Order parameter.StudentOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereStudentParam
		Order parameter.StudentOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetStudentsWithMemberWithSd.RLock()
	calls = mock.calls.GetStudentsWithMemberWithSd
	mock.lockGetStudentsWithMemberWithSd.RUnlock()
	return calls
}

// GetStudentsWithSd calls GetStudentsWithSdFunc.
func (mock *StoreMock) GetStudentsWithSd(ctx context.Context, sd Sd, where parameter.WhereStudentParam, order parameter.StudentOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Student], error) {
	if mock.GetStudentsWithSdFunc == nil {
		panic("StoreMock.GetStudentsWithSdFunc: method is nil but Store.GetStudentsWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereStudentParam
		Order parameter.StudentOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetStudentsWithSd.Lock()
	mock.calls.GetStudentsWithSd = append(mock.calls.GetStudentsWithSd, callInfo)
	mock.lockGetStudentsWithSd.Unlock()
	return mock.GetStudentsWithSdFunc(ctx, sd, where, order, np, cp, wc)
}

// GetStudentsWithSdCalls gets all the calls that were made to GetStudentsWithSd.
// Check the length with:
//
//	len(mockedStore.GetStudentsWithSdCalls())
func (mock *StoreMock) GetStudentsWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereStudentParam
	Order parameter.StudentOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereStudentParam
		Order parameter.StudentOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetStudentsWithSd.RLock()
	calls = mock.calls.GetStudentsWithSd
	mock.lockGetStudentsWithSd.RUnlock()
	return calls
}

// PluralDeleteAbsences calls PluralDeleteAbsencesFunc.
func (mock *StoreMock) PluralDeleteAbsences(ctx context.Context, absenceIDs []uuid.UUID) (int64, error) {
	if mock.PluralDeleteAbsencesFunc == nil {
		panic("StoreMock.PluralDeleteAbsencesFunc: method is nil but Store.PluralDeleteAbsences was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		AbsenceIDs []uuid.UUID
	}{
		Ctx:        ctx,
		AbsenceIDs: absenceIDs,
	}
	mock.lockPluralDeleteAbsences.Lock()
	mock.calls.PluralDeleteAbsences = append(mock.calls.PluralDeleteAbsences, callInfo)
	mock.lockPluralDeleteAbsences.Unlock()
	return mock.PluralDeleteAbsencesFunc(ctx, absenceIDs)
}

// PluralDeleteAbsencesCalls gets all the calls that were made to PluralDeleteAbsences.
// Check the length with:
//
//	len(mockedStore.PluralDeleteAbsencesCalls())
func (mock *StoreMock) PluralDeleteAbsencesCalls() []struct {
	Ctx        context.Context
	AbsenceIDs []uuid.UUID
} {
	var calls []struct {
		Ctx        context.Context
		AbsenceIDs []uuid.UUID
	}
	mock.lockPluralDeleteAbsences.RLock()
	calls = mock.calls.PluralDeleteAbsences
	mock.lockPluralDeleteAbsences.RUnlock()
	return calls
}

// PluralDeleteAbsencesWithSd calls PluralDeleteAbsencesWithSdFunc.
func (mock *StoreMock) PluralDeleteAbsencesWithSd(ctx context.Context, sd Sd, absenceIDs []uuid.UUID) (int64, error) {
	if mock.PluralDeleteAbsencesWithSdFunc == nil {
		panic("StoreMock.PluralDeleteAbsencesWithSdFunc: method is nil but Store.PluralDeleteAbsencesWithSd was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Sd         Sd
		AbsenceIDs []uuid.UUID
	}{
		Ctx:        ctx,
		Sd:         sd,
		AbsenceIDs: absenceIDs,
	}
	mock.lockPluralDeleteAbsencesWithSd.Lock()
	mock.calls.PluralDeleteAbsencesWithSd = append(mock.calls.PluralDeleteAbsencesWithSd, callInfo)
	mock.lockPluralDeleteAbsencesWithSd.Unlock()
	return mock.PluralDeleteAbsencesWithSdFunc(ctx, sd, absenceIDs)
}

// PluralDeleteAbsencesWithSdCalls gets all the calls that were made to PluralDeleteAbsencesWithSd.
// Check the length with:
//
//	len(mockedStore.PluralDeleteAbsencesWithSdCalls())
func (mock *StoreMock) PluralDeleteAbsencesWithSdCalls() []struct {
	Ctx        context.Context
	Sd         Sd
	AbsenceIDs []uuid.UUID
} {
	var calls []struct {
		Ctx        context.Context
		Sd         Sd
		AbsenceIDs []uuid.UUID
	}
	mock.lockPluralDeleteAbsencesWithSd.RLock()
	calls = mock.calls.PluralDeleteAbsencesWithSd
	mock.lockPluralDeleteAbsencesWithSd.RUnlock()
	return calls
}

// PluralDeleteAttachableItems calls PluralDeleteAttachableItemsFunc.
func (mock *StoreMock) PluralDeleteAttachableItems(ctx context.Context, attachableItemIDs []uuid.UUID) (int64, error) {
	if mock.PluralDeleteAttachableItemsFunc == nil {
		panic("StoreMock.PluralDeleteAttachableItemsFunc: method is nil but Store.PluralDeleteAttachableItems was just called")
	}
	callInfo := struct {
		Ctx               context.Context
		AttachableItemIDs []uuid.UUID
	}{
		Ctx:               ctx,
		AttachableItemIDs: attachableItemIDs,
	}
	mock.lockPluralDeleteAttachableItems.Lock()
	mock.calls.PluralDeleteAttachableItems = append(mock.calls.PluralDeleteAttachableItems, callInfo)
	mock.lockPluralDeleteAttachableItems.Unlock()
	return mock.PluralDeleteAttachableItemsFunc(ctx, attachableItemIDs)
}

// PluralDeleteAttachableItemsCalls gets all the calls that were made to PluralDeleteAttachableItems.
// Check the length with:
//
//	len(mockedStore.PluralDeleteAttachableItemsCalls())
func (mock *StoreMock) PluralDeleteAttachableItemsCalls() []struct {
	Ctx               context.Context
	AttachableItemIDs []uuid.UUID
} {
	var calls []struct {
		Ctx               context.Context
		AttachableItemIDs []uuid.UUID
	}
	mock.lockPluralDeleteAttachableItems.RLock()
	calls = mock.calls.PluralDeleteAttachableItems
	mock.lockPluralDeleteAttachableItems.RUnlock()
	return calls
}

// PluralDeleteAttachableItemsWithSd calls PluralDeleteAttachableItemsWithSdFunc.
func (mock *StoreMock) PluralDeleteAttachableItemsWithSd(ctx context.Context, sd Sd, attachableItemIDs []uuid.UUID) (int64, error) {
	if mock.PluralDeleteAttachableItemsWithSdFunc == nil {
		panic("StoreMock.PluralDeleteAttachableItemsWithSdFunc: method is nil but Store.PluralDeleteAttachableItemsWithSd was just called")
	}
	callInfo := struct {
		Ctx               context.Context
		Sd                Sd
		AttachableItemIDs []uuid.UUID
	}{
		Ctx:               ctx,
		Sd:                sd,
		AttachableItemIDs: attachableItemIDs,
	}
	mock.lockPluralDeleteAttachableItemsWithSd.Lock()
	mock.calls.PluralDeleteAttachableItemsWithSd = append(mock.calls.PluralDeleteAttachableItemsWithSd, callInfo)
	mock.lockPluralDeleteAttachableItemsWithSd.Unlock()
	return mock.PluralDeleteAttachableItemsWithSdFunc(ctx, sd, attachableItemIDs)
}

// PluralDeleteAttachableItemsWithSdCalls gets all the calls that were made to PluralDeleteAttachableItemsWithSd.
// Check the length with:
//
//	len(mockedStore.PluralDeleteAttachableItemsWithSdCalls())
func (mock *StoreMock) PluralDeleteAttachableItemsWithSdCalls() []struct {
	Ctx               context.Context
	Sd                Sd
	AttachableItemIDs []uuid.UUID
} {
	var calls []struct {
		Ctx               context.Context
		Sd                Sd
		AttachableItemIDs []uuid.UUID
	}
	mock.lockPluralDeleteAttachableItemsWithSd.RLock()
	calls = mock.calls.PluralDeleteAttachableItemsWithSd
	mock.lockPluralDeleteAttachableItemsWithSd.RUnlock()
	return calls
}

// PluralDeleteAttendStatuses calls PluralDeleteAttendStatusesFunc.
func (mock *StoreMock) PluralDeleteAttendStatuses(ctx context.Context, attendStatusIDs []uuid.UUID) (int64, error) {
	if mock.PluralDeleteAttendStatusesFunc == nil {
		panic("StoreMock.PluralDeleteAttendStatusesFunc: method is nil but Store.PluralDeleteAttendStatuses was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		AttendStatusIDs []uuid.UUID
	}{
		Ctx:             ctx,
		AttendStatusIDs: attendStatusIDs,
	}
	mock.lockPluralDeleteAttendStatuses.Lock()
	mock.calls.PluralDeleteAttendStatuses = append(mock.calls.PluralDeleteAttendStatuses, callInfo)
	mock.lockPluralDeleteAttendStatuses.Unlock()
	return mock.PluralDeleteAttendStatusesFunc(ctx, attendStatusIDs)
}

// PluralDeleteAttendStatusesCalls gets all the calls that were made to PluralDeleteAttendStatuses.
// Check the length with:
//
//	len(mockedStore.PluralDeleteAttendStatusesCalls())
func (mock *StoreMock) PluralDeleteAttendStatusesCalls() []struct {
	Ctx             context.Context
	AttendStatusIDs []uuid.UUID
} {
	var calls []struct {
		Ctx             context.Context
		AttendStatusIDs []uuid.UUID
	}
	mock.lockPluralDeleteAttendStatuses.RLock()
	calls = mock.calls.PluralDeleteAttendStatuses
	mock.lockPluralDeleteAttendStatuses.RUnlock()
	return calls
}

// PluralDeleteAttendStatusesWithSd calls PluralDeleteAttendStatusesWithSdFunc.
func (mock *StoreMock) PluralDeleteAttendStatusesWithSd(ctx context.Context, sd Sd, attendStatusIDs []uuid.UUID) (int64, error) {
	if mock.PluralDeleteAttendStatusesWithSdFunc == nil {
		panic("StoreMock.PluralDeleteAttendStatusesWithSdFunc: method is nil but Store.PluralDeleteAttendStatusesWithSd was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		Sd              Sd
		AttendStatusIDs []uuid.UUID
	}{
		Ctx:             ctx,
		Sd:              sd,
		AttendStatusIDs: attendStatusIDs,
	}
	mock.lockPluralDeleteAttendStatusesWithSd.Lock()
	mock.calls.PluralDeleteAttendStatusesWithSd = append(mock.calls.PluralDeleteAttendStatusesWithSd, callInfo)
	mock.lockPluralDeleteAttendStatusesWithSd.Unlock()
	return mock.PluralDeleteAttendStatusesWithSdFunc(ctx, sd, attendStatusIDs)
}

// PluralDeleteAttendStatusesWithSdCalls gets all the calls that were made to PluralDeleteAttendStatusesWithSd.
// Check the length with:
//
//	len(mockedStore.PluralDeleteAttendStatusesWithSdCalls())
func (mock *StoreMock) PluralDeleteAttendStatusesWithSdCalls() []struct {
	Ctx             context.Context
	Sd              Sd
	AttendStatusIDs []uuid.UUID
} {
	var calls []struct {
		Ctx             context.Context
		Sd              Sd
		AttendStatusIDs []uuid.UUID
	}
	mock.lockPluralDeleteAttendStatusesWithSd.RLock()
	calls = mock.calls.PluralDeleteAttendStatusesWithSd
	mock.lockPluralDeleteAttendStatusesWithSd.RUnlock()
	return calls
}

// PluralDeleteAttendanceTypes calls PluralDeleteAttendanceTypesFunc.
func (mock *StoreMock) PluralDeleteAttendanceTypes(ctx context.Context, attendanceTypeIDs []uuid.UUID) (int64, error) {
	if mock.PluralDeleteAttendanceTypesFunc == nil {
		panic("StoreMock.PluralDeleteAttendanceTypesFunc: method is nil but Store.PluralDeleteAttendanceTypes was just called")
	}
	callInfo := struct {
		Ctx               context.Context
		AttendanceTypeIDs []uuid.UUID
	}{
		Ctx:               ctx,
		AttendanceTypeIDs: attendanceTypeIDs,
	}
	mock.lockPluralDeleteAttendanceTypes.Lock()
	mock.calls.PluralDeleteAttendanceTypes = append(mock.calls.PluralDeleteAttendanceTypes, callInfo)
	mock.lockPluralDeleteAttendanceTypes.Unlock()
	return mock.PluralDeleteAttendanceTypesFunc(ctx, attendanceTypeIDs)
}

// PluralDeleteAttendanceTypesCalls gets all the calls that were made to PluralDeleteAttendanceTypes.
// Check the length with:
//
//	len(mockedStore.PluralDeleteAttendanceTypesCalls())
func (mock *StoreMock) PluralDeleteAttendanceTypesCalls() []struct {
	Ctx               context.Context
	AttendanceTypeIDs []uuid.UUID
} {
	var calls []struct {
		Ctx               context.Context
		AttendanceTypeIDs []uuid.UUID
	}
	mock.lockPluralDeleteAttendanceTypes.RLock()
	calls = mock.calls.PluralDeleteAttendanceTypes
	mock.lockPluralDeleteAttendanceTypes.RUnlock()
	return calls
}

// PluralDeleteAttendanceTypesWithSd calls PluralDeleteAttendanceTypesWithSdFunc.
func (mock *StoreMock) PluralDeleteAttendanceTypesWithSd(ctx context.Context, sd Sd, attendanceTypeIDs []uuid.UUID) (int64, error) {
	if mock.PluralDeleteAttendanceTypesWithSdFunc == nil {
		panic("StoreMock.PluralDeleteAttendanceTypesWithSdFunc: method is nil but Store.PluralDeleteAttendanceTypesWithSd was just called")
	}
	callInfo := struct {
		Ctx               context.Context
		Sd                Sd
		AttendanceTypeIDs []uuid.UUID
	}{
		Ctx:               ctx,
		Sd:                sd,
		AttendanceTypeIDs: attendanceTypeIDs,
	}
	mock.lockPluralDeleteAttendanceTypesWithSd.Lock()
	mock.calls.PluralDeleteAttendanceTypesWithSd = append(mock.calls.PluralDeleteAttendanceTypesWithSd, callInfo)
	mock.lockPluralDeleteAttendanceTypesWithSd.Unlock()
	return mock.PluralDeleteAttendanceTypesWithSdFunc(ctx, sd, attendanceTypeIDs)
}

// PluralDeleteAttendanceTypesWithSdCalls gets all the calls that were made to PluralDeleteAttendanceTypesWithSd.
// Check the length with:
//
//	len(mockedStore.PluralDeleteAttendanceTypesWithSdCalls())
func (mock *StoreMock) PluralDeleteAttendanceTypesWithSdCalls() []struct {
	Ctx               context.Context
	Sd                Sd
	AttendanceTypeIDs []uuid.UUID
} {
	var calls []struct {
		Ctx               context.Context
		Sd                Sd
		AttendanceTypeIDs []uuid.UUID
	}
	mock.lockPluralDeleteAttendanceTypesWithSd.RLock()
	calls = mock.calls.PluralDeleteAttendanceTypesWithSd
	mock.lockPluralDeleteAttendanceTypesWithSd.RUnlock()
	return calls
}

// PluralDeleteChatRoomActionTypes calls PluralDeleteChatRoomActionTypesFunc.
func (mock *StoreMock) PluralDeleteChatRoomActionTypes(ctx context.Context, recordTypeIDs []uuid.UUID) (int64, error) {
	if mock.PluralDeleteChatRoomActionTypesFunc == nil {
		panic("StoreMock.PluralDeleteChatRoomActionTypesFunc: method is nil but Store.PluralDeleteChatRoomActionTypes was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		RecordTypeIDs []uuid.UUID
	}{
		Ctx:           ctx,
		RecordTypeIDs: recordTypeIDs,
	}
	mock.lockPluralDeleteChatRoomActionTypes.Lock()
	mock.calls.PluralDeleteChatRoomActionTypes = append(mock.calls.PluralDeleteChatRoomActionTypes, callInfo)
	mock.lockPluralDeleteChatRoomActionTypes.Unlock()
	return mock.PluralDeleteChatRoomActionTypesFunc(ctx, recordTypeIDs)
}

// PluralDeleteChatRoomActionTypesCalls gets all the calls that were made to PluralDeleteChatRoomActionTypes.
// Check the length with:
//
//	len(mockedStore.PluralDeleteChatRoomActionTypesCalls())
func (mock *StoreMock) PluralDeleteChatRoomActionTypesCalls() []struct {
	Ctx           context.Context
	RecordTypeIDs []uuid.UUID
} {
	var calls []struct {
		Ctx           context.Context
		RecordTypeIDs []uuid.UUID
	}
	mock.lockPluralDeleteChatRoomActionTypes.RLock()
	calls = mock.calls.PluralDeleteChatRoomActionTypes
	mock.lockPluralDeleteChatRoomActionTypes.RUnlock()
	return calls
}

// PluralDeleteChatRoomActionTypesWithSd calls PluralDeleteChatRoomActionTypesWithSdFunc.
func (mock *StoreMock) PluralDeleteChatRoomActionTypesWithSd(ctx context.Context, sd Sd, recordTypeIDs []uuid.UUID) (int64, error) {
	if mock.PluralDeleteChatRoomActionTypesWithSdFunc == nil {
		panic("StoreMock.PluralDeleteChatRoomActionTypesWithSdFunc: method is nil but Store.PluralDeleteChatRoomActionTypesWithSd was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		Sd            Sd
		RecordTypeIDs []uuid.UUID
	}{
		Ctx:           ctx,
		Sd:            sd,
		RecordTypeIDs: recordTypeIDs,
	}
	mock.lockPluralDeleteChatRoomActionTypesWithSd.Lock()
	mock.calls.PluralDeleteChatRoomActionTypesWithSd = append(mock.calls.PluralDeleteChatRoomActionTypesWithSd, callInfo)
	mock.lockPluralDeleteChatRoomActionTypesWithSd.Unlock()
	return mock.PluralDeleteChatRoomActionTypesWithSdFunc(ctx, sd, recordTypeIDs)
}

// PluralDeleteChatRoomActionTypesWithSdCalls gets all the calls that were made to PluralDeleteChatRoomActionTypesWithSd.
// Check the length with:
//
//	len(mockedStore.PluralDeleteChatRoomActionTypesWithSdCalls())
func (mock *StoreMock) PluralDeleteChatRoomActionTypesWithSdCalls() []struct {
	Ctx           context.Context
	Sd            Sd
	RecordTypeIDs []uuid.UUID
} {
	var calls []struct {
		Ctx           context.Context
		Sd            Sd
		RecordTypeIDs []uuid.UUID
	}
	mock.lockPluralDeleteChatRoomActionTypesWithSd.RLock()
	calls = mock.calls.PluralDeleteChatRoomActionTypesWithSd
	mock.lockPluralDeleteChatRoomActionTypesWithSd.RUnlock()
	return calls
}

// PluralDeleteChatRoomActions calls PluralDeleteChatRoomActionsFunc.
func (mock *StoreMock) PluralDeleteChatRoomActions(ctx context.Context, chatRoomActionIDs []uuid.UUID) (int64, error) {
	if mock.PluralDeleteChatRoomActionsFunc == nil {
		panic("StoreMock.PluralDeleteChatRoomActionsFunc: method is nil but Store.PluralDeleteChatRoomActions was just called")
	}
	callInfo := struct {
		Ctx               context.Context
		ChatRoomActionIDs []uuid.UUID
	}{
		Ctx:               ctx,
		ChatRoomActionIDs: chatRoomActionIDs,
	}
	mock.lockPluralDeleteChatRoomActions.Lock()
	mock.calls.PluralDeleteChatRoomActions = append(mock.calls.PluralDeleteChatRoomActions, callInfo)
	mock.lockPluralDeleteChatRoomActions.Unlock()
	return mock.PluralDeleteChatRoomActionsFunc(ctx, chatRoomActionIDs)
}

// PluralDeleteChatRoomActionsCalls gets all the calls that were made to PluralDeleteChatRoomActions.
// Check the length with:
//
//	len(mockedStore.PluralDeleteChatRoomActionsCalls())
func (mock *StoreMock) PluralDeleteChatRoomActionsCalls() []struct {
	Ctx               context.Context
	ChatRoomActionIDs []uuid.UUID
} {
	var calls []struct {
		Ctx               context.Context
		ChatRoomActionIDs []uuid.UUID
	}
	mock.lockPluralDeleteChatRoomActions.RLock()
	calls = mock.calls.PluralDeleteChatRoomActions
	mock.lockPluralDeleteChatRoomActions.RUnlock()
	return calls
}

// PluralDeleteChatRoomActionsWithSd calls PluralDeleteChatRoomActionsWithSdFunc.
func (mock *StoreMock) PluralDeleteChatRoomActionsWithSd(ctx context.Context, sd Sd, chatRoomActionIDs []uuid.UUID) (int64, error) {
	if mock.PluralDeleteChatRoomActionsWithSdFunc == nil {
		panic("StoreMock.PluralDeleteChatRoomActionsWithSdFunc: method is nil but Store.PluralDeleteChatRoomActionsWithSd was just called")
	}
	callInfo := struct {
		Ctx               context.Context
		Sd                Sd
		ChatRoomActionIDs []uuid.UUID
	}{
		Ctx:               ctx,
		Sd:                sd,
		ChatRoomActionIDs: chatRoomActionIDs,
	}
	mock.lockPluralDeleteChatRoomActionsWithSd.Lock()
	mock.calls.PluralDeleteChatRoomActionsWithSd = append(mock.calls.PluralDeleteChatRoomActionsWithSd, callInfo)
	mock.lockPluralDeleteChatRoomActionsWithSd.Unlock()
	return mock.PluralDeleteChatRoomActionsWithSdFunc(ctx, sd, chatRoomActionIDs)
}

// PluralDeleteChatRoomActionsWithSdCalls gets all the calls that were made to PluralDeleteChatRoomActionsWithSd.
// Check the length with:
//
//	len(mockedStore.PluralDeleteChatRoomActionsWithSdCalls())
func (mock *StoreMock) PluralDeleteChatRoomActionsWithSdCalls() []struct {
	Ctx               context.Context
	Sd                Sd
	ChatRoomActionIDs []uuid.UUID
} {
	var calls []struct {
		Ctx               context.Context
		Sd                Sd
		ChatRoomActionIDs []uuid.UUID
	}
	mock.lockPluralDeleteChatRoomActionsWithSd.RLock()
	calls = mock.calls.PluralDeleteChatRoomActionsWithSd
	mock.lockPluralDeleteChatRoomActionsWithSd.RUnlock()
	return calls
}

// PluralDeleteChatRoomAddMemberActions calls PluralDeleteChatRoomAddMemberActionsFunc.
func (mock *StoreMock) PluralDeleteChatRoomAddMemberActions(ctx context.Context, chatRoomAddMemberActionIDs []uuid.UUID) (int64, error) {
	if mock.PluralDeleteChatRoomAddMemberActionsFunc == nil {
		panic("StoreMock.PluralDeleteChatRoomAddMemberActionsFunc: method is nil but Store.PluralDeleteChatRoomAddMemberActions was just called")
	}
	callInfo := struct {
		Ctx                        context.Context
		ChatRoomAddMemberActionIDs []uuid.UUID
	}{
		Ctx:                        ctx,
		ChatRoomAddMemberActionIDs: chatRoomAddMemberActionIDs,
	}
	mock.lockPluralDeleteChatRoomAddMemberActions.Lock()
	mock.calls.PluralDeleteChatRoomAddMemberActions = append(mock.calls.PluralDeleteChatRoomAddMemberActions, callInfo)
	mock.lockPluralDeleteChatRoomAddMemberActions.Unlock()
	return mock.PluralDeleteChatRoomAddMemberActionsFunc(ctx, chatRoomAddMemberActionIDs)
}

// PluralDeleteChatRoomAddMemberActionsCalls gets all the calls that were made to PluralDeleteChatRoomAddMemberActions.
// Check the length with:
//
//	len(mockedStore.PluralDeleteChatRoomAddMemberActionsCalls())
func (mock *StoreMock) PluralDeleteChatRoomAddMemberActionsCalls() []struct {
	Ctx                        context.Context
	ChatRoomAddMemberActionIDs []uuid.UUID
} {
	var calls []struct {
		Ctx                        context.Context
		ChatRoomAddMemberActionIDs []uuid.UUID
	}
	mock.lockPluralDeleteChatRoomAddMemberActions.RLock()
	calls = mock.calls.PluralDeleteChatRoomAddMemberActions
	mock.lockPluralDeleteChatRoomAddMemberActions.RUnlock()
	return calls
}

// PluralDeleteChatRoomAddMemberActionsWithSd calls PluralDeleteChatRoomAddMemberActionsWithSdFunc.
func (mock *StoreMock) PluralDeleteChatRoomAddMemberActionsWithSd(ctx context.Context, sd Sd, chatRoomAddMemberActionIDs []uuid.UUID) (int64, error) {
	if mock.PluralDeleteChatRoomAddMemberActionsWithSdFunc == nil {
		panic("StoreMock.PluralDeleteChatRoomAddMemberActionsWithSdFunc: method is nil but Store.PluralDeleteChatRoomAddMemberActionsWithSd was just called")
	}
	callInfo := struct {
		Ctx                        context.Context
		Sd                         Sd
		ChatRoomAddMemberActionIDs []uuid.UUID
	}{
		Ctx:                        ctx,
		Sd:                         sd,
		ChatRoomAddMemberActionIDs: chatRoomAddMemberActionIDs,
	}
	mock.lockPluralDeleteChatRoomAddMemberActionsWithSd.Lock()
	mock.calls.PluralDeleteChatRoomAddMemberActionsWithSd = append(mock.calls.PluralDeleteChatRoomAddMemberActionsWithSd, callInfo)
	mock.lockPluralDeleteChatRoomAddMemberActionsWithSd.Unlock()
	return mock.PluralDeleteChatRoomAddMemberActionsWithSdFunc(ctx, sd, chatRoomAddMemberActionIDs)
}

// PluralDeleteChatRoomAddMemberActionsWithSdCalls gets all the calls that were made to PluralDeleteChatRoomAddMemberActionsWithSd.
// Check the length with:
//
//	len(mockedStore.PluralDeleteChatRoomAddMemberActionsWithSdCalls())
func (mock *StoreMock) PluralDeleteChatRoomAddMemberActionsWithSdCalls() []struct {
	Ctx                        context.Context
	Sd                         Sd
	ChatRoomAddMemberActionIDs []uuid.UUID
} {
	var calls []struct {
		Ctx                        context.Context
		Sd                         Sd
		ChatRoomAddMemberActionIDs []uuid.UUID
	}
	mock.lockPluralDeleteChatRoomAddMemberActionsWithSd.RLock()
	calls = mock.calls.PluralDeleteChatRoomAddMemberActionsWithSd
	mock.lockPluralDeleteChatRoomAddMemberActionsWithSd.RUnlock()
	return calls
}

// PluralDeleteChatRoomCreateActions calls PluralDeleteChatRoomCreateActionsFunc.
func (mock *StoreMock) PluralDeleteChatRoomCreateActions(ctx context.Context, chatRoomCreateActionIDs []uuid.UUID) (int64, error) {
	if mock.PluralDeleteChatRoomCreateActionsFunc == nil {
		panic("StoreMock.PluralDeleteChatRoomCreateActionsFunc: method is nil but Store.PluralDeleteChatRoomCreateActions was just called")
	}
	callInfo := struct {
		Ctx                     context.Context
		ChatRoomCreateActionIDs []uuid.UUID
	}{
		Ctx:                     ctx,
		ChatRoomCreateActionIDs: chatRoomCreateActionIDs,
	}
	mock.lockPluralDeleteChatRoomCreateActions.Lock()
	mock.calls.PluralDeleteChatRoomCreateActions = append(mock.calls.PluralDeleteChatRoomCreateActions, callInfo)
	mock.lockPluralDeleteChatRoomCreateActions.Unlock()
	return mock.PluralDeleteChatRoomCreateActionsFunc(ctx, chatRoomCreateActionIDs)
}

// PluralDeleteChatRoomCreateActionsCalls gets all the calls that were made to PluralDeleteChatRoomCreateActions.
// Check the length with:
//
//	len(mockedStore.PluralDeleteChatRoomCreateActionsCalls())
func (mock *StoreMock) PluralDeleteChatRoomCreateActionsCalls() []struct {
	Ctx                     context.Context
	ChatRoomCreateActionIDs []uuid.UUID
} {
	var calls []struct {
		Ctx                     context.Context
		ChatRoomCreateActionIDs []uuid.UUID
	}
	mock.lockPluralDeleteChatRoomCreateActions.RLock()
	calls = mock.calls.PluralDeleteChatRoomCreateActions
	mock.lockPluralDeleteChatRoomCreateActions.RUnlock()
	return calls
}

// PluralDeleteChatRoomCreateActionsWithSd calls PluralDeleteChatRoomCreateActionsWithSdFunc.
func (mock *StoreMock) PluralDeleteChatRoomCreateActionsWithSd(ctx context.Context, sd Sd, chatRoomCreateActionIDs []uuid.UUID) (int64, error) {
	if mock.PluralDeleteChatRoomCreateActionsWithSdFunc == nil {
		panic("StoreMock.PluralDeleteChatRoomCreateActionsWithSdFunc: method is nil but Store.PluralDeleteChatRoomCreateActionsWithSd was just called")
	}
	callInfo := struct {
		Ctx                     context.Context
		Sd                      Sd
		ChatRoomCreateActionIDs []uuid.UUID
	}{
		Ctx:                     ctx,
		Sd:                      sd,
		ChatRoomCreateActionIDs: chatRoomCreateActionIDs,
	}
	mock.lockPluralDeleteChatRoomCreateActionsWithSd.Lock()
	mock.calls.PluralDeleteChatRoomCreateActionsWithSd = append(mock.calls.PluralDeleteChatRoomCreateActionsWithSd, callInfo)
	mock.lockPluralDeleteChatRoomCreateActionsWithSd.Unlock()
	return mock.PluralDeleteChatRoomCreateActionsWithSdFunc(ctx, sd, chatRoomCreateActionIDs)
}

// PluralDeleteChatRoomCreateActionsWithSdCalls gets all the calls that were made to PluralDeleteChatRoomCreateActionsWithSd.
// Check the length with:
//
//	len(mockedStore.PluralDeleteChatRoomCreateActionsWithSdCalls())
func (mock *StoreMock) PluralDeleteChatRoomCreateActionsWithSdCalls() []struct {
	Ctx                     context.Context
	Sd                      Sd
	ChatRoomCreateActionIDs []uuid.UUID
} {
	var calls []struct {
		Ctx                     context.Context
		Sd                      Sd
		ChatRoomCreateActionIDs []uuid.UUID
	}
	mock.lockPluralDeleteChatRoomCreateActionsWithSd.RLock()
	calls = mock.calls.PluralDeleteChatRoomCreateActionsWithSd
	mock.lockPluralDeleteChatRoomCreateActionsWithSd.RUnlock()
	return calls
}

// PluralDeleteChatRoomDeleteMessageActions calls PluralDeleteChatRoomDeleteMessageActionsFunc.
func (mock *StoreMock) PluralDeleteChatRoomDeleteMessageActions(ctx context.Context, chatRoomDeleteMessageActionIDs []uuid.UUID) (int64, error) {
	if mock.PluralDeleteChatRoomDeleteMessageActionsFunc == nil {
		panic("StoreMock.PluralDeleteChatRoomDeleteMessageActionsFunc: method is nil but Store.PluralDeleteChatRoomDeleteMessageActions was just called")
	}
	callInfo := struct {
		Ctx                            context.Context
		ChatRoomDeleteMessageActionIDs []uuid.UUID
	}{
		Ctx:                            ctx,
		ChatRoomDeleteMessageActionIDs: chatRoomDeleteMessageActionIDs,
	}
	mock.lockPluralDeleteChatRoomDeleteMessageActions.Lock()
	mock.calls.PluralDeleteChatRoomDeleteMessageActions = append(mock.calls.PluralDeleteChatRoomDeleteMessageActions, callInfo)
	mock.lockPluralDeleteChatRoomDeleteMessageActions.Unlock()
	return mock.PluralDeleteChatRoomDeleteMessageActionsFunc(ctx, chatRoomDeleteMessageActionIDs)
}

// PluralDeleteChatRoomDeleteMessageActionsCalls gets all the calls that were made to PluralDeleteChatRoomDeleteMessageActions.
// Check the length with:
//
//	len(mockedStore.PluralDeleteChatRoomDeleteMessageActionsCalls())
func (mock *StoreMock) PluralDeleteChatRoomDeleteMessageActionsCalls() []struct {
	Ctx                            context.Context
	ChatRoomDeleteMessageActionIDs []uuid.UUID
} {
	var calls []struct {
		Ctx                            context.Context
		ChatRoomDeleteMessageActionIDs []uuid.UUID
	}
	mock.lockPluralDeleteChatRoomDeleteMessageActions.RLock()
	calls = mock.calls.PluralDeleteChatRoomDeleteMessageActions
	mock.lockPluralDeleteChatRoomDeleteMessageActions.RUnlock()
	return calls
}

// PluralDeleteChatRoomDeleteMessageActionsWithSd calls PluralDeleteChatRoomDeleteMessageActionsWithSdFunc.
func (mock *StoreMock) PluralDeleteChatRoomDeleteMessageActionsWithSd(ctx context.Context, sd Sd, chatRoomDeleteMessageActionIDs []uuid.UUID) (int64, error) {
	if mock.PluralDeleteChatRoomDeleteMessageActionsWithSdFunc == nil {
		panic("StoreMock.PluralDeleteChatRoomDeleteMessageActionsWithSdFunc: method is nil but Store.PluralDeleteChatRoomDeleteMessageActionsWithSd was just called")
	}
	callInfo := struct {
		Ctx                            context.Context
		Sd                             Sd
		ChatRoomDeleteMessageActionIDs []uuid.UUID
	}{
		Ctx:                            ctx,
		Sd:                             sd,
		ChatRoomDeleteMessageActionIDs: chatRoomDeleteMessageActionIDs,
	}
	mock.lockPluralDeleteChatRoomDeleteMessageActionsWithSd.Lock()
	mock.calls.PluralDeleteChatRoomDeleteMessageActionsWithSd = append(mock.calls.PluralDeleteChatRoomDeleteMessageActionsWithSd, callInfo)
	mock.lockPluralDeleteChatRoomDeleteMessageActionsWithSd.Unlock()
	return mock.PluralDeleteChatRoomDeleteMessageActionsWithSdFunc(ctx, sd, chatRoomDeleteMessageActionIDs)
}

// PluralDeleteChatRoomDeleteMessageActionsWithSdCalls gets all the calls that were made to PluralDeleteChatRoomDeleteMessageActionsWithSd.
// Check the length with:
//
//	len(mockedStore.PluralDeleteChatRoomDeleteMessageActionsWithSdCalls())
func (mock *StoreMock) PluralDeleteChatRoomDeleteMessageActionsWithSdCalls() []struct {
	Ctx                            context.Context
	Sd                             Sd
	ChatRoomDeleteMessageActionIDs []uuid.UUID
} {
	var calls []struct {
		Ctx                            context.Context
		Sd                             Sd
		ChatRoomDeleteMessageActionIDs []uuid.UUID
	}
	mock.lockPluralDeleteChatRoomDeleteMessageActionsWithSd.RLock()
	calls = mock.calls.PluralDeleteChatRoomDeleteMessageActionsWithSd
	mock.lockPluralDeleteChatRoomDeleteMessageActionsWithSd.RUnlock()
	return calls
}

// PluralDeleteChatRoomRemoveMemberActions calls PluralDeleteChatRoomRemoveMemberActionsFunc.
func (mock *StoreMock) PluralDeleteChatRoomRemoveMemberActions(ctx context.Context, chatRoomRemoveMemberActionIDs []uuid.UUID) (int64, error) {
	if mock.PluralDeleteChatRoomRemoveMemberActionsFunc == nil {
		panic("StoreMock.PluralDeleteChatRoomRemoveMemberActionsFunc: method is nil but Store.PluralDeleteChatRoomRemoveMemberActions was just called")
	}
	callInfo := struct {
		Ctx                           context.Context
		ChatRoomRemoveMemberActionIDs []uuid.UUID
	}{
		Ctx:                           ctx,
		ChatRoomRemoveMemberActionIDs: chatRoomRemoveMemberActionIDs,
	}
	mock.lockPluralDeleteChatRoomRemoveMemberActions.Lock()
	mock.calls.PluralDeleteChatRoomRemoveMemberActions = append(mock.calls.PluralDeleteChatRoomRemoveMemberActions, callInfo)
	mock.lockPluralDeleteChatRoomRemoveMemberActions.Unlock()
	return mock.PluralDeleteChatRoomRemoveMemberActionsFunc(ctx, chatRoomRemoveMemberActionIDs)
}

// PluralDeleteChatRoomRemoveMemberActionsCalls gets all the calls that were made to PluralDeleteChatRoomRemoveMemberActions.
// Check the length with:
//
//	len(mockedStore.PluralDeleteChatRoomRemoveMemberActionsCalls())
func (mock *StoreMock) PluralDeleteChatRoomRemoveMemberActionsCalls() []struct {
	Ctx                           context.Context
	ChatRoomRemoveMemberActionIDs []uuid.UUID
} {
	var calls []struct {
		Ctx                           context.Context
		ChatRoomRemoveMemberActionIDs []uuid.UUID
	}
	mock.lockPluralDeleteChatRoomRemoveMemberActions.RLock()
	calls = mock.calls.PluralDeleteChatRoomRemoveMemberActions
	mock.lockPluralDeleteChatRoomRemoveMemberActions.RUnlock()
	return calls
}

// PluralDeleteChatRoomRemoveMemberActionsWithSd calls PluralDeleteChatRoomRemoveMemberActionsWithSdFunc.
func (mock *StoreMock) PluralDeleteChatRoomRemoveMemberActionsWithSd(ctx context.Context, sd Sd, chatRoomRemoveMemberActionIDs []uuid.UUID) (int64, error) {
	if mock.PluralDeleteChatRoomRemoveMemberActionsWithSdFunc == nil {
		panic("StoreMock.PluralDeleteChatRoomRemoveMemberActionsWithSdFunc: method is nil but Store.PluralDeleteChatRoomRemoveMemberActionsWithSd was just called")
	}
	callInfo := struct {
		Ctx                           context.Context
		Sd                            Sd
		ChatRoomRemoveMemberActionIDs []uuid.UUID
	}{
		Ctx:                           ctx,
		Sd:                            sd,
		ChatRoomRemoveMemberActionIDs: chatRoomRemoveMemberActionIDs,
	}
	mock.lockPluralDeleteChatRoomRemoveMemberActionsWithSd.Lock()
	mock.calls.PluralDeleteChatRoomRemoveMemberActionsWithSd = append(mock.calls.PluralDeleteChatRoomRemoveMemberActionsWithSd, callInfo)
	mock.lockPluralDeleteChatRoomRemoveMemberActionsWithSd.Unlock()
	return mock.PluralDeleteChatRoomRemoveMemberActionsWithSdFunc(ctx, sd, chatRoomRemoveMemberActionIDs)
}

// PluralDeleteChatRoomRemoveMemberActionsWithSdCalls gets all the calls that were made to PluralDeleteChatRoomRemoveMemberActionsWithSd.
// Check the length with:
//
//	len(mockedStore.PluralDeleteChatRoomRemoveMemberActionsWithSdCalls())
func (mock *StoreMock) PluralDeleteChatRoomRemoveMemberActionsWithSdCalls() []struct {
	Ctx                           context.Context
	Sd                            Sd
	ChatRoomRemoveMemberActionIDs []uuid.UUID
} {
	var calls []struct {
		Ctx                           context.Context
		Sd                            Sd
		ChatRoomRemoveMemberActionIDs []uuid.UUID
	}
	mock.lockPluralDeleteChatRoomRemoveMemberActionsWithSd.RLock()
	calls = mock.calls.PluralDeleteChatRoomRemoveMemberActionsWithSd
	mock.lockPluralDeleteChatRoomRemoveMemberActionsWithSd.RUnlock()
	return calls
}

// PluralDeleteChatRoomUpdateNameActions calls PluralDeleteChatRoomUpdateNameActionsFunc.
func (mock *StoreMock) PluralDeleteChatRoomUpdateNameActions(ctx context.Context, chatRoomUpdateNameActionIDs []uuid.UUID) (int64, error) {
	if mock.PluralDeleteChatRoomUpdateNameActionsFunc == nil {
		panic("StoreMock.PluralDeleteChatRoomUpdateNameActionsFunc: method is nil but Store.PluralDeleteChatRoomUpdateNameActions was just called")
	}
	callInfo := struct {
		Ctx                         context.Context
		ChatRoomUpdateNameActionIDs []uuid.UUID
	}{
		Ctx:                         ctx,
		ChatRoomUpdateNameActionIDs: chatRoomUpdateNameActionIDs,
	}
	mock.lockPluralDeleteChatRoomUpdateNameActions.Lock()
	mock.calls.PluralDeleteChatRoomUpdateNameActions = append(mock.calls.PluralDeleteChatRoomUpdateNameActions, callInfo)
	mock.lockPluralDeleteChatRoomUpdateNameActions.Unlock()
	return mock.PluralDeleteChatRoomUpdateNameActionsFunc(ctx, chatRoomUpdateNameActionIDs)
}

// PluralDeleteChatRoomUpdateNameActionsCalls gets all the calls that were made to PluralDeleteChatRoomUpdateNameActions.
// Check the length with:
//
//	len(mockedStore.PluralDeleteChatRoomUpdateNameActionsCalls())
func (mock *StoreMock) PluralDeleteChatRoomUpdateNameActionsCalls() []struct {
	Ctx                         context.Context
	ChatRoomUpdateNameActionIDs []uuid.UUID
} {
	var calls []struct {
		Ctx                         context.Context
		ChatRoomUpdateNameActionIDs []uuid.UUID
	}
	mock.lockPluralDeleteChatRoomUpdateNameActions.RLock()
	calls = mock.calls.PluralDeleteChatRoomUpdateNameActions
	mock.lockPluralDeleteChatRoomUpdateNameActions.RUnlock()
	return calls
}

// PluralDeleteChatRoomUpdateNameActionsWithSd calls PluralDeleteChatRoomUpdateNameActionsWithSdFunc.
func (mock *StoreMock) PluralDeleteChatRoomUpdateNameActionsWithSd(ctx context.Context, sd Sd, chatRoomUpdateNameActionIDs []uuid.UUID) (int64, error) {
	if mock.PluralDeleteChatRoomUpdateNameActionsWithSdFunc == nil {
		panic("StoreMock.PluralDeleteChatRoomUpdateNameActionsWithSdFunc: method is nil but Store.PluralDeleteChatRoomUpdateNameActionsWithSd was just called")
	}
	callInfo := struct {
		Ctx                         context.Context
		Sd                          Sd
		ChatRoomUpdateNameActionIDs []uuid.UUID
	}{
		Ctx:                         ctx,
		Sd:                          sd,
		ChatRoomUpdateNameActionIDs: chatRoomUpdateNameActionIDs,
	}
	mock.lockPluralDeleteChatRoomUpdateNameActionsWithSd.Lock()
	mock.calls.PluralDeleteChatRoomUpdateNameActionsWithSd = append(mock.calls.PluralDeleteChatRoomUpdateNameActionsWithSd, callInfo)
	mock.lockPluralDeleteChatRoomUpdateNameActionsWithSd.Unlock()
	return mock.PluralDeleteChatRoomUpdateNameActionsWithSdFunc(ctx, sd, chatRoomUpdateNameActionIDs)
}

// PluralDeleteChatRoomUpdateNameActionsWithSdCalls gets all the calls that were made to PluralDeleteChatRoomUpdateNameActionsWithSd.
// Check the length with:
//
//	len(mockedStore.PluralDeleteChatRoomUpdateNameActionsWithSdCalls())
func (mock *StoreMock) PluralDeleteChatRoomUpdateNameActionsWithSdCalls() []struct {
	Ctx                         context.Context
	Sd                          Sd
	ChatRoomUpdateNameActionIDs []uuid.UUID
} {
	var calls []struct {
		Ctx                         context.Context
		Sd                          Sd
		ChatRoomUpdateNameActionIDs []uuid.UUID
	}
	mock.lockPluralDeleteChatRoomUpdateNameActionsWithSd.RLock()
	calls = mock.calls.PluralDeleteChatRoomUpdateNameActionsWithSd
	mock.lockPluralDeleteChatRoomUpdateNameActionsWithSd.RUnlock()
	return calls
}

// PluralDeleteChatRoomWithdrawActions calls PluralDeleteChatRoomWithdrawActionsFunc.
func (mock *StoreMock) PluralDeleteChatRoomWithdrawActions(ctx context.Context, chatRoomWithdrawActionIDs []uuid.UUID) (int64, error) {
	if mock.PluralDeleteChatRoomWithdrawActionsFunc == nil {
		panic("StoreMock.PluralDeleteChatRoomWithdrawActionsFunc: method is nil but Store.PluralDeleteChatRoomWithdrawActions was just called")
	}
	callInfo := struct {
		Ctx                       context.Context
		ChatRoomWithdrawActionIDs []uuid.UUID
	}{
		Ctx:                       ctx,
		ChatRoomWithdrawActionIDs: chatRoomWithdrawActionIDs,
	}
	mock.lockPluralDeleteChatRoomWithdrawActions.Lock()
	mock.calls.PluralDeleteChatRoomWithdrawActions = append(mock.calls.PluralDeleteChatRoomWithdrawActions, callInfo)
	mock.lockPluralDeleteChatRoomWithdrawActions.Unlock()
	return mock.PluralDeleteChatRoomWithdrawActionsFunc(ctx, chatRoomWithdrawActionIDs)
}

// PluralDeleteChatRoomWithdrawActionsCalls gets all the calls that were made to PluralDeleteChatRoomWithdrawActions.
// Check the length with:
//
//	len(mockedStore.PluralDeleteChatRoomWithdrawActionsCalls())
func (mock *StoreMock) PluralDeleteChatRoomWithdrawActionsCalls() []struct {
	Ctx                       context.Context
	ChatRoomWithdrawActionIDs []uuid.UUID
} {
	var calls []struct {
		Ctx                       context.Context
		ChatRoomWithdrawActionIDs []uuid.UUID
	}
	mock.lockPluralDeleteChatRoomWithdrawActions.RLock()
	calls = mock.calls.PluralDeleteChatRoomWithdrawActions
	mock.lockPluralDeleteChatRoomWithdrawActions.RUnlock()
	return calls
}

// PluralDeleteChatRoomWithdrawActionsWithSd calls PluralDeleteChatRoomWithdrawActionsWithSdFunc.
func (mock *StoreMock) PluralDeleteChatRoomWithdrawActionsWithSd(ctx context.Context, sd Sd, chatRoomWithdrawActionIDs []uuid.UUID) (int64, error) {
	if mock.PluralDeleteChatRoomWithdrawActionsWithSdFunc == nil {
		panic("StoreMock.PluralDeleteChatRoomWithdrawActionsWithSdFunc: method is nil but Store.PluralDeleteChatRoomWithdrawActionsWithSd was just called")
	}
	callInfo := struct {
		Ctx                       context.Context
		Sd                        Sd
		ChatRoomWithdrawActionIDs []uuid.UUID
	}{
		Ctx:                       ctx,
		Sd:                        sd,
		ChatRoomWithdrawActionIDs: chatRoomWithdrawActionIDs,
	}
	mock.lockPluralDeleteChatRoomWithdrawActionsWithSd.Lock()
	mock.calls.PluralDeleteChatRoomWithdrawActionsWithSd = append(mock.calls.PluralDeleteChatRoomWithdrawActionsWithSd, callInfo)
	mock.lockPluralDeleteChatRoomWithdrawActionsWithSd.Unlock()
	return mock.PluralDeleteChatRoomWithdrawActionsWithSdFunc(ctx, sd, chatRoomWithdrawActionIDs)
}

// PluralDeleteChatRoomWithdrawActionsWithSdCalls gets all the calls that were made to PluralDeleteChatRoomWithdrawActionsWithSd.
// Check the length with:
//
//	len(mockedStore.PluralDeleteChatRoomWithdrawActionsWithSdCalls())
func (mock *StoreMock) PluralDeleteChatRoomWithdrawActionsWithSdCalls() []struct {
	Ctx                       context.Context
	Sd                        Sd
	ChatRoomWithdrawActionIDs []uuid.UUID
} {
	var calls []struct {
		Ctx                       context.Context
		Sd                        Sd
		ChatRoomWithdrawActionIDs []uuid.UUID
	}
	mock.lockPluralDeleteChatRoomWithdrawActionsWithSd.RLock()
	calls = mock.calls.PluralDeleteChatRoomWithdrawActionsWithSd
	mock.lockPluralDeleteChatRoomWithdrawActionsWithSd.RUnlock()
	return calls
}

// PluralDeleteChatRooms calls PluralDeleteChatRoomsFunc.
func (mock *StoreMock) PluralDeleteChatRooms(ctx context.Context, chatRoomIDs []uuid.UUID) (int64, error) {
	if mock.PluralDeleteChatRoomsFunc == nil {
		panic("StoreMock.PluralDeleteChatRoomsFunc: method is nil but Store.PluralDeleteChatRooms was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		ChatRoomIDs []uuid.UUID
	}{
		Ctx:         ctx,
		ChatRoomIDs: chatRoomIDs,
	}
	mock.lockPluralDeleteChatRooms.Lock()
	mock.calls.PluralDeleteChatRooms = append(mock.calls.PluralDeleteChatRooms, callInfo)
	mock.lockPluralDeleteChatRooms.Unlock()
	return mock.PluralDeleteChatRoomsFunc(ctx, chatRoomIDs)
}

// PluralDeleteChatRoomsCalls gets all the calls that were made to PluralDeleteChatRooms.
// Check the length with:
//
//	len(mockedStore.PluralDeleteChatRoomsCalls())
func (mock *StoreMock) PluralDeleteChatRoomsCalls() []struct {
	Ctx         context.Context
	ChatRoomIDs []uuid.UUID
} {
	var calls []struct {
		Ctx         context.Context
		ChatRoomIDs []uuid.UUID
	}
	mock.lockPluralDeleteChatRooms.RLock()
	calls = mock.calls.PluralDeleteChatRooms
	mock.lockPluralDeleteChatRooms.RUnlock()
	return calls
}

// PluralDeleteChatRoomsWithSd calls PluralDeleteChatRoomsWithSdFunc.
func (mock *StoreMock) PluralDeleteChatRoomsWithSd(ctx context.Context, sd Sd, chatRoomIDs []uuid.UUID) (int64, error) {
	if mock.PluralDeleteChatRoomsWithSdFunc == nil {
		panic("StoreMock.PluralDeleteChatRoomsWithSdFunc: method is nil but Store.PluralDeleteChatRoomsWithSd was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Sd          Sd
		ChatRoomIDs []uuid.UUID
	}{
		Ctx:         ctx,
		Sd:          sd,
		ChatRoomIDs: chatRoomIDs,
	}
	mock.lockPluralDeleteChatRoomsWithSd.Lock()
	mock.calls.PluralDeleteChatRoomsWithSd = append(mock.calls.PluralDeleteChatRoomsWithSd, callInfo)
	mock.lockPluralDeleteChatRoomsWithSd.Unlock()
	return mock.PluralDeleteChatRoomsWithSdFunc(ctx, sd, chatRoomIDs)
}

// PluralDeleteChatRoomsWithSdCalls gets all the calls that were made to PluralDeleteChatRoomsWithSd.
// Check the length with:
//
//	len(mockedStore.PluralDeleteChatRoomsWithSdCalls())
func (mock *StoreMock) PluralDeleteChatRoomsWithSdCalls() []struct {
	Ctx         context.Context
	Sd          Sd
	ChatRoomIDs []uuid.UUID
} {
	var calls []struct {
		Ctx         context.Context
		Sd          Sd
		ChatRoomIDs []uuid.UUID
	}
	mock.lockPluralDeleteChatRoomsWithSd.RLock()
	calls = mock.calls.PluralDeleteChatRoomsWithSd
	mock.lockPluralDeleteChatRoomsWithSd.RUnlock()
	return calls
}

// PluralDeleteEventTypes calls PluralDeleteEventTypesFunc.
func (mock *StoreMock) PluralDeleteEventTypes(ctx context.Context, eventTypeIDs []uuid.UUID) (int64, error) {
	if mock.PluralDeleteEventTypesFunc == nil {
		panic("StoreMock.PluralDeleteEventTypesFunc: method is nil but Store.PluralDeleteEventTypes was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		EventTypeIDs []uuid.UUID
	}{
		Ctx:          ctx,
		EventTypeIDs: eventTypeIDs,
	}
	mock.lockPluralDeleteEventTypes.Lock()
	mock.calls.PluralDeleteEventTypes = append(mock.calls.PluralDeleteEventTypes, callInfo)
	mock.lockPluralDeleteEventTypes.Unlock()
	return mock.PluralDeleteEventTypesFunc(ctx, eventTypeIDs)
}

// PluralDeleteEventTypesCalls gets all the calls that were made to PluralDeleteEventTypes.
// Check the length with:
//
//	len(mockedStore.PluralDeleteEventTypesCalls())
func (mock *StoreMock) PluralDeleteEventTypesCalls() []struct {
	Ctx          context.Context
	EventTypeIDs []uuid.UUID
} {
	var calls []struct {
		Ctx          context.Context
		EventTypeIDs []uuid.UUID
	}
	mock.lockPluralDeleteEventTypes.RLock()
	calls = mock.calls.PluralDeleteEventTypes
	mock.lockPluralDeleteEventTypes.RUnlock()
	return calls
}

// PluralDeleteEventTypesWithSd calls PluralDeleteEventTypesWithSdFunc.
func (mock *StoreMock) PluralDeleteEventTypesWithSd(ctx context.Context, sd Sd, eventTypeIDs []uuid.UUID) (int64, error) {
	if mock.PluralDeleteEventTypesWithSdFunc == nil {
		panic("StoreMock.PluralDeleteEventTypesWithSdFunc: method is nil but Store.PluralDeleteEventTypesWithSd was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		Sd           Sd
		EventTypeIDs []uuid.UUID
	}{
		Ctx:          ctx,
		Sd:           sd,
		EventTypeIDs: eventTypeIDs,
	}
	mock.lockPluralDeleteEventTypesWithSd.Lock()
	mock.calls.PluralDeleteEventTypesWithSd = append(mock.calls.PluralDeleteEventTypesWithSd, callInfo)
	mock.lockPluralDeleteEventTypesWithSd.Unlock()
	return mock.PluralDeleteEventTypesWithSdFunc(ctx, sd, eventTypeIDs)
}

// PluralDeleteEventTypesWithSdCalls gets all the calls that were made to PluralDeleteEventTypesWithSd.
// Check the length with:
//
//	len(mockedStore.PluralDeleteEventTypesWithSdCalls())
func (mock *StoreMock) PluralDeleteEventTypesWithSdCalls() []struct {
	Ctx          context.Context
	Sd           Sd
	EventTypeIDs []uuid.UUID
} {
	var calls []struct {
		Ctx          context.Context
		Sd           Sd
		EventTypeIDs []uuid.UUID
	}
	mock.lockPluralDeleteEventTypesWithSd.RLock()
	calls = mock.calls.PluralDeleteEventTypesWithSd
	mock.lockPluralDeleteEventTypesWithSd.RUnlock()
	return calls
}

// PluralDeleteFiles calls PluralDeleteFilesFunc.
func (mock *StoreMock) PluralDeleteFiles(ctx context.Context, fileIDs []uuid.UUID) (int64, error) {
	if mock.PluralDeleteFilesFunc == nil {
		panic("StoreMock.PluralDeleteFilesFunc: method is nil but Store.PluralDeleteFiles was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		FileIDs []uuid.UUID
	}{
		Ctx:     ctx,
		FileIDs: fileIDs,
	}
	mock.lockPluralDeleteFiles.Lock()
	mock.calls.PluralDeleteFiles = append(mock.calls.PluralDeleteFiles, callInfo)
	mock.lockPluralDeleteFiles.Unlock()
	return mock.PluralDeleteFilesFunc(ctx, fileIDs)
}

// PluralDeleteFilesCalls gets all the calls that were made to PluralDeleteFiles.
// Check the length with:
//
//	len(mockedStore.PluralDeleteFilesCalls())
func (mock *StoreMock) PluralDeleteFilesCalls() []struct {
	Ctx     context.Context
	FileIDs []uuid.UUID
} {
	var calls []struct {
		Ctx     context.Context
		FileIDs []uuid.UUID
	}
	mock.lockPluralDeleteFiles.RLock()
	calls = mock.calls.PluralDeleteFiles
	mock.lockPluralDeleteFiles.RUnlock()
	return calls
}

// PluralDeleteFilesWithSd calls PluralDeleteFilesWithSdFunc.
func (mock *StoreMock) PluralDeleteFilesWithSd(ctx context.Context, sd Sd, fileIDs []uuid.UUID) (int64, error) {
	if mock.PluralDeleteFilesWithSdFunc == nil {
		panic("StoreMock.PluralDeleteFilesWithSdFunc: method is nil but Store.PluralDeleteFilesWithSd was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Sd      Sd
		FileIDs []uuid.UUID
	}{
		Ctx:     ctx,
		Sd:      sd,
		FileIDs: fileIDs,
	}
	mock.lockPluralDeleteFilesWithSd.Lock()
	mock.calls.PluralDeleteFilesWithSd = append(mock.calls.PluralDeleteFilesWithSd, callInfo)
	mock.lockPluralDeleteFilesWithSd.Unlock()
	return mock.PluralDeleteFilesWithSdFunc(ctx, sd, fileIDs)
}

// PluralDeleteFilesWithSdCalls gets all the calls that were made to PluralDeleteFilesWithSd.
// Check the length with:
//
//	len(mockedStore.PluralDeleteFilesWithSdCalls())
func (mock *StoreMock) PluralDeleteFilesWithSdCalls() []struct {
	Ctx     context.Context
	Sd      Sd
	FileIDs []uuid.UUID
} {
	var calls []struct {
		Ctx     context.Context
		Sd      Sd
		FileIDs []uuid.UUID
	}
	mock.lockPluralDeleteFilesWithSd.RLock()
	calls = mock.calls.PluralDeleteFilesWithSd
	mock.lockPluralDeleteFilesWithSd.RUnlock()
	return calls
}

// PluralDeleteGrades calls PluralDeleteGradesFunc.
func (mock *StoreMock) PluralDeleteGrades(ctx context.Context, gradeIDs []uuid.UUID) (int64, error) {
	if mock.PluralDeleteGradesFunc == nil {
		panic("StoreMock.PluralDeleteGradesFunc: method is nil but Store.PluralDeleteGrades was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		GradeIDs []uuid.UUID
	}{
		Ctx:      ctx,
		GradeIDs: gradeIDs,
	}
	mock.lockPluralDeleteGrades.Lock()
	mock.calls.PluralDeleteGrades = append(mock.calls.PluralDeleteGrades, callInfo)
	mock.lockPluralDeleteGrades.Unlock()
	return mock.PluralDeleteGradesFunc(ctx, gradeIDs)
}

// PluralDeleteGradesCalls gets all the calls that were made to PluralDeleteGrades.
// Check the length with:
//
//	len(mockedStore.PluralDeleteGradesCalls())
func (mock *StoreMock) PluralDeleteGradesCalls() []struct {
	Ctx      context.Context
	GradeIDs []uuid.UUID
} {
	var calls []struct {
		Ctx      context.Context
		GradeIDs []uuid.UUID
	}
	mock.lockPluralDeleteGrades.RLock()
	calls = mock.calls.PluralDeleteGrades
	mock.lockPluralDeleteGrades.RUnlock()
	return calls
}

// PluralDeleteGradesWithSd calls PluralDeleteGradesWithSdFunc.
func (mock *StoreMock) PluralDeleteGradesWithSd(ctx context.Context, sd Sd, gradeIDs []uuid.UUID) (int64, error) {
	if mock.PluralDeleteGradesWithSdFunc == nil {
		panic("StoreMock.PluralDeleteGradesWithSdFunc: method is nil but Store.PluralDeleteGradesWithSd was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Sd       Sd
		GradeIDs []uuid.UUID
	}{
		Ctx:      ctx,
		Sd:       sd,
		GradeIDs: gradeIDs,
	}
	mock.lockPluralDeleteGradesWithSd.Lock()
	mock.calls.PluralDeleteGradesWithSd = append(mock.calls.PluralDeleteGradesWithSd, callInfo)
	mock.lockPluralDeleteGradesWithSd.Unlock()
	return mock.PluralDeleteGradesWithSdFunc(ctx, sd, gradeIDs)
}

// PluralDeleteGradesWithSdCalls gets all the calls that were made to PluralDeleteGradesWithSd.
// Check the length with:
//
//	len(mockedStore.PluralDeleteGradesWithSdCalls())
func (mock *StoreMock) PluralDeleteGradesWithSdCalls() []struct {
	Ctx      context.Context
	Sd       Sd
	GradeIDs []uuid.UUID
} {
	var calls []struct {
		Ctx      context.Context
		Sd       Sd
		GradeIDs []uuid.UUID
	}
	mock.lockPluralDeleteGradesWithSd.RLock()
	calls = mock.calls.PluralDeleteGradesWithSd
	mock.lockPluralDeleteGradesWithSd.RUnlock()
	return calls
}

// PluralDeleteGroups calls PluralDeleteGroupsFunc.
func (mock *StoreMock) PluralDeleteGroups(ctx context.Context, groupIDs []uuid.UUID) (int64, error) {
	if mock.PluralDeleteGroupsFunc == nil {
		panic("StoreMock.PluralDeleteGroupsFunc: method is nil but Store.PluralDeleteGroups was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		GroupIDs []uuid.UUID
	}{
		Ctx:      ctx,
		GroupIDs: groupIDs,
	}
	mock.lockPluralDeleteGroups.Lock()
	mock.calls.PluralDeleteGroups = append(mock.calls.PluralDeleteGroups, callInfo)
	mock.lockPluralDeleteGroups.Unlock()
	return mock.PluralDeleteGroupsFunc(ctx, groupIDs)
}

// PluralDeleteGroupsCalls gets all the calls that were made to PluralDeleteGroups.
// Check the length with:
//
//	len(mockedStore.PluralDeleteGroupsCalls())
func (mock *StoreMock) PluralDeleteGroupsCalls() []struct {
	Ctx      context.Context
	GroupIDs []uuid.UUID
} {
	var calls []struct {
		Ctx      context.Context
		GroupIDs []uuid.UUID
	}
	mock.lockPluralDeleteGroups.RLock()
	calls = mock.calls.PluralDeleteGroups
	mock.lockPluralDeleteGroups.RUnlock()
	return calls
}

// PluralDeleteGroupsWithSd calls PluralDeleteGroupsWithSdFunc.
func (mock *StoreMock) PluralDeleteGroupsWithSd(ctx context.Context, sd Sd, groupIDs []uuid.UUID) (int64, error) {
	if mock.PluralDeleteGroupsWithSdFunc == nil {
		panic("StoreMock.PluralDeleteGroupsWithSdFunc: method is nil but Store.PluralDeleteGroupsWithSd was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Sd       Sd
		GroupIDs []uuid.UUID
	}{
		Ctx:      ctx,
		Sd:       sd,
		GroupIDs: groupIDs,
	}
	mock.lockPluralDeleteGroupsWithSd.Lock()
	mock.calls.PluralDeleteGroupsWithSd = append(mock.calls.PluralDeleteGroupsWithSd, callInfo)
	mock.lockPluralDeleteGroupsWithSd.Unlock()
	return mock.PluralDeleteGroupsWithSdFunc(ctx, sd, groupIDs)
}

// PluralDeleteGroupsWithSdCalls gets all the calls that were made to PluralDeleteGroupsWithSd.
// Check the length with:
//
//	len(mockedStore.PluralDeleteGroupsWithSdCalls())
func (mock *StoreMock) PluralDeleteGroupsWithSdCalls() []struct {
	Ctx      context.Context
	Sd       Sd
	GroupIDs []uuid.UUID
} {
	var calls []struct {
		Ctx      context.Context
		Sd       Sd
		GroupIDs []uuid.UUID
	}
	mock.lockPluralDeleteGroupsWithSd.RLock()
	calls = mock.calls.PluralDeleteGroupsWithSd
	mock.lockPluralDeleteGroupsWithSd.RUnlock()
	return calls
}

// PluralDeleteImages calls PluralDeleteImagesFunc.
func (mock *StoreMock) PluralDeleteImages(ctx context.Context, imageIDs []uuid.UUID) (int64, error) {
	if mock.PluralDeleteImagesFunc == nil {
		panic("StoreMock.PluralDeleteImagesFunc: method is nil but Store.PluralDeleteImages was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		ImageIDs []uuid.UUID
	}{
		Ctx:      ctx,
		ImageIDs: imageIDs,
	}
	mock.lockPluralDeleteImages.Lock()
	mock.calls.PluralDeleteImages = append(mock.calls.PluralDeleteImages, callInfo)
	mock.lockPluralDeleteImages.Unlock()
	return mock.PluralDeleteImagesFunc(ctx, imageIDs)
}

// PluralDeleteImagesCalls gets all the calls that were made to PluralDeleteImages.
// Check the length with:
//
//	len(mockedStore.PluralDeleteImagesCalls())
func (mock *StoreMock) PluralDeleteImagesCalls() []struct {
	Ctx      context.Context
	ImageIDs []uuid.UUID
} {
	var calls []struct {
		Ctx      context.Context
		ImageIDs []uuid.UUID
	}
	mock.lockPluralDeleteImages.RLock()
	calls = mock.calls.PluralDeleteImages
	mock.lockPluralDeleteImages.RUnlock()
	return calls
}

// PluralDeleteImagesWithSd calls PluralDeleteImagesWithSdFunc.
func (mock *StoreMock) PluralDeleteImagesWithSd(ctx context.Context, sd Sd, imageIDs []uuid.UUID) (int64, error) {
	if mock.PluralDeleteImagesWithSdFunc == nil {
		panic("StoreMock.PluralDeleteImagesWithSdFunc: method is nil but Store.PluralDeleteImagesWithSd was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Sd       Sd
		ImageIDs []uuid.UUID
	}{
		Ctx:      ctx,
		Sd:       sd,
		ImageIDs: imageIDs,
	}
	mock.lockPluralDeleteImagesWithSd.Lock()
	mock.calls.PluralDeleteImagesWithSd = append(mock.calls.PluralDeleteImagesWithSd, callInfo)
	mock.lockPluralDeleteImagesWithSd.Unlock()
	return mock.PluralDeleteImagesWithSdFunc(ctx, sd, imageIDs)
}

// PluralDeleteImagesWithSdCalls gets all the calls that were made to PluralDeleteImagesWithSd.
// Check the length with:
//
//	len(mockedStore.PluralDeleteImagesWithSdCalls())
func (mock *StoreMock) PluralDeleteImagesWithSdCalls() []struct {
	Ctx      context.Context
	Sd       Sd
	ImageIDs []uuid.UUID
} {
	var calls []struct {
		Ctx      context.Context
		Sd       Sd
		ImageIDs []uuid.UUID
	}
	mock.lockPluralDeleteImagesWithSd.RLock()
	calls = mock.calls.PluralDeleteImagesWithSd
	mock.lockPluralDeleteImagesWithSd.RUnlock()
	return calls
}

// PluralDeleteMembers calls PluralDeleteMembersFunc.
func (mock *StoreMock) PluralDeleteMembers(ctx context.Context, memberIDs []uuid.UUID) (int64, error) {
	if mock.PluralDeleteMembersFunc == nil {
		panic("StoreMock.PluralDeleteMembersFunc: method is nil but Store.PluralDeleteMembers was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		MemberIDs []uuid.UUID
	}{
		Ctx:       ctx,
		MemberIDs: memberIDs,
	}
	mock.lockPluralDeleteMembers.Lock()
	mock.calls.PluralDeleteMembers = append(mock.calls.PluralDeleteMembers, callInfo)
	mock.lockPluralDeleteMembers.Unlock()
	return mock.PluralDeleteMembersFunc(ctx, memberIDs)
}

// PluralDeleteMembersCalls gets all the calls that were made to PluralDeleteMembers.
// Check the length with:
//
//	len(mockedStore.PluralDeleteMembersCalls())
func (mock *StoreMock) PluralDeleteMembersCalls() []struct {
	Ctx       context.Context
	MemberIDs []uuid.UUID
} {
	var calls []struct {
		Ctx       context.Context
		MemberIDs []uuid.UUID
	}
	mock.lockPluralDeleteMembers.RLock()
	calls = mock.calls.PluralDeleteMembers
	mock.lockPluralDeleteMembers.RUnlock()
	return calls
}

// PluralDeleteMembersWithSd calls PluralDeleteMembersWithSdFunc.
func (mock *StoreMock) PluralDeleteMembersWithSd(ctx context.Context, sd Sd, memberIDs []uuid.UUID) (int64, error) {
	if mock.PluralDeleteMembersWithSdFunc == nil {
		panic("StoreMock.PluralDeleteMembersWithSdFunc: method is nil but Store.PluralDeleteMembersWithSd was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Sd        Sd
		MemberIDs []uuid.UUID
	}{
		Ctx:       ctx,
		Sd:        sd,
		MemberIDs: memberIDs,
	}
	mock.lockPluralDeleteMembersWithSd.Lock()
	mock.calls.PluralDeleteMembersWithSd = append(mock.calls.PluralDeleteMembersWithSd, callInfo)
	mock.lockPluralDeleteMembersWithSd.Unlock()
	return mock.PluralDeleteMembersWithSdFunc(ctx, sd, memberIDs)
}

// PluralDeleteMembersWithSdCalls gets all the calls that were made to PluralDeleteMembersWithSd.
// Check the length with:
//
//	len(mockedStore.PluralDeleteMembersWithSdCalls())
func (mock *StoreMock) PluralDeleteMembersWithSdCalls() []struct {
	Ctx       context.Context
	Sd        Sd
	MemberIDs []uuid.UUID
} {
	var calls []struct {
		Ctx       context.Context
		Sd        Sd
		MemberIDs []uuid.UUID
	}
	mock.lockPluralDeleteMembersWithSd.RLock()
	calls = mock.calls.PluralDeleteMembersWithSd
	mock.lockPluralDeleteMembersWithSd.RUnlock()
	return calls
}

// PluralDeleteMessages calls PluralDeleteMessagesFunc.
func (mock *StoreMock) PluralDeleteMessages(ctx context.Context, messageIDs []uuid.UUID) (int64, error) {
	if mock.PluralDeleteMessagesFunc == nil {
		panic("StoreMock.PluralDeleteMessagesFunc: method is nil but Store.PluralDeleteMessages was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		MessageIDs []uuid.UUID
	}{
		Ctx:        ctx,
		MessageIDs: messageIDs,
	}
	mock.lockPluralDeleteMessages.Lock()
	mock.calls.PluralDeleteMessages = append(mock.calls.PluralDeleteMessages, callInfo)
	mock.lockPluralDeleteMessages.Unlock()
	return mock.PluralDeleteMessagesFunc(ctx, messageIDs)
}

// PluralDeleteMessagesCalls gets all the calls that were made to PluralDeleteMessages.
// Check the length with:
//
//	len(mockedStore.PluralDeleteMessagesCalls())
func (mock *StoreMock) PluralDeleteMessagesCalls() []struct {
	Ctx        context.Context
	MessageIDs []uuid.UUID
} {
	var calls []struct {
		Ctx        context.Context
		MessageIDs []uuid.UUID
	}
	mock.lockPluralDeleteMessages.RLock()
	calls = mock.calls.PluralDeleteMessages
	mock.lockPluralDeleteMessages.RUnlock()
	return calls
}

// PluralDeleteMessagesWithSd calls PluralDeleteMessagesWithSdFunc.
func (mock *StoreMock) PluralDeleteMessagesWithSd(ctx context.Context, sd Sd, messageIDs []uuid.UUID) (int64, error) {
	if mock.PluralDeleteMessagesWithSdFunc == nil {
		panic("StoreMock.PluralDeleteMessagesWithSdFunc: method is nil but Store.PluralDeleteMessagesWithSd was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Sd         Sd
		MessageIDs []uuid.UUID
	}{
		Ctx:        ctx,
		Sd:         sd,
		MessageIDs: messageIDs,
	}
	mock.lockPluralDeleteMessagesWithSd.Lock()
	mock.calls.PluralDeleteMessagesWithSd = append(mock.calls.PluralDeleteMessagesWithSd, callInfo)
	mock.lockPluralDeleteMessagesWithSd.Unlock()
	return mock.PluralDeleteMessagesWithSdFunc(ctx, sd, messageIDs)
}

// PluralDeleteMessagesWithSdCalls gets all the calls that were made to PluralDeleteMessagesWithSd.
// Check the length with:
//
//	len(mockedStore.PluralDeleteMessagesWithSdCalls())
func (mock *StoreMock) PluralDeleteMessagesWithSdCalls() []struct {
	Ctx        context.Context
	Sd         Sd
	MessageIDs []uuid.UUID
} {
	var calls []struct {
		Ctx        context.Context
		Sd         Sd
		MessageIDs []uuid.UUID
	}
	mock.lockPluralDeleteMessagesWithSd.RLock()
	calls = mock.calls.PluralDeleteMessagesWithSd
	mock.lockPluralDeleteMessagesWithSd.RUnlock()
	return calls
}

// PluralDeleteMimeTypes calls PluralDeleteMimeTypesFunc.
func (mock *StoreMock) PluralDeleteMimeTypes(ctx context.Context, mimeTypeIDs []uuid.UUID) (int64, error) {
	if mock.PluralDeleteMimeTypesFunc == nil {
		panic("StoreMock.PluralDeleteMimeTypesFunc: method is nil but Store.PluralDeleteMimeTypes was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		MimeTypeIDs []uuid.UUID
	}{
		Ctx:         ctx,
		MimeTypeIDs: mimeTypeIDs,
	}
	mock.lockPluralDeleteMimeTypes.Lock()
	mock.calls.PluralDeleteMimeTypes = append(mock.calls.PluralDeleteMimeTypes, callInfo)
	mock.lockPluralDeleteMimeTypes.Unlock()
	return mock.PluralDeleteMimeTypesFunc(ctx, mimeTypeIDs)
}

// PluralDeleteMimeTypesCalls gets all the calls that were made to PluralDeleteMimeTypes.
// Check the length with:
//
//	len(mockedStore.PluralDeleteMimeTypesCalls())
func (mock *StoreMock) PluralDeleteMimeTypesCalls() []struct {
	Ctx         context.Context
	MimeTypeIDs []uuid.UUID
} {
	var calls []struct {
		Ctx         context.Context
		MimeTypeIDs []uuid.UUID
	}
	mock.lockPluralDeleteMimeTypes.RLock()
	calls = mock.calls.PluralDeleteMimeTypes
	mock.lockPluralDeleteMimeTypes.RUnlock()
	return calls
}

// PluralDeleteMimeTypesWithSd calls PluralDeleteMimeTypesWithSdFunc.
func (mock *StoreMock) PluralDeleteMimeTypesWithSd(ctx context.Context, sd Sd, mimeTypeIDs []uuid.UUID) (int64, error) {
	if mock.PluralDeleteMimeTypesWithSdFunc == nil {
		panic("StoreMock.PluralDeleteMimeTypesWithSdFunc: method is nil but Store.PluralDeleteMimeTypesWithSd was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Sd          Sd
		MimeTypeIDs []uuid.UUID
	}{
		Ctx:         ctx,
		Sd:          sd,
		MimeTypeIDs: mimeTypeIDs,
	}
	mock.lockPluralDeleteMimeTypesWithSd.Lock()
	mock.calls.PluralDeleteMimeTypesWithSd = append(mock.calls.PluralDeleteMimeTypesWithSd, callInfo)
	mock.lockPluralDeleteMimeTypesWithSd.Unlock()
	return mock.PluralDeleteMimeTypesWithSdFunc(ctx, sd, mimeTypeIDs)
}

// PluralDeleteMimeTypesWithSdCalls gets all the calls that were made to PluralDeleteMimeTypesWithSd.
// Check the length with:
//
//	len(mockedStore.PluralDeleteMimeTypesWithSdCalls())
func (mock *StoreMock) PluralDeleteMimeTypesWithSdCalls() []struct {
	Ctx         context.Context
	Sd          Sd
	MimeTypeIDs []uuid.UUID
} {
	var calls []struct {
		Ctx         context.Context
		Sd          Sd
		MimeTypeIDs []uuid.UUID
	}
	mock.lockPluralDeleteMimeTypesWithSd.RLock()
	calls = mock.calls.PluralDeleteMimeTypesWithSd
	mock.lockPluralDeleteMimeTypesWithSd.RUnlock()
	return calls
}

// PluralDeleteOrganizations calls PluralDeleteOrganizationsFunc.
func (mock *StoreMock) PluralDeleteOrganizations(ctx context.Context, organizationIDs []uuid.UUID) (int64, error) {
	if mock.PluralDeleteOrganizationsFunc == nil {
		panic("StoreMock.PluralDeleteOrganizationsFunc: method is nil but Store.PluralDeleteOrganizations was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		OrganizationIDs []uuid.UUID
	}{
		Ctx:             ctx,
		OrganizationIDs: organizationIDs,
	}
	mock.lockPluralDeleteOrganizations.Lock()
	mock.calls.PluralDeleteOrganizations = append(mock.calls.PluralDeleteOrganizations, callInfo)
	mock.lockPluralDeleteOrganizations.Unlock()
	return mock.PluralDeleteOrganizationsFunc(ctx, organizationIDs)
}

// PluralDeleteOrganizationsCalls gets all the calls that were made to PluralDeleteOrganizations.
// Check the length with:
//
//	len(mockedStore.PluralDeleteOrganizationsCalls())
func (mock *StoreMock) PluralDeleteOrganizationsCalls() []struct {
	Ctx             context.Context
	OrganizationIDs []uuid.UUID
} {
	var calls []struct {
		Ctx             context.Context
		OrganizationIDs []uuid.UUID
	}
	mock.lockPluralDeleteOrganizations.RLock()
	calls = mock.calls.PluralDeleteOrganizations
	mock.lockPluralDeleteOrganizations.RUnlock()
	return calls
}

// PluralDeleteOrganizationsWithSd calls PluralDeleteOrganizationsWithSdFunc.
func (mock *StoreMock) PluralDeleteOrganizationsWithSd(ctx context.Context, sd Sd, organizationIDs []uuid.UUID) (int64, error) {
	if mock.PluralDeleteOrganizationsWithSdFunc == nil {
		panic("StoreMock.PluralDeleteOrganizationsWithSdFunc: method is nil but Store.PluralDeleteOrganizationsWithSd was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		Sd              Sd
		OrganizationIDs []uuid.UUID
	}{
		Ctx:             ctx,
		Sd:              sd,
		OrganizationIDs: organizationIDs,
	}
	mock.lockPluralDeleteOrganizationsWithSd.Lock()
	mock.calls.PluralDeleteOrganizationsWithSd = append(mock.calls.PluralDeleteOrganizationsWithSd, callInfo)
	mock.lockPluralDeleteOrganizationsWithSd.Unlock()
	return mock.PluralDeleteOrganizationsWithSdFunc(ctx, sd, organizationIDs)
}

// PluralDeleteOrganizationsWithSdCalls gets all the calls that were made to PluralDeleteOrganizationsWithSd.
// Check the length with:
//
//	len(mockedStore.PluralDeleteOrganizationsWithSdCalls())
func (mock *StoreMock) PluralDeleteOrganizationsWithSdCalls() []struct {
	Ctx             context.Context
	Sd              Sd
	OrganizationIDs []uuid.UUID
} {
	var calls []struct {
		Ctx             context.Context
		Sd              Sd
		OrganizationIDs []uuid.UUID
	}
	mock.lockPluralDeleteOrganizationsWithSd.RLock()
	calls = mock.calls.PluralDeleteOrganizationsWithSd
	mock.lockPluralDeleteOrganizationsWithSd.RUnlock()
	return calls
}

// PluralDeletePermissionCategories calls PluralDeletePermissionCategoriesFunc.
func (mock *StoreMock) PluralDeletePermissionCategories(ctx context.Context, permissionCategoryIDs []uuid.UUID) (int64, error) {
	if mock.PluralDeletePermissionCategoriesFunc == nil {
		panic("StoreMock.PluralDeletePermissionCategoriesFunc: method is nil but Store.PluralDeletePermissionCategories was just called")
	}
	callInfo := struct {
		Ctx                   context.Context
		PermissionCategoryIDs []uuid.UUID
	}{
		Ctx:                   ctx,
		PermissionCategoryIDs: permissionCategoryIDs,
	}
	mock.lockPluralDeletePermissionCategories.Lock()
	mock.calls.PluralDeletePermissionCategories = append(mock.calls.PluralDeletePermissionCategories, callInfo)
	mock.lockPluralDeletePermissionCategories.Unlock()
	return mock.PluralDeletePermissionCategoriesFunc(ctx, permissionCategoryIDs)
}

// PluralDeletePermissionCategoriesCalls gets all the calls that were made to PluralDeletePermissionCategories.
// Check the length with:
//
//	len(mockedStore.PluralDeletePermissionCategoriesCalls())
func (mock *StoreMock) PluralDeletePermissionCategoriesCalls() []struct {
	Ctx                   context.Context
	PermissionCategoryIDs []uuid.UUID
} {
	var calls []struct {
		Ctx                   context.Context
		PermissionCategoryIDs []uuid.UUID
	}
	mock.lockPluralDeletePermissionCategories.RLock()
	calls = mock.calls.PluralDeletePermissionCategories
	mock.lockPluralDeletePermissionCategories.RUnlock()
	return calls
}

// PluralDeletePermissionCategoriesWithSd calls PluralDeletePermissionCategoriesWithSdFunc.
func (mock *StoreMock) PluralDeletePermissionCategoriesWithSd(ctx context.Context, sd Sd, permissionCategoryIDs []uuid.UUID) (int64, error) {
	if mock.PluralDeletePermissionCategoriesWithSdFunc == nil {
		panic("StoreMock.PluralDeletePermissionCategoriesWithSdFunc: method is nil but Store.PluralDeletePermissionCategoriesWithSd was just called")
	}
	callInfo := struct {
		Ctx                   context.Context
		Sd                    Sd
		PermissionCategoryIDs []uuid.UUID
	}{
		Ctx:                   ctx,
		Sd:                    sd,
		PermissionCategoryIDs: permissionCategoryIDs,
	}
	mock.lockPluralDeletePermissionCategoriesWithSd.Lock()
	mock.calls.PluralDeletePermissionCategoriesWithSd = append(mock.calls.PluralDeletePermissionCategoriesWithSd, callInfo)
	mock.lockPluralDeletePermissionCategoriesWithSd.Unlock()
	return mock.PluralDeletePermissionCategoriesWithSdFunc(ctx, sd, permissionCategoryIDs)
}

// PluralDeletePermissionCategoriesWithSdCalls gets all the calls that were made to PluralDeletePermissionCategoriesWithSd.
// Check the length with:
//
//	len(mockedStore.PluralDeletePermissionCategoriesWithSdCalls())
func (mock *StoreMock) PluralDeletePermissionCategoriesWithSdCalls() []struct {
	Ctx                   context.Context
	Sd                    Sd
	PermissionCategoryIDs []uuid.UUID
} {
	var calls []struct {
		Ctx                   context.Context
		Sd                    Sd
		PermissionCategoryIDs []uuid.UUID
	}
	mock.lockPluralDeletePermissionCategoriesWithSd.RLock()
	calls = mock.calls.PluralDeletePermissionCategoriesWithSd
	mock.lockPluralDeletePermissionCategoriesWithSd.RUnlock()
	return calls
}

// PluralDeletePermissions calls PluralDeletePermissionsFunc.
func (mock *StoreMock) PluralDeletePermissions(ctx context.Context, permissionIDs []uuid.UUID) (int64, error) {
	if mock.PluralDeletePermissionsFunc == nil {
		panic("StoreMock.PluralDeletePermissionsFunc: method is nil but Store.PluralDeletePermissions was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		PermissionIDs []uuid.UUID
	}{
		Ctx:           ctx,
		PermissionIDs: permissionIDs,
	}
	mock.lockPluralDeletePermissions.Lock()
	mock.calls.PluralDeletePermissions = append(mock.calls.PluralDeletePermissions, callInfo)
	mock.lockPluralDeletePermissions.Unlock()
	return mock.PluralDeletePermissionsFunc(ctx, permissionIDs)
}

// PluralDeletePermissionsCalls gets all the calls that were made to PluralDeletePermissions.
// Check the length with:
//
//	len(mockedStore.PluralDeletePermissionsCalls())
func (mock *StoreMock) PluralDeletePermissionsCalls() []struct {
	Ctx           context.Context
	PermissionIDs []uuid.UUID
} {
	var calls []struct {
		Ctx           context.Context
		PermissionIDs []uuid.UUID
	}
	mock.lockPluralDeletePermissions.RLock()
	calls = mock.calls.PluralDeletePermissions
	mock.lockPluralDeletePermissions.RUnlock()
	return calls
}

// PluralDeletePermissionsWithSd calls PluralDeletePermissionsWithSdFunc.
func (mock *StoreMock) PluralDeletePermissionsWithSd(ctx context.Context, sd Sd, permissionIDs []uuid.UUID) (int64, error) {
	if mock.PluralDeletePermissionsWithSdFunc == nil {
		panic("StoreMock.PluralDeletePermissionsWithSdFunc: method is nil but Store.PluralDeletePermissionsWithSd was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		Sd            Sd
		PermissionIDs []uuid.UUID
	}{
		Ctx:           ctx,
		Sd:            sd,
		PermissionIDs: permissionIDs,
	}
	mock.lockPluralDeletePermissionsWithSd.Lock()
	mock.calls.PluralDeletePermissionsWithSd = append(mock.calls.PluralDeletePermissionsWithSd, callInfo)
	mock.lockPluralDeletePermissionsWithSd.Unlock()
	return mock.PluralDeletePermissionsWithSdFunc(ctx, sd, permissionIDs)
}

// PluralDeletePermissionsWithSdCalls gets all the calls that were made to PluralDeletePermissionsWithSd.
// Check the length with:
//
//	len(mockedStore.PluralDeletePermissionsWithSdCalls())
func (mock *StoreMock) PluralDeletePermissionsWithSdCalls() []struct {
	Ctx           context.Context
	Sd            Sd
	PermissionIDs []uuid.UUID
} {
	var calls []struct {
		Ctx           context.Context
		Sd            Sd
		PermissionIDs []uuid.UUID
	}
	mock.lockPluralDeletePermissionsWithSd.RLock()
	calls = mock.calls.PluralDeletePermissionsWithSd
	mock.lockPluralDeletePermissionsWithSd.RUnlock()
	return calls
}

// PluralDeletePolicies calls PluralDeletePoliciesFunc.
func (mock *StoreMock) PluralDeletePolicies(ctx context.Context, policyIDs []uuid.UUID) (int64, error) {
	if mock.PluralDeletePoliciesFunc == nil {
		panic("StoreMock.PluralDeletePoliciesFunc: method is nil but Store.PluralDeletePolicies was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		PolicyIDs []uuid.UUID
	}{
		Ctx:       ctx,
		PolicyIDs: policyIDs,
	}
	mock.lockPluralDeletePolicies.Lock()
	mock.calls.PluralDeletePolicies = append(mock.calls.PluralDeletePolicies, callInfo)
	mock.lockPluralDeletePolicies.Unlock()
	return mock.PluralDeletePoliciesFunc(ctx, policyIDs)
}

// PluralDeletePoliciesCalls gets all the calls that were made to PluralDeletePolicies.
// Check the length with:
//
//	len(mockedStore.PluralDeletePoliciesCalls())
func (mock *StoreMock) PluralDeletePoliciesCalls() []struct {
	Ctx       context.Context
	PolicyIDs []uuid.UUID
} {
	var calls []struct {
		Ctx       context.Context
		PolicyIDs []uuid.UUID
	}
	mock.lockPluralDeletePolicies.RLock()
	calls = mock.calls.PluralDeletePolicies
	mock.lockPluralDeletePolicies.RUnlock()
	return calls
}

// PluralDeletePoliciesWithSd calls PluralDeletePoliciesWithSdFunc.
func (mock *StoreMock) PluralDeletePoliciesWithSd(ctx context.Context, sd Sd, policyIDs []uuid.UUID) (int64, error) {
	if mock.PluralDeletePoliciesWithSdFunc == nil {
		panic("StoreMock.PluralDeletePoliciesWithSdFunc: method is nil but Store.PluralDeletePoliciesWithSd was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Sd        Sd
		PolicyIDs []uuid.UUID
	}{
		Ctx:       ctx,
		Sd:        sd,
		PolicyIDs: policyIDs,
	}
	mock.lockPluralDeletePoliciesWithSd.Lock()
	mock.calls.PluralDeletePoliciesWithSd = append(mock.calls.PluralDeletePoliciesWithSd, callInfo)
	mock.lockPluralDeletePoliciesWithSd.Unlock()
	return mock.PluralDeletePoliciesWithSdFunc(ctx, sd, policyIDs)
}

// PluralDeletePoliciesWithSdCalls gets all the calls that were made to PluralDeletePoliciesWithSd.
// Check the length with:
//
//	len(mockedStore.PluralDeletePoliciesWithSdCalls())
func (mock *StoreMock) PluralDeletePoliciesWithSdCalls() []struct {
	Ctx       context.Context
	Sd        Sd
	PolicyIDs []uuid.UUID
} {
	var calls []struct {
		Ctx       context.Context
		Sd        Sd
		PolicyIDs []uuid.UUID
	}
	mock.lockPluralDeletePoliciesWithSd.RLock()
	calls = mock.calls.PluralDeletePoliciesWithSd
	mock.lockPluralDeletePoliciesWithSd.RUnlock()
	return calls
}

// PluralDeletePolicyCategories calls PluralDeletePolicyCategoriesFunc.
func (mock *StoreMock) PluralDeletePolicyCategories(ctx context.Context, policyCategoryIDs []uuid.UUID) (int64, error) {
	if mock.PluralDeletePolicyCategoriesFunc == nil {
		panic("StoreMock.PluralDeletePolicyCategoriesFunc: method is nil but Store.PluralDeletePolicyCategories was just called")
	}
	callInfo := struct {
		Ctx               context.Context
		PolicyCategoryIDs []uuid.UUID
	}{
		Ctx:               ctx,
		PolicyCategoryIDs: policyCategoryIDs,
	}
	mock.lockPluralDeletePolicyCategories.Lock()
	mock.calls.PluralDeletePolicyCategories = append(mock.calls.PluralDeletePolicyCategories, callInfo)
	mock.lockPluralDeletePolicyCategories.Unlock()
	return mock.PluralDeletePolicyCategoriesFunc(ctx, policyCategoryIDs)
}

// PluralDeletePolicyCategoriesCalls gets all the calls that were made to PluralDeletePolicyCategories.
// Check the length with:
//
//	len(mockedStore.PluralDeletePolicyCategoriesCalls())
func (mock *StoreMock) PluralDeletePolicyCategoriesCalls() []struct {
	Ctx               context.Context
	PolicyCategoryIDs []uuid.UUID
} {
	var calls []struct {
		Ctx               context.Context
		PolicyCategoryIDs []uuid.UUID
	}
	mock.lockPluralDeletePolicyCategories.RLock()
	calls = mock.calls.PluralDeletePolicyCategories
	mock.lockPluralDeletePolicyCategories.RUnlock()
	return calls
}

// PluralDeletePolicyCategoriesWithSd calls PluralDeletePolicyCategoriesWithSdFunc.
func (mock *StoreMock) PluralDeletePolicyCategoriesWithSd(ctx context.Context, sd Sd, policyCategoryIDs []uuid.UUID) (int64, error) {
	if mock.PluralDeletePolicyCategoriesWithSdFunc == nil {
		panic("StoreMock.PluralDeletePolicyCategoriesWithSdFunc: method is nil but Store.PluralDeletePolicyCategoriesWithSd was just called")
	}
	callInfo := struct {
		Ctx               context.Context
		Sd                Sd
		PolicyCategoryIDs []uuid.UUID
	}{
		Ctx:               ctx,
		Sd:                sd,
		PolicyCategoryIDs: policyCategoryIDs,
	}
	mock.lockPluralDeletePolicyCategoriesWithSd.Lock()
	mock.calls.PluralDeletePolicyCategoriesWithSd = append(mock.calls.PluralDeletePolicyCategoriesWithSd, callInfo)
	mock.lockPluralDeletePolicyCategoriesWithSd.Unlock()
	return mock.PluralDeletePolicyCategoriesWithSdFunc(ctx, sd, policyCategoryIDs)
}

// PluralDeletePolicyCategoriesWithSdCalls gets all the calls that were made to PluralDeletePolicyCategoriesWithSd.
// Check the length with:
//
//	len(mockedStore.PluralDeletePolicyCategoriesWithSdCalls())
func (mock *StoreMock) PluralDeletePolicyCategoriesWithSdCalls() []struct {
	Ctx               context.Context
	Sd                Sd
	PolicyCategoryIDs []uuid.UUID
} {
	var calls []struct {
		Ctx               context.Context
		Sd                Sd
		PolicyCategoryIDs []uuid.UUID
	}
	mock.lockPluralDeletePolicyCategoriesWithSd.RLock()
	calls = mock.calls.PluralDeletePolicyCategoriesWithSd
	mock.lockPluralDeletePolicyCategoriesWithSd.RUnlock()
	return calls
}

// PluralDeleteProfessors calls PluralDeleteProfessorsFunc.
func (mock *StoreMock) PluralDeleteProfessors(ctx context.Context, professorIDs []uuid.UUID) (int64, error) {
	if mock.PluralDeleteProfessorsFunc == nil {
		panic("StoreMock.PluralDeleteProfessorsFunc: method is nil but Store.PluralDeleteProfessors was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		ProfessorIDs []uuid.UUID
	}{
		Ctx:          ctx,
		ProfessorIDs: professorIDs,
	}
	mock.lockPluralDeleteProfessors.Lock()
	mock.calls.PluralDeleteProfessors = append(mock.calls.PluralDeleteProfessors, callInfo)
	mock.lockPluralDeleteProfessors.Unlock()
	return mock.PluralDeleteProfessorsFunc(ctx, professorIDs)
}

// PluralDeleteProfessorsCalls gets all the calls that were made to PluralDeleteProfessors.
// Check the length with:
//
//	len(mockedStore.PluralDeleteProfessorsCalls())
func (mock *StoreMock) PluralDeleteProfessorsCalls() []struct {
	Ctx          context.Context
	ProfessorIDs []uuid.UUID
} {
	var calls []struct {
		Ctx          context.Context
		ProfessorIDs []uuid.UUID
	}
	mock.lockPluralDeleteProfessors.RLock()
	calls = mock.calls.PluralDeleteProfessors
	mock.lockPluralDeleteProfessors.RUnlock()
	return calls
}

// PluralDeleteProfessorsWithSd calls PluralDeleteProfessorsWithSdFunc.
func (mock *StoreMock) PluralDeleteProfessorsWithSd(ctx context.Context, sd Sd, professorIDs []uuid.UUID) (int64, error) {
	if mock.PluralDeleteProfessorsWithSdFunc == nil {
		panic("StoreMock.PluralDeleteProfessorsWithSdFunc: method is nil but Store.PluralDeleteProfessorsWithSd was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		Sd           Sd
		ProfessorIDs []uuid.UUID
	}{
		Ctx:          ctx,
		Sd:           sd,
		ProfessorIDs: professorIDs,
	}
	mock.lockPluralDeleteProfessorsWithSd.Lock()
	mock.calls.PluralDeleteProfessorsWithSd = append(mock.calls.PluralDeleteProfessorsWithSd, callInfo)
	mock.lockPluralDeleteProfessorsWithSd.Unlock()
	return mock.PluralDeleteProfessorsWithSdFunc(ctx, sd, professorIDs)
}

// PluralDeleteProfessorsWithSdCalls gets all the calls that were made to PluralDeleteProfessorsWithSd.
// Check the length with:
//
//	len(mockedStore.PluralDeleteProfessorsWithSdCalls())
func (mock *StoreMock) PluralDeleteProfessorsWithSdCalls() []struct {
	Ctx          context.Context
	Sd           Sd
	ProfessorIDs []uuid.UUID
} {
	var calls []struct {
		Ctx          context.Context
		Sd           Sd
		ProfessorIDs []uuid.UUID
	}
	mock.lockPluralDeleteProfessorsWithSd.RLock()
	calls = mock.calls.PluralDeleteProfessorsWithSd
	mock.lockPluralDeleteProfessorsWithSd.RUnlock()
	return calls
}

// PluralDeleteRecordTypes calls PluralDeleteRecordTypesFunc.
func (mock *StoreMock) PluralDeleteRecordTypes(ctx context.Context, recordTypeIDs []uuid.UUID) (int64, error) {
	if mock.PluralDeleteRecordTypesFunc == nil {
		panic("StoreMock.PluralDeleteRecordTypesFunc: method is nil but Store.PluralDeleteRecordTypes was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		RecordTypeIDs []uuid.UUID
	}{
		Ctx:           ctx,
		RecordTypeIDs: recordTypeIDs,
	}
	mock.lockPluralDeleteRecordTypes.Lock()
	mock.calls.PluralDeleteRecordTypes = append(mock.calls.PluralDeleteRecordTypes, callInfo)
	mock.lockPluralDeleteRecordTypes.Unlock()
	return mock.PluralDeleteRecordTypesFunc(ctx, recordTypeIDs)
}

// PluralDeleteRecordTypesCalls gets all the calls that were made to PluralDeleteRecordTypes.
// Check the length with:
//
//	len(mockedStore.PluralDeleteRecordTypesCalls())
func (mock *StoreMock) PluralDeleteRecordTypesCalls() []struct {
	Ctx           context.Context
	RecordTypeIDs []uuid.UUID
} {
	var calls []struct {
		Ctx           context.Context
		RecordTypeIDs []uuid.UUID
	}
	mock.lockPluralDeleteRecordTypes.RLock()
	calls = mock.calls.PluralDeleteRecordTypes
	mock.lockPluralDeleteRecordTypes.RUnlock()
	return calls
}

// PluralDeleteRecordTypesWithSd calls PluralDeleteRecordTypesWithSdFunc.
func (mock *StoreMock) PluralDeleteRecordTypesWithSd(ctx context.Context, sd Sd, recordTypeIDs []uuid.UUID) (int64, error) {
	if mock.PluralDeleteRecordTypesWithSdFunc == nil {
		panic("StoreMock.PluralDeleteRecordTypesWithSdFunc: method is nil but Store.PluralDeleteRecordTypesWithSd was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		Sd            Sd
		RecordTypeIDs []uuid.UUID
	}{
		Ctx:           ctx,
		Sd:            sd,
		RecordTypeIDs: recordTypeIDs,
	}
	mock.lockPluralDeleteRecordTypesWithSd.Lock()
	mock.calls.PluralDeleteRecordTypesWithSd = append(mock.calls.PluralDeleteRecordTypesWithSd, callInfo)
	mock.lockPluralDeleteRecordTypesWithSd.Unlock()
	return mock.PluralDeleteRecordTypesWithSdFunc(ctx, sd, recordTypeIDs)
}

// PluralDeleteRecordTypesWithSdCalls gets all the calls that were made to PluralDeleteRecordTypesWithSd.
// Check the length with:
//
//	len(mockedStore.PluralDeleteRecordTypesWithSdCalls())
func (mock *StoreMock) PluralDeleteRecordTypesWithSdCalls() []struct {
	Ctx           context.Context
	Sd            Sd
	RecordTypeIDs []uuid.UUID
} {
	var calls []struct {
		Ctx           context.Context
		Sd            Sd
		RecordTypeIDs []uuid.UUID
	}
	mock.lockPluralDeleteRecordTypesWithSd.RLock()
	calls = mock.calls.PluralDeleteRecordTypesWithSd
	mock.lockPluralDeleteRecordTypesWithSd.RUnlock()
	return calls
}

// PluralDeleteRoles calls PluralDeleteRolesFunc.
func (mock *StoreMock) PluralDeleteRoles(ctx context.Context, roleIDs []uuid.UUID) (int64, error) {
	if mock.PluralDeleteRolesFunc == nil {
		panic("StoreMock.PluralDeleteRolesFunc: method is nil but Store.PluralDeleteRoles was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		RoleIDs []uuid.UUID
	}{
		Ctx:     ctx,
		RoleIDs: roleIDs,
	}
	mock.lockPluralDeleteRoles.Lock()
	mock.calls.PluralDeleteRoles = append(mock.calls.PluralDeleteRoles, callInfo)
	mock.lockPluralDeleteRoles.Unlock()
	return mock.PluralDeleteRolesFunc(ctx, roleIDs)
}

// PluralDeleteRolesCalls gets all the calls that were made to PluralDeleteRoles.
// Check the length with:
//
//	len(mockedStore.PluralDeleteRolesCalls())
func (mock *StoreMock) PluralDeleteRolesCalls() []struct {
	Ctx     context.Context
	RoleIDs []uuid.UUID
} {
	var calls []struct {
		Ctx     context.Context
		RoleIDs []uuid.UUID
	}
	mock.lockPluralDeleteRoles.RLock()
	calls = mock.calls.PluralDeleteRoles
	mock.lockPluralDeleteRoles.RUnlock()
	return calls
}

// PluralDeleteRolesWithSd calls PluralDeleteRolesWithSdFunc.
func (mock *StoreMock) PluralDeleteRolesWithSd(ctx context.Context, sd Sd, roleIDs []uuid.UUID) (int64, error) {
	if mock.PluralDeleteRolesWithSdFunc == nil {
		panic("StoreMock.PluralDeleteRolesWithSdFunc: method is nil but Store.PluralDeleteRolesWithSd was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Sd      Sd
		RoleIDs []uuid.UUID
	}{
		Ctx:     ctx,
		Sd:      sd,
		RoleIDs: roleIDs,
	}
	mock.lockPluralDeleteRolesWithSd.Lock()
	mock.calls.PluralDeleteRolesWithSd = append(mock.calls.PluralDeleteRolesWithSd, callInfo)
	mock.lockPluralDeleteRolesWithSd.Unlock()
	return mock.PluralDeleteRolesWithSdFunc(ctx, sd, roleIDs)
}

// PluralDeleteRolesWithSdCalls gets all the calls that were made to PluralDeleteRolesWithSd.
// Check the length with:
//
//	len(mockedStore.PluralDeleteRolesWithSdCalls())
func (mock *StoreMock) PluralDeleteRolesWithSdCalls() []struct {
	Ctx     context.Context
	Sd      Sd
	RoleIDs []uuid.UUID
} {
	var calls []struct {
		Ctx     context.Context
		Sd      Sd
		RoleIDs []uuid.UUID
	}
	mock.lockPluralDeleteRolesWithSd.RLock()
	calls = mock.calls.PluralDeleteRolesWithSd
	mock.lockPluralDeleteRolesWithSd.RUnlock()
	return calls
}

// PluralDeleteStudents calls PluralDeleteStudentsFunc.
func (mock *StoreMock) PluralDeleteStudents(ctx context.Context, studentIDs []uuid.UUID) (int64, error) {
	if mock.PluralDeleteStudentsFunc == nil {
		panic("StoreMock.PluralDeleteStudentsFunc: method is nil but Store.PluralDeleteStudents was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		StudentIDs []uuid.UUID
	}{
		Ctx:        ctx,
		StudentIDs: studentIDs,
	}
	mock.lockPluralDeleteStudents.Lock()
	mock.calls.PluralDeleteStudents = append(mock.calls.PluralDeleteStudents, callInfo)
	mock.lockPluralDeleteStudents.Unlock()
	return mock.PluralDeleteStudentsFunc(ctx, studentIDs)
}

// PluralDeleteStudentsCalls gets all the calls that were made to PluralDeleteStudents.
// Check the length with:
//
//	len(mockedStore.PluralDeleteStudentsCalls())
func (mock *StoreMock) PluralDeleteStudentsCalls() []struct {
	Ctx        context.Context
	StudentIDs []uuid.UUID
} {
	var calls []struct {
		Ctx        context.Context
		StudentIDs []uuid.UUID
	}
	mock.lockPluralDeleteStudents.RLock()
	calls = mock.calls.PluralDeleteStudents
	mock.lockPluralDeleteStudents.RUnlock()
	return calls
}

// PluralDeleteStudentsWithSd calls PluralDeleteStudentsWithSdFunc.
func (mock *StoreMock) PluralDeleteStudentsWithSd(ctx context.Context, sd Sd, studentIDs []uuid.UUID) (int64, error) {
	if mock.PluralDeleteStudentsWithSdFunc == nil {
		panic("StoreMock.PluralDeleteStudentsWithSdFunc: method is nil but Store.PluralDeleteStudentsWithSd was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Sd         Sd
		StudentIDs []uuid.UUID
	}{
		Ctx:        ctx,
		Sd:         sd,
		StudentIDs: studentIDs,
	}
	mock.lockPluralDeleteStudentsWithSd.Lock()
	mock.calls.PluralDeleteStudentsWithSd = append(mock.calls.PluralDeleteStudentsWithSd, callInfo)
	mock.lockPluralDeleteStudentsWithSd.Unlock()
	return mock.PluralDeleteStudentsWithSdFunc(ctx, sd, studentIDs)
}

// PluralDeleteStudentsWithSdCalls gets all the calls that were made to PluralDeleteStudentsWithSd.
// Check the length with:
//
//	len(mockedStore.PluralDeleteStudentsWithSdCalls())
func (mock *StoreMock) PluralDeleteStudentsWithSdCalls() []struct {
	Ctx        context.Context
	Sd         Sd
	StudentIDs []uuid.UUID
} {
	var calls []struct {
		Ctx        context.Context
		Sd         Sd
		StudentIDs []uuid.UUID
	}
	mock.lockPluralDeleteStudentsWithSd.RLock()
	calls = mock.calls.PluralDeleteStudentsWithSd
	mock.lockPluralDeleteStudentsWithSd.RUnlock()
	return calls
}

// PluralDetachItemsOnMessage calls PluralDetachItemsOnMessageFunc.
func (mock *StoreMock) PluralDetachItemsOnMessage(ctx context.Context, messageID uuid.UUID, attachedItemIDs []uuid.UUID) (int64, error) {
	if mock.PluralDetachItemsOnMessageFunc == nil {
		panic("StoreMock.PluralDetachItemsOnMessageFunc: method is nil but Store.PluralDetachItemsOnMessage was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		MessageID       uuid.UUID
		AttachedItemIDs []uuid.UUID
	}{
		Ctx:             ctx,
		MessageID:       messageID,
		AttachedItemIDs: attachedItemIDs,
	}
	mock.lockPluralDetachItemsOnMessage.Lock()
	mock.calls.PluralDetachItemsOnMessage = append(mock.calls.PluralDetachItemsOnMessage, callInfo)
	mock.lockPluralDetachItemsOnMessage.Unlock()
	return mock.PluralDetachItemsOnMessageFunc(ctx, messageID, attachedItemIDs)
}

// PluralDetachItemsOnMessageCalls gets all the calls that were made to PluralDetachItemsOnMessage.
// Check the length with:
//
//	len(mockedStore.PluralDetachItemsOnMessageCalls())
func (mock *StoreMock) PluralDetachItemsOnMessageCalls() []struct {
	Ctx             context.Context
	MessageID       uuid.UUID
	AttachedItemIDs []uuid.UUID
} {
	var calls []struct {
		Ctx             context.Context
		MessageID       uuid.UUID
		AttachedItemIDs []uuid.UUID
	}
	mock.lockPluralDetachItemsOnMessage.RLock()
	calls = mock.calls.PluralDetachItemsOnMessage
	mock.lockPluralDetachItemsOnMessage.RUnlock()
	return calls
}

// PluralDetachItemsOnMessageWithSd calls PluralDetachItemsOnMessageWithSdFunc.
func (mock *StoreMock) PluralDetachItemsOnMessageWithSd(ctx context.Context, sd Sd, messageID uuid.UUID, attachedItemIDs []uuid.UUID) (int64, error) {
	if mock.PluralDetachItemsOnMessageWithSdFunc == nil {
		panic("StoreMock.PluralDetachItemsOnMessageWithSdFunc: method is nil but Store.PluralDetachItemsOnMessageWithSd was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		Sd              Sd
		MessageID       uuid.UUID
		AttachedItemIDs []uuid.UUID
	}{
		Ctx:             ctx,
		Sd:              sd,
		MessageID:       messageID,
		AttachedItemIDs: attachedItemIDs,
	}
	mock.lockPluralDetachItemsOnMessageWithSd.Lock()
	mock.calls.PluralDetachItemsOnMessageWithSd = append(mock.calls.PluralDetachItemsOnMessageWithSd, callInfo)
	mock.lockPluralDetachItemsOnMessageWithSd.Unlock()
	return mock.PluralDetachItemsOnMessageWithSdFunc(ctx, sd, messageID, attachedItemIDs)
}

// PluralDetachItemsOnMessageWithSdCalls gets all the calls that were made to PluralDetachItemsOnMessageWithSd.
// Check the length with:
//
//	len(mockedStore.PluralDetachItemsOnMessageWithSdCalls())
func (mock *StoreMock) PluralDetachItemsOnMessageWithSdCalls() []struct {
	Ctx             context.Context
	Sd              Sd
	MessageID       uuid.UUID
	AttachedItemIDs []uuid.UUID
} {
	var calls []struct {
		Ctx             context.Context
		Sd              Sd
		MessageID       uuid.UUID
		AttachedItemIDs []uuid.UUID
	}
	mock.lockPluralDetachItemsOnMessageWithSd.RLock()
	calls = mock.calls.PluralDetachItemsOnMessageWithSd
	mock.lockPluralDetachItemsOnMessageWithSd.RUnlock()
	return calls
}

// PluralDisassociatePolicyOnRole calls PluralDisassociatePolicyOnRoleFunc.
func (mock *StoreMock) PluralDisassociatePolicyOnRole(ctx context.Context, roleID uuid.UUID, policyIDs []uuid.UUID) (int64, error) {
	if mock.PluralDisassociatePolicyOnRoleFunc == nil {
		panic("StoreMock.PluralDisassociatePolicyOnRoleFunc: method is nil but Store.PluralDisassociatePolicyOnRole was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		RoleID    uuid.UUID
		PolicyIDs []uuid.UUID
	}{
		Ctx:       ctx,
		RoleID:    roleID,
		PolicyIDs: policyIDs,
	}
	mock.lockPluralDisassociatePolicyOnRole.Lock()
	mock.calls.PluralDisassociatePolicyOnRole = append(mock.calls.PluralDisassociatePolicyOnRole, callInfo)
	mock.lockPluralDisassociatePolicyOnRole.Unlock()
	return mock.PluralDisassociatePolicyOnRoleFunc(ctx, roleID, policyIDs)
}

// PluralDisassociatePolicyOnRoleCalls gets all the calls that were made to PluralDisassociatePolicyOnRole.
// Check the length with:
//
//	len(mockedStore.PluralDisassociatePolicyOnRoleCalls())
func (mock *StoreMock) PluralDisassociatePolicyOnRoleCalls() []struct {
	Ctx       context.Context
	RoleID    uuid.UUID
	PolicyIDs []uuid.UUID
} {
	var calls []struct {
		Ctx       context.Context
		RoleID    uuid.UUID
		PolicyIDs []uuid.UUID
	}
	mock.lockPluralDisassociatePolicyOnRole.RLock()
	calls = mock.calls.PluralDisassociatePolicyOnRole
	mock.lockPluralDisassociatePolicyOnRole.RUnlock()
	return calls
}

// PluralDisassociatePolicyOnRoleWithSd calls PluralDisassociatePolicyOnRoleWithSdFunc.
func (mock *StoreMock) PluralDisassociatePolicyOnRoleWithSd(ctx context.Context, sd Sd, roleID uuid.UUID, policyIDs []uuid.UUID) (int64, error) {
	if mock.PluralDisassociatePolicyOnRoleWithSdFunc == nil {
		panic("StoreMock.PluralDisassociatePolicyOnRoleWithSdFunc: method is nil but Store.PluralDisassociatePolicyOnRoleWithSd was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Sd        Sd
		RoleID    uuid.UUID
		PolicyIDs []uuid.UUID
	}{
		Ctx:       ctx,
		Sd:        sd,
		RoleID:    roleID,
		PolicyIDs: policyIDs,
	}
	mock.lockPluralDisassociatePolicyOnRoleWithSd.Lock()
	mock.calls.PluralDisassociatePolicyOnRoleWithSd = append(mock.calls.PluralDisassociatePolicyOnRoleWithSd, callInfo)
	mock.lockPluralDisassociatePolicyOnRoleWithSd.Unlock()
	return mock.PluralDisassociatePolicyOnRoleWithSdFunc(ctx, sd, roleID, policyIDs)
}

// PluralDisassociatePolicyOnRoleWithSdCalls gets all the calls that were made to PluralDisassociatePolicyOnRoleWithSd.
// Check the length with:
//
//	len(mockedStore.PluralDisassociatePolicyOnRoleWithSdCalls())
func (mock *StoreMock) PluralDisassociatePolicyOnRoleWithSdCalls() []struct {
	Ctx       context.Context
	Sd        Sd
	RoleID    uuid.UUID
	PolicyIDs []uuid.UUID
} {
	var calls []struct {
		Ctx       context.Context
		Sd        Sd
		RoleID    uuid.UUID
		PolicyIDs []uuid.UUID
	}
	mock.lockPluralDisassociatePolicyOnRoleWithSd.RLock()
	calls = mock.calls.PluralDisassociatePolicyOnRoleWithSd
	mock.lockPluralDisassociatePolicyOnRoleWithSd.RUnlock()
	return calls
}

// PluralDisassociateRoleOnPolicy calls PluralDisassociateRoleOnPolicyFunc.
func (mock *StoreMock) PluralDisassociateRoleOnPolicy(ctx context.Context, policyID uuid.UUID, roleIDs []uuid.UUID) (int64, error) {
	if mock.PluralDisassociateRoleOnPolicyFunc == nil {
		panic("StoreMock.PluralDisassociateRoleOnPolicyFunc: method is nil but Store.PluralDisassociateRoleOnPolicy was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		PolicyID uuid.UUID
		RoleIDs  []uuid.UUID
	}{
		Ctx:      ctx,
		PolicyID: policyID,
		RoleIDs:  roleIDs,
	}
	mock.lockPluralDisassociateRoleOnPolicy.Lock()
	mock.calls.PluralDisassociateRoleOnPolicy = append(mock.calls.PluralDisassociateRoleOnPolicy, callInfo)
	mock.lockPluralDisassociateRoleOnPolicy.Unlock()
	return mock.PluralDisassociateRoleOnPolicyFunc(ctx, policyID, roleIDs)
}

// PluralDisassociateRoleOnPolicyCalls gets all the calls that were made to PluralDisassociateRoleOnPolicy.
// Check the length with:
//
//	len(mockedStore.PluralDisassociateRoleOnPolicyCalls())
func (mock *StoreMock) PluralDisassociateRoleOnPolicyCalls() []struct {
	Ctx      context.Context
	PolicyID uuid.UUID
	RoleIDs  []uuid.UUID
} {
	var calls []struct {
		Ctx      context.Context
		PolicyID uuid.UUID
		RoleIDs  []uuid.UUID
	}
	mock.lockPluralDisassociateRoleOnPolicy.RLock()
	calls = mock.calls.PluralDisassociateRoleOnPolicy
	mock.lockPluralDisassociateRoleOnPolicy.RUnlock()
	return calls
}

// PluralDisassociateRoleOnPolicyWithSd calls PluralDisassociateRoleOnPolicyWithSdFunc.
func (mock *StoreMock) PluralDisassociateRoleOnPolicyWithSd(ctx context.Context, sd Sd, policyID uuid.UUID, roleIDs []uuid.UUID) (int64, error) {
	if mock.PluralDisassociateRoleOnPolicyWithSdFunc == nil {
		panic("StoreMock.PluralDisassociateRoleOnPolicyWithSdFunc: method is nil but Store.PluralDisassociateRoleOnPolicyWithSd was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Sd       Sd
		PolicyID uuid.UUID
		RoleIDs  []uuid.UUID
	}{
		Ctx:      ctx,
		Sd:       sd,
		PolicyID: policyID,
		RoleIDs:  roleIDs,
	}
	mock.lockPluralDisassociateRoleOnPolicyWithSd.Lock()
	mock.calls.PluralDisassociateRoleOnPolicyWithSd = append(mock.calls.PluralDisassociateRoleOnPolicyWithSd, callInfo)
	mock.lockPluralDisassociateRoleOnPolicyWithSd.Unlock()
	return mock.PluralDisassociateRoleOnPolicyWithSdFunc(ctx, sd, policyID, roleIDs)
}

// PluralDisassociateRoleOnPolicyWithSdCalls gets all the calls that were made to PluralDisassociateRoleOnPolicyWithSd.
// Check the length with:
//
//	len(mockedStore.PluralDisassociateRoleOnPolicyWithSdCalls())
func (mock *StoreMock) PluralDisassociateRoleOnPolicyWithSdCalls() []struct {
	Ctx      context.Context
	Sd       Sd
	PolicyID uuid.UUID
	RoleIDs  []uuid.UUID
} {
	var calls []struct {
		Ctx      context.Context
		Sd       Sd
		PolicyID uuid.UUID
		RoleIDs  []uuid.UUID
	}
	mock.lockPluralDisassociateRoleOnPolicyWithSd.RLock()
	calls = mock.calls.PluralDisassociateRoleOnPolicyWithSd
	mock.lockPluralDisassociateRoleOnPolicyWithSd.RUnlock()
	return calls
}

// ReadReceipt calls ReadReceiptFunc.
func (mock *StoreMock) ReadReceipt(ctx context.Context, param parameter.ReadReceiptParam) (entity.ReadReceipt, error) {
	if mock.ReadReceiptFunc == nil {
		panic("StoreMock.ReadReceiptFunc: method is nil but Store.ReadReceipt was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Param parameter.ReadReceiptParam
	}{
		Ctx:   ctx,
		Param: param,
	}
	mock.lockReadReceipt.Lock()
	mock.calls.ReadReceipt = append(mock.calls.ReadReceipt, callInfo)
	mock.lockReadReceipt.Unlock()
	return mock.ReadReceiptFunc(ctx, param)
}

// ReadReceiptCalls gets all the calls that were made to ReadReceipt.
// Check the length with:
//
//	len(mockedStore.ReadReceiptCalls())
func (mock *StoreMock) ReadReceiptCalls() []struct {
	Ctx   context.Context
	Param parameter.ReadReceiptParam
} {
	var calls []struct {
		Ctx   context.Context
		Param parameter.ReadReceiptParam
	}
	mock.lockReadReceipt.RLock()
	calls = mock.calls.ReadReceipt
	mock.lockReadReceipt.RUnlock()
	return calls
}

// ReadReceiptWithSd calls ReadReceiptWithSdFunc.
func (mock *StoreMock) ReadReceiptWithSd(ctx context.Context, sd Sd, param parameter.ReadReceiptParam) (entity.ReadReceipt, error) {
	if mock.ReadReceiptWithSdFunc == nil {
		panic("StoreMock.ReadReceiptWithSdFunc: method is nil but Store.ReadReceiptWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.ReadReceiptParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Param: param,
	}
	mock.lockReadReceiptWithSd.Lock()
	mock.calls.ReadReceiptWithSd = append(mock.calls.ReadReceiptWithSd, callInfo)
	mock.lockReadReceiptWithSd.Unlock()
	return mock.ReadReceiptWithSdFunc(ctx, sd, param)
}

// ReadReceiptWithSdCalls gets all the calls that were made to ReadReceiptWithSd.
// Check the length with:
//
//	len(mockedStore.ReadReceiptWithSdCalls())
func (mock *StoreMock) ReadReceiptWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Param parameter.ReadReceiptParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.ReadReceiptParam
	}
	mock.lockReadReceiptWithSd.RLock()
	calls = mock.calls.ReadReceiptWithSd
	mock.lockReadReceiptWithSd.RUnlock()
	return calls
}

// ReadReceipts calls ReadReceiptsFunc.
func (mock *StoreMock) ReadReceipts(ctx context.Context, param parameter.ReadReceiptsParam) (int64, error) {
	if mock.ReadReceiptsFunc == nil {
		panic("StoreMock.ReadReceiptsFunc: method is nil but Store.ReadReceipts was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Param parameter.ReadReceiptsParam
	}{
		Ctx:   ctx,
		Param: param,
	}
	mock.lockReadReceipts.Lock()
	mock.calls.ReadReceipts = append(mock.calls.ReadReceipts, callInfo)
	mock.lockReadReceipts.Unlock()
	return mock.ReadReceiptsFunc(ctx, param)
}

// ReadReceiptsCalls gets all the calls that were made to ReadReceipts.
// Check the length with:
//
//	len(mockedStore.ReadReceiptsCalls())
func (mock *StoreMock) ReadReceiptsCalls() []struct {
	Ctx   context.Context
	Param parameter.ReadReceiptsParam
} {
	var calls []struct {
		Ctx   context.Context
		Param parameter.ReadReceiptsParam
	}
	mock.lockReadReceipts.RLock()
	calls = mock.calls.ReadReceipts
	mock.lockReadReceipts.RUnlock()
	return calls
}

// ReadReceiptsOnChatRoomAndMember calls ReadReceiptsOnChatRoomAndMemberFunc.
func (mock *StoreMock) ReadReceiptsOnChatRoomAndMember(ctx context.Context, chatRoomID uuid.UUID, memberID uuid.UUID, readAt time.Time) (int64, error) {
	if mock.ReadReceiptsOnChatRoomAndMemberFunc == nil {
		panic("StoreMock.ReadReceiptsOnChatRoomAndMemberFunc: method is nil but Store.ReadReceiptsOnChatRoomAndMember was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ChatRoomID uuid.UUID
		MemberID   uuid.UUID
		ReadAt     time.Time
	}{
		Ctx:        ctx,
		ChatRoomID: chatRoomID,
		MemberID:   memberID,
		ReadAt:     readAt,
	}
	mock.lockReadReceiptsOnChatRoomAndMember.Lock()
	mock.calls.ReadReceiptsOnChatRoomAndMember = append(mock.calls.ReadReceiptsOnChatRoomAndMember, callInfo)
	mock.lockReadReceiptsOnChatRoomAndMember.Unlock()
	return mock.ReadReceiptsOnChatRoomAndMemberFunc(ctx, chatRoomID, memberID, readAt)
}

// ReadReceiptsOnChatRoomAndMemberCalls gets all the calls that were made to ReadReceiptsOnChatRoomAndMember.
// Check the length with:
//
//	len(mockedStore.ReadReceiptsOnChatRoomAndMemberCalls())
func (mock *StoreMock) ReadReceiptsOnChatRoomAndMemberCalls() []struct {
	Ctx        context.Context
	ChatRoomID uuid.UUID
	MemberID   uuid.UUID
	ReadAt     time.Time
} {
	var calls []struct {
		Ctx        context.Context
		ChatRoomID uuid.UUID
		MemberID   uuid.UUID
		ReadAt     time.Time
	}
	mock.lockReadReceiptsOnChatRoomAndMember.RLock()
	calls = mock.calls.ReadReceiptsOnChatRoomAndMember
	mock.lockReadReceiptsOnChatRoomAndMember.RUnlock()
	return calls
}

// ReadReceiptsOnChatRoomAndMemberWithSd calls ReadReceiptsOnChatRoomAndMemberWithSdFunc.
func (mock *StoreMock) ReadReceiptsOnChatRoomAndMemberWithSd(ctx context.Context, sd Sd, chatRoomID uuid.UUID, memberID uuid.UUID, readAt time.Time) (int64, error) {
	if mock.ReadReceiptsOnChatRoomAndMemberWithSdFunc == nil {
		panic("StoreMock.ReadReceiptsOnChatRoomAndMemberWithSdFunc: method is nil but Store.ReadReceiptsOnChatRoomAndMemberWithSd was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Sd         Sd
		ChatRoomID uuid.UUID
		MemberID   uuid.UUID
		ReadAt     time.Time
	}{
		Ctx:        ctx,
		Sd:         sd,
		ChatRoomID: chatRoomID,
		MemberID:   memberID,
		ReadAt:     readAt,
	}
	mock.lockReadReceiptsOnChatRoomAndMemberWithSd.Lock()
	mock.calls.ReadReceiptsOnChatRoomAndMemberWithSd = append(mock.calls.ReadReceiptsOnChatRoomAndMemberWithSd, callInfo)
	mock.lockReadReceiptsOnChatRoomAndMemberWithSd.Unlock()
	return mock.ReadReceiptsOnChatRoomAndMemberWithSdFunc(ctx, sd, chatRoomID, memberID, readAt)
}

// ReadReceiptsOnChatRoomAndMemberWithSdCalls gets all the calls that were made to ReadReceiptsOnChatRoomAndMemberWithSd.
// Check the length with:
//
//	len(mockedStore.ReadReceiptsOnChatRoomAndMemberWithSdCalls())
func (mock *StoreMock) ReadReceiptsOnChatRoomAndMemberWithSdCalls() []struct {
	Ctx        context.Context
	Sd         Sd
	ChatRoomID uuid.UUID
	MemberID   uuid.UUID
	ReadAt     time.Time
} {
	var calls []struct {
		Ctx        context.Context
		Sd         Sd
		ChatRoomID uuid.UUID
		MemberID   uuid.UUID
		ReadAt     time.Time
	}
	mock.lockReadReceiptsOnChatRoomAndMemberWithSd.RLock()
	calls = mock.calls.ReadReceiptsOnChatRoomAndMemberWithSd
	mock.lockReadReceiptsOnChatRoomAndMemberWithSd.RUnlock()
	return calls
}

// ReadReceiptsOnMember calls ReadReceiptsOnMemberFunc.
func (mock *StoreMock) ReadReceiptsOnMember(ctx context.Context, memberID uuid.UUID, readAt time.Time) (int64, error) {
	if mock.ReadReceiptsOnMemberFunc == nil {
		panic("StoreMock.ReadReceiptsOnMemberFunc: method is nil but Store.ReadReceiptsOnMember was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		MemberID uuid.UUID
		ReadAt   time.Time
	}{
		Ctx:      ctx,
		MemberID: memberID,
		ReadAt:   readAt,
	}
	mock.lockReadReceiptsOnMember.Lock()
	mock.calls.ReadReceiptsOnMember = append(mock.calls.ReadReceiptsOnMember, callInfo)
	mock.lockReadReceiptsOnMember.Unlock()
	return mock.ReadReceiptsOnMemberFunc(ctx, memberID, readAt)
}

// ReadReceiptsOnMemberCalls gets all the calls that were made to ReadReceiptsOnMember.
// Check the length with:
//
//	len(mockedStore.ReadReceiptsOnMemberCalls())
func (mock *StoreMock) ReadReceiptsOnMemberCalls() []struct {
	Ctx      context.Context
	MemberID uuid.UUID
	ReadAt   time.Time
} {
	var calls []struct {
		Ctx      context.Context
		MemberID uuid.UUID
		ReadAt   time.Time
	}
	mock.lockReadReceiptsOnMember.RLock()
	calls = mock.calls.ReadReceiptsOnMember
	mock.lockReadReceiptsOnMember.RUnlock()
	return calls
}

// ReadReceiptsOnMemberWithSd calls ReadReceiptsOnMemberWithSdFunc.
func (mock *StoreMock) ReadReceiptsOnMemberWithSd(ctx context.Context, sd Sd, memberID uuid.UUID, readAt time.Time) (int64, error) {
	if mock.ReadReceiptsOnMemberWithSdFunc == nil {
		panic("StoreMock.ReadReceiptsOnMemberWithSdFunc: method is nil but Store.ReadReceiptsOnMemberWithSd was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Sd       Sd
		MemberID uuid.UUID
		ReadAt   time.Time
	}{
		Ctx:      ctx,
		Sd:       sd,
		MemberID: memberID,
		ReadAt:   readAt,
	}
	mock.lockReadReceiptsOnMemberWithSd.Lock()
	mock.calls.ReadReceiptsOnMemberWithSd = append(mock.calls.ReadReceiptsOnMemberWithSd, callInfo)
	mock.lockReadReceiptsOnMemberWithSd.Unlock()
	return mock.ReadReceiptsOnMemberWithSdFunc(ctx, sd, memberID, readAt)
}

// ReadReceiptsOnMemberWithSdCalls gets all the calls that were made to ReadReceiptsOnMemberWithSd.
// Check the length with:
//
//	len(mockedStore.ReadReceiptsOnMemberWithSdCalls())
func (mock *StoreMock) ReadReceiptsOnMemberWithSdCalls() []struct {
	Ctx      context.Context
	Sd       Sd
	MemberID uuid.UUID
	ReadAt   time.Time
} {
	var calls []struct {
		Ctx      context.Context
		Sd       Sd
		MemberID uuid.UUID
		ReadAt   time.Time
	}
	mock.lockReadReceiptsOnMemberWithSd.RLock()
	calls = mock.calls.ReadReceiptsOnMemberWithSd
	mock.lockReadReceiptsOnMemberWithSd.RUnlock()
	return calls
}

// ReadReceiptsWithSd calls ReadReceiptsWithSdFunc.
func (mock *StoreMock) ReadReceiptsWithSd(ctx context.Context, sd Sd, param parameter.ReadReceiptsParam) (int64, error) {
	if mock.ReadReceiptsWithSdFunc == nil {
		panic("StoreMock.ReadReceiptsWithSdFunc: method is nil but Store.ReadReceiptsWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.ReadReceiptsParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Param: param,
	}
	mock.lockReadReceiptsWithSd.Lock()
	mock.calls.ReadReceiptsWithSd = append(mock.calls.ReadReceiptsWithSd, callInfo)
	mock.lockReadReceiptsWithSd.Unlock()
	return mock.ReadReceiptsWithSdFunc(ctx, sd, param)
}

// ReadReceiptsWithSdCalls gets all the calls that were made to ReadReceiptsWithSd.
// Check the length with:
//
//	len(mockedStore.ReadReceiptsWithSdCalls())
func (mock *StoreMock) ReadReceiptsWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Param parameter.ReadReceiptsParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.ReadReceiptsParam
	}
	mock.lockReadReceiptsWithSd.RLock()
	calls = mock.calls.ReadReceiptsWithSd
	mock.lockReadReceiptsWithSd.RUnlock()
	return calls
}

// RemoveMemberToChatRoomRemoveMemberAction calls RemoveMemberToChatRoomRemoveMemberActionFunc.
func (mock *StoreMock) RemoveMemberToChatRoomRemoveMemberAction(ctx context.Context, param parameter.CreateChatRoomRemovedMemberParam) (entity.ChatRoomRemovedMember, error) {
	if mock.RemoveMemberToChatRoomRemoveMemberActionFunc == nil {
		panic("StoreMock.RemoveMemberToChatRoomRemoveMemberActionFunc: method is nil but Store.RemoveMemberToChatRoomRemoveMemberAction was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Param parameter.CreateChatRoomRemovedMemberParam
	}{
		Ctx:   ctx,
		Param: param,
	}
	mock.lockRemoveMemberToChatRoomRemoveMemberAction.Lock()
	mock.calls.RemoveMemberToChatRoomRemoveMemberAction = append(mock.calls.RemoveMemberToChatRoomRemoveMemberAction, callInfo)
	mock.lockRemoveMemberToChatRoomRemoveMemberAction.Unlock()
	return mock.RemoveMemberToChatRoomRemoveMemberActionFunc(ctx, param)
}

// RemoveMemberToChatRoomRemoveMemberActionCalls gets all the calls that were made to RemoveMemberToChatRoomRemoveMemberAction.
// Check the length with:
//
//	len(mockedStore.RemoveMemberToChatRoomRemoveMemberActionCalls())
func (mock *StoreMock) RemoveMemberToChatRoomRemoveMemberActionCalls() []struct {
	Ctx   context.Context
	Param parameter.CreateChatRoomRemovedMemberParam
} {
	var calls []struct {
		Ctx   context.Context
		Param parameter.CreateChatRoomRemovedMemberParam
	}
	mock.lockRemoveMemberToChatRoomRemoveMemberAction.RLock()
	calls = mock.calls.RemoveMemberToChatRoomRemoveMemberAction
	mock.lockRemoveMemberToChatRoomRemoveMemberAction.RUnlock()
	return calls
}

// RemoveMemberToChatRoomRemoveMemberActionWithSd calls RemoveMemberToChatRoomRemoveMemberActionWithSdFunc.
func (mock *StoreMock) RemoveMemberToChatRoomRemoveMemberActionWithSd(ctx context.Context, sd Sd, param parameter.CreateChatRoomRemovedMemberParam) (entity.ChatRoomRemovedMember, error) {
	if mock.RemoveMemberToChatRoomRemoveMemberActionWithSdFunc == nil {
		panic("StoreMock.RemoveMemberToChatRoomRemoveMemberActionWithSdFunc: method is nil but Store.RemoveMemberToChatRoomRemoveMemberActionWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateChatRoomRemovedMemberParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Param: param,
	}
	mock.lockRemoveMemberToChatRoomRemoveMemberActionWithSd.Lock()
	mock.calls.RemoveMemberToChatRoomRemoveMemberActionWithSd = append(mock.calls.RemoveMemberToChatRoomRemoveMemberActionWithSd, callInfo)
	mock.lockRemoveMemberToChatRoomRemoveMemberActionWithSd.Unlock()
	return mock.RemoveMemberToChatRoomRemoveMemberActionWithSdFunc(ctx, sd, param)
}

// RemoveMemberToChatRoomRemoveMemberActionWithSdCalls gets all the calls that were made to RemoveMemberToChatRoomRemoveMemberActionWithSd.
// Check the length with:
//
//	len(mockedStore.RemoveMemberToChatRoomRemoveMemberActionWithSdCalls())
func (mock *StoreMock) RemoveMemberToChatRoomRemoveMemberActionWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Param parameter.CreateChatRoomRemovedMemberParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateChatRoomRemovedMemberParam
	}
	mock.lockRemoveMemberToChatRoomRemoveMemberActionWithSd.RLock()
	calls = mock.calls.RemoveMemberToChatRoomRemoveMemberActionWithSd
	mock.lockRemoveMemberToChatRoomRemoveMemberActionWithSd.RUnlock()
	return calls
}

// RemoveMembersToChatRoomRemoveMemberAction calls RemoveMembersToChatRoomRemoveMemberActionFunc.
func (mock *StoreMock) RemoveMembersToChatRoomRemoveMemberAction(ctx context.Context, params []parameter.CreateChatRoomRemovedMemberParam) (int64, error) {
	if mock.RemoveMembersToChatRoomRemoveMemberActionFunc == nil {
		panic("StoreMock.RemoveMembersToChatRoomRemoveMemberActionFunc: method is nil but Store.RemoveMembersToChatRoomRemoveMemberAction was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params []parameter.CreateChatRoomRemovedMemberParam
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockRemoveMembersToChatRoomRemoveMemberAction.Lock()
	mock.calls.RemoveMembersToChatRoomRemoveMemberAction = append(mock.calls.RemoveMembersToChatRoomRemoveMemberAction, callInfo)
	mock.lockRemoveMembersToChatRoomRemoveMemberAction.Unlock()
	return mock.RemoveMembersToChatRoomRemoveMemberActionFunc(ctx, params)
}

// RemoveMembersToChatRoomRemoveMemberActionCalls gets all the calls that were made to RemoveMembersToChatRoomRemoveMemberAction.
// Check the length with:
//
//	len(mockedStore.RemoveMembersToChatRoomRemoveMemberActionCalls())
func (mock *StoreMock) RemoveMembersToChatRoomRemoveMemberActionCalls() []struct {
	Ctx    context.Context
	Params []parameter.CreateChatRoomRemovedMemberParam
} {
	var calls []struct {
		Ctx    context.Context
		Params []parameter.CreateChatRoomRemovedMemberParam
	}
	mock.lockRemoveMembersToChatRoomRemoveMemberAction.RLock()
	calls = mock.calls.RemoveMembersToChatRoomRemoveMemberAction
	mock.lockRemoveMembersToChatRoomRemoveMemberAction.RUnlock()
	return calls
}

// RemoveMembersToChatRoomRemoveMemberActionWithSd calls RemoveMembersToChatRoomRemoveMemberActionWithSdFunc.
func (mock *StoreMock) RemoveMembersToChatRoomRemoveMemberActionWithSd(ctx context.Context, sd Sd, params []parameter.CreateChatRoomRemovedMemberParam) (int64, error) {
	if mock.RemoveMembersToChatRoomRemoveMemberActionWithSdFunc == nil {
		panic("StoreMock.RemoveMembersToChatRoomRemoveMemberActionWithSdFunc: method is nil but Store.RemoveMembersToChatRoomRemoveMemberActionWithSd was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateChatRoomRemovedMemberParam
	}{
		Ctx:    ctx,
		Sd:     sd,
		Params: params,
	}
	mock.lockRemoveMembersToChatRoomRemoveMemberActionWithSd.Lock()
	mock.calls.RemoveMembersToChatRoomRemoveMemberActionWithSd = append(mock.calls.RemoveMembersToChatRoomRemoveMemberActionWithSd, callInfo)
	mock.lockRemoveMembersToChatRoomRemoveMemberActionWithSd.Unlock()
	return mock.RemoveMembersToChatRoomRemoveMemberActionWithSdFunc(ctx, sd, params)
}

// RemoveMembersToChatRoomRemoveMemberActionWithSdCalls gets all the calls that were made to RemoveMembersToChatRoomRemoveMemberActionWithSd.
// Check the length with:
//
//	len(mockedStore.RemoveMembersToChatRoomRemoveMemberActionWithSdCalls())
func (mock *StoreMock) RemoveMembersToChatRoomRemoveMemberActionWithSdCalls() []struct {
	Ctx    context.Context
	Sd     Sd
	Params []parameter.CreateChatRoomRemovedMemberParam
} {
	var calls []struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateChatRoomRemovedMemberParam
	}
	mock.lockRemoveMembersToChatRoomRemoveMemberActionWithSd.RLock()
	calls = mock.calls.RemoveMembersToChatRoomRemoveMemberActionWithSd
	mock.lockRemoveMembersToChatRoomRemoveMemberActionWithSd.RUnlock()
	return calls
}

// Rollback calls RollbackFunc.
func (mock *StoreMock) Rollback(contextMoqParam context.Context, sd Sd) error {
	if mock.RollbackFunc == nil {
		panic("StoreMock.RollbackFunc: method is nil but Store.Rollback was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		Sd              Sd
	}{
		ContextMoqParam: contextMoqParam,
		Sd:              sd,
	}
	mock.lockRollback.Lock()
	mock.calls.Rollback = append(mock.calls.Rollback, callInfo)
	mock.lockRollback.Unlock()
	return mock.RollbackFunc(contextMoqParam, sd)
}

// RollbackCalls gets all the calls that were made to Rollback.
// Check the length with:
//
//	len(mockedStore.RollbackCalls())
func (mock *StoreMock) RollbackCalls() []struct {
	ContextMoqParam context.Context
	Sd              Sd
} {
	var calls []struct {
		ContextMoqParam context.Context
		Sd              Sd
	}
	mock.lockRollback.RLock()
	calls = mock.calls.Rollback
	mock.lockRollback.RUnlock()
	return calls
}

// UpdateAttachableItem calls UpdateAttachableItemFunc.
func (mock *StoreMock) UpdateAttachableItem(ctx context.Context, attachableItemID uuid.UUID, param parameter.UpdateAttachableItemParams) (entity.AttachableItem, error) {
	if mock.UpdateAttachableItemFunc == nil {
		panic("StoreMock.UpdateAttachableItemFunc: method is nil but Store.UpdateAttachableItem was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		AttachableItemID uuid.UUID
		Param            parameter.UpdateAttachableItemParams
	}{
		Ctx:              ctx,
		AttachableItemID: attachableItemID,
		Param:            param,
	}
	mock.lockUpdateAttachableItem.Lock()
	mock.calls.UpdateAttachableItem = append(mock.calls.UpdateAttachableItem, callInfo)
	mock.lockUpdateAttachableItem.Unlock()
	return mock.UpdateAttachableItemFunc(ctx, attachableItemID, param)
}

// UpdateAttachableItemCalls gets all the calls that were made to UpdateAttachableItem.
// Check the length with:
//
//	len(mockedStore.UpdateAttachableItemCalls())
func (mock *StoreMock) UpdateAttachableItemCalls() []struct {
	Ctx              context.Context
	AttachableItemID uuid.UUID
	Param            parameter.UpdateAttachableItemParams
} {
	var calls []struct {
		Ctx              context.Context
		AttachableItemID uuid.UUID
		Param            parameter.UpdateAttachableItemParams
	}
	mock.lockUpdateAttachableItem.RLock()
	calls = mock.calls.UpdateAttachableItem
	mock.lockUpdateAttachableItem.RUnlock()
	return calls
}

// UpdateAttachableItemWithSd calls UpdateAttachableItemWithSdFunc.
func (mock *StoreMock) UpdateAttachableItemWithSd(ctx context.Context, sd Sd, attachableItemID uuid.UUID, param parameter.UpdateAttachableItemParams) (entity.AttachableItem, error) {
	if mock.UpdateAttachableItemWithSdFunc == nil {
		panic("StoreMock.UpdateAttachableItemWithSdFunc: method is nil but Store.UpdateAttachableItemWithSd was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		Sd               Sd
		AttachableItemID uuid.UUID
		Param            parameter.UpdateAttachableItemParams
	}{
		Ctx:              ctx,
		Sd:               sd,
		AttachableItemID: attachableItemID,
		Param:            param,
	}
	mock.lockUpdateAttachableItemWithSd.Lock()
	mock.calls.UpdateAttachableItemWithSd = append(mock.calls.UpdateAttachableItemWithSd, callInfo)
	mock.lockUpdateAttachableItemWithSd.Unlock()
	return mock.UpdateAttachableItemWithSdFunc(ctx, sd, attachableItemID, param)
}

// UpdateAttachableItemWithSdCalls gets all the calls that were made to UpdateAttachableItemWithSd.
// Check the length with:
//
//	len(mockedStore.UpdateAttachableItemWithSdCalls())
func (mock *StoreMock) UpdateAttachableItemWithSdCalls() []struct {
	Ctx              context.Context
	Sd               Sd
	AttachableItemID uuid.UUID
	Param            parameter.UpdateAttachableItemParams
} {
	var calls []struct {
		Ctx              context.Context
		Sd               Sd
		AttachableItemID uuid.UUID
		Param            parameter.UpdateAttachableItemParams
	}
	mock.lockUpdateAttachableItemWithSd.RLock()
	calls = mock.calls.UpdateAttachableItemWithSd
	mock.lockUpdateAttachableItemWithSd.RUnlock()
	return calls
}

// UpdateAttendStatus calls UpdateAttendStatusFunc.
func (mock *StoreMock) UpdateAttendStatus(ctx context.Context, attendStatusID uuid.UUID, param parameter.UpdateAttendStatusParams) (entity.AttendStatus, error) {
	if mock.UpdateAttendStatusFunc == nil {
		panic("StoreMock.UpdateAttendStatusFunc: method is nil but Store.UpdateAttendStatus was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		AttendStatusID uuid.UUID
		Param          parameter.UpdateAttendStatusParams
	}{
		Ctx:            ctx,
		AttendStatusID: attendStatusID,
		Param:          param,
	}
	mock.lockUpdateAttendStatus.Lock()
	mock.calls.UpdateAttendStatus = append(mock.calls.UpdateAttendStatus, callInfo)
	mock.lockUpdateAttendStatus.Unlock()
	return mock.UpdateAttendStatusFunc(ctx, attendStatusID, param)
}

// UpdateAttendStatusCalls gets all the calls that were made to UpdateAttendStatus.
// Check the length with:
//
//	len(mockedStore.UpdateAttendStatusCalls())
func (mock *StoreMock) UpdateAttendStatusCalls() []struct {
	Ctx            context.Context
	AttendStatusID uuid.UUID
	Param          parameter.UpdateAttendStatusParams
} {
	var calls []struct {
		Ctx            context.Context
		AttendStatusID uuid.UUID
		Param          parameter.UpdateAttendStatusParams
	}
	mock.lockUpdateAttendStatus.RLock()
	calls = mock.calls.UpdateAttendStatus
	mock.lockUpdateAttendStatus.RUnlock()
	return calls
}

// UpdateAttendStatusByKey calls UpdateAttendStatusByKeyFunc.
func (mock *StoreMock) UpdateAttendStatusByKey(ctx context.Context, key string, param parameter.UpdateAttendStatusByKeyParams) (entity.AttendStatus, error) {
	if mock.UpdateAttendStatusByKeyFunc == nil {
		panic("StoreMock.UpdateAttendStatusByKeyFunc: method is nil but Store.UpdateAttendStatusByKey was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Key   string
		Param parameter.UpdateAttendStatusByKeyParams
	}{
		Ctx:   ctx,
		Key:   key,
		Param: param,
	}
	mock.lockUpdateAttendStatusByKey.Lock()
	mock.calls.UpdateAttendStatusByKey = append(mock.calls.UpdateAttendStatusByKey, callInfo)
	mock.lockUpdateAttendStatusByKey.Unlock()
	return mock.UpdateAttendStatusByKeyFunc(ctx, key, param)
}

// UpdateAttendStatusByKeyCalls gets all the calls that were made to UpdateAttendStatusByKey.
// Check the length with:
//
//	len(mockedStore.UpdateAttendStatusByKeyCalls())
func (mock *StoreMock) UpdateAttendStatusByKeyCalls() []struct {
	Ctx   context.Context
	Key   string
	Param parameter.UpdateAttendStatusByKeyParams
} {
	var calls []struct {
		Ctx   context.Context
		Key   string
		Param parameter.UpdateAttendStatusByKeyParams
	}
	mock.lockUpdateAttendStatusByKey.RLock()
	calls = mock.calls.UpdateAttendStatusByKey
	mock.lockUpdateAttendStatusByKey.RUnlock()
	return calls
}

// UpdateAttendStatusByKeyWithSd calls UpdateAttendStatusByKeyWithSdFunc.
func (mock *StoreMock) UpdateAttendStatusByKeyWithSd(ctx context.Context, sd Sd, key string, param parameter.UpdateAttendStatusByKeyParams) (entity.AttendStatus, error) {
	if mock.UpdateAttendStatusByKeyWithSdFunc == nil {
		panic("StoreMock.UpdateAttendStatusByKeyWithSdFunc: method is nil but Store.UpdateAttendStatusByKeyWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Key   string
		Param parameter.UpdateAttendStatusByKeyParams
	}{
		Ctx:   ctx,
		Sd:    sd,
		Key:   key,
		Param: param,
	}
	mock.lockUpdateAttendStatusByKeyWithSd.Lock()
	mock.calls.UpdateAttendStatusByKeyWithSd = append(mock.calls.UpdateAttendStatusByKeyWithSd, callInfo)
	mock.lockUpdateAttendStatusByKeyWithSd.Unlock()
	return mock.UpdateAttendStatusByKeyWithSdFunc(ctx, sd, key, param)
}

// UpdateAttendStatusByKeyWithSdCalls gets all the calls that were made to UpdateAttendStatusByKeyWithSd.
// Check the length with:
//
//	len(mockedStore.UpdateAttendStatusByKeyWithSdCalls())
func (mock *StoreMock) UpdateAttendStatusByKeyWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Key   string
	Param parameter.UpdateAttendStatusByKeyParams
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Key   string
		Param parameter.UpdateAttendStatusByKeyParams
	}
	mock.lockUpdateAttendStatusByKeyWithSd.RLock()
	calls = mock.calls.UpdateAttendStatusByKeyWithSd
	mock.lockUpdateAttendStatusByKeyWithSd.RUnlock()
	return calls
}

// UpdateAttendStatusWithSd calls UpdateAttendStatusWithSdFunc.
func (mock *StoreMock) UpdateAttendStatusWithSd(ctx context.Context, sd Sd, attendStatusID uuid.UUID, param parameter.UpdateAttendStatusParams) (entity.AttendStatus, error) {
	if mock.UpdateAttendStatusWithSdFunc == nil {
		panic("StoreMock.UpdateAttendStatusWithSdFunc: method is nil but Store.UpdateAttendStatusWithSd was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		Sd             Sd
		AttendStatusID uuid.UUID
		Param          parameter.UpdateAttendStatusParams
	}{
		Ctx:            ctx,
		Sd:             sd,
		AttendStatusID: attendStatusID,
		Param:          param,
	}
	mock.lockUpdateAttendStatusWithSd.Lock()
	mock.calls.UpdateAttendStatusWithSd = append(mock.calls.UpdateAttendStatusWithSd, callInfo)
	mock.lockUpdateAttendStatusWithSd.Unlock()
	return mock.UpdateAttendStatusWithSdFunc(ctx, sd, attendStatusID, param)
}

// UpdateAttendStatusWithSdCalls gets all the calls that were made to UpdateAttendStatusWithSd.
// Check the length with:
//
//	len(mockedStore.UpdateAttendStatusWithSdCalls())
func (mock *StoreMock) UpdateAttendStatusWithSdCalls() []struct {
	Ctx            context.Context
	Sd             Sd
	AttendStatusID uuid.UUID
	Param          parameter.UpdateAttendStatusParams
} {
	var calls []struct {
		Ctx            context.Context
		Sd             Sd
		AttendStatusID uuid.UUID
		Param          parameter.UpdateAttendStatusParams
	}
	mock.lockUpdateAttendStatusWithSd.RLock()
	calls = mock.calls.UpdateAttendStatusWithSd
	mock.lockUpdateAttendStatusWithSd.RUnlock()
	return calls
}

// UpdateAttendanceType calls UpdateAttendanceTypeFunc.
func (mock *StoreMock) UpdateAttendanceType(ctx context.Context, attendanceTypeID uuid.UUID, param parameter.UpdateAttendanceTypeParams) (entity.AttendanceType, error) {
	if mock.UpdateAttendanceTypeFunc == nil {
		panic("StoreMock.UpdateAttendanceTypeFunc: method is nil but Store.UpdateAttendanceType was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		AttendanceTypeID uuid.UUID
		Param            parameter.UpdateAttendanceTypeParams
	}{
		Ctx:              ctx,
		AttendanceTypeID: attendanceTypeID,
		Param:            param,
	}
	mock.lockUpdateAttendanceType.Lock()
	mock.calls.UpdateAttendanceType = append(mock.calls.UpdateAttendanceType, callInfo)
	mock.lockUpdateAttendanceType.Unlock()
	return mock.UpdateAttendanceTypeFunc(ctx, attendanceTypeID, param)
}

// UpdateAttendanceTypeCalls gets all the calls that were made to UpdateAttendanceType.
// Check the length with:
//
//	len(mockedStore.UpdateAttendanceTypeCalls())
func (mock *StoreMock) UpdateAttendanceTypeCalls() []struct {
	Ctx              context.Context
	AttendanceTypeID uuid.UUID
	Param            parameter.UpdateAttendanceTypeParams
} {
	var calls []struct {
		Ctx              context.Context
		AttendanceTypeID uuid.UUID
		Param            parameter.UpdateAttendanceTypeParams
	}
	mock.lockUpdateAttendanceType.RLock()
	calls = mock.calls.UpdateAttendanceType
	mock.lockUpdateAttendanceType.RUnlock()
	return calls
}

// UpdateAttendanceTypeByKey calls UpdateAttendanceTypeByKeyFunc.
func (mock *StoreMock) UpdateAttendanceTypeByKey(ctx context.Context, key string, param parameter.UpdateAttendanceTypeByKeyParams) (entity.AttendanceType, error) {
	if mock.UpdateAttendanceTypeByKeyFunc == nil {
		panic("StoreMock.UpdateAttendanceTypeByKeyFunc: method is nil but Store.UpdateAttendanceTypeByKey was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Key   string
		Param parameter.UpdateAttendanceTypeByKeyParams
	}{
		Ctx:   ctx,
		Key:   key,
		Param: param,
	}
	mock.lockUpdateAttendanceTypeByKey.Lock()
	mock.calls.UpdateAttendanceTypeByKey = append(mock.calls.UpdateAttendanceTypeByKey, callInfo)
	mock.lockUpdateAttendanceTypeByKey.Unlock()
	return mock.UpdateAttendanceTypeByKeyFunc(ctx, key, param)
}

// UpdateAttendanceTypeByKeyCalls gets all the calls that were made to UpdateAttendanceTypeByKey.
// Check the length with:
//
//	len(mockedStore.UpdateAttendanceTypeByKeyCalls())
func (mock *StoreMock) UpdateAttendanceTypeByKeyCalls() []struct {
	Ctx   context.Context
	Key   string
	Param parameter.UpdateAttendanceTypeByKeyParams
} {
	var calls []struct {
		Ctx   context.Context
		Key   string
		Param parameter.UpdateAttendanceTypeByKeyParams
	}
	mock.lockUpdateAttendanceTypeByKey.RLock()
	calls = mock.calls.UpdateAttendanceTypeByKey
	mock.lockUpdateAttendanceTypeByKey.RUnlock()
	return calls
}

// UpdateAttendanceTypeByKeyWithSd calls UpdateAttendanceTypeByKeyWithSdFunc.
func (mock *StoreMock) UpdateAttendanceTypeByKeyWithSd(ctx context.Context, sd Sd, key string, param parameter.UpdateAttendanceTypeByKeyParams) (entity.AttendanceType, error) {
	if mock.UpdateAttendanceTypeByKeyWithSdFunc == nil {
		panic("StoreMock.UpdateAttendanceTypeByKeyWithSdFunc: method is nil but Store.UpdateAttendanceTypeByKeyWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Key   string
		Param parameter.UpdateAttendanceTypeByKeyParams
	}{
		Ctx:   ctx,
		Sd:    sd,
		Key:   key,
		Param: param,
	}
	mock.lockUpdateAttendanceTypeByKeyWithSd.Lock()
	mock.calls.UpdateAttendanceTypeByKeyWithSd = append(mock.calls.UpdateAttendanceTypeByKeyWithSd, callInfo)
	mock.lockUpdateAttendanceTypeByKeyWithSd.Unlock()
	return mock.UpdateAttendanceTypeByKeyWithSdFunc(ctx, sd, key, param)
}

// UpdateAttendanceTypeByKeyWithSdCalls gets all the calls that were made to UpdateAttendanceTypeByKeyWithSd.
// Check the length with:
//
//	len(mockedStore.UpdateAttendanceTypeByKeyWithSdCalls())
func (mock *StoreMock) UpdateAttendanceTypeByKeyWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Key   string
	Param parameter.UpdateAttendanceTypeByKeyParams
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Key   string
		Param parameter.UpdateAttendanceTypeByKeyParams
	}
	mock.lockUpdateAttendanceTypeByKeyWithSd.RLock()
	calls = mock.calls.UpdateAttendanceTypeByKeyWithSd
	mock.lockUpdateAttendanceTypeByKeyWithSd.RUnlock()
	return calls
}

// UpdateAttendanceTypeWithSd calls UpdateAttendanceTypeWithSdFunc.
func (mock *StoreMock) UpdateAttendanceTypeWithSd(ctx context.Context, sd Sd, attendanceTypeID uuid.UUID, param parameter.UpdateAttendanceTypeParams) (entity.AttendanceType, error) {
	if mock.UpdateAttendanceTypeWithSdFunc == nil {
		panic("StoreMock.UpdateAttendanceTypeWithSdFunc: method is nil but Store.UpdateAttendanceTypeWithSd was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		Sd               Sd
		AttendanceTypeID uuid.UUID
		Param            parameter.UpdateAttendanceTypeParams
	}{
		Ctx:              ctx,
		Sd:               sd,
		AttendanceTypeID: attendanceTypeID,
		Param:            param,
	}
	mock.lockUpdateAttendanceTypeWithSd.Lock()
	mock.calls.UpdateAttendanceTypeWithSd = append(mock.calls.UpdateAttendanceTypeWithSd, callInfo)
	mock.lockUpdateAttendanceTypeWithSd.Unlock()
	return mock.UpdateAttendanceTypeWithSdFunc(ctx, sd, attendanceTypeID, param)
}

// UpdateAttendanceTypeWithSdCalls gets all the calls that were made to UpdateAttendanceTypeWithSd.
// Check the length with:
//
//	len(mockedStore.UpdateAttendanceTypeWithSdCalls())
func (mock *StoreMock) UpdateAttendanceTypeWithSdCalls() []struct {
	Ctx              context.Context
	Sd               Sd
	AttendanceTypeID uuid.UUID
	Param            parameter.UpdateAttendanceTypeParams
} {
	var calls []struct {
		Ctx              context.Context
		Sd               Sd
		AttendanceTypeID uuid.UUID
		Param            parameter.UpdateAttendanceTypeParams
	}
	mock.lockUpdateAttendanceTypeWithSd.RLock()
	calls = mock.calls.UpdateAttendanceTypeWithSd
	mock.lockUpdateAttendanceTypeWithSd.RUnlock()
	return calls
}

// UpdateChatRoom calls UpdateChatRoomFunc.
func (mock *StoreMock) UpdateChatRoom(ctx context.Context, chatRoomID uuid.UUID, param parameter.UpdateChatRoomParams) (entity.ChatRoom, error) {
	if mock.UpdateChatRoomFunc == nil {
		panic("StoreMock.UpdateChatRoomFunc: method is nil but Store.UpdateChatRoom was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		ChatRoomID uuid.UUID
		Param      parameter.UpdateChatRoomParams
	}{
		Ctx:        ctx,
		ChatRoomID: chatRoomID,
		Param:      param,
	}
	mock.lockUpdateChatRoom.Lock()
	mock.calls.UpdateChatRoom = append(mock.calls.UpdateChatRoom, callInfo)
	mock.lockUpdateChatRoom.Unlock()
	return mock.UpdateChatRoomFunc(ctx, chatRoomID, param)
}

// UpdateChatRoomCalls gets all the calls that were made to UpdateChatRoom.
// Check the length with:
//
//	len(mockedStore.UpdateChatRoomCalls())
func (mock *StoreMock) UpdateChatRoomCalls() []struct {
	Ctx        context.Context
	ChatRoomID uuid.UUID
	Param      parameter.UpdateChatRoomParams
} {
	var calls []struct {
		Ctx        context.Context
		ChatRoomID uuid.UUID
		Param      parameter.UpdateChatRoomParams
	}
	mock.lockUpdateChatRoom.RLock()
	calls = mock.calls.UpdateChatRoom
	mock.lockUpdateChatRoom.RUnlock()
	return calls
}

// UpdateChatRoomAction calls UpdateChatRoomActionFunc.
func (mock *StoreMock) UpdateChatRoomAction(ctx context.Context, chatRoomActionID uuid.UUID, param parameter.UpdateChatRoomActionParam) (entity.ChatRoomAction, error) {
	if mock.UpdateChatRoomActionFunc == nil {
		panic("StoreMock.UpdateChatRoomActionFunc: method is nil but Store.UpdateChatRoomAction was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		ChatRoomActionID uuid.UUID
		Param            parameter.UpdateChatRoomActionParam
	}{
		Ctx:              ctx,
		ChatRoomActionID: chatRoomActionID,
		Param:            param,
	}
	mock.lockUpdateChatRoomAction.Lock()
	mock.calls.UpdateChatRoomAction = append(mock.calls.UpdateChatRoomAction, callInfo)
	mock.lockUpdateChatRoomAction.Unlock()
	return mock.UpdateChatRoomActionFunc(ctx, chatRoomActionID, param)
}

// UpdateChatRoomActionCalls gets all the calls that were made to UpdateChatRoomAction.
// Check the length with:
//
//	len(mockedStore.UpdateChatRoomActionCalls())
func (mock *StoreMock) UpdateChatRoomActionCalls() []struct {
	Ctx              context.Context
	ChatRoomActionID uuid.UUID
	Param            parameter.UpdateChatRoomActionParam
} {
	var calls []struct {
		Ctx              context.Context
		ChatRoomActionID uuid.UUID
		Param            parameter.UpdateChatRoomActionParam
	}
	mock.lockUpdateChatRoomAction.RLock()
	calls = mock.calls.UpdateChatRoomAction
	mock.lockUpdateChatRoomAction.RUnlock()
	return calls
}

// UpdateChatRoomActionType calls UpdateChatRoomActionTypeFunc.
func (mock *StoreMock) UpdateChatRoomActionType(ctx context.Context, recordTypeID uuid.UUID, param parameter.UpdateChatRoomActionTypeParams) (entity.ChatRoomActionType, error) {
	if mock.UpdateChatRoomActionTypeFunc == nil {
		panic("StoreMock.UpdateChatRoomActionTypeFunc: method is nil but Store.UpdateChatRoomActionType was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		RecordTypeID uuid.UUID
		Param        parameter.UpdateChatRoomActionTypeParams
	}{
		Ctx:          ctx,
		RecordTypeID: recordTypeID,
		Param:        param,
	}
	mock.lockUpdateChatRoomActionType.Lock()
	mock.calls.UpdateChatRoomActionType = append(mock.calls.UpdateChatRoomActionType, callInfo)
	mock.lockUpdateChatRoomActionType.Unlock()
	return mock.UpdateChatRoomActionTypeFunc(ctx, recordTypeID, param)
}

// UpdateChatRoomActionTypeCalls gets all the calls that were made to UpdateChatRoomActionType.
// Check the length with:
//
//	len(mockedStore.UpdateChatRoomActionTypeCalls())
func (mock *StoreMock) UpdateChatRoomActionTypeCalls() []struct {
	Ctx          context.Context
	RecordTypeID uuid.UUID
	Param        parameter.UpdateChatRoomActionTypeParams
} {
	var calls []struct {
		Ctx          context.Context
		RecordTypeID uuid.UUID
		Param        parameter.UpdateChatRoomActionTypeParams
	}
	mock.lockUpdateChatRoomActionType.RLock()
	calls = mock.calls.UpdateChatRoomActionType
	mock.lockUpdateChatRoomActionType.RUnlock()
	return calls
}

// UpdateChatRoomActionTypeByKey calls UpdateChatRoomActionTypeByKeyFunc.
func (mock *StoreMock) UpdateChatRoomActionTypeByKey(ctx context.Context, key string, param parameter.UpdateChatRoomActionTypeByKeyParams) (entity.ChatRoomActionType, error) {
	if mock.UpdateChatRoomActionTypeByKeyFunc == nil {
		panic("StoreMock.UpdateChatRoomActionTypeByKeyFunc: method is nil but Store.UpdateChatRoomActionTypeByKey was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Key   string
		Param parameter.UpdateChatRoomActionTypeByKeyParams
	}{
		Ctx:   ctx,
		Key:   key,
		Param: param,
	}
	mock.lockUpdateChatRoomActionTypeByKey.Lock()
	mock.calls.UpdateChatRoomActionTypeByKey = append(mock.calls.UpdateChatRoomActionTypeByKey, callInfo)
	mock.lockUpdateChatRoomActionTypeByKey.Unlock()
	return mock.UpdateChatRoomActionTypeByKeyFunc(ctx, key, param)
}

// UpdateChatRoomActionTypeByKeyCalls gets all the calls that were made to UpdateChatRoomActionTypeByKey.
// Check the length with:
//
//	len(mockedStore.UpdateChatRoomActionTypeByKeyCalls())
func (mock *StoreMock) UpdateChatRoomActionTypeByKeyCalls() []struct {
	Ctx   context.Context
	Key   string
	Param parameter.UpdateChatRoomActionTypeByKeyParams
} {
	var calls []struct {
		Ctx   context.Context
		Key   string
		Param parameter.UpdateChatRoomActionTypeByKeyParams
	}
	mock.lockUpdateChatRoomActionTypeByKey.RLock()
	calls = mock.calls.UpdateChatRoomActionTypeByKey
	mock.lockUpdateChatRoomActionTypeByKey.RUnlock()
	return calls
}

// UpdateChatRoomActionTypeByKeyWithSd calls UpdateChatRoomActionTypeByKeyWithSdFunc.
func (mock *StoreMock) UpdateChatRoomActionTypeByKeyWithSd(ctx context.Context, sd Sd, key string, param parameter.UpdateChatRoomActionTypeByKeyParams) (entity.ChatRoomActionType, error) {
	if mock.UpdateChatRoomActionTypeByKeyWithSdFunc == nil {
		panic("StoreMock.UpdateChatRoomActionTypeByKeyWithSdFunc: method is nil but Store.UpdateChatRoomActionTypeByKeyWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Key   string
		Param parameter.UpdateChatRoomActionTypeByKeyParams
	}{
		Ctx:   ctx,
		Sd:    sd,
		Key:   key,
		Param: param,
	}
	mock.lockUpdateChatRoomActionTypeByKeyWithSd.Lock()
	mock.calls.UpdateChatRoomActionTypeByKeyWithSd = append(mock.calls.UpdateChatRoomActionTypeByKeyWithSd, callInfo)
	mock.lockUpdateChatRoomActionTypeByKeyWithSd.Unlock()
	return mock.UpdateChatRoomActionTypeByKeyWithSdFunc(ctx, sd, key, param)
}

// UpdateChatRoomActionTypeByKeyWithSdCalls gets all the calls that were made to UpdateChatRoomActionTypeByKeyWithSd.
// Check the length with:
//
//	len(mockedStore.UpdateChatRoomActionTypeByKeyWithSdCalls())
func (mock *StoreMock) UpdateChatRoomActionTypeByKeyWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Key   string
	Param parameter.UpdateChatRoomActionTypeByKeyParams
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Key   string
		Param parameter.UpdateChatRoomActionTypeByKeyParams
	}
	mock.lockUpdateChatRoomActionTypeByKeyWithSd.RLock()
	calls = mock.calls.UpdateChatRoomActionTypeByKeyWithSd
	mock.lockUpdateChatRoomActionTypeByKeyWithSd.RUnlock()
	return calls
}

// UpdateChatRoomActionTypeWithSd calls UpdateChatRoomActionTypeWithSdFunc.
func (mock *StoreMock) UpdateChatRoomActionTypeWithSd(ctx context.Context, sd Sd, recordTypeID uuid.UUID, param parameter.UpdateChatRoomActionTypeParams) (entity.ChatRoomActionType, error) {
	if mock.UpdateChatRoomActionTypeWithSdFunc == nil {
		panic("StoreMock.UpdateChatRoomActionTypeWithSdFunc: method is nil but Store.UpdateChatRoomActionTypeWithSd was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		Sd           Sd
		RecordTypeID uuid.UUID
		Param        parameter.UpdateChatRoomActionTypeParams
	}{
		Ctx:          ctx,
		Sd:           sd,
		RecordTypeID: recordTypeID,
		Param:        param,
	}
	mock.lockUpdateChatRoomActionTypeWithSd.Lock()
	mock.calls.UpdateChatRoomActionTypeWithSd = append(mock.calls.UpdateChatRoomActionTypeWithSd, callInfo)
	mock.lockUpdateChatRoomActionTypeWithSd.Unlock()
	return mock.UpdateChatRoomActionTypeWithSdFunc(ctx, sd, recordTypeID, param)
}

// UpdateChatRoomActionTypeWithSdCalls gets all the calls that were made to UpdateChatRoomActionTypeWithSd.
// Check the length with:
//
//	len(mockedStore.UpdateChatRoomActionTypeWithSdCalls())
func (mock *StoreMock) UpdateChatRoomActionTypeWithSdCalls() []struct {
	Ctx          context.Context
	Sd           Sd
	RecordTypeID uuid.UUID
	Param        parameter.UpdateChatRoomActionTypeParams
} {
	var calls []struct {
		Ctx          context.Context
		Sd           Sd
		RecordTypeID uuid.UUID
		Param        parameter.UpdateChatRoomActionTypeParams
	}
	mock.lockUpdateChatRoomActionTypeWithSd.RLock()
	calls = mock.calls.UpdateChatRoomActionTypeWithSd
	mock.lockUpdateChatRoomActionTypeWithSd.RUnlock()
	return calls
}

// UpdateChatRoomActionWithSd calls UpdateChatRoomActionWithSdFunc.
func (mock *StoreMock) UpdateChatRoomActionWithSd(ctx context.Context, sd Sd, chatRoomActionID uuid.UUID, param parameter.UpdateChatRoomActionParam) (entity.ChatRoomAction, error) {
	if mock.UpdateChatRoomActionWithSdFunc == nil {
		panic("StoreMock.UpdateChatRoomActionWithSdFunc: method is nil but Store.UpdateChatRoomActionWithSd was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		Sd               Sd
		ChatRoomActionID uuid.UUID
		Param            parameter.UpdateChatRoomActionParam
	}{
		Ctx:              ctx,
		Sd:               sd,
		ChatRoomActionID: chatRoomActionID,
		Param:            param,
	}
	mock.lockUpdateChatRoomActionWithSd.Lock()
	mock.calls.UpdateChatRoomActionWithSd = append(mock.calls.UpdateChatRoomActionWithSd, callInfo)
	mock.lockUpdateChatRoomActionWithSd.Unlock()
	return mock.UpdateChatRoomActionWithSdFunc(ctx, sd, chatRoomActionID, param)
}

// UpdateChatRoomActionWithSdCalls gets all the calls that were made to UpdateChatRoomActionWithSd.
// Check the length with:
//
//	len(mockedStore.UpdateChatRoomActionWithSdCalls())
func (mock *StoreMock) UpdateChatRoomActionWithSdCalls() []struct {
	Ctx              context.Context
	Sd               Sd
	ChatRoomActionID uuid.UUID
	Param            parameter.UpdateChatRoomActionParam
} {
	var calls []struct {
		Ctx              context.Context
		Sd               Sd
		ChatRoomActionID uuid.UUID
		Param            parameter.UpdateChatRoomActionParam
	}
	mock.lockUpdateChatRoomActionWithSd.RLock()
	calls = mock.calls.UpdateChatRoomActionWithSd
	mock.lockUpdateChatRoomActionWithSd.RUnlock()
	return calls
}

// UpdateChatRoomWithSd calls UpdateChatRoomWithSdFunc.
func (mock *StoreMock) UpdateChatRoomWithSd(ctx context.Context, sd Sd, chatRoomID uuid.UUID, param parameter.UpdateChatRoomParams) (entity.ChatRoom, error) {
	if mock.UpdateChatRoomWithSdFunc == nil {
		panic("StoreMock.UpdateChatRoomWithSdFunc: method is nil but Store.UpdateChatRoomWithSd was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Sd         Sd
		ChatRoomID uuid.UUID
		Param      parameter.UpdateChatRoomParams
	}{
		Ctx:        ctx,
		Sd:         sd,
		ChatRoomID: chatRoomID,
		Param:      param,
	}
	mock.lockUpdateChatRoomWithSd.Lock()
	mock.calls.UpdateChatRoomWithSd = append(mock.calls.UpdateChatRoomWithSd, callInfo)
	mock.lockUpdateChatRoomWithSd.Unlock()
	return mock.UpdateChatRoomWithSdFunc(ctx, sd, chatRoomID, param)
}

// UpdateChatRoomWithSdCalls gets all the calls that were made to UpdateChatRoomWithSd.
// Check the length with:
//
//	len(mockedStore.UpdateChatRoomWithSdCalls())
func (mock *StoreMock) UpdateChatRoomWithSdCalls() []struct {
	Ctx        context.Context
	Sd         Sd
	ChatRoomID uuid.UUID
	Param      parameter.UpdateChatRoomParams
} {
	var calls []struct {
		Ctx        context.Context
		Sd         Sd
		ChatRoomID uuid.UUID
		Param      parameter.UpdateChatRoomParams
	}
	mock.lockUpdateChatRoomWithSd.RLock()
	calls = mock.calls.UpdateChatRoomWithSd
	mock.lockUpdateChatRoomWithSd.RUnlock()
	return calls
}

// UpdateEventType calls UpdateEventTypeFunc.
func (mock *StoreMock) UpdateEventType(ctx context.Context, eventTypeID uuid.UUID, param parameter.UpdateEventTypeParams) (entity.EventType, error) {
	if mock.UpdateEventTypeFunc == nil {
		panic("StoreMock.UpdateEventTypeFunc: method is nil but Store.UpdateEventType was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		EventTypeID uuid.UUID
		Param       parameter.UpdateEventTypeParams
	}{
		Ctx:         ctx,
		EventTypeID: eventTypeID,
		Param:       param,
	}
	mock.lockUpdateEventType.Lock()
	mock.calls.UpdateEventType = append(mock.calls.UpdateEventType, callInfo)
	mock.lockUpdateEventType.Unlock()
	return mock.UpdateEventTypeFunc(ctx, eventTypeID, param)
}

// UpdateEventTypeCalls gets all the calls that were made to UpdateEventType.
// Check the length with:
//
//	len(mockedStore.UpdateEventTypeCalls())
func (mock *StoreMock) UpdateEventTypeCalls() []struct {
	Ctx         context.Context
	EventTypeID uuid.UUID
	Param       parameter.UpdateEventTypeParams
} {
	var calls []struct {
		Ctx         context.Context
		EventTypeID uuid.UUID
		Param       parameter.UpdateEventTypeParams
	}
	mock.lockUpdateEventType.RLock()
	calls = mock.calls.UpdateEventType
	mock.lockUpdateEventType.RUnlock()
	return calls
}

// UpdateEventTypeByKey calls UpdateEventTypeByKeyFunc.
func (mock *StoreMock) UpdateEventTypeByKey(ctx context.Context, key string, param parameter.UpdateEventTypeByKeyParams) (entity.EventType, error) {
	if mock.UpdateEventTypeByKeyFunc == nil {
		panic("StoreMock.UpdateEventTypeByKeyFunc: method is nil but Store.UpdateEventTypeByKey was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Key   string
		Param parameter.UpdateEventTypeByKeyParams
	}{
		Ctx:   ctx,
		Key:   key,
		Param: param,
	}
	mock.lockUpdateEventTypeByKey.Lock()
	mock.calls.UpdateEventTypeByKey = append(mock.calls.UpdateEventTypeByKey, callInfo)
	mock.lockUpdateEventTypeByKey.Unlock()
	return mock.UpdateEventTypeByKeyFunc(ctx, key, param)
}

// UpdateEventTypeByKeyCalls gets all the calls that were made to UpdateEventTypeByKey.
// Check the length with:
//
//	len(mockedStore.UpdateEventTypeByKeyCalls())
func (mock *StoreMock) UpdateEventTypeByKeyCalls() []struct {
	Ctx   context.Context
	Key   string
	Param parameter.UpdateEventTypeByKeyParams
} {
	var calls []struct {
		Ctx   context.Context
		Key   string
		Param parameter.UpdateEventTypeByKeyParams
	}
	mock.lockUpdateEventTypeByKey.RLock()
	calls = mock.calls.UpdateEventTypeByKey
	mock.lockUpdateEventTypeByKey.RUnlock()
	return calls
}

// UpdateEventTypeByKeyWithSd calls UpdateEventTypeByKeyWithSdFunc.
func (mock *StoreMock) UpdateEventTypeByKeyWithSd(ctx context.Context, sd Sd, key string, param parameter.UpdateEventTypeByKeyParams) (entity.EventType, error) {
	if mock.UpdateEventTypeByKeyWithSdFunc == nil {
		panic("StoreMock.UpdateEventTypeByKeyWithSdFunc: method is nil but Store.UpdateEventTypeByKeyWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Key   string
		Param parameter.UpdateEventTypeByKeyParams
	}{
		Ctx:   ctx,
		Sd:    sd,
		Key:   key,
		Param: param,
	}
	mock.lockUpdateEventTypeByKeyWithSd.Lock()
	mock.calls.UpdateEventTypeByKeyWithSd = append(mock.calls.UpdateEventTypeByKeyWithSd, callInfo)
	mock.lockUpdateEventTypeByKeyWithSd.Unlock()
	return mock.UpdateEventTypeByKeyWithSdFunc(ctx, sd, key, param)
}

// UpdateEventTypeByKeyWithSdCalls gets all the calls that were made to UpdateEventTypeByKeyWithSd.
// Check the length with:
//
//	len(mockedStore.UpdateEventTypeByKeyWithSdCalls())
func (mock *StoreMock) UpdateEventTypeByKeyWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Key   string
	Param parameter.UpdateEventTypeByKeyParams
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Key   string
		Param parameter.UpdateEventTypeByKeyParams
	}
	mock.lockUpdateEventTypeByKeyWithSd.RLock()
	calls = mock.calls.UpdateEventTypeByKeyWithSd
	mock.lockUpdateEventTypeByKeyWithSd.RUnlock()
	return calls
}

// UpdateEventTypeWithSd calls UpdateEventTypeWithSdFunc.
func (mock *StoreMock) UpdateEventTypeWithSd(ctx context.Context, sd Sd, eventTypeID uuid.UUID, param parameter.UpdateEventTypeParams) (entity.EventType, error) {
	if mock.UpdateEventTypeWithSdFunc == nil {
		panic("StoreMock.UpdateEventTypeWithSdFunc: method is nil but Store.UpdateEventTypeWithSd was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Sd          Sd
		EventTypeID uuid.UUID
		Param       parameter.UpdateEventTypeParams
	}{
		Ctx:         ctx,
		Sd:          sd,
		EventTypeID: eventTypeID,
		Param:       param,
	}
	mock.lockUpdateEventTypeWithSd.Lock()
	mock.calls.UpdateEventTypeWithSd = append(mock.calls.UpdateEventTypeWithSd, callInfo)
	mock.lockUpdateEventTypeWithSd.Unlock()
	return mock.UpdateEventTypeWithSdFunc(ctx, sd, eventTypeID, param)
}

// UpdateEventTypeWithSdCalls gets all the calls that were made to UpdateEventTypeWithSd.
// Check the length with:
//
//	len(mockedStore.UpdateEventTypeWithSdCalls())
func (mock *StoreMock) UpdateEventTypeWithSdCalls() []struct {
	Ctx         context.Context
	Sd          Sd
	EventTypeID uuid.UUID
	Param       parameter.UpdateEventTypeParams
} {
	var calls []struct {
		Ctx         context.Context
		Sd          Sd
		EventTypeID uuid.UUID
		Param       parameter.UpdateEventTypeParams
	}
	mock.lockUpdateEventTypeWithSd.RLock()
	calls = mock.calls.UpdateEventTypeWithSd
	mock.lockUpdateEventTypeWithSd.RUnlock()
	return calls
}

// UpdateMember calls UpdateMemberFunc.
func (mock *StoreMock) UpdateMember(ctx context.Context, memberID uuid.UUID, param parameter.UpdateMemberParams) (entity.Member, error) {
	if mock.UpdateMemberFunc == nil {
		panic("StoreMock.UpdateMemberFunc: method is nil but Store.UpdateMember was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		MemberID uuid.UUID
		Param    parameter.UpdateMemberParams
	}{
		Ctx:      ctx,
		MemberID: memberID,
		Param:    param,
	}
	mock.lockUpdateMember.Lock()
	mock.calls.UpdateMember = append(mock.calls.UpdateMember, callInfo)
	mock.lockUpdateMember.Unlock()
	return mock.UpdateMemberFunc(ctx, memberID, param)
}

// UpdateMemberCalls gets all the calls that were made to UpdateMember.
// Check the length with:
//
//	len(mockedStore.UpdateMemberCalls())
func (mock *StoreMock) UpdateMemberCalls() []struct {
	Ctx      context.Context
	MemberID uuid.UUID
	Param    parameter.UpdateMemberParams
} {
	var calls []struct {
		Ctx      context.Context
		MemberID uuid.UUID
		Param    parameter.UpdateMemberParams
	}
	mock.lockUpdateMember.RLock()
	calls = mock.calls.UpdateMember
	mock.lockUpdateMember.RUnlock()
	return calls
}

// UpdateMemberAttendStatus calls UpdateMemberAttendStatusFunc.
func (mock *StoreMock) UpdateMemberAttendStatus(ctx context.Context, memberID uuid.UUID, attendStatusID uuid.UUID) (entity.Member, error) {
	if mock.UpdateMemberAttendStatusFunc == nil {
		panic("StoreMock.UpdateMemberAttendStatusFunc: method is nil but Store.UpdateMemberAttendStatus was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		MemberID       uuid.UUID
		AttendStatusID uuid.UUID
	}{
		Ctx:            ctx,
		MemberID:       memberID,
		AttendStatusID: attendStatusID,
	}
	mock.lockUpdateMemberAttendStatus.Lock()
	mock.calls.UpdateMemberAttendStatus = append(mock.calls.UpdateMemberAttendStatus, callInfo)
	mock.lockUpdateMemberAttendStatus.Unlock()
	return mock.UpdateMemberAttendStatusFunc(ctx, memberID, attendStatusID)
}

// UpdateMemberAttendStatusCalls gets all the calls that were made to UpdateMemberAttendStatus.
// Check the length with:
//
//	len(mockedStore.UpdateMemberAttendStatusCalls())
func (mock *StoreMock) UpdateMemberAttendStatusCalls() []struct {
	Ctx            context.Context
	MemberID       uuid.UUID
	AttendStatusID uuid.UUID
} {
	var calls []struct {
		Ctx            context.Context
		MemberID       uuid.UUID
		AttendStatusID uuid.UUID
	}
	mock.lockUpdateMemberAttendStatus.RLock()
	calls = mock.calls.UpdateMemberAttendStatus
	mock.lockUpdateMemberAttendStatus.RUnlock()
	return calls
}

// UpdateMemberAttendStatusWithSd calls UpdateMemberAttendStatusWithSdFunc.
func (mock *StoreMock) UpdateMemberAttendStatusWithSd(ctx context.Context, sd Sd, memberID uuid.UUID, attendStatusID uuid.UUID) (entity.Member, error) {
	if mock.UpdateMemberAttendStatusWithSdFunc == nil {
		panic("StoreMock.UpdateMemberAttendStatusWithSdFunc: method is nil but Store.UpdateMemberAttendStatusWithSd was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		Sd             Sd
		MemberID       uuid.UUID
		AttendStatusID uuid.UUID
	}{
		Ctx:            ctx,
		Sd:             sd,
		MemberID:       memberID,
		AttendStatusID: attendStatusID,
	}
	mock.lockUpdateMemberAttendStatusWithSd.Lock()
	mock.calls.UpdateMemberAttendStatusWithSd = append(mock.calls.UpdateMemberAttendStatusWithSd, callInfo)
	mock.lockUpdateMemberAttendStatusWithSd.Unlock()
	return mock.UpdateMemberAttendStatusWithSdFunc(ctx, sd, memberID, attendStatusID)
}

// UpdateMemberAttendStatusWithSdCalls gets all the calls that were made to UpdateMemberAttendStatusWithSd.
// Check the length with:
//
//	len(mockedStore.UpdateMemberAttendStatusWithSdCalls())
func (mock *StoreMock) UpdateMemberAttendStatusWithSdCalls() []struct {
	Ctx            context.Context
	Sd             Sd
	MemberID       uuid.UUID
	AttendStatusID uuid.UUID
} {
	var calls []struct {
		Ctx            context.Context
		Sd             Sd
		MemberID       uuid.UUID
		AttendStatusID uuid.UUID
	}
	mock.lockUpdateMemberAttendStatusWithSd.RLock()
	calls = mock.calls.UpdateMemberAttendStatusWithSd
	mock.lockUpdateMemberAttendStatusWithSd.RUnlock()
	return calls
}

// UpdateMemberGrade calls UpdateMemberGradeFunc.
func (mock *StoreMock) UpdateMemberGrade(ctx context.Context, memberID uuid.UUID, gradeID uuid.UUID) (entity.Member, error) {
	if mock.UpdateMemberGradeFunc == nil {
		panic("StoreMock.UpdateMemberGradeFunc: method is nil but Store.UpdateMemberGrade was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		MemberID uuid.UUID
		GradeID  uuid.UUID
	}{
		Ctx:      ctx,
		MemberID: memberID,
		GradeID:  gradeID,
	}
	mock.lockUpdateMemberGrade.Lock()
	mock.calls.UpdateMemberGrade = append(mock.calls.UpdateMemberGrade, callInfo)
	mock.lockUpdateMemberGrade.Unlock()
	return mock.UpdateMemberGradeFunc(ctx, memberID, gradeID)
}

// UpdateMemberGradeCalls gets all the calls that were made to UpdateMemberGrade.
// Check the length with:
//
//	len(mockedStore.UpdateMemberGradeCalls())
func (mock *StoreMock) UpdateMemberGradeCalls() []struct {
	Ctx      context.Context
	MemberID uuid.UUID
	GradeID  uuid.UUID
} {
	var calls []struct {
		Ctx      context.Context
		MemberID uuid.UUID
		GradeID  uuid.UUID
	}
	mock.lockUpdateMemberGrade.RLock()
	calls = mock.calls.UpdateMemberGrade
	mock.lockUpdateMemberGrade.RUnlock()
	return calls
}

// UpdateMemberGradeWithSd calls UpdateMemberGradeWithSdFunc.
func (mock *StoreMock) UpdateMemberGradeWithSd(ctx context.Context, sd Sd, memberID uuid.UUID, gradeID uuid.UUID) (entity.Member, error) {
	if mock.UpdateMemberGradeWithSdFunc == nil {
		panic("StoreMock.UpdateMemberGradeWithSdFunc: method is nil but Store.UpdateMemberGradeWithSd was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Sd       Sd
		MemberID uuid.UUID
		GradeID  uuid.UUID
	}{
		Ctx:      ctx,
		Sd:       sd,
		MemberID: memberID,
		GradeID:  gradeID,
	}
	mock.lockUpdateMemberGradeWithSd.Lock()
	mock.calls.UpdateMemberGradeWithSd = append(mock.calls.UpdateMemberGradeWithSd, callInfo)
	mock.lockUpdateMemberGradeWithSd.Unlock()
	return mock.UpdateMemberGradeWithSdFunc(ctx, sd, memberID, gradeID)
}

// UpdateMemberGradeWithSdCalls gets all the calls that were made to UpdateMemberGradeWithSd.
// Check the length with:
//
//	len(mockedStore.UpdateMemberGradeWithSdCalls())
func (mock *StoreMock) UpdateMemberGradeWithSdCalls() []struct {
	Ctx      context.Context
	Sd       Sd
	MemberID uuid.UUID
	GradeID  uuid.UUID
} {
	var calls []struct {
		Ctx      context.Context
		Sd       Sd
		MemberID uuid.UUID
		GradeID  uuid.UUID
	}
	mock.lockUpdateMemberGradeWithSd.RLock()
	calls = mock.calls.UpdateMemberGradeWithSd
	mock.lockUpdateMemberGradeWithSd.RUnlock()
	return calls
}

// UpdateMemberGroup calls UpdateMemberGroupFunc.
func (mock *StoreMock) UpdateMemberGroup(ctx context.Context, memberID uuid.UUID, groupID uuid.UUID) (entity.Member, error) {
	if mock.UpdateMemberGroupFunc == nil {
		panic("StoreMock.UpdateMemberGroupFunc: method is nil but Store.UpdateMemberGroup was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		MemberID uuid.UUID
		GroupID  uuid.UUID
	}{
		Ctx:      ctx,
		MemberID: memberID,
		GroupID:  groupID,
	}
	mock.lockUpdateMemberGroup.Lock()
	mock.calls.UpdateMemberGroup = append(mock.calls.UpdateMemberGroup, callInfo)
	mock.lockUpdateMemberGroup.Unlock()
	return mock.UpdateMemberGroupFunc(ctx, memberID, groupID)
}

// UpdateMemberGroupCalls gets all the calls that were made to UpdateMemberGroup.
// Check the length with:
//
//	len(mockedStore.UpdateMemberGroupCalls())
func (mock *StoreMock) UpdateMemberGroupCalls() []struct {
	Ctx      context.Context
	MemberID uuid.UUID
	GroupID  uuid.UUID
} {
	var calls []struct {
		Ctx      context.Context
		MemberID uuid.UUID
		GroupID  uuid.UUID
	}
	mock.lockUpdateMemberGroup.RLock()
	calls = mock.calls.UpdateMemberGroup
	mock.lockUpdateMemberGroup.RUnlock()
	return calls
}

// UpdateMemberGroupWithSd calls UpdateMemberGroupWithSdFunc.
func (mock *StoreMock) UpdateMemberGroupWithSd(ctx context.Context, sd Sd, memberID uuid.UUID, groupID uuid.UUID) (entity.Member, error) {
	if mock.UpdateMemberGroupWithSdFunc == nil {
		panic("StoreMock.UpdateMemberGroupWithSdFunc: method is nil but Store.UpdateMemberGroupWithSd was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Sd       Sd
		MemberID uuid.UUID
		GroupID  uuid.UUID
	}{
		Ctx:      ctx,
		Sd:       sd,
		MemberID: memberID,
		GroupID:  groupID,
	}
	mock.lockUpdateMemberGroupWithSd.Lock()
	mock.calls.UpdateMemberGroupWithSd = append(mock.calls.UpdateMemberGroupWithSd, callInfo)
	mock.lockUpdateMemberGroupWithSd.Unlock()
	return mock.UpdateMemberGroupWithSdFunc(ctx, sd, memberID, groupID)
}

// UpdateMemberGroupWithSdCalls gets all the calls that were made to UpdateMemberGroupWithSd.
// Check the length with:
//
//	len(mockedStore.UpdateMemberGroupWithSdCalls())
func (mock *StoreMock) UpdateMemberGroupWithSdCalls() []struct {
	Ctx      context.Context
	Sd       Sd
	MemberID uuid.UUID
	GroupID  uuid.UUID
} {
	var calls []struct {
		Ctx      context.Context
		Sd       Sd
		MemberID uuid.UUID
		GroupID  uuid.UUID
	}
	mock.lockUpdateMemberGroupWithSd.RLock()
	calls = mock.calls.UpdateMemberGroupWithSd
	mock.lockUpdateMemberGroupWithSd.RUnlock()
	return calls
}

// UpdateMemberLoginID calls UpdateMemberLoginIDFunc.
func (mock *StoreMock) UpdateMemberLoginID(ctx context.Context, memberID uuid.UUID, loginID string) (entity.Member, error) {
	if mock.UpdateMemberLoginIDFunc == nil {
		panic("StoreMock.UpdateMemberLoginIDFunc: method is nil but Store.UpdateMemberLoginID was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		MemberID uuid.UUID
		LoginID  string
	}{
		Ctx:      ctx,
		MemberID: memberID,
		LoginID:  loginID,
	}
	mock.lockUpdateMemberLoginID.Lock()
	mock.calls.UpdateMemberLoginID = append(mock.calls.UpdateMemberLoginID, callInfo)
	mock.lockUpdateMemberLoginID.Unlock()
	return mock.UpdateMemberLoginIDFunc(ctx, memberID, loginID)
}

// UpdateMemberLoginIDCalls gets all the calls that were made to UpdateMemberLoginID.
// Check the length with:
//
//	len(mockedStore.UpdateMemberLoginIDCalls())
func (mock *StoreMock) UpdateMemberLoginIDCalls() []struct {
	Ctx      context.Context
	MemberID uuid.UUID
	LoginID  string
} {
	var calls []struct {
		Ctx      context.Context
		MemberID uuid.UUID
		LoginID  string
	}
	mock.lockUpdateMemberLoginID.RLock()
	calls = mock.calls.UpdateMemberLoginID
	mock.lockUpdateMemberLoginID.RUnlock()
	return calls
}

// UpdateMemberLoginIDWithSd calls UpdateMemberLoginIDWithSdFunc.
func (mock *StoreMock) UpdateMemberLoginIDWithSd(ctx context.Context, sd Sd, memberID uuid.UUID, loginID string) (entity.Member, error) {
	if mock.UpdateMemberLoginIDWithSdFunc == nil {
		panic("StoreMock.UpdateMemberLoginIDWithSdFunc: method is nil but Store.UpdateMemberLoginIDWithSd was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Sd       Sd
		MemberID uuid.UUID
		LoginID  string
	}{
		Ctx:      ctx,
		Sd:       sd,
		MemberID: memberID,
		LoginID:  loginID,
	}
	mock.lockUpdateMemberLoginIDWithSd.Lock()
	mock.calls.UpdateMemberLoginIDWithSd = append(mock.calls.UpdateMemberLoginIDWithSd, callInfo)
	mock.lockUpdateMemberLoginIDWithSd.Unlock()
	return mock.UpdateMemberLoginIDWithSdFunc(ctx, sd, memberID, loginID)
}

// UpdateMemberLoginIDWithSdCalls gets all the calls that were made to UpdateMemberLoginIDWithSd.
// Check the length with:
//
//	len(mockedStore.UpdateMemberLoginIDWithSdCalls())
func (mock *StoreMock) UpdateMemberLoginIDWithSdCalls() []struct {
	Ctx      context.Context
	Sd       Sd
	MemberID uuid.UUID
	LoginID  string
} {
	var calls []struct {
		Ctx      context.Context
		Sd       Sd
		MemberID uuid.UUID
		LoginID  string
	}
	mock.lockUpdateMemberLoginIDWithSd.RLock()
	calls = mock.calls.UpdateMemberLoginIDWithSd
	mock.lockUpdateMemberLoginIDWithSd.RUnlock()
	return calls
}

// UpdateMemberPassword calls UpdateMemberPasswordFunc.
func (mock *StoreMock) UpdateMemberPassword(ctx context.Context, memberID uuid.UUID, password string) (entity.Member, error) {
	if mock.UpdateMemberPasswordFunc == nil {
		panic("StoreMock.UpdateMemberPasswordFunc: method is nil but Store.UpdateMemberPassword was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		MemberID uuid.UUID
		Password string
	}{
		Ctx:      ctx,
		MemberID: memberID,
		Password: password,
	}
	mock.lockUpdateMemberPassword.Lock()
	mock.calls.UpdateMemberPassword = append(mock.calls.UpdateMemberPassword, callInfo)
	mock.lockUpdateMemberPassword.Unlock()
	return mock.UpdateMemberPasswordFunc(ctx, memberID, password)
}

// UpdateMemberPasswordCalls gets all the calls that were made to UpdateMemberPassword.
// Check the length with:
//
//	len(mockedStore.UpdateMemberPasswordCalls())
func (mock *StoreMock) UpdateMemberPasswordCalls() []struct {
	Ctx      context.Context
	MemberID uuid.UUID
	Password string
} {
	var calls []struct {
		Ctx      context.Context
		MemberID uuid.UUID
		Password string
	}
	mock.lockUpdateMemberPassword.RLock()
	calls = mock.calls.UpdateMemberPassword
	mock.lockUpdateMemberPassword.RUnlock()
	return calls
}

// UpdateMemberPasswordWithSd calls UpdateMemberPasswordWithSdFunc.
func (mock *StoreMock) UpdateMemberPasswordWithSd(ctx context.Context, sd Sd, memberID uuid.UUID, password string) (entity.Member, error) {
	if mock.UpdateMemberPasswordWithSdFunc == nil {
		panic("StoreMock.UpdateMemberPasswordWithSdFunc: method is nil but Store.UpdateMemberPasswordWithSd was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Sd       Sd
		MemberID uuid.UUID
		Password string
	}{
		Ctx:      ctx,
		Sd:       sd,
		MemberID: memberID,
		Password: password,
	}
	mock.lockUpdateMemberPasswordWithSd.Lock()
	mock.calls.UpdateMemberPasswordWithSd = append(mock.calls.UpdateMemberPasswordWithSd, callInfo)
	mock.lockUpdateMemberPasswordWithSd.Unlock()
	return mock.UpdateMemberPasswordWithSdFunc(ctx, sd, memberID, password)
}

// UpdateMemberPasswordWithSdCalls gets all the calls that were made to UpdateMemberPasswordWithSd.
// Check the length with:
//
//	len(mockedStore.UpdateMemberPasswordWithSdCalls())
func (mock *StoreMock) UpdateMemberPasswordWithSdCalls() []struct {
	Ctx      context.Context
	Sd       Sd
	MemberID uuid.UUID
	Password string
} {
	var calls []struct {
		Ctx      context.Context
		Sd       Sd
		MemberID uuid.UUID
		Password string
	}
	mock.lockUpdateMemberPasswordWithSd.RLock()
	calls = mock.calls.UpdateMemberPasswordWithSd
	mock.lockUpdateMemberPasswordWithSd.RUnlock()
	return calls
}

// UpdateMemberRole calls UpdateMemberRoleFunc.
func (mock *StoreMock) UpdateMemberRole(ctx context.Context, memberID uuid.UUID, roleID entity.UUID) (entity.Member, error) {
	if mock.UpdateMemberRoleFunc == nil {
		panic("StoreMock.UpdateMemberRoleFunc: method is nil but Store.UpdateMemberRole was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		MemberID uuid.UUID
		RoleID   entity.UUID
	}{
		Ctx:      ctx,
		MemberID: memberID,
		RoleID:   roleID,
	}
	mock.lockUpdateMemberRole.Lock()
	mock.calls.UpdateMemberRole = append(mock.calls.UpdateMemberRole, callInfo)
	mock.lockUpdateMemberRole.Unlock()
	return mock.UpdateMemberRoleFunc(ctx, memberID, roleID)
}

// UpdateMemberRoleCalls gets all the calls that were made to UpdateMemberRole.
// Check the length with:
//
//	len(mockedStore.UpdateMemberRoleCalls())
func (mock *StoreMock) UpdateMemberRoleCalls() []struct {
	Ctx      context.Context
	MemberID uuid.UUID
	RoleID   entity.UUID
} {
	var calls []struct {
		Ctx      context.Context
		MemberID uuid.UUID
		RoleID   entity.UUID
	}
	mock.lockUpdateMemberRole.RLock()
	calls = mock.calls.UpdateMemberRole
	mock.lockUpdateMemberRole.RUnlock()
	return calls
}

// UpdateMemberRoleWithSd calls UpdateMemberRoleWithSdFunc.
func (mock *StoreMock) UpdateMemberRoleWithSd(ctx context.Context, sd Sd, memberID uuid.UUID, roleID entity.UUID) (entity.Member, error) {
	if mock.UpdateMemberRoleWithSdFunc == nil {
		panic("StoreMock.UpdateMemberRoleWithSdFunc: method is nil but Store.UpdateMemberRoleWithSd was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Sd       Sd
		MemberID uuid.UUID
		RoleID   entity.UUID
	}{
		Ctx:      ctx,
		Sd:       sd,
		MemberID: memberID,
		RoleID:   roleID,
	}
	mock.lockUpdateMemberRoleWithSd.Lock()
	mock.calls.UpdateMemberRoleWithSd = append(mock.calls.UpdateMemberRoleWithSd, callInfo)
	mock.lockUpdateMemberRoleWithSd.Unlock()
	return mock.UpdateMemberRoleWithSdFunc(ctx, sd, memberID, roleID)
}

// UpdateMemberRoleWithSdCalls gets all the calls that were made to UpdateMemberRoleWithSd.
// Check the length with:
//
//	len(mockedStore.UpdateMemberRoleWithSdCalls())
func (mock *StoreMock) UpdateMemberRoleWithSdCalls() []struct {
	Ctx      context.Context
	Sd       Sd
	MemberID uuid.UUID
	RoleID   entity.UUID
} {
	var calls []struct {
		Ctx      context.Context
		Sd       Sd
		MemberID uuid.UUID
		RoleID   entity.UUID
	}
	mock.lockUpdateMemberRoleWithSd.RLock()
	calls = mock.calls.UpdateMemberRoleWithSd
	mock.lockUpdateMemberRoleWithSd.RUnlock()
	return calls
}

// UpdateMemberWithSd calls UpdateMemberWithSdFunc.
func (mock *StoreMock) UpdateMemberWithSd(ctx context.Context, sd Sd, memberID uuid.UUID, param parameter.UpdateMemberParams) (entity.Member, error) {
	if mock.UpdateMemberWithSdFunc == nil {
		panic("StoreMock.UpdateMemberWithSdFunc: method is nil but Store.UpdateMemberWithSd was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Sd       Sd
		MemberID uuid.UUID
		Param    parameter.UpdateMemberParams
	}{
		Ctx:      ctx,
		Sd:       sd,
		MemberID: memberID,
		Param:    param,
	}
	mock.lockUpdateMemberWithSd.Lock()
	mock.calls.UpdateMemberWithSd = append(mock.calls.UpdateMemberWithSd, callInfo)
	mock.lockUpdateMemberWithSd.Unlock()
	return mock.UpdateMemberWithSdFunc(ctx, sd, memberID, param)
}

// UpdateMemberWithSdCalls gets all the calls that were made to UpdateMemberWithSd.
// Check the length with:
//
//	len(mockedStore.UpdateMemberWithSdCalls())
func (mock *StoreMock) UpdateMemberWithSdCalls() []struct {
	Ctx      context.Context
	Sd       Sd
	MemberID uuid.UUID
	Param    parameter.UpdateMemberParams
} {
	var calls []struct {
		Ctx      context.Context
		Sd       Sd
		MemberID uuid.UUID
		Param    parameter.UpdateMemberParams
	}
	mock.lockUpdateMemberWithSd.RLock()
	calls = mock.calls.UpdateMemberWithSd
	mock.lockUpdateMemberWithSd.RUnlock()
	return calls
}

// UpdateMessage calls UpdateMessageFunc.
func (mock *StoreMock) UpdateMessage(ctx context.Context, messageID uuid.UUID, param parameter.UpdateMessageParams) (entity.Message, error) {
	if mock.UpdateMessageFunc == nil {
		panic("StoreMock.UpdateMessageFunc: method is nil but Store.UpdateMessage was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		MessageID uuid.UUID
		Param     parameter.UpdateMessageParams
	}{
		Ctx:       ctx,
		MessageID: messageID,
		Param:     param,
	}
	mock.lockUpdateMessage.Lock()
	mock.calls.UpdateMessage = append(mock.calls.UpdateMessage, callInfo)
	mock.lockUpdateMessage.Unlock()
	return mock.UpdateMessageFunc(ctx, messageID, param)
}

// UpdateMessageCalls gets all the calls that were made to UpdateMessage.
// Check the length with:
//
//	len(mockedStore.UpdateMessageCalls())
func (mock *StoreMock) UpdateMessageCalls() []struct {
	Ctx       context.Context
	MessageID uuid.UUID
	Param     parameter.UpdateMessageParams
} {
	var calls []struct {
		Ctx       context.Context
		MessageID uuid.UUID
		Param     parameter.UpdateMessageParams
	}
	mock.lockUpdateMessage.RLock()
	calls = mock.calls.UpdateMessage
	mock.lockUpdateMessage.RUnlock()
	return calls
}

// UpdateMessageWithSd calls UpdateMessageWithSdFunc.
func (mock *StoreMock) UpdateMessageWithSd(ctx context.Context, sd Sd, messageID uuid.UUID, param parameter.UpdateMessageParams) (entity.Message, error) {
	if mock.UpdateMessageWithSdFunc == nil {
		panic("StoreMock.UpdateMessageWithSdFunc: method is nil but Store.UpdateMessageWithSd was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Sd        Sd
		MessageID uuid.UUID
		Param     parameter.UpdateMessageParams
	}{
		Ctx:       ctx,
		Sd:        sd,
		MessageID: messageID,
		Param:     param,
	}
	mock.lockUpdateMessageWithSd.Lock()
	mock.calls.UpdateMessageWithSd = append(mock.calls.UpdateMessageWithSd, callInfo)
	mock.lockUpdateMessageWithSd.Unlock()
	return mock.UpdateMessageWithSdFunc(ctx, sd, messageID, param)
}

// UpdateMessageWithSdCalls gets all the calls that were made to UpdateMessageWithSd.
// Check the length with:
//
//	len(mockedStore.UpdateMessageWithSdCalls())
func (mock *StoreMock) UpdateMessageWithSdCalls() []struct {
	Ctx       context.Context
	Sd        Sd
	MessageID uuid.UUID
	Param     parameter.UpdateMessageParams
} {
	var calls []struct {
		Ctx       context.Context
		Sd        Sd
		MessageID uuid.UUID
		Param     parameter.UpdateMessageParams
	}
	mock.lockUpdateMessageWithSd.RLock()
	calls = mock.calls.UpdateMessageWithSd
	mock.lockUpdateMessageWithSd.RUnlock()
	return calls
}

// UpdateMimeType calls UpdateMimeTypeFunc.
func (mock *StoreMock) UpdateMimeType(ctx context.Context, mimeTypeID uuid.UUID, param parameter.UpdateMimeTypeParams) (entity.MimeType, error) {
	if mock.UpdateMimeTypeFunc == nil {
		panic("StoreMock.UpdateMimeTypeFunc: method is nil but Store.UpdateMimeType was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		MimeTypeID uuid.UUID
		Param      parameter.UpdateMimeTypeParams
	}{
		Ctx:        ctx,
		MimeTypeID: mimeTypeID,
		Param:      param,
	}
	mock.lockUpdateMimeType.Lock()
	mock.calls.UpdateMimeType = append(mock.calls.UpdateMimeType, callInfo)
	mock.lockUpdateMimeType.Unlock()
	return mock.UpdateMimeTypeFunc(ctx, mimeTypeID, param)
}

// UpdateMimeTypeCalls gets all the calls that were made to UpdateMimeType.
// Check the length with:
//
//	len(mockedStore.UpdateMimeTypeCalls())
func (mock *StoreMock) UpdateMimeTypeCalls() []struct {
	Ctx        context.Context
	MimeTypeID uuid.UUID
	Param      parameter.UpdateMimeTypeParams
} {
	var calls []struct {
		Ctx        context.Context
		MimeTypeID uuid.UUID
		Param      parameter.UpdateMimeTypeParams
	}
	mock.lockUpdateMimeType.RLock()
	calls = mock.calls.UpdateMimeType
	mock.lockUpdateMimeType.RUnlock()
	return calls
}

// UpdateMimeTypeByKey calls UpdateMimeTypeByKeyFunc.
func (mock *StoreMock) UpdateMimeTypeByKey(ctx context.Context, key string, param parameter.UpdateMimeTypeByKeyParams) (entity.MimeType, error) {
	if mock.UpdateMimeTypeByKeyFunc == nil {
		panic("StoreMock.UpdateMimeTypeByKeyFunc: method is nil but Store.UpdateMimeTypeByKey was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Key   string
		Param parameter.UpdateMimeTypeByKeyParams
	}{
		Ctx:   ctx,
		Key:   key,
		Param: param,
	}
	mock.lockUpdateMimeTypeByKey.Lock()
	mock.calls.UpdateMimeTypeByKey = append(mock.calls.UpdateMimeTypeByKey, callInfo)
	mock.lockUpdateMimeTypeByKey.Unlock()
	return mock.UpdateMimeTypeByKeyFunc(ctx, key, param)
}

// UpdateMimeTypeByKeyCalls gets all the calls that were made to UpdateMimeTypeByKey.
// Check the length with:
//
//	len(mockedStore.UpdateMimeTypeByKeyCalls())
func (mock *StoreMock) UpdateMimeTypeByKeyCalls() []struct {
	Ctx   context.Context
	Key   string
	Param parameter.UpdateMimeTypeByKeyParams
} {
	var calls []struct {
		Ctx   context.Context
		Key   string
		Param parameter.UpdateMimeTypeByKeyParams
	}
	mock.lockUpdateMimeTypeByKey.RLock()
	calls = mock.calls.UpdateMimeTypeByKey
	mock.lockUpdateMimeTypeByKey.RUnlock()
	return calls
}

// UpdateMimeTypeByKeyWithSd calls UpdateMimeTypeByKeyWithSdFunc.
func (mock *StoreMock) UpdateMimeTypeByKeyWithSd(ctx context.Context, sd Sd, key string, param parameter.UpdateMimeTypeByKeyParams) (entity.MimeType, error) {
	if mock.UpdateMimeTypeByKeyWithSdFunc == nil {
		panic("StoreMock.UpdateMimeTypeByKeyWithSdFunc: method is nil but Store.UpdateMimeTypeByKeyWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Key   string
		Param parameter.UpdateMimeTypeByKeyParams
	}{
		Ctx:   ctx,
		Sd:    sd,
		Key:   key,
		Param: param,
	}
	mock.lockUpdateMimeTypeByKeyWithSd.Lock()
	mock.calls.UpdateMimeTypeByKeyWithSd = append(mock.calls.UpdateMimeTypeByKeyWithSd, callInfo)
	mock.lockUpdateMimeTypeByKeyWithSd.Unlock()
	return mock.UpdateMimeTypeByKeyWithSdFunc(ctx, sd, key, param)
}

// UpdateMimeTypeByKeyWithSdCalls gets all the calls that were made to UpdateMimeTypeByKeyWithSd.
// Check the length with:
//
//	len(mockedStore.UpdateMimeTypeByKeyWithSdCalls())
func (mock *StoreMock) UpdateMimeTypeByKeyWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Key   string
	Param parameter.UpdateMimeTypeByKeyParams
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Key   string
		Param parameter.UpdateMimeTypeByKeyParams
	}
	mock.lockUpdateMimeTypeByKeyWithSd.RLock()
	calls = mock.calls.UpdateMimeTypeByKeyWithSd
	mock.lockUpdateMimeTypeByKeyWithSd.RUnlock()
	return calls
}

// UpdateMimeTypeWithSd calls UpdateMimeTypeWithSdFunc.
func (mock *StoreMock) UpdateMimeTypeWithSd(ctx context.Context, sd Sd, mimeTypeID uuid.UUID, param parameter.UpdateMimeTypeParams) (entity.MimeType, error) {
	if mock.UpdateMimeTypeWithSdFunc == nil {
		panic("StoreMock.UpdateMimeTypeWithSdFunc: method is nil but Store.UpdateMimeTypeWithSd was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Sd         Sd
		MimeTypeID uuid.UUID
		Param      parameter.UpdateMimeTypeParams
	}{
		Ctx:        ctx,
		Sd:         sd,
		MimeTypeID: mimeTypeID,
		Param:      param,
	}
	mock.lockUpdateMimeTypeWithSd.Lock()
	mock.calls.UpdateMimeTypeWithSd = append(mock.calls.UpdateMimeTypeWithSd, callInfo)
	mock.lockUpdateMimeTypeWithSd.Unlock()
	return mock.UpdateMimeTypeWithSdFunc(ctx, sd, mimeTypeID, param)
}

// UpdateMimeTypeWithSdCalls gets all the calls that were made to UpdateMimeTypeWithSd.
// Check the length with:
//
//	len(mockedStore.UpdateMimeTypeWithSdCalls())
func (mock *StoreMock) UpdateMimeTypeWithSdCalls() []struct {
	Ctx        context.Context
	Sd         Sd
	MimeTypeID uuid.UUID
	Param      parameter.UpdateMimeTypeParams
} {
	var calls []struct {
		Ctx        context.Context
		Sd         Sd
		MimeTypeID uuid.UUID
		Param      parameter.UpdateMimeTypeParams
	}
	mock.lockUpdateMimeTypeWithSd.RLock()
	calls = mock.calls.UpdateMimeTypeWithSd
	mock.lockUpdateMimeTypeWithSd.RUnlock()
	return calls
}

// UpdateOrganization calls UpdateOrganizationFunc.
func (mock *StoreMock) UpdateOrganization(ctx context.Context, organizationID uuid.UUID, param parameter.UpdateOrganizationParams) (entity.Organization, error) {
	if mock.UpdateOrganizationFunc == nil {
		panic("StoreMock.UpdateOrganizationFunc: method is nil but Store.UpdateOrganization was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		OrganizationID uuid.UUID
		Param          parameter.UpdateOrganizationParams
	}{
		Ctx:            ctx,
		OrganizationID: organizationID,
		Param:          param,
	}
	mock.lockUpdateOrganization.Lock()
	mock.calls.UpdateOrganization = append(mock.calls.UpdateOrganization, callInfo)
	mock.lockUpdateOrganization.Unlock()
	return mock.UpdateOrganizationFunc(ctx, organizationID, param)
}

// UpdateOrganizationCalls gets all the calls that were made to UpdateOrganization.
// Check the length with:
//
//	len(mockedStore.UpdateOrganizationCalls())
func (mock *StoreMock) UpdateOrganizationCalls() []struct {
	Ctx            context.Context
	OrganizationID uuid.UUID
	Param          parameter.UpdateOrganizationParams
} {
	var calls []struct {
		Ctx            context.Context
		OrganizationID uuid.UUID
		Param          parameter.UpdateOrganizationParams
	}
	mock.lockUpdateOrganization.RLock()
	calls = mock.calls.UpdateOrganization
	mock.lockUpdateOrganization.RUnlock()
	return calls
}

// UpdateOrganizationWithSd calls UpdateOrganizationWithSdFunc.
func (mock *StoreMock) UpdateOrganizationWithSd(ctx context.Context, sd Sd, organizationID uuid.UUID, param parameter.UpdateOrganizationParams) (entity.Organization, error) {
	if mock.UpdateOrganizationWithSdFunc == nil {
		panic("StoreMock.UpdateOrganizationWithSdFunc: method is nil but Store.UpdateOrganizationWithSd was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		Sd             Sd
		OrganizationID uuid.UUID
		Param          parameter.UpdateOrganizationParams
	}{
		Ctx:            ctx,
		Sd:             sd,
		OrganizationID: organizationID,
		Param:          param,
	}
	mock.lockUpdateOrganizationWithSd.Lock()
	mock.calls.UpdateOrganizationWithSd = append(mock.calls.UpdateOrganizationWithSd, callInfo)
	mock.lockUpdateOrganizationWithSd.Unlock()
	return mock.UpdateOrganizationWithSdFunc(ctx, sd, organizationID, param)
}

// UpdateOrganizationWithSdCalls gets all the calls that were made to UpdateOrganizationWithSd.
// Check the length with:
//
//	len(mockedStore.UpdateOrganizationWithSdCalls())
func (mock *StoreMock) UpdateOrganizationWithSdCalls() []struct {
	Ctx            context.Context
	Sd             Sd
	OrganizationID uuid.UUID
	Param          parameter.UpdateOrganizationParams
} {
	var calls []struct {
		Ctx            context.Context
		Sd             Sd
		OrganizationID uuid.UUID
		Param          parameter.UpdateOrganizationParams
	}
	mock.lockUpdateOrganizationWithSd.RLock()
	calls = mock.calls.UpdateOrganizationWithSd
	mock.lockUpdateOrganizationWithSd.RUnlock()
	return calls
}

// UpdatePermission calls UpdatePermissionFunc.
func (mock *StoreMock) UpdatePermission(ctx context.Context, permissionID uuid.UUID, param parameter.UpdatePermissionParams) (entity.Permission, error) {
	if mock.UpdatePermissionFunc == nil {
		panic("StoreMock.UpdatePermissionFunc: method is nil but Store.UpdatePermission was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		PermissionID uuid.UUID
		Param        parameter.UpdatePermissionParams
	}{
		Ctx:          ctx,
		PermissionID: permissionID,
		Param:        param,
	}
	mock.lockUpdatePermission.Lock()
	mock.calls.UpdatePermission = append(mock.calls.UpdatePermission, callInfo)
	mock.lockUpdatePermission.Unlock()
	return mock.UpdatePermissionFunc(ctx, permissionID, param)
}

// UpdatePermissionCalls gets all the calls that were made to UpdatePermission.
// Check the length with:
//
//	len(mockedStore.UpdatePermissionCalls())
func (mock *StoreMock) UpdatePermissionCalls() []struct {
	Ctx          context.Context
	PermissionID uuid.UUID
	Param        parameter.UpdatePermissionParams
} {
	var calls []struct {
		Ctx          context.Context
		PermissionID uuid.UUID
		Param        parameter.UpdatePermissionParams
	}
	mock.lockUpdatePermission.RLock()
	calls = mock.calls.UpdatePermission
	mock.lockUpdatePermission.RUnlock()
	return calls
}

// UpdatePermissionByKey calls UpdatePermissionByKeyFunc.
func (mock *StoreMock) UpdatePermissionByKey(ctx context.Context, key string, param parameter.UpdatePermissionByKeyParams) (entity.Permission, error) {
	if mock.UpdatePermissionByKeyFunc == nil {
		panic("StoreMock.UpdatePermissionByKeyFunc: method is nil but Store.UpdatePermissionByKey was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Key   string
		Param parameter.UpdatePermissionByKeyParams
	}{
		Ctx:   ctx,
		Key:   key,
		Param: param,
	}
	mock.lockUpdatePermissionByKey.Lock()
	mock.calls.UpdatePermissionByKey = append(mock.calls.UpdatePermissionByKey, callInfo)
	mock.lockUpdatePermissionByKey.Unlock()
	return mock.UpdatePermissionByKeyFunc(ctx, key, param)
}

// UpdatePermissionByKeyCalls gets all the calls that were made to UpdatePermissionByKey.
// Check the length with:
//
//	len(mockedStore.UpdatePermissionByKeyCalls())
func (mock *StoreMock) UpdatePermissionByKeyCalls() []struct {
	Ctx   context.Context
	Key   string
	Param parameter.UpdatePermissionByKeyParams
} {
	var calls []struct {
		Ctx   context.Context
		Key   string
		Param parameter.UpdatePermissionByKeyParams
	}
	mock.lockUpdatePermissionByKey.RLock()
	calls = mock.calls.UpdatePermissionByKey
	mock.lockUpdatePermissionByKey.RUnlock()
	return calls
}

// UpdatePermissionByKeyWithSd calls UpdatePermissionByKeyWithSdFunc.
func (mock *StoreMock) UpdatePermissionByKeyWithSd(ctx context.Context, sd Sd, key string, param parameter.UpdatePermissionByKeyParams) (entity.Permission, error) {
	if mock.UpdatePermissionByKeyWithSdFunc == nil {
		panic("StoreMock.UpdatePermissionByKeyWithSdFunc: method is nil but Store.UpdatePermissionByKeyWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Key   string
		Param parameter.UpdatePermissionByKeyParams
	}{
		Ctx:   ctx,
		Sd:    sd,
		Key:   key,
		Param: param,
	}
	mock.lockUpdatePermissionByKeyWithSd.Lock()
	mock.calls.UpdatePermissionByKeyWithSd = append(mock.calls.UpdatePermissionByKeyWithSd, callInfo)
	mock.lockUpdatePermissionByKeyWithSd.Unlock()
	return mock.UpdatePermissionByKeyWithSdFunc(ctx, sd, key, param)
}

// UpdatePermissionByKeyWithSdCalls gets all the calls that were made to UpdatePermissionByKeyWithSd.
// Check the length with:
//
//	len(mockedStore.UpdatePermissionByKeyWithSdCalls())
func (mock *StoreMock) UpdatePermissionByKeyWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Key   string
	Param parameter.UpdatePermissionByKeyParams
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Key   string
		Param parameter.UpdatePermissionByKeyParams
	}
	mock.lockUpdatePermissionByKeyWithSd.RLock()
	calls = mock.calls.UpdatePermissionByKeyWithSd
	mock.lockUpdatePermissionByKeyWithSd.RUnlock()
	return calls
}

// UpdatePermissionCategory calls UpdatePermissionCategoryFunc.
func (mock *StoreMock) UpdatePermissionCategory(ctx context.Context, permissionCategoryID uuid.UUID, param parameter.UpdatePermissionCategoryParams) (entity.PermissionCategory, error) {
	if mock.UpdatePermissionCategoryFunc == nil {
		panic("StoreMock.UpdatePermissionCategoryFunc: method is nil but Store.UpdatePermissionCategory was just called")
	}
	callInfo := struct {
		Ctx                  context.Context
		PermissionCategoryID uuid.UUID
		Param                parameter.UpdatePermissionCategoryParams
	}{
		Ctx:                  ctx,
		PermissionCategoryID: permissionCategoryID,
		Param:                param,
	}
	mock.lockUpdatePermissionCategory.Lock()
	mock.calls.UpdatePermissionCategory = append(mock.calls.UpdatePermissionCategory, callInfo)
	mock.lockUpdatePermissionCategory.Unlock()
	return mock.UpdatePermissionCategoryFunc(ctx, permissionCategoryID, param)
}

// UpdatePermissionCategoryCalls gets all the calls that were made to UpdatePermissionCategory.
// Check the length with:
//
//	len(mockedStore.UpdatePermissionCategoryCalls())
func (mock *StoreMock) UpdatePermissionCategoryCalls() []struct {
	Ctx                  context.Context
	PermissionCategoryID uuid.UUID
	Param                parameter.UpdatePermissionCategoryParams
} {
	var calls []struct {
		Ctx                  context.Context
		PermissionCategoryID uuid.UUID
		Param                parameter.UpdatePermissionCategoryParams
	}
	mock.lockUpdatePermissionCategory.RLock()
	calls = mock.calls.UpdatePermissionCategory
	mock.lockUpdatePermissionCategory.RUnlock()
	return calls
}

// UpdatePermissionCategoryByKey calls UpdatePermissionCategoryByKeyFunc.
func (mock *StoreMock) UpdatePermissionCategoryByKey(ctx context.Context, key string, param parameter.UpdatePermissionCategoryByKeyParams) (entity.PermissionCategory, error) {
	if mock.UpdatePermissionCategoryByKeyFunc == nil {
		panic("StoreMock.UpdatePermissionCategoryByKeyFunc: method is nil but Store.UpdatePermissionCategoryByKey was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Key   string
		Param parameter.UpdatePermissionCategoryByKeyParams
	}{
		Ctx:   ctx,
		Key:   key,
		Param: param,
	}
	mock.lockUpdatePermissionCategoryByKey.Lock()
	mock.calls.UpdatePermissionCategoryByKey = append(mock.calls.UpdatePermissionCategoryByKey, callInfo)
	mock.lockUpdatePermissionCategoryByKey.Unlock()
	return mock.UpdatePermissionCategoryByKeyFunc(ctx, key, param)
}

// UpdatePermissionCategoryByKeyCalls gets all the calls that were made to UpdatePermissionCategoryByKey.
// Check the length with:
//
//	len(mockedStore.UpdatePermissionCategoryByKeyCalls())
func (mock *StoreMock) UpdatePermissionCategoryByKeyCalls() []struct {
	Ctx   context.Context
	Key   string
	Param parameter.UpdatePermissionCategoryByKeyParams
} {
	var calls []struct {
		Ctx   context.Context
		Key   string
		Param parameter.UpdatePermissionCategoryByKeyParams
	}
	mock.lockUpdatePermissionCategoryByKey.RLock()
	calls = mock.calls.UpdatePermissionCategoryByKey
	mock.lockUpdatePermissionCategoryByKey.RUnlock()
	return calls
}

// UpdatePermissionCategoryByKeyWithSd calls UpdatePermissionCategoryByKeyWithSdFunc.
func (mock *StoreMock) UpdatePermissionCategoryByKeyWithSd(ctx context.Context, sd Sd, key string, param parameter.UpdatePermissionCategoryByKeyParams) (entity.PermissionCategory, error) {
	if mock.UpdatePermissionCategoryByKeyWithSdFunc == nil {
		panic("StoreMock.UpdatePermissionCategoryByKeyWithSdFunc: method is nil but Store.UpdatePermissionCategoryByKeyWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Key   string
		Param parameter.UpdatePermissionCategoryByKeyParams
	}{
		Ctx:   ctx,
		Sd:    sd,
		Key:   key,
		Param: param,
	}
	mock.lockUpdatePermissionCategoryByKeyWithSd.Lock()
	mock.calls.UpdatePermissionCategoryByKeyWithSd = append(mock.calls.UpdatePermissionCategoryByKeyWithSd, callInfo)
	mock.lockUpdatePermissionCategoryByKeyWithSd.Unlock()
	return mock.UpdatePermissionCategoryByKeyWithSdFunc(ctx, sd, key, param)
}

// UpdatePermissionCategoryByKeyWithSdCalls gets all the calls that were made to UpdatePermissionCategoryByKeyWithSd.
// Check the length with:
//
//	len(mockedStore.UpdatePermissionCategoryByKeyWithSdCalls())
func (mock *StoreMock) UpdatePermissionCategoryByKeyWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Key   string
	Param parameter.UpdatePermissionCategoryByKeyParams
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Key   string
		Param parameter.UpdatePermissionCategoryByKeyParams
	}
	mock.lockUpdatePermissionCategoryByKeyWithSd.RLock()
	calls = mock.calls.UpdatePermissionCategoryByKeyWithSd
	mock.lockUpdatePermissionCategoryByKeyWithSd.RUnlock()
	return calls
}

// UpdatePermissionCategoryWithSd calls UpdatePermissionCategoryWithSdFunc.
func (mock *StoreMock) UpdatePermissionCategoryWithSd(ctx context.Context, sd Sd, permissionCategoryID uuid.UUID, param parameter.UpdatePermissionCategoryParams) (entity.PermissionCategory, error) {
	if mock.UpdatePermissionCategoryWithSdFunc == nil {
		panic("StoreMock.UpdatePermissionCategoryWithSdFunc: method is nil but Store.UpdatePermissionCategoryWithSd was just called")
	}
	callInfo := struct {
		Ctx                  context.Context
		Sd                   Sd
		PermissionCategoryID uuid.UUID
		Param                parameter.UpdatePermissionCategoryParams
	}{
		Ctx:                  ctx,
		Sd:                   sd,
		PermissionCategoryID: permissionCategoryID,
		Param:                param,
	}
	mock.lockUpdatePermissionCategoryWithSd.Lock()
	mock.calls.UpdatePermissionCategoryWithSd = append(mock.calls.UpdatePermissionCategoryWithSd, callInfo)
	mock.lockUpdatePermissionCategoryWithSd.Unlock()
	return mock.UpdatePermissionCategoryWithSdFunc(ctx, sd, permissionCategoryID, param)
}

// UpdatePermissionCategoryWithSdCalls gets all the calls that were made to UpdatePermissionCategoryWithSd.
// Check the length with:
//
//	len(mockedStore.UpdatePermissionCategoryWithSdCalls())
func (mock *StoreMock) UpdatePermissionCategoryWithSdCalls() []struct {
	Ctx                  context.Context
	Sd                   Sd
	PermissionCategoryID uuid.UUID
	Param                parameter.UpdatePermissionCategoryParams
} {
	var calls []struct {
		Ctx                  context.Context
		Sd                   Sd
		PermissionCategoryID uuid.UUID
		Param                parameter.UpdatePermissionCategoryParams
	}
	mock.lockUpdatePermissionCategoryWithSd.RLock()
	calls = mock.calls.UpdatePermissionCategoryWithSd
	mock.lockUpdatePermissionCategoryWithSd.RUnlock()
	return calls
}

// UpdatePermissionWithSd calls UpdatePermissionWithSdFunc.
func (mock *StoreMock) UpdatePermissionWithSd(ctx context.Context, sd Sd, permissionID uuid.UUID, param parameter.UpdatePermissionParams) (entity.Permission, error) {
	if mock.UpdatePermissionWithSdFunc == nil {
		panic("StoreMock.UpdatePermissionWithSdFunc: method is nil but Store.UpdatePermissionWithSd was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		Sd           Sd
		PermissionID uuid.UUID
		Param        parameter.UpdatePermissionParams
	}{
		Ctx:          ctx,
		Sd:           sd,
		PermissionID: permissionID,
		Param:        param,
	}
	mock.lockUpdatePermissionWithSd.Lock()
	mock.calls.UpdatePermissionWithSd = append(mock.calls.UpdatePermissionWithSd, callInfo)
	mock.lockUpdatePermissionWithSd.Unlock()
	return mock.UpdatePermissionWithSdFunc(ctx, sd, permissionID, param)
}

// UpdatePermissionWithSdCalls gets all the calls that were made to UpdatePermissionWithSd.
// Check the length with:
//
//	len(mockedStore.UpdatePermissionWithSdCalls())
func (mock *StoreMock) UpdatePermissionWithSdCalls() []struct {
	Ctx          context.Context
	Sd           Sd
	PermissionID uuid.UUID
	Param        parameter.UpdatePermissionParams
} {
	var calls []struct {
		Ctx          context.Context
		Sd           Sd
		PermissionID uuid.UUID
		Param        parameter.UpdatePermissionParams
	}
	mock.lockUpdatePermissionWithSd.RLock()
	calls = mock.calls.UpdatePermissionWithSd
	mock.lockUpdatePermissionWithSd.RUnlock()
	return calls
}

// UpdatePolicy calls UpdatePolicyFunc.
func (mock *StoreMock) UpdatePolicy(ctx context.Context, policyID uuid.UUID, param parameter.UpdatePolicyParams) (entity.Policy, error) {
	if mock.UpdatePolicyFunc == nil {
		panic("StoreMock.UpdatePolicyFunc: method is nil but Store.UpdatePolicy was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		PolicyID uuid.UUID
		Param    parameter.UpdatePolicyParams
	}{
		Ctx:      ctx,
		PolicyID: policyID,
		Param:    param,
	}
	mock.lockUpdatePolicy.Lock()
	mock.calls.UpdatePolicy = append(mock.calls.UpdatePolicy, callInfo)
	mock.lockUpdatePolicy.Unlock()
	return mock.UpdatePolicyFunc(ctx, policyID, param)
}

// UpdatePolicyCalls gets all the calls that were made to UpdatePolicy.
// Check the length with:
//
//	len(mockedStore.UpdatePolicyCalls())
func (mock *StoreMock) UpdatePolicyCalls() []struct {
	Ctx      context.Context
	PolicyID uuid.UUID
	Param    parameter.UpdatePolicyParams
} {
	var calls []struct {
		Ctx      context.Context
		PolicyID uuid.UUID
		Param    parameter.UpdatePolicyParams
	}
	mock.lockUpdatePolicy.RLock()
	calls = mock.calls.UpdatePolicy
	mock.lockUpdatePolicy.RUnlock()
	return calls
}

// UpdatePolicyByKey calls UpdatePolicyByKeyFunc.
func (mock *StoreMock) UpdatePolicyByKey(ctx context.Context, key string, param parameter.UpdatePolicyByKeyParams) (entity.Policy, error) {
	if mock.UpdatePolicyByKeyFunc == nil {
		panic("StoreMock.UpdatePolicyByKeyFunc: method is nil but Store.UpdatePolicyByKey was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Key   string
		Param parameter.UpdatePolicyByKeyParams
	}{
		Ctx:   ctx,
		Key:   key,
		Param: param,
	}
	mock.lockUpdatePolicyByKey.Lock()
	mock.calls.UpdatePolicyByKey = append(mock.calls.UpdatePolicyByKey, callInfo)
	mock.lockUpdatePolicyByKey.Unlock()
	return mock.UpdatePolicyByKeyFunc(ctx, key, param)
}

// UpdatePolicyByKeyCalls gets all the calls that were made to UpdatePolicyByKey.
// Check the length with:
//
//	len(mockedStore.UpdatePolicyByKeyCalls())
func (mock *StoreMock) UpdatePolicyByKeyCalls() []struct {
	Ctx   context.Context
	Key   string
	Param parameter.UpdatePolicyByKeyParams
} {
	var calls []struct {
		Ctx   context.Context
		Key   string
		Param parameter.UpdatePolicyByKeyParams
	}
	mock.lockUpdatePolicyByKey.RLock()
	calls = mock.calls.UpdatePolicyByKey
	mock.lockUpdatePolicyByKey.RUnlock()
	return calls
}

// UpdatePolicyByKeyWithSd calls UpdatePolicyByKeyWithSdFunc.
func (mock *StoreMock) UpdatePolicyByKeyWithSd(ctx context.Context, sd Sd, key string, param parameter.UpdatePolicyByKeyParams) (entity.Policy, error) {
	if mock.UpdatePolicyByKeyWithSdFunc == nil {
		panic("StoreMock.UpdatePolicyByKeyWithSdFunc: method is nil but Store.UpdatePolicyByKeyWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Key   string
		Param parameter.UpdatePolicyByKeyParams
	}{
		Ctx:   ctx,
		Sd:    sd,
		Key:   key,
		Param: param,
	}
	mock.lockUpdatePolicyByKeyWithSd.Lock()
	mock.calls.UpdatePolicyByKeyWithSd = append(mock.calls.UpdatePolicyByKeyWithSd, callInfo)
	mock.lockUpdatePolicyByKeyWithSd.Unlock()
	return mock.UpdatePolicyByKeyWithSdFunc(ctx, sd, key, param)
}

// UpdatePolicyByKeyWithSdCalls gets all the calls that were made to UpdatePolicyByKeyWithSd.
// Check the length with:
//
//	len(mockedStore.UpdatePolicyByKeyWithSdCalls())
func (mock *StoreMock) UpdatePolicyByKeyWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Key   string
	Param parameter.UpdatePolicyByKeyParams
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Key   string
		Param parameter.UpdatePolicyByKeyParams
	}
	mock.lockUpdatePolicyByKeyWithSd.RLock()
	calls = mock.calls.UpdatePolicyByKeyWithSd
	mock.lockUpdatePolicyByKeyWithSd.RUnlock()
	return calls
}

// UpdatePolicyCategory calls UpdatePolicyCategoryFunc.
func (mock *StoreMock) UpdatePolicyCategory(ctx context.Context, policyCategoryID uuid.UUID, param parameter.UpdatePolicyCategoryParams) (entity.PolicyCategory, error) {
	if mock.UpdatePolicyCategoryFunc == nil {
		panic("StoreMock.UpdatePolicyCategoryFunc: method is nil but Store.UpdatePolicyCategory was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		PolicyCategoryID uuid.UUID
		Param            parameter.UpdatePolicyCategoryParams
	}{
		Ctx:              ctx,
		PolicyCategoryID: policyCategoryID,
		Param:            param,
	}
	mock.lockUpdatePolicyCategory.Lock()
	mock.calls.UpdatePolicyCategory = append(mock.calls.UpdatePolicyCategory, callInfo)
	mock.lockUpdatePolicyCategory.Unlock()
	return mock.UpdatePolicyCategoryFunc(ctx, policyCategoryID, param)
}

// UpdatePolicyCategoryCalls gets all the calls that were made to UpdatePolicyCategory.
// Check the length with:
//
//	len(mockedStore.UpdatePolicyCategoryCalls())
func (mock *StoreMock) UpdatePolicyCategoryCalls() []struct {
	Ctx              context.Context
	PolicyCategoryID uuid.UUID
	Param            parameter.UpdatePolicyCategoryParams
} {
	var calls []struct {
		Ctx              context.Context
		PolicyCategoryID uuid.UUID
		Param            parameter.UpdatePolicyCategoryParams
	}
	mock.lockUpdatePolicyCategory.RLock()
	calls = mock.calls.UpdatePolicyCategory
	mock.lockUpdatePolicyCategory.RUnlock()
	return calls
}

// UpdatePolicyCategoryByKey calls UpdatePolicyCategoryByKeyFunc.
func (mock *StoreMock) UpdatePolicyCategoryByKey(ctx context.Context, key string, param parameter.UpdatePolicyCategoryByKeyParams) (entity.PolicyCategory, error) {
	if mock.UpdatePolicyCategoryByKeyFunc == nil {
		panic("StoreMock.UpdatePolicyCategoryByKeyFunc: method is nil but Store.UpdatePolicyCategoryByKey was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Key   string
		Param parameter.UpdatePolicyCategoryByKeyParams
	}{
		Ctx:   ctx,
		Key:   key,
		Param: param,
	}
	mock.lockUpdatePolicyCategoryByKey.Lock()
	mock.calls.UpdatePolicyCategoryByKey = append(mock.calls.UpdatePolicyCategoryByKey, callInfo)
	mock.lockUpdatePolicyCategoryByKey.Unlock()
	return mock.UpdatePolicyCategoryByKeyFunc(ctx, key, param)
}

// UpdatePolicyCategoryByKeyCalls gets all the calls that were made to UpdatePolicyCategoryByKey.
// Check the length with:
//
//	len(mockedStore.UpdatePolicyCategoryByKeyCalls())
func (mock *StoreMock) UpdatePolicyCategoryByKeyCalls() []struct {
	Ctx   context.Context
	Key   string
	Param parameter.UpdatePolicyCategoryByKeyParams
} {
	var calls []struct {
		Ctx   context.Context
		Key   string
		Param parameter.UpdatePolicyCategoryByKeyParams
	}
	mock.lockUpdatePolicyCategoryByKey.RLock()
	calls = mock.calls.UpdatePolicyCategoryByKey
	mock.lockUpdatePolicyCategoryByKey.RUnlock()
	return calls
}

// UpdatePolicyCategoryByKeyWithSd calls UpdatePolicyCategoryByKeyWithSdFunc.
func (mock *StoreMock) UpdatePolicyCategoryByKeyWithSd(ctx context.Context, sd Sd, key string, param parameter.UpdatePolicyCategoryByKeyParams) (entity.PolicyCategory, error) {
	if mock.UpdatePolicyCategoryByKeyWithSdFunc == nil {
		panic("StoreMock.UpdatePolicyCategoryByKeyWithSdFunc: method is nil but Store.UpdatePolicyCategoryByKeyWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Key   string
		Param parameter.UpdatePolicyCategoryByKeyParams
	}{
		Ctx:   ctx,
		Sd:    sd,
		Key:   key,
		Param: param,
	}
	mock.lockUpdatePolicyCategoryByKeyWithSd.Lock()
	mock.calls.UpdatePolicyCategoryByKeyWithSd = append(mock.calls.UpdatePolicyCategoryByKeyWithSd, callInfo)
	mock.lockUpdatePolicyCategoryByKeyWithSd.Unlock()
	return mock.UpdatePolicyCategoryByKeyWithSdFunc(ctx, sd, key, param)
}

// UpdatePolicyCategoryByKeyWithSdCalls gets all the calls that were made to UpdatePolicyCategoryByKeyWithSd.
// Check the length with:
//
//	len(mockedStore.UpdatePolicyCategoryByKeyWithSdCalls())
func (mock *StoreMock) UpdatePolicyCategoryByKeyWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Key   string
	Param parameter.UpdatePolicyCategoryByKeyParams
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Key   string
		Param parameter.UpdatePolicyCategoryByKeyParams
	}
	mock.lockUpdatePolicyCategoryByKeyWithSd.RLock()
	calls = mock.calls.UpdatePolicyCategoryByKeyWithSd
	mock.lockUpdatePolicyCategoryByKeyWithSd.RUnlock()
	return calls
}

// UpdatePolicyCategoryWithSd calls UpdatePolicyCategoryWithSdFunc.
func (mock *StoreMock) UpdatePolicyCategoryWithSd(ctx context.Context, sd Sd, policyCategoryID uuid.UUID, param parameter.UpdatePolicyCategoryParams) (entity.PolicyCategory, error) {
	if mock.UpdatePolicyCategoryWithSdFunc == nil {
		panic("StoreMock.UpdatePolicyCategoryWithSdFunc: method is nil but Store.UpdatePolicyCategoryWithSd was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		Sd               Sd
		PolicyCategoryID uuid.UUID
		Param            parameter.UpdatePolicyCategoryParams
	}{
		Ctx:              ctx,
		Sd:               sd,
		PolicyCategoryID: policyCategoryID,
		Param:            param,
	}
	mock.lockUpdatePolicyCategoryWithSd.Lock()
	mock.calls.UpdatePolicyCategoryWithSd = append(mock.calls.UpdatePolicyCategoryWithSd, callInfo)
	mock.lockUpdatePolicyCategoryWithSd.Unlock()
	return mock.UpdatePolicyCategoryWithSdFunc(ctx, sd, policyCategoryID, param)
}

// UpdatePolicyCategoryWithSdCalls gets all the calls that were made to UpdatePolicyCategoryWithSd.
// Check the length with:
//
//	len(mockedStore.UpdatePolicyCategoryWithSdCalls())
func (mock *StoreMock) UpdatePolicyCategoryWithSdCalls() []struct {
	Ctx              context.Context
	Sd               Sd
	PolicyCategoryID uuid.UUID
	Param            parameter.UpdatePolicyCategoryParams
} {
	var calls []struct {
		Ctx              context.Context
		Sd               Sd
		PolicyCategoryID uuid.UUID
		Param            parameter.UpdatePolicyCategoryParams
	}
	mock.lockUpdatePolicyCategoryWithSd.RLock()
	calls = mock.calls.UpdatePolicyCategoryWithSd
	mock.lockUpdatePolicyCategoryWithSd.RUnlock()
	return calls
}

// UpdatePolicyWithSd calls UpdatePolicyWithSdFunc.
func (mock *StoreMock) UpdatePolicyWithSd(ctx context.Context, sd Sd, policyID uuid.UUID, param parameter.UpdatePolicyParams) (entity.Policy, error) {
	if mock.UpdatePolicyWithSdFunc == nil {
		panic("StoreMock.UpdatePolicyWithSdFunc: method is nil but Store.UpdatePolicyWithSd was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Sd       Sd
		PolicyID uuid.UUID
		Param    parameter.UpdatePolicyParams
	}{
		Ctx:      ctx,
		Sd:       sd,
		PolicyID: policyID,
		Param:    param,
	}
	mock.lockUpdatePolicyWithSd.Lock()
	mock.calls.UpdatePolicyWithSd = append(mock.calls.UpdatePolicyWithSd, callInfo)
	mock.lockUpdatePolicyWithSd.Unlock()
	return mock.UpdatePolicyWithSdFunc(ctx, sd, policyID, param)
}

// UpdatePolicyWithSdCalls gets all the calls that were made to UpdatePolicyWithSd.
// Check the length with:
//
//	len(mockedStore.UpdatePolicyWithSdCalls())
func (mock *StoreMock) UpdatePolicyWithSdCalls() []struct {
	Ctx      context.Context
	Sd       Sd
	PolicyID uuid.UUID
	Param    parameter.UpdatePolicyParams
} {
	var calls []struct {
		Ctx      context.Context
		Sd       Sd
		PolicyID uuid.UUID
		Param    parameter.UpdatePolicyParams
	}
	mock.lockUpdatePolicyWithSd.RLock()
	calls = mock.calls.UpdatePolicyWithSd
	mock.lockUpdatePolicyWithSd.RUnlock()
	return calls
}

// UpdateRecordType calls UpdateRecordTypeFunc.
func (mock *StoreMock) UpdateRecordType(ctx context.Context, recordTypeID uuid.UUID, param parameter.UpdateRecordTypeParams) (entity.RecordType, error) {
	if mock.UpdateRecordTypeFunc == nil {
		panic("StoreMock.UpdateRecordTypeFunc: method is nil but Store.UpdateRecordType was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		RecordTypeID uuid.UUID
		Param        parameter.UpdateRecordTypeParams
	}{
		Ctx:          ctx,
		RecordTypeID: recordTypeID,
		Param:        param,
	}
	mock.lockUpdateRecordType.Lock()
	mock.calls.UpdateRecordType = append(mock.calls.UpdateRecordType, callInfo)
	mock.lockUpdateRecordType.Unlock()
	return mock.UpdateRecordTypeFunc(ctx, recordTypeID, param)
}

// UpdateRecordTypeCalls gets all the calls that were made to UpdateRecordType.
// Check the length with:
//
//	len(mockedStore.UpdateRecordTypeCalls())
func (mock *StoreMock) UpdateRecordTypeCalls() []struct {
	Ctx          context.Context
	RecordTypeID uuid.UUID
	Param        parameter.UpdateRecordTypeParams
} {
	var calls []struct {
		Ctx          context.Context
		RecordTypeID uuid.UUID
		Param        parameter.UpdateRecordTypeParams
	}
	mock.lockUpdateRecordType.RLock()
	calls = mock.calls.UpdateRecordType
	mock.lockUpdateRecordType.RUnlock()
	return calls
}

// UpdateRecordTypeByKey calls UpdateRecordTypeByKeyFunc.
func (mock *StoreMock) UpdateRecordTypeByKey(ctx context.Context, key string, param parameter.UpdateRecordTypeByKeyParams) (entity.RecordType, error) {
	if mock.UpdateRecordTypeByKeyFunc == nil {
		panic("StoreMock.UpdateRecordTypeByKeyFunc: method is nil but Store.UpdateRecordTypeByKey was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Key   string
		Param parameter.UpdateRecordTypeByKeyParams
	}{
		Ctx:   ctx,
		Key:   key,
		Param: param,
	}
	mock.lockUpdateRecordTypeByKey.Lock()
	mock.calls.UpdateRecordTypeByKey = append(mock.calls.UpdateRecordTypeByKey, callInfo)
	mock.lockUpdateRecordTypeByKey.Unlock()
	return mock.UpdateRecordTypeByKeyFunc(ctx, key, param)
}

// UpdateRecordTypeByKeyCalls gets all the calls that were made to UpdateRecordTypeByKey.
// Check the length with:
//
//	len(mockedStore.UpdateRecordTypeByKeyCalls())
func (mock *StoreMock) UpdateRecordTypeByKeyCalls() []struct {
	Ctx   context.Context
	Key   string
	Param parameter.UpdateRecordTypeByKeyParams
} {
	var calls []struct {
		Ctx   context.Context
		Key   string
		Param parameter.UpdateRecordTypeByKeyParams
	}
	mock.lockUpdateRecordTypeByKey.RLock()
	calls = mock.calls.UpdateRecordTypeByKey
	mock.lockUpdateRecordTypeByKey.RUnlock()
	return calls
}

// UpdateRecordTypeByKeyWithSd calls UpdateRecordTypeByKeyWithSdFunc.
func (mock *StoreMock) UpdateRecordTypeByKeyWithSd(ctx context.Context, sd Sd, key string, param parameter.UpdateRecordTypeByKeyParams) (entity.RecordType, error) {
	if mock.UpdateRecordTypeByKeyWithSdFunc == nil {
		panic("StoreMock.UpdateRecordTypeByKeyWithSdFunc: method is nil but Store.UpdateRecordTypeByKeyWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Key   string
		Param parameter.UpdateRecordTypeByKeyParams
	}{
		Ctx:   ctx,
		Sd:    sd,
		Key:   key,
		Param: param,
	}
	mock.lockUpdateRecordTypeByKeyWithSd.Lock()
	mock.calls.UpdateRecordTypeByKeyWithSd = append(mock.calls.UpdateRecordTypeByKeyWithSd, callInfo)
	mock.lockUpdateRecordTypeByKeyWithSd.Unlock()
	return mock.UpdateRecordTypeByKeyWithSdFunc(ctx, sd, key, param)
}

// UpdateRecordTypeByKeyWithSdCalls gets all the calls that were made to UpdateRecordTypeByKeyWithSd.
// Check the length with:
//
//	len(mockedStore.UpdateRecordTypeByKeyWithSdCalls())
func (mock *StoreMock) UpdateRecordTypeByKeyWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Key   string
	Param parameter.UpdateRecordTypeByKeyParams
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Key   string
		Param parameter.UpdateRecordTypeByKeyParams
	}
	mock.lockUpdateRecordTypeByKeyWithSd.RLock()
	calls = mock.calls.UpdateRecordTypeByKeyWithSd
	mock.lockUpdateRecordTypeByKeyWithSd.RUnlock()
	return calls
}

// UpdateRecordTypeWithSd calls UpdateRecordTypeWithSdFunc.
func (mock *StoreMock) UpdateRecordTypeWithSd(ctx context.Context, sd Sd, recordTypeID uuid.UUID, param parameter.UpdateRecordTypeParams) (entity.RecordType, error) {
	if mock.UpdateRecordTypeWithSdFunc == nil {
		panic("StoreMock.UpdateRecordTypeWithSdFunc: method is nil but Store.UpdateRecordTypeWithSd was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		Sd           Sd
		RecordTypeID uuid.UUID
		Param        parameter.UpdateRecordTypeParams
	}{
		Ctx:          ctx,
		Sd:           sd,
		RecordTypeID: recordTypeID,
		Param:        param,
	}
	mock.lockUpdateRecordTypeWithSd.Lock()
	mock.calls.UpdateRecordTypeWithSd = append(mock.calls.UpdateRecordTypeWithSd, callInfo)
	mock.lockUpdateRecordTypeWithSd.Unlock()
	return mock.UpdateRecordTypeWithSdFunc(ctx, sd, recordTypeID, param)
}

// UpdateRecordTypeWithSdCalls gets all the calls that were made to UpdateRecordTypeWithSd.
// Check the length with:
//
//	len(mockedStore.UpdateRecordTypeWithSdCalls())
func (mock *StoreMock) UpdateRecordTypeWithSdCalls() []struct {
	Ctx          context.Context
	Sd           Sd
	RecordTypeID uuid.UUID
	Param        parameter.UpdateRecordTypeParams
} {
	var calls []struct {
		Ctx          context.Context
		Sd           Sd
		RecordTypeID uuid.UUID
		Param        parameter.UpdateRecordTypeParams
	}
	mock.lockUpdateRecordTypeWithSd.RLock()
	calls = mock.calls.UpdateRecordTypeWithSd
	mock.lockUpdateRecordTypeWithSd.RUnlock()
	return calls
}

// UpdateRole calls UpdateRoleFunc.
func (mock *StoreMock) UpdateRole(ctx context.Context, roleID uuid.UUID, param parameter.UpdateRoleParams) (entity.Role, error) {
	if mock.UpdateRoleFunc == nil {
		panic("StoreMock.UpdateRoleFunc: method is nil but Store.UpdateRole was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		RoleID uuid.UUID
		Param  parameter.UpdateRoleParams
	}{
		Ctx:    ctx,
		RoleID: roleID,
		Param:  param,
	}
	mock.lockUpdateRole.Lock()
	mock.calls.UpdateRole = append(mock.calls.UpdateRole, callInfo)
	mock.lockUpdateRole.Unlock()
	return mock.UpdateRoleFunc(ctx, roleID, param)
}

// UpdateRoleCalls gets all the calls that were made to UpdateRole.
// Check the length with:
//
//	len(mockedStore.UpdateRoleCalls())
func (mock *StoreMock) UpdateRoleCalls() []struct {
	Ctx    context.Context
	RoleID uuid.UUID
	Param  parameter.UpdateRoleParams
} {
	var calls []struct {
		Ctx    context.Context
		RoleID uuid.UUID
		Param  parameter.UpdateRoleParams
	}
	mock.lockUpdateRole.RLock()
	calls = mock.calls.UpdateRole
	mock.lockUpdateRole.RUnlock()
	return calls
}

// UpdateRoleWithSd calls UpdateRoleWithSdFunc.
func (mock *StoreMock) UpdateRoleWithSd(ctx context.Context, sd Sd, roleID uuid.UUID, param parameter.UpdateRoleParams) (entity.Role, error) {
	if mock.UpdateRoleWithSdFunc == nil {
		panic("StoreMock.UpdateRoleWithSdFunc: method is nil but Store.UpdateRoleWithSd was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Sd     Sd
		RoleID uuid.UUID
		Param  parameter.UpdateRoleParams
	}{
		Ctx:    ctx,
		Sd:     sd,
		RoleID: roleID,
		Param:  param,
	}
	mock.lockUpdateRoleWithSd.Lock()
	mock.calls.UpdateRoleWithSd = append(mock.calls.UpdateRoleWithSd, callInfo)
	mock.lockUpdateRoleWithSd.Unlock()
	return mock.UpdateRoleWithSdFunc(ctx, sd, roleID, param)
}

// UpdateRoleWithSdCalls gets all the calls that were made to UpdateRoleWithSd.
// Check the length with:
//
//	len(mockedStore.UpdateRoleWithSdCalls())
func (mock *StoreMock) UpdateRoleWithSdCalls() []struct {
	Ctx    context.Context
	Sd     Sd
	RoleID uuid.UUID
	Param  parameter.UpdateRoleParams
} {
	var calls []struct {
		Ctx    context.Context
		Sd     Sd
		RoleID uuid.UUID
		Param  parameter.UpdateRoleParams
	}
	mock.lockUpdateRoleWithSd.RLock()
	calls = mock.calls.UpdateRoleWithSd
	mock.lockUpdateRoleWithSd.RUnlock()
	return calls
}
