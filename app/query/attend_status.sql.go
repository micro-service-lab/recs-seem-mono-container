// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: attend_status.sql

package query

import (
	"context"

	"github.com/google/uuid"
)

const countAttendStatuses = `-- name: CountAttendStatuses :one
SELECT COUNT(*) FROM m_attend_statuses
WHERE
	CASE WHEN $1::boolean = true THEN name LIKE '%' || $2::text || '%' ELSE TRUE END
`

type CountAttendStatusesParams struct {
	WhereLikeName bool   `json:"where_like_name"`
	SearchName    string `json:"search_name"`
}

func (q *Queries) CountAttendStatuses(ctx context.Context, arg CountAttendStatusesParams) (int64, error) {
	row := q.db.QueryRow(ctx, countAttendStatuses, arg.WhereLikeName, arg.SearchName)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAttendStatus = `-- name: CreateAttendStatus :one
INSERT INTO m_attend_statuses (name, key) VALUES ($1, $2) RETURNING m_attend_statuses_pkey, attend_status_id, name, key
`

type CreateAttendStatusParams struct {
	Name string `json:"name"`
	Key  string `json:"key"`
}

func (q *Queries) CreateAttendStatus(ctx context.Context, arg CreateAttendStatusParams) (AttendStatus, error) {
	row := q.db.QueryRow(ctx, createAttendStatus, arg.Name, arg.Key)
	var i AttendStatus
	err := row.Scan(
		&i.MAttendStatusesPkey,
		&i.AttendStatusID,
		&i.Name,
		&i.Key,
	)
	return i, err
}

type CreateAttendStatusesParams struct {
	Name string `json:"name"`
	Key  string `json:"key"`
}

const deleteAttendStatus = `-- name: DeleteAttendStatus :exec
DELETE FROM m_attend_statuses WHERE attend_status_id = $1
`

func (q *Queries) DeleteAttendStatus(ctx context.Context, attendStatusID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteAttendStatus, attendStatusID)
	return err
}

const deleteAttendStatusByKey = `-- name: DeleteAttendStatusByKey :exec
DELETE FROM m_attend_statuses WHERE key = $1
`

func (q *Queries) DeleteAttendStatusByKey(ctx context.Context, key string) error {
	_, err := q.db.Exec(ctx, deleteAttendStatusByKey, key)
	return err
}

const findAttendStatusById = `-- name: FindAttendStatusById :one
SELECT m_attend_statuses_pkey, attend_status_id, name, key FROM m_attend_statuses WHERE attend_status_id = $1
`

func (q *Queries) FindAttendStatusById(ctx context.Context, attendStatusID uuid.UUID) (AttendStatus, error) {
	row := q.db.QueryRow(ctx, findAttendStatusById, attendStatusID)
	var i AttendStatus
	err := row.Scan(
		&i.MAttendStatusesPkey,
		&i.AttendStatusID,
		&i.Name,
		&i.Key,
	)
	return i, err
}

const findAttendStatusByKey = `-- name: FindAttendStatusByKey :one
SELECT m_attend_statuses_pkey, attend_status_id, name, key FROM m_attend_statuses WHERE key = $1
`

func (q *Queries) FindAttendStatusByKey(ctx context.Context, key string) (AttendStatus, error) {
	row := q.db.QueryRow(ctx, findAttendStatusByKey, key)
	var i AttendStatus
	err := row.Scan(
		&i.MAttendStatusesPkey,
		&i.AttendStatusID,
		&i.Name,
		&i.Key,
	)
	return i, err
}

const getAttendStatuses = `-- name: GetAttendStatuses :many
SELECT m_attend_statuses_pkey, attend_status_id, name, key FROM m_attend_statuses
WHERE
	CASE WHEN $3::boolean = true THEN m_attend_statuses.name LIKE '%' || $4::text || '%' ELSE TRUE END
ORDER BY
	CASE WHEN $5::text = 'name' THEN m_attend_statuses.name END ASC,
	CASE WHEN $5::text = 'r_name' THEN m_attend_statuses.name END DESC,
	m_attend_statuses_pkey DESC
LIMIT $1 OFFSET $2
`

type GetAttendStatusesParams struct {
	Limit         int32  `json:"limit"`
	Offset        int32  `json:"offset"`
	WhereLikeName bool   `json:"where_like_name"`
	SearchName    string `json:"search_name"`
	OrderMethod   string `json:"order_method"`
}

func (q *Queries) GetAttendStatuses(ctx context.Context, arg GetAttendStatusesParams) ([]AttendStatus, error) {
	rows, err := q.db.Query(ctx, getAttendStatuses,
		arg.Limit,
		arg.Offset,
		arg.WhereLikeName,
		arg.SearchName,
		arg.OrderMethod,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AttendStatus{}
	for rows.Next() {
		var i AttendStatus
		if err := rows.Scan(
			&i.MAttendStatusesPkey,
			&i.AttendStatusID,
			&i.Name,
			&i.Key,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAttendStatus = `-- name: UpdateAttendStatus :one
UPDATE m_attend_statuses SET name = $2, key = $3 WHERE attend_status_id = $1 RETURNING m_attend_statuses_pkey, attend_status_id, name, key
`

type UpdateAttendStatusParams struct {
	AttendStatusID uuid.UUID `json:"attend_status_id"`
	Name           string    `json:"name"`
	Key            string    `json:"key"`
}

func (q *Queries) UpdateAttendStatus(ctx context.Context, arg UpdateAttendStatusParams) (AttendStatus, error) {
	row := q.db.QueryRow(ctx, updateAttendStatus, arg.AttendStatusID, arg.Name, arg.Key)
	var i AttendStatus
	err := row.Scan(
		&i.MAttendStatusesPkey,
		&i.AttendStatusID,
		&i.Name,
		&i.Key,
	)
	return i, err
}

const updateAttendStatusByKey = `-- name: UpdateAttendStatusByKey :one
UPDATE m_attend_statuses SET name = $2 WHERE key = $1 RETURNING m_attend_statuses_pkey, attend_status_id, name, key
`

type UpdateAttendStatusByKeyParams struct {
	Key  string `json:"key"`
	Name string `json:"name"`
}

func (q *Queries) UpdateAttendStatusByKey(ctx context.Context, arg UpdateAttendStatusByKeyParams) (AttendStatus, error) {
	row := q.db.QueryRow(ctx, updateAttendStatusByKey, arg.Key, arg.Name)
	var i AttendStatus
	err := row.Scan(
		&i.MAttendStatusesPkey,
		&i.AttendStatusID,
		&i.Name,
		&i.Key,
	)
	return i, err
}
