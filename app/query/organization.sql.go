// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: organization.sql

package query

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const countOrganizations = `-- name: CountOrganizations :one
SELECT COUNT(*) FROM m_organizations
`

func (q *Queries) CountOrganizations(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countOrganizations)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createOrganization = `-- name: CreateOrganization :one
INSERT INTO m_organizations (name, description, is_personal, is_whole, created_at, updated_at) VALUES ($1, $2, $3, $4, $5, $6) RETURNING m_organizations_pkey, organization_id, name, description, is_personal, is_whole, created_at, updated_at
`

type CreateOrganizationParams struct {
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	IsPersonal  bool        `json:"is_personal"`
	IsWhole     bool        `json:"is_whole"`
	CreatedAt   time.Time   `json:"created_at"`
	UpdatedAt   time.Time   `json:"updated_at"`
}

func (q *Queries) CreateOrganization(ctx context.Context, arg CreateOrganizationParams) (Organization, error) {
	row := q.db.QueryRow(ctx, createOrganization,
		arg.Name,
		arg.Description,
		arg.IsPersonal,
		arg.IsWhole,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Organization
	err := row.Scan(
		&i.MOrganizationsPkey,
		&i.OrganizationID,
		&i.Name,
		&i.Description,
		&i.IsPersonal,
		&i.IsWhole,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

type CreateOrganizationsParams struct {
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
	IsPersonal  bool        `json:"is_personal"`
	IsWhole     bool        `json:"is_whole"`
	CreatedAt   time.Time   `json:"created_at"`
	UpdatedAt   time.Time   `json:"updated_at"`
}

const deleteOrganization = `-- name: DeleteOrganization :exec
DELETE FROM m_organizations WHERE organization_id = $1
`

func (q *Queries) DeleteOrganization(ctx context.Context, organizationID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteOrganization, organizationID)
	return err
}

const findOrganizationByID = `-- name: FindOrganizationByID :one
SELECT m_organizations_pkey, organization_id, name, description, is_personal, is_whole, created_at, updated_at FROM m_organizations WHERE organization_id = $1
`

func (q *Queries) FindOrganizationByID(ctx context.Context, organizationID uuid.UUID) (Organization, error) {
	row := q.db.QueryRow(ctx, findOrganizationByID, organizationID)
	var i Organization
	err := row.Scan(
		&i.MOrganizationsPkey,
		&i.OrganizationID,
		&i.Name,
		&i.Description,
		&i.IsPersonal,
		&i.IsWhole,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const findWholeOrganization = `-- name: FindWholeOrganization :one
SELECT m_organizations_pkey, organization_id, name, description, is_personal, is_whole, created_at, updated_at FROM m_organizations WHERE is_whole = true
`

func (q *Queries) FindWholeOrganization(ctx context.Context) (Organization, error) {
	row := q.db.QueryRow(ctx, findWholeOrganization)
	var i Organization
	err := row.Scan(
		&i.MOrganizationsPkey,
		&i.OrganizationID,
		&i.Name,
		&i.Description,
		&i.IsPersonal,
		&i.IsWhole,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrganizations = `-- name: GetOrganizations :many
SELECT m_organizations_pkey, organization_id, name, description, is_personal, is_whole, created_at, updated_at FROM m_organizations
WHERE CASE
	WHEN $3::boolean = true THEN m_organizations.name LIKE '%' || $4::text || '%'
END
ORDER BY
	CASE WHEN $5::text = 'name' THEN m_organizations.name END ASC,
	m_organizations_pkey DESC
LIMIT $1 OFFSET $2
`

type GetOrganizationsParams struct {
	Limit         int32  `json:"limit"`
	Offset        int32  `json:"offset"`
	WhereLikeName bool   `json:"where_like_name"`
	SearchName    string `json:"search_name"`
	OrderMethod   string `json:"order_method"`
}

func (q *Queries) GetOrganizations(ctx context.Context, arg GetOrganizationsParams) ([]Organization, error) {
	rows, err := q.db.Query(ctx, getOrganizations,
		arg.Limit,
		arg.Offset,
		arg.WhereLikeName,
		arg.SearchName,
		arg.OrderMethod,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Organization{}
	for rows.Next() {
		var i Organization
		if err := rows.Scan(
			&i.MOrganizationsPkey,
			&i.OrganizationID,
			&i.Name,
			&i.Description,
			&i.IsPersonal,
			&i.IsWhole,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrganization = `-- name: UpdateOrganization :one
UPDATE m_organizations SET name = $2, description = $3, updated_at = $4 WHERE organization_id = $1 RETURNING m_organizations_pkey, organization_id, name, description, is_personal, is_whole, created_at, updated_at
`

type UpdateOrganizationParams struct {
	OrganizationID uuid.UUID   `json:"organization_id"`
	Name           string      `json:"name"`
	Description    pgtype.Text `json:"description"`
	UpdatedAt      time.Time   `json:"updated_at"`
}

func (q *Queries) UpdateOrganization(ctx context.Context, arg UpdateOrganizationParams) (Organization, error) {
	row := q.db.QueryRow(ctx, updateOrganization,
		arg.OrganizationID,
		arg.Name,
		arg.Description,
		arg.UpdatedAt,
	)
	var i Organization
	err := row.Scan(
		&i.MOrganizationsPkey,
		&i.OrganizationID,
		&i.Name,
		&i.Description,
		&i.IsPersonal,
		&i.IsWhole,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
