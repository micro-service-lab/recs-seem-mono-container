// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package service

import (
	"context"
	"github.com/google/uuid"
	"github.com/micro-service-lab/recs-seem-mono-container/app/entity"
	"github.com/micro-service-lab/recs-seem-mono-container/app/parameter"
	"github.com/micro-service-lab/recs-seem-mono-container/app/store"
	"sync"
)

// Ensure, that ManagerInterfaceMock does implement ManagerInterface.
// If this is not the case, regenerate this file with moq.
var _ ManagerInterface = &ManagerInterfaceMock{}

// ManagerInterfaceMock is a mock implementation of ManagerInterface.
//
//	func TestSomethingThatUsesManagerInterface(t *testing.T) {
//
//		// make and configure a mocked ManagerInterface
//		mockedManagerInterface := &ManagerInterfaceMock{
//			AssociateRoleFunc: func(ctx context.Context, roleID uuid.UUID, policyID uuid.UUID) (entity.RoleAssociation, error) {
//				panic("mock out the AssociateRole method")
//			},
//			AssociateRolesFunc: func(ctx context.Context, params []parameter.AssociationRoleParam) (int64, error) {
//				panic("mock out the AssociateRoles method")
//			},
//			CreateAttendStatusFunc: func(ctx context.Context, name string, key string) (entity.AttendStatus, error) {
//				panic("mock out the CreateAttendStatus method")
//			},
//			CreateAttendStatusesFunc: func(ctx context.Context, ps []parameter.CreateAttendStatusParam) (int64, error) {
//				panic("mock out the CreateAttendStatuses method")
//			},
//			CreateAttendanceTypeFunc: func(ctx context.Context, name string, key string, color string) (entity.AttendanceType, error) {
//				panic("mock out the CreateAttendanceType method")
//			},
//			CreateAttendanceTypesFunc: func(ctx context.Context, ps []parameter.CreateAttendanceTypeParam) (int64, error) {
//				panic("mock out the CreateAttendanceTypes method")
//			},
//			CreateEventTypeFunc: func(ctx context.Context, name string, key string, color string) (entity.EventType, error) {
//				panic("mock out the CreateEventType method")
//			},
//			CreateEventTypesFunc: func(ctx context.Context, ps []parameter.CreateEventTypeParam) (int64, error) {
//				panic("mock out the CreateEventTypes method")
//			},
//			CreateMimeTypeFunc: func(ctx context.Context, name string, key string, kind string) (entity.MimeType, error) {
//				panic("mock out the CreateMimeType method")
//			},
//			CreateMimeTypesFunc: func(ctx context.Context, ps []parameter.CreateMimeTypeParam) (int64, error) {
//				panic("mock out the CreateMimeTypes method")
//			},
//			CreatePermissionFunc: func(ctx context.Context, name string, key string, description string, categoryID uuid.UUID) (entity.Permission, error) {
//				panic("mock out the CreatePermission method")
//			},
//			CreatePermissionCategoriesFunc: func(ctx context.Context, ps []parameter.CreatePermissionCategoryParam) (int64, error) {
//				panic("mock out the CreatePermissionCategories method")
//			},
//			CreatePermissionCategoryFunc: func(ctx context.Context, name string, key string, description string) (entity.PermissionCategory, error) {
//				panic("mock out the CreatePermissionCategory method")
//			},
//			CreatePermissionsFunc: func(ctx context.Context, ps []parameter.CreatePermissionParam) (int64, error) {
//				panic("mock out the CreatePermissions method")
//			},
//			CreatePoliciesFunc: func(ctx context.Context, ps []parameter.CreatePolicyParam) (int64, error) {
//				panic("mock out the CreatePolicies method")
//			},
//			CreatePolicyFunc: func(ctx context.Context, name string, key string, description string, categoryID uuid.UUID) (entity.Policy, error) {
//				panic("mock out the CreatePolicy method")
//			},
//			CreatePolicyCategoriesFunc: func(ctx context.Context, ps []parameter.CreatePolicyCategoryParam) (int64, error) {
//				panic("mock out the CreatePolicyCategories method")
//			},
//			CreatePolicyCategoryFunc: func(ctx context.Context, name string, key string, description string) (entity.PolicyCategory, error) {
//				panic("mock out the CreatePolicyCategory method")
//			},
//			CreateRecordTypeFunc: func(ctx context.Context, name string, key string) (entity.RecordType, error) {
//				panic("mock out the CreateRecordType method")
//			},
//			CreateRecordTypesFunc: func(ctx context.Context, ps []parameter.CreateRecordTypeParam) (int64, error) {
//				panic("mock out the CreateRecordTypes method")
//			},
//			CreateRoleFunc: func(ctx context.Context, name string, description string) (entity.Role, error) {
//				panic("mock out the CreateRole method")
//			},
//			CreateRolesFunc: func(ctx context.Context, ps []parameter.CreateRoleParam) (int64, error) {
//				panic("mock out the CreateRoles method")
//			},
//			DeleteAttendStatusFunc: func(ctx context.Context, id uuid.UUID) (int64, error) {
//				panic("mock out the DeleteAttendStatus method")
//			},
//			DeleteAttendanceTypeFunc: func(ctx context.Context, id uuid.UUID) (int64, error) {
//				panic("mock out the DeleteAttendanceType method")
//			},
//			DeleteEventTypeFunc: func(ctx context.Context, id uuid.UUID) (int64, error) {
//				panic("mock out the DeleteEventType method")
//			},
//			DeleteMimeTypeFunc: func(ctx context.Context, id uuid.UUID) (int64, error) {
//				panic("mock out the DeleteMimeType method")
//			},
//			DeletePermissionFunc: func(ctx context.Context, id uuid.UUID) (int64, error) {
//				panic("mock out the DeletePermission method")
//			},
//			DeletePermissionCategoryFunc: func(ctx context.Context, id uuid.UUID) (int64, error) {
//				panic("mock out the DeletePermissionCategory method")
//			},
//			DeletePolicyFunc: func(ctx context.Context, id uuid.UUID) (int64, error) {
//				panic("mock out the DeletePolicy method")
//			},
//			DeletePolicyCategoryFunc: func(ctx context.Context, id uuid.UUID) (int64, error) {
//				panic("mock out the DeletePolicyCategory method")
//			},
//			DeleteRecordTypeFunc: func(ctx context.Context, id uuid.UUID) (int64, error) {
//				panic("mock out the DeleteRecordType method")
//			},
//			DeleteRoleFunc: func(ctx context.Context, id uuid.UUID) (int64, error) {
//				panic("mock out the DeleteRole method")
//			},
//			DisassociatePolicyOnRoleFunc: func(ctx context.Context, roleID uuid.UUID) (int64, error) {
//				panic("mock out the DisassociatePolicyOnRole method")
//			},
//			DisassociatePolicyOnRolesFunc: func(ctx context.Context, roleIDs []uuid.UUID) (int64, error) {
//				panic("mock out the DisassociatePolicyOnRoles method")
//			},
//			DisassociateRoleFunc: func(ctx context.Context, roleID uuid.UUID, policyID uuid.UUID) (int64, error) {
//				panic("mock out the DisassociateRole method")
//			},
//			DisassociateRoleOnPoliciesFunc: func(ctx context.Context, policyIDs []uuid.UUID) (int64, error) {
//				panic("mock out the DisassociateRoleOnPolicies method")
//			},
//			DisassociateRoleOnPolicyFunc: func(ctx context.Context, policyID uuid.UUID) (int64, error) {
//				panic("mock out the DisassociateRoleOnPolicy method")
//			},
//			FindAttendStatusByIDFunc: func(ctx context.Context, id uuid.UUID) (entity.AttendStatus, error) {
//				panic("mock out the FindAttendStatusByID method")
//			},
//			FindAttendStatusByKeyFunc: func(ctx context.Context, key string) (entity.AttendStatus, error) {
//				panic("mock out the FindAttendStatusByKey method")
//			},
//			FindAttendanceTypeByIDFunc: func(ctx context.Context, id uuid.UUID) (entity.AttendanceType, error) {
//				panic("mock out the FindAttendanceTypeByID method")
//			},
//			FindAttendanceTypeByKeyFunc: func(ctx context.Context, key string) (entity.AttendanceType, error) {
//				panic("mock out the FindAttendanceTypeByKey method")
//			},
//			FindEventTypeByIDFunc: func(ctx context.Context, id uuid.UUID) (entity.EventType, error) {
//				panic("mock out the FindEventTypeByID method")
//			},
//			FindEventTypeByKeyFunc: func(ctx context.Context, key string) (entity.EventType, error) {
//				panic("mock out the FindEventTypeByKey method")
//			},
//			FindMimeTypeByIDFunc: func(ctx context.Context, id uuid.UUID) (entity.MimeType, error) {
//				panic("mock out the FindMimeTypeByID method")
//			},
//			FindMimeTypeByKeyFunc: func(ctx context.Context, key string) (entity.MimeType, error) {
//				panic("mock out the FindMimeTypeByKey method")
//			},
//			FindPermissionByIDFunc: func(ctx context.Context, id uuid.UUID) (entity.Permission, error) {
//				panic("mock out the FindPermissionByID method")
//			},
//			FindPermissionByIDWithCategoryFunc: func(ctx context.Context, id uuid.UUID) (entity.PermissionWithCategory, error) {
//				panic("mock out the FindPermissionByIDWithCategory method")
//			},
//			FindPermissionByKeyFunc: func(ctx context.Context, key string) (entity.Permission, error) {
//				panic("mock out the FindPermissionByKey method")
//			},
//			FindPermissionByKeyWithCategoryFunc: func(ctx context.Context, key string) (entity.PermissionWithCategory, error) {
//				panic("mock out the FindPermissionByKeyWithCategory method")
//			},
//			FindPermissionCategoryByIDFunc: func(ctx context.Context, id uuid.UUID) (entity.PermissionCategory, error) {
//				panic("mock out the FindPermissionCategoryByID method")
//			},
//			FindPermissionCategoryByKeyFunc: func(ctx context.Context, key string) (entity.PermissionCategory, error) {
//				panic("mock out the FindPermissionCategoryByKey method")
//			},
//			FindPolicyByIDFunc: func(ctx context.Context, id uuid.UUID) (entity.Policy, error) {
//				panic("mock out the FindPolicyByID method")
//			},
//			FindPolicyByIDWithCategoryFunc: func(ctx context.Context, id uuid.UUID) (entity.PolicyWithCategory, error) {
//				panic("mock out the FindPolicyByIDWithCategory method")
//			},
//			FindPolicyByKeyFunc: func(ctx context.Context, key string) (entity.Policy, error) {
//				panic("mock out the FindPolicyByKey method")
//			},
//			FindPolicyByKeyWithCategoryFunc: func(ctx context.Context, key string) (entity.PolicyWithCategory, error) {
//				panic("mock out the FindPolicyByKeyWithCategory method")
//			},
//			FindPolicyCategoryByIDFunc: func(ctx context.Context, id uuid.UUID) (entity.PolicyCategory, error) {
//				panic("mock out the FindPolicyCategoryByID method")
//			},
//			FindPolicyCategoryByKeyFunc: func(ctx context.Context, key string) (entity.PolicyCategory, error) {
//				panic("mock out the FindPolicyCategoryByKey method")
//			},
//			FindRecordTypeByIDFunc: func(ctx context.Context, id uuid.UUID) (entity.RecordType, error) {
//				panic("mock out the FindRecordTypeByID method")
//			},
//			FindRecordTypeByKeyFunc: func(ctx context.Context, key string) (entity.RecordType, error) {
//				panic("mock out the FindRecordTypeByKey method")
//			},
//			FindRoleByIDFunc: func(ctx context.Context, id uuid.UUID) (entity.Role, error) {
//				panic("mock out the FindRoleByID method")
//			},
//			GetAttendStatusesFunc: func(ctx context.Context, whereSearchName string, order parameter.AttendStatusOrderMethod, pg parameter.Pagination, limit parameter.Limit, cursor parameter.Cursor, offset parameter.Offset, withCount parameter.WithCount) (store.ListResult[entity.AttendStatus], error) {
//				panic("mock out the GetAttendStatuses method")
//			},
//			GetAttendStatusesCountFunc: func(ctx context.Context, whereSearchName string) (int64, error) {
//				panic("mock out the GetAttendStatusesCount method")
//			},
//			GetAttendanceTypesFunc: func(ctx context.Context, whereSearchName string, order parameter.AttendanceTypeOrderMethod, pg parameter.Pagination, limit parameter.Limit, cursor parameter.Cursor, offset parameter.Offset, withCount parameter.WithCount) (store.ListResult[entity.AttendanceType], error) {
//				panic("mock out the GetAttendanceTypes method")
//			},
//			GetAttendanceTypesCountFunc: func(ctx context.Context, whereSearchName string) (int64, error) {
//				panic("mock out the GetAttendanceTypesCount method")
//			},
//			GetEventTypesFunc: func(ctx context.Context, whereSearchName string, order parameter.EventTypeOrderMethod, pg parameter.Pagination, limit parameter.Limit, cursor parameter.Cursor, offset parameter.Offset, withCount parameter.WithCount) (store.ListResult[entity.EventType], error) {
//				panic("mock out the GetEventTypes method")
//			},
//			GetEventTypesCountFunc: func(ctx context.Context, whereSearchName string) (int64, error) {
//				panic("mock out the GetEventTypesCount method")
//			},
//			GetMimeTypesFunc: func(ctx context.Context, whereSearchName string, order parameter.MimeTypeOrderMethod, pg parameter.Pagination, limit parameter.Limit, cursor parameter.Cursor, offset parameter.Offset, withCount parameter.WithCount) (store.ListResult[entity.MimeType], error) {
//				panic("mock out the GetMimeTypes method")
//			},
//			GetMimeTypesCountFunc: func(ctx context.Context, whereSearchName string) (int64, error) {
//				panic("mock out the GetMimeTypesCount method")
//			},
//			GetPermissionCategoriesFunc: func(ctx context.Context, whereSearchName string, order parameter.PermissionCategoryOrderMethod, pg parameter.Pagination, limit parameter.Limit, cursor parameter.Cursor, offset parameter.Offset, withCount parameter.WithCount) (store.ListResult[entity.PermissionCategory], error) {
//				panic("mock out the GetPermissionCategories method")
//			},
//			GetPermissionCategoriesCountFunc: func(ctx context.Context, whereSearchName string) (int64, error) {
//				panic("mock out the GetPermissionCategoriesCount method")
//			},
//			GetPermissionsFunc: func(ctx context.Context, whereSearchName string, whereInCategories []uuid.UUID, order parameter.PermissionOrderMethod, pg parameter.Pagination, limit parameter.Limit, cursor parameter.Cursor, offset parameter.Offset, withCount parameter.WithCount) (store.ListResult[entity.Permission], error) {
//				panic("mock out the GetPermissions method")
//			},
//			GetPermissionsCountFunc: func(ctx context.Context, whereSearchName string, whereInCategories []uuid.UUID) (int64, error) {
//				panic("mock out the GetPermissionsCount method")
//			},
//			GetPermissionsWithCategoryFunc: func(ctx context.Context, whereSearchName string, whereInCategories []uuid.UUID, order parameter.PermissionOrderMethod, pg parameter.Pagination, limit parameter.Limit, cursor parameter.Cursor, offset parameter.Offset, withCount parameter.WithCount) (store.ListResult[entity.PermissionWithCategory], error) {
//				panic("mock out the GetPermissionsWithCategory method")
//			},
//			GetPoliciesFunc: func(ctx context.Context, whereSearchName string, whereInCategories []uuid.UUID, order parameter.PolicyOrderMethod, pg parameter.Pagination, limit parameter.Limit, cursor parameter.Cursor, offset parameter.Offset, withCount parameter.WithCount) (store.ListResult[entity.Policy], error) {
//				panic("mock out the GetPolicies method")
//			},
//			GetPoliciesCountFunc: func(ctx context.Context, whereSearchName string, whereInCategories []uuid.UUID) (int64, error) {
//				panic("mock out the GetPoliciesCount method")
//			},
//			GetPoliciesOnRoleFunc: func(ctx context.Context, roleID uuid.UUID, whereSearchName string, order parameter.PolicyOnRoleOrderMethod, pg parameter.Pagination, limit parameter.Limit, cursor parameter.Cursor, offset parameter.Offset, withCount parameter.WithCount) (store.ListResult[entity.PolicyOnRole], error) {
//				panic("mock out the GetPoliciesOnRole method")
//			},
//			GetPoliciesOnRoleCountFunc: func(ctx context.Context, roleID uuid.UUID, whereSearchName string) (int64, error) {
//				panic("mock out the GetPoliciesOnRoleCount method")
//			},
//			GetPoliciesWithCategoryFunc: func(ctx context.Context, whereSearchName string, whereInCategories []uuid.UUID, order parameter.PolicyOrderMethod, pg parameter.Pagination, limit parameter.Limit, cursor parameter.Cursor, offset parameter.Offset, withCount parameter.WithCount) (store.ListResult[entity.PolicyWithCategory], error) {
//				panic("mock out the GetPoliciesWithCategory method")
//			},
//			GetPolicyCategoriesFunc: func(ctx context.Context, whereSearchName string, order parameter.PolicyCategoryOrderMethod, pg parameter.Pagination, limit parameter.Limit, cursor parameter.Cursor, offset parameter.Offset, withCount parameter.WithCount) (store.ListResult[entity.PolicyCategory], error) {
//				panic("mock out the GetPolicyCategories method")
//			},
//			GetPolicyCategoriesCountFunc: func(ctx context.Context, whereSearchName string) (int64, error) {
//				panic("mock out the GetPolicyCategoriesCount method")
//			},
//			GetRecordTypesFunc: func(ctx context.Context, whereSearchName string, order parameter.RecordTypeOrderMethod, pg parameter.Pagination, limit parameter.Limit, cursor parameter.Cursor, offset parameter.Offset, withCount parameter.WithCount) (store.ListResult[entity.RecordType], error) {
//				panic("mock out the GetRecordTypes method")
//			},
//			GetRecordTypesCountFunc: func(ctx context.Context, whereSearchName string) (int64, error) {
//				panic("mock out the GetRecordTypesCount method")
//			},
//			GetRolesFunc: func(ctx context.Context, whereSearchName string, order parameter.RoleOrderMethod, pg parameter.Pagination, limit parameter.Limit, cursor parameter.Cursor, offset parameter.Offset, withCount parameter.WithCount) (store.ListResult[entity.Role], error) {
//				panic("mock out the GetRoles method")
//			},
//			GetRolesCountFunc: func(ctx context.Context, whereSearchName string) (int64, error) {
//				panic("mock out the GetRolesCount method")
//			},
//			GetRolesOnPolicyFunc: func(ctx context.Context, policyID uuid.UUID, whereSearchName string, order parameter.RoleOnPolicyOrderMethod, pg parameter.Pagination, limit parameter.Limit, cursor parameter.Cursor, offset parameter.Offset, withCount parameter.WithCount) (store.ListResult[entity.RoleOnPolicy], error) {
//				panic("mock out the GetRolesOnPolicy method")
//			},
//			GetRolesOnPolicyCountFunc: func(ctx context.Context, policyID uuid.UUID, whereSearchName string) (int64, error) {
//				panic("mock out the GetRolesOnPolicyCount method")
//			},
//			PluralDeleteAttendStatusesFunc: func(ctx context.Context, ids []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeleteAttendStatuses method")
//			},
//			PluralDeleteAttendanceTypesFunc: func(ctx context.Context, ids []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeleteAttendanceTypes method")
//			},
//			PluralDeleteEventTypesFunc: func(ctx context.Context, ids []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeleteEventTypes method")
//			},
//			PluralDeleteMimeTypesFunc: func(ctx context.Context, ids []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeleteMimeTypes method")
//			},
//			PluralDeletePermissionCategoriesFunc: func(ctx context.Context, ids []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeletePermissionCategories method")
//			},
//			PluralDeletePermissionsFunc: func(ctx context.Context, ids []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeletePermissions method")
//			},
//			PluralDeletePoliciesFunc: func(ctx context.Context, ids []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeletePolicies method")
//			},
//			PluralDeletePolicyCategoriesFunc: func(ctx context.Context, ids []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeletePolicyCategories method")
//			},
//			PluralDeleteRecordTypesFunc: func(ctx context.Context, ids []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeleteRecordTypes method")
//			},
//			PluralDeleteRolesFunc: func(ctx context.Context, ids []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDeleteRoles method")
//			},
//			PluralDisassociatePolicyOnRoleFunc: func(ctx context.Context, roleID uuid.UUID, policyIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDisassociatePolicyOnRole method")
//			},
//			PluralDisassociateRoleOnPolicyFunc: func(ctx context.Context, policyID uuid.UUID, roleIDs []uuid.UUID) (int64, error) {
//				panic("mock out the PluralDisassociateRoleOnPolicy method")
//			},
//			UpdateAttendStatusFunc: func(ctx context.Context, id uuid.UUID, name string, key string) (entity.AttendStatus, error) {
//				panic("mock out the UpdateAttendStatus method")
//			},
//			UpdateAttendanceTypeFunc: func(ctx context.Context, id uuid.UUID, name string, key string, color string) (entity.AttendanceType, error) {
//				panic("mock out the UpdateAttendanceType method")
//			},
//			UpdateEventTypeFunc: func(ctx context.Context, id uuid.UUID, name string, key string, color string) (entity.EventType, error) {
//				panic("mock out the UpdateEventType method")
//			},
//			UpdateMimeTypeFunc: func(ctx context.Context, id uuid.UUID, name string, key string, kind string) (entity.MimeType, error) {
//				panic("mock out the UpdateMimeType method")
//			},
//			UpdatePermissionFunc: func(ctx context.Context, id uuid.UUID, name string, key string, description string, categoryID uuid.UUID) (entity.Permission, error) {
//				panic("mock out the UpdatePermission method")
//			},
//			UpdatePermissionCategoryFunc: func(ctx context.Context, id uuid.UUID, name string, key string, description string) (entity.PermissionCategory, error) {
//				panic("mock out the UpdatePermissionCategory method")
//			},
//			UpdatePolicyFunc: func(ctx context.Context, id uuid.UUID, name string, key string, description string, categoryID uuid.UUID) (entity.Policy, error) {
//				panic("mock out the UpdatePolicy method")
//			},
//			UpdatePolicyCategoryFunc: func(ctx context.Context, id uuid.UUID, name string, key string, description string) (entity.PolicyCategory, error) {
//				panic("mock out the UpdatePolicyCategory method")
//			},
//			UpdateRecordTypeFunc: func(ctx context.Context, id uuid.UUID, name string, key string) (entity.RecordType, error) {
//				panic("mock out the UpdateRecordType method")
//			},
//			UpdateRoleFunc: func(ctx context.Context, id uuid.UUID, name string, description string) (entity.Role, error) {
//				panic("mock out the UpdateRole method")
//			},
//		}
//
//		// use mockedManagerInterface in code that requires ManagerInterface
//		// and then make assertions.
//
//	}
type ManagerInterfaceMock struct {
	// AssociateRoleFunc mocks the AssociateRole method.
	AssociateRoleFunc func(ctx context.Context, roleID uuid.UUID, policyID uuid.UUID) (entity.RoleAssociation, error)

	// AssociateRolesFunc mocks the AssociateRoles method.
	AssociateRolesFunc func(ctx context.Context, params []parameter.AssociationRoleParam) (int64, error)

	// CreateAttendStatusFunc mocks the CreateAttendStatus method.
	CreateAttendStatusFunc func(ctx context.Context, name string, key string) (entity.AttendStatus, error)

	// CreateAttendStatusesFunc mocks the CreateAttendStatuses method.
	CreateAttendStatusesFunc func(ctx context.Context, ps []parameter.CreateAttendStatusParam) (int64, error)

	// CreateAttendanceTypeFunc mocks the CreateAttendanceType method.
	CreateAttendanceTypeFunc func(ctx context.Context, name string, key string, color string) (entity.AttendanceType, error)

	// CreateAttendanceTypesFunc mocks the CreateAttendanceTypes method.
	CreateAttendanceTypesFunc func(ctx context.Context, ps []parameter.CreateAttendanceTypeParam) (int64, error)

	// CreateEventTypeFunc mocks the CreateEventType method.
	CreateEventTypeFunc func(ctx context.Context, name string, key string, color string) (entity.EventType, error)

	// CreateEventTypesFunc mocks the CreateEventTypes method.
	CreateEventTypesFunc func(ctx context.Context, ps []parameter.CreateEventTypeParam) (int64, error)

	// CreateMimeTypeFunc mocks the CreateMimeType method.
	CreateMimeTypeFunc func(ctx context.Context, name string, key string, kind string) (entity.MimeType, error)

	// CreateMimeTypesFunc mocks the CreateMimeTypes method.
	CreateMimeTypesFunc func(ctx context.Context, ps []parameter.CreateMimeTypeParam) (int64, error)

	// CreatePermissionFunc mocks the CreatePermission method.
	CreatePermissionFunc func(ctx context.Context, name string, key string, description string, categoryID uuid.UUID) (entity.Permission, error)

	// CreatePermissionCategoriesFunc mocks the CreatePermissionCategories method.
	CreatePermissionCategoriesFunc func(ctx context.Context, ps []parameter.CreatePermissionCategoryParam) (int64, error)

	// CreatePermissionCategoryFunc mocks the CreatePermissionCategory method.
	CreatePermissionCategoryFunc func(ctx context.Context, name string, key string, description string) (entity.PermissionCategory, error)

	// CreatePermissionsFunc mocks the CreatePermissions method.
	CreatePermissionsFunc func(ctx context.Context, ps []parameter.CreatePermissionParam) (int64, error)

	// CreatePoliciesFunc mocks the CreatePolicies method.
	CreatePoliciesFunc func(ctx context.Context, ps []parameter.CreatePolicyParam) (int64, error)

	// CreatePolicyFunc mocks the CreatePolicy method.
	CreatePolicyFunc func(ctx context.Context, name string, key string, description string, categoryID uuid.UUID) (entity.Policy, error)

	// CreatePolicyCategoriesFunc mocks the CreatePolicyCategories method.
	CreatePolicyCategoriesFunc func(ctx context.Context, ps []parameter.CreatePolicyCategoryParam) (int64, error)

	// CreatePolicyCategoryFunc mocks the CreatePolicyCategory method.
	CreatePolicyCategoryFunc func(ctx context.Context, name string, key string, description string) (entity.PolicyCategory, error)

	// CreateRecordTypeFunc mocks the CreateRecordType method.
	CreateRecordTypeFunc func(ctx context.Context, name string, key string) (entity.RecordType, error)

	// CreateRecordTypesFunc mocks the CreateRecordTypes method.
	CreateRecordTypesFunc func(ctx context.Context, ps []parameter.CreateRecordTypeParam) (int64, error)

	// CreateRoleFunc mocks the CreateRole method.
	CreateRoleFunc func(ctx context.Context, name string, description string) (entity.Role, error)

	// CreateRolesFunc mocks the CreateRoles method.
	CreateRolesFunc func(ctx context.Context, ps []parameter.CreateRoleParam) (int64, error)

	// DeleteAttendStatusFunc mocks the DeleteAttendStatus method.
	DeleteAttendStatusFunc func(ctx context.Context, id uuid.UUID) (int64, error)

	// DeleteAttendanceTypeFunc mocks the DeleteAttendanceType method.
	DeleteAttendanceTypeFunc func(ctx context.Context, id uuid.UUID) (int64, error)

	// DeleteEventTypeFunc mocks the DeleteEventType method.
	DeleteEventTypeFunc func(ctx context.Context, id uuid.UUID) (int64, error)

	// DeleteMimeTypeFunc mocks the DeleteMimeType method.
	DeleteMimeTypeFunc func(ctx context.Context, id uuid.UUID) (int64, error)

	// DeletePermissionFunc mocks the DeletePermission method.
	DeletePermissionFunc func(ctx context.Context, id uuid.UUID) (int64, error)

	// DeletePermissionCategoryFunc mocks the DeletePermissionCategory method.
	DeletePermissionCategoryFunc func(ctx context.Context, id uuid.UUID) (int64, error)

	// DeletePolicyFunc mocks the DeletePolicy method.
	DeletePolicyFunc func(ctx context.Context, id uuid.UUID) (int64, error)

	// DeletePolicyCategoryFunc mocks the DeletePolicyCategory method.
	DeletePolicyCategoryFunc func(ctx context.Context, id uuid.UUID) (int64, error)

	// DeleteRecordTypeFunc mocks the DeleteRecordType method.
	DeleteRecordTypeFunc func(ctx context.Context, id uuid.UUID) (int64, error)

	// DeleteRoleFunc mocks the DeleteRole method.
	DeleteRoleFunc func(ctx context.Context, id uuid.UUID) (int64, error)

	// DisassociatePolicyOnRoleFunc mocks the DisassociatePolicyOnRole method.
	DisassociatePolicyOnRoleFunc func(ctx context.Context, roleID uuid.UUID) (int64, error)

	// DisassociatePolicyOnRolesFunc mocks the DisassociatePolicyOnRoles method.
	DisassociatePolicyOnRolesFunc func(ctx context.Context, roleIDs []uuid.UUID) (int64, error)

	// DisassociateRoleFunc mocks the DisassociateRole method.
	DisassociateRoleFunc func(ctx context.Context, roleID uuid.UUID, policyID uuid.UUID) (int64, error)

	// DisassociateRoleOnPoliciesFunc mocks the DisassociateRoleOnPolicies method.
	DisassociateRoleOnPoliciesFunc func(ctx context.Context, policyIDs []uuid.UUID) (int64, error)

	// DisassociateRoleOnPolicyFunc mocks the DisassociateRoleOnPolicy method.
	DisassociateRoleOnPolicyFunc func(ctx context.Context, policyID uuid.UUID) (int64, error)

	// FindAttendStatusByIDFunc mocks the FindAttendStatusByID method.
	FindAttendStatusByIDFunc func(ctx context.Context, id uuid.UUID) (entity.AttendStatus, error)

	// FindAttendStatusByKeyFunc mocks the FindAttendStatusByKey method.
	FindAttendStatusByKeyFunc func(ctx context.Context, key string) (entity.AttendStatus, error)

	// FindAttendanceTypeByIDFunc mocks the FindAttendanceTypeByID method.
	FindAttendanceTypeByIDFunc func(ctx context.Context, id uuid.UUID) (entity.AttendanceType, error)

	// FindAttendanceTypeByKeyFunc mocks the FindAttendanceTypeByKey method.
	FindAttendanceTypeByKeyFunc func(ctx context.Context, key string) (entity.AttendanceType, error)

	// FindEventTypeByIDFunc mocks the FindEventTypeByID method.
	FindEventTypeByIDFunc func(ctx context.Context, id uuid.UUID) (entity.EventType, error)

	// FindEventTypeByKeyFunc mocks the FindEventTypeByKey method.
	FindEventTypeByKeyFunc func(ctx context.Context, key string) (entity.EventType, error)

	// FindMimeTypeByIDFunc mocks the FindMimeTypeByID method.
	FindMimeTypeByIDFunc func(ctx context.Context, id uuid.UUID) (entity.MimeType, error)

	// FindMimeTypeByKeyFunc mocks the FindMimeTypeByKey method.
	FindMimeTypeByKeyFunc func(ctx context.Context, key string) (entity.MimeType, error)

	// FindPermissionByIDFunc mocks the FindPermissionByID method.
	FindPermissionByIDFunc func(ctx context.Context, id uuid.UUID) (entity.Permission, error)

	// FindPermissionByIDWithCategoryFunc mocks the FindPermissionByIDWithCategory method.
	FindPermissionByIDWithCategoryFunc func(ctx context.Context, id uuid.UUID) (entity.PermissionWithCategory, error)

	// FindPermissionByKeyFunc mocks the FindPermissionByKey method.
	FindPermissionByKeyFunc func(ctx context.Context, key string) (entity.Permission, error)

	// FindPermissionByKeyWithCategoryFunc mocks the FindPermissionByKeyWithCategory method.
	FindPermissionByKeyWithCategoryFunc func(ctx context.Context, key string) (entity.PermissionWithCategory, error)

	// FindPermissionCategoryByIDFunc mocks the FindPermissionCategoryByID method.
	FindPermissionCategoryByIDFunc func(ctx context.Context, id uuid.UUID) (entity.PermissionCategory, error)

	// FindPermissionCategoryByKeyFunc mocks the FindPermissionCategoryByKey method.
	FindPermissionCategoryByKeyFunc func(ctx context.Context, key string) (entity.PermissionCategory, error)

	// FindPolicyByIDFunc mocks the FindPolicyByID method.
	FindPolicyByIDFunc func(ctx context.Context, id uuid.UUID) (entity.Policy, error)

	// FindPolicyByIDWithCategoryFunc mocks the FindPolicyByIDWithCategory method.
	FindPolicyByIDWithCategoryFunc func(ctx context.Context, id uuid.UUID) (entity.PolicyWithCategory, error)

	// FindPolicyByKeyFunc mocks the FindPolicyByKey method.
	FindPolicyByKeyFunc func(ctx context.Context, key string) (entity.Policy, error)

	// FindPolicyByKeyWithCategoryFunc mocks the FindPolicyByKeyWithCategory method.
	FindPolicyByKeyWithCategoryFunc func(ctx context.Context, key string) (entity.PolicyWithCategory, error)

	// FindPolicyCategoryByIDFunc mocks the FindPolicyCategoryByID method.
	FindPolicyCategoryByIDFunc func(ctx context.Context, id uuid.UUID) (entity.PolicyCategory, error)

	// FindPolicyCategoryByKeyFunc mocks the FindPolicyCategoryByKey method.
	FindPolicyCategoryByKeyFunc func(ctx context.Context, key string) (entity.PolicyCategory, error)

	// FindRecordTypeByIDFunc mocks the FindRecordTypeByID method.
	FindRecordTypeByIDFunc func(ctx context.Context, id uuid.UUID) (entity.RecordType, error)

	// FindRecordTypeByKeyFunc mocks the FindRecordTypeByKey method.
	FindRecordTypeByKeyFunc func(ctx context.Context, key string) (entity.RecordType, error)

	// FindRoleByIDFunc mocks the FindRoleByID method.
	FindRoleByIDFunc func(ctx context.Context, id uuid.UUID) (entity.Role, error)

	// GetAttendStatusesFunc mocks the GetAttendStatuses method.
	GetAttendStatusesFunc func(ctx context.Context, whereSearchName string, order parameter.AttendStatusOrderMethod, pg parameter.Pagination, limit parameter.Limit, cursor parameter.Cursor, offset parameter.Offset, withCount parameter.WithCount) (store.ListResult[entity.AttendStatus], error)

	// GetAttendStatusesCountFunc mocks the GetAttendStatusesCount method.
	GetAttendStatusesCountFunc func(ctx context.Context, whereSearchName string) (int64, error)

	// GetAttendanceTypesFunc mocks the GetAttendanceTypes method.
	GetAttendanceTypesFunc func(ctx context.Context, whereSearchName string, order parameter.AttendanceTypeOrderMethod, pg parameter.Pagination, limit parameter.Limit, cursor parameter.Cursor, offset parameter.Offset, withCount parameter.WithCount) (store.ListResult[entity.AttendanceType], error)

	// GetAttendanceTypesCountFunc mocks the GetAttendanceTypesCount method.
	GetAttendanceTypesCountFunc func(ctx context.Context, whereSearchName string) (int64, error)

	// GetEventTypesFunc mocks the GetEventTypes method.
	GetEventTypesFunc func(ctx context.Context, whereSearchName string, order parameter.EventTypeOrderMethod, pg parameter.Pagination, limit parameter.Limit, cursor parameter.Cursor, offset parameter.Offset, withCount parameter.WithCount) (store.ListResult[entity.EventType], error)

	// GetEventTypesCountFunc mocks the GetEventTypesCount method.
	GetEventTypesCountFunc func(ctx context.Context, whereSearchName string) (int64, error)

	// GetMimeTypesFunc mocks the GetMimeTypes method.
	GetMimeTypesFunc func(ctx context.Context, whereSearchName string, order parameter.MimeTypeOrderMethod, pg parameter.Pagination, limit parameter.Limit, cursor parameter.Cursor, offset parameter.Offset, withCount parameter.WithCount) (store.ListResult[entity.MimeType], error)

	// GetMimeTypesCountFunc mocks the GetMimeTypesCount method.
	GetMimeTypesCountFunc func(ctx context.Context, whereSearchName string) (int64, error)

	// GetPermissionCategoriesFunc mocks the GetPermissionCategories method.
	GetPermissionCategoriesFunc func(ctx context.Context, whereSearchName string, order parameter.PermissionCategoryOrderMethod, pg parameter.Pagination, limit parameter.Limit, cursor parameter.Cursor, offset parameter.Offset, withCount parameter.WithCount) (store.ListResult[entity.PermissionCategory], error)

	// GetPermissionCategoriesCountFunc mocks the GetPermissionCategoriesCount method.
	GetPermissionCategoriesCountFunc func(ctx context.Context, whereSearchName string) (int64, error)

	// GetPermissionsFunc mocks the GetPermissions method.
	GetPermissionsFunc func(ctx context.Context, whereSearchName string, whereInCategories []uuid.UUID, order parameter.PermissionOrderMethod, pg parameter.Pagination, limit parameter.Limit, cursor parameter.Cursor, offset parameter.Offset, withCount parameter.WithCount) (store.ListResult[entity.Permission], error)

	// GetPermissionsCountFunc mocks the GetPermissionsCount method.
	GetPermissionsCountFunc func(ctx context.Context, whereSearchName string, whereInCategories []uuid.UUID) (int64, error)

	// GetPermissionsWithCategoryFunc mocks the GetPermissionsWithCategory method.
	GetPermissionsWithCategoryFunc func(ctx context.Context, whereSearchName string, whereInCategories []uuid.UUID, order parameter.PermissionOrderMethod, pg parameter.Pagination, limit parameter.Limit, cursor parameter.Cursor, offset parameter.Offset, withCount parameter.WithCount) (store.ListResult[entity.PermissionWithCategory], error)

	// GetPoliciesFunc mocks the GetPolicies method.
	GetPoliciesFunc func(ctx context.Context, whereSearchName string, whereInCategories []uuid.UUID, order parameter.PolicyOrderMethod, pg parameter.Pagination, limit parameter.Limit, cursor parameter.Cursor, offset parameter.Offset, withCount parameter.WithCount) (store.ListResult[entity.Policy], error)

	// GetPoliciesCountFunc mocks the GetPoliciesCount method.
	GetPoliciesCountFunc func(ctx context.Context, whereSearchName string, whereInCategories []uuid.UUID) (int64, error)

	// GetPoliciesOnRoleFunc mocks the GetPoliciesOnRole method.
	GetPoliciesOnRoleFunc func(ctx context.Context, roleID uuid.UUID, whereSearchName string, order parameter.PolicyOnRoleOrderMethod, pg parameter.Pagination, limit parameter.Limit, cursor parameter.Cursor, offset parameter.Offset, withCount parameter.WithCount) (store.ListResult[entity.PolicyOnRole], error)

	// GetPoliciesOnRoleCountFunc mocks the GetPoliciesOnRoleCount method.
	GetPoliciesOnRoleCountFunc func(ctx context.Context, roleID uuid.UUID, whereSearchName string) (int64, error)

	// GetPoliciesWithCategoryFunc mocks the GetPoliciesWithCategory method.
	GetPoliciesWithCategoryFunc func(ctx context.Context, whereSearchName string, whereInCategories []uuid.UUID, order parameter.PolicyOrderMethod, pg parameter.Pagination, limit parameter.Limit, cursor parameter.Cursor, offset parameter.Offset, withCount parameter.WithCount) (store.ListResult[entity.PolicyWithCategory], error)

	// GetPolicyCategoriesFunc mocks the GetPolicyCategories method.
	GetPolicyCategoriesFunc func(ctx context.Context, whereSearchName string, order parameter.PolicyCategoryOrderMethod, pg parameter.Pagination, limit parameter.Limit, cursor parameter.Cursor, offset parameter.Offset, withCount parameter.WithCount) (store.ListResult[entity.PolicyCategory], error)

	// GetPolicyCategoriesCountFunc mocks the GetPolicyCategoriesCount method.
	GetPolicyCategoriesCountFunc func(ctx context.Context, whereSearchName string) (int64, error)

	// GetRecordTypesFunc mocks the GetRecordTypes method.
	GetRecordTypesFunc func(ctx context.Context, whereSearchName string, order parameter.RecordTypeOrderMethod, pg parameter.Pagination, limit parameter.Limit, cursor parameter.Cursor, offset parameter.Offset, withCount parameter.WithCount) (store.ListResult[entity.RecordType], error)

	// GetRecordTypesCountFunc mocks the GetRecordTypesCount method.
	GetRecordTypesCountFunc func(ctx context.Context, whereSearchName string) (int64, error)

	// GetRolesFunc mocks the GetRoles method.
	GetRolesFunc func(ctx context.Context, whereSearchName string, order parameter.RoleOrderMethod, pg parameter.Pagination, limit parameter.Limit, cursor parameter.Cursor, offset parameter.Offset, withCount parameter.WithCount) (store.ListResult[entity.Role], error)

	// GetRolesCountFunc mocks the GetRolesCount method.
	GetRolesCountFunc func(ctx context.Context, whereSearchName string) (int64, error)

	// GetRolesOnPolicyFunc mocks the GetRolesOnPolicy method.
	GetRolesOnPolicyFunc func(ctx context.Context, policyID uuid.UUID, whereSearchName string, order parameter.RoleOnPolicyOrderMethod, pg parameter.Pagination, limit parameter.Limit, cursor parameter.Cursor, offset parameter.Offset, withCount parameter.WithCount) (store.ListResult[entity.RoleOnPolicy], error)

	// GetRolesOnPolicyCountFunc mocks the GetRolesOnPolicyCount method.
	GetRolesOnPolicyCountFunc func(ctx context.Context, policyID uuid.UUID, whereSearchName string) (int64, error)

	// PluralDeleteAttendStatusesFunc mocks the PluralDeleteAttendStatuses method.
	PluralDeleteAttendStatusesFunc func(ctx context.Context, ids []uuid.UUID) (int64, error)

	// PluralDeleteAttendanceTypesFunc mocks the PluralDeleteAttendanceTypes method.
	PluralDeleteAttendanceTypesFunc func(ctx context.Context, ids []uuid.UUID) (int64, error)

	// PluralDeleteEventTypesFunc mocks the PluralDeleteEventTypes method.
	PluralDeleteEventTypesFunc func(ctx context.Context, ids []uuid.UUID) (int64, error)

	// PluralDeleteMimeTypesFunc mocks the PluralDeleteMimeTypes method.
	PluralDeleteMimeTypesFunc func(ctx context.Context, ids []uuid.UUID) (int64, error)

	// PluralDeletePermissionCategoriesFunc mocks the PluralDeletePermissionCategories method.
	PluralDeletePermissionCategoriesFunc func(ctx context.Context, ids []uuid.UUID) (int64, error)

	// PluralDeletePermissionsFunc mocks the PluralDeletePermissions method.
	PluralDeletePermissionsFunc func(ctx context.Context, ids []uuid.UUID) (int64, error)

	// PluralDeletePoliciesFunc mocks the PluralDeletePolicies method.
	PluralDeletePoliciesFunc func(ctx context.Context, ids []uuid.UUID) (int64, error)

	// PluralDeletePolicyCategoriesFunc mocks the PluralDeletePolicyCategories method.
	PluralDeletePolicyCategoriesFunc func(ctx context.Context, ids []uuid.UUID) (int64, error)

	// PluralDeleteRecordTypesFunc mocks the PluralDeleteRecordTypes method.
	PluralDeleteRecordTypesFunc func(ctx context.Context, ids []uuid.UUID) (int64, error)

	// PluralDeleteRolesFunc mocks the PluralDeleteRoles method.
	PluralDeleteRolesFunc func(ctx context.Context, ids []uuid.UUID) (int64, error)

	// PluralDisassociatePolicyOnRoleFunc mocks the PluralDisassociatePolicyOnRole method.
	PluralDisassociatePolicyOnRoleFunc func(ctx context.Context, roleID uuid.UUID, policyIDs []uuid.UUID) (int64, error)

	// PluralDisassociateRoleOnPolicyFunc mocks the PluralDisassociateRoleOnPolicy method.
	PluralDisassociateRoleOnPolicyFunc func(ctx context.Context, policyID uuid.UUID, roleIDs []uuid.UUID) (int64, error)

	// UpdateAttendStatusFunc mocks the UpdateAttendStatus method.
	UpdateAttendStatusFunc func(ctx context.Context, id uuid.UUID, name string, key string) (entity.AttendStatus, error)

	// UpdateAttendanceTypeFunc mocks the UpdateAttendanceType method.
	UpdateAttendanceTypeFunc func(ctx context.Context, id uuid.UUID, name string, key string, color string) (entity.AttendanceType, error)

	// UpdateEventTypeFunc mocks the UpdateEventType method.
	UpdateEventTypeFunc func(ctx context.Context, id uuid.UUID, name string, key string, color string) (entity.EventType, error)

	// UpdateMimeTypeFunc mocks the UpdateMimeType method.
	UpdateMimeTypeFunc func(ctx context.Context, id uuid.UUID, name string, key string, kind string) (entity.MimeType, error)

	// UpdatePermissionFunc mocks the UpdatePermission method.
	UpdatePermissionFunc func(ctx context.Context, id uuid.UUID, name string, key string, description string, categoryID uuid.UUID) (entity.Permission, error)

	// UpdatePermissionCategoryFunc mocks the UpdatePermissionCategory method.
	UpdatePermissionCategoryFunc func(ctx context.Context, id uuid.UUID, name string, key string, description string) (entity.PermissionCategory, error)

	// UpdatePolicyFunc mocks the UpdatePolicy method.
	UpdatePolicyFunc func(ctx context.Context, id uuid.UUID, name string, key string, description string, categoryID uuid.UUID) (entity.Policy, error)

	// UpdatePolicyCategoryFunc mocks the UpdatePolicyCategory method.
	UpdatePolicyCategoryFunc func(ctx context.Context, id uuid.UUID, name string, key string, description string) (entity.PolicyCategory, error)

	// UpdateRecordTypeFunc mocks the UpdateRecordType method.
	UpdateRecordTypeFunc func(ctx context.Context, id uuid.UUID, name string, key string) (entity.RecordType, error)

	// UpdateRoleFunc mocks the UpdateRole method.
	UpdateRoleFunc func(ctx context.Context, id uuid.UUID, name string, description string) (entity.Role, error)

	// calls tracks calls to the methods.
	calls struct {
		// AssociateRole holds details about calls to the AssociateRole method.
		AssociateRole []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// RoleID is the roleID argument value.
			RoleID uuid.UUID
			// PolicyID is the policyID argument value.
			PolicyID uuid.UUID
		}
		// AssociateRoles holds details about calls to the AssociateRoles method.
		AssociateRoles []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params []parameter.AssociationRoleParam
		}
		// CreateAttendStatus holds details about calls to the CreateAttendStatus method.
		CreateAttendStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Key is the key argument value.
			Key string
		}
		// CreateAttendStatuses holds details about calls to the CreateAttendStatuses method.
		CreateAttendStatuses []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Ps is the ps argument value.
			Ps []parameter.CreateAttendStatusParam
		}
		// CreateAttendanceType holds details about calls to the CreateAttendanceType method.
		CreateAttendanceType []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Key is the key argument value.
			Key string
			// Color is the color argument value.
			Color string
		}
		// CreateAttendanceTypes holds details about calls to the CreateAttendanceTypes method.
		CreateAttendanceTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Ps is the ps argument value.
			Ps []parameter.CreateAttendanceTypeParam
		}
		// CreateEventType holds details about calls to the CreateEventType method.
		CreateEventType []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Key is the key argument value.
			Key string
			// Color is the color argument value.
			Color string
		}
		// CreateEventTypes holds details about calls to the CreateEventTypes method.
		CreateEventTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Ps is the ps argument value.
			Ps []parameter.CreateEventTypeParam
		}
		// CreateMimeType holds details about calls to the CreateMimeType method.
		CreateMimeType []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Key is the key argument value.
			Key string
			// Kind is the kind argument value.
			Kind string
		}
		// CreateMimeTypes holds details about calls to the CreateMimeTypes method.
		CreateMimeTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Ps is the ps argument value.
			Ps []parameter.CreateMimeTypeParam
		}
		// CreatePermission holds details about calls to the CreatePermission method.
		CreatePermission []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Key is the key argument value.
			Key string
			// Description is the description argument value.
			Description string
			// CategoryID is the categoryID argument value.
			CategoryID uuid.UUID
		}
		// CreatePermissionCategories holds details about calls to the CreatePermissionCategories method.
		CreatePermissionCategories []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Ps is the ps argument value.
			Ps []parameter.CreatePermissionCategoryParam
		}
		// CreatePermissionCategory holds details about calls to the CreatePermissionCategory method.
		CreatePermissionCategory []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Key is the key argument value.
			Key string
			// Description is the description argument value.
			Description string
		}
		// CreatePermissions holds details about calls to the CreatePermissions method.
		CreatePermissions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Ps is the ps argument value.
			Ps []parameter.CreatePermissionParam
		}
		// CreatePolicies holds details about calls to the CreatePolicies method.
		CreatePolicies []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Ps is the ps argument value.
			Ps []parameter.CreatePolicyParam
		}
		// CreatePolicy holds details about calls to the CreatePolicy method.
		CreatePolicy []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Key is the key argument value.
			Key string
			// Description is the description argument value.
			Description string
			// CategoryID is the categoryID argument value.
			CategoryID uuid.UUID
		}
		// CreatePolicyCategories holds details about calls to the CreatePolicyCategories method.
		CreatePolicyCategories []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Ps is the ps argument value.
			Ps []parameter.CreatePolicyCategoryParam
		}
		// CreatePolicyCategory holds details about calls to the CreatePolicyCategory method.
		CreatePolicyCategory []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Key is the key argument value.
			Key string
			// Description is the description argument value.
			Description string
		}
		// CreateRecordType holds details about calls to the CreateRecordType method.
		CreateRecordType []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Key is the key argument value.
			Key string
		}
		// CreateRecordTypes holds details about calls to the CreateRecordTypes method.
		CreateRecordTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Ps is the ps argument value.
			Ps []parameter.CreateRecordTypeParam
		}
		// CreateRole holds details about calls to the CreateRole method.
		CreateRole []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Description is the description argument value.
			Description string
		}
		// CreateRoles holds details about calls to the CreateRoles method.
		CreateRoles []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Ps is the ps argument value.
			Ps []parameter.CreateRoleParam
		}
		// DeleteAttendStatus holds details about calls to the DeleteAttendStatus method.
		DeleteAttendStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// DeleteAttendanceType holds details about calls to the DeleteAttendanceType method.
		DeleteAttendanceType []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// DeleteEventType holds details about calls to the DeleteEventType method.
		DeleteEventType []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// DeleteMimeType holds details about calls to the DeleteMimeType method.
		DeleteMimeType []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// DeletePermission holds details about calls to the DeletePermission method.
		DeletePermission []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// DeletePermissionCategory holds details about calls to the DeletePermissionCategory method.
		DeletePermissionCategory []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// DeletePolicy holds details about calls to the DeletePolicy method.
		DeletePolicy []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// DeletePolicyCategory holds details about calls to the DeletePolicyCategory method.
		DeletePolicyCategory []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// DeleteRecordType holds details about calls to the DeleteRecordType method.
		DeleteRecordType []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// DeleteRole holds details about calls to the DeleteRole method.
		DeleteRole []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// DisassociatePolicyOnRole holds details about calls to the DisassociatePolicyOnRole method.
		DisassociatePolicyOnRole []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// RoleID is the roleID argument value.
			RoleID uuid.UUID
		}
		// DisassociatePolicyOnRoles holds details about calls to the DisassociatePolicyOnRoles method.
		DisassociatePolicyOnRoles []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// RoleIDs is the roleIDs argument value.
			RoleIDs []uuid.UUID
		}
		// DisassociateRole holds details about calls to the DisassociateRole method.
		DisassociateRole []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// RoleID is the roleID argument value.
			RoleID uuid.UUID
			// PolicyID is the policyID argument value.
			PolicyID uuid.UUID
		}
		// DisassociateRoleOnPolicies holds details about calls to the DisassociateRoleOnPolicies method.
		DisassociateRoleOnPolicies []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PolicyIDs is the policyIDs argument value.
			PolicyIDs []uuid.UUID
		}
		// DisassociateRoleOnPolicy holds details about calls to the DisassociateRoleOnPolicy method.
		DisassociateRoleOnPolicy []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PolicyID is the policyID argument value.
			PolicyID uuid.UUID
		}
		// FindAttendStatusByID holds details about calls to the FindAttendStatusByID method.
		FindAttendStatusByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// FindAttendStatusByKey holds details about calls to the FindAttendStatusByKey method.
		FindAttendStatusByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// FindAttendanceTypeByID holds details about calls to the FindAttendanceTypeByID method.
		FindAttendanceTypeByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// FindAttendanceTypeByKey holds details about calls to the FindAttendanceTypeByKey method.
		FindAttendanceTypeByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// FindEventTypeByID holds details about calls to the FindEventTypeByID method.
		FindEventTypeByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// FindEventTypeByKey holds details about calls to the FindEventTypeByKey method.
		FindEventTypeByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// FindMimeTypeByID holds details about calls to the FindMimeTypeByID method.
		FindMimeTypeByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// FindMimeTypeByKey holds details about calls to the FindMimeTypeByKey method.
		FindMimeTypeByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// FindPermissionByID holds details about calls to the FindPermissionByID method.
		FindPermissionByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// FindPermissionByIDWithCategory holds details about calls to the FindPermissionByIDWithCategory method.
		FindPermissionByIDWithCategory []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// FindPermissionByKey holds details about calls to the FindPermissionByKey method.
		FindPermissionByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// FindPermissionByKeyWithCategory holds details about calls to the FindPermissionByKeyWithCategory method.
		FindPermissionByKeyWithCategory []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// FindPermissionCategoryByID holds details about calls to the FindPermissionCategoryByID method.
		FindPermissionCategoryByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// FindPermissionCategoryByKey holds details about calls to the FindPermissionCategoryByKey method.
		FindPermissionCategoryByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// FindPolicyByID holds details about calls to the FindPolicyByID method.
		FindPolicyByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// FindPolicyByIDWithCategory holds details about calls to the FindPolicyByIDWithCategory method.
		FindPolicyByIDWithCategory []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// FindPolicyByKey holds details about calls to the FindPolicyByKey method.
		FindPolicyByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// FindPolicyByKeyWithCategory holds details about calls to the FindPolicyByKeyWithCategory method.
		FindPolicyByKeyWithCategory []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// FindPolicyCategoryByID holds details about calls to the FindPolicyCategoryByID method.
		FindPolicyCategoryByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// FindPolicyCategoryByKey holds details about calls to the FindPolicyCategoryByKey method.
		FindPolicyCategoryByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// FindRecordTypeByID holds details about calls to the FindRecordTypeByID method.
		FindRecordTypeByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// FindRecordTypeByKey holds details about calls to the FindRecordTypeByKey method.
		FindRecordTypeByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// FindRoleByID holds details about calls to the FindRoleByID method.
		FindRoleByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// GetAttendStatuses holds details about calls to the GetAttendStatuses method.
		GetAttendStatuses []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// WhereSearchName is the whereSearchName argument value.
			WhereSearchName string
			// Order is the order argument value.
			Order parameter.AttendStatusOrderMethod
			// Pg is the pg argument value.
			Pg parameter.Pagination
			// Limit is the limit argument value.
			Limit parameter.Limit
			// Cursor is the cursor argument value.
			Cursor parameter.Cursor
			// Offset is the offset argument value.
			Offset parameter.Offset
			// WithCount is the withCount argument value.
			WithCount parameter.WithCount
		}
		// GetAttendStatusesCount holds details about calls to the GetAttendStatusesCount method.
		GetAttendStatusesCount []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// WhereSearchName is the whereSearchName argument value.
			WhereSearchName string
		}
		// GetAttendanceTypes holds details about calls to the GetAttendanceTypes method.
		GetAttendanceTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// WhereSearchName is the whereSearchName argument value.
			WhereSearchName string
			// Order is the order argument value.
			Order parameter.AttendanceTypeOrderMethod
			// Pg is the pg argument value.
			Pg parameter.Pagination
			// Limit is the limit argument value.
			Limit parameter.Limit
			// Cursor is the cursor argument value.
			Cursor parameter.Cursor
			// Offset is the offset argument value.
			Offset parameter.Offset
			// WithCount is the withCount argument value.
			WithCount parameter.WithCount
		}
		// GetAttendanceTypesCount holds details about calls to the GetAttendanceTypesCount method.
		GetAttendanceTypesCount []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// WhereSearchName is the whereSearchName argument value.
			WhereSearchName string
		}
		// GetEventTypes holds details about calls to the GetEventTypes method.
		GetEventTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// WhereSearchName is the whereSearchName argument value.
			WhereSearchName string
			// Order is the order argument value.
			Order parameter.EventTypeOrderMethod
			// Pg is the pg argument value.
			Pg parameter.Pagination
			// Limit is the limit argument value.
			Limit parameter.Limit
			// Cursor is the cursor argument value.
			Cursor parameter.Cursor
			// Offset is the offset argument value.
			Offset parameter.Offset
			// WithCount is the withCount argument value.
			WithCount parameter.WithCount
		}
		// GetEventTypesCount holds details about calls to the GetEventTypesCount method.
		GetEventTypesCount []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// WhereSearchName is the whereSearchName argument value.
			WhereSearchName string
		}
		// GetMimeTypes holds details about calls to the GetMimeTypes method.
		GetMimeTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// WhereSearchName is the whereSearchName argument value.
			WhereSearchName string
			// Order is the order argument value.
			Order parameter.MimeTypeOrderMethod
			// Pg is the pg argument value.
			Pg parameter.Pagination
			// Limit is the limit argument value.
			Limit parameter.Limit
			// Cursor is the cursor argument value.
			Cursor parameter.Cursor
			// Offset is the offset argument value.
			Offset parameter.Offset
			// WithCount is the withCount argument value.
			WithCount parameter.WithCount
		}
		// GetMimeTypesCount holds details about calls to the GetMimeTypesCount method.
		GetMimeTypesCount []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// WhereSearchName is the whereSearchName argument value.
			WhereSearchName string
		}
		// GetPermissionCategories holds details about calls to the GetPermissionCategories method.
		GetPermissionCategories []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// WhereSearchName is the whereSearchName argument value.
			WhereSearchName string
			// Order is the order argument value.
			Order parameter.PermissionCategoryOrderMethod
			// Pg is the pg argument value.
			Pg parameter.Pagination
			// Limit is the limit argument value.
			Limit parameter.Limit
			// Cursor is the cursor argument value.
			Cursor parameter.Cursor
			// Offset is the offset argument value.
			Offset parameter.Offset
			// WithCount is the withCount argument value.
			WithCount parameter.WithCount
		}
		// GetPermissionCategoriesCount holds details about calls to the GetPermissionCategoriesCount method.
		GetPermissionCategoriesCount []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// WhereSearchName is the whereSearchName argument value.
			WhereSearchName string
		}
		// GetPermissions holds details about calls to the GetPermissions method.
		GetPermissions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// WhereSearchName is the whereSearchName argument value.
			WhereSearchName string
			// WhereInCategories is the whereInCategories argument value.
			WhereInCategories []uuid.UUID
			// Order is the order argument value.
			Order parameter.PermissionOrderMethod
			// Pg is the pg argument value.
			Pg parameter.Pagination
			// Limit is the limit argument value.
			Limit parameter.Limit
			// Cursor is the cursor argument value.
			Cursor parameter.Cursor
			// Offset is the offset argument value.
			Offset parameter.Offset
			// WithCount is the withCount argument value.
			WithCount parameter.WithCount
		}
		// GetPermissionsCount holds details about calls to the GetPermissionsCount method.
		GetPermissionsCount []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// WhereSearchName is the whereSearchName argument value.
			WhereSearchName string
			// WhereInCategories is the whereInCategories argument value.
			WhereInCategories []uuid.UUID
		}
		// GetPermissionsWithCategory holds details about calls to the GetPermissionsWithCategory method.
		GetPermissionsWithCategory []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// WhereSearchName is the whereSearchName argument value.
			WhereSearchName string
			// WhereInCategories is the whereInCategories argument value.
			WhereInCategories []uuid.UUID
			// Order is the order argument value.
			Order parameter.PermissionOrderMethod
			// Pg is the pg argument value.
			Pg parameter.Pagination
			// Limit is the limit argument value.
			Limit parameter.Limit
			// Cursor is the cursor argument value.
			Cursor parameter.Cursor
			// Offset is the offset argument value.
			Offset parameter.Offset
			// WithCount is the withCount argument value.
			WithCount parameter.WithCount
		}
		// GetPolicies holds details about calls to the GetPolicies method.
		GetPolicies []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// WhereSearchName is the whereSearchName argument value.
			WhereSearchName string
			// WhereInCategories is the whereInCategories argument value.
			WhereInCategories []uuid.UUID
			// Order is the order argument value.
			Order parameter.PolicyOrderMethod
			// Pg is the pg argument value.
			Pg parameter.Pagination
			// Limit is the limit argument value.
			Limit parameter.Limit
			// Cursor is the cursor argument value.
			Cursor parameter.Cursor
			// Offset is the offset argument value.
			Offset parameter.Offset
			// WithCount is the withCount argument value.
			WithCount parameter.WithCount
		}
		// GetPoliciesCount holds details about calls to the GetPoliciesCount method.
		GetPoliciesCount []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// WhereSearchName is the whereSearchName argument value.
			WhereSearchName string
			// WhereInCategories is the whereInCategories argument value.
			WhereInCategories []uuid.UUID
		}
		// GetPoliciesOnRole holds details about calls to the GetPoliciesOnRole method.
		GetPoliciesOnRole []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// RoleID is the roleID argument value.
			RoleID uuid.UUID
			// WhereSearchName is the whereSearchName argument value.
			WhereSearchName string
			// Order is the order argument value.
			Order parameter.PolicyOnRoleOrderMethod
			// Pg is the pg argument value.
			Pg parameter.Pagination
			// Limit is the limit argument value.
			Limit parameter.Limit
			// Cursor is the cursor argument value.
			Cursor parameter.Cursor
			// Offset is the offset argument value.
			Offset parameter.Offset
			// WithCount is the withCount argument value.
			WithCount parameter.WithCount
		}
		// GetPoliciesOnRoleCount holds details about calls to the GetPoliciesOnRoleCount method.
		GetPoliciesOnRoleCount []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// RoleID is the roleID argument value.
			RoleID uuid.UUID
			// WhereSearchName is the whereSearchName argument value.
			WhereSearchName string
		}
		// GetPoliciesWithCategory holds details about calls to the GetPoliciesWithCategory method.
		GetPoliciesWithCategory []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// WhereSearchName is the whereSearchName argument value.
			WhereSearchName string
			// WhereInCategories is the whereInCategories argument value.
			WhereInCategories []uuid.UUID
			// Order is the order argument value.
			Order parameter.PolicyOrderMethod
			// Pg is the pg argument value.
			Pg parameter.Pagination
			// Limit is the limit argument value.
			Limit parameter.Limit
			// Cursor is the cursor argument value.
			Cursor parameter.Cursor
			// Offset is the offset argument value.
			Offset parameter.Offset
			// WithCount is the withCount argument value.
			WithCount parameter.WithCount
		}
		// GetPolicyCategories holds details about calls to the GetPolicyCategories method.
		GetPolicyCategories []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// WhereSearchName is the whereSearchName argument value.
			WhereSearchName string
			// Order is the order argument value.
			Order parameter.PolicyCategoryOrderMethod
			// Pg is the pg argument value.
			Pg parameter.Pagination
			// Limit is the limit argument value.
			Limit parameter.Limit
			// Cursor is the cursor argument value.
			Cursor parameter.Cursor
			// Offset is the offset argument value.
			Offset parameter.Offset
			// WithCount is the withCount argument value.
			WithCount parameter.WithCount
		}
		// GetPolicyCategoriesCount holds details about calls to the GetPolicyCategoriesCount method.
		GetPolicyCategoriesCount []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// WhereSearchName is the whereSearchName argument value.
			WhereSearchName string
		}
		// GetRecordTypes holds details about calls to the GetRecordTypes method.
		GetRecordTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// WhereSearchName is the whereSearchName argument value.
			WhereSearchName string
			// Order is the order argument value.
			Order parameter.RecordTypeOrderMethod
			// Pg is the pg argument value.
			Pg parameter.Pagination
			// Limit is the limit argument value.
			Limit parameter.Limit
			// Cursor is the cursor argument value.
			Cursor parameter.Cursor
			// Offset is the offset argument value.
			Offset parameter.Offset
			// WithCount is the withCount argument value.
			WithCount parameter.WithCount
		}
		// GetRecordTypesCount holds details about calls to the GetRecordTypesCount method.
		GetRecordTypesCount []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// WhereSearchName is the whereSearchName argument value.
			WhereSearchName string
		}
		// GetRoles holds details about calls to the GetRoles method.
		GetRoles []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// WhereSearchName is the whereSearchName argument value.
			WhereSearchName string
			// Order is the order argument value.
			Order parameter.RoleOrderMethod
			// Pg is the pg argument value.
			Pg parameter.Pagination
			// Limit is the limit argument value.
			Limit parameter.Limit
			// Cursor is the cursor argument value.
			Cursor parameter.Cursor
			// Offset is the offset argument value.
			Offset parameter.Offset
			// WithCount is the withCount argument value.
			WithCount parameter.WithCount
		}
		// GetRolesCount holds details about calls to the GetRolesCount method.
		GetRolesCount []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// WhereSearchName is the whereSearchName argument value.
			WhereSearchName string
		}
		// GetRolesOnPolicy holds details about calls to the GetRolesOnPolicy method.
		GetRolesOnPolicy []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PolicyID is the policyID argument value.
			PolicyID uuid.UUID
			// WhereSearchName is the whereSearchName argument value.
			WhereSearchName string
			// Order is the order argument value.
			Order parameter.RoleOnPolicyOrderMethod
			// Pg is the pg argument value.
			Pg parameter.Pagination
			// Limit is the limit argument value.
			Limit parameter.Limit
			// Cursor is the cursor argument value.
			Cursor parameter.Cursor
			// Offset is the offset argument value.
			Offset parameter.Offset
			// WithCount is the withCount argument value.
			WithCount parameter.WithCount
		}
		// GetRolesOnPolicyCount holds details about calls to the GetRolesOnPolicyCount method.
		GetRolesOnPolicyCount []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PolicyID is the policyID argument value.
			PolicyID uuid.UUID
			// WhereSearchName is the whereSearchName argument value.
			WhereSearchName string
		}
		// PluralDeleteAttendStatuses holds details about calls to the PluralDeleteAttendStatuses method.
		PluralDeleteAttendStatuses []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Ids is the ids argument value.
			Ids []uuid.UUID
		}
		// PluralDeleteAttendanceTypes holds details about calls to the PluralDeleteAttendanceTypes method.
		PluralDeleteAttendanceTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Ids is the ids argument value.
			Ids []uuid.UUID
		}
		// PluralDeleteEventTypes holds details about calls to the PluralDeleteEventTypes method.
		PluralDeleteEventTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Ids is the ids argument value.
			Ids []uuid.UUID
		}
		// PluralDeleteMimeTypes holds details about calls to the PluralDeleteMimeTypes method.
		PluralDeleteMimeTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Ids is the ids argument value.
			Ids []uuid.UUID
		}
		// PluralDeletePermissionCategories holds details about calls to the PluralDeletePermissionCategories method.
		PluralDeletePermissionCategories []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Ids is the ids argument value.
			Ids []uuid.UUID
		}
		// PluralDeletePermissions holds details about calls to the PluralDeletePermissions method.
		PluralDeletePermissions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Ids is the ids argument value.
			Ids []uuid.UUID
		}
		// PluralDeletePolicies holds details about calls to the PluralDeletePolicies method.
		PluralDeletePolicies []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Ids is the ids argument value.
			Ids []uuid.UUID
		}
		// PluralDeletePolicyCategories holds details about calls to the PluralDeletePolicyCategories method.
		PluralDeletePolicyCategories []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Ids is the ids argument value.
			Ids []uuid.UUID
		}
		// PluralDeleteRecordTypes holds details about calls to the PluralDeleteRecordTypes method.
		PluralDeleteRecordTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Ids is the ids argument value.
			Ids []uuid.UUID
		}
		// PluralDeleteRoles holds details about calls to the PluralDeleteRoles method.
		PluralDeleteRoles []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Ids is the ids argument value.
			Ids []uuid.UUID
		}
		// PluralDisassociatePolicyOnRole holds details about calls to the PluralDisassociatePolicyOnRole method.
		PluralDisassociatePolicyOnRole []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// RoleID is the roleID argument value.
			RoleID uuid.UUID
			// PolicyIDs is the policyIDs argument value.
			PolicyIDs []uuid.UUID
		}
		// PluralDisassociateRoleOnPolicy holds details about calls to the PluralDisassociateRoleOnPolicy method.
		PluralDisassociateRoleOnPolicy []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PolicyID is the policyID argument value.
			PolicyID uuid.UUID
			// RoleIDs is the roleIDs argument value.
			RoleIDs []uuid.UUID
		}
		// UpdateAttendStatus holds details about calls to the UpdateAttendStatus method.
		UpdateAttendStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
			// Name is the name argument value.
			Name string
			// Key is the key argument value.
			Key string
		}
		// UpdateAttendanceType holds details about calls to the UpdateAttendanceType method.
		UpdateAttendanceType []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
			// Name is the name argument value.
			Name string
			// Key is the key argument value.
			Key string
			// Color is the color argument value.
			Color string
		}
		// UpdateEventType holds details about calls to the UpdateEventType method.
		UpdateEventType []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
			// Name is the name argument value.
			Name string
			// Key is the key argument value.
			Key string
			// Color is the color argument value.
			Color string
		}
		// UpdateMimeType holds details about calls to the UpdateMimeType method.
		UpdateMimeType []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
			// Name is the name argument value.
			Name string
			// Key is the key argument value.
			Key string
			// Kind is the kind argument value.
			Kind string
		}
		// UpdatePermission holds details about calls to the UpdatePermission method.
		UpdatePermission []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
			// Name is the name argument value.
			Name string
			// Key is the key argument value.
			Key string
			// Description is the description argument value.
			Description string
			// CategoryID is the categoryID argument value.
			CategoryID uuid.UUID
		}
		// UpdatePermissionCategory holds details about calls to the UpdatePermissionCategory method.
		UpdatePermissionCategory []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
			// Name is the name argument value.
			Name string
			// Key is the key argument value.
			Key string
			// Description is the description argument value.
			Description string
		}
		// UpdatePolicy holds details about calls to the UpdatePolicy method.
		UpdatePolicy []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
			// Name is the name argument value.
			Name string
			// Key is the key argument value.
			Key string
			// Description is the description argument value.
			Description string
			// CategoryID is the categoryID argument value.
			CategoryID uuid.UUID
		}
		// UpdatePolicyCategory holds details about calls to the UpdatePolicyCategory method.
		UpdatePolicyCategory []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
			// Name is the name argument value.
			Name string
			// Key is the key argument value.
			Key string
			// Description is the description argument value.
			Description string
		}
		// UpdateRecordType holds details about calls to the UpdateRecordType method.
		UpdateRecordType []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
			// Name is the name argument value.
			Name string
			// Key is the key argument value.
			Key string
		}
		// UpdateRole holds details about calls to the UpdateRole method.
		UpdateRole []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
			// Name is the name argument value.
			Name string
			// Description is the description argument value.
			Description string
		}
	}
	lockAssociateRole                    sync.RWMutex
	lockAssociateRoles                   sync.RWMutex
	lockCreateAttendStatus               sync.RWMutex
	lockCreateAttendStatuses             sync.RWMutex
	lockCreateAttendanceType             sync.RWMutex
	lockCreateAttendanceTypes            sync.RWMutex
	lockCreateEventType                  sync.RWMutex
	lockCreateEventTypes                 sync.RWMutex
	lockCreateMimeType                   sync.RWMutex
	lockCreateMimeTypes                  sync.RWMutex
	lockCreatePermission                 sync.RWMutex
	lockCreatePermissionCategories       sync.RWMutex
	lockCreatePermissionCategory         sync.RWMutex
	lockCreatePermissions                sync.RWMutex
	lockCreatePolicies                   sync.RWMutex
	lockCreatePolicy                     sync.RWMutex
	lockCreatePolicyCategories           sync.RWMutex
	lockCreatePolicyCategory             sync.RWMutex
	lockCreateRecordType                 sync.RWMutex
	lockCreateRecordTypes                sync.RWMutex
	lockCreateRole                       sync.RWMutex
	lockCreateRoles                      sync.RWMutex
	lockDeleteAttendStatus               sync.RWMutex
	lockDeleteAttendanceType             sync.RWMutex
	lockDeleteEventType                  sync.RWMutex
	lockDeleteMimeType                   sync.RWMutex
	lockDeletePermission                 sync.RWMutex
	lockDeletePermissionCategory         sync.RWMutex
	lockDeletePolicy                     sync.RWMutex
	lockDeletePolicyCategory             sync.RWMutex
	lockDeleteRecordType                 sync.RWMutex
	lockDeleteRole                       sync.RWMutex
	lockDisassociatePolicyOnRole         sync.RWMutex
	lockDisassociatePolicyOnRoles        sync.RWMutex
	lockDisassociateRole                 sync.RWMutex
	lockDisassociateRoleOnPolicies       sync.RWMutex
	lockDisassociateRoleOnPolicy         sync.RWMutex
	lockFindAttendStatusByID             sync.RWMutex
	lockFindAttendStatusByKey            sync.RWMutex
	lockFindAttendanceTypeByID           sync.RWMutex
	lockFindAttendanceTypeByKey          sync.RWMutex
	lockFindEventTypeByID                sync.RWMutex
	lockFindEventTypeByKey               sync.RWMutex
	lockFindMimeTypeByID                 sync.RWMutex
	lockFindMimeTypeByKey                sync.RWMutex
	lockFindPermissionByID               sync.RWMutex
	lockFindPermissionByIDWithCategory   sync.RWMutex
	lockFindPermissionByKey              sync.RWMutex
	lockFindPermissionByKeyWithCategory  sync.RWMutex
	lockFindPermissionCategoryByID       sync.RWMutex
	lockFindPermissionCategoryByKey      sync.RWMutex
	lockFindPolicyByID                   sync.RWMutex
	lockFindPolicyByIDWithCategory       sync.RWMutex
	lockFindPolicyByKey                  sync.RWMutex
	lockFindPolicyByKeyWithCategory      sync.RWMutex
	lockFindPolicyCategoryByID           sync.RWMutex
	lockFindPolicyCategoryByKey          sync.RWMutex
	lockFindRecordTypeByID               sync.RWMutex
	lockFindRecordTypeByKey              sync.RWMutex
	lockFindRoleByID                     sync.RWMutex
	lockGetAttendStatuses                sync.RWMutex
	lockGetAttendStatusesCount           sync.RWMutex
	lockGetAttendanceTypes               sync.RWMutex
	lockGetAttendanceTypesCount          sync.RWMutex
	lockGetEventTypes                    sync.RWMutex
	lockGetEventTypesCount               sync.RWMutex
	lockGetMimeTypes                     sync.RWMutex
	lockGetMimeTypesCount                sync.RWMutex
	lockGetPermissionCategories          sync.RWMutex
	lockGetPermissionCategoriesCount     sync.RWMutex
	lockGetPermissions                   sync.RWMutex
	lockGetPermissionsCount              sync.RWMutex
	lockGetPermissionsWithCategory       sync.RWMutex
	lockGetPolicies                      sync.RWMutex
	lockGetPoliciesCount                 sync.RWMutex
	lockGetPoliciesOnRole                sync.RWMutex
	lockGetPoliciesOnRoleCount           sync.RWMutex
	lockGetPoliciesWithCategory          sync.RWMutex
	lockGetPolicyCategories              sync.RWMutex
	lockGetPolicyCategoriesCount         sync.RWMutex
	lockGetRecordTypes                   sync.RWMutex
	lockGetRecordTypesCount              sync.RWMutex
	lockGetRoles                         sync.RWMutex
	lockGetRolesCount                    sync.RWMutex
	lockGetRolesOnPolicy                 sync.RWMutex
	lockGetRolesOnPolicyCount            sync.RWMutex
	lockPluralDeleteAttendStatuses       sync.RWMutex
	lockPluralDeleteAttendanceTypes      sync.RWMutex
	lockPluralDeleteEventTypes           sync.RWMutex
	lockPluralDeleteMimeTypes            sync.RWMutex
	lockPluralDeletePermissionCategories sync.RWMutex
	lockPluralDeletePermissions          sync.RWMutex
	lockPluralDeletePolicies             sync.RWMutex
	lockPluralDeletePolicyCategories     sync.RWMutex
	lockPluralDeleteRecordTypes          sync.RWMutex
	lockPluralDeleteRoles                sync.RWMutex
	lockPluralDisassociatePolicyOnRole   sync.RWMutex
	lockPluralDisassociateRoleOnPolicy   sync.RWMutex
	lockUpdateAttendStatus               sync.RWMutex
	lockUpdateAttendanceType             sync.RWMutex
	lockUpdateEventType                  sync.RWMutex
	lockUpdateMimeType                   sync.RWMutex
	lockUpdatePermission                 sync.RWMutex
	lockUpdatePermissionCategory         sync.RWMutex
	lockUpdatePolicy                     sync.RWMutex
	lockUpdatePolicyCategory             sync.RWMutex
	lockUpdateRecordType                 sync.RWMutex
	lockUpdateRole                       sync.RWMutex
}

// AssociateRole calls AssociateRoleFunc.
func (mock *ManagerInterfaceMock) AssociateRole(ctx context.Context, roleID uuid.UUID, policyID uuid.UUID) (entity.RoleAssociation, error) {
	if mock.AssociateRoleFunc == nil {
		panic("ManagerInterfaceMock.AssociateRoleFunc: method is nil but ManagerInterface.AssociateRole was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		RoleID   uuid.UUID
		PolicyID uuid.UUID
	}{
		Ctx:      ctx,
		RoleID:   roleID,
		PolicyID: policyID,
	}
	mock.lockAssociateRole.Lock()
	mock.calls.AssociateRole = append(mock.calls.AssociateRole, callInfo)
	mock.lockAssociateRole.Unlock()
	return mock.AssociateRoleFunc(ctx, roleID, policyID)
}

// AssociateRoleCalls gets all the calls that were made to AssociateRole.
// Check the length with:
//
//	len(mockedManagerInterface.AssociateRoleCalls())
func (mock *ManagerInterfaceMock) AssociateRoleCalls() []struct {
	Ctx      context.Context
	RoleID   uuid.UUID
	PolicyID uuid.UUID
} {
	var calls []struct {
		Ctx      context.Context
		RoleID   uuid.UUID
		PolicyID uuid.UUID
	}
	mock.lockAssociateRole.RLock()
	calls = mock.calls.AssociateRole
	mock.lockAssociateRole.RUnlock()
	return calls
}

// AssociateRoles calls AssociateRolesFunc.
func (mock *ManagerInterfaceMock) AssociateRoles(ctx context.Context, params []parameter.AssociationRoleParam) (int64, error) {
	if mock.AssociateRolesFunc == nil {
		panic("ManagerInterfaceMock.AssociateRolesFunc: method is nil but ManagerInterface.AssociateRoles was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params []parameter.AssociationRoleParam
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockAssociateRoles.Lock()
	mock.calls.AssociateRoles = append(mock.calls.AssociateRoles, callInfo)
	mock.lockAssociateRoles.Unlock()
	return mock.AssociateRolesFunc(ctx, params)
}

// AssociateRolesCalls gets all the calls that were made to AssociateRoles.
// Check the length with:
//
//	len(mockedManagerInterface.AssociateRolesCalls())
func (mock *ManagerInterfaceMock) AssociateRolesCalls() []struct {
	Ctx    context.Context
	Params []parameter.AssociationRoleParam
} {
	var calls []struct {
		Ctx    context.Context
		Params []parameter.AssociationRoleParam
	}
	mock.lockAssociateRoles.RLock()
	calls = mock.calls.AssociateRoles
	mock.lockAssociateRoles.RUnlock()
	return calls
}

// CreateAttendStatus calls CreateAttendStatusFunc.
func (mock *ManagerInterfaceMock) CreateAttendStatus(ctx context.Context, name string, key string) (entity.AttendStatus, error) {
	if mock.CreateAttendStatusFunc == nil {
		panic("ManagerInterfaceMock.CreateAttendStatusFunc: method is nil but ManagerInterface.CreateAttendStatus was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Key  string
	}{
		Ctx:  ctx,
		Name: name,
		Key:  key,
	}
	mock.lockCreateAttendStatus.Lock()
	mock.calls.CreateAttendStatus = append(mock.calls.CreateAttendStatus, callInfo)
	mock.lockCreateAttendStatus.Unlock()
	return mock.CreateAttendStatusFunc(ctx, name, key)
}

// CreateAttendStatusCalls gets all the calls that were made to CreateAttendStatus.
// Check the length with:
//
//	len(mockedManagerInterface.CreateAttendStatusCalls())
func (mock *ManagerInterfaceMock) CreateAttendStatusCalls() []struct {
	Ctx  context.Context
	Name string
	Key  string
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Key  string
	}
	mock.lockCreateAttendStatus.RLock()
	calls = mock.calls.CreateAttendStatus
	mock.lockCreateAttendStatus.RUnlock()
	return calls
}

// CreateAttendStatuses calls CreateAttendStatusesFunc.
func (mock *ManagerInterfaceMock) CreateAttendStatuses(ctx context.Context, ps []parameter.CreateAttendStatusParam) (int64, error) {
	if mock.CreateAttendStatusesFunc == nil {
		panic("ManagerInterfaceMock.CreateAttendStatusesFunc: method is nil but ManagerInterface.CreateAttendStatuses was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Ps  []parameter.CreateAttendStatusParam
	}{
		Ctx: ctx,
		Ps:  ps,
	}
	mock.lockCreateAttendStatuses.Lock()
	mock.calls.CreateAttendStatuses = append(mock.calls.CreateAttendStatuses, callInfo)
	mock.lockCreateAttendStatuses.Unlock()
	return mock.CreateAttendStatusesFunc(ctx, ps)
}

// CreateAttendStatusesCalls gets all the calls that were made to CreateAttendStatuses.
// Check the length with:
//
//	len(mockedManagerInterface.CreateAttendStatusesCalls())
func (mock *ManagerInterfaceMock) CreateAttendStatusesCalls() []struct {
	Ctx context.Context
	Ps  []parameter.CreateAttendStatusParam
} {
	var calls []struct {
		Ctx context.Context
		Ps  []parameter.CreateAttendStatusParam
	}
	mock.lockCreateAttendStatuses.RLock()
	calls = mock.calls.CreateAttendStatuses
	mock.lockCreateAttendStatuses.RUnlock()
	return calls
}

// CreateAttendanceType calls CreateAttendanceTypeFunc.
func (mock *ManagerInterfaceMock) CreateAttendanceType(ctx context.Context, name string, key string, color string) (entity.AttendanceType, error) {
	if mock.CreateAttendanceTypeFunc == nil {
		panic("ManagerInterfaceMock.CreateAttendanceTypeFunc: method is nil but ManagerInterface.CreateAttendanceType was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Name  string
		Key   string
		Color string
	}{
		Ctx:   ctx,
		Name:  name,
		Key:   key,
		Color: color,
	}
	mock.lockCreateAttendanceType.Lock()
	mock.calls.CreateAttendanceType = append(mock.calls.CreateAttendanceType, callInfo)
	mock.lockCreateAttendanceType.Unlock()
	return mock.CreateAttendanceTypeFunc(ctx, name, key, color)
}

// CreateAttendanceTypeCalls gets all the calls that were made to CreateAttendanceType.
// Check the length with:
//
//	len(mockedManagerInterface.CreateAttendanceTypeCalls())
func (mock *ManagerInterfaceMock) CreateAttendanceTypeCalls() []struct {
	Ctx   context.Context
	Name  string
	Key   string
	Color string
} {
	var calls []struct {
		Ctx   context.Context
		Name  string
		Key   string
		Color string
	}
	mock.lockCreateAttendanceType.RLock()
	calls = mock.calls.CreateAttendanceType
	mock.lockCreateAttendanceType.RUnlock()
	return calls
}

// CreateAttendanceTypes calls CreateAttendanceTypesFunc.
func (mock *ManagerInterfaceMock) CreateAttendanceTypes(ctx context.Context, ps []parameter.CreateAttendanceTypeParam) (int64, error) {
	if mock.CreateAttendanceTypesFunc == nil {
		panic("ManagerInterfaceMock.CreateAttendanceTypesFunc: method is nil but ManagerInterface.CreateAttendanceTypes was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Ps  []parameter.CreateAttendanceTypeParam
	}{
		Ctx: ctx,
		Ps:  ps,
	}
	mock.lockCreateAttendanceTypes.Lock()
	mock.calls.CreateAttendanceTypes = append(mock.calls.CreateAttendanceTypes, callInfo)
	mock.lockCreateAttendanceTypes.Unlock()
	return mock.CreateAttendanceTypesFunc(ctx, ps)
}

// CreateAttendanceTypesCalls gets all the calls that were made to CreateAttendanceTypes.
// Check the length with:
//
//	len(mockedManagerInterface.CreateAttendanceTypesCalls())
func (mock *ManagerInterfaceMock) CreateAttendanceTypesCalls() []struct {
	Ctx context.Context
	Ps  []parameter.CreateAttendanceTypeParam
} {
	var calls []struct {
		Ctx context.Context
		Ps  []parameter.CreateAttendanceTypeParam
	}
	mock.lockCreateAttendanceTypes.RLock()
	calls = mock.calls.CreateAttendanceTypes
	mock.lockCreateAttendanceTypes.RUnlock()
	return calls
}

// CreateEventType calls CreateEventTypeFunc.
func (mock *ManagerInterfaceMock) CreateEventType(ctx context.Context, name string, key string, color string) (entity.EventType, error) {
	if mock.CreateEventTypeFunc == nil {
		panic("ManagerInterfaceMock.CreateEventTypeFunc: method is nil but ManagerInterface.CreateEventType was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Name  string
		Key   string
		Color string
	}{
		Ctx:   ctx,
		Name:  name,
		Key:   key,
		Color: color,
	}
	mock.lockCreateEventType.Lock()
	mock.calls.CreateEventType = append(mock.calls.CreateEventType, callInfo)
	mock.lockCreateEventType.Unlock()
	return mock.CreateEventTypeFunc(ctx, name, key, color)
}

// CreateEventTypeCalls gets all the calls that were made to CreateEventType.
// Check the length with:
//
//	len(mockedManagerInterface.CreateEventTypeCalls())
func (mock *ManagerInterfaceMock) CreateEventTypeCalls() []struct {
	Ctx   context.Context
	Name  string
	Key   string
	Color string
} {
	var calls []struct {
		Ctx   context.Context
		Name  string
		Key   string
		Color string
	}
	mock.lockCreateEventType.RLock()
	calls = mock.calls.CreateEventType
	mock.lockCreateEventType.RUnlock()
	return calls
}

// CreateEventTypes calls CreateEventTypesFunc.
func (mock *ManagerInterfaceMock) CreateEventTypes(ctx context.Context, ps []parameter.CreateEventTypeParam) (int64, error) {
	if mock.CreateEventTypesFunc == nil {
		panic("ManagerInterfaceMock.CreateEventTypesFunc: method is nil but ManagerInterface.CreateEventTypes was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Ps  []parameter.CreateEventTypeParam
	}{
		Ctx: ctx,
		Ps:  ps,
	}
	mock.lockCreateEventTypes.Lock()
	mock.calls.CreateEventTypes = append(mock.calls.CreateEventTypes, callInfo)
	mock.lockCreateEventTypes.Unlock()
	return mock.CreateEventTypesFunc(ctx, ps)
}

// CreateEventTypesCalls gets all the calls that were made to CreateEventTypes.
// Check the length with:
//
//	len(mockedManagerInterface.CreateEventTypesCalls())
func (mock *ManagerInterfaceMock) CreateEventTypesCalls() []struct {
	Ctx context.Context
	Ps  []parameter.CreateEventTypeParam
} {
	var calls []struct {
		Ctx context.Context
		Ps  []parameter.CreateEventTypeParam
	}
	mock.lockCreateEventTypes.RLock()
	calls = mock.calls.CreateEventTypes
	mock.lockCreateEventTypes.RUnlock()
	return calls
}

// CreateMimeType calls CreateMimeTypeFunc.
func (mock *ManagerInterfaceMock) CreateMimeType(ctx context.Context, name string, key string, kind string) (entity.MimeType, error) {
	if mock.CreateMimeTypeFunc == nil {
		panic("ManagerInterfaceMock.CreateMimeTypeFunc: method is nil but ManagerInterface.CreateMimeType was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Key  string
		Kind string
	}{
		Ctx:  ctx,
		Name: name,
		Key:  key,
		Kind: kind,
	}
	mock.lockCreateMimeType.Lock()
	mock.calls.CreateMimeType = append(mock.calls.CreateMimeType, callInfo)
	mock.lockCreateMimeType.Unlock()
	return mock.CreateMimeTypeFunc(ctx, name, key, kind)
}

// CreateMimeTypeCalls gets all the calls that were made to CreateMimeType.
// Check the length with:
//
//	len(mockedManagerInterface.CreateMimeTypeCalls())
func (mock *ManagerInterfaceMock) CreateMimeTypeCalls() []struct {
	Ctx  context.Context
	Name string
	Key  string
	Kind string
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Key  string
		Kind string
	}
	mock.lockCreateMimeType.RLock()
	calls = mock.calls.CreateMimeType
	mock.lockCreateMimeType.RUnlock()
	return calls
}

// CreateMimeTypes calls CreateMimeTypesFunc.
func (mock *ManagerInterfaceMock) CreateMimeTypes(ctx context.Context, ps []parameter.CreateMimeTypeParam) (int64, error) {
	if mock.CreateMimeTypesFunc == nil {
		panic("ManagerInterfaceMock.CreateMimeTypesFunc: method is nil but ManagerInterface.CreateMimeTypes was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Ps  []parameter.CreateMimeTypeParam
	}{
		Ctx: ctx,
		Ps:  ps,
	}
	mock.lockCreateMimeTypes.Lock()
	mock.calls.CreateMimeTypes = append(mock.calls.CreateMimeTypes, callInfo)
	mock.lockCreateMimeTypes.Unlock()
	return mock.CreateMimeTypesFunc(ctx, ps)
}

// CreateMimeTypesCalls gets all the calls that were made to CreateMimeTypes.
// Check the length with:
//
//	len(mockedManagerInterface.CreateMimeTypesCalls())
func (mock *ManagerInterfaceMock) CreateMimeTypesCalls() []struct {
	Ctx context.Context
	Ps  []parameter.CreateMimeTypeParam
} {
	var calls []struct {
		Ctx context.Context
		Ps  []parameter.CreateMimeTypeParam
	}
	mock.lockCreateMimeTypes.RLock()
	calls = mock.calls.CreateMimeTypes
	mock.lockCreateMimeTypes.RUnlock()
	return calls
}

// CreatePermission calls CreatePermissionFunc.
func (mock *ManagerInterfaceMock) CreatePermission(ctx context.Context, name string, key string, description string, categoryID uuid.UUID) (entity.Permission, error) {
	if mock.CreatePermissionFunc == nil {
		panic("ManagerInterfaceMock.CreatePermissionFunc: method is nil but ManagerInterface.CreatePermission was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		Key         string
		Description string
		CategoryID  uuid.UUID
	}{
		Ctx:         ctx,
		Name:        name,
		Key:         key,
		Description: description,
		CategoryID:  categoryID,
	}
	mock.lockCreatePermission.Lock()
	mock.calls.CreatePermission = append(mock.calls.CreatePermission, callInfo)
	mock.lockCreatePermission.Unlock()
	return mock.CreatePermissionFunc(ctx, name, key, description, categoryID)
}

// CreatePermissionCalls gets all the calls that were made to CreatePermission.
// Check the length with:
//
//	len(mockedManagerInterface.CreatePermissionCalls())
func (mock *ManagerInterfaceMock) CreatePermissionCalls() []struct {
	Ctx         context.Context
	Name        string
	Key         string
	Description string
	CategoryID  uuid.UUID
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		Key         string
		Description string
		CategoryID  uuid.UUID
	}
	mock.lockCreatePermission.RLock()
	calls = mock.calls.CreatePermission
	mock.lockCreatePermission.RUnlock()
	return calls
}

// CreatePermissionCategories calls CreatePermissionCategoriesFunc.
func (mock *ManagerInterfaceMock) CreatePermissionCategories(ctx context.Context, ps []parameter.CreatePermissionCategoryParam) (int64, error) {
	if mock.CreatePermissionCategoriesFunc == nil {
		panic("ManagerInterfaceMock.CreatePermissionCategoriesFunc: method is nil but ManagerInterface.CreatePermissionCategories was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Ps  []parameter.CreatePermissionCategoryParam
	}{
		Ctx: ctx,
		Ps:  ps,
	}
	mock.lockCreatePermissionCategories.Lock()
	mock.calls.CreatePermissionCategories = append(mock.calls.CreatePermissionCategories, callInfo)
	mock.lockCreatePermissionCategories.Unlock()
	return mock.CreatePermissionCategoriesFunc(ctx, ps)
}

// CreatePermissionCategoriesCalls gets all the calls that were made to CreatePermissionCategories.
// Check the length with:
//
//	len(mockedManagerInterface.CreatePermissionCategoriesCalls())
func (mock *ManagerInterfaceMock) CreatePermissionCategoriesCalls() []struct {
	Ctx context.Context
	Ps  []parameter.CreatePermissionCategoryParam
} {
	var calls []struct {
		Ctx context.Context
		Ps  []parameter.CreatePermissionCategoryParam
	}
	mock.lockCreatePermissionCategories.RLock()
	calls = mock.calls.CreatePermissionCategories
	mock.lockCreatePermissionCategories.RUnlock()
	return calls
}

// CreatePermissionCategory calls CreatePermissionCategoryFunc.
func (mock *ManagerInterfaceMock) CreatePermissionCategory(ctx context.Context, name string, key string, description string) (entity.PermissionCategory, error) {
	if mock.CreatePermissionCategoryFunc == nil {
		panic("ManagerInterfaceMock.CreatePermissionCategoryFunc: method is nil but ManagerInterface.CreatePermissionCategory was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		Key         string
		Description string
	}{
		Ctx:         ctx,
		Name:        name,
		Key:         key,
		Description: description,
	}
	mock.lockCreatePermissionCategory.Lock()
	mock.calls.CreatePermissionCategory = append(mock.calls.CreatePermissionCategory, callInfo)
	mock.lockCreatePermissionCategory.Unlock()
	return mock.CreatePermissionCategoryFunc(ctx, name, key, description)
}

// CreatePermissionCategoryCalls gets all the calls that were made to CreatePermissionCategory.
// Check the length with:
//
//	len(mockedManagerInterface.CreatePermissionCategoryCalls())
func (mock *ManagerInterfaceMock) CreatePermissionCategoryCalls() []struct {
	Ctx         context.Context
	Name        string
	Key         string
	Description string
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		Key         string
		Description string
	}
	mock.lockCreatePermissionCategory.RLock()
	calls = mock.calls.CreatePermissionCategory
	mock.lockCreatePermissionCategory.RUnlock()
	return calls
}

// CreatePermissions calls CreatePermissionsFunc.
func (mock *ManagerInterfaceMock) CreatePermissions(ctx context.Context, ps []parameter.CreatePermissionParam) (int64, error) {
	if mock.CreatePermissionsFunc == nil {
		panic("ManagerInterfaceMock.CreatePermissionsFunc: method is nil but ManagerInterface.CreatePermissions was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Ps  []parameter.CreatePermissionParam
	}{
		Ctx: ctx,
		Ps:  ps,
	}
	mock.lockCreatePermissions.Lock()
	mock.calls.CreatePermissions = append(mock.calls.CreatePermissions, callInfo)
	mock.lockCreatePermissions.Unlock()
	return mock.CreatePermissionsFunc(ctx, ps)
}

// CreatePermissionsCalls gets all the calls that were made to CreatePermissions.
// Check the length with:
//
//	len(mockedManagerInterface.CreatePermissionsCalls())
func (mock *ManagerInterfaceMock) CreatePermissionsCalls() []struct {
	Ctx context.Context
	Ps  []parameter.CreatePermissionParam
} {
	var calls []struct {
		Ctx context.Context
		Ps  []parameter.CreatePermissionParam
	}
	mock.lockCreatePermissions.RLock()
	calls = mock.calls.CreatePermissions
	mock.lockCreatePermissions.RUnlock()
	return calls
}

// CreatePolicies calls CreatePoliciesFunc.
func (mock *ManagerInterfaceMock) CreatePolicies(ctx context.Context, ps []parameter.CreatePolicyParam) (int64, error) {
	if mock.CreatePoliciesFunc == nil {
		panic("ManagerInterfaceMock.CreatePoliciesFunc: method is nil but ManagerInterface.CreatePolicies was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Ps  []parameter.CreatePolicyParam
	}{
		Ctx: ctx,
		Ps:  ps,
	}
	mock.lockCreatePolicies.Lock()
	mock.calls.CreatePolicies = append(mock.calls.CreatePolicies, callInfo)
	mock.lockCreatePolicies.Unlock()
	return mock.CreatePoliciesFunc(ctx, ps)
}

// CreatePoliciesCalls gets all the calls that were made to CreatePolicies.
// Check the length with:
//
//	len(mockedManagerInterface.CreatePoliciesCalls())
func (mock *ManagerInterfaceMock) CreatePoliciesCalls() []struct {
	Ctx context.Context
	Ps  []parameter.CreatePolicyParam
} {
	var calls []struct {
		Ctx context.Context
		Ps  []parameter.CreatePolicyParam
	}
	mock.lockCreatePolicies.RLock()
	calls = mock.calls.CreatePolicies
	mock.lockCreatePolicies.RUnlock()
	return calls
}

// CreatePolicy calls CreatePolicyFunc.
func (mock *ManagerInterfaceMock) CreatePolicy(ctx context.Context, name string, key string, description string, categoryID uuid.UUID) (entity.Policy, error) {
	if mock.CreatePolicyFunc == nil {
		panic("ManagerInterfaceMock.CreatePolicyFunc: method is nil but ManagerInterface.CreatePolicy was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		Key         string
		Description string
		CategoryID  uuid.UUID
	}{
		Ctx:         ctx,
		Name:        name,
		Key:         key,
		Description: description,
		CategoryID:  categoryID,
	}
	mock.lockCreatePolicy.Lock()
	mock.calls.CreatePolicy = append(mock.calls.CreatePolicy, callInfo)
	mock.lockCreatePolicy.Unlock()
	return mock.CreatePolicyFunc(ctx, name, key, description, categoryID)
}

// CreatePolicyCalls gets all the calls that were made to CreatePolicy.
// Check the length with:
//
//	len(mockedManagerInterface.CreatePolicyCalls())
func (mock *ManagerInterfaceMock) CreatePolicyCalls() []struct {
	Ctx         context.Context
	Name        string
	Key         string
	Description string
	CategoryID  uuid.UUID
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		Key         string
		Description string
		CategoryID  uuid.UUID
	}
	mock.lockCreatePolicy.RLock()
	calls = mock.calls.CreatePolicy
	mock.lockCreatePolicy.RUnlock()
	return calls
}

// CreatePolicyCategories calls CreatePolicyCategoriesFunc.
func (mock *ManagerInterfaceMock) CreatePolicyCategories(ctx context.Context, ps []parameter.CreatePolicyCategoryParam) (int64, error) {
	if mock.CreatePolicyCategoriesFunc == nil {
		panic("ManagerInterfaceMock.CreatePolicyCategoriesFunc: method is nil but ManagerInterface.CreatePolicyCategories was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Ps  []parameter.CreatePolicyCategoryParam
	}{
		Ctx: ctx,
		Ps:  ps,
	}
	mock.lockCreatePolicyCategories.Lock()
	mock.calls.CreatePolicyCategories = append(mock.calls.CreatePolicyCategories, callInfo)
	mock.lockCreatePolicyCategories.Unlock()
	return mock.CreatePolicyCategoriesFunc(ctx, ps)
}

// CreatePolicyCategoriesCalls gets all the calls that were made to CreatePolicyCategories.
// Check the length with:
//
//	len(mockedManagerInterface.CreatePolicyCategoriesCalls())
func (mock *ManagerInterfaceMock) CreatePolicyCategoriesCalls() []struct {
	Ctx context.Context
	Ps  []parameter.CreatePolicyCategoryParam
} {
	var calls []struct {
		Ctx context.Context
		Ps  []parameter.CreatePolicyCategoryParam
	}
	mock.lockCreatePolicyCategories.RLock()
	calls = mock.calls.CreatePolicyCategories
	mock.lockCreatePolicyCategories.RUnlock()
	return calls
}

// CreatePolicyCategory calls CreatePolicyCategoryFunc.
func (mock *ManagerInterfaceMock) CreatePolicyCategory(ctx context.Context, name string, key string, description string) (entity.PolicyCategory, error) {
	if mock.CreatePolicyCategoryFunc == nil {
		panic("ManagerInterfaceMock.CreatePolicyCategoryFunc: method is nil but ManagerInterface.CreatePolicyCategory was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		Key         string
		Description string
	}{
		Ctx:         ctx,
		Name:        name,
		Key:         key,
		Description: description,
	}
	mock.lockCreatePolicyCategory.Lock()
	mock.calls.CreatePolicyCategory = append(mock.calls.CreatePolicyCategory, callInfo)
	mock.lockCreatePolicyCategory.Unlock()
	return mock.CreatePolicyCategoryFunc(ctx, name, key, description)
}

// CreatePolicyCategoryCalls gets all the calls that were made to CreatePolicyCategory.
// Check the length with:
//
//	len(mockedManagerInterface.CreatePolicyCategoryCalls())
func (mock *ManagerInterfaceMock) CreatePolicyCategoryCalls() []struct {
	Ctx         context.Context
	Name        string
	Key         string
	Description string
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		Key         string
		Description string
	}
	mock.lockCreatePolicyCategory.RLock()
	calls = mock.calls.CreatePolicyCategory
	mock.lockCreatePolicyCategory.RUnlock()
	return calls
}

// CreateRecordType calls CreateRecordTypeFunc.
func (mock *ManagerInterfaceMock) CreateRecordType(ctx context.Context, name string, key string) (entity.RecordType, error) {
	if mock.CreateRecordTypeFunc == nil {
		panic("ManagerInterfaceMock.CreateRecordTypeFunc: method is nil but ManagerInterface.CreateRecordType was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Key  string
	}{
		Ctx:  ctx,
		Name: name,
		Key:  key,
	}
	mock.lockCreateRecordType.Lock()
	mock.calls.CreateRecordType = append(mock.calls.CreateRecordType, callInfo)
	mock.lockCreateRecordType.Unlock()
	return mock.CreateRecordTypeFunc(ctx, name, key)
}

// CreateRecordTypeCalls gets all the calls that were made to CreateRecordType.
// Check the length with:
//
//	len(mockedManagerInterface.CreateRecordTypeCalls())
func (mock *ManagerInterfaceMock) CreateRecordTypeCalls() []struct {
	Ctx  context.Context
	Name string
	Key  string
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Key  string
	}
	mock.lockCreateRecordType.RLock()
	calls = mock.calls.CreateRecordType
	mock.lockCreateRecordType.RUnlock()
	return calls
}

// CreateRecordTypes calls CreateRecordTypesFunc.
func (mock *ManagerInterfaceMock) CreateRecordTypes(ctx context.Context, ps []parameter.CreateRecordTypeParam) (int64, error) {
	if mock.CreateRecordTypesFunc == nil {
		panic("ManagerInterfaceMock.CreateRecordTypesFunc: method is nil but ManagerInterface.CreateRecordTypes was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Ps  []parameter.CreateRecordTypeParam
	}{
		Ctx: ctx,
		Ps:  ps,
	}
	mock.lockCreateRecordTypes.Lock()
	mock.calls.CreateRecordTypes = append(mock.calls.CreateRecordTypes, callInfo)
	mock.lockCreateRecordTypes.Unlock()
	return mock.CreateRecordTypesFunc(ctx, ps)
}

// CreateRecordTypesCalls gets all the calls that were made to CreateRecordTypes.
// Check the length with:
//
//	len(mockedManagerInterface.CreateRecordTypesCalls())
func (mock *ManagerInterfaceMock) CreateRecordTypesCalls() []struct {
	Ctx context.Context
	Ps  []parameter.CreateRecordTypeParam
} {
	var calls []struct {
		Ctx context.Context
		Ps  []parameter.CreateRecordTypeParam
	}
	mock.lockCreateRecordTypes.RLock()
	calls = mock.calls.CreateRecordTypes
	mock.lockCreateRecordTypes.RUnlock()
	return calls
}

// CreateRole calls CreateRoleFunc.
func (mock *ManagerInterfaceMock) CreateRole(ctx context.Context, name string, description string) (entity.Role, error) {
	if mock.CreateRoleFunc == nil {
		panic("ManagerInterfaceMock.CreateRoleFunc: method is nil but ManagerInterface.CreateRole was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		Description string
	}{
		Ctx:         ctx,
		Name:        name,
		Description: description,
	}
	mock.lockCreateRole.Lock()
	mock.calls.CreateRole = append(mock.calls.CreateRole, callInfo)
	mock.lockCreateRole.Unlock()
	return mock.CreateRoleFunc(ctx, name, description)
}

// CreateRoleCalls gets all the calls that were made to CreateRole.
// Check the length with:
//
//	len(mockedManagerInterface.CreateRoleCalls())
func (mock *ManagerInterfaceMock) CreateRoleCalls() []struct {
	Ctx         context.Context
	Name        string
	Description string
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		Description string
	}
	mock.lockCreateRole.RLock()
	calls = mock.calls.CreateRole
	mock.lockCreateRole.RUnlock()
	return calls
}

// CreateRoles calls CreateRolesFunc.
func (mock *ManagerInterfaceMock) CreateRoles(ctx context.Context, ps []parameter.CreateRoleParam) (int64, error) {
	if mock.CreateRolesFunc == nil {
		panic("ManagerInterfaceMock.CreateRolesFunc: method is nil but ManagerInterface.CreateRoles was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Ps  []parameter.CreateRoleParam
	}{
		Ctx: ctx,
		Ps:  ps,
	}
	mock.lockCreateRoles.Lock()
	mock.calls.CreateRoles = append(mock.calls.CreateRoles, callInfo)
	mock.lockCreateRoles.Unlock()
	return mock.CreateRolesFunc(ctx, ps)
}

// CreateRolesCalls gets all the calls that were made to CreateRoles.
// Check the length with:
//
//	len(mockedManagerInterface.CreateRolesCalls())
func (mock *ManagerInterfaceMock) CreateRolesCalls() []struct {
	Ctx context.Context
	Ps  []parameter.CreateRoleParam
} {
	var calls []struct {
		Ctx context.Context
		Ps  []parameter.CreateRoleParam
	}
	mock.lockCreateRoles.RLock()
	calls = mock.calls.CreateRoles
	mock.lockCreateRoles.RUnlock()
	return calls
}

// DeleteAttendStatus calls DeleteAttendStatusFunc.
func (mock *ManagerInterfaceMock) DeleteAttendStatus(ctx context.Context, id uuid.UUID) (int64, error) {
	if mock.DeleteAttendStatusFunc == nil {
		panic("ManagerInterfaceMock.DeleteAttendStatusFunc: method is nil but ManagerInterface.DeleteAttendStatus was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeleteAttendStatus.Lock()
	mock.calls.DeleteAttendStatus = append(mock.calls.DeleteAttendStatus, callInfo)
	mock.lockDeleteAttendStatus.Unlock()
	return mock.DeleteAttendStatusFunc(ctx, id)
}

// DeleteAttendStatusCalls gets all the calls that were made to DeleteAttendStatus.
// Check the length with:
//
//	len(mockedManagerInterface.DeleteAttendStatusCalls())
func (mock *ManagerInterfaceMock) DeleteAttendStatusCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockDeleteAttendStatus.RLock()
	calls = mock.calls.DeleteAttendStatus
	mock.lockDeleteAttendStatus.RUnlock()
	return calls
}

// DeleteAttendanceType calls DeleteAttendanceTypeFunc.
func (mock *ManagerInterfaceMock) DeleteAttendanceType(ctx context.Context, id uuid.UUID) (int64, error) {
	if mock.DeleteAttendanceTypeFunc == nil {
		panic("ManagerInterfaceMock.DeleteAttendanceTypeFunc: method is nil but ManagerInterface.DeleteAttendanceType was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeleteAttendanceType.Lock()
	mock.calls.DeleteAttendanceType = append(mock.calls.DeleteAttendanceType, callInfo)
	mock.lockDeleteAttendanceType.Unlock()
	return mock.DeleteAttendanceTypeFunc(ctx, id)
}

// DeleteAttendanceTypeCalls gets all the calls that were made to DeleteAttendanceType.
// Check the length with:
//
//	len(mockedManagerInterface.DeleteAttendanceTypeCalls())
func (mock *ManagerInterfaceMock) DeleteAttendanceTypeCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockDeleteAttendanceType.RLock()
	calls = mock.calls.DeleteAttendanceType
	mock.lockDeleteAttendanceType.RUnlock()
	return calls
}

// DeleteEventType calls DeleteEventTypeFunc.
func (mock *ManagerInterfaceMock) DeleteEventType(ctx context.Context, id uuid.UUID) (int64, error) {
	if mock.DeleteEventTypeFunc == nil {
		panic("ManagerInterfaceMock.DeleteEventTypeFunc: method is nil but ManagerInterface.DeleteEventType was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeleteEventType.Lock()
	mock.calls.DeleteEventType = append(mock.calls.DeleteEventType, callInfo)
	mock.lockDeleteEventType.Unlock()
	return mock.DeleteEventTypeFunc(ctx, id)
}

// DeleteEventTypeCalls gets all the calls that were made to DeleteEventType.
// Check the length with:
//
//	len(mockedManagerInterface.DeleteEventTypeCalls())
func (mock *ManagerInterfaceMock) DeleteEventTypeCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockDeleteEventType.RLock()
	calls = mock.calls.DeleteEventType
	mock.lockDeleteEventType.RUnlock()
	return calls
}

// DeleteMimeType calls DeleteMimeTypeFunc.
func (mock *ManagerInterfaceMock) DeleteMimeType(ctx context.Context, id uuid.UUID) (int64, error) {
	if mock.DeleteMimeTypeFunc == nil {
		panic("ManagerInterfaceMock.DeleteMimeTypeFunc: method is nil but ManagerInterface.DeleteMimeType was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeleteMimeType.Lock()
	mock.calls.DeleteMimeType = append(mock.calls.DeleteMimeType, callInfo)
	mock.lockDeleteMimeType.Unlock()
	return mock.DeleteMimeTypeFunc(ctx, id)
}

// DeleteMimeTypeCalls gets all the calls that were made to DeleteMimeType.
// Check the length with:
//
//	len(mockedManagerInterface.DeleteMimeTypeCalls())
func (mock *ManagerInterfaceMock) DeleteMimeTypeCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockDeleteMimeType.RLock()
	calls = mock.calls.DeleteMimeType
	mock.lockDeleteMimeType.RUnlock()
	return calls
}

// DeletePermission calls DeletePermissionFunc.
func (mock *ManagerInterfaceMock) DeletePermission(ctx context.Context, id uuid.UUID) (int64, error) {
	if mock.DeletePermissionFunc == nil {
		panic("ManagerInterfaceMock.DeletePermissionFunc: method is nil but ManagerInterface.DeletePermission was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeletePermission.Lock()
	mock.calls.DeletePermission = append(mock.calls.DeletePermission, callInfo)
	mock.lockDeletePermission.Unlock()
	return mock.DeletePermissionFunc(ctx, id)
}

// DeletePermissionCalls gets all the calls that were made to DeletePermission.
// Check the length with:
//
//	len(mockedManagerInterface.DeletePermissionCalls())
func (mock *ManagerInterfaceMock) DeletePermissionCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockDeletePermission.RLock()
	calls = mock.calls.DeletePermission
	mock.lockDeletePermission.RUnlock()
	return calls
}

// DeletePermissionCategory calls DeletePermissionCategoryFunc.
func (mock *ManagerInterfaceMock) DeletePermissionCategory(ctx context.Context, id uuid.UUID) (int64, error) {
	if mock.DeletePermissionCategoryFunc == nil {
		panic("ManagerInterfaceMock.DeletePermissionCategoryFunc: method is nil but ManagerInterface.DeletePermissionCategory was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeletePermissionCategory.Lock()
	mock.calls.DeletePermissionCategory = append(mock.calls.DeletePermissionCategory, callInfo)
	mock.lockDeletePermissionCategory.Unlock()
	return mock.DeletePermissionCategoryFunc(ctx, id)
}

// DeletePermissionCategoryCalls gets all the calls that were made to DeletePermissionCategory.
// Check the length with:
//
//	len(mockedManagerInterface.DeletePermissionCategoryCalls())
func (mock *ManagerInterfaceMock) DeletePermissionCategoryCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockDeletePermissionCategory.RLock()
	calls = mock.calls.DeletePermissionCategory
	mock.lockDeletePermissionCategory.RUnlock()
	return calls
}

// DeletePolicy calls DeletePolicyFunc.
func (mock *ManagerInterfaceMock) DeletePolicy(ctx context.Context, id uuid.UUID) (int64, error) {
	if mock.DeletePolicyFunc == nil {
		panic("ManagerInterfaceMock.DeletePolicyFunc: method is nil but ManagerInterface.DeletePolicy was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeletePolicy.Lock()
	mock.calls.DeletePolicy = append(mock.calls.DeletePolicy, callInfo)
	mock.lockDeletePolicy.Unlock()
	return mock.DeletePolicyFunc(ctx, id)
}

// DeletePolicyCalls gets all the calls that were made to DeletePolicy.
// Check the length with:
//
//	len(mockedManagerInterface.DeletePolicyCalls())
func (mock *ManagerInterfaceMock) DeletePolicyCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockDeletePolicy.RLock()
	calls = mock.calls.DeletePolicy
	mock.lockDeletePolicy.RUnlock()
	return calls
}

// DeletePolicyCategory calls DeletePolicyCategoryFunc.
func (mock *ManagerInterfaceMock) DeletePolicyCategory(ctx context.Context, id uuid.UUID) (int64, error) {
	if mock.DeletePolicyCategoryFunc == nil {
		panic("ManagerInterfaceMock.DeletePolicyCategoryFunc: method is nil but ManagerInterface.DeletePolicyCategory was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeletePolicyCategory.Lock()
	mock.calls.DeletePolicyCategory = append(mock.calls.DeletePolicyCategory, callInfo)
	mock.lockDeletePolicyCategory.Unlock()
	return mock.DeletePolicyCategoryFunc(ctx, id)
}

// DeletePolicyCategoryCalls gets all the calls that were made to DeletePolicyCategory.
// Check the length with:
//
//	len(mockedManagerInterface.DeletePolicyCategoryCalls())
func (mock *ManagerInterfaceMock) DeletePolicyCategoryCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockDeletePolicyCategory.RLock()
	calls = mock.calls.DeletePolicyCategory
	mock.lockDeletePolicyCategory.RUnlock()
	return calls
}

// DeleteRecordType calls DeleteRecordTypeFunc.
func (mock *ManagerInterfaceMock) DeleteRecordType(ctx context.Context, id uuid.UUID) (int64, error) {
	if mock.DeleteRecordTypeFunc == nil {
		panic("ManagerInterfaceMock.DeleteRecordTypeFunc: method is nil but ManagerInterface.DeleteRecordType was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeleteRecordType.Lock()
	mock.calls.DeleteRecordType = append(mock.calls.DeleteRecordType, callInfo)
	mock.lockDeleteRecordType.Unlock()
	return mock.DeleteRecordTypeFunc(ctx, id)
}

// DeleteRecordTypeCalls gets all the calls that were made to DeleteRecordType.
// Check the length with:
//
//	len(mockedManagerInterface.DeleteRecordTypeCalls())
func (mock *ManagerInterfaceMock) DeleteRecordTypeCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockDeleteRecordType.RLock()
	calls = mock.calls.DeleteRecordType
	mock.lockDeleteRecordType.RUnlock()
	return calls
}

// DeleteRole calls DeleteRoleFunc.
func (mock *ManagerInterfaceMock) DeleteRole(ctx context.Context, id uuid.UUID) (int64, error) {
	if mock.DeleteRoleFunc == nil {
		panic("ManagerInterfaceMock.DeleteRoleFunc: method is nil but ManagerInterface.DeleteRole was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeleteRole.Lock()
	mock.calls.DeleteRole = append(mock.calls.DeleteRole, callInfo)
	mock.lockDeleteRole.Unlock()
	return mock.DeleteRoleFunc(ctx, id)
}

// DeleteRoleCalls gets all the calls that were made to DeleteRole.
// Check the length with:
//
//	len(mockedManagerInterface.DeleteRoleCalls())
func (mock *ManagerInterfaceMock) DeleteRoleCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockDeleteRole.RLock()
	calls = mock.calls.DeleteRole
	mock.lockDeleteRole.RUnlock()
	return calls
}

// DisassociatePolicyOnRole calls DisassociatePolicyOnRoleFunc.
func (mock *ManagerInterfaceMock) DisassociatePolicyOnRole(ctx context.Context, roleID uuid.UUID) (int64, error) {
	if mock.DisassociatePolicyOnRoleFunc == nil {
		panic("ManagerInterfaceMock.DisassociatePolicyOnRoleFunc: method is nil but ManagerInterface.DisassociatePolicyOnRole was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		RoleID uuid.UUID
	}{
		Ctx:    ctx,
		RoleID: roleID,
	}
	mock.lockDisassociatePolicyOnRole.Lock()
	mock.calls.DisassociatePolicyOnRole = append(mock.calls.DisassociatePolicyOnRole, callInfo)
	mock.lockDisassociatePolicyOnRole.Unlock()
	return mock.DisassociatePolicyOnRoleFunc(ctx, roleID)
}

// DisassociatePolicyOnRoleCalls gets all the calls that were made to DisassociatePolicyOnRole.
// Check the length with:
//
//	len(mockedManagerInterface.DisassociatePolicyOnRoleCalls())
func (mock *ManagerInterfaceMock) DisassociatePolicyOnRoleCalls() []struct {
	Ctx    context.Context
	RoleID uuid.UUID
} {
	var calls []struct {
		Ctx    context.Context
		RoleID uuid.UUID
	}
	mock.lockDisassociatePolicyOnRole.RLock()
	calls = mock.calls.DisassociatePolicyOnRole
	mock.lockDisassociatePolicyOnRole.RUnlock()
	return calls
}

// DisassociatePolicyOnRoles calls DisassociatePolicyOnRolesFunc.
func (mock *ManagerInterfaceMock) DisassociatePolicyOnRoles(ctx context.Context, roleIDs []uuid.UUID) (int64, error) {
	if mock.DisassociatePolicyOnRolesFunc == nil {
		panic("ManagerInterfaceMock.DisassociatePolicyOnRolesFunc: method is nil but ManagerInterface.DisassociatePolicyOnRoles was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		RoleIDs []uuid.UUID
	}{
		Ctx:     ctx,
		RoleIDs: roleIDs,
	}
	mock.lockDisassociatePolicyOnRoles.Lock()
	mock.calls.DisassociatePolicyOnRoles = append(mock.calls.DisassociatePolicyOnRoles, callInfo)
	mock.lockDisassociatePolicyOnRoles.Unlock()
	return mock.DisassociatePolicyOnRolesFunc(ctx, roleIDs)
}

// DisassociatePolicyOnRolesCalls gets all the calls that were made to DisassociatePolicyOnRoles.
// Check the length with:
//
//	len(mockedManagerInterface.DisassociatePolicyOnRolesCalls())
func (mock *ManagerInterfaceMock) DisassociatePolicyOnRolesCalls() []struct {
	Ctx     context.Context
	RoleIDs []uuid.UUID
} {
	var calls []struct {
		Ctx     context.Context
		RoleIDs []uuid.UUID
	}
	mock.lockDisassociatePolicyOnRoles.RLock()
	calls = mock.calls.DisassociatePolicyOnRoles
	mock.lockDisassociatePolicyOnRoles.RUnlock()
	return calls
}

// DisassociateRole calls DisassociateRoleFunc.
func (mock *ManagerInterfaceMock) DisassociateRole(ctx context.Context, roleID uuid.UUID, policyID uuid.UUID) (int64, error) {
	if mock.DisassociateRoleFunc == nil {
		panic("ManagerInterfaceMock.DisassociateRoleFunc: method is nil but ManagerInterface.DisassociateRole was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		RoleID   uuid.UUID
		PolicyID uuid.UUID
	}{
		Ctx:      ctx,
		RoleID:   roleID,
		PolicyID: policyID,
	}
	mock.lockDisassociateRole.Lock()
	mock.calls.DisassociateRole = append(mock.calls.DisassociateRole, callInfo)
	mock.lockDisassociateRole.Unlock()
	return mock.DisassociateRoleFunc(ctx, roleID, policyID)
}

// DisassociateRoleCalls gets all the calls that were made to DisassociateRole.
// Check the length with:
//
//	len(mockedManagerInterface.DisassociateRoleCalls())
func (mock *ManagerInterfaceMock) DisassociateRoleCalls() []struct {
	Ctx      context.Context
	RoleID   uuid.UUID
	PolicyID uuid.UUID
} {
	var calls []struct {
		Ctx      context.Context
		RoleID   uuid.UUID
		PolicyID uuid.UUID
	}
	mock.lockDisassociateRole.RLock()
	calls = mock.calls.DisassociateRole
	mock.lockDisassociateRole.RUnlock()
	return calls
}

// DisassociateRoleOnPolicies calls DisassociateRoleOnPoliciesFunc.
func (mock *ManagerInterfaceMock) DisassociateRoleOnPolicies(ctx context.Context, policyIDs []uuid.UUID) (int64, error) {
	if mock.DisassociateRoleOnPoliciesFunc == nil {
		panic("ManagerInterfaceMock.DisassociateRoleOnPoliciesFunc: method is nil but ManagerInterface.DisassociateRoleOnPolicies was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		PolicyIDs []uuid.UUID
	}{
		Ctx:       ctx,
		PolicyIDs: policyIDs,
	}
	mock.lockDisassociateRoleOnPolicies.Lock()
	mock.calls.DisassociateRoleOnPolicies = append(mock.calls.DisassociateRoleOnPolicies, callInfo)
	mock.lockDisassociateRoleOnPolicies.Unlock()
	return mock.DisassociateRoleOnPoliciesFunc(ctx, policyIDs)
}

// DisassociateRoleOnPoliciesCalls gets all the calls that were made to DisassociateRoleOnPolicies.
// Check the length with:
//
//	len(mockedManagerInterface.DisassociateRoleOnPoliciesCalls())
func (mock *ManagerInterfaceMock) DisassociateRoleOnPoliciesCalls() []struct {
	Ctx       context.Context
	PolicyIDs []uuid.UUID
} {
	var calls []struct {
		Ctx       context.Context
		PolicyIDs []uuid.UUID
	}
	mock.lockDisassociateRoleOnPolicies.RLock()
	calls = mock.calls.DisassociateRoleOnPolicies
	mock.lockDisassociateRoleOnPolicies.RUnlock()
	return calls
}

// DisassociateRoleOnPolicy calls DisassociateRoleOnPolicyFunc.
func (mock *ManagerInterfaceMock) DisassociateRoleOnPolicy(ctx context.Context, policyID uuid.UUID) (int64, error) {
	if mock.DisassociateRoleOnPolicyFunc == nil {
		panic("ManagerInterfaceMock.DisassociateRoleOnPolicyFunc: method is nil but ManagerInterface.DisassociateRoleOnPolicy was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		PolicyID uuid.UUID
	}{
		Ctx:      ctx,
		PolicyID: policyID,
	}
	mock.lockDisassociateRoleOnPolicy.Lock()
	mock.calls.DisassociateRoleOnPolicy = append(mock.calls.DisassociateRoleOnPolicy, callInfo)
	mock.lockDisassociateRoleOnPolicy.Unlock()
	return mock.DisassociateRoleOnPolicyFunc(ctx, policyID)
}

// DisassociateRoleOnPolicyCalls gets all the calls that were made to DisassociateRoleOnPolicy.
// Check the length with:
//
//	len(mockedManagerInterface.DisassociateRoleOnPolicyCalls())
func (mock *ManagerInterfaceMock) DisassociateRoleOnPolicyCalls() []struct {
	Ctx      context.Context
	PolicyID uuid.UUID
} {
	var calls []struct {
		Ctx      context.Context
		PolicyID uuid.UUID
	}
	mock.lockDisassociateRoleOnPolicy.RLock()
	calls = mock.calls.DisassociateRoleOnPolicy
	mock.lockDisassociateRoleOnPolicy.RUnlock()
	return calls
}

// FindAttendStatusByID calls FindAttendStatusByIDFunc.
func (mock *ManagerInterfaceMock) FindAttendStatusByID(ctx context.Context, id uuid.UUID) (entity.AttendStatus, error) {
	if mock.FindAttendStatusByIDFunc == nil {
		panic("ManagerInterfaceMock.FindAttendStatusByIDFunc: method is nil but ManagerInterface.FindAttendStatusByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockFindAttendStatusByID.Lock()
	mock.calls.FindAttendStatusByID = append(mock.calls.FindAttendStatusByID, callInfo)
	mock.lockFindAttendStatusByID.Unlock()
	return mock.FindAttendStatusByIDFunc(ctx, id)
}

// FindAttendStatusByIDCalls gets all the calls that were made to FindAttendStatusByID.
// Check the length with:
//
//	len(mockedManagerInterface.FindAttendStatusByIDCalls())
func (mock *ManagerInterfaceMock) FindAttendStatusByIDCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockFindAttendStatusByID.RLock()
	calls = mock.calls.FindAttendStatusByID
	mock.lockFindAttendStatusByID.RUnlock()
	return calls
}

// FindAttendStatusByKey calls FindAttendStatusByKeyFunc.
func (mock *ManagerInterfaceMock) FindAttendStatusByKey(ctx context.Context, key string) (entity.AttendStatus, error) {
	if mock.FindAttendStatusByKeyFunc == nil {
		panic("ManagerInterfaceMock.FindAttendStatusByKeyFunc: method is nil but ManagerInterface.FindAttendStatusByKey was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockFindAttendStatusByKey.Lock()
	mock.calls.FindAttendStatusByKey = append(mock.calls.FindAttendStatusByKey, callInfo)
	mock.lockFindAttendStatusByKey.Unlock()
	return mock.FindAttendStatusByKeyFunc(ctx, key)
}

// FindAttendStatusByKeyCalls gets all the calls that were made to FindAttendStatusByKey.
// Check the length with:
//
//	len(mockedManagerInterface.FindAttendStatusByKeyCalls())
func (mock *ManagerInterfaceMock) FindAttendStatusByKeyCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockFindAttendStatusByKey.RLock()
	calls = mock.calls.FindAttendStatusByKey
	mock.lockFindAttendStatusByKey.RUnlock()
	return calls
}

// FindAttendanceTypeByID calls FindAttendanceTypeByIDFunc.
func (mock *ManagerInterfaceMock) FindAttendanceTypeByID(ctx context.Context, id uuid.UUID) (entity.AttendanceType, error) {
	if mock.FindAttendanceTypeByIDFunc == nil {
		panic("ManagerInterfaceMock.FindAttendanceTypeByIDFunc: method is nil but ManagerInterface.FindAttendanceTypeByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockFindAttendanceTypeByID.Lock()
	mock.calls.FindAttendanceTypeByID = append(mock.calls.FindAttendanceTypeByID, callInfo)
	mock.lockFindAttendanceTypeByID.Unlock()
	return mock.FindAttendanceTypeByIDFunc(ctx, id)
}

// FindAttendanceTypeByIDCalls gets all the calls that were made to FindAttendanceTypeByID.
// Check the length with:
//
//	len(mockedManagerInterface.FindAttendanceTypeByIDCalls())
func (mock *ManagerInterfaceMock) FindAttendanceTypeByIDCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockFindAttendanceTypeByID.RLock()
	calls = mock.calls.FindAttendanceTypeByID
	mock.lockFindAttendanceTypeByID.RUnlock()
	return calls
}

// FindAttendanceTypeByKey calls FindAttendanceTypeByKeyFunc.
func (mock *ManagerInterfaceMock) FindAttendanceTypeByKey(ctx context.Context, key string) (entity.AttendanceType, error) {
	if mock.FindAttendanceTypeByKeyFunc == nil {
		panic("ManagerInterfaceMock.FindAttendanceTypeByKeyFunc: method is nil but ManagerInterface.FindAttendanceTypeByKey was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockFindAttendanceTypeByKey.Lock()
	mock.calls.FindAttendanceTypeByKey = append(mock.calls.FindAttendanceTypeByKey, callInfo)
	mock.lockFindAttendanceTypeByKey.Unlock()
	return mock.FindAttendanceTypeByKeyFunc(ctx, key)
}

// FindAttendanceTypeByKeyCalls gets all the calls that were made to FindAttendanceTypeByKey.
// Check the length with:
//
//	len(mockedManagerInterface.FindAttendanceTypeByKeyCalls())
func (mock *ManagerInterfaceMock) FindAttendanceTypeByKeyCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockFindAttendanceTypeByKey.RLock()
	calls = mock.calls.FindAttendanceTypeByKey
	mock.lockFindAttendanceTypeByKey.RUnlock()
	return calls
}

// FindEventTypeByID calls FindEventTypeByIDFunc.
func (mock *ManagerInterfaceMock) FindEventTypeByID(ctx context.Context, id uuid.UUID) (entity.EventType, error) {
	if mock.FindEventTypeByIDFunc == nil {
		panic("ManagerInterfaceMock.FindEventTypeByIDFunc: method is nil but ManagerInterface.FindEventTypeByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockFindEventTypeByID.Lock()
	mock.calls.FindEventTypeByID = append(mock.calls.FindEventTypeByID, callInfo)
	mock.lockFindEventTypeByID.Unlock()
	return mock.FindEventTypeByIDFunc(ctx, id)
}

// FindEventTypeByIDCalls gets all the calls that were made to FindEventTypeByID.
// Check the length with:
//
//	len(mockedManagerInterface.FindEventTypeByIDCalls())
func (mock *ManagerInterfaceMock) FindEventTypeByIDCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockFindEventTypeByID.RLock()
	calls = mock.calls.FindEventTypeByID
	mock.lockFindEventTypeByID.RUnlock()
	return calls
}

// FindEventTypeByKey calls FindEventTypeByKeyFunc.
func (mock *ManagerInterfaceMock) FindEventTypeByKey(ctx context.Context, key string) (entity.EventType, error) {
	if mock.FindEventTypeByKeyFunc == nil {
		panic("ManagerInterfaceMock.FindEventTypeByKeyFunc: method is nil but ManagerInterface.FindEventTypeByKey was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockFindEventTypeByKey.Lock()
	mock.calls.FindEventTypeByKey = append(mock.calls.FindEventTypeByKey, callInfo)
	mock.lockFindEventTypeByKey.Unlock()
	return mock.FindEventTypeByKeyFunc(ctx, key)
}

// FindEventTypeByKeyCalls gets all the calls that were made to FindEventTypeByKey.
// Check the length with:
//
//	len(mockedManagerInterface.FindEventTypeByKeyCalls())
func (mock *ManagerInterfaceMock) FindEventTypeByKeyCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockFindEventTypeByKey.RLock()
	calls = mock.calls.FindEventTypeByKey
	mock.lockFindEventTypeByKey.RUnlock()
	return calls
}

// FindMimeTypeByID calls FindMimeTypeByIDFunc.
func (mock *ManagerInterfaceMock) FindMimeTypeByID(ctx context.Context, id uuid.UUID) (entity.MimeType, error) {
	if mock.FindMimeTypeByIDFunc == nil {
		panic("ManagerInterfaceMock.FindMimeTypeByIDFunc: method is nil but ManagerInterface.FindMimeTypeByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockFindMimeTypeByID.Lock()
	mock.calls.FindMimeTypeByID = append(mock.calls.FindMimeTypeByID, callInfo)
	mock.lockFindMimeTypeByID.Unlock()
	return mock.FindMimeTypeByIDFunc(ctx, id)
}

// FindMimeTypeByIDCalls gets all the calls that were made to FindMimeTypeByID.
// Check the length with:
//
//	len(mockedManagerInterface.FindMimeTypeByIDCalls())
func (mock *ManagerInterfaceMock) FindMimeTypeByIDCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockFindMimeTypeByID.RLock()
	calls = mock.calls.FindMimeTypeByID
	mock.lockFindMimeTypeByID.RUnlock()
	return calls
}

// FindMimeTypeByKey calls FindMimeTypeByKeyFunc.
func (mock *ManagerInterfaceMock) FindMimeTypeByKey(ctx context.Context, key string) (entity.MimeType, error) {
	if mock.FindMimeTypeByKeyFunc == nil {
		panic("ManagerInterfaceMock.FindMimeTypeByKeyFunc: method is nil but ManagerInterface.FindMimeTypeByKey was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockFindMimeTypeByKey.Lock()
	mock.calls.FindMimeTypeByKey = append(mock.calls.FindMimeTypeByKey, callInfo)
	mock.lockFindMimeTypeByKey.Unlock()
	return mock.FindMimeTypeByKeyFunc(ctx, key)
}

// FindMimeTypeByKeyCalls gets all the calls that were made to FindMimeTypeByKey.
// Check the length with:
//
//	len(mockedManagerInterface.FindMimeTypeByKeyCalls())
func (mock *ManagerInterfaceMock) FindMimeTypeByKeyCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockFindMimeTypeByKey.RLock()
	calls = mock.calls.FindMimeTypeByKey
	mock.lockFindMimeTypeByKey.RUnlock()
	return calls
}

// FindPermissionByID calls FindPermissionByIDFunc.
func (mock *ManagerInterfaceMock) FindPermissionByID(ctx context.Context, id uuid.UUID) (entity.Permission, error) {
	if mock.FindPermissionByIDFunc == nil {
		panic("ManagerInterfaceMock.FindPermissionByIDFunc: method is nil but ManagerInterface.FindPermissionByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockFindPermissionByID.Lock()
	mock.calls.FindPermissionByID = append(mock.calls.FindPermissionByID, callInfo)
	mock.lockFindPermissionByID.Unlock()
	return mock.FindPermissionByIDFunc(ctx, id)
}

// FindPermissionByIDCalls gets all the calls that were made to FindPermissionByID.
// Check the length with:
//
//	len(mockedManagerInterface.FindPermissionByIDCalls())
func (mock *ManagerInterfaceMock) FindPermissionByIDCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockFindPermissionByID.RLock()
	calls = mock.calls.FindPermissionByID
	mock.lockFindPermissionByID.RUnlock()
	return calls
}

// FindPermissionByIDWithCategory calls FindPermissionByIDWithCategoryFunc.
func (mock *ManagerInterfaceMock) FindPermissionByIDWithCategory(ctx context.Context, id uuid.UUID) (entity.PermissionWithCategory, error) {
	if mock.FindPermissionByIDWithCategoryFunc == nil {
		panic("ManagerInterfaceMock.FindPermissionByIDWithCategoryFunc: method is nil but ManagerInterface.FindPermissionByIDWithCategory was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockFindPermissionByIDWithCategory.Lock()
	mock.calls.FindPermissionByIDWithCategory = append(mock.calls.FindPermissionByIDWithCategory, callInfo)
	mock.lockFindPermissionByIDWithCategory.Unlock()
	return mock.FindPermissionByIDWithCategoryFunc(ctx, id)
}

// FindPermissionByIDWithCategoryCalls gets all the calls that were made to FindPermissionByIDWithCategory.
// Check the length with:
//
//	len(mockedManagerInterface.FindPermissionByIDWithCategoryCalls())
func (mock *ManagerInterfaceMock) FindPermissionByIDWithCategoryCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockFindPermissionByIDWithCategory.RLock()
	calls = mock.calls.FindPermissionByIDWithCategory
	mock.lockFindPermissionByIDWithCategory.RUnlock()
	return calls
}

// FindPermissionByKey calls FindPermissionByKeyFunc.
func (mock *ManagerInterfaceMock) FindPermissionByKey(ctx context.Context, key string) (entity.Permission, error) {
	if mock.FindPermissionByKeyFunc == nil {
		panic("ManagerInterfaceMock.FindPermissionByKeyFunc: method is nil but ManagerInterface.FindPermissionByKey was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockFindPermissionByKey.Lock()
	mock.calls.FindPermissionByKey = append(mock.calls.FindPermissionByKey, callInfo)
	mock.lockFindPermissionByKey.Unlock()
	return mock.FindPermissionByKeyFunc(ctx, key)
}

// FindPermissionByKeyCalls gets all the calls that were made to FindPermissionByKey.
// Check the length with:
//
//	len(mockedManagerInterface.FindPermissionByKeyCalls())
func (mock *ManagerInterfaceMock) FindPermissionByKeyCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockFindPermissionByKey.RLock()
	calls = mock.calls.FindPermissionByKey
	mock.lockFindPermissionByKey.RUnlock()
	return calls
}

// FindPermissionByKeyWithCategory calls FindPermissionByKeyWithCategoryFunc.
func (mock *ManagerInterfaceMock) FindPermissionByKeyWithCategory(ctx context.Context, key string) (entity.PermissionWithCategory, error) {
	if mock.FindPermissionByKeyWithCategoryFunc == nil {
		panic("ManagerInterfaceMock.FindPermissionByKeyWithCategoryFunc: method is nil but ManagerInterface.FindPermissionByKeyWithCategory was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockFindPermissionByKeyWithCategory.Lock()
	mock.calls.FindPermissionByKeyWithCategory = append(mock.calls.FindPermissionByKeyWithCategory, callInfo)
	mock.lockFindPermissionByKeyWithCategory.Unlock()
	return mock.FindPermissionByKeyWithCategoryFunc(ctx, key)
}

// FindPermissionByKeyWithCategoryCalls gets all the calls that were made to FindPermissionByKeyWithCategory.
// Check the length with:
//
//	len(mockedManagerInterface.FindPermissionByKeyWithCategoryCalls())
func (mock *ManagerInterfaceMock) FindPermissionByKeyWithCategoryCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockFindPermissionByKeyWithCategory.RLock()
	calls = mock.calls.FindPermissionByKeyWithCategory
	mock.lockFindPermissionByKeyWithCategory.RUnlock()
	return calls
}

// FindPermissionCategoryByID calls FindPermissionCategoryByIDFunc.
func (mock *ManagerInterfaceMock) FindPermissionCategoryByID(ctx context.Context, id uuid.UUID) (entity.PermissionCategory, error) {
	if mock.FindPermissionCategoryByIDFunc == nil {
		panic("ManagerInterfaceMock.FindPermissionCategoryByIDFunc: method is nil but ManagerInterface.FindPermissionCategoryByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockFindPermissionCategoryByID.Lock()
	mock.calls.FindPermissionCategoryByID = append(mock.calls.FindPermissionCategoryByID, callInfo)
	mock.lockFindPermissionCategoryByID.Unlock()
	return mock.FindPermissionCategoryByIDFunc(ctx, id)
}

// FindPermissionCategoryByIDCalls gets all the calls that were made to FindPermissionCategoryByID.
// Check the length with:
//
//	len(mockedManagerInterface.FindPermissionCategoryByIDCalls())
func (mock *ManagerInterfaceMock) FindPermissionCategoryByIDCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockFindPermissionCategoryByID.RLock()
	calls = mock.calls.FindPermissionCategoryByID
	mock.lockFindPermissionCategoryByID.RUnlock()
	return calls
}

// FindPermissionCategoryByKey calls FindPermissionCategoryByKeyFunc.
func (mock *ManagerInterfaceMock) FindPermissionCategoryByKey(ctx context.Context, key string) (entity.PermissionCategory, error) {
	if mock.FindPermissionCategoryByKeyFunc == nil {
		panic("ManagerInterfaceMock.FindPermissionCategoryByKeyFunc: method is nil but ManagerInterface.FindPermissionCategoryByKey was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockFindPermissionCategoryByKey.Lock()
	mock.calls.FindPermissionCategoryByKey = append(mock.calls.FindPermissionCategoryByKey, callInfo)
	mock.lockFindPermissionCategoryByKey.Unlock()
	return mock.FindPermissionCategoryByKeyFunc(ctx, key)
}

// FindPermissionCategoryByKeyCalls gets all the calls that were made to FindPermissionCategoryByKey.
// Check the length with:
//
//	len(mockedManagerInterface.FindPermissionCategoryByKeyCalls())
func (mock *ManagerInterfaceMock) FindPermissionCategoryByKeyCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockFindPermissionCategoryByKey.RLock()
	calls = mock.calls.FindPermissionCategoryByKey
	mock.lockFindPermissionCategoryByKey.RUnlock()
	return calls
}

// FindPolicyByID calls FindPolicyByIDFunc.
func (mock *ManagerInterfaceMock) FindPolicyByID(ctx context.Context, id uuid.UUID) (entity.Policy, error) {
	if mock.FindPolicyByIDFunc == nil {
		panic("ManagerInterfaceMock.FindPolicyByIDFunc: method is nil but ManagerInterface.FindPolicyByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockFindPolicyByID.Lock()
	mock.calls.FindPolicyByID = append(mock.calls.FindPolicyByID, callInfo)
	mock.lockFindPolicyByID.Unlock()
	return mock.FindPolicyByIDFunc(ctx, id)
}

// FindPolicyByIDCalls gets all the calls that were made to FindPolicyByID.
// Check the length with:
//
//	len(mockedManagerInterface.FindPolicyByIDCalls())
func (mock *ManagerInterfaceMock) FindPolicyByIDCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockFindPolicyByID.RLock()
	calls = mock.calls.FindPolicyByID
	mock.lockFindPolicyByID.RUnlock()
	return calls
}

// FindPolicyByIDWithCategory calls FindPolicyByIDWithCategoryFunc.
func (mock *ManagerInterfaceMock) FindPolicyByIDWithCategory(ctx context.Context, id uuid.UUID) (entity.PolicyWithCategory, error) {
	if mock.FindPolicyByIDWithCategoryFunc == nil {
		panic("ManagerInterfaceMock.FindPolicyByIDWithCategoryFunc: method is nil but ManagerInterface.FindPolicyByIDWithCategory was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockFindPolicyByIDWithCategory.Lock()
	mock.calls.FindPolicyByIDWithCategory = append(mock.calls.FindPolicyByIDWithCategory, callInfo)
	mock.lockFindPolicyByIDWithCategory.Unlock()
	return mock.FindPolicyByIDWithCategoryFunc(ctx, id)
}

// FindPolicyByIDWithCategoryCalls gets all the calls that were made to FindPolicyByIDWithCategory.
// Check the length with:
//
//	len(mockedManagerInterface.FindPolicyByIDWithCategoryCalls())
func (mock *ManagerInterfaceMock) FindPolicyByIDWithCategoryCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockFindPolicyByIDWithCategory.RLock()
	calls = mock.calls.FindPolicyByIDWithCategory
	mock.lockFindPolicyByIDWithCategory.RUnlock()
	return calls
}

// FindPolicyByKey calls FindPolicyByKeyFunc.
func (mock *ManagerInterfaceMock) FindPolicyByKey(ctx context.Context, key string) (entity.Policy, error) {
	if mock.FindPolicyByKeyFunc == nil {
		panic("ManagerInterfaceMock.FindPolicyByKeyFunc: method is nil but ManagerInterface.FindPolicyByKey was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockFindPolicyByKey.Lock()
	mock.calls.FindPolicyByKey = append(mock.calls.FindPolicyByKey, callInfo)
	mock.lockFindPolicyByKey.Unlock()
	return mock.FindPolicyByKeyFunc(ctx, key)
}

// FindPolicyByKeyCalls gets all the calls that were made to FindPolicyByKey.
// Check the length with:
//
//	len(mockedManagerInterface.FindPolicyByKeyCalls())
func (mock *ManagerInterfaceMock) FindPolicyByKeyCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockFindPolicyByKey.RLock()
	calls = mock.calls.FindPolicyByKey
	mock.lockFindPolicyByKey.RUnlock()
	return calls
}

// FindPolicyByKeyWithCategory calls FindPolicyByKeyWithCategoryFunc.
func (mock *ManagerInterfaceMock) FindPolicyByKeyWithCategory(ctx context.Context, key string) (entity.PolicyWithCategory, error) {
	if mock.FindPolicyByKeyWithCategoryFunc == nil {
		panic("ManagerInterfaceMock.FindPolicyByKeyWithCategoryFunc: method is nil but ManagerInterface.FindPolicyByKeyWithCategory was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockFindPolicyByKeyWithCategory.Lock()
	mock.calls.FindPolicyByKeyWithCategory = append(mock.calls.FindPolicyByKeyWithCategory, callInfo)
	mock.lockFindPolicyByKeyWithCategory.Unlock()
	return mock.FindPolicyByKeyWithCategoryFunc(ctx, key)
}

// FindPolicyByKeyWithCategoryCalls gets all the calls that were made to FindPolicyByKeyWithCategory.
// Check the length with:
//
//	len(mockedManagerInterface.FindPolicyByKeyWithCategoryCalls())
func (mock *ManagerInterfaceMock) FindPolicyByKeyWithCategoryCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockFindPolicyByKeyWithCategory.RLock()
	calls = mock.calls.FindPolicyByKeyWithCategory
	mock.lockFindPolicyByKeyWithCategory.RUnlock()
	return calls
}

// FindPolicyCategoryByID calls FindPolicyCategoryByIDFunc.
func (mock *ManagerInterfaceMock) FindPolicyCategoryByID(ctx context.Context, id uuid.UUID) (entity.PolicyCategory, error) {
	if mock.FindPolicyCategoryByIDFunc == nil {
		panic("ManagerInterfaceMock.FindPolicyCategoryByIDFunc: method is nil but ManagerInterface.FindPolicyCategoryByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockFindPolicyCategoryByID.Lock()
	mock.calls.FindPolicyCategoryByID = append(mock.calls.FindPolicyCategoryByID, callInfo)
	mock.lockFindPolicyCategoryByID.Unlock()
	return mock.FindPolicyCategoryByIDFunc(ctx, id)
}

// FindPolicyCategoryByIDCalls gets all the calls that were made to FindPolicyCategoryByID.
// Check the length with:
//
//	len(mockedManagerInterface.FindPolicyCategoryByIDCalls())
func (mock *ManagerInterfaceMock) FindPolicyCategoryByIDCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockFindPolicyCategoryByID.RLock()
	calls = mock.calls.FindPolicyCategoryByID
	mock.lockFindPolicyCategoryByID.RUnlock()
	return calls
}

// FindPolicyCategoryByKey calls FindPolicyCategoryByKeyFunc.
func (mock *ManagerInterfaceMock) FindPolicyCategoryByKey(ctx context.Context, key string) (entity.PolicyCategory, error) {
	if mock.FindPolicyCategoryByKeyFunc == nil {
		panic("ManagerInterfaceMock.FindPolicyCategoryByKeyFunc: method is nil but ManagerInterface.FindPolicyCategoryByKey was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockFindPolicyCategoryByKey.Lock()
	mock.calls.FindPolicyCategoryByKey = append(mock.calls.FindPolicyCategoryByKey, callInfo)
	mock.lockFindPolicyCategoryByKey.Unlock()
	return mock.FindPolicyCategoryByKeyFunc(ctx, key)
}

// FindPolicyCategoryByKeyCalls gets all the calls that were made to FindPolicyCategoryByKey.
// Check the length with:
//
//	len(mockedManagerInterface.FindPolicyCategoryByKeyCalls())
func (mock *ManagerInterfaceMock) FindPolicyCategoryByKeyCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockFindPolicyCategoryByKey.RLock()
	calls = mock.calls.FindPolicyCategoryByKey
	mock.lockFindPolicyCategoryByKey.RUnlock()
	return calls
}

// FindRecordTypeByID calls FindRecordTypeByIDFunc.
func (mock *ManagerInterfaceMock) FindRecordTypeByID(ctx context.Context, id uuid.UUID) (entity.RecordType, error) {
	if mock.FindRecordTypeByIDFunc == nil {
		panic("ManagerInterfaceMock.FindRecordTypeByIDFunc: method is nil but ManagerInterface.FindRecordTypeByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockFindRecordTypeByID.Lock()
	mock.calls.FindRecordTypeByID = append(mock.calls.FindRecordTypeByID, callInfo)
	mock.lockFindRecordTypeByID.Unlock()
	return mock.FindRecordTypeByIDFunc(ctx, id)
}

// FindRecordTypeByIDCalls gets all the calls that were made to FindRecordTypeByID.
// Check the length with:
//
//	len(mockedManagerInterface.FindRecordTypeByIDCalls())
func (mock *ManagerInterfaceMock) FindRecordTypeByIDCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockFindRecordTypeByID.RLock()
	calls = mock.calls.FindRecordTypeByID
	mock.lockFindRecordTypeByID.RUnlock()
	return calls
}

// FindRecordTypeByKey calls FindRecordTypeByKeyFunc.
func (mock *ManagerInterfaceMock) FindRecordTypeByKey(ctx context.Context, key string) (entity.RecordType, error) {
	if mock.FindRecordTypeByKeyFunc == nil {
		panic("ManagerInterfaceMock.FindRecordTypeByKeyFunc: method is nil but ManagerInterface.FindRecordTypeByKey was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockFindRecordTypeByKey.Lock()
	mock.calls.FindRecordTypeByKey = append(mock.calls.FindRecordTypeByKey, callInfo)
	mock.lockFindRecordTypeByKey.Unlock()
	return mock.FindRecordTypeByKeyFunc(ctx, key)
}

// FindRecordTypeByKeyCalls gets all the calls that were made to FindRecordTypeByKey.
// Check the length with:
//
//	len(mockedManagerInterface.FindRecordTypeByKeyCalls())
func (mock *ManagerInterfaceMock) FindRecordTypeByKeyCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockFindRecordTypeByKey.RLock()
	calls = mock.calls.FindRecordTypeByKey
	mock.lockFindRecordTypeByKey.RUnlock()
	return calls
}

// FindRoleByID calls FindRoleByIDFunc.
func (mock *ManagerInterfaceMock) FindRoleByID(ctx context.Context, id uuid.UUID) (entity.Role, error) {
	if mock.FindRoleByIDFunc == nil {
		panic("ManagerInterfaceMock.FindRoleByIDFunc: method is nil but ManagerInterface.FindRoleByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockFindRoleByID.Lock()
	mock.calls.FindRoleByID = append(mock.calls.FindRoleByID, callInfo)
	mock.lockFindRoleByID.Unlock()
	return mock.FindRoleByIDFunc(ctx, id)
}

// FindRoleByIDCalls gets all the calls that were made to FindRoleByID.
// Check the length with:
//
//	len(mockedManagerInterface.FindRoleByIDCalls())
func (mock *ManagerInterfaceMock) FindRoleByIDCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockFindRoleByID.RLock()
	calls = mock.calls.FindRoleByID
	mock.lockFindRoleByID.RUnlock()
	return calls
}

// GetAttendStatuses calls GetAttendStatusesFunc.
func (mock *ManagerInterfaceMock) GetAttendStatuses(ctx context.Context, whereSearchName string, order parameter.AttendStatusOrderMethod, pg parameter.Pagination, limit parameter.Limit, cursor parameter.Cursor, offset parameter.Offset, withCount parameter.WithCount) (store.ListResult[entity.AttendStatus], error) {
	if mock.GetAttendStatusesFunc == nil {
		panic("ManagerInterfaceMock.GetAttendStatusesFunc: method is nil but ManagerInterface.GetAttendStatuses was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		WhereSearchName string
		Order           parameter.AttendStatusOrderMethod
		Pg              parameter.Pagination
		Limit           parameter.Limit
		Cursor          parameter.Cursor
		Offset          parameter.Offset
		WithCount       parameter.WithCount
	}{
		Ctx:             ctx,
		WhereSearchName: whereSearchName,
		Order:           order,
		Pg:              pg,
		Limit:           limit,
		Cursor:          cursor,
		Offset:          offset,
		WithCount:       withCount,
	}
	mock.lockGetAttendStatuses.Lock()
	mock.calls.GetAttendStatuses = append(mock.calls.GetAttendStatuses, callInfo)
	mock.lockGetAttendStatuses.Unlock()
	return mock.GetAttendStatusesFunc(ctx, whereSearchName, order, pg, limit, cursor, offset, withCount)
}

// GetAttendStatusesCalls gets all the calls that were made to GetAttendStatuses.
// Check the length with:
//
//	len(mockedManagerInterface.GetAttendStatusesCalls())
func (mock *ManagerInterfaceMock) GetAttendStatusesCalls() []struct {
	Ctx             context.Context
	WhereSearchName string
	Order           parameter.AttendStatusOrderMethod
	Pg              parameter.Pagination
	Limit           parameter.Limit
	Cursor          parameter.Cursor
	Offset          parameter.Offset
	WithCount       parameter.WithCount
} {
	var calls []struct {
		Ctx             context.Context
		WhereSearchName string
		Order           parameter.AttendStatusOrderMethod
		Pg              parameter.Pagination
		Limit           parameter.Limit
		Cursor          parameter.Cursor
		Offset          parameter.Offset
		WithCount       parameter.WithCount
	}
	mock.lockGetAttendStatuses.RLock()
	calls = mock.calls.GetAttendStatuses
	mock.lockGetAttendStatuses.RUnlock()
	return calls
}

// GetAttendStatusesCount calls GetAttendStatusesCountFunc.
func (mock *ManagerInterfaceMock) GetAttendStatusesCount(ctx context.Context, whereSearchName string) (int64, error) {
	if mock.GetAttendStatusesCountFunc == nil {
		panic("ManagerInterfaceMock.GetAttendStatusesCountFunc: method is nil but ManagerInterface.GetAttendStatusesCount was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		WhereSearchName string
	}{
		Ctx:             ctx,
		WhereSearchName: whereSearchName,
	}
	mock.lockGetAttendStatusesCount.Lock()
	mock.calls.GetAttendStatusesCount = append(mock.calls.GetAttendStatusesCount, callInfo)
	mock.lockGetAttendStatusesCount.Unlock()
	return mock.GetAttendStatusesCountFunc(ctx, whereSearchName)
}

// GetAttendStatusesCountCalls gets all the calls that were made to GetAttendStatusesCount.
// Check the length with:
//
//	len(mockedManagerInterface.GetAttendStatusesCountCalls())
func (mock *ManagerInterfaceMock) GetAttendStatusesCountCalls() []struct {
	Ctx             context.Context
	WhereSearchName string
} {
	var calls []struct {
		Ctx             context.Context
		WhereSearchName string
	}
	mock.lockGetAttendStatusesCount.RLock()
	calls = mock.calls.GetAttendStatusesCount
	mock.lockGetAttendStatusesCount.RUnlock()
	return calls
}

// GetAttendanceTypes calls GetAttendanceTypesFunc.
func (mock *ManagerInterfaceMock) GetAttendanceTypes(ctx context.Context, whereSearchName string, order parameter.AttendanceTypeOrderMethod, pg parameter.Pagination, limit parameter.Limit, cursor parameter.Cursor, offset parameter.Offset, withCount parameter.WithCount) (store.ListResult[entity.AttendanceType], error) {
	if mock.GetAttendanceTypesFunc == nil {
		panic("ManagerInterfaceMock.GetAttendanceTypesFunc: method is nil but ManagerInterface.GetAttendanceTypes was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		WhereSearchName string
		Order           parameter.AttendanceTypeOrderMethod
		Pg              parameter.Pagination
		Limit           parameter.Limit
		Cursor          parameter.Cursor
		Offset          parameter.Offset
		WithCount       parameter.WithCount
	}{
		Ctx:             ctx,
		WhereSearchName: whereSearchName,
		Order:           order,
		Pg:              pg,
		Limit:           limit,
		Cursor:          cursor,
		Offset:          offset,
		WithCount:       withCount,
	}
	mock.lockGetAttendanceTypes.Lock()
	mock.calls.GetAttendanceTypes = append(mock.calls.GetAttendanceTypes, callInfo)
	mock.lockGetAttendanceTypes.Unlock()
	return mock.GetAttendanceTypesFunc(ctx, whereSearchName, order, pg, limit, cursor, offset, withCount)
}

// GetAttendanceTypesCalls gets all the calls that were made to GetAttendanceTypes.
// Check the length with:
//
//	len(mockedManagerInterface.GetAttendanceTypesCalls())
func (mock *ManagerInterfaceMock) GetAttendanceTypesCalls() []struct {
	Ctx             context.Context
	WhereSearchName string
	Order           parameter.AttendanceTypeOrderMethod
	Pg              parameter.Pagination
	Limit           parameter.Limit
	Cursor          parameter.Cursor
	Offset          parameter.Offset
	WithCount       parameter.WithCount
} {
	var calls []struct {
		Ctx             context.Context
		WhereSearchName string
		Order           parameter.AttendanceTypeOrderMethod
		Pg              parameter.Pagination
		Limit           parameter.Limit
		Cursor          parameter.Cursor
		Offset          parameter.Offset
		WithCount       parameter.WithCount
	}
	mock.lockGetAttendanceTypes.RLock()
	calls = mock.calls.GetAttendanceTypes
	mock.lockGetAttendanceTypes.RUnlock()
	return calls
}

// GetAttendanceTypesCount calls GetAttendanceTypesCountFunc.
func (mock *ManagerInterfaceMock) GetAttendanceTypesCount(ctx context.Context, whereSearchName string) (int64, error) {
	if mock.GetAttendanceTypesCountFunc == nil {
		panic("ManagerInterfaceMock.GetAttendanceTypesCountFunc: method is nil but ManagerInterface.GetAttendanceTypesCount was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		WhereSearchName string
	}{
		Ctx:             ctx,
		WhereSearchName: whereSearchName,
	}
	mock.lockGetAttendanceTypesCount.Lock()
	mock.calls.GetAttendanceTypesCount = append(mock.calls.GetAttendanceTypesCount, callInfo)
	mock.lockGetAttendanceTypesCount.Unlock()
	return mock.GetAttendanceTypesCountFunc(ctx, whereSearchName)
}

// GetAttendanceTypesCountCalls gets all the calls that were made to GetAttendanceTypesCount.
// Check the length with:
//
//	len(mockedManagerInterface.GetAttendanceTypesCountCalls())
func (mock *ManagerInterfaceMock) GetAttendanceTypesCountCalls() []struct {
	Ctx             context.Context
	WhereSearchName string
} {
	var calls []struct {
		Ctx             context.Context
		WhereSearchName string
	}
	mock.lockGetAttendanceTypesCount.RLock()
	calls = mock.calls.GetAttendanceTypesCount
	mock.lockGetAttendanceTypesCount.RUnlock()
	return calls
}

// GetEventTypes calls GetEventTypesFunc.
func (mock *ManagerInterfaceMock) GetEventTypes(ctx context.Context, whereSearchName string, order parameter.EventTypeOrderMethod, pg parameter.Pagination, limit parameter.Limit, cursor parameter.Cursor, offset parameter.Offset, withCount parameter.WithCount) (store.ListResult[entity.EventType], error) {
	if mock.GetEventTypesFunc == nil {
		panic("ManagerInterfaceMock.GetEventTypesFunc: method is nil but ManagerInterface.GetEventTypes was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		WhereSearchName string
		Order           parameter.EventTypeOrderMethod
		Pg              parameter.Pagination
		Limit           parameter.Limit
		Cursor          parameter.Cursor
		Offset          parameter.Offset
		WithCount       parameter.WithCount
	}{
		Ctx:             ctx,
		WhereSearchName: whereSearchName,
		Order:           order,
		Pg:              pg,
		Limit:           limit,
		Cursor:          cursor,
		Offset:          offset,
		WithCount:       withCount,
	}
	mock.lockGetEventTypes.Lock()
	mock.calls.GetEventTypes = append(mock.calls.GetEventTypes, callInfo)
	mock.lockGetEventTypes.Unlock()
	return mock.GetEventTypesFunc(ctx, whereSearchName, order, pg, limit, cursor, offset, withCount)
}

// GetEventTypesCalls gets all the calls that were made to GetEventTypes.
// Check the length with:
//
//	len(mockedManagerInterface.GetEventTypesCalls())
func (mock *ManagerInterfaceMock) GetEventTypesCalls() []struct {
	Ctx             context.Context
	WhereSearchName string
	Order           parameter.EventTypeOrderMethod
	Pg              parameter.Pagination
	Limit           parameter.Limit
	Cursor          parameter.Cursor
	Offset          parameter.Offset
	WithCount       parameter.WithCount
} {
	var calls []struct {
		Ctx             context.Context
		WhereSearchName string
		Order           parameter.EventTypeOrderMethod
		Pg              parameter.Pagination
		Limit           parameter.Limit
		Cursor          parameter.Cursor
		Offset          parameter.Offset
		WithCount       parameter.WithCount
	}
	mock.lockGetEventTypes.RLock()
	calls = mock.calls.GetEventTypes
	mock.lockGetEventTypes.RUnlock()
	return calls
}

// GetEventTypesCount calls GetEventTypesCountFunc.
func (mock *ManagerInterfaceMock) GetEventTypesCount(ctx context.Context, whereSearchName string) (int64, error) {
	if mock.GetEventTypesCountFunc == nil {
		panic("ManagerInterfaceMock.GetEventTypesCountFunc: method is nil but ManagerInterface.GetEventTypesCount was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		WhereSearchName string
	}{
		Ctx:             ctx,
		WhereSearchName: whereSearchName,
	}
	mock.lockGetEventTypesCount.Lock()
	mock.calls.GetEventTypesCount = append(mock.calls.GetEventTypesCount, callInfo)
	mock.lockGetEventTypesCount.Unlock()
	return mock.GetEventTypesCountFunc(ctx, whereSearchName)
}

// GetEventTypesCountCalls gets all the calls that were made to GetEventTypesCount.
// Check the length with:
//
//	len(mockedManagerInterface.GetEventTypesCountCalls())
func (mock *ManagerInterfaceMock) GetEventTypesCountCalls() []struct {
	Ctx             context.Context
	WhereSearchName string
} {
	var calls []struct {
		Ctx             context.Context
		WhereSearchName string
	}
	mock.lockGetEventTypesCount.RLock()
	calls = mock.calls.GetEventTypesCount
	mock.lockGetEventTypesCount.RUnlock()
	return calls
}

// GetMimeTypes calls GetMimeTypesFunc.
func (mock *ManagerInterfaceMock) GetMimeTypes(ctx context.Context, whereSearchName string, order parameter.MimeTypeOrderMethod, pg parameter.Pagination, limit parameter.Limit, cursor parameter.Cursor, offset parameter.Offset, withCount parameter.WithCount) (store.ListResult[entity.MimeType], error) {
	if mock.GetMimeTypesFunc == nil {
		panic("ManagerInterfaceMock.GetMimeTypesFunc: method is nil but ManagerInterface.GetMimeTypes was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		WhereSearchName string
		Order           parameter.MimeTypeOrderMethod
		Pg              parameter.Pagination
		Limit           parameter.Limit
		Cursor          parameter.Cursor
		Offset          parameter.Offset
		WithCount       parameter.WithCount
	}{
		Ctx:             ctx,
		WhereSearchName: whereSearchName,
		Order:           order,
		Pg:              pg,
		Limit:           limit,
		Cursor:          cursor,
		Offset:          offset,
		WithCount:       withCount,
	}
	mock.lockGetMimeTypes.Lock()
	mock.calls.GetMimeTypes = append(mock.calls.GetMimeTypes, callInfo)
	mock.lockGetMimeTypes.Unlock()
	return mock.GetMimeTypesFunc(ctx, whereSearchName, order, pg, limit, cursor, offset, withCount)
}

// GetMimeTypesCalls gets all the calls that were made to GetMimeTypes.
// Check the length with:
//
//	len(mockedManagerInterface.GetMimeTypesCalls())
func (mock *ManagerInterfaceMock) GetMimeTypesCalls() []struct {
	Ctx             context.Context
	WhereSearchName string
	Order           parameter.MimeTypeOrderMethod
	Pg              parameter.Pagination
	Limit           parameter.Limit
	Cursor          parameter.Cursor
	Offset          parameter.Offset
	WithCount       parameter.WithCount
} {
	var calls []struct {
		Ctx             context.Context
		WhereSearchName string
		Order           parameter.MimeTypeOrderMethod
		Pg              parameter.Pagination
		Limit           parameter.Limit
		Cursor          parameter.Cursor
		Offset          parameter.Offset
		WithCount       parameter.WithCount
	}
	mock.lockGetMimeTypes.RLock()
	calls = mock.calls.GetMimeTypes
	mock.lockGetMimeTypes.RUnlock()
	return calls
}

// GetMimeTypesCount calls GetMimeTypesCountFunc.
func (mock *ManagerInterfaceMock) GetMimeTypesCount(ctx context.Context, whereSearchName string) (int64, error) {
	if mock.GetMimeTypesCountFunc == nil {
		panic("ManagerInterfaceMock.GetMimeTypesCountFunc: method is nil but ManagerInterface.GetMimeTypesCount was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		WhereSearchName string
	}{
		Ctx:             ctx,
		WhereSearchName: whereSearchName,
	}
	mock.lockGetMimeTypesCount.Lock()
	mock.calls.GetMimeTypesCount = append(mock.calls.GetMimeTypesCount, callInfo)
	mock.lockGetMimeTypesCount.Unlock()
	return mock.GetMimeTypesCountFunc(ctx, whereSearchName)
}

// GetMimeTypesCountCalls gets all the calls that were made to GetMimeTypesCount.
// Check the length with:
//
//	len(mockedManagerInterface.GetMimeTypesCountCalls())
func (mock *ManagerInterfaceMock) GetMimeTypesCountCalls() []struct {
	Ctx             context.Context
	WhereSearchName string
} {
	var calls []struct {
		Ctx             context.Context
		WhereSearchName string
	}
	mock.lockGetMimeTypesCount.RLock()
	calls = mock.calls.GetMimeTypesCount
	mock.lockGetMimeTypesCount.RUnlock()
	return calls
}

// GetPermissionCategories calls GetPermissionCategoriesFunc.
func (mock *ManagerInterfaceMock) GetPermissionCategories(ctx context.Context, whereSearchName string, order parameter.PermissionCategoryOrderMethod, pg parameter.Pagination, limit parameter.Limit, cursor parameter.Cursor, offset parameter.Offset, withCount parameter.WithCount) (store.ListResult[entity.PermissionCategory], error) {
	if mock.GetPermissionCategoriesFunc == nil {
		panic("ManagerInterfaceMock.GetPermissionCategoriesFunc: method is nil but ManagerInterface.GetPermissionCategories was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		WhereSearchName string
		Order           parameter.PermissionCategoryOrderMethod
		Pg              parameter.Pagination
		Limit           parameter.Limit
		Cursor          parameter.Cursor
		Offset          parameter.Offset
		WithCount       parameter.WithCount
	}{
		Ctx:             ctx,
		WhereSearchName: whereSearchName,
		Order:           order,
		Pg:              pg,
		Limit:           limit,
		Cursor:          cursor,
		Offset:          offset,
		WithCount:       withCount,
	}
	mock.lockGetPermissionCategories.Lock()
	mock.calls.GetPermissionCategories = append(mock.calls.GetPermissionCategories, callInfo)
	mock.lockGetPermissionCategories.Unlock()
	return mock.GetPermissionCategoriesFunc(ctx, whereSearchName, order, pg, limit, cursor, offset, withCount)
}

// GetPermissionCategoriesCalls gets all the calls that were made to GetPermissionCategories.
// Check the length with:
//
//	len(mockedManagerInterface.GetPermissionCategoriesCalls())
func (mock *ManagerInterfaceMock) GetPermissionCategoriesCalls() []struct {
	Ctx             context.Context
	WhereSearchName string
	Order           parameter.PermissionCategoryOrderMethod
	Pg              parameter.Pagination
	Limit           parameter.Limit
	Cursor          parameter.Cursor
	Offset          parameter.Offset
	WithCount       parameter.WithCount
} {
	var calls []struct {
		Ctx             context.Context
		WhereSearchName string
		Order           parameter.PermissionCategoryOrderMethod
		Pg              parameter.Pagination
		Limit           parameter.Limit
		Cursor          parameter.Cursor
		Offset          parameter.Offset
		WithCount       parameter.WithCount
	}
	mock.lockGetPermissionCategories.RLock()
	calls = mock.calls.GetPermissionCategories
	mock.lockGetPermissionCategories.RUnlock()
	return calls
}

// GetPermissionCategoriesCount calls GetPermissionCategoriesCountFunc.
func (mock *ManagerInterfaceMock) GetPermissionCategoriesCount(ctx context.Context, whereSearchName string) (int64, error) {
	if mock.GetPermissionCategoriesCountFunc == nil {
		panic("ManagerInterfaceMock.GetPermissionCategoriesCountFunc: method is nil but ManagerInterface.GetPermissionCategoriesCount was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		WhereSearchName string
	}{
		Ctx:             ctx,
		WhereSearchName: whereSearchName,
	}
	mock.lockGetPermissionCategoriesCount.Lock()
	mock.calls.GetPermissionCategoriesCount = append(mock.calls.GetPermissionCategoriesCount, callInfo)
	mock.lockGetPermissionCategoriesCount.Unlock()
	return mock.GetPermissionCategoriesCountFunc(ctx, whereSearchName)
}

// GetPermissionCategoriesCountCalls gets all the calls that were made to GetPermissionCategoriesCount.
// Check the length with:
//
//	len(mockedManagerInterface.GetPermissionCategoriesCountCalls())
func (mock *ManagerInterfaceMock) GetPermissionCategoriesCountCalls() []struct {
	Ctx             context.Context
	WhereSearchName string
} {
	var calls []struct {
		Ctx             context.Context
		WhereSearchName string
	}
	mock.lockGetPermissionCategoriesCount.RLock()
	calls = mock.calls.GetPermissionCategoriesCount
	mock.lockGetPermissionCategoriesCount.RUnlock()
	return calls
}

// GetPermissions calls GetPermissionsFunc.
func (mock *ManagerInterfaceMock) GetPermissions(ctx context.Context, whereSearchName string, whereInCategories []uuid.UUID, order parameter.PermissionOrderMethod, pg parameter.Pagination, limit parameter.Limit, cursor parameter.Cursor, offset parameter.Offset, withCount parameter.WithCount) (store.ListResult[entity.Permission], error) {
	if mock.GetPermissionsFunc == nil {
		panic("ManagerInterfaceMock.GetPermissionsFunc: method is nil but ManagerInterface.GetPermissions was just called")
	}
	callInfo := struct {
		Ctx               context.Context
		WhereSearchName   string
		WhereInCategories []uuid.UUID
		Order             parameter.PermissionOrderMethod
		Pg                parameter.Pagination
		Limit             parameter.Limit
		Cursor            parameter.Cursor
		Offset            parameter.Offset
		WithCount         parameter.WithCount
	}{
		Ctx:               ctx,
		WhereSearchName:   whereSearchName,
		WhereInCategories: whereInCategories,
		Order:             order,
		Pg:                pg,
		Limit:             limit,
		Cursor:            cursor,
		Offset:            offset,
		WithCount:         withCount,
	}
	mock.lockGetPermissions.Lock()
	mock.calls.GetPermissions = append(mock.calls.GetPermissions, callInfo)
	mock.lockGetPermissions.Unlock()
	return mock.GetPermissionsFunc(ctx, whereSearchName, whereInCategories, order, pg, limit, cursor, offset, withCount)
}

// GetPermissionsCalls gets all the calls that were made to GetPermissions.
// Check the length with:
//
//	len(mockedManagerInterface.GetPermissionsCalls())
func (mock *ManagerInterfaceMock) GetPermissionsCalls() []struct {
	Ctx               context.Context
	WhereSearchName   string
	WhereInCategories []uuid.UUID
	Order             parameter.PermissionOrderMethod
	Pg                parameter.Pagination
	Limit             parameter.Limit
	Cursor            parameter.Cursor
	Offset            parameter.Offset
	WithCount         parameter.WithCount
} {
	var calls []struct {
		Ctx               context.Context
		WhereSearchName   string
		WhereInCategories []uuid.UUID
		Order             parameter.PermissionOrderMethod
		Pg                parameter.Pagination
		Limit             parameter.Limit
		Cursor            parameter.Cursor
		Offset            parameter.Offset
		WithCount         parameter.WithCount
	}
	mock.lockGetPermissions.RLock()
	calls = mock.calls.GetPermissions
	mock.lockGetPermissions.RUnlock()
	return calls
}

// GetPermissionsCount calls GetPermissionsCountFunc.
func (mock *ManagerInterfaceMock) GetPermissionsCount(ctx context.Context, whereSearchName string, whereInCategories []uuid.UUID) (int64, error) {
	if mock.GetPermissionsCountFunc == nil {
		panic("ManagerInterfaceMock.GetPermissionsCountFunc: method is nil but ManagerInterface.GetPermissionsCount was just called")
	}
	callInfo := struct {
		Ctx               context.Context
		WhereSearchName   string
		WhereInCategories []uuid.UUID
	}{
		Ctx:               ctx,
		WhereSearchName:   whereSearchName,
		WhereInCategories: whereInCategories,
	}
	mock.lockGetPermissionsCount.Lock()
	mock.calls.GetPermissionsCount = append(mock.calls.GetPermissionsCount, callInfo)
	mock.lockGetPermissionsCount.Unlock()
	return mock.GetPermissionsCountFunc(ctx, whereSearchName, whereInCategories)
}

// GetPermissionsCountCalls gets all the calls that were made to GetPermissionsCount.
// Check the length with:
//
//	len(mockedManagerInterface.GetPermissionsCountCalls())
func (mock *ManagerInterfaceMock) GetPermissionsCountCalls() []struct {
	Ctx               context.Context
	WhereSearchName   string
	WhereInCategories []uuid.UUID
} {
	var calls []struct {
		Ctx               context.Context
		WhereSearchName   string
		WhereInCategories []uuid.UUID
	}
	mock.lockGetPermissionsCount.RLock()
	calls = mock.calls.GetPermissionsCount
	mock.lockGetPermissionsCount.RUnlock()
	return calls
}

// GetPermissionsWithCategory calls GetPermissionsWithCategoryFunc.
func (mock *ManagerInterfaceMock) GetPermissionsWithCategory(ctx context.Context, whereSearchName string, whereInCategories []uuid.UUID, order parameter.PermissionOrderMethod, pg parameter.Pagination, limit parameter.Limit, cursor parameter.Cursor, offset parameter.Offset, withCount parameter.WithCount) (store.ListResult[entity.PermissionWithCategory], error) {
	if mock.GetPermissionsWithCategoryFunc == nil {
		panic("ManagerInterfaceMock.GetPermissionsWithCategoryFunc: method is nil but ManagerInterface.GetPermissionsWithCategory was just called")
	}
	callInfo := struct {
		Ctx               context.Context
		WhereSearchName   string
		WhereInCategories []uuid.UUID
		Order             parameter.PermissionOrderMethod
		Pg                parameter.Pagination
		Limit             parameter.Limit
		Cursor            parameter.Cursor
		Offset            parameter.Offset
		WithCount         parameter.WithCount
	}{
		Ctx:               ctx,
		WhereSearchName:   whereSearchName,
		WhereInCategories: whereInCategories,
		Order:             order,
		Pg:                pg,
		Limit:             limit,
		Cursor:            cursor,
		Offset:            offset,
		WithCount:         withCount,
	}
	mock.lockGetPermissionsWithCategory.Lock()
	mock.calls.GetPermissionsWithCategory = append(mock.calls.GetPermissionsWithCategory, callInfo)
	mock.lockGetPermissionsWithCategory.Unlock()
	return mock.GetPermissionsWithCategoryFunc(ctx, whereSearchName, whereInCategories, order, pg, limit, cursor, offset, withCount)
}

// GetPermissionsWithCategoryCalls gets all the calls that were made to GetPermissionsWithCategory.
// Check the length with:
//
//	len(mockedManagerInterface.GetPermissionsWithCategoryCalls())
func (mock *ManagerInterfaceMock) GetPermissionsWithCategoryCalls() []struct {
	Ctx               context.Context
	WhereSearchName   string
	WhereInCategories []uuid.UUID
	Order             parameter.PermissionOrderMethod
	Pg                parameter.Pagination
	Limit             parameter.Limit
	Cursor            parameter.Cursor
	Offset            parameter.Offset
	WithCount         parameter.WithCount
} {
	var calls []struct {
		Ctx               context.Context
		WhereSearchName   string
		WhereInCategories []uuid.UUID
		Order             parameter.PermissionOrderMethod
		Pg                parameter.Pagination
		Limit             parameter.Limit
		Cursor            parameter.Cursor
		Offset            parameter.Offset
		WithCount         parameter.WithCount
	}
	mock.lockGetPermissionsWithCategory.RLock()
	calls = mock.calls.GetPermissionsWithCategory
	mock.lockGetPermissionsWithCategory.RUnlock()
	return calls
}

// GetPolicies calls GetPoliciesFunc.
func (mock *ManagerInterfaceMock) GetPolicies(ctx context.Context, whereSearchName string, whereInCategories []uuid.UUID, order parameter.PolicyOrderMethod, pg parameter.Pagination, limit parameter.Limit, cursor parameter.Cursor, offset parameter.Offset, withCount parameter.WithCount) (store.ListResult[entity.Policy], error) {
	if mock.GetPoliciesFunc == nil {
		panic("ManagerInterfaceMock.GetPoliciesFunc: method is nil but ManagerInterface.GetPolicies was just called")
	}
	callInfo := struct {
		Ctx               context.Context
		WhereSearchName   string
		WhereInCategories []uuid.UUID
		Order             parameter.PolicyOrderMethod
		Pg                parameter.Pagination
		Limit             parameter.Limit
		Cursor            parameter.Cursor
		Offset            parameter.Offset
		WithCount         parameter.WithCount
	}{
		Ctx:               ctx,
		WhereSearchName:   whereSearchName,
		WhereInCategories: whereInCategories,
		Order:             order,
		Pg:                pg,
		Limit:             limit,
		Cursor:            cursor,
		Offset:            offset,
		WithCount:         withCount,
	}
	mock.lockGetPolicies.Lock()
	mock.calls.GetPolicies = append(mock.calls.GetPolicies, callInfo)
	mock.lockGetPolicies.Unlock()
	return mock.GetPoliciesFunc(ctx, whereSearchName, whereInCategories, order, pg, limit, cursor, offset, withCount)
}

// GetPoliciesCalls gets all the calls that were made to GetPolicies.
// Check the length with:
//
//	len(mockedManagerInterface.GetPoliciesCalls())
func (mock *ManagerInterfaceMock) GetPoliciesCalls() []struct {
	Ctx               context.Context
	WhereSearchName   string
	WhereInCategories []uuid.UUID
	Order             parameter.PolicyOrderMethod
	Pg                parameter.Pagination
	Limit             parameter.Limit
	Cursor            parameter.Cursor
	Offset            parameter.Offset
	WithCount         parameter.WithCount
} {
	var calls []struct {
		Ctx               context.Context
		WhereSearchName   string
		WhereInCategories []uuid.UUID
		Order             parameter.PolicyOrderMethod
		Pg                parameter.Pagination
		Limit             parameter.Limit
		Cursor            parameter.Cursor
		Offset            parameter.Offset
		WithCount         parameter.WithCount
	}
	mock.lockGetPolicies.RLock()
	calls = mock.calls.GetPolicies
	mock.lockGetPolicies.RUnlock()
	return calls
}

// GetPoliciesCount calls GetPoliciesCountFunc.
func (mock *ManagerInterfaceMock) GetPoliciesCount(ctx context.Context, whereSearchName string, whereInCategories []uuid.UUID) (int64, error) {
	if mock.GetPoliciesCountFunc == nil {
		panic("ManagerInterfaceMock.GetPoliciesCountFunc: method is nil but ManagerInterface.GetPoliciesCount was just called")
	}
	callInfo := struct {
		Ctx               context.Context
		WhereSearchName   string
		WhereInCategories []uuid.UUID
	}{
		Ctx:               ctx,
		WhereSearchName:   whereSearchName,
		WhereInCategories: whereInCategories,
	}
	mock.lockGetPoliciesCount.Lock()
	mock.calls.GetPoliciesCount = append(mock.calls.GetPoliciesCount, callInfo)
	mock.lockGetPoliciesCount.Unlock()
	return mock.GetPoliciesCountFunc(ctx, whereSearchName, whereInCategories)
}

// GetPoliciesCountCalls gets all the calls that were made to GetPoliciesCount.
// Check the length with:
//
//	len(mockedManagerInterface.GetPoliciesCountCalls())
func (mock *ManagerInterfaceMock) GetPoliciesCountCalls() []struct {
	Ctx               context.Context
	WhereSearchName   string
	WhereInCategories []uuid.UUID
} {
	var calls []struct {
		Ctx               context.Context
		WhereSearchName   string
		WhereInCategories []uuid.UUID
	}
	mock.lockGetPoliciesCount.RLock()
	calls = mock.calls.GetPoliciesCount
	mock.lockGetPoliciesCount.RUnlock()
	return calls
}

// GetPoliciesOnRole calls GetPoliciesOnRoleFunc.
func (mock *ManagerInterfaceMock) GetPoliciesOnRole(ctx context.Context, roleID uuid.UUID, whereSearchName string, order parameter.PolicyOnRoleOrderMethod, pg parameter.Pagination, limit parameter.Limit, cursor parameter.Cursor, offset parameter.Offset, withCount parameter.WithCount) (store.ListResult[entity.PolicyOnRole], error) {
	if mock.GetPoliciesOnRoleFunc == nil {
		panic("ManagerInterfaceMock.GetPoliciesOnRoleFunc: method is nil but ManagerInterface.GetPoliciesOnRole was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		RoleID          uuid.UUID
		WhereSearchName string
		Order           parameter.PolicyOnRoleOrderMethod
		Pg              parameter.Pagination
		Limit           parameter.Limit
		Cursor          parameter.Cursor
		Offset          parameter.Offset
		WithCount       parameter.WithCount
	}{
		Ctx:             ctx,
		RoleID:          roleID,
		WhereSearchName: whereSearchName,
		Order:           order,
		Pg:              pg,
		Limit:           limit,
		Cursor:          cursor,
		Offset:          offset,
		WithCount:       withCount,
	}
	mock.lockGetPoliciesOnRole.Lock()
	mock.calls.GetPoliciesOnRole = append(mock.calls.GetPoliciesOnRole, callInfo)
	mock.lockGetPoliciesOnRole.Unlock()
	return mock.GetPoliciesOnRoleFunc(ctx, roleID, whereSearchName, order, pg, limit, cursor, offset, withCount)
}

// GetPoliciesOnRoleCalls gets all the calls that were made to GetPoliciesOnRole.
// Check the length with:
//
//	len(mockedManagerInterface.GetPoliciesOnRoleCalls())
func (mock *ManagerInterfaceMock) GetPoliciesOnRoleCalls() []struct {
	Ctx             context.Context
	RoleID          uuid.UUID
	WhereSearchName string
	Order           parameter.PolicyOnRoleOrderMethod
	Pg              parameter.Pagination
	Limit           parameter.Limit
	Cursor          parameter.Cursor
	Offset          parameter.Offset
	WithCount       parameter.WithCount
} {
	var calls []struct {
		Ctx             context.Context
		RoleID          uuid.UUID
		WhereSearchName string
		Order           parameter.PolicyOnRoleOrderMethod
		Pg              parameter.Pagination
		Limit           parameter.Limit
		Cursor          parameter.Cursor
		Offset          parameter.Offset
		WithCount       parameter.WithCount
	}
	mock.lockGetPoliciesOnRole.RLock()
	calls = mock.calls.GetPoliciesOnRole
	mock.lockGetPoliciesOnRole.RUnlock()
	return calls
}

// GetPoliciesOnRoleCount calls GetPoliciesOnRoleCountFunc.
func (mock *ManagerInterfaceMock) GetPoliciesOnRoleCount(ctx context.Context, roleID uuid.UUID, whereSearchName string) (int64, error) {
	if mock.GetPoliciesOnRoleCountFunc == nil {
		panic("ManagerInterfaceMock.GetPoliciesOnRoleCountFunc: method is nil but ManagerInterface.GetPoliciesOnRoleCount was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		RoleID          uuid.UUID
		WhereSearchName string
	}{
		Ctx:             ctx,
		RoleID:          roleID,
		WhereSearchName: whereSearchName,
	}
	mock.lockGetPoliciesOnRoleCount.Lock()
	mock.calls.GetPoliciesOnRoleCount = append(mock.calls.GetPoliciesOnRoleCount, callInfo)
	mock.lockGetPoliciesOnRoleCount.Unlock()
	return mock.GetPoliciesOnRoleCountFunc(ctx, roleID, whereSearchName)
}

// GetPoliciesOnRoleCountCalls gets all the calls that were made to GetPoliciesOnRoleCount.
// Check the length with:
//
//	len(mockedManagerInterface.GetPoliciesOnRoleCountCalls())
func (mock *ManagerInterfaceMock) GetPoliciesOnRoleCountCalls() []struct {
	Ctx             context.Context
	RoleID          uuid.UUID
	WhereSearchName string
} {
	var calls []struct {
		Ctx             context.Context
		RoleID          uuid.UUID
		WhereSearchName string
	}
	mock.lockGetPoliciesOnRoleCount.RLock()
	calls = mock.calls.GetPoliciesOnRoleCount
	mock.lockGetPoliciesOnRoleCount.RUnlock()
	return calls
}

// GetPoliciesWithCategory calls GetPoliciesWithCategoryFunc.
func (mock *ManagerInterfaceMock) GetPoliciesWithCategory(ctx context.Context, whereSearchName string, whereInCategories []uuid.UUID, order parameter.PolicyOrderMethod, pg parameter.Pagination, limit parameter.Limit, cursor parameter.Cursor, offset parameter.Offset, withCount parameter.WithCount) (store.ListResult[entity.PolicyWithCategory], error) {
	if mock.GetPoliciesWithCategoryFunc == nil {
		panic("ManagerInterfaceMock.GetPoliciesWithCategoryFunc: method is nil but ManagerInterface.GetPoliciesWithCategory was just called")
	}
	callInfo := struct {
		Ctx               context.Context
		WhereSearchName   string
		WhereInCategories []uuid.UUID
		Order             parameter.PolicyOrderMethod
		Pg                parameter.Pagination
		Limit             parameter.Limit
		Cursor            parameter.Cursor
		Offset            parameter.Offset
		WithCount         parameter.WithCount
	}{
		Ctx:               ctx,
		WhereSearchName:   whereSearchName,
		WhereInCategories: whereInCategories,
		Order:             order,
		Pg:                pg,
		Limit:             limit,
		Cursor:            cursor,
		Offset:            offset,
		WithCount:         withCount,
	}
	mock.lockGetPoliciesWithCategory.Lock()
	mock.calls.GetPoliciesWithCategory = append(mock.calls.GetPoliciesWithCategory, callInfo)
	mock.lockGetPoliciesWithCategory.Unlock()
	return mock.GetPoliciesWithCategoryFunc(ctx, whereSearchName, whereInCategories, order, pg, limit, cursor, offset, withCount)
}

// GetPoliciesWithCategoryCalls gets all the calls that were made to GetPoliciesWithCategory.
// Check the length with:
//
//	len(mockedManagerInterface.GetPoliciesWithCategoryCalls())
func (mock *ManagerInterfaceMock) GetPoliciesWithCategoryCalls() []struct {
	Ctx               context.Context
	WhereSearchName   string
	WhereInCategories []uuid.UUID
	Order             parameter.PolicyOrderMethod
	Pg                parameter.Pagination
	Limit             parameter.Limit
	Cursor            parameter.Cursor
	Offset            parameter.Offset
	WithCount         parameter.WithCount
} {
	var calls []struct {
		Ctx               context.Context
		WhereSearchName   string
		WhereInCategories []uuid.UUID
		Order             parameter.PolicyOrderMethod
		Pg                parameter.Pagination
		Limit             parameter.Limit
		Cursor            parameter.Cursor
		Offset            parameter.Offset
		WithCount         parameter.WithCount
	}
	mock.lockGetPoliciesWithCategory.RLock()
	calls = mock.calls.GetPoliciesWithCategory
	mock.lockGetPoliciesWithCategory.RUnlock()
	return calls
}

// GetPolicyCategories calls GetPolicyCategoriesFunc.
func (mock *ManagerInterfaceMock) GetPolicyCategories(ctx context.Context, whereSearchName string, order parameter.PolicyCategoryOrderMethod, pg parameter.Pagination, limit parameter.Limit, cursor parameter.Cursor, offset parameter.Offset, withCount parameter.WithCount) (store.ListResult[entity.PolicyCategory], error) {
	if mock.GetPolicyCategoriesFunc == nil {
		panic("ManagerInterfaceMock.GetPolicyCategoriesFunc: method is nil but ManagerInterface.GetPolicyCategories was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		WhereSearchName string
		Order           parameter.PolicyCategoryOrderMethod
		Pg              parameter.Pagination
		Limit           parameter.Limit
		Cursor          parameter.Cursor
		Offset          parameter.Offset
		WithCount       parameter.WithCount
	}{
		Ctx:             ctx,
		WhereSearchName: whereSearchName,
		Order:           order,
		Pg:              pg,
		Limit:           limit,
		Cursor:          cursor,
		Offset:          offset,
		WithCount:       withCount,
	}
	mock.lockGetPolicyCategories.Lock()
	mock.calls.GetPolicyCategories = append(mock.calls.GetPolicyCategories, callInfo)
	mock.lockGetPolicyCategories.Unlock()
	return mock.GetPolicyCategoriesFunc(ctx, whereSearchName, order, pg, limit, cursor, offset, withCount)
}

// GetPolicyCategoriesCalls gets all the calls that were made to GetPolicyCategories.
// Check the length with:
//
//	len(mockedManagerInterface.GetPolicyCategoriesCalls())
func (mock *ManagerInterfaceMock) GetPolicyCategoriesCalls() []struct {
	Ctx             context.Context
	WhereSearchName string
	Order           parameter.PolicyCategoryOrderMethod
	Pg              parameter.Pagination
	Limit           parameter.Limit
	Cursor          parameter.Cursor
	Offset          parameter.Offset
	WithCount       parameter.WithCount
} {
	var calls []struct {
		Ctx             context.Context
		WhereSearchName string
		Order           parameter.PolicyCategoryOrderMethod
		Pg              parameter.Pagination
		Limit           parameter.Limit
		Cursor          parameter.Cursor
		Offset          parameter.Offset
		WithCount       parameter.WithCount
	}
	mock.lockGetPolicyCategories.RLock()
	calls = mock.calls.GetPolicyCategories
	mock.lockGetPolicyCategories.RUnlock()
	return calls
}

// GetPolicyCategoriesCount calls GetPolicyCategoriesCountFunc.
func (mock *ManagerInterfaceMock) GetPolicyCategoriesCount(ctx context.Context, whereSearchName string) (int64, error) {
	if mock.GetPolicyCategoriesCountFunc == nil {
		panic("ManagerInterfaceMock.GetPolicyCategoriesCountFunc: method is nil but ManagerInterface.GetPolicyCategoriesCount was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		WhereSearchName string
	}{
		Ctx:             ctx,
		WhereSearchName: whereSearchName,
	}
	mock.lockGetPolicyCategoriesCount.Lock()
	mock.calls.GetPolicyCategoriesCount = append(mock.calls.GetPolicyCategoriesCount, callInfo)
	mock.lockGetPolicyCategoriesCount.Unlock()
	return mock.GetPolicyCategoriesCountFunc(ctx, whereSearchName)
}

// GetPolicyCategoriesCountCalls gets all the calls that were made to GetPolicyCategoriesCount.
// Check the length with:
//
//	len(mockedManagerInterface.GetPolicyCategoriesCountCalls())
func (mock *ManagerInterfaceMock) GetPolicyCategoriesCountCalls() []struct {
	Ctx             context.Context
	WhereSearchName string
} {
	var calls []struct {
		Ctx             context.Context
		WhereSearchName string
	}
	mock.lockGetPolicyCategoriesCount.RLock()
	calls = mock.calls.GetPolicyCategoriesCount
	mock.lockGetPolicyCategoriesCount.RUnlock()
	return calls
}

// GetRecordTypes calls GetRecordTypesFunc.
func (mock *ManagerInterfaceMock) GetRecordTypes(ctx context.Context, whereSearchName string, order parameter.RecordTypeOrderMethod, pg parameter.Pagination, limit parameter.Limit, cursor parameter.Cursor, offset parameter.Offset, withCount parameter.WithCount) (store.ListResult[entity.RecordType], error) {
	if mock.GetRecordTypesFunc == nil {
		panic("ManagerInterfaceMock.GetRecordTypesFunc: method is nil but ManagerInterface.GetRecordTypes was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		WhereSearchName string
		Order           parameter.RecordTypeOrderMethod
		Pg              parameter.Pagination
		Limit           parameter.Limit
		Cursor          parameter.Cursor
		Offset          parameter.Offset
		WithCount       parameter.WithCount
	}{
		Ctx:             ctx,
		WhereSearchName: whereSearchName,
		Order:           order,
		Pg:              pg,
		Limit:           limit,
		Cursor:          cursor,
		Offset:          offset,
		WithCount:       withCount,
	}
	mock.lockGetRecordTypes.Lock()
	mock.calls.GetRecordTypes = append(mock.calls.GetRecordTypes, callInfo)
	mock.lockGetRecordTypes.Unlock()
	return mock.GetRecordTypesFunc(ctx, whereSearchName, order, pg, limit, cursor, offset, withCount)
}

// GetRecordTypesCalls gets all the calls that were made to GetRecordTypes.
// Check the length with:
//
//	len(mockedManagerInterface.GetRecordTypesCalls())
func (mock *ManagerInterfaceMock) GetRecordTypesCalls() []struct {
	Ctx             context.Context
	WhereSearchName string
	Order           parameter.RecordTypeOrderMethod
	Pg              parameter.Pagination
	Limit           parameter.Limit
	Cursor          parameter.Cursor
	Offset          parameter.Offset
	WithCount       parameter.WithCount
} {
	var calls []struct {
		Ctx             context.Context
		WhereSearchName string
		Order           parameter.RecordTypeOrderMethod
		Pg              parameter.Pagination
		Limit           parameter.Limit
		Cursor          parameter.Cursor
		Offset          parameter.Offset
		WithCount       parameter.WithCount
	}
	mock.lockGetRecordTypes.RLock()
	calls = mock.calls.GetRecordTypes
	mock.lockGetRecordTypes.RUnlock()
	return calls
}

// GetRecordTypesCount calls GetRecordTypesCountFunc.
func (mock *ManagerInterfaceMock) GetRecordTypesCount(ctx context.Context, whereSearchName string) (int64, error) {
	if mock.GetRecordTypesCountFunc == nil {
		panic("ManagerInterfaceMock.GetRecordTypesCountFunc: method is nil but ManagerInterface.GetRecordTypesCount was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		WhereSearchName string
	}{
		Ctx:             ctx,
		WhereSearchName: whereSearchName,
	}
	mock.lockGetRecordTypesCount.Lock()
	mock.calls.GetRecordTypesCount = append(mock.calls.GetRecordTypesCount, callInfo)
	mock.lockGetRecordTypesCount.Unlock()
	return mock.GetRecordTypesCountFunc(ctx, whereSearchName)
}

// GetRecordTypesCountCalls gets all the calls that were made to GetRecordTypesCount.
// Check the length with:
//
//	len(mockedManagerInterface.GetRecordTypesCountCalls())
func (mock *ManagerInterfaceMock) GetRecordTypesCountCalls() []struct {
	Ctx             context.Context
	WhereSearchName string
} {
	var calls []struct {
		Ctx             context.Context
		WhereSearchName string
	}
	mock.lockGetRecordTypesCount.RLock()
	calls = mock.calls.GetRecordTypesCount
	mock.lockGetRecordTypesCount.RUnlock()
	return calls
}

// GetRoles calls GetRolesFunc.
func (mock *ManagerInterfaceMock) GetRoles(ctx context.Context, whereSearchName string, order parameter.RoleOrderMethod, pg parameter.Pagination, limit parameter.Limit, cursor parameter.Cursor, offset parameter.Offset, withCount parameter.WithCount) (store.ListResult[entity.Role], error) {
	if mock.GetRolesFunc == nil {
		panic("ManagerInterfaceMock.GetRolesFunc: method is nil but ManagerInterface.GetRoles was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		WhereSearchName string
		Order           parameter.RoleOrderMethod
		Pg              parameter.Pagination
		Limit           parameter.Limit
		Cursor          parameter.Cursor
		Offset          parameter.Offset
		WithCount       parameter.WithCount
	}{
		Ctx:             ctx,
		WhereSearchName: whereSearchName,
		Order:           order,
		Pg:              pg,
		Limit:           limit,
		Cursor:          cursor,
		Offset:          offset,
		WithCount:       withCount,
	}
	mock.lockGetRoles.Lock()
	mock.calls.GetRoles = append(mock.calls.GetRoles, callInfo)
	mock.lockGetRoles.Unlock()
	return mock.GetRolesFunc(ctx, whereSearchName, order, pg, limit, cursor, offset, withCount)
}

// GetRolesCalls gets all the calls that were made to GetRoles.
// Check the length with:
//
//	len(mockedManagerInterface.GetRolesCalls())
func (mock *ManagerInterfaceMock) GetRolesCalls() []struct {
	Ctx             context.Context
	WhereSearchName string
	Order           parameter.RoleOrderMethod
	Pg              parameter.Pagination
	Limit           parameter.Limit
	Cursor          parameter.Cursor
	Offset          parameter.Offset
	WithCount       parameter.WithCount
} {
	var calls []struct {
		Ctx             context.Context
		WhereSearchName string
		Order           parameter.RoleOrderMethod
		Pg              parameter.Pagination
		Limit           parameter.Limit
		Cursor          parameter.Cursor
		Offset          parameter.Offset
		WithCount       parameter.WithCount
	}
	mock.lockGetRoles.RLock()
	calls = mock.calls.GetRoles
	mock.lockGetRoles.RUnlock()
	return calls
}

// GetRolesCount calls GetRolesCountFunc.
func (mock *ManagerInterfaceMock) GetRolesCount(ctx context.Context, whereSearchName string) (int64, error) {
	if mock.GetRolesCountFunc == nil {
		panic("ManagerInterfaceMock.GetRolesCountFunc: method is nil but ManagerInterface.GetRolesCount was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		WhereSearchName string
	}{
		Ctx:             ctx,
		WhereSearchName: whereSearchName,
	}
	mock.lockGetRolesCount.Lock()
	mock.calls.GetRolesCount = append(mock.calls.GetRolesCount, callInfo)
	mock.lockGetRolesCount.Unlock()
	return mock.GetRolesCountFunc(ctx, whereSearchName)
}

// GetRolesCountCalls gets all the calls that were made to GetRolesCount.
// Check the length with:
//
//	len(mockedManagerInterface.GetRolesCountCalls())
func (mock *ManagerInterfaceMock) GetRolesCountCalls() []struct {
	Ctx             context.Context
	WhereSearchName string
} {
	var calls []struct {
		Ctx             context.Context
		WhereSearchName string
	}
	mock.lockGetRolesCount.RLock()
	calls = mock.calls.GetRolesCount
	mock.lockGetRolesCount.RUnlock()
	return calls
}

// GetRolesOnPolicy calls GetRolesOnPolicyFunc.
func (mock *ManagerInterfaceMock) GetRolesOnPolicy(ctx context.Context, policyID uuid.UUID, whereSearchName string, order parameter.RoleOnPolicyOrderMethod, pg parameter.Pagination, limit parameter.Limit, cursor parameter.Cursor, offset parameter.Offset, withCount parameter.WithCount) (store.ListResult[entity.RoleOnPolicy], error) {
	if mock.GetRolesOnPolicyFunc == nil {
		panic("ManagerInterfaceMock.GetRolesOnPolicyFunc: method is nil but ManagerInterface.GetRolesOnPolicy was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		PolicyID        uuid.UUID
		WhereSearchName string
		Order           parameter.RoleOnPolicyOrderMethod
		Pg              parameter.Pagination
		Limit           parameter.Limit
		Cursor          parameter.Cursor
		Offset          parameter.Offset
		WithCount       parameter.WithCount
	}{
		Ctx:             ctx,
		PolicyID:        policyID,
		WhereSearchName: whereSearchName,
		Order:           order,
		Pg:              pg,
		Limit:           limit,
		Cursor:          cursor,
		Offset:          offset,
		WithCount:       withCount,
	}
	mock.lockGetRolesOnPolicy.Lock()
	mock.calls.GetRolesOnPolicy = append(mock.calls.GetRolesOnPolicy, callInfo)
	mock.lockGetRolesOnPolicy.Unlock()
	return mock.GetRolesOnPolicyFunc(ctx, policyID, whereSearchName, order, pg, limit, cursor, offset, withCount)
}

// GetRolesOnPolicyCalls gets all the calls that were made to GetRolesOnPolicy.
// Check the length with:
//
//	len(mockedManagerInterface.GetRolesOnPolicyCalls())
func (mock *ManagerInterfaceMock) GetRolesOnPolicyCalls() []struct {
	Ctx             context.Context
	PolicyID        uuid.UUID
	WhereSearchName string
	Order           parameter.RoleOnPolicyOrderMethod
	Pg              parameter.Pagination
	Limit           parameter.Limit
	Cursor          parameter.Cursor
	Offset          parameter.Offset
	WithCount       parameter.WithCount
} {
	var calls []struct {
		Ctx             context.Context
		PolicyID        uuid.UUID
		WhereSearchName string
		Order           parameter.RoleOnPolicyOrderMethod
		Pg              parameter.Pagination
		Limit           parameter.Limit
		Cursor          parameter.Cursor
		Offset          parameter.Offset
		WithCount       parameter.WithCount
	}
	mock.lockGetRolesOnPolicy.RLock()
	calls = mock.calls.GetRolesOnPolicy
	mock.lockGetRolesOnPolicy.RUnlock()
	return calls
}

// GetRolesOnPolicyCount calls GetRolesOnPolicyCountFunc.
func (mock *ManagerInterfaceMock) GetRolesOnPolicyCount(ctx context.Context, policyID uuid.UUID, whereSearchName string) (int64, error) {
	if mock.GetRolesOnPolicyCountFunc == nil {
		panic("ManagerInterfaceMock.GetRolesOnPolicyCountFunc: method is nil but ManagerInterface.GetRolesOnPolicyCount was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		PolicyID        uuid.UUID
		WhereSearchName string
	}{
		Ctx:             ctx,
		PolicyID:        policyID,
		WhereSearchName: whereSearchName,
	}
	mock.lockGetRolesOnPolicyCount.Lock()
	mock.calls.GetRolesOnPolicyCount = append(mock.calls.GetRolesOnPolicyCount, callInfo)
	mock.lockGetRolesOnPolicyCount.Unlock()
	return mock.GetRolesOnPolicyCountFunc(ctx, policyID, whereSearchName)
}

// GetRolesOnPolicyCountCalls gets all the calls that were made to GetRolesOnPolicyCount.
// Check the length with:
//
//	len(mockedManagerInterface.GetRolesOnPolicyCountCalls())
func (mock *ManagerInterfaceMock) GetRolesOnPolicyCountCalls() []struct {
	Ctx             context.Context
	PolicyID        uuid.UUID
	WhereSearchName string
} {
	var calls []struct {
		Ctx             context.Context
		PolicyID        uuid.UUID
		WhereSearchName string
	}
	mock.lockGetRolesOnPolicyCount.RLock()
	calls = mock.calls.GetRolesOnPolicyCount
	mock.lockGetRolesOnPolicyCount.RUnlock()
	return calls
}

// PluralDeleteAttendStatuses calls PluralDeleteAttendStatusesFunc.
func (mock *ManagerInterfaceMock) PluralDeleteAttendStatuses(ctx context.Context, ids []uuid.UUID) (int64, error) {
	if mock.PluralDeleteAttendStatusesFunc == nil {
		panic("ManagerInterfaceMock.PluralDeleteAttendStatusesFunc: method is nil but ManagerInterface.PluralDeleteAttendStatuses was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Ids []uuid.UUID
	}{
		Ctx: ctx,
		Ids: ids,
	}
	mock.lockPluralDeleteAttendStatuses.Lock()
	mock.calls.PluralDeleteAttendStatuses = append(mock.calls.PluralDeleteAttendStatuses, callInfo)
	mock.lockPluralDeleteAttendStatuses.Unlock()
	return mock.PluralDeleteAttendStatusesFunc(ctx, ids)
}

// PluralDeleteAttendStatusesCalls gets all the calls that were made to PluralDeleteAttendStatuses.
// Check the length with:
//
//	len(mockedManagerInterface.PluralDeleteAttendStatusesCalls())
func (mock *ManagerInterfaceMock) PluralDeleteAttendStatusesCalls() []struct {
	Ctx context.Context
	Ids []uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		Ids []uuid.UUID
	}
	mock.lockPluralDeleteAttendStatuses.RLock()
	calls = mock.calls.PluralDeleteAttendStatuses
	mock.lockPluralDeleteAttendStatuses.RUnlock()
	return calls
}

// PluralDeleteAttendanceTypes calls PluralDeleteAttendanceTypesFunc.
func (mock *ManagerInterfaceMock) PluralDeleteAttendanceTypes(ctx context.Context, ids []uuid.UUID) (int64, error) {
	if mock.PluralDeleteAttendanceTypesFunc == nil {
		panic("ManagerInterfaceMock.PluralDeleteAttendanceTypesFunc: method is nil but ManagerInterface.PluralDeleteAttendanceTypes was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Ids []uuid.UUID
	}{
		Ctx: ctx,
		Ids: ids,
	}
	mock.lockPluralDeleteAttendanceTypes.Lock()
	mock.calls.PluralDeleteAttendanceTypes = append(mock.calls.PluralDeleteAttendanceTypes, callInfo)
	mock.lockPluralDeleteAttendanceTypes.Unlock()
	return mock.PluralDeleteAttendanceTypesFunc(ctx, ids)
}

// PluralDeleteAttendanceTypesCalls gets all the calls that were made to PluralDeleteAttendanceTypes.
// Check the length with:
//
//	len(mockedManagerInterface.PluralDeleteAttendanceTypesCalls())
func (mock *ManagerInterfaceMock) PluralDeleteAttendanceTypesCalls() []struct {
	Ctx context.Context
	Ids []uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		Ids []uuid.UUID
	}
	mock.lockPluralDeleteAttendanceTypes.RLock()
	calls = mock.calls.PluralDeleteAttendanceTypes
	mock.lockPluralDeleteAttendanceTypes.RUnlock()
	return calls
}

// PluralDeleteEventTypes calls PluralDeleteEventTypesFunc.
func (mock *ManagerInterfaceMock) PluralDeleteEventTypes(ctx context.Context, ids []uuid.UUID) (int64, error) {
	if mock.PluralDeleteEventTypesFunc == nil {
		panic("ManagerInterfaceMock.PluralDeleteEventTypesFunc: method is nil but ManagerInterface.PluralDeleteEventTypes was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Ids []uuid.UUID
	}{
		Ctx: ctx,
		Ids: ids,
	}
	mock.lockPluralDeleteEventTypes.Lock()
	mock.calls.PluralDeleteEventTypes = append(mock.calls.PluralDeleteEventTypes, callInfo)
	mock.lockPluralDeleteEventTypes.Unlock()
	return mock.PluralDeleteEventTypesFunc(ctx, ids)
}

// PluralDeleteEventTypesCalls gets all the calls that were made to PluralDeleteEventTypes.
// Check the length with:
//
//	len(mockedManagerInterface.PluralDeleteEventTypesCalls())
func (mock *ManagerInterfaceMock) PluralDeleteEventTypesCalls() []struct {
	Ctx context.Context
	Ids []uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		Ids []uuid.UUID
	}
	mock.lockPluralDeleteEventTypes.RLock()
	calls = mock.calls.PluralDeleteEventTypes
	mock.lockPluralDeleteEventTypes.RUnlock()
	return calls
}

// PluralDeleteMimeTypes calls PluralDeleteMimeTypesFunc.
func (mock *ManagerInterfaceMock) PluralDeleteMimeTypes(ctx context.Context, ids []uuid.UUID) (int64, error) {
	if mock.PluralDeleteMimeTypesFunc == nil {
		panic("ManagerInterfaceMock.PluralDeleteMimeTypesFunc: method is nil but ManagerInterface.PluralDeleteMimeTypes was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Ids []uuid.UUID
	}{
		Ctx: ctx,
		Ids: ids,
	}
	mock.lockPluralDeleteMimeTypes.Lock()
	mock.calls.PluralDeleteMimeTypes = append(mock.calls.PluralDeleteMimeTypes, callInfo)
	mock.lockPluralDeleteMimeTypes.Unlock()
	return mock.PluralDeleteMimeTypesFunc(ctx, ids)
}

// PluralDeleteMimeTypesCalls gets all the calls that were made to PluralDeleteMimeTypes.
// Check the length with:
//
//	len(mockedManagerInterface.PluralDeleteMimeTypesCalls())
func (mock *ManagerInterfaceMock) PluralDeleteMimeTypesCalls() []struct {
	Ctx context.Context
	Ids []uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		Ids []uuid.UUID
	}
	mock.lockPluralDeleteMimeTypes.RLock()
	calls = mock.calls.PluralDeleteMimeTypes
	mock.lockPluralDeleteMimeTypes.RUnlock()
	return calls
}

// PluralDeletePermissionCategories calls PluralDeletePermissionCategoriesFunc.
func (mock *ManagerInterfaceMock) PluralDeletePermissionCategories(ctx context.Context, ids []uuid.UUID) (int64, error) {
	if mock.PluralDeletePermissionCategoriesFunc == nil {
		panic("ManagerInterfaceMock.PluralDeletePermissionCategoriesFunc: method is nil but ManagerInterface.PluralDeletePermissionCategories was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Ids []uuid.UUID
	}{
		Ctx: ctx,
		Ids: ids,
	}
	mock.lockPluralDeletePermissionCategories.Lock()
	mock.calls.PluralDeletePermissionCategories = append(mock.calls.PluralDeletePermissionCategories, callInfo)
	mock.lockPluralDeletePermissionCategories.Unlock()
	return mock.PluralDeletePermissionCategoriesFunc(ctx, ids)
}

// PluralDeletePermissionCategoriesCalls gets all the calls that were made to PluralDeletePermissionCategories.
// Check the length with:
//
//	len(mockedManagerInterface.PluralDeletePermissionCategoriesCalls())
func (mock *ManagerInterfaceMock) PluralDeletePermissionCategoriesCalls() []struct {
	Ctx context.Context
	Ids []uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		Ids []uuid.UUID
	}
	mock.lockPluralDeletePermissionCategories.RLock()
	calls = mock.calls.PluralDeletePermissionCategories
	mock.lockPluralDeletePermissionCategories.RUnlock()
	return calls
}

// PluralDeletePermissions calls PluralDeletePermissionsFunc.
func (mock *ManagerInterfaceMock) PluralDeletePermissions(ctx context.Context, ids []uuid.UUID) (int64, error) {
	if mock.PluralDeletePermissionsFunc == nil {
		panic("ManagerInterfaceMock.PluralDeletePermissionsFunc: method is nil but ManagerInterface.PluralDeletePermissions was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Ids []uuid.UUID
	}{
		Ctx: ctx,
		Ids: ids,
	}
	mock.lockPluralDeletePermissions.Lock()
	mock.calls.PluralDeletePermissions = append(mock.calls.PluralDeletePermissions, callInfo)
	mock.lockPluralDeletePermissions.Unlock()
	return mock.PluralDeletePermissionsFunc(ctx, ids)
}

// PluralDeletePermissionsCalls gets all the calls that were made to PluralDeletePermissions.
// Check the length with:
//
//	len(mockedManagerInterface.PluralDeletePermissionsCalls())
func (mock *ManagerInterfaceMock) PluralDeletePermissionsCalls() []struct {
	Ctx context.Context
	Ids []uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		Ids []uuid.UUID
	}
	mock.lockPluralDeletePermissions.RLock()
	calls = mock.calls.PluralDeletePermissions
	mock.lockPluralDeletePermissions.RUnlock()
	return calls
}

// PluralDeletePolicies calls PluralDeletePoliciesFunc.
func (mock *ManagerInterfaceMock) PluralDeletePolicies(ctx context.Context, ids []uuid.UUID) (int64, error) {
	if mock.PluralDeletePoliciesFunc == nil {
		panic("ManagerInterfaceMock.PluralDeletePoliciesFunc: method is nil but ManagerInterface.PluralDeletePolicies was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Ids []uuid.UUID
	}{
		Ctx: ctx,
		Ids: ids,
	}
	mock.lockPluralDeletePolicies.Lock()
	mock.calls.PluralDeletePolicies = append(mock.calls.PluralDeletePolicies, callInfo)
	mock.lockPluralDeletePolicies.Unlock()
	return mock.PluralDeletePoliciesFunc(ctx, ids)
}

// PluralDeletePoliciesCalls gets all the calls that were made to PluralDeletePolicies.
// Check the length with:
//
//	len(mockedManagerInterface.PluralDeletePoliciesCalls())
func (mock *ManagerInterfaceMock) PluralDeletePoliciesCalls() []struct {
	Ctx context.Context
	Ids []uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		Ids []uuid.UUID
	}
	mock.lockPluralDeletePolicies.RLock()
	calls = mock.calls.PluralDeletePolicies
	mock.lockPluralDeletePolicies.RUnlock()
	return calls
}

// PluralDeletePolicyCategories calls PluralDeletePolicyCategoriesFunc.
func (mock *ManagerInterfaceMock) PluralDeletePolicyCategories(ctx context.Context, ids []uuid.UUID) (int64, error) {
	if mock.PluralDeletePolicyCategoriesFunc == nil {
		panic("ManagerInterfaceMock.PluralDeletePolicyCategoriesFunc: method is nil but ManagerInterface.PluralDeletePolicyCategories was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Ids []uuid.UUID
	}{
		Ctx: ctx,
		Ids: ids,
	}
	mock.lockPluralDeletePolicyCategories.Lock()
	mock.calls.PluralDeletePolicyCategories = append(mock.calls.PluralDeletePolicyCategories, callInfo)
	mock.lockPluralDeletePolicyCategories.Unlock()
	return mock.PluralDeletePolicyCategoriesFunc(ctx, ids)
}

// PluralDeletePolicyCategoriesCalls gets all the calls that were made to PluralDeletePolicyCategories.
// Check the length with:
//
//	len(mockedManagerInterface.PluralDeletePolicyCategoriesCalls())
func (mock *ManagerInterfaceMock) PluralDeletePolicyCategoriesCalls() []struct {
	Ctx context.Context
	Ids []uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		Ids []uuid.UUID
	}
	mock.lockPluralDeletePolicyCategories.RLock()
	calls = mock.calls.PluralDeletePolicyCategories
	mock.lockPluralDeletePolicyCategories.RUnlock()
	return calls
}

// PluralDeleteRecordTypes calls PluralDeleteRecordTypesFunc.
func (mock *ManagerInterfaceMock) PluralDeleteRecordTypes(ctx context.Context, ids []uuid.UUID) (int64, error) {
	if mock.PluralDeleteRecordTypesFunc == nil {
		panic("ManagerInterfaceMock.PluralDeleteRecordTypesFunc: method is nil but ManagerInterface.PluralDeleteRecordTypes was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Ids []uuid.UUID
	}{
		Ctx: ctx,
		Ids: ids,
	}
	mock.lockPluralDeleteRecordTypes.Lock()
	mock.calls.PluralDeleteRecordTypes = append(mock.calls.PluralDeleteRecordTypes, callInfo)
	mock.lockPluralDeleteRecordTypes.Unlock()
	return mock.PluralDeleteRecordTypesFunc(ctx, ids)
}

// PluralDeleteRecordTypesCalls gets all the calls that were made to PluralDeleteRecordTypes.
// Check the length with:
//
//	len(mockedManagerInterface.PluralDeleteRecordTypesCalls())
func (mock *ManagerInterfaceMock) PluralDeleteRecordTypesCalls() []struct {
	Ctx context.Context
	Ids []uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		Ids []uuid.UUID
	}
	mock.lockPluralDeleteRecordTypes.RLock()
	calls = mock.calls.PluralDeleteRecordTypes
	mock.lockPluralDeleteRecordTypes.RUnlock()
	return calls
}

// PluralDeleteRoles calls PluralDeleteRolesFunc.
func (mock *ManagerInterfaceMock) PluralDeleteRoles(ctx context.Context, ids []uuid.UUID) (int64, error) {
	if mock.PluralDeleteRolesFunc == nil {
		panic("ManagerInterfaceMock.PluralDeleteRolesFunc: method is nil but ManagerInterface.PluralDeleteRoles was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Ids []uuid.UUID
	}{
		Ctx: ctx,
		Ids: ids,
	}
	mock.lockPluralDeleteRoles.Lock()
	mock.calls.PluralDeleteRoles = append(mock.calls.PluralDeleteRoles, callInfo)
	mock.lockPluralDeleteRoles.Unlock()
	return mock.PluralDeleteRolesFunc(ctx, ids)
}

// PluralDeleteRolesCalls gets all the calls that were made to PluralDeleteRoles.
// Check the length with:
//
//	len(mockedManagerInterface.PluralDeleteRolesCalls())
func (mock *ManagerInterfaceMock) PluralDeleteRolesCalls() []struct {
	Ctx context.Context
	Ids []uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		Ids []uuid.UUID
	}
	mock.lockPluralDeleteRoles.RLock()
	calls = mock.calls.PluralDeleteRoles
	mock.lockPluralDeleteRoles.RUnlock()
	return calls
}

// PluralDisassociatePolicyOnRole calls PluralDisassociatePolicyOnRoleFunc.
func (mock *ManagerInterfaceMock) PluralDisassociatePolicyOnRole(ctx context.Context, roleID uuid.UUID, policyIDs []uuid.UUID) (int64, error) {
	if mock.PluralDisassociatePolicyOnRoleFunc == nil {
		panic("ManagerInterfaceMock.PluralDisassociatePolicyOnRoleFunc: method is nil but ManagerInterface.PluralDisassociatePolicyOnRole was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		RoleID    uuid.UUID
		PolicyIDs []uuid.UUID
	}{
		Ctx:       ctx,
		RoleID:    roleID,
		PolicyIDs: policyIDs,
	}
	mock.lockPluralDisassociatePolicyOnRole.Lock()
	mock.calls.PluralDisassociatePolicyOnRole = append(mock.calls.PluralDisassociatePolicyOnRole, callInfo)
	mock.lockPluralDisassociatePolicyOnRole.Unlock()
	return mock.PluralDisassociatePolicyOnRoleFunc(ctx, roleID, policyIDs)
}

// PluralDisassociatePolicyOnRoleCalls gets all the calls that were made to PluralDisassociatePolicyOnRole.
// Check the length with:
//
//	len(mockedManagerInterface.PluralDisassociatePolicyOnRoleCalls())
func (mock *ManagerInterfaceMock) PluralDisassociatePolicyOnRoleCalls() []struct {
	Ctx       context.Context
	RoleID    uuid.UUID
	PolicyIDs []uuid.UUID
} {
	var calls []struct {
		Ctx       context.Context
		RoleID    uuid.UUID
		PolicyIDs []uuid.UUID
	}
	mock.lockPluralDisassociatePolicyOnRole.RLock()
	calls = mock.calls.PluralDisassociatePolicyOnRole
	mock.lockPluralDisassociatePolicyOnRole.RUnlock()
	return calls
}

// PluralDisassociateRoleOnPolicy calls PluralDisassociateRoleOnPolicyFunc.
func (mock *ManagerInterfaceMock) PluralDisassociateRoleOnPolicy(ctx context.Context, policyID uuid.UUID, roleIDs []uuid.UUID) (int64, error) {
	if mock.PluralDisassociateRoleOnPolicyFunc == nil {
		panic("ManagerInterfaceMock.PluralDisassociateRoleOnPolicyFunc: method is nil but ManagerInterface.PluralDisassociateRoleOnPolicy was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		PolicyID uuid.UUID
		RoleIDs  []uuid.UUID
	}{
		Ctx:      ctx,
		PolicyID: policyID,
		RoleIDs:  roleIDs,
	}
	mock.lockPluralDisassociateRoleOnPolicy.Lock()
	mock.calls.PluralDisassociateRoleOnPolicy = append(mock.calls.PluralDisassociateRoleOnPolicy, callInfo)
	mock.lockPluralDisassociateRoleOnPolicy.Unlock()
	return mock.PluralDisassociateRoleOnPolicyFunc(ctx, policyID, roleIDs)
}

// PluralDisassociateRoleOnPolicyCalls gets all the calls that were made to PluralDisassociateRoleOnPolicy.
// Check the length with:
//
//	len(mockedManagerInterface.PluralDisassociateRoleOnPolicyCalls())
func (mock *ManagerInterfaceMock) PluralDisassociateRoleOnPolicyCalls() []struct {
	Ctx      context.Context
	PolicyID uuid.UUID
	RoleIDs  []uuid.UUID
} {
	var calls []struct {
		Ctx      context.Context
		PolicyID uuid.UUID
		RoleIDs  []uuid.UUID
	}
	mock.lockPluralDisassociateRoleOnPolicy.RLock()
	calls = mock.calls.PluralDisassociateRoleOnPolicy
	mock.lockPluralDisassociateRoleOnPolicy.RUnlock()
	return calls
}

// UpdateAttendStatus calls UpdateAttendStatusFunc.
func (mock *ManagerInterfaceMock) UpdateAttendStatus(ctx context.Context, id uuid.UUID, name string, key string) (entity.AttendStatus, error) {
	if mock.UpdateAttendStatusFunc == nil {
		panic("ManagerInterfaceMock.UpdateAttendStatusFunc: method is nil but ManagerInterface.UpdateAttendStatus was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		ID   uuid.UUID
		Name string
		Key  string
	}{
		Ctx:  ctx,
		ID:   id,
		Name: name,
		Key:  key,
	}
	mock.lockUpdateAttendStatus.Lock()
	mock.calls.UpdateAttendStatus = append(mock.calls.UpdateAttendStatus, callInfo)
	mock.lockUpdateAttendStatus.Unlock()
	return mock.UpdateAttendStatusFunc(ctx, id, name, key)
}

// UpdateAttendStatusCalls gets all the calls that were made to UpdateAttendStatus.
// Check the length with:
//
//	len(mockedManagerInterface.UpdateAttendStatusCalls())
func (mock *ManagerInterfaceMock) UpdateAttendStatusCalls() []struct {
	Ctx  context.Context
	ID   uuid.UUID
	Name string
	Key  string
} {
	var calls []struct {
		Ctx  context.Context
		ID   uuid.UUID
		Name string
		Key  string
	}
	mock.lockUpdateAttendStatus.RLock()
	calls = mock.calls.UpdateAttendStatus
	mock.lockUpdateAttendStatus.RUnlock()
	return calls
}

// UpdateAttendanceType calls UpdateAttendanceTypeFunc.
func (mock *ManagerInterfaceMock) UpdateAttendanceType(ctx context.Context, id uuid.UUID, name string, key string, color string) (entity.AttendanceType, error) {
	if mock.UpdateAttendanceTypeFunc == nil {
		panic("ManagerInterfaceMock.UpdateAttendanceTypeFunc: method is nil but ManagerInterface.UpdateAttendanceType was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		ID    uuid.UUID
		Name  string
		Key   string
		Color string
	}{
		Ctx:   ctx,
		ID:    id,
		Name:  name,
		Key:   key,
		Color: color,
	}
	mock.lockUpdateAttendanceType.Lock()
	mock.calls.UpdateAttendanceType = append(mock.calls.UpdateAttendanceType, callInfo)
	mock.lockUpdateAttendanceType.Unlock()
	return mock.UpdateAttendanceTypeFunc(ctx, id, name, key, color)
}

// UpdateAttendanceTypeCalls gets all the calls that were made to UpdateAttendanceType.
// Check the length with:
//
//	len(mockedManagerInterface.UpdateAttendanceTypeCalls())
func (mock *ManagerInterfaceMock) UpdateAttendanceTypeCalls() []struct {
	Ctx   context.Context
	ID    uuid.UUID
	Name  string
	Key   string
	Color string
} {
	var calls []struct {
		Ctx   context.Context
		ID    uuid.UUID
		Name  string
		Key   string
		Color string
	}
	mock.lockUpdateAttendanceType.RLock()
	calls = mock.calls.UpdateAttendanceType
	mock.lockUpdateAttendanceType.RUnlock()
	return calls
}

// UpdateEventType calls UpdateEventTypeFunc.
func (mock *ManagerInterfaceMock) UpdateEventType(ctx context.Context, id uuid.UUID, name string, key string, color string) (entity.EventType, error) {
	if mock.UpdateEventTypeFunc == nil {
		panic("ManagerInterfaceMock.UpdateEventTypeFunc: method is nil but ManagerInterface.UpdateEventType was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		ID    uuid.UUID
		Name  string
		Key   string
		Color string
	}{
		Ctx:   ctx,
		ID:    id,
		Name:  name,
		Key:   key,
		Color: color,
	}
	mock.lockUpdateEventType.Lock()
	mock.calls.UpdateEventType = append(mock.calls.UpdateEventType, callInfo)
	mock.lockUpdateEventType.Unlock()
	return mock.UpdateEventTypeFunc(ctx, id, name, key, color)
}

// UpdateEventTypeCalls gets all the calls that were made to UpdateEventType.
// Check the length with:
//
//	len(mockedManagerInterface.UpdateEventTypeCalls())
func (mock *ManagerInterfaceMock) UpdateEventTypeCalls() []struct {
	Ctx   context.Context
	ID    uuid.UUID
	Name  string
	Key   string
	Color string
} {
	var calls []struct {
		Ctx   context.Context
		ID    uuid.UUID
		Name  string
		Key   string
		Color string
	}
	mock.lockUpdateEventType.RLock()
	calls = mock.calls.UpdateEventType
	mock.lockUpdateEventType.RUnlock()
	return calls
}

// UpdateMimeType calls UpdateMimeTypeFunc.
func (mock *ManagerInterfaceMock) UpdateMimeType(ctx context.Context, id uuid.UUID, name string, key string, kind string) (entity.MimeType, error) {
	if mock.UpdateMimeTypeFunc == nil {
		panic("ManagerInterfaceMock.UpdateMimeTypeFunc: method is nil but ManagerInterface.UpdateMimeType was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		ID   uuid.UUID
		Name string
		Key  string
		Kind string
	}{
		Ctx:  ctx,
		ID:   id,
		Name: name,
		Key:  key,
		Kind: kind,
	}
	mock.lockUpdateMimeType.Lock()
	mock.calls.UpdateMimeType = append(mock.calls.UpdateMimeType, callInfo)
	mock.lockUpdateMimeType.Unlock()
	return mock.UpdateMimeTypeFunc(ctx, id, name, key, kind)
}

// UpdateMimeTypeCalls gets all the calls that were made to UpdateMimeType.
// Check the length with:
//
//	len(mockedManagerInterface.UpdateMimeTypeCalls())
func (mock *ManagerInterfaceMock) UpdateMimeTypeCalls() []struct {
	Ctx  context.Context
	ID   uuid.UUID
	Name string
	Key  string
	Kind string
} {
	var calls []struct {
		Ctx  context.Context
		ID   uuid.UUID
		Name string
		Key  string
		Kind string
	}
	mock.lockUpdateMimeType.RLock()
	calls = mock.calls.UpdateMimeType
	mock.lockUpdateMimeType.RUnlock()
	return calls
}

// UpdatePermission calls UpdatePermissionFunc.
func (mock *ManagerInterfaceMock) UpdatePermission(ctx context.Context, id uuid.UUID, name string, key string, description string, categoryID uuid.UUID) (entity.Permission, error) {
	if mock.UpdatePermissionFunc == nil {
		panic("ManagerInterfaceMock.UpdatePermissionFunc: method is nil but ManagerInterface.UpdatePermission was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		ID          uuid.UUID
		Name        string
		Key         string
		Description string
		CategoryID  uuid.UUID
	}{
		Ctx:         ctx,
		ID:          id,
		Name:        name,
		Key:         key,
		Description: description,
		CategoryID:  categoryID,
	}
	mock.lockUpdatePermission.Lock()
	mock.calls.UpdatePermission = append(mock.calls.UpdatePermission, callInfo)
	mock.lockUpdatePermission.Unlock()
	return mock.UpdatePermissionFunc(ctx, id, name, key, description, categoryID)
}

// UpdatePermissionCalls gets all the calls that were made to UpdatePermission.
// Check the length with:
//
//	len(mockedManagerInterface.UpdatePermissionCalls())
func (mock *ManagerInterfaceMock) UpdatePermissionCalls() []struct {
	Ctx         context.Context
	ID          uuid.UUID
	Name        string
	Key         string
	Description string
	CategoryID  uuid.UUID
} {
	var calls []struct {
		Ctx         context.Context
		ID          uuid.UUID
		Name        string
		Key         string
		Description string
		CategoryID  uuid.UUID
	}
	mock.lockUpdatePermission.RLock()
	calls = mock.calls.UpdatePermission
	mock.lockUpdatePermission.RUnlock()
	return calls
}

// UpdatePermissionCategory calls UpdatePermissionCategoryFunc.
func (mock *ManagerInterfaceMock) UpdatePermissionCategory(ctx context.Context, id uuid.UUID, name string, key string, description string) (entity.PermissionCategory, error) {
	if mock.UpdatePermissionCategoryFunc == nil {
		panic("ManagerInterfaceMock.UpdatePermissionCategoryFunc: method is nil but ManagerInterface.UpdatePermissionCategory was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		ID          uuid.UUID
		Name        string
		Key         string
		Description string
	}{
		Ctx:         ctx,
		ID:          id,
		Name:        name,
		Key:         key,
		Description: description,
	}
	mock.lockUpdatePermissionCategory.Lock()
	mock.calls.UpdatePermissionCategory = append(mock.calls.UpdatePermissionCategory, callInfo)
	mock.lockUpdatePermissionCategory.Unlock()
	return mock.UpdatePermissionCategoryFunc(ctx, id, name, key, description)
}

// UpdatePermissionCategoryCalls gets all the calls that were made to UpdatePermissionCategory.
// Check the length with:
//
//	len(mockedManagerInterface.UpdatePermissionCategoryCalls())
func (mock *ManagerInterfaceMock) UpdatePermissionCategoryCalls() []struct {
	Ctx         context.Context
	ID          uuid.UUID
	Name        string
	Key         string
	Description string
} {
	var calls []struct {
		Ctx         context.Context
		ID          uuid.UUID
		Name        string
		Key         string
		Description string
	}
	mock.lockUpdatePermissionCategory.RLock()
	calls = mock.calls.UpdatePermissionCategory
	mock.lockUpdatePermissionCategory.RUnlock()
	return calls
}

// UpdatePolicy calls UpdatePolicyFunc.
func (mock *ManagerInterfaceMock) UpdatePolicy(ctx context.Context, id uuid.UUID, name string, key string, description string, categoryID uuid.UUID) (entity.Policy, error) {
	if mock.UpdatePolicyFunc == nil {
		panic("ManagerInterfaceMock.UpdatePolicyFunc: method is nil but ManagerInterface.UpdatePolicy was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		ID          uuid.UUID
		Name        string
		Key         string
		Description string
		CategoryID  uuid.UUID
	}{
		Ctx:         ctx,
		ID:          id,
		Name:        name,
		Key:         key,
		Description: description,
		CategoryID:  categoryID,
	}
	mock.lockUpdatePolicy.Lock()
	mock.calls.UpdatePolicy = append(mock.calls.UpdatePolicy, callInfo)
	mock.lockUpdatePolicy.Unlock()
	return mock.UpdatePolicyFunc(ctx, id, name, key, description, categoryID)
}

// UpdatePolicyCalls gets all the calls that were made to UpdatePolicy.
// Check the length with:
//
//	len(mockedManagerInterface.UpdatePolicyCalls())
func (mock *ManagerInterfaceMock) UpdatePolicyCalls() []struct {
	Ctx         context.Context
	ID          uuid.UUID
	Name        string
	Key         string
	Description string
	CategoryID  uuid.UUID
} {
	var calls []struct {
		Ctx         context.Context
		ID          uuid.UUID
		Name        string
		Key         string
		Description string
		CategoryID  uuid.UUID
	}
	mock.lockUpdatePolicy.RLock()
	calls = mock.calls.UpdatePolicy
	mock.lockUpdatePolicy.RUnlock()
	return calls
}

// UpdatePolicyCategory calls UpdatePolicyCategoryFunc.
func (mock *ManagerInterfaceMock) UpdatePolicyCategory(ctx context.Context, id uuid.UUID, name string, key string, description string) (entity.PolicyCategory, error) {
	if mock.UpdatePolicyCategoryFunc == nil {
		panic("ManagerInterfaceMock.UpdatePolicyCategoryFunc: method is nil but ManagerInterface.UpdatePolicyCategory was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		ID          uuid.UUID
		Name        string
		Key         string
		Description string
	}{
		Ctx:         ctx,
		ID:          id,
		Name:        name,
		Key:         key,
		Description: description,
	}
	mock.lockUpdatePolicyCategory.Lock()
	mock.calls.UpdatePolicyCategory = append(mock.calls.UpdatePolicyCategory, callInfo)
	mock.lockUpdatePolicyCategory.Unlock()
	return mock.UpdatePolicyCategoryFunc(ctx, id, name, key, description)
}

// UpdatePolicyCategoryCalls gets all the calls that were made to UpdatePolicyCategory.
// Check the length with:
//
//	len(mockedManagerInterface.UpdatePolicyCategoryCalls())
func (mock *ManagerInterfaceMock) UpdatePolicyCategoryCalls() []struct {
	Ctx         context.Context
	ID          uuid.UUID
	Name        string
	Key         string
	Description string
} {
	var calls []struct {
		Ctx         context.Context
		ID          uuid.UUID
		Name        string
		Key         string
		Description string
	}
	mock.lockUpdatePolicyCategory.RLock()
	calls = mock.calls.UpdatePolicyCategory
	mock.lockUpdatePolicyCategory.RUnlock()
	return calls
}

// UpdateRecordType calls UpdateRecordTypeFunc.
func (mock *ManagerInterfaceMock) UpdateRecordType(ctx context.Context, id uuid.UUID, name string, key string) (entity.RecordType, error) {
	if mock.UpdateRecordTypeFunc == nil {
		panic("ManagerInterfaceMock.UpdateRecordTypeFunc: method is nil but ManagerInterface.UpdateRecordType was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		ID   uuid.UUID
		Name string
		Key  string
	}{
		Ctx:  ctx,
		ID:   id,
		Name: name,
		Key:  key,
	}
	mock.lockUpdateRecordType.Lock()
	mock.calls.UpdateRecordType = append(mock.calls.UpdateRecordType, callInfo)
	mock.lockUpdateRecordType.Unlock()
	return mock.UpdateRecordTypeFunc(ctx, id, name, key)
}

// UpdateRecordTypeCalls gets all the calls that were made to UpdateRecordType.
// Check the length with:
//
//	len(mockedManagerInterface.UpdateRecordTypeCalls())
func (mock *ManagerInterfaceMock) UpdateRecordTypeCalls() []struct {
	Ctx  context.Context
	ID   uuid.UUID
	Name string
	Key  string
} {
	var calls []struct {
		Ctx  context.Context
		ID   uuid.UUID
		Name string
		Key  string
	}
	mock.lockUpdateRecordType.RLock()
	calls = mock.calls.UpdateRecordType
	mock.lockUpdateRecordType.RUnlock()
	return calls
}

// UpdateRole calls UpdateRoleFunc.
func (mock *ManagerInterfaceMock) UpdateRole(ctx context.Context, id uuid.UUID, name string, description string) (entity.Role, error) {
	if mock.UpdateRoleFunc == nil {
		panic("ManagerInterfaceMock.UpdateRoleFunc: method is nil but ManagerInterface.UpdateRole was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		ID          uuid.UUID
		Name        string
		Description string
	}{
		Ctx:         ctx,
		ID:          id,
		Name:        name,
		Description: description,
	}
	mock.lockUpdateRole.Lock()
	mock.calls.UpdateRole = append(mock.calls.UpdateRole, callInfo)
	mock.lockUpdateRole.Unlock()
	return mock.UpdateRoleFunc(ctx, id, name, description)
}

// UpdateRoleCalls gets all the calls that were made to UpdateRole.
// Check the length with:
//
//	len(mockedManagerInterface.UpdateRoleCalls())
func (mock *ManagerInterfaceMock) UpdateRoleCalls() []struct {
	Ctx         context.Context
	ID          uuid.UUID
	Name        string
	Description string
} {
	var calls []struct {
		Ctx         context.Context
		ID          uuid.UUID
		Name        string
		Description string
	}
	mock.lockUpdateRole.RLock()
	calls = mock.calls.UpdateRole
	mock.lockUpdateRole.RUnlock()
	return calls
}
