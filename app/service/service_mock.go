// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package service

import (
	"context"
	"github.com/google/uuid"
	"github.com/micro-service-lab/recs-seem-mono-container/app/entity"
	"github.com/micro-service-lab/recs-seem-mono-container/app/parameter"
	"github.com/micro-service-lab/recs-seem-mono-container/app/store"
	"sync"
)

// Ensure, that ManagerInterfaceMock does implement ManagerInterface.
// If this is not the case, regenerate this file with moq.
var _ ManagerInterface = &ManagerInterfaceMock{}

// ManagerInterfaceMock is a mock implementation of ManagerInterface.
//
//	func TestSomethingThatUsesManagerInterface(t *testing.T) {
//
//		// make and configure a mocked ManagerInterface
//		mockedManagerInterface := &ManagerInterfaceMock{
//			CreateAttendStatusFunc: func(ctx context.Context, name string, key string) (entity.AttendStatus, error) {
//				panic("mock out the CreateAttendStatus method")
//			},
//			CreateAttendStatusesFunc: func(ctx context.Context, ps []parameter.CreateAttendStatusParam) (int64, error) {
//				panic("mock out the CreateAttendStatuses method")
//			},
//			CreateAttendanceTypeFunc: func(ctx context.Context, name string, key string, color string) (entity.AttendanceType, error) {
//				panic("mock out the CreateAttendanceType method")
//			},
//			CreateAttendanceTypesFunc: func(ctx context.Context, ps []parameter.CreateAttendanceTypeParam) (int64, error) {
//				panic("mock out the CreateAttendanceTypes method")
//			},
//			CreateEventTypeFunc: func(ctx context.Context, name string, key string, color string) (entity.EventType, error) {
//				panic("mock out the CreateEventType method")
//			},
//			CreateEventTypesFunc: func(ctx context.Context, ps []parameter.CreateEventTypeParam) (int64, error) {
//				panic("mock out the CreateEventTypes method")
//			},
//			CreatePermissionCategoriesFunc: func(ctx context.Context, ps []parameter.CreatePermissionCategoryParam) (int64, error) {
//				panic("mock out the CreatePermissionCategories method")
//			},
//			CreatePermissionCategoryFunc: func(ctx context.Context, name string, key string, description string) (entity.PermissionCategory, error) {
//				panic("mock out the CreatePermissionCategory method")
//			},
//			CreatePolicyCategoriesFunc: func(ctx context.Context, ps []parameter.CreatePolicyCategoryParam) (int64, error) {
//				panic("mock out the CreatePolicyCategories method")
//			},
//			CreatePolicyCategoryFunc: func(ctx context.Context, name string, key string, description string) (entity.PolicyCategory, error) {
//				panic("mock out the CreatePolicyCategory method")
//			},
//			DeleteAttendStatusFunc: func(ctx context.Context, id uuid.UUID) error {
//				panic("mock out the DeleteAttendStatus method")
//			},
//			DeleteAttendanceTypeFunc: func(ctx context.Context, id uuid.UUID) error {
//				panic("mock out the DeleteAttendanceType method")
//			},
//			DeleteEventTypeFunc: func(ctx context.Context, id uuid.UUID) error {
//				panic("mock out the DeleteEventType method")
//			},
//			DeletePermissionCategoryFunc: func(ctx context.Context, id uuid.UUID) error {
//				panic("mock out the DeletePermissionCategory method")
//			},
//			DeletePolicyCategoryFunc: func(ctx context.Context, id uuid.UUID) error {
//				panic("mock out the DeletePolicyCategory method")
//			},
//			FindAttendStatusByIDFunc: func(ctx context.Context, id uuid.UUID) (entity.AttendStatus, error) {
//				panic("mock out the FindAttendStatusByID method")
//			},
//			FindAttendStatusByKeyFunc: func(ctx context.Context, key string) (entity.AttendStatus, error) {
//				panic("mock out the FindAttendStatusByKey method")
//			},
//			FindAttendanceTypeByIDFunc: func(ctx context.Context, id uuid.UUID) (entity.AttendanceType, error) {
//				panic("mock out the FindAttendanceTypeByID method")
//			},
//			FindAttendanceTypeByKeyFunc: func(ctx context.Context, key string) (entity.AttendanceType, error) {
//				panic("mock out the FindAttendanceTypeByKey method")
//			},
//			FindEventTypeByIDFunc: func(ctx context.Context, id uuid.UUID) (entity.EventType, error) {
//				panic("mock out the FindEventTypeByID method")
//			},
//			FindEventTypeByKeyFunc: func(ctx context.Context, key string) (entity.EventType, error) {
//				panic("mock out the FindEventTypeByKey method")
//			},
//			FindPermissionCategoryByIDFunc: func(ctx context.Context, id uuid.UUID) (entity.PermissionCategory, error) {
//				panic("mock out the FindPermissionCategoryByID method")
//			},
//			FindPermissionCategoryByKeyFunc: func(ctx context.Context, key string) (entity.PermissionCategory, error) {
//				panic("mock out the FindPermissionCategoryByKey method")
//			},
//			FindPolicyCategoryByIDFunc: func(ctx context.Context, id uuid.UUID) (entity.PolicyCategory, error) {
//				panic("mock out the FindPolicyCategoryByID method")
//			},
//			FindPolicyCategoryByKeyFunc: func(ctx context.Context, key string) (entity.PolicyCategory, error) {
//				panic("mock out the FindPolicyCategoryByKey method")
//			},
//			GetAttendStatusesFunc: func(ctx context.Context, whereSearchName string, order parameter.AttendStatusOrderMethod, pg parameter.Pagination, limit parameter.Limit, cursor parameter.Cursor, offset parameter.Offset, withCount parameter.WithCount) (store.ListResult[entity.AttendStatus], error) {
//				panic("mock out the GetAttendStatuses method")
//			},
//			GetAttendStatusesCountFunc: func(ctx context.Context, whereSearchName string) (int64, error) {
//				panic("mock out the GetAttendStatusesCount method")
//			},
//			GetAttendanceTypesFunc: func(ctx context.Context, whereSearchName string, order parameter.AttendanceTypeOrderMethod, pg parameter.Pagination, limit parameter.Limit, cursor parameter.Cursor, offset parameter.Offset, withCount parameter.WithCount) (store.ListResult[entity.AttendanceType], error) {
//				panic("mock out the GetAttendanceTypes method")
//			},
//			GetAttendanceTypesCountFunc: func(ctx context.Context, whereSearchName string) (int64, error) {
//				panic("mock out the GetAttendanceTypesCount method")
//			},
//			GetEventTypesFunc: func(ctx context.Context, whereSearchName string, order parameter.EventTypeOrderMethod, pg parameter.Pagination, limit parameter.Limit, cursor parameter.Cursor, offset parameter.Offset, withCount parameter.WithCount) (store.ListResult[entity.EventType], error) {
//				panic("mock out the GetEventTypes method")
//			},
//			GetEventTypesCountFunc: func(ctx context.Context, whereSearchName string) (int64, error) {
//				panic("mock out the GetEventTypesCount method")
//			},
//			GetPermissionCategoriesFunc: func(ctx context.Context, whereSearchName string, order parameter.PermissionCategoryOrderMethod, pg parameter.Pagination, limit parameter.Limit, cursor parameter.Cursor, offset parameter.Offset, withCount parameter.WithCount) (store.ListResult[entity.PermissionCategory], error) {
//				panic("mock out the GetPermissionCategories method")
//			},
//			GetPermissionCategoriesCountFunc: func(ctx context.Context, whereSearchName string) (int64, error) {
//				panic("mock out the GetPermissionCategoriesCount method")
//			},
//			GetPolicyCategoriesFunc: func(ctx context.Context, whereSearchName string, order parameter.PolicyCategoryOrderMethod, pg parameter.Pagination, limit parameter.Limit, cursor parameter.Cursor, offset parameter.Offset, withCount parameter.WithCount) (store.ListResult[entity.PolicyCategory], error) {
//				panic("mock out the GetPolicyCategories method")
//			},
//			GetPolicyCategoriesCountFunc: func(ctx context.Context, whereSearchName string) (int64, error) {
//				panic("mock out the GetPolicyCategoriesCount method")
//			},
//			PluralDeleteAttendStatusesFunc: func(ctx context.Context, ids []uuid.UUID) error {
//				panic("mock out the PluralDeleteAttendStatuses method")
//			},
//			PluralDeleteAttendanceTypesFunc: func(ctx context.Context, ids []uuid.UUID) error {
//				panic("mock out the PluralDeleteAttendanceTypes method")
//			},
//			PluralDeleteEventTypesFunc: func(ctx context.Context, ids []uuid.UUID) error {
//				panic("mock out the PluralDeleteEventTypes method")
//			},
//			PluralDeletePermissionCategoriesFunc: func(ctx context.Context, ids []uuid.UUID) error {
//				panic("mock out the PluralDeletePermissionCategories method")
//			},
//			PluralDeletePolicyCategoriesFunc: func(ctx context.Context, ids []uuid.UUID) error {
//				panic("mock out the PluralDeletePolicyCategories method")
//			},
//			UpdateAttendStatusFunc: func(ctx context.Context, id uuid.UUID, name string, key string) (entity.AttendStatus, error) {
//				panic("mock out the UpdateAttendStatus method")
//			},
//			UpdateAttendanceTypeFunc: func(ctx context.Context, id uuid.UUID, name string, key string, color string) (entity.AttendanceType, error) {
//				panic("mock out the UpdateAttendanceType method")
//			},
//			UpdateEventTypeFunc: func(ctx context.Context, id uuid.UUID, name string, key string, color string) (entity.EventType, error) {
//				panic("mock out the UpdateEventType method")
//			},
//			UpdatePermissionCategoryFunc: func(ctx context.Context, id uuid.UUID, name string, key string, description string) (entity.PermissionCategory, error) {
//				panic("mock out the UpdatePermissionCategory method")
//			},
//			UpdatePolicyCategoryFunc: func(ctx context.Context, id uuid.UUID, name string, key string, description string) (entity.PolicyCategory, error) {
//				panic("mock out the UpdatePolicyCategory method")
//			},
//		}
//
//		// use mockedManagerInterface in code that requires ManagerInterface
//		// and then make assertions.
//
//	}
type ManagerInterfaceMock struct {
	// CreateAttendStatusFunc mocks the CreateAttendStatus method.
	CreateAttendStatusFunc func(ctx context.Context, name string, key string) (entity.AttendStatus, error)

	// CreateAttendStatusesFunc mocks the CreateAttendStatuses method.
	CreateAttendStatusesFunc func(ctx context.Context, ps []parameter.CreateAttendStatusParam) (int64, error)

	// CreateAttendanceTypeFunc mocks the CreateAttendanceType method.
	CreateAttendanceTypeFunc func(ctx context.Context, name string, key string, color string) (entity.AttendanceType, error)

	// CreateAttendanceTypesFunc mocks the CreateAttendanceTypes method.
	CreateAttendanceTypesFunc func(ctx context.Context, ps []parameter.CreateAttendanceTypeParam) (int64, error)

	// CreateEventTypeFunc mocks the CreateEventType method.
	CreateEventTypeFunc func(ctx context.Context, name string, key string, color string) (entity.EventType, error)

	// CreateEventTypesFunc mocks the CreateEventTypes method.
	CreateEventTypesFunc func(ctx context.Context, ps []parameter.CreateEventTypeParam) (int64, error)

	// CreatePermissionCategoriesFunc mocks the CreatePermissionCategories method.
	CreatePermissionCategoriesFunc func(ctx context.Context, ps []parameter.CreatePermissionCategoryParam) (int64, error)

	// CreatePermissionCategoryFunc mocks the CreatePermissionCategory method.
	CreatePermissionCategoryFunc func(ctx context.Context, name string, key string, description string) (entity.PermissionCategory, error)

	// CreatePolicyCategoriesFunc mocks the CreatePolicyCategories method.
	CreatePolicyCategoriesFunc func(ctx context.Context, ps []parameter.CreatePolicyCategoryParam) (int64, error)

	// CreatePolicyCategoryFunc mocks the CreatePolicyCategory method.
	CreatePolicyCategoryFunc func(ctx context.Context, name string, key string, description string) (entity.PolicyCategory, error)

	// DeleteAttendStatusFunc mocks the DeleteAttendStatus method.
	DeleteAttendStatusFunc func(ctx context.Context, id uuid.UUID) error

	// DeleteAttendanceTypeFunc mocks the DeleteAttendanceType method.
	DeleteAttendanceTypeFunc func(ctx context.Context, id uuid.UUID) error

	// DeleteEventTypeFunc mocks the DeleteEventType method.
	DeleteEventTypeFunc func(ctx context.Context, id uuid.UUID) error

	// DeletePermissionCategoryFunc mocks the DeletePermissionCategory method.
	DeletePermissionCategoryFunc func(ctx context.Context, id uuid.UUID) error

	// DeletePolicyCategoryFunc mocks the DeletePolicyCategory method.
	DeletePolicyCategoryFunc func(ctx context.Context, id uuid.UUID) error

	// FindAttendStatusByIDFunc mocks the FindAttendStatusByID method.
	FindAttendStatusByIDFunc func(ctx context.Context, id uuid.UUID) (entity.AttendStatus, error)

	// FindAttendStatusByKeyFunc mocks the FindAttendStatusByKey method.
	FindAttendStatusByKeyFunc func(ctx context.Context, key string) (entity.AttendStatus, error)

	// FindAttendanceTypeByIDFunc mocks the FindAttendanceTypeByID method.
	FindAttendanceTypeByIDFunc func(ctx context.Context, id uuid.UUID) (entity.AttendanceType, error)

	// FindAttendanceTypeByKeyFunc mocks the FindAttendanceTypeByKey method.
	FindAttendanceTypeByKeyFunc func(ctx context.Context, key string) (entity.AttendanceType, error)

	// FindEventTypeByIDFunc mocks the FindEventTypeByID method.
	FindEventTypeByIDFunc func(ctx context.Context, id uuid.UUID) (entity.EventType, error)

	// FindEventTypeByKeyFunc mocks the FindEventTypeByKey method.
	FindEventTypeByKeyFunc func(ctx context.Context, key string) (entity.EventType, error)

	// FindPermissionCategoryByIDFunc mocks the FindPermissionCategoryByID method.
	FindPermissionCategoryByIDFunc func(ctx context.Context, id uuid.UUID) (entity.PermissionCategory, error)

	// FindPermissionCategoryByKeyFunc mocks the FindPermissionCategoryByKey method.
	FindPermissionCategoryByKeyFunc func(ctx context.Context, key string) (entity.PermissionCategory, error)

	// FindPolicyCategoryByIDFunc mocks the FindPolicyCategoryByID method.
	FindPolicyCategoryByIDFunc func(ctx context.Context, id uuid.UUID) (entity.PolicyCategory, error)

	// FindPolicyCategoryByKeyFunc mocks the FindPolicyCategoryByKey method.
	FindPolicyCategoryByKeyFunc func(ctx context.Context, key string) (entity.PolicyCategory, error)

	// GetAttendStatusesFunc mocks the GetAttendStatuses method.
	GetAttendStatusesFunc func(ctx context.Context, whereSearchName string, order parameter.AttendStatusOrderMethod, pg parameter.Pagination, limit parameter.Limit, cursor parameter.Cursor, offset parameter.Offset, withCount parameter.WithCount) (store.ListResult[entity.AttendStatus], error)

	// GetAttendStatusesCountFunc mocks the GetAttendStatusesCount method.
	GetAttendStatusesCountFunc func(ctx context.Context, whereSearchName string) (int64, error)

	// GetAttendanceTypesFunc mocks the GetAttendanceTypes method.
	GetAttendanceTypesFunc func(ctx context.Context, whereSearchName string, order parameter.AttendanceTypeOrderMethod, pg parameter.Pagination, limit parameter.Limit, cursor parameter.Cursor, offset parameter.Offset, withCount parameter.WithCount) (store.ListResult[entity.AttendanceType], error)

	// GetAttendanceTypesCountFunc mocks the GetAttendanceTypesCount method.
	GetAttendanceTypesCountFunc func(ctx context.Context, whereSearchName string) (int64, error)

	// GetEventTypesFunc mocks the GetEventTypes method.
	GetEventTypesFunc func(ctx context.Context, whereSearchName string, order parameter.EventTypeOrderMethod, pg parameter.Pagination, limit parameter.Limit, cursor parameter.Cursor, offset parameter.Offset, withCount parameter.WithCount) (store.ListResult[entity.EventType], error)

	// GetEventTypesCountFunc mocks the GetEventTypesCount method.
	GetEventTypesCountFunc func(ctx context.Context, whereSearchName string) (int64, error)

	// GetPermissionCategoriesFunc mocks the GetPermissionCategories method.
	GetPermissionCategoriesFunc func(ctx context.Context, whereSearchName string, order parameter.PermissionCategoryOrderMethod, pg parameter.Pagination, limit parameter.Limit, cursor parameter.Cursor, offset parameter.Offset, withCount parameter.WithCount) (store.ListResult[entity.PermissionCategory], error)

	// GetPermissionCategoriesCountFunc mocks the GetPermissionCategoriesCount method.
	GetPermissionCategoriesCountFunc func(ctx context.Context, whereSearchName string) (int64, error)

	// GetPolicyCategoriesFunc mocks the GetPolicyCategories method.
	GetPolicyCategoriesFunc func(ctx context.Context, whereSearchName string, order parameter.PolicyCategoryOrderMethod, pg parameter.Pagination, limit parameter.Limit, cursor parameter.Cursor, offset parameter.Offset, withCount parameter.WithCount) (store.ListResult[entity.PolicyCategory], error)

	// GetPolicyCategoriesCountFunc mocks the GetPolicyCategoriesCount method.
	GetPolicyCategoriesCountFunc func(ctx context.Context, whereSearchName string) (int64, error)

	// PluralDeleteAttendStatusesFunc mocks the PluralDeleteAttendStatuses method.
	PluralDeleteAttendStatusesFunc func(ctx context.Context, ids []uuid.UUID) error

	// PluralDeleteAttendanceTypesFunc mocks the PluralDeleteAttendanceTypes method.
	PluralDeleteAttendanceTypesFunc func(ctx context.Context, ids []uuid.UUID) error

	// PluralDeleteEventTypesFunc mocks the PluralDeleteEventTypes method.
	PluralDeleteEventTypesFunc func(ctx context.Context, ids []uuid.UUID) error

	// PluralDeletePermissionCategoriesFunc mocks the PluralDeletePermissionCategories method.
	PluralDeletePermissionCategoriesFunc func(ctx context.Context, ids []uuid.UUID) error

	// PluralDeletePolicyCategoriesFunc mocks the PluralDeletePolicyCategories method.
	PluralDeletePolicyCategoriesFunc func(ctx context.Context, ids []uuid.UUID) error

	// UpdateAttendStatusFunc mocks the UpdateAttendStatus method.
	UpdateAttendStatusFunc func(ctx context.Context, id uuid.UUID, name string, key string) (entity.AttendStatus, error)

	// UpdateAttendanceTypeFunc mocks the UpdateAttendanceType method.
	UpdateAttendanceTypeFunc func(ctx context.Context, id uuid.UUID, name string, key string, color string) (entity.AttendanceType, error)

	// UpdateEventTypeFunc mocks the UpdateEventType method.
	UpdateEventTypeFunc func(ctx context.Context, id uuid.UUID, name string, key string, color string) (entity.EventType, error)

	// UpdatePermissionCategoryFunc mocks the UpdatePermissionCategory method.
	UpdatePermissionCategoryFunc func(ctx context.Context, id uuid.UUID, name string, key string, description string) (entity.PermissionCategory, error)

	// UpdatePolicyCategoryFunc mocks the UpdatePolicyCategory method.
	UpdatePolicyCategoryFunc func(ctx context.Context, id uuid.UUID, name string, key string, description string) (entity.PolicyCategory, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateAttendStatus holds details about calls to the CreateAttendStatus method.
		CreateAttendStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Key is the key argument value.
			Key string
		}
		// CreateAttendStatuses holds details about calls to the CreateAttendStatuses method.
		CreateAttendStatuses []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Ps is the ps argument value.
			Ps []parameter.CreateAttendStatusParam
		}
		// CreateAttendanceType holds details about calls to the CreateAttendanceType method.
		CreateAttendanceType []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Key is the key argument value.
			Key string
			// Color is the color argument value.
			Color string
		}
		// CreateAttendanceTypes holds details about calls to the CreateAttendanceTypes method.
		CreateAttendanceTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Ps is the ps argument value.
			Ps []parameter.CreateAttendanceTypeParam
		}
		// CreateEventType holds details about calls to the CreateEventType method.
		CreateEventType []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Key is the key argument value.
			Key string
			// Color is the color argument value.
			Color string
		}
		// CreateEventTypes holds details about calls to the CreateEventTypes method.
		CreateEventTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Ps is the ps argument value.
			Ps []parameter.CreateEventTypeParam
		}
		// CreatePermissionCategories holds details about calls to the CreatePermissionCategories method.
		CreatePermissionCategories []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Ps is the ps argument value.
			Ps []parameter.CreatePermissionCategoryParam
		}
		// CreatePermissionCategory holds details about calls to the CreatePermissionCategory method.
		CreatePermissionCategory []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Key is the key argument value.
			Key string
			// Description is the description argument value.
			Description string
		}
		// CreatePolicyCategories holds details about calls to the CreatePolicyCategories method.
		CreatePolicyCategories []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Ps is the ps argument value.
			Ps []parameter.CreatePolicyCategoryParam
		}
		// CreatePolicyCategory holds details about calls to the CreatePolicyCategory method.
		CreatePolicyCategory []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Key is the key argument value.
			Key string
			// Description is the description argument value.
			Description string
		}
		// DeleteAttendStatus holds details about calls to the DeleteAttendStatus method.
		DeleteAttendStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// DeleteAttendanceType holds details about calls to the DeleteAttendanceType method.
		DeleteAttendanceType []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// DeleteEventType holds details about calls to the DeleteEventType method.
		DeleteEventType []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// DeletePermissionCategory holds details about calls to the DeletePermissionCategory method.
		DeletePermissionCategory []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// DeletePolicyCategory holds details about calls to the DeletePolicyCategory method.
		DeletePolicyCategory []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// FindAttendStatusByID holds details about calls to the FindAttendStatusByID method.
		FindAttendStatusByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// FindAttendStatusByKey holds details about calls to the FindAttendStatusByKey method.
		FindAttendStatusByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// FindAttendanceTypeByID holds details about calls to the FindAttendanceTypeByID method.
		FindAttendanceTypeByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// FindAttendanceTypeByKey holds details about calls to the FindAttendanceTypeByKey method.
		FindAttendanceTypeByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// FindEventTypeByID holds details about calls to the FindEventTypeByID method.
		FindEventTypeByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// FindEventTypeByKey holds details about calls to the FindEventTypeByKey method.
		FindEventTypeByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// FindPermissionCategoryByID holds details about calls to the FindPermissionCategoryByID method.
		FindPermissionCategoryByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// FindPermissionCategoryByKey holds details about calls to the FindPermissionCategoryByKey method.
		FindPermissionCategoryByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// FindPolicyCategoryByID holds details about calls to the FindPolicyCategoryByID method.
		FindPolicyCategoryByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// FindPolicyCategoryByKey holds details about calls to the FindPolicyCategoryByKey method.
		FindPolicyCategoryByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// GetAttendStatuses holds details about calls to the GetAttendStatuses method.
		GetAttendStatuses []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// WhereSearchName is the whereSearchName argument value.
			WhereSearchName string
			// Order is the order argument value.
			Order parameter.AttendStatusOrderMethod
			// Pg is the pg argument value.
			Pg parameter.Pagination
			// Limit is the limit argument value.
			Limit parameter.Limit
			// Cursor is the cursor argument value.
			Cursor parameter.Cursor
			// Offset is the offset argument value.
			Offset parameter.Offset
			// WithCount is the withCount argument value.
			WithCount parameter.WithCount
		}
		// GetAttendStatusesCount holds details about calls to the GetAttendStatusesCount method.
		GetAttendStatusesCount []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// WhereSearchName is the whereSearchName argument value.
			WhereSearchName string
		}
		// GetAttendanceTypes holds details about calls to the GetAttendanceTypes method.
		GetAttendanceTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// WhereSearchName is the whereSearchName argument value.
			WhereSearchName string
			// Order is the order argument value.
			Order parameter.AttendanceTypeOrderMethod
			// Pg is the pg argument value.
			Pg parameter.Pagination
			// Limit is the limit argument value.
			Limit parameter.Limit
			// Cursor is the cursor argument value.
			Cursor parameter.Cursor
			// Offset is the offset argument value.
			Offset parameter.Offset
			// WithCount is the withCount argument value.
			WithCount parameter.WithCount
		}
		// GetAttendanceTypesCount holds details about calls to the GetAttendanceTypesCount method.
		GetAttendanceTypesCount []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// WhereSearchName is the whereSearchName argument value.
			WhereSearchName string
		}
		// GetEventTypes holds details about calls to the GetEventTypes method.
		GetEventTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// WhereSearchName is the whereSearchName argument value.
			WhereSearchName string
			// Order is the order argument value.
			Order parameter.EventTypeOrderMethod
			// Pg is the pg argument value.
			Pg parameter.Pagination
			// Limit is the limit argument value.
			Limit parameter.Limit
			// Cursor is the cursor argument value.
			Cursor parameter.Cursor
			// Offset is the offset argument value.
			Offset parameter.Offset
			// WithCount is the withCount argument value.
			WithCount parameter.WithCount
		}
		// GetEventTypesCount holds details about calls to the GetEventTypesCount method.
		GetEventTypesCount []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// WhereSearchName is the whereSearchName argument value.
			WhereSearchName string
		}
		// GetPermissionCategories holds details about calls to the GetPermissionCategories method.
		GetPermissionCategories []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// WhereSearchName is the whereSearchName argument value.
			WhereSearchName string
			// Order is the order argument value.
			Order parameter.PermissionCategoryOrderMethod
			// Pg is the pg argument value.
			Pg parameter.Pagination
			// Limit is the limit argument value.
			Limit parameter.Limit
			// Cursor is the cursor argument value.
			Cursor parameter.Cursor
			// Offset is the offset argument value.
			Offset parameter.Offset
			// WithCount is the withCount argument value.
			WithCount parameter.WithCount
		}
		// GetPermissionCategoriesCount holds details about calls to the GetPermissionCategoriesCount method.
		GetPermissionCategoriesCount []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// WhereSearchName is the whereSearchName argument value.
			WhereSearchName string
		}
		// GetPolicyCategories holds details about calls to the GetPolicyCategories method.
		GetPolicyCategories []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// WhereSearchName is the whereSearchName argument value.
			WhereSearchName string
			// Order is the order argument value.
			Order parameter.PolicyCategoryOrderMethod
			// Pg is the pg argument value.
			Pg parameter.Pagination
			// Limit is the limit argument value.
			Limit parameter.Limit
			// Cursor is the cursor argument value.
			Cursor parameter.Cursor
			// Offset is the offset argument value.
			Offset parameter.Offset
			// WithCount is the withCount argument value.
			WithCount parameter.WithCount
		}
		// GetPolicyCategoriesCount holds details about calls to the GetPolicyCategoriesCount method.
		GetPolicyCategoriesCount []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// WhereSearchName is the whereSearchName argument value.
			WhereSearchName string
		}
		// PluralDeleteAttendStatuses holds details about calls to the PluralDeleteAttendStatuses method.
		PluralDeleteAttendStatuses []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Ids is the ids argument value.
			Ids []uuid.UUID
		}
		// PluralDeleteAttendanceTypes holds details about calls to the PluralDeleteAttendanceTypes method.
		PluralDeleteAttendanceTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Ids is the ids argument value.
			Ids []uuid.UUID
		}
		// PluralDeleteEventTypes holds details about calls to the PluralDeleteEventTypes method.
		PluralDeleteEventTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Ids is the ids argument value.
			Ids []uuid.UUID
		}
		// PluralDeletePermissionCategories holds details about calls to the PluralDeletePermissionCategories method.
		PluralDeletePermissionCategories []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Ids is the ids argument value.
			Ids []uuid.UUID
		}
		// PluralDeletePolicyCategories holds details about calls to the PluralDeletePolicyCategories method.
		PluralDeletePolicyCategories []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Ids is the ids argument value.
			Ids []uuid.UUID
		}
		// UpdateAttendStatus holds details about calls to the UpdateAttendStatus method.
		UpdateAttendStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
			// Name is the name argument value.
			Name string
			// Key is the key argument value.
			Key string
		}
		// UpdateAttendanceType holds details about calls to the UpdateAttendanceType method.
		UpdateAttendanceType []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
			// Name is the name argument value.
			Name string
			// Key is the key argument value.
			Key string
			// Color is the color argument value.
			Color string
		}
		// UpdateEventType holds details about calls to the UpdateEventType method.
		UpdateEventType []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
			// Name is the name argument value.
			Name string
			// Key is the key argument value.
			Key string
			// Color is the color argument value.
			Color string
		}
		// UpdatePermissionCategory holds details about calls to the UpdatePermissionCategory method.
		UpdatePermissionCategory []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
			// Name is the name argument value.
			Name string
			// Key is the key argument value.
			Key string
			// Description is the description argument value.
			Description string
		}
		// UpdatePolicyCategory holds details about calls to the UpdatePolicyCategory method.
		UpdatePolicyCategory []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
			// Name is the name argument value.
			Name string
			// Key is the key argument value.
			Key string
			// Description is the description argument value.
			Description string
		}
	}
	lockCreateAttendStatus               sync.RWMutex
	lockCreateAttendStatuses             sync.RWMutex
	lockCreateAttendanceType             sync.RWMutex
	lockCreateAttendanceTypes            sync.RWMutex
	lockCreateEventType                  sync.RWMutex
	lockCreateEventTypes                 sync.RWMutex
	lockCreatePermissionCategories       sync.RWMutex
	lockCreatePermissionCategory         sync.RWMutex
	lockCreatePolicyCategories           sync.RWMutex
	lockCreatePolicyCategory             sync.RWMutex
	lockDeleteAttendStatus               sync.RWMutex
	lockDeleteAttendanceType             sync.RWMutex
	lockDeleteEventType                  sync.RWMutex
	lockDeletePermissionCategory         sync.RWMutex
	lockDeletePolicyCategory             sync.RWMutex
	lockFindAttendStatusByID             sync.RWMutex
	lockFindAttendStatusByKey            sync.RWMutex
	lockFindAttendanceTypeByID           sync.RWMutex
	lockFindAttendanceTypeByKey          sync.RWMutex
	lockFindEventTypeByID                sync.RWMutex
	lockFindEventTypeByKey               sync.RWMutex
	lockFindPermissionCategoryByID       sync.RWMutex
	lockFindPermissionCategoryByKey      sync.RWMutex
	lockFindPolicyCategoryByID           sync.RWMutex
	lockFindPolicyCategoryByKey          sync.RWMutex
	lockGetAttendStatuses                sync.RWMutex
	lockGetAttendStatusesCount           sync.RWMutex
	lockGetAttendanceTypes               sync.RWMutex
	lockGetAttendanceTypesCount          sync.RWMutex
	lockGetEventTypes                    sync.RWMutex
	lockGetEventTypesCount               sync.RWMutex
	lockGetPermissionCategories          sync.RWMutex
	lockGetPermissionCategoriesCount     sync.RWMutex
	lockGetPolicyCategories              sync.RWMutex
	lockGetPolicyCategoriesCount         sync.RWMutex
	lockPluralDeleteAttendStatuses       sync.RWMutex
	lockPluralDeleteAttendanceTypes      sync.RWMutex
	lockPluralDeleteEventTypes           sync.RWMutex
	lockPluralDeletePermissionCategories sync.RWMutex
	lockPluralDeletePolicyCategories     sync.RWMutex
	lockUpdateAttendStatus               sync.RWMutex
	lockUpdateAttendanceType             sync.RWMutex
	lockUpdateEventType                  sync.RWMutex
	lockUpdatePermissionCategory         sync.RWMutex
	lockUpdatePolicyCategory             sync.RWMutex
}

// CreateAttendStatus calls CreateAttendStatusFunc.
func (mock *ManagerInterfaceMock) CreateAttendStatus(ctx context.Context, name string, key string) (entity.AttendStatus, error) {
	if mock.CreateAttendStatusFunc == nil {
		panic("ManagerInterfaceMock.CreateAttendStatusFunc: method is nil but ManagerInterface.CreateAttendStatus was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Key  string
	}{
		Ctx:  ctx,
		Name: name,
		Key:  key,
	}
	mock.lockCreateAttendStatus.Lock()
	mock.calls.CreateAttendStatus = append(mock.calls.CreateAttendStatus, callInfo)
	mock.lockCreateAttendStatus.Unlock()
	return mock.CreateAttendStatusFunc(ctx, name, key)
}

// CreateAttendStatusCalls gets all the calls that were made to CreateAttendStatus.
// Check the length with:
//
//	len(mockedManagerInterface.CreateAttendStatusCalls())
func (mock *ManagerInterfaceMock) CreateAttendStatusCalls() []struct {
	Ctx  context.Context
	Name string
	Key  string
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Key  string
	}
	mock.lockCreateAttendStatus.RLock()
	calls = mock.calls.CreateAttendStatus
	mock.lockCreateAttendStatus.RUnlock()
	return calls
}

// CreateAttendStatuses calls CreateAttendStatusesFunc.
func (mock *ManagerInterfaceMock) CreateAttendStatuses(ctx context.Context, ps []parameter.CreateAttendStatusParam) (int64, error) {
	if mock.CreateAttendStatusesFunc == nil {
		panic("ManagerInterfaceMock.CreateAttendStatusesFunc: method is nil but ManagerInterface.CreateAttendStatuses was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Ps  []parameter.CreateAttendStatusParam
	}{
		Ctx: ctx,
		Ps:  ps,
	}
	mock.lockCreateAttendStatuses.Lock()
	mock.calls.CreateAttendStatuses = append(mock.calls.CreateAttendStatuses, callInfo)
	mock.lockCreateAttendStatuses.Unlock()
	return mock.CreateAttendStatusesFunc(ctx, ps)
}

// CreateAttendStatusesCalls gets all the calls that were made to CreateAttendStatuses.
// Check the length with:
//
//	len(mockedManagerInterface.CreateAttendStatusesCalls())
func (mock *ManagerInterfaceMock) CreateAttendStatusesCalls() []struct {
	Ctx context.Context
	Ps  []parameter.CreateAttendStatusParam
} {
	var calls []struct {
		Ctx context.Context
		Ps  []parameter.CreateAttendStatusParam
	}
	mock.lockCreateAttendStatuses.RLock()
	calls = mock.calls.CreateAttendStatuses
	mock.lockCreateAttendStatuses.RUnlock()
	return calls
}

// CreateAttendanceType calls CreateAttendanceTypeFunc.
func (mock *ManagerInterfaceMock) CreateAttendanceType(ctx context.Context, name string, key string, color string) (entity.AttendanceType, error) {
	if mock.CreateAttendanceTypeFunc == nil {
		panic("ManagerInterfaceMock.CreateAttendanceTypeFunc: method is nil but ManagerInterface.CreateAttendanceType was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Name  string
		Key   string
		Color string
	}{
		Ctx:   ctx,
		Name:  name,
		Key:   key,
		Color: color,
	}
	mock.lockCreateAttendanceType.Lock()
	mock.calls.CreateAttendanceType = append(mock.calls.CreateAttendanceType, callInfo)
	mock.lockCreateAttendanceType.Unlock()
	return mock.CreateAttendanceTypeFunc(ctx, name, key, color)
}

// CreateAttendanceTypeCalls gets all the calls that were made to CreateAttendanceType.
// Check the length with:
//
//	len(mockedManagerInterface.CreateAttendanceTypeCalls())
func (mock *ManagerInterfaceMock) CreateAttendanceTypeCalls() []struct {
	Ctx   context.Context
	Name  string
	Key   string
	Color string
} {
	var calls []struct {
		Ctx   context.Context
		Name  string
		Key   string
		Color string
	}
	mock.lockCreateAttendanceType.RLock()
	calls = mock.calls.CreateAttendanceType
	mock.lockCreateAttendanceType.RUnlock()
	return calls
}

// CreateAttendanceTypes calls CreateAttendanceTypesFunc.
func (mock *ManagerInterfaceMock) CreateAttendanceTypes(ctx context.Context, ps []parameter.CreateAttendanceTypeParam) (int64, error) {
	if mock.CreateAttendanceTypesFunc == nil {
		panic("ManagerInterfaceMock.CreateAttendanceTypesFunc: method is nil but ManagerInterface.CreateAttendanceTypes was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Ps  []parameter.CreateAttendanceTypeParam
	}{
		Ctx: ctx,
		Ps:  ps,
	}
	mock.lockCreateAttendanceTypes.Lock()
	mock.calls.CreateAttendanceTypes = append(mock.calls.CreateAttendanceTypes, callInfo)
	mock.lockCreateAttendanceTypes.Unlock()
	return mock.CreateAttendanceTypesFunc(ctx, ps)
}

// CreateAttendanceTypesCalls gets all the calls that were made to CreateAttendanceTypes.
// Check the length with:
//
//	len(mockedManagerInterface.CreateAttendanceTypesCalls())
func (mock *ManagerInterfaceMock) CreateAttendanceTypesCalls() []struct {
	Ctx context.Context
	Ps  []parameter.CreateAttendanceTypeParam
} {
	var calls []struct {
		Ctx context.Context
		Ps  []parameter.CreateAttendanceTypeParam
	}
	mock.lockCreateAttendanceTypes.RLock()
	calls = mock.calls.CreateAttendanceTypes
	mock.lockCreateAttendanceTypes.RUnlock()
	return calls
}

// CreateEventType calls CreateEventTypeFunc.
func (mock *ManagerInterfaceMock) CreateEventType(ctx context.Context, name string, key string, color string) (entity.EventType, error) {
	if mock.CreateEventTypeFunc == nil {
		panic("ManagerInterfaceMock.CreateEventTypeFunc: method is nil but ManagerInterface.CreateEventType was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Name  string
		Key   string
		Color string
	}{
		Ctx:   ctx,
		Name:  name,
		Key:   key,
		Color: color,
	}
	mock.lockCreateEventType.Lock()
	mock.calls.CreateEventType = append(mock.calls.CreateEventType, callInfo)
	mock.lockCreateEventType.Unlock()
	return mock.CreateEventTypeFunc(ctx, name, key, color)
}

// CreateEventTypeCalls gets all the calls that were made to CreateEventType.
// Check the length with:
//
//	len(mockedManagerInterface.CreateEventTypeCalls())
func (mock *ManagerInterfaceMock) CreateEventTypeCalls() []struct {
	Ctx   context.Context
	Name  string
	Key   string
	Color string
} {
	var calls []struct {
		Ctx   context.Context
		Name  string
		Key   string
		Color string
	}
	mock.lockCreateEventType.RLock()
	calls = mock.calls.CreateEventType
	mock.lockCreateEventType.RUnlock()
	return calls
}

// CreateEventTypes calls CreateEventTypesFunc.
func (mock *ManagerInterfaceMock) CreateEventTypes(ctx context.Context, ps []parameter.CreateEventTypeParam) (int64, error) {
	if mock.CreateEventTypesFunc == nil {
		panic("ManagerInterfaceMock.CreateEventTypesFunc: method is nil but ManagerInterface.CreateEventTypes was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Ps  []parameter.CreateEventTypeParam
	}{
		Ctx: ctx,
		Ps:  ps,
	}
	mock.lockCreateEventTypes.Lock()
	mock.calls.CreateEventTypes = append(mock.calls.CreateEventTypes, callInfo)
	mock.lockCreateEventTypes.Unlock()
	return mock.CreateEventTypesFunc(ctx, ps)
}

// CreateEventTypesCalls gets all the calls that were made to CreateEventTypes.
// Check the length with:
//
//	len(mockedManagerInterface.CreateEventTypesCalls())
func (mock *ManagerInterfaceMock) CreateEventTypesCalls() []struct {
	Ctx context.Context
	Ps  []parameter.CreateEventTypeParam
} {
	var calls []struct {
		Ctx context.Context
		Ps  []parameter.CreateEventTypeParam
	}
	mock.lockCreateEventTypes.RLock()
	calls = mock.calls.CreateEventTypes
	mock.lockCreateEventTypes.RUnlock()
	return calls
}

// CreatePermissionCategories calls CreatePermissionCategoriesFunc.
func (mock *ManagerInterfaceMock) CreatePermissionCategories(ctx context.Context, ps []parameter.CreatePermissionCategoryParam) (int64, error) {
	if mock.CreatePermissionCategoriesFunc == nil {
		panic("ManagerInterfaceMock.CreatePermissionCategoriesFunc: method is nil but ManagerInterface.CreatePermissionCategories was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Ps  []parameter.CreatePermissionCategoryParam
	}{
		Ctx: ctx,
		Ps:  ps,
	}
	mock.lockCreatePermissionCategories.Lock()
	mock.calls.CreatePermissionCategories = append(mock.calls.CreatePermissionCategories, callInfo)
	mock.lockCreatePermissionCategories.Unlock()
	return mock.CreatePermissionCategoriesFunc(ctx, ps)
}

// CreatePermissionCategoriesCalls gets all the calls that were made to CreatePermissionCategories.
// Check the length with:
//
//	len(mockedManagerInterface.CreatePermissionCategoriesCalls())
func (mock *ManagerInterfaceMock) CreatePermissionCategoriesCalls() []struct {
	Ctx context.Context
	Ps  []parameter.CreatePermissionCategoryParam
} {
	var calls []struct {
		Ctx context.Context
		Ps  []parameter.CreatePermissionCategoryParam
	}
	mock.lockCreatePermissionCategories.RLock()
	calls = mock.calls.CreatePermissionCategories
	mock.lockCreatePermissionCategories.RUnlock()
	return calls
}

// CreatePermissionCategory calls CreatePermissionCategoryFunc.
func (mock *ManagerInterfaceMock) CreatePermissionCategory(ctx context.Context, name string, key string, description string) (entity.PermissionCategory, error) {
	if mock.CreatePermissionCategoryFunc == nil {
		panic("ManagerInterfaceMock.CreatePermissionCategoryFunc: method is nil but ManagerInterface.CreatePermissionCategory was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		Key         string
		Description string
	}{
		Ctx:         ctx,
		Name:        name,
		Key:         key,
		Description: description,
	}
	mock.lockCreatePermissionCategory.Lock()
	mock.calls.CreatePermissionCategory = append(mock.calls.CreatePermissionCategory, callInfo)
	mock.lockCreatePermissionCategory.Unlock()
	return mock.CreatePermissionCategoryFunc(ctx, name, key, description)
}

// CreatePermissionCategoryCalls gets all the calls that were made to CreatePermissionCategory.
// Check the length with:
//
//	len(mockedManagerInterface.CreatePermissionCategoryCalls())
func (mock *ManagerInterfaceMock) CreatePermissionCategoryCalls() []struct {
	Ctx         context.Context
	Name        string
	Key         string
	Description string
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		Key         string
		Description string
	}
	mock.lockCreatePermissionCategory.RLock()
	calls = mock.calls.CreatePermissionCategory
	mock.lockCreatePermissionCategory.RUnlock()
	return calls
}

// CreatePolicyCategories calls CreatePolicyCategoriesFunc.
func (mock *ManagerInterfaceMock) CreatePolicyCategories(ctx context.Context, ps []parameter.CreatePolicyCategoryParam) (int64, error) {
	if mock.CreatePolicyCategoriesFunc == nil {
		panic("ManagerInterfaceMock.CreatePolicyCategoriesFunc: method is nil but ManagerInterface.CreatePolicyCategories was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Ps  []parameter.CreatePolicyCategoryParam
	}{
		Ctx: ctx,
		Ps:  ps,
	}
	mock.lockCreatePolicyCategories.Lock()
	mock.calls.CreatePolicyCategories = append(mock.calls.CreatePolicyCategories, callInfo)
	mock.lockCreatePolicyCategories.Unlock()
	return mock.CreatePolicyCategoriesFunc(ctx, ps)
}

// CreatePolicyCategoriesCalls gets all the calls that were made to CreatePolicyCategories.
// Check the length with:
//
//	len(mockedManagerInterface.CreatePolicyCategoriesCalls())
func (mock *ManagerInterfaceMock) CreatePolicyCategoriesCalls() []struct {
	Ctx context.Context
	Ps  []parameter.CreatePolicyCategoryParam
} {
	var calls []struct {
		Ctx context.Context
		Ps  []parameter.CreatePolicyCategoryParam
	}
	mock.lockCreatePolicyCategories.RLock()
	calls = mock.calls.CreatePolicyCategories
	mock.lockCreatePolicyCategories.RUnlock()
	return calls
}

// CreatePolicyCategory calls CreatePolicyCategoryFunc.
func (mock *ManagerInterfaceMock) CreatePolicyCategory(ctx context.Context, name string, key string, description string) (entity.PolicyCategory, error) {
	if mock.CreatePolicyCategoryFunc == nil {
		panic("ManagerInterfaceMock.CreatePolicyCategoryFunc: method is nil but ManagerInterface.CreatePolicyCategory was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		Key         string
		Description string
	}{
		Ctx:         ctx,
		Name:        name,
		Key:         key,
		Description: description,
	}
	mock.lockCreatePolicyCategory.Lock()
	mock.calls.CreatePolicyCategory = append(mock.calls.CreatePolicyCategory, callInfo)
	mock.lockCreatePolicyCategory.Unlock()
	return mock.CreatePolicyCategoryFunc(ctx, name, key, description)
}

// CreatePolicyCategoryCalls gets all the calls that were made to CreatePolicyCategory.
// Check the length with:
//
//	len(mockedManagerInterface.CreatePolicyCategoryCalls())
func (mock *ManagerInterfaceMock) CreatePolicyCategoryCalls() []struct {
	Ctx         context.Context
	Name        string
	Key         string
	Description string
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		Key         string
		Description string
	}
	mock.lockCreatePolicyCategory.RLock()
	calls = mock.calls.CreatePolicyCategory
	mock.lockCreatePolicyCategory.RUnlock()
	return calls
}

// DeleteAttendStatus calls DeleteAttendStatusFunc.
func (mock *ManagerInterfaceMock) DeleteAttendStatus(ctx context.Context, id uuid.UUID) error {
	if mock.DeleteAttendStatusFunc == nil {
		panic("ManagerInterfaceMock.DeleteAttendStatusFunc: method is nil but ManagerInterface.DeleteAttendStatus was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeleteAttendStatus.Lock()
	mock.calls.DeleteAttendStatus = append(mock.calls.DeleteAttendStatus, callInfo)
	mock.lockDeleteAttendStatus.Unlock()
	return mock.DeleteAttendStatusFunc(ctx, id)
}

// DeleteAttendStatusCalls gets all the calls that were made to DeleteAttendStatus.
// Check the length with:
//
//	len(mockedManagerInterface.DeleteAttendStatusCalls())
func (mock *ManagerInterfaceMock) DeleteAttendStatusCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockDeleteAttendStatus.RLock()
	calls = mock.calls.DeleteAttendStatus
	mock.lockDeleteAttendStatus.RUnlock()
	return calls
}

// DeleteAttendanceType calls DeleteAttendanceTypeFunc.
func (mock *ManagerInterfaceMock) DeleteAttendanceType(ctx context.Context, id uuid.UUID) error {
	if mock.DeleteAttendanceTypeFunc == nil {
		panic("ManagerInterfaceMock.DeleteAttendanceTypeFunc: method is nil but ManagerInterface.DeleteAttendanceType was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeleteAttendanceType.Lock()
	mock.calls.DeleteAttendanceType = append(mock.calls.DeleteAttendanceType, callInfo)
	mock.lockDeleteAttendanceType.Unlock()
	return mock.DeleteAttendanceTypeFunc(ctx, id)
}

// DeleteAttendanceTypeCalls gets all the calls that were made to DeleteAttendanceType.
// Check the length with:
//
//	len(mockedManagerInterface.DeleteAttendanceTypeCalls())
func (mock *ManagerInterfaceMock) DeleteAttendanceTypeCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockDeleteAttendanceType.RLock()
	calls = mock.calls.DeleteAttendanceType
	mock.lockDeleteAttendanceType.RUnlock()
	return calls
}

// DeleteEventType calls DeleteEventTypeFunc.
func (mock *ManagerInterfaceMock) DeleteEventType(ctx context.Context, id uuid.UUID) error {
	if mock.DeleteEventTypeFunc == nil {
		panic("ManagerInterfaceMock.DeleteEventTypeFunc: method is nil but ManagerInterface.DeleteEventType was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeleteEventType.Lock()
	mock.calls.DeleteEventType = append(mock.calls.DeleteEventType, callInfo)
	mock.lockDeleteEventType.Unlock()
	return mock.DeleteEventTypeFunc(ctx, id)
}

// DeleteEventTypeCalls gets all the calls that were made to DeleteEventType.
// Check the length with:
//
//	len(mockedManagerInterface.DeleteEventTypeCalls())
func (mock *ManagerInterfaceMock) DeleteEventTypeCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockDeleteEventType.RLock()
	calls = mock.calls.DeleteEventType
	mock.lockDeleteEventType.RUnlock()
	return calls
}

// DeletePermissionCategory calls DeletePermissionCategoryFunc.
func (mock *ManagerInterfaceMock) DeletePermissionCategory(ctx context.Context, id uuid.UUID) error {
	if mock.DeletePermissionCategoryFunc == nil {
		panic("ManagerInterfaceMock.DeletePermissionCategoryFunc: method is nil but ManagerInterface.DeletePermissionCategory was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeletePermissionCategory.Lock()
	mock.calls.DeletePermissionCategory = append(mock.calls.DeletePermissionCategory, callInfo)
	mock.lockDeletePermissionCategory.Unlock()
	return mock.DeletePermissionCategoryFunc(ctx, id)
}

// DeletePermissionCategoryCalls gets all the calls that were made to DeletePermissionCategory.
// Check the length with:
//
//	len(mockedManagerInterface.DeletePermissionCategoryCalls())
func (mock *ManagerInterfaceMock) DeletePermissionCategoryCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockDeletePermissionCategory.RLock()
	calls = mock.calls.DeletePermissionCategory
	mock.lockDeletePermissionCategory.RUnlock()
	return calls
}

// DeletePolicyCategory calls DeletePolicyCategoryFunc.
func (mock *ManagerInterfaceMock) DeletePolicyCategory(ctx context.Context, id uuid.UUID) error {
	if mock.DeletePolicyCategoryFunc == nil {
		panic("ManagerInterfaceMock.DeletePolicyCategoryFunc: method is nil but ManagerInterface.DeletePolicyCategory was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDeletePolicyCategory.Lock()
	mock.calls.DeletePolicyCategory = append(mock.calls.DeletePolicyCategory, callInfo)
	mock.lockDeletePolicyCategory.Unlock()
	return mock.DeletePolicyCategoryFunc(ctx, id)
}

// DeletePolicyCategoryCalls gets all the calls that were made to DeletePolicyCategory.
// Check the length with:
//
//	len(mockedManagerInterface.DeletePolicyCategoryCalls())
func (mock *ManagerInterfaceMock) DeletePolicyCategoryCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockDeletePolicyCategory.RLock()
	calls = mock.calls.DeletePolicyCategory
	mock.lockDeletePolicyCategory.RUnlock()
	return calls
}

// FindAttendStatusByID calls FindAttendStatusByIDFunc.
func (mock *ManagerInterfaceMock) FindAttendStatusByID(ctx context.Context, id uuid.UUID) (entity.AttendStatus, error) {
	if mock.FindAttendStatusByIDFunc == nil {
		panic("ManagerInterfaceMock.FindAttendStatusByIDFunc: method is nil but ManagerInterface.FindAttendStatusByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockFindAttendStatusByID.Lock()
	mock.calls.FindAttendStatusByID = append(mock.calls.FindAttendStatusByID, callInfo)
	mock.lockFindAttendStatusByID.Unlock()
	return mock.FindAttendStatusByIDFunc(ctx, id)
}

// FindAttendStatusByIDCalls gets all the calls that were made to FindAttendStatusByID.
// Check the length with:
//
//	len(mockedManagerInterface.FindAttendStatusByIDCalls())
func (mock *ManagerInterfaceMock) FindAttendStatusByIDCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockFindAttendStatusByID.RLock()
	calls = mock.calls.FindAttendStatusByID
	mock.lockFindAttendStatusByID.RUnlock()
	return calls
}

// FindAttendStatusByKey calls FindAttendStatusByKeyFunc.
func (mock *ManagerInterfaceMock) FindAttendStatusByKey(ctx context.Context, key string) (entity.AttendStatus, error) {
	if mock.FindAttendStatusByKeyFunc == nil {
		panic("ManagerInterfaceMock.FindAttendStatusByKeyFunc: method is nil but ManagerInterface.FindAttendStatusByKey was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockFindAttendStatusByKey.Lock()
	mock.calls.FindAttendStatusByKey = append(mock.calls.FindAttendStatusByKey, callInfo)
	mock.lockFindAttendStatusByKey.Unlock()
	return mock.FindAttendStatusByKeyFunc(ctx, key)
}

// FindAttendStatusByKeyCalls gets all the calls that were made to FindAttendStatusByKey.
// Check the length with:
//
//	len(mockedManagerInterface.FindAttendStatusByKeyCalls())
func (mock *ManagerInterfaceMock) FindAttendStatusByKeyCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockFindAttendStatusByKey.RLock()
	calls = mock.calls.FindAttendStatusByKey
	mock.lockFindAttendStatusByKey.RUnlock()
	return calls
}

// FindAttendanceTypeByID calls FindAttendanceTypeByIDFunc.
func (mock *ManagerInterfaceMock) FindAttendanceTypeByID(ctx context.Context, id uuid.UUID) (entity.AttendanceType, error) {
	if mock.FindAttendanceTypeByIDFunc == nil {
		panic("ManagerInterfaceMock.FindAttendanceTypeByIDFunc: method is nil but ManagerInterface.FindAttendanceTypeByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockFindAttendanceTypeByID.Lock()
	mock.calls.FindAttendanceTypeByID = append(mock.calls.FindAttendanceTypeByID, callInfo)
	mock.lockFindAttendanceTypeByID.Unlock()
	return mock.FindAttendanceTypeByIDFunc(ctx, id)
}

// FindAttendanceTypeByIDCalls gets all the calls that were made to FindAttendanceTypeByID.
// Check the length with:
//
//	len(mockedManagerInterface.FindAttendanceTypeByIDCalls())
func (mock *ManagerInterfaceMock) FindAttendanceTypeByIDCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockFindAttendanceTypeByID.RLock()
	calls = mock.calls.FindAttendanceTypeByID
	mock.lockFindAttendanceTypeByID.RUnlock()
	return calls
}

// FindAttendanceTypeByKey calls FindAttendanceTypeByKeyFunc.
func (mock *ManagerInterfaceMock) FindAttendanceTypeByKey(ctx context.Context, key string) (entity.AttendanceType, error) {
	if mock.FindAttendanceTypeByKeyFunc == nil {
		panic("ManagerInterfaceMock.FindAttendanceTypeByKeyFunc: method is nil but ManagerInterface.FindAttendanceTypeByKey was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockFindAttendanceTypeByKey.Lock()
	mock.calls.FindAttendanceTypeByKey = append(mock.calls.FindAttendanceTypeByKey, callInfo)
	mock.lockFindAttendanceTypeByKey.Unlock()
	return mock.FindAttendanceTypeByKeyFunc(ctx, key)
}

// FindAttendanceTypeByKeyCalls gets all the calls that were made to FindAttendanceTypeByKey.
// Check the length with:
//
//	len(mockedManagerInterface.FindAttendanceTypeByKeyCalls())
func (mock *ManagerInterfaceMock) FindAttendanceTypeByKeyCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockFindAttendanceTypeByKey.RLock()
	calls = mock.calls.FindAttendanceTypeByKey
	mock.lockFindAttendanceTypeByKey.RUnlock()
	return calls
}

// FindEventTypeByID calls FindEventTypeByIDFunc.
func (mock *ManagerInterfaceMock) FindEventTypeByID(ctx context.Context, id uuid.UUID) (entity.EventType, error) {
	if mock.FindEventTypeByIDFunc == nil {
		panic("ManagerInterfaceMock.FindEventTypeByIDFunc: method is nil but ManagerInterface.FindEventTypeByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockFindEventTypeByID.Lock()
	mock.calls.FindEventTypeByID = append(mock.calls.FindEventTypeByID, callInfo)
	mock.lockFindEventTypeByID.Unlock()
	return mock.FindEventTypeByIDFunc(ctx, id)
}

// FindEventTypeByIDCalls gets all the calls that were made to FindEventTypeByID.
// Check the length with:
//
//	len(mockedManagerInterface.FindEventTypeByIDCalls())
func (mock *ManagerInterfaceMock) FindEventTypeByIDCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockFindEventTypeByID.RLock()
	calls = mock.calls.FindEventTypeByID
	mock.lockFindEventTypeByID.RUnlock()
	return calls
}

// FindEventTypeByKey calls FindEventTypeByKeyFunc.
func (mock *ManagerInterfaceMock) FindEventTypeByKey(ctx context.Context, key string) (entity.EventType, error) {
	if mock.FindEventTypeByKeyFunc == nil {
		panic("ManagerInterfaceMock.FindEventTypeByKeyFunc: method is nil but ManagerInterface.FindEventTypeByKey was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockFindEventTypeByKey.Lock()
	mock.calls.FindEventTypeByKey = append(mock.calls.FindEventTypeByKey, callInfo)
	mock.lockFindEventTypeByKey.Unlock()
	return mock.FindEventTypeByKeyFunc(ctx, key)
}

// FindEventTypeByKeyCalls gets all the calls that were made to FindEventTypeByKey.
// Check the length with:
//
//	len(mockedManagerInterface.FindEventTypeByKeyCalls())
func (mock *ManagerInterfaceMock) FindEventTypeByKeyCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockFindEventTypeByKey.RLock()
	calls = mock.calls.FindEventTypeByKey
	mock.lockFindEventTypeByKey.RUnlock()
	return calls
}

// FindPermissionCategoryByID calls FindPermissionCategoryByIDFunc.
func (mock *ManagerInterfaceMock) FindPermissionCategoryByID(ctx context.Context, id uuid.UUID) (entity.PermissionCategory, error) {
	if mock.FindPermissionCategoryByIDFunc == nil {
		panic("ManagerInterfaceMock.FindPermissionCategoryByIDFunc: method is nil but ManagerInterface.FindPermissionCategoryByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockFindPermissionCategoryByID.Lock()
	mock.calls.FindPermissionCategoryByID = append(mock.calls.FindPermissionCategoryByID, callInfo)
	mock.lockFindPermissionCategoryByID.Unlock()
	return mock.FindPermissionCategoryByIDFunc(ctx, id)
}

// FindPermissionCategoryByIDCalls gets all the calls that were made to FindPermissionCategoryByID.
// Check the length with:
//
//	len(mockedManagerInterface.FindPermissionCategoryByIDCalls())
func (mock *ManagerInterfaceMock) FindPermissionCategoryByIDCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockFindPermissionCategoryByID.RLock()
	calls = mock.calls.FindPermissionCategoryByID
	mock.lockFindPermissionCategoryByID.RUnlock()
	return calls
}

// FindPermissionCategoryByKey calls FindPermissionCategoryByKeyFunc.
func (mock *ManagerInterfaceMock) FindPermissionCategoryByKey(ctx context.Context, key string) (entity.PermissionCategory, error) {
	if mock.FindPermissionCategoryByKeyFunc == nil {
		panic("ManagerInterfaceMock.FindPermissionCategoryByKeyFunc: method is nil but ManagerInterface.FindPermissionCategoryByKey was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockFindPermissionCategoryByKey.Lock()
	mock.calls.FindPermissionCategoryByKey = append(mock.calls.FindPermissionCategoryByKey, callInfo)
	mock.lockFindPermissionCategoryByKey.Unlock()
	return mock.FindPermissionCategoryByKeyFunc(ctx, key)
}

// FindPermissionCategoryByKeyCalls gets all the calls that were made to FindPermissionCategoryByKey.
// Check the length with:
//
//	len(mockedManagerInterface.FindPermissionCategoryByKeyCalls())
func (mock *ManagerInterfaceMock) FindPermissionCategoryByKeyCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockFindPermissionCategoryByKey.RLock()
	calls = mock.calls.FindPermissionCategoryByKey
	mock.lockFindPermissionCategoryByKey.RUnlock()
	return calls
}

// FindPolicyCategoryByID calls FindPolicyCategoryByIDFunc.
func (mock *ManagerInterfaceMock) FindPolicyCategoryByID(ctx context.Context, id uuid.UUID) (entity.PolicyCategory, error) {
	if mock.FindPolicyCategoryByIDFunc == nil {
		panic("ManagerInterfaceMock.FindPolicyCategoryByIDFunc: method is nil but ManagerInterface.FindPolicyCategoryByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockFindPolicyCategoryByID.Lock()
	mock.calls.FindPolicyCategoryByID = append(mock.calls.FindPolicyCategoryByID, callInfo)
	mock.lockFindPolicyCategoryByID.Unlock()
	return mock.FindPolicyCategoryByIDFunc(ctx, id)
}

// FindPolicyCategoryByIDCalls gets all the calls that were made to FindPolicyCategoryByID.
// Check the length with:
//
//	len(mockedManagerInterface.FindPolicyCategoryByIDCalls())
func (mock *ManagerInterfaceMock) FindPolicyCategoryByIDCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockFindPolicyCategoryByID.RLock()
	calls = mock.calls.FindPolicyCategoryByID
	mock.lockFindPolicyCategoryByID.RUnlock()
	return calls
}

// FindPolicyCategoryByKey calls FindPolicyCategoryByKeyFunc.
func (mock *ManagerInterfaceMock) FindPolicyCategoryByKey(ctx context.Context, key string) (entity.PolicyCategory, error) {
	if mock.FindPolicyCategoryByKeyFunc == nil {
		panic("ManagerInterfaceMock.FindPolicyCategoryByKeyFunc: method is nil but ManagerInterface.FindPolicyCategoryByKey was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockFindPolicyCategoryByKey.Lock()
	mock.calls.FindPolicyCategoryByKey = append(mock.calls.FindPolicyCategoryByKey, callInfo)
	mock.lockFindPolicyCategoryByKey.Unlock()
	return mock.FindPolicyCategoryByKeyFunc(ctx, key)
}

// FindPolicyCategoryByKeyCalls gets all the calls that were made to FindPolicyCategoryByKey.
// Check the length with:
//
//	len(mockedManagerInterface.FindPolicyCategoryByKeyCalls())
func (mock *ManagerInterfaceMock) FindPolicyCategoryByKeyCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockFindPolicyCategoryByKey.RLock()
	calls = mock.calls.FindPolicyCategoryByKey
	mock.lockFindPolicyCategoryByKey.RUnlock()
	return calls
}

// GetAttendStatuses calls GetAttendStatusesFunc.
func (mock *ManagerInterfaceMock) GetAttendStatuses(ctx context.Context, whereSearchName string, order parameter.AttendStatusOrderMethod, pg parameter.Pagination, limit parameter.Limit, cursor parameter.Cursor, offset parameter.Offset, withCount parameter.WithCount) (store.ListResult[entity.AttendStatus], error) {
	if mock.GetAttendStatusesFunc == nil {
		panic("ManagerInterfaceMock.GetAttendStatusesFunc: method is nil but ManagerInterface.GetAttendStatuses was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		WhereSearchName string
		Order           parameter.AttendStatusOrderMethod
		Pg              parameter.Pagination
		Limit           parameter.Limit
		Cursor          parameter.Cursor
		Offset          parameter.Offset
		WithCount       parameter.WithCount
	}{
		Ctx:             ctx,
		WhereSearchName: whereSearchName,
		Order:           order,
		Pg:              pg,
		Limit:           limit,
		Cursor:          cursor,
		Offset:          offset,
		WithCount:       withCount,
	}
	mock.lockGetAttendStatuses.Lock()
	mock.calls.GetAttendStatuses = append(mock.calls.GetAttendStatuses, callInfo)
	mock.lockGetAttendStatuses.Unlock()
	return mock.GetAttendStatusesFunc(ctx, whereSearchName, order, pg, limit, cursor, offset, withCount)
}

// GetAttendStatusesCalls gets all the calls that were made to GetAttendStatuses.
// Check the length with:
//
//	len(mockedManagerInterface.GetAttendStatusesCalls())
func (mock *ManagerInterfaceMock) GetAttendStatusesCalls() []struct {
	Ctx             context.Context
	WhereSearchName string
	Order           parameter.AttendStatusOrderMethod
	Pg              parameter.Pagination
	Limit           parameter.Limit
	Cursor          parameter.Cursor
	Offset          parameter.Offset
	WithCount       parameter.WithCount
} {
	var calls []struct {
		Ctx             context.Context
		WhereSearchName string
		Order           parameter.AttendStatusOrderMethod
		Pg              parameter.Pagination
		Limit           parameter.Limit
		Cursor          parameter.Cursor
		Offset          parameter.Offset
		WithCount       parameter.WithCount
	}
	mock.lockGetAttendStatuses.RLock()
	calls = mock.calls.GetAttendStatuses
	mock.lockGetAttendStatuses.RUnlock()
	return calls
}

// GetAttendStatusesCount calls GetAttendStatusesCountFunc.
func (mock *ManagerInterfaceMock) GetAttendStatusesCount(ctx context.Context, whereSearchName string) (int64, error) {
	if mock.GetAttendStatusesCountFunc == nil {
		panic("ManagerInterfaceMock.GetAttendStatusesCountFunc: method is nil but ManagerInterface.GetAttendStatusesCount was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		WhereSearchName string
	}{
		Ctx:             ctx,
		WhereSearchName: whereSearchName,
	}
	mock.lockGetAttendStatusesCount.Lock()
	mock.calls.GetAttendStatusesCount = append(mock.calls.GetAttendStatusesCount, callInfo)
	mock.lockGetAttendStatusesCount.Unlock()
	return mock.GetAttendStatusesCountFunc(ctx, whereSearchName)
}

// GetAttendStatusesCountCalls gets all the calls that were made to GetAttendStatusesCount.
// Check the length with:
//
//	len(mockedManagerInterface.GetAttendStatusesCountCalls())
func (mock *ManagerInterfaceMock) GetAttendStatusesCountCalls() []struct {
	Ctx             context.Context
	WhereSearchName string
} {
	var calls []struct {
		Ctx             context.Context
		WhereSearchName string
	}
	mock.lockGetAttendStatusesCount.RLock()
	calls = mock.calls.GetAttendStatusesCount
	mock.lockGetAttendStatusesCount.RUnlock()
	return calls
}

// GetAttendanceTypes calls GetAttendanceTypesFunc.
func (mock *ManagerInterfaceMock) GetAttendanceTypes(ctx context.Context, whereSearchName string, order parameter.AttendanceTypeOrderMethod, pg parameter.Pagination, limit parameter.Limit, cursor parameter.Cursor, offset parameter.Offset, withCount parameter.WithCount) (store.ListResult[entity.AttendanceType], error) {
	if mock.GetAttendanceTypesFunc == nil {
		panic("ManagerInterfaceMock.GetAttendanceTypesFunc: method is nil but ManagerInterface.GetAttendanceTypes was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		WhereSearchName string
		Order           parameter.AttendanceTypeOrderMethod
		Pg              parameter.Pagination
		Limit           parameter.Limit
		Cursor          parameter.Cursor
		Offset          parameter.Offset
		WithCount       parameter.WithCount
	}{
		Ctx:             ctx,
		WhereSearchName: whereSearchName,
		Order:           order,
		Pg:              pg,
		Limit:           limit,
		Cursor:          cursor,
		Offset:          offset,
		WithCount:       withCount,
	}
	mock.lockGetAttendanceTypes.Lock()
	mock.calls.GetAttendanceTypes = append(mock.calls.GetAttendanceTypes, callInfo)
	mock.lockGetAttendanceTypes.Unlock()
	return mock.GetAttendanceTypesFunc(ctx, whereSearchName, order, pg, limit, cursor, offset, withCount)
}

// GetAttendanceTypesCalls gets all the calls that were made to GetAttendanceTypes.
// Check the length with:
//
//	len(mockedManagerInterface.GetAttendanceTypesCalls())
func (mock *ManagerInterfaceMock) GetAttendanceTypesCalls() []struct {
	Ctx             context.Context
	WhereSearchName string
	Order           parameter.AttendanceTypeOrderMethod
	Pg              parameter.Pagination
	Limit           parameter.Limit
	Cursor          parameter.Cursor
	Offset          parameter.Offset
	WithCount       parameter.WithCount
} {
	var calls []struct {
		Ctx             context.Context
		WhereSearchName string
		Order           parameter.AttendanceTypeOrderMethod
		Pg              parameter.Pagination
		Limit           parameter.Limit
		Cursor          parameter.Cursor
		Offset          parameter.Offset
		WithCount       parameter.WithCount
	}
	mock.lockGetAttendanceTypes.RLock()
	calls = mock.calls.GetAttendanceTypes
	mock.lockGetAttendanceTypes.RUnlock()
	return calls
}

// GetAttendanceTypesCount calls GetAttendanceTypesCountFunc.
func (mock *ManagerInterfaceMock) GetAttendanceTypesCount(ctx context.Context, whereSearchName string) (int64, error) {
	if mock.GetAttendanceTypesCountFunc == nil {
		panic("ManagerInterfaceMock.GetAttendanceTypesCountFunc: method is nil but ManagerInterface.GetAttendanceTypesCount was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		WhereSearchName string
	}{
		Ctx:             ctx,
		WhereSearchName: whereSearchName,
	}
	mock.lockGetAttendanceTypesCount.Lock()
	mock.calls.GetAttendanceTypesCount = append(mock.calls.GetAttendanceTypesCount, callInfo)
	mock.lockGetAttendanceTypesCount.Unlock()
	return mock.GetAttendanceTypesCountFunc(ctx, whereSearchName)
}

// GetAttendanceTypesCountCalls gets all the calls that were made to GetAttendanceTypesCount.
// Check the length with:
//
//	len(mockedManagerInterface.GetAttendanceTypesCountCalls())
func (mock *ManagerInterfaceMock) GetAttendanceTypesCountCalls() []struct {
	Ctx             context.Context
	WhereSearchName string
} {
	var calls []struct {
		Ctx             context.Context
		WhereSearchName string
	}
	mock.lockGetAttendanceTypesCount.RLock()
	calls = mock.calls.GetAttendanceTypesCount
	mock.lockGetAttendanceTypesCount.RUnlock()
	return calls
}

// GetEventTypes calls GetEventTypesFunc.
func (mock *ManagerInterfaceMock) GetEventTypes(ctx context.Context, whereSearchName string, order parameter.EventTypeOrderMethod, pg parameter.Pagination, limit parameter.Limit, cursor parameter.Cursor, offset parameter.Offset, withCount parameter.WithCount) (store.ListResult[entity.EventType], error) {
	if mock.GetEventTypesFunc == nil {
		panic("ManagerInterfaceMock.GetEventTypesFunc: method is nil but ManagerInterface.GetEventTypes was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		WhereSearchName string
		Order           parameter.EventTypeOrderMethod
		Pg              parameter.Pagination
		Limit           parameter.Limit
		Cursor          parameter.Cursor
		Offset          parameter.Offset
		WithCount       parameter.WithCount
	}{
		Ctx:             ctx,
		WhereSearchName: whereSearchName,
		Order:           order,
		Pg:              pg,
		Limit:           limit,
		Cursor:          cursor,
		Offset:          offset,
		WithCount:       withCount,
	}
	mock.lockGetEventTypes.Lock()
	mock.calls.GetEventTypes = append(mock.calls.GetEventTypes, callInfo)
	mock.lockGetEventTypes.Unlock()
	return mock.GetEventTypesFunc(ctx, whereSearchName, order, pg, limit, cursor, offset, withCount)
}

// GetEventTypesCalls gets all the calls that were made to GetEventTypes.
// Check the length with:
//
//	len(mockedManagerInterface.GetEventTypesCalls())
func (mock *ManagerInterfaceMock) GetEventTypesCalls() []struct {
	Ctx             context.Context
	WhereSearchName string
	Order           parameter.EventTypeOrderMethod
	Pg              parameter.Pagination
	Limit           parameter.Limit
	Cursor          parameter.Cursor
	Offset          parameter.Offset
	WithCount       parameter.WithCount
} {
	var calls []struct {
		Ctx             context.Context
		WhereSearchName string
		Order           parameter.EventTypeOrderMethod
		Pg              parameter.Pagination
		Limit           parameter.Limit
		Cursor          parameter.Cursor
		Offset          parameter.Offset
		WithCount       parameter.WithCount
	}
	mock.lockGetEventTypes.RLock()
	calls = mock.calls.GetEventTypes
	mock.lockGetEventTypes.RUnlock()
	return calls
}

// GetEventTypesCount calls GetEventTypesCountFunc.
func (mock *ManagerInterfaceMock) GetEventTypesCount(ctx context.Context, whereSearchName string) (int64, error) {
	if mock.GetEventTypesCountFunc == nil {
		panic("ManagerInterfaceMock.GetEventTypesCountFunc: method is nil but ManagerInterface.GetEventTypesCount was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		WhereSearchName string
	}{
		Ctx:             ctx,
		WhereSearchName: whereSearchName,
	}
	mock.lockGetEventTypesCount.Lock()
	mock.calls.GetEventTypesCount = append(mock.calls.GetEventTypesCount, callInfo)
	mock.lockGetEventTypesCount.Unlock()
	return mock.GetEventTypesCountFunc(ctx, whereSearchName)
}

// GetEventTypesCountCalls gets all the calls that were made to GetEventTypesCount.
// Check the length with:
//
//	len(mockedManagerInterface.GetEventTypesCountCalls())
func (mock *ManagerInterfaceMock) GetEventTypesCountCalls() []struct {
	Ctx             context.Context
	WhereSearchName string
} {
	var calls []struct {
		Ctx             context.Context
		WhereSearchName string
	}
	mock.lockGetEventTypesCount.RLock()
	calls = mock.calls.GetEventTypesCount
	mock.lockGetEventTypesCount.RUnlock()
	return calls
}

// GetPermissionCategories calls GetPermissionCategoriesFunc.
func (mock *ManagerInterfaceMock) GetPermissionCategories(ctx context.Context, whereSearchName string, order parameter.PermissionCategoryOrderMethod, pg parameter.Pagination, limit parameter.Limit, cursor parameter.Cursor, offset parameter.Offset, withCount parameter.WithCount) (store.ListResult[entity.PermissionCategory], error) {
	if mock.GetPermissionCategoriesFunc == nil {
		panic("ManagerInterfaceMock.GetPermissionCategoriesFunc: method is nil but ManagerInterface.GetPermissionCategories was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		WhereSearchName string
		Order           parameter.PermissionCategoryOrderMethod
		Pg              parameter.Pagination
		Limit           parameter.Limit
		Cursor          parameter.Cursor
		Offset          parameter.Offset
		WithCount       parameter.WithCount
	}{
		Ctx:             ctx,
		WhereSearchName: whereSearchName,
		Order:           order,
		Pg:              pg,
		Limit:           limit,
		Cursor:          cursor,
		Offset:          offset,
		WithCount:       withCount,
	}
	mock.lockGetPermissionCategories.Lock()
	mock.calls.GetPermissionCategories = append(mock.calls.GetPermissionCategories, callInfo)
	mock.lockGetPermissionCategories.Unlock()
	return mock.GetPermissionCategoriesFunc(ctx, whereSearchName, order, pg, limit, cursor, offset, withCount)
}

// GetPermissionCategoriesCalls gets all the calls that were made to GetPermissionCategories.
// Check the length with:
//
//	len(mockedManagerInterface.GetPermissionCategoriesCalls())
func (mock *ManagerInterfaceMock) GetPermissionCategoriesCalls() []struct {
	Ctx             context.Context
	WhereSearchName string
	Order           parameter.PermissionCategoryOrderMethod
	Pg              parameter.Pagination
	Limit           parameter.Limit
	Cursor          parameter.Cursor
	Offset          parameter.Offset
	WithCount       parameter.WithCount
} {
	var calls []struct {
		Ctx             context.Context
		WhereSearchName string
		Order           parameter.PermissionCategoryOrderMethod
		Pg              parameter.Pagination
		Limit           parameter.Limit
		Cursor          parameter.Cursor
		Offset          parameter.Offset
		WithCount       parameter.WithCount
	}
	mock.lockGetPermissionCategories.RLock()
	calls = mock.calls.GetPermissionCategories
	mock.lockGetPermissionCategories.RUnlock()
	return calls
}

// GetPermissionCategoriesCount calls GetPermissionCategoriesCountFunc.
func (mock *ManagerInterfaceMock) GetPermissionCategoriesCount(ctx context.Context, whereSearchName string) (int64, error) {
	if mock.GetPermissionCategoriesCountFunc == nil {
		panic("ManagerInterfaceMock.GetPermissionCategoriesCountFunc: method is nil but ManagerInterface.GetPermissionCategoriesCount was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		WhereSearchName string
	}{
		Ctx:             ctx,
		WhereSearchName: whereSearchName,
	}
	mock.lockGetPermissionCategoriesCount.Lock()
	mock.calls.GetPermissionCategoriesCount = append(mock.calls.GetPermissionCategoriesCount, callInfo)
	mock.lockGetPermissionCategoriesCount.Unlock()
	return mock.GetPermissionCategoriesCountFunc(ctx, whereSearchName)
}

// GetPermissionCategoriesCountCalls gets all the calls that were made to GetPermissionCategoriesCount.
// Check the length with:
//
//	len(mockedManagerInterface.GetPermissionCategoriesCountCalls())
func (mock *ManagerInterfaceMock) GetPermissionCategoriesCountCalls() []struct {
	Ctx             context.Context
	WhereSearchName string
} {
	var calls []struct {
		Ctx             context.Context
		WhereSearchName string
	}
	mock.lockGetPermissionCategoriesCount.RLock()
	calls = mock.calls.GetPermissionCategoriesCount
	mock.lockGetPermissionCategoriesCount.RUnlock()
	return calls
}

// GetPolicyCategories calls GetPolicyCategoriesFunc.
func (mock *ManagerInterfaceMock) GetPolicyCategories(ctx context.Context, whereSearchName string, order parameter.PolicyCategoryOrderMethod, pg parameter.Pagination, limit parameter.Limit, cursor parameter.Cursor, offset parameter.Offset, withCount parameter.WithCount) (store.ListResult[entity.PolicyCategory], error) {
	if mock.GetPolicyCategoriesFunc == nil {
		panic("ManagerInterfaceMock.GetPolicyCategoriesFunc: method is nil but ManagerInterface.GetPolicyCategories was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		WhereSearchName string
		Order           parameter.PolicyCategoryOrderMethod
		Pg              parameter.Pagination
		Limit           parameter.Limit
		Cursor          parameter.Cursor
		Offset          parameter.Offset
		WithCount       parameter.WithCount
	}{
		Ctx:             ctx,
		WhereSearchName: whereSearchName,
		Order:           order,
		Pg:              pg,
		Limit:           limit,
		Cursor:          cursor,
		Offset:          offset,
		WithCount:       withCount,
	}
	mock.lockGetPolicyCategories.Lock()
	mock.calls.GetPolicyCategories = append(mock.calls.GetPolicyCategories, callInfo)
	mock.lockGetPolicyCategories.Unlock()
	return mock.GetPolicyCategoriesFunc(ctx, whereSearchName, order, pg, limit, cursor, offset, withCount)
}

// GetPolicyCategoriesCalls gets all the calls that were made to GetPolicyCategories.
// Check the length with:
//
//	len(mockedManagerInterface.GetPolicyCategoriesCalls())
func (mock *ManagerInterfaceMock) GetPolicyCategoriesCalls() []struct {
	Ctx             context.Context
	WhereSearchName string
	Order           parameter.PolicyCategoryOrderMethod
	Pg              parameter.Pagination
	Limit           parameter.Limit
	Cursor          parameter.Cursor
	Offset          parameter.Offset
	WithCount       parameter.WithCount
} {
	var calls []struct {
		Ctx             context.Context
		WhereSearchName string
		Order           parameter.PolicyCategoryOrderMethod
		Pg              parameter.Pagination
		Limit           parameter.Limit
		Cursor          parameter.Cursor
		Offset          parameter.Offset
		WithCount       parameter.WithCount
	}
	mock.lockGetPolicyCategories.RLock()
	calls = mock.calls.GetPolicyCategories
	mock.lockGetPolicyCategories.RUnlock()
	return calls
}

// GetPolicyCategoriesCount calls GetPolicyCategoriesCountFunc.
func (mock *ManagerInterfaceMock) GetPolicyCategoriesCount(ctx context.Context, whereSearchName string) (int64, error) {
	if mock.GetPolicyCategoriesCountFunc == nil {
		panic("ManagerInterfaceMock.GetPolicyCategoriesCountFunc: method is nil but ManagerInterface.GetPolicyCategoriesCount was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		WhereSearchName string
	}{
		Ctx:             ctx,
		WhereSearchName: whereSearchName,
	}
	mock.lockGetPolicyCategoriesCount.Lock()
	mock.calls.GetPolicyCategoriesCount = append(mock.calls.GetPolicyCategoriesCount, callInfo)
	mock.lockGetPolicyCategoriesCount.Unlock()
	return mock.GetPolicyCategoriesCountFunc(ctx, whereSearchName)
}

// GetPolicyCategoriesCountCalls gets all the calls that were made to GetPolicyCategoriesCount.
// Check the length with:
//
//	len(mockedManagerInterface.GetPolicyCategoriesCountCalls())
func (mock *ManagerInterfaceMock) GetPolicyCategoriesCountCalls() []struct {
	Ctx             context.Context
	WhereSearchName string
} {
	var calls []struct {
		Ctx             context.Context
		WhereSearchName string
	}
	mock.lockGetPolicyCategoriesCount.RLock()
	calls = mock.calls.GetPolicyCategoriesCount
	mock.lockGetPolicyCategoriesCount.RUnlock()
	return calls
}

// PluralDeleteAttendStatuses calls PluralDeleteAttendStatusesFunc.
func (mock *ManagerInterfaceMock) PluralDeleteAttendStatuses(ctx context.Context, ids []uuid.UUID) error {
	if mock.PluralDeleteAttendStatusesFunc == nil {
		panic("ManagerInterfaceMock.PluralDeleteAttendStatusesFunc: method is nil but ManagerInterface.PluralDeleteAttendStatuses was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Ids []uuid.UUID
	}{
		Ctx: ctx,
		Ids: ids,
	}
	mock.lockPluralDeleteAttendStatuses.Lock()
	mock.calls.PluralDeleteAttendStatuses = append(mock.calls.PluralDeleteAttendStatuses, callInfo)
	mock.lockPluralDeleteAttendStatuses.Unlock()
	return mock.PluralDeleteAttendStatusesFunc(ctx, ids)
}

// PluralDeleteAttendStatusesCalls gets all the calls that were made to PluralDeleteAttendStatuses.
// Check the length with:
//
//	len(mockedManagerInterface.PluralDeleteAttendStatusesCalls())
func (mock *ManagerInterfaceMock) PluralDeleteAttendStatusesCalls() []struct {
	Ctx context.Context
	Ids []uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		Ids []uuid.UUID
	}
	mock.lockPluralDeleteAttendStatuses.RLock()
	calls = mock.calls.PluralDeleteAttendStatuses
	mock.lockPluralDeleteAttendStatuses.RUnlock()
	return calls
}

// PluralDeleteAttendanceTypes calls PluralDeleteAttendanceTypesFunc.
func (mock *ManagerInterfaceMock) PluralDeleteAttendanceTypes(ctx context.Context, ids []uuid.UUID) error {
	if mock.PluralDeleteAttendanceTypesFunc == nil {
		panic("ManagerInterfaceMock.PluralDeleteAttendanceTypesFunc: method is nil but ManagerInterface.PluralDeleteAttendanceTypes was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Ids []uuid.UUID
	}{
		Ctx: ctx,
		Ids: ids,
	}
	mock.lockPluralDeleteAttendanceTypes.Lock()
	mock.calls.PluralDeleteAttendanceTypes = append(mock.calls.PluralDeleteAttendanceTypes, callInfo)
	mock.lockPluralDeleteAttendanceTypes.Unlock()
	return mock.PluralDeleteAttendanceTypesFunc(ctx, ids)
}

// PluralDeleteAttendanceTypesCalls gets all the calls that were made to PluralDeleteAttendanceTypes.
// Check the length with:
//
//	len(mockedManagerInterface.PluralDeleteAttendanceTypesCalls())
func (mock *ManagerInterfaceMock) PluralDeleteAttendanceTypesCalls() []struct {
	Ctx context.Context
	Ids []uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		Ids []uuid.UUID
	}
	mock.lockPluralDeleteAttendanceTypes.RLock()
	calls = mock.calls.PluralDeleteAttendanceTypes
	mock.lockPluralDeleteAttendanceTypes.RUnlock()
	return calls
}

// PluralDeleteEventTypes calls PluralDeleteEventTypesFunc.
func (mock *ManagerInterfaceMock) PluralDeleteEventTypes(ctx context.Context, ids []uuid.UUID) error {
	if mock.PluralDeleteEventTypesFunc == nil {
		panic("ManagerInterfaceMock.PluralDeleteEventTypesFunc: method is nil but ManagerInterface.PluralDeleteEventTypes was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Ids []uuid.UUID
	}{
		Ctx: ctx,
		Ids: ids,
	}
	mock.lockPluralDeleteEventTypes.Lock()
	mock.calls.PluralDeleteEventTypes = append(mock.calls.PluralDeleteEventTypes, callInfo)
	mock.lockPluralDeleteEventTypes.Unlock()
	return mock.PluralDeleteEventTypesFunc(ctx, ids)
}

// PluralDeleteEventTypesCalls gets all the calls that were made to PluralDeleteEventTypes.
// Check the length with:
//
//	len(mockedManagerInterface.PluralDeleteEventTypesCalls())
func (mock *ManagerInterfaceMock) PluralDeleteEventTypesCalls() []struct {
	Ctx context.Context
	Ids []uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		Ids []uuid.UUID
	}
	mock.lockPluralDeleteEventTypes.RLock()
	calls = mock.calls.PluralDeleteEventTypes
	mock.lockPluralDeleteEventTypes.RUnlock()
	return calls
}

// PluralDeletePermissionCategories calls PluralDeletePermissionCategoriesFunc.
func (mock *ManagerInterfaceMock) PluralDeletePermissionCategories(ctx context.Context, ids []uuid.UUID) error {
	if mock.PluralDeletePermissionCategoriesFunc == nil {
		panic("ManagerInterfaceMock.PluralDeletePermissionCategoriesFunc: method is nil but ManagerInterface.PluralDeletePermissionCategories was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Ids []uuid.UUID
	}{
		Ctx: ctx,
		Ids: ids,
	}
	mock.lockPluralDeletePermissionCategories.Lock()
	mock.calls.PluralDeletePermissionCategories = append(mock.calls.PluralDeletePermissionCategories, callInfo)
	mock.lockPluralDeletePermissionCategories.Unlock()
	return mock.PluralDeletePermissionCategoriesFunc(ctx, ids)
}

// PluralDeletePermissionCategoriesCalls gets all the calls that were made to PluralDeletePermissionCategories.
// Check the length with:
//
//	len(mockedManagerInterface.PluralDeletePermissionCategoriesCalls())
func (mock *ManagerInterfaceMock) PluralDeletePermissionCategoriesCalls() []struct {
	Ctx context.Context
	Ids []uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		Ids []uuid.UUID
	}
	mock.lockPluralDeletePermissionCategories.RLock()
	calls = mock.calls.PluralDeletePermissionCategories
	mock.lockPluralDeletePermissionCategories.RUnlock()
	return calls
}

// PluralDeletePolicyCategories calls PluralDeletePolicyCategoriesFunc.
func (mock *ManagerInterfaceMock) PluralDeletePolicyCategories(ctx context.Context, ids []uuid.UUID) error {
	if mock.PluralDeletePolicyCategoriesFunc == nil {
		panic("ManagerInterfaceMock.PluralDeletePolicyCategoriesFunc: method is nil but ManagerInterface.PluralDeletePolicyCategories was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Ids []uuid.UUID
	}{
		Ctx: ctx,
		Ids: ids,
	}
	mock.lockPluralDeletePolicyCategories.Lock()
	mock.calls.PluralDeletePolicyCategories = append(mock.calls.PluralDeletePolicyCategories, callInfo)
	mock.lockPluralDeletePolicyCategories.Unlock()
	return mock.PluralDeletePolicyCategoriesFunc(ctx, ids)
}

// PluralDeletePolicyCategoriesCalls gets all the calls that were made to PluralDeletePolicyCategories.
// Check the length with:
//
//	len(mockedManagerInterface.PluralDeletePolicyCategoriesCalls())
func (mock *ManagerInterfaceMock) PluralDeletePolicyCategoriesCalls() []struct {
	Ctx context.Context
	Ids []uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		Ids []uuid.UUID
	}
	mock.lockPluralDeletePolicyCategories.RLock()
	calls = mock.calls.PluralDeletePolicyCategories
	mock.lockPluralDeletePolicyCategories.RUnlock()
	return calls
}

// UpdateAttendStatus calls UpdateAttendStatusFunc.
func (mock *ManagerInterfaceMock) UpdateAttendStatus(ctx context.Context, id uuid.UUID, name string, key string) (entity.AttendStatus, error) {
	if mock.UpdateAttendStatusFunc == nil {
		panic("ManagerInterfaceMock.UpdateAttendStatusFunc: method is nil but ManagerInterface.UpdateAttendStatus was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		ID   uuid.UUID
		Name string
		Key  string
	}{
		Ctx:  ctx,
		ID:   id,
		Name: name,
		Key:  key,
	}
	mock.lockUpdateAttendStatus.Lock()
	mock.calls.UpdateAttendStatus = append(mock.calls.UpdateAttendStatus, callInfo)
	mock.lockUpdateAttendStatus.Unlock()
	return mock.UpdateAttendStatusFunc(ctx, id, name, key)
}

// UpdateAttendStatusCalls gets all the calls that were made to UpdateAttendStatus.
// Check the length with:
//
//	len(mockedManagerInterface.UpdateAttendStatusCalls())
func (mock *ManagerInterfaceMock) UpdateAttendStatusCalls() []struct {
	Ctx  context.Context
	ID   uuid.UUID
	Name string
	Key  string
} {
	var calls []struct {
		Ctx  context.Context
		ID   uuid.UUID
		Name string
		Key  string
	}
	mock.lockUpdateAttendStatus.RLock()
	calls = mock.calls.UpdateAttendStatus
	mock.lockUpdateAttendStatus.RUnlock()
	return calls
}

// UpdateAttendanceType calls UpdateAttendanceTypeFunc.
func (mock *ManagerInterfaceMock) UpdateAttendanceType(ctx context.Context, id uuid.UUID, name string, key string, color string) (entity.AttendanceType, error) {
	if mock.UpdateAttendanceTypeFunc == nil {
		panic("ManagerInterfaceMock.UpdateAttendanceTypeFunc: method is nil but ManagerInterface.UpdateAttendanceType was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		ID    uuid.UUID
		Name  string
		Key   string
		Color string
	}{
		Ctx:   ctx,
		ID:    id,
		Name:  name,
		Key:   key,
		Color: color,
	}
	mock.lockUpdateAttendanceType.Lock()
	mock.calls.UpdateAttendanceType = append(mock.calls.UpdateAttendanceType, callInfo)
	mock.lockUpdateAttendanceType.Unlock()
	return mock.UpdateAttendanceTypeFunc(ctx, id, name, key, color)
}

// UpdateAttendanceTypeCalls gets all the calls that were made to UpdateAttendanceType.
// Check the length with:
//
//	len(mockedManagerInterface.UpdateAttendanceTypeCalls())
func (mock *ManagerInterfaceMock) UpdateAttendanceTypeCalls() []struct {
	Ctx   context.Context
	ID    uuid.UUID
	Name  string
	Key   string
	Color string
} {
	var calls []struct {
		Ctx   context.Context
		ID    uuid.UUID
		Name  string
		Key   string
		Color string
	}
	mock.lockUpdateAttendanceType.RLock()
	calls = mock.calls.UpdateAttendanceType
	mock.lockUpdateAttendanceType.RUnlock()
	return calls
}

// UpdateEventType calls UpdateEventTypeFunc.
func (mock *ManagerInterfaceMock) UpdateEventType(ctx context.Context, id uuid.UUID, name string, key string, color string) (entity.EventType, error) {
	if mock.UpdateEventTypeFunc == nil {
		panic("ManagerInterfaceMock.UpdateEventTypeFunc: method is nil but ManagerInterface.UpdateEventType was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		ID    uuid.UUID
		Name  string
		Key   string
		Color string
	}{
		Ctx:   ctx,
		ID:    id,
		Name:  name,
		Key:   key,
		Color: color,
	}
	mock.lockUpdateEventType.Lock()
	mock.calls.UpdateEventType = append(mock.calls.UpdateEventType, callInfo)
	mock.lockUpdateEventType.Unlock()
	return mock.UpdateEventTypeFunc(ctx, id, name, key, color)
}

// UpdateEventTypeCalls gets all the calls that were made to UpdateEventType.
// Check the length with:
//
//	len(mockedManagerInterface.UpdateEventTypeCalls())
func (mock *ManagerInterfaceMock) UpdateEventTypeCalls() []struct {
	Ctx   context.Context
	ID    uuid.UUID
	Name  string
	Key   string
	Color string
} {
	var calls []struct {
		Ctx   context.Context
		ID    uuid.UUID
		Name  string
		Key   string
		Color string
	}
	mock.lockUpdateEventType.RLock()
	calls = mock.calls.UpdateEventType
	mock.lockUpdateEventType.RUnlock()
	return calls
}

// UpdatePermissionCategory calls UpdatePermissionCategoryFunc.
func (mock *ManagerInterfaceMock) UpdatePermissionCategory(ctx context.Context, id uuid.UUID, name string, key string, description string) (entity.PermissionCategory, error) {
	if mock.UpdatePermissionCategoryFunc == nil {
		panic("ManagerInterfaceMock.UpdatePermissionCategoryFunc: method is nil but ManagerInterface.UpdatePermissionCategory was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		ID          uuid.UUID
		Name        string
		Key         string
		Description string
	}{
		Ctx:         ctx,
		ID:          id,
		Name:        name,
		Key:         key,
		Description: description,
	}
	mock.lockUpdatePermissionCategory.Lock()
	mock.calls.UpdatePermissionCategory = append(mock.calls.UpdatePermissionCategory, callInfo)
	mock.lockUpdatePermissionCategory.Unlock()
	return mock.UpdatePermissionCategoryFunc(ctx, id, name, key, description)
}

// UpdatePermissionCategoryCalls gets all the calls that were made to UpdatePermissionCategory.
// Check the length with:
//
//	len(mockedManagerInterface.UpdatePermissionCategoryCalls())
func (mock *ManagerInterfaceMock) UpdatePermissionCategoryCalls() []struct {
	Ctx         context.Context
	ID          uuid.UUID
	Name        string
	Key         string
	Description string
} {
	var calls []struct {
		Ctx         context.Context
		ID          uuid.UUID
		Name        string
		Key         string
		Description string
	}
	mock.lockUpdatePermissionCategory.RLock()
	calls = mock.calls.UpdatePermissionCategory
	mock.lockUpdatePermissionCategory.RUnlock()
	return calls
}

// UpdatePolicyCategory calls UpdatePolicyCategoryFunc.
func (mock *ManagerInterfaceMock) UpdatePolicyCategory(ctx context.Context, id uuid.UUID, name string, key string, description string) (entity.PolicyCategory, error) {
	if mock.UpdatePolicyCategoryFunc == nil {
		panic("ManagerInterfaceMock.UpdatePolicyCategoryFunc: method is nil but ManagerInterface.UpdatePolicyCategory was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		ID          uuid.UUID
		Name        string
		Key         string
		Description string
	}{
		Ctx:         ctx,
		ID:          id,
		Name:        name,
		Key:         key,
		Description: description,
	}
	mock.lockUpdatePolicyCategory.Lock()
	mock.calls.UpdatePolicyCategory = append(mock.calls.UpdatePolicyCategory, callInfo)
	mock.lockUpdatePolicyCategory.Unlock()
	return mock.UpdatePolicyCategoryFunc(ctx, id, name, key, description)
}

// UpdatePolicyCategoryCalls gets all the calls that were made to UpdatePolicyCategory.
// Check the length with:
//
//	len(mockedManagerInterface.UpdatePolicyCategoryCalls())
func (mock *ManagerInterfaceMock) UpdatePolicyCategoryCalls() []struct {
	Ctx         context.Context
	ID          uuid.UUID
	Name        string
	Key         string
	Description string
} {
	var calls []struct {
		Ctx         context.Context
		ID          uuid.UUID
		Name        string
		Key         string
		Description string
	}
	mock.lockUpdatePolicyCategory.RLock()
	calls = mock.calls.UpdatePolicyCategory
	mock.lockUpdatePolicyCategory.RUnlock()
	return calls
}
