// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package store

import (
	"context"
	"github.com/google/uuid"
	"github.com/micro-service-lab/recs-seem-mono-container/app/entity"
	"github.com/micro-service-lab/recs-seem-mono-container/app/parameter"
	"sync"
)

// Ensure, that StoreMock does implement Store.
// If this is not the case, regenerate this file with moq.
var _ Store = &StoreMock{}

// StoreMock is a mock implementation of Store.
//
//	func TestSomethingThatUsesStore(t *testing.T) {
//
//		// make and configure a mocked Store
//		mockedStore := &StoreMock{
//			BeginFunc: func(contextMoqParam context.Context) (Sd, error) {
//				panic("mock out the Begin method")
//			},
//			CleanupFunc: func(contextMoqParam context.Context) error {
//				panic("mock out the Cleanup method")
//			},
//			CommitFunc: func(contextMoqParam context.Context, sd Sd) error {
//				panic("mock out the Commit method")
//			},
//			CountAbsencesFunc: func(ctx context.Context) (int64, error) {
//				panic("mock out the CountAbsences method")
//			},
//			CountAbsencesWithSdFunc: func(ctx context.Context, sd Sd) (int64, error) {
//				panic("mock out the CountAbsencesWithSd method")
//			},
//			CountAttendStatusesFunc: func(ctx context.Context, where parameter.WhereAttendStatusParam) (int64, error) {
//				panic("mock out the CountAttendStatuses method")
//			},
//			CountAttendStatusesWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereAttendStatusParam) (int64, error) {
//				panic("mock out the CountAttendStatusesWithSd method")
//			},
//			CountAttendanceTypesFunc: func(ctx context.Context, where parameter.WhereAttendanceTypeParam) (int64, error) {
//				panic("mock out the CountAttendanceTypes method")
//			},
//			CountAttendanceTypesWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereAttendanceTypeParam) (int64, error) {
//				panic("mock out the CountAttendanceTypesWithSd method")
//			},
//			CountEventTypesFunc: func(ctx context.Context, where parameter.WhereEventTypeParam) (int64, error) {
//				panic("mock out the CountEventTypes method")
//			},
//			CountEventTypesWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereEventTypeParam) (int64, error) {
//				panic("mock out the CountEventTypesWithSd method")
//			},
//			CountMimeTypesFunc: func(ctx context.Context, where parameter.WhereMimeTypeParam) (int64, error) {
//				panic("mock out the CountMimeTypes method")
//			},
//			CountMimeTypesWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereMimeTypeParam) (int64, error) {
//				panic("mock out the CountMimeTypesWithSd method")
//			},
//			CountPermissionCategoriesFunc: func(ctx context.Context, where parameter.WherePermissionCategoryParam) (int64, error) {
//				panic("mock out the CountPermissionCategories method")
//			},
//			CountPermissionCategoriesWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WherePermissionCategoryParam) (int64, error) {
//				panic("mock out the CountPermissionCategoriesWithSd method")
//			},
//			CountPermissionsFunc: func(ctx context.Context, where parameter.WherePermissionParam) (int64, error) {
//				panic("mock out the CountPermissions method")
//			},
//			CountPermissionsWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WherePermissionParam) (int64, error) {
//				panic("mock out the CountPermissionsWithSd method")
//			},
//			CountPoliciesFunc: func(ctx context.Context, where parameter.WherePolicyParam) (int64, error) {
//				panic("mock out the CountPolicies method")
//			},
//			CountPoliciesWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WherePolicyParam) (int64, error) {
//				panic("mock out the CountPoliciesWithSd method")
//			},
//			CountPolicyCategoriesFunc: func(ctx context.Context, where parameter.WherePolicyCategoryParam) (int64, error) {
//				panic("mock out the CountPolicyCategories method")
//			},
//			CountPolicyCategoriesWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WherePolicyCategoryParam) (int64, error) {
//				panic("mock out the CountPolicyCategoriesWithSd method")
//			},
//			CountRecordTypesFunc: func(ctx context.Context, where parameter.WhereRecordTypeParam) (int64, error) {
//				panic("mock out the CountRecordTypes method")
//			},
//			CountRecordTypesWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereRecordTypeParam) (int64, error) {
//				panic("mock out the CountRecordTypesWithSd method")
//			},
//			CreateAbsenceFunc: func(ctx context.Context, param parameter.CreateAbsenceParam) (entity.Absence, error) {
//				panic("mock out the CreateAbsence method")
//			},
//			CreateAbsenceWithSdFunc: func(ctx context.Context, sd Sd, param parameter.CreateAbsenceParam) (entity.Absence, error) {
//				panic("mock out the CreateAbsenceWithSd method")
//			},
//			CreateAbsencesFunc: func(ctx context.Context, params []parameter.CreateAbsenceParam) (int64, error) {
//				panic("mock out the CreateAbsences method")
//			},
//			CreateAbsencesWithSdFunc: func(ctx context.Context, sd Sd, params []parameter.CreateAbsenceParam) (int64, error) {
//				panic("mock out the CreateAbsencesWithSd method")
//			},
//			CreateAttendStatusFunc: func(ctx context.Context, param parameter.CreateAttendStatusParam) (entity.AttendStatus, error) {
//				panic("mock out the CreateAttendStatus method")
//			},
//			CreateAttendStatusWithSdFunc: func(ctx context.Context, sd Sd, param parameter.CreateAttendStatusParam) (entity.AttendStatus, error) {
//				panic("mock out the CreateAttendStatusWithSd method")
//			},
//			CreateAttendStatusesFunc: func(ctx context.Context, params []parameter.CreateAttendStatusParam) (int64, error) {
//				panic("mock out the CreateAttendStatuses method")
//			},
//			CreateAttendStatusesWithSdFunc: func(ctx context.Context, sd Sd, params []parameter.CreateAttendStatusParam) (int64, error) {
//				panic("mock out the CreateAttendStatusesWithSd method")
//			},
//			CreateAttendanceTypeFunc: func(ctx context.Context, param parameter.CreateAttendanceTypeParam) (entity.AttendanceType, error) {
//				panic("mock out the CreateAttendanceType method")
//			},
//			CreateAttendanceTypeWithSdFunc: func(ctx context.Context, sd Sd, param parameter.CreateAttendanceTypeParam) (entity.AttendanceType, error) {
//				panic("mock out the CreateAttendanceTypeWithSd method")
//			},
//			CreateAttendanceTypesFunc: func(ctx context.Context, params []parameter.CreateAttendanceTypeParam) (int64, error) {
//				panic("mock out the CreateAttendanceTypes method")
//			},
//			CreateAttendanceTypesWithSdFunc: func(ctx context.Context, sd Sd, params []parameter.CreateAttendanceTypeParam) (int64, error) {
//				panic("mock out the CreateAttendanceTypesWithSd method")
//			},
//			CreateEventTypeFunc: func(ctx context.Context, param parameter.CreateEventTypeParam) (entity.EventType, error) {
//				panic("mock out the CreateEventType method")
//			},
//			CreateEventTypeWithSdFunc: func(ctx context.Context, sd Sd, param parameter.CreateEventTypeParam) (entity.EventType, error) {
//				panic("mock out the CreateEventTypeWithSd method")
//			},
//			CreateEventTypesFunc: func(ctx context.Context, params []parameter.CreateEventTypeParam) (int64, error) {
//				panic("mock out the CreateEventTypes method")
//			},
//			CreateEventTypesWithSdFunc: func(ctx context.Context, sd Sd, params []parameter.CreateEventTypeParam) (int64, error) {
//				panic("mock out the CreateEventTypesWithSd method")
//			},
//			CreateMimeTypeFunc: func(ctx context.Context, param parameter.CreateMimeTypeParam) (entity.MimeType, error) {
//				panic("mock out the CreateMimeType method")
//			},
//			CreateMimeTypeWithSdFunc: func(ctx context.Context, sd Sd, param parameter.CreateMimeTypeParam) (entity.MimeType, error) {
//				panic("mock out the CreateMimeTypeWithSd method")
//			},
//			CreateMimeTypesFunc: func(ctx context.Context, params []parameter.CreateMimeTypeParam) (int64, error) {
//				panic("mock out the CreateMimeTypes method")
//			},
//			CreateMimeTypesWithSdFunc: func(ctx context.Context, sd Sd, params []parameter.CreateMimeTypeParam) (int64, error) {
//				panic("mock out the CreateMimeTypesWithSd method")
//			},
//			CreatePermissionFunc: func(ctx context.Context, param parameter.CreatePermissionParam) (entity.Permission, error) {
//				panic("mock out the CreatePermission method")
//			},
//			CreatePermissionCategoriesFunc: func(ctx context.Context, params []parameter.CreatePermissionCategoryParam) (int64, error) {
//				panic("mock out the CreatePermissionCategories method")
//			},
//			CreatePermissionCategoriesWithSdFunc: func(ctx context.Context, sd Sd, params []parameter.CreatePermissionCategoryParam) (int64, error) {
//				panic("mock out the CreatePermissionCategoriesWithSd method")
//			},
//			CreatePermissionCategoryFunc: func(ctx context.Context, param parameter.CreatePermissionCategoryParam) (entity.PermissionCategory, error) {
//				panic("mock out the CreatePermissionCategory method")
//			},
//			CreatePermissionCategoryWithSdFunc: func(ctx context.Context, sd Sd, param parameter.CreatePermissionCategoryParam) (entity.PermissionCategory, error) {
//				panic("mock out the CreatePermissionCategoryWithSd method")
//			},
//			CreatePermissionWithSdFunc: func(ctx context.Context, sd Sd, param parameter.CreatePermissionParam) (entity.Permission, error) {
//				panic("mock out the CreatePermissionWithSd method")
//			},
//			CreatePermissionsFunc: func(ctx context.Context, params []parameter.CreatePermissionParam) (int64, error) {
//				panic("mock out the CreatePermissions method")
//			},
//			CreatePermissionsWithSdFunc: func(ctx context.Context, sd Sd, params []parameter.CreatePermissionParam) (int64, error) {
//				panic("mock out the CreatePermissionsWithSd method")
//			},
//			CreatePoliciesFunc: func(ctx context.Context, params []parameter.CreatePolicyParam) (int64, error) {
//				panic("mock out the CreatePolicies method")
//			},
//			CreatePoliciesWithSdFunc: func(ctx context.Context, sd Sd, params []parameter.CreatePolicyParam) (int64, error) {
//				panic("mock out the CreatePoliciesWithSd method")
//			},
//			CreatePolicyFunc: func(ctx context.Context, param parameter.CreatePolicyParam) (entity.Policy, error) {
//				panic("mock out the CreatePolicy method")
//			},
//			CreatePolicyCategoriesFunc: func(ctx context.Context, params []parameter.CreatePolicyCategoryParam) (int64, error) {
//				panic("mock out the CreatePolicyCategories method")
//			},
//			CreatePolicyCategoriesWithSdFunc: func(ctx context.Context, sd Sd, params []parameter.CreatePolicyCategoryParam) (int64, error) {
//				panic("mock out the CreatePolicyCategoriesWithSd method")
//			},
//			CreatePolicyCategoryFunc: func(ctx context.Context, param parameter.CreatePolicyCategoryParam) (entity.PolicyCategory, error) {
//				panic("mock out the CreatePolicyCategory method")
//			},
//			CreatePolicyCategoryWithSdFunc: func(ctx context.Context, sd Sd, param parameter.CreatePolicyCategoryParam) (entity.PolicyCategory, error) {
//				panic("mock out the CreatePolicyCategoryWithSd method")
//			},
//			CreatePolicyWithSdFunc: func(ctx context.Context, sd Sd, param parameter.CreatePolicyParam) (entity.Policy, error) {
//				panic("mock out the CreatePolicyWithSd method")
//			},
//			CreateRecordTypeFunc: func(ctx context.Context, param parameter.CreateRecordTypeParam) (entity.RecordType, error) {
//				panic("mock out the CreateRecordType method")
//			},
//			CreateRecordTypeWithSdFunc: func(ctx context.Context, sd Sd, param parameter.CreateRecordTypeParam) (entity.RecordType, error) {
//				panic("mock out the CreateRecordTypeWithSd method")
//			},
//			CreateRecordTypesFunc: func(ctx context.Context, params []parameter.CreateRecordTypeParam) (int64, error) {
//				panic("mock out the CreateRecordTypes method")
//			},
//			CreateRecordTypesWithSdFunc: func(ctx context.Context, sd Sd, params []parameter.CreateRecordTypeParam) (int64, error) {
//				panic("mock out the CreateRecordTypesWithSd method")
//			},
//			DeleteAbsenceFunc: func(ctx context.Context, absenceID uuid.UUID) error {
//				panic("mock out the DeleteAbsence method")
//			},
//			DeleteAbsenceWithSdFunc: func(ctx context.Context, sd Sd, absenceID uuid.UUID) error {
//				panic("mock out the DeleteAbsenceWithSd method")
//			},
//			DeleteAttendStatusFunc: func(ctx context.Context, attendStatusID uuid.UUID) error {
//				panic("mock out the DeleteAttendStatus method")
//			},
//			DeleteAttendStatusByKeyFunc: func(ctx context.Context, key string) error {
//				panic("mock out the DeleteAttendStatusByKey method")
//			},
//			DeleteAttendStatusByKeyWithSdFunc: func(ctx context.Context, sd Sd, key string) error {
//				panic("mock out the DeleteAttendStatusByKeyWithSd method")
//			},
//			DeleteAttendStatusWithSdFunc: func(ctx context.Context, sd Sd, attendStatusID uuid.UUID) error {
//				panic("mock out the DeleteAttendStatusWithSd method")
//			},
//			DeleteAttendanceTypeFunc: func(ctx context.Context, attendanceTypeID uuid.UUID) error {
//				panic("mock out the DeleteAttendanceType method")
//			},
//			DeleteAttendanceTypeByKeyFunc: func(ctx context.Context, key string) error {
//				panic("mock out the DeleteAttendanceTypeByKey method")
//			},
//			DeleteAttendanceTypeByKeyWithSdFunc: func(ctx context.Context, sd Sd, key string) error {
//				panic("mock out the DeleteAttendanceTypeByKeyWithSd method")
//			},
//			DeleteAttendanceTypeWithSdFunc: func(ctx context.Context, sd Sd, attendanceTypeID uuid.UUID) error {
//				panic("mock out the DeleteAttendanceTypeWithSd method")
//			},
//			DeleteEventTypeFunc: func(ctx context.Context, eventTypeID uuid.UUID) error {
//				panic("mock out the DeleteEventType method")
//			},
//			DeleteEventTypeByKeyFunc: func(ctx context.Context, key string) error {
//				panic("mock out the DeleteEventTypeByKey method")
//			},
//			DeleteEventTypeByKeyWithSdFunc: func(ctx context.Context, sd Sd, key string) error {
//				panic("mock out the DeleteEventTypeByKeyWithSd method")
//			},
//			DeleteEventTypeWithSdFunc: func(ctx context.Context, sd Sd, eventTypeID uuid.UUID) error {
//				panic("mock out the DeleteEventTypeWithSd method")
//			},
//			DeleteMimeTypeFunc: func(ctx context.Context, mimeTypeID uuid.UUID) error {
//				panic("mock out the DeleteMimeType method")
//			},
//			DeleteMimeTypeByKeyFunc: func(ctx context.Context, key string) error {
//				panic("mock out the DeleteMimeTypeByKey method")
//			},
//			DeleteMimeTypeByKeyWithSdFunc: func(ctx context.Context, sd Sd, key string) error {
//				panic("mock out the DeleteMimeTypeByKeyWithSd method")
//			},
//			DeleteMimeTypeWithSdFunc: func(ctx context.Context, sd Sd, mimeTypeID uuid.UUID) error {
//				panic("mock out the DeleteMimeTypeWithSd method")
//			},
//			DeletePermissionFunc: func(ctx context.Context, permissionID uuid.UUID) error {
//				panic("mock out the DeletePermission method")
//			},
//			DeletePermissionByKeyFunc: func(ctx context.Context, key string) error {
//				panic("mock out the DeletePermissionByKey method")
//			},
//			DeletePermissionByKeyWithSdFunc: func(ctx context.Context, sd Sd, key string) error {
//				panic("mock out the DeletePermissionByKeyWithSd method")
//			},
//			DeletePermissionCategoryFunc: func(ctx context.Context, permissionCategoryID uuid.UUID) error {
//				panic("mock out the DeletePermissionCategory method")
//			},
//			DeletePermissionCategoryByKeyFunc: func(ctx context.Context, key string) error {
//				panic("mock out the DeletePermissionCategoryByKey method")
//			},
//			DeletePermissionCategoryByKeyWithSdFunc: func(ctx context.Context, sd Sd, key string) error {
//				panic("mock out the DeletePermissionCategoryByKeyWithSd method")
//			},
//			DeletePermissionCategoryWithSdFunc: func(ctx context.Context, sd Sd, permissionCategoryID uuid.UUID) error {
//				panic("mock out the DeletePermissionCategoryWithSd method")
//			},
//			DeletePermissionWithSdFunc: func(ctx context.Context, sd Sd, permissionID uuid.UUID) error {
//				panic("mock out the DeletePermissionWithSd method")
//			},
//			DeletePolicyFunc: func(ctx context.Context, policyID uuid.UUID) error {
//				panic("mock out the DeletePolicy method")
//			},
//			DeletePolicyByKeyFunc: func(ctx context.Context, key string) error {
//				panic("mock out the DeletePolicyByKey method")
//			},
//			DeletePolicyByKeyWithSdFunc: func(ctx context.Context, sd Sd, key string) error {
//				panic("mock out the DeletePolicyByKeyWithSd method")
//			},
//			DeletePolicyCategoryFunc: func(ctx context.Context, policyCategoryID uuid.UUID) error {
//				panic("mock out the DeletePolicyCategory method")
//			},
//			DeletePolicyCategoryByKeyFunc: func(ctx context.Context, key string) error {
//				panic("mock out the DeletePolicyCategoryByKey method")
//			},
//			DeletePolicyCategoryByKeyWithSdFunc: func(ctx context.Context, sd Sd, key string) error {
//				panic("mock out the DeletePolicyCategoryByKeyWithSd method")
//			},
//			DeletePolicyCategoryWithSdFunc: func(ctx context.Context, sd Sd, policyCategoryID uuid.UUID) error {
//				panic("mock out the DeletePolicyCategoryWithSd method")
//			},
//			DeletePolicyWithSdFunc: func(ctx context.Context, sd Sd, policyID uuid.UUID) error {
//				panic("mock out the DeletePolicyWithSd method")
//			},
//			DeleteRecordTypeFunc: func(ctx context.Context, recordTypeID uuid.UUID) error {
//				panic("mock out the DeleteRecordType method")
//			},
//			DeleteRecordTypeByKeyFunc: func(ctx context.Context, key string) error {
//				panic("mock out the DeleteRecordTypeByKey method")
//			},
//			DeleteRecordTypeByKeyWithSdFunc: func(ctx context.Context, sd Sd, key string) error {
//				panic("mock out the DeleteRecordTypeByKeyWithSd method")
//			},
//			DeleteRecordTypeWithSdFunc: func(ctx context.Context, sd Sd, recordTypeID uuid.UUID) error {
//				panic("mock out the DeleteRecordTypeWithSd method")
//			},
//			FindAbsenceByIDFunc: func(ctx context.Context, absenceID uuid.UUID) (entity.Absence, error) {
//				panic("mock out the FindAbsenceByID method")
//			},
//			FindAbsenceByIDWithSdFunc: func(ctx context.Context, sd Sd, absenceID uuid.UUID) (entity.Absence, error) {
//				panic("mock out the FindAbsenceByIDWithSd method")
//			},
//			FindAttendStatusByIDFunc: func(ctx context.Context, attendStatusID uuid.UUID) (entity.AttendStatus, error) {
//				panic("mock out the FindAttendStatusByID method")
//			},
//			FindAttendStatusByIDWithSdFunc: func(ctx context.Context, sd Sd, attendStatusID uuid.UUID) (entity.AttendStatus, error) {
//				panic("mock out the FindAttendStatusByIDWithSd method")
//			},
//			FindAttendStatusByKeyFunc: func(ctx context.Context, key string) (entity.AttendStatus, error) {
//				panic("mock out the FindAttendStatusByKey method")
//			},
//			FindAttendStatusByKeyWithSdFunc: func(ctx context.Context, sd Sd, key string) (entity.AttendStatus, error) {
//				panic("mock out the FindAttendStatusByKeyWithSd method")
//			},
//			FindAttendanceTypeByIDFunc: func(ctx context.Context, attendanceTypeID uuid.UUID) (entity.AttendanceType, error) {
//				panic("mock out the FindAttendanceTypeByID method")
//			},
//			FindAttendanceTypeByIDWithSdFunc: func(ctx context.Context, sd Sd, attendanceTypeID uuid.UUID) (entity.AttendanceType, error) {
//				panic("mock out the FindAttendanceTypeByIDWithSd method")
//			},
//			FindAttendanceTypeByKeyFunc: func(ctx context.Context, key string) (entity.AttendanceType, error) {
//				panic("mock out the FindAttendanceTypeByKey method")
//			},
//			FindAttendanceTypeByKeyWithSdFunc: func(ctx context.Context, sd Sd, key string) (entity.AttendanceType, error) {
//				panic("mock out the FindAttendanceTypeByKeyWithSd method")
//			},
//			FindEventTypeByIDFunc: func(ctx context.Context, eventTypeID uuid.UUID) (entity.EventType, error) {
//				panic("mock out the FindEventTypeByID method")
//			},
//			FindEventTypeByIDWithSdFunc: func(ctx context.Context, sd Sd, eventTypeID uuid.UUID) (entity.EventType, error) {
//				panic("mock out the FindEventTypeByIDWithSd method")
//			},
//			FindEventTypeByKeyFunc: func(ctx context.Context, key string) (entity.EventType, error) {
//				panic("mock out the FindEventTypeByKey method")
//			},
//			FindEventTypeByKeyWithSdFunc: func(ctx context.Context, sd Sd, key string) (entity.EventType, error) {
//				panic("mock out the FindEventTypeByKeyWithSd method")
//			},
//			FindMimeTypeByIDFunc: func(ctx context.Context, mimeTypeID uuid.UUID) (entity.MimeType, error) {
//				panic("mock out the FindMimeTypeByID method")
//			},
//			FindMimeTypeByIDWithSdFunc: func(ctx context.Context, sd Sd, mimeTypeID uuid.UUID) (entity.MimeType, error) {
//				panic("mock out the FindMimeTypeByIDWithSd method")
//			},
//			FindMimeTypeByKeyFunc: func(ctx context.Context, key string) (entity.MimeType, error) {
//				panic("mock out the FindMimeTypeByKey method")
//			},
//			FindMimeTypeByKeyWithSdFunc: func(ctx context.Context, sd Sd, key string) (entity.MimeType, error) {
//				panic("mock out the FindMimeTypeByKeyWithSd method")
//			},
//			FindPermissionByIDFunc: func(ctx context.Context, permissionID uuid.UUID) (entity.Permission, error) {
//				panic("mock out the FindPermissionByID method")
//			},
//			FindPermissionByIDWithCategoryFunc: func(ctx context.Context, permissionID uuid.UUID) (entity.PermissionWithCategory, error) {
//				panic("mock out the FindPermissionByIDWithCategory method")
//			},
//			FindPermissionByIDWithCategoryWithSdFunc: func(ctx context.Context, sd Sd, permissionID uuid.UUID) (entity.PermissionWithCategory, error) {
//				panic("mock out the FindPermissionByIDWithCategoryWithSd method")
//			},
//			FindPermissionByIDWithSdFunc: func(ctx context.Context, sd Sd, permissionID uuid.UUID) (entity.Permission, error) {
//				panic("mock out the FindPermissionByIDWithSd method")
//			},
//			FindPermissionByKeyFunc: func(ctx context.Context, key string) (entity.Permission, error) {
//				panic("mock out the FindPermissionByKey method")
//			},
//			FindPermissionByKeyWithCategoryFunc: func(ctx context.Context, key string) (entity.PermissionWithCategory, error) {
//				panic("mock out the FindPermissionByKeyWithCategory method")
//			},
//			FindPermissionByKeyWithCategoryWithSdFunc: func(ctx context.Context, sd Sd, key string) (entity.PermissionWithCategory, error) {
//				panic("mock out the FindPermissionByKeyWithCategoryWithSd method")
//			},
//			FindPermissionByKeyWithSdFunc: func(ctx context.Context, sd Sd, key string) (entity.Permission, error) {
//				panic("mock out the FindPermissionByKeyWithSd method")
//			},
//			FindPermissionCategoryByIDFunc: func(ctx context.Context, permissionCategoryID uuid.UUID) (entity.PermissionCategory, error) {
//				panic("mock out the FindPermissionCategoryByID method")
//			},
//			FindPermissionCategoryByIDWithSdFunc: func(ctx context.Context, sd Sd, permissionCategoryID uuid.UUID) (entity.PermissionCategory, error) {
//				panic("mock out the FindPermissionCategoryByIDWithSd method")
//			},
//			FindPermissionCategoryByKeyFunc: func(ctx context.Context, key string) (entity.PermissionCategory, error) {
//				panic("mock out the FindPermissionCategoryByKey method")
//			},
//			FindPermissionCategoryByKeyWithSdFunc: func(ctx context.Context, sd Sd, key string) (entity.PermissionCategory, error) {
//				panic("mock out the FindPermissionCategoryByKeyWithSd method")
//			},
//			FindPolicyByIDFunc: func(ctx context.Context, policyID uuid.UUID) (entity.Policy, error) {
//				panic("mock out the FindPolicyByID method")
//			},
//			FindPolicyByIDWithCategoryFunc: func(ctx context.Context, policyID uuid.UUID) (entity.PolicyWithCategory, error) {
//				panic("mock out the FindPolicyByIDWithCategory method")
//			},
//			FindPolicyByIDWithCategoryWithSdFunc: func(ctx context.Context, sd Sd, policyID uuid.UUID) (entity.PolicyWithCategory, error) {
//				panic("mock out the FindPolicyByIDWithCategoryWithSd method")
//			},
//			FindPolicyByIDWithSdFunc: func(ctx context.Context, sd Sd, policyID uuid.UUID) (entity.Policy, error) {
//				panic("mock out the FindPolicyByIDWithSd method")
//			},
//			FindPolicyByKeyFunc: func(ctx context.Context, key string) (entity.Policy, error) {
//				panic("mock out the FindPolicyByKey method")
//			},
//			FindPolicyByKeyWithCategoryFunc: func(ctx context.Context, key string) (entity.PolicyWithCategory, error) {
//				panic("mock out the FindPolicyByKeyWithCategory method")
//			},
//			FindPolicyByKeyWithCategoryWithSdFunc: func(ctx context.Context, sd Sd, key string) (entity.PolicyWithCategory, error) {
//				panic("mock out the FindPolicyByKeyWithCategoryWithSd method")
//			},
//			FindPolicyByKeyWithSdFunc: func(ctx context.Context, sd Sd, key string) (entity.Policy, error) {
//				panic("mock out the FindPolicyByKeyWithSd method")
//			},
//			FindPolicyCategoryByIDFunc: func(ctx context.Context, policyCategoryID uuid.UUID) (entity.PolicyCategory, error) {
//				panic("mock out the FindPolicyCategoryByID method")
//			},
//			FindPolicyCategoryByIDWithSdFunc: func(ctx context.Context, sd Sd, policyCategoryID uuid.UUID) (entity.PolicyCategory, error) {
//				panic("mock out the FindPolicyCategoryByIDWithSd method")
//			},
//			FindPolicyCategoryByKeyFunc: func(ctx context.Context, key string) (entity.PolicyCategory, error) {
//				panic("mock out the FindPolicyCategoryByKey method")
//			},
//			FindPolicyCategoryByKeyWithSdFunc: func(ctx context.Context, sd Sd, key string) (entity.PolicyCategory, error) {
//				panic("mock out the FindPolicyCategoryByKeyWithSd method")
//			},
//			FindRecordTypeByIDFunc: func(ctx context.Context, recordTypeID uuid.UUID) (entity.RecordType, error) {
//				panic("mock out the FindRecordTypeByID method")
//			},
//			FindRecordTypeByIDWithSdFunc: func(ctx context.Context, sd Sd, recordTypeID uuid.UUID) (entity.RecordType, error) {
//				panic("mock out the FindRecordTypeByIDWithSd method")
//			},
//			FindRecordTypeByKeyFunc: func(ctx context.Context, key string) (entity.RecordType, error) {
//				panic("mock out the FindRecordTypeByKey method")
//			},
//			FindRecordTypeByKeyWithSdFunc: func(ctx context.Context, sd Sd, key string) (entity.RecordType, error) {
//				panic("mock out the FindRecordTypeByKeyWithSd method")
//			},
//			GetAbsencesFunc: func(ctx context.Context, order parameter.AbsenceOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Absence], error) {
//				panic("mock out the GetAbsences method")
//			},
//			GetAbsencesWithSdFunc: func(ctx context.Context, sd Sd, order parameter.AbsenceOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Absence], error) {
//				panic("mock out the GetAbsencesWithSd method")
//			},
//			GetAttendStatusesFunc: func(ctx context.Context, where parameter.WhereAttendStatusParam, order parameter.AttendStatusOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.AttendStatus], error) {
//				panic("mock out the GetAttendStatuses method")
//			},
//			GetAttendStatusesWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereAttendStatusParam, order parameter.AttendStatusOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.AttendStatus], error) {
//				panic("mock out the GetAttendStatusesWithSd method")
//			},
//			GetAttendanceTypesFunc: func(ctx context.Context, where parameter.WhereAttendanceTypeParam, order parameter.AttendanceTypeOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.AttendanceType], error) {
//				panic("mock out the GetAttendanceTypes method")
//			},
//			GetAttendanceTypesWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereAttendanceTypeParam, order parameter.AttendanceTypeOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.AttendanceType], error) {
//				panic("mock out the GetAttendanceTypesWithSd method")
//			},
//			GetEventTypesFunc: func(ctx context.Context, where parameter.WhereEventTypeParam, order parameter.EventTypeOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.EventType], error) {
//				panic("mock out the GetEventTypes method")
//			},
//			GetEventTypesWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereEventTypeParam, order parameter.EventTypeOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.EventType], error) {
//				panic("mock out the GetEventTypesWithSd method")
//			},
//			GetMimeTypesFunc: func(ctx context.Context, where parameter.WhereMimeTypeParam, order parameter.MimeTypeOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MimeType], error) {
//				panic("mock out the GetMimeTypes method")
//			},
//			GetMimeTypesWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereMimeTypeParam, order parameter.MimeTypeOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MimeType], error) {
//				panic("mock out the GetMimeTypesWithSd method")
//			},
//			GetPermissionCategoriesFunc: func(ctx context.Context, where parameter.WherePermissionCategoryParam, order parameter.PermissionCategoryOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.PermissionCategory], error) {
//				panic("mock out the GetPermissionCategories method")
//			},
//			GetPermissionCategoriesWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WherePermissionCategoryParam, order parameter.PermissionCategoryOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.PermissionCategory], error) {
//				panic("mock out the GetPermissionCategoriesWithSd method")
//			},
//			GetPermissionsFunc: func(ctx context.Context, where parameter.WherePermissionParam, order parameter.PermissionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Permission], error) {
//				panic("mock out the GetPermissions method")
//			},
//			GetPermissionsWithCategoryFunc: func(ctx context.Context, where parameter.WherePermissionParam, order parameter.PermissionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.PermissionWithCategory], error) {
//				panic("mock out the GetPermissionsWithCategory method")
//			},
//			GetPermissionsWithCategoryWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WherePermissionParam, order parameter.PermissionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.PermissionWithCategory], error) {
//				panic("mock out the GetPermissionsWithCategoryWithSd method")
//			},
//			GetPermissionsWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WherePermissionParam, order parameter.PermissionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Permission], error) {
//				panic("mock out the GetPermissionsWithSd method")
//			},
//			GetPluralAbsencesFunc: func(ctx context.Context, ids []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.Absence], error) {
//				panic("mock out the GetPluralAbsences method")
//			},
//			GetPluralAbsencesWithSdFunc: func(ctx context.Context, sd Sd, ids []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.Absence], error) {
//				panic("mock out the GetPluralAbsencesWithSd method")
//			},
//			GetPluralAttendStatusesFunc: func(ctx context.Context, AttendStatusIDs []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.AttendStatus], error) {
//				panic("mock out the GetPluralAttendStatuses method")
//			},
//			GetPluralAttendStatusesWithSdFunc: func(ctx context.Context, sd Sd, AttendStatusIDs []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.AttendStatus], error) {
//				panic("mock out the GetPluralAttendStatusesWithSd method")
//			},
//			GetPluralAttendanceTypesFunc: func(ctx context.Context, AttendanceTypeIDs []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.AttendanceType], error) {
//				panic("mock out the GetPluralAttendanceTypes method")
//			},
//			GetPluralAttendanceTypesWithSdFunc: func(ctx context.Context, sd Sd, AttendanceTypeIDs []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.AttendanceType], error) {
//				panic("mock out the GetPluralAttendanceTypesWithSd method")
//			},
//			GetPluralEventTypesFunc: func(ctx context.Context, EventTypeIDs []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.EventType], error) {
//				panic("mock out the GetPluralEventTypes method")
//			},
//			GetPluralEventTypesWithSdFunc: func(ctx context.Context, sd Sd, EventTypeIDs []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.EventType], error) {
//				panic("mock out the GetPluralEventTypesWithSd method")
//			},
//			GetPluralMimeTypesFunc: func(ctx context.Context, MimeTypeIDs []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.MimeType], error) {
//				panic("mock out the GetPluralMimeTypes method")
//			},
//			GetPluralMimeTypesWithSdFunc: func(ctx context.Context, sd Sd, MimeTypeIDs []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.MimeType], error) {
//				panic("mock out the GetPluralMimeTypesWithSd method")
//			},
//			GetPluralPermissionCategoriesFunc: func(ctx context.Context, PermissionCategoryIDs []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.PermissionCategory], error) {
//				panic("mock out the GetPluralPermissionCategories method")
//			},
//			GetPluralPermissionCategoriesWithSdFunc: func(ctx context.Context, sd Sd, PermissionCategoryIDs []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.PermissionCategory], error) {
//				panic("mock out the GetPluralPermissionCategoriesWithSd method")
//			},
//			GetPluralPermissionsFunc: func(ctx context.Context, PermissionIDs []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.Permission], error) {
//				panic("mock out the GetPluralPermissions method")
//			},
//			GetPluralPermissionsWithSdFunc: func(ctx context.Context, sd Sd, PermissionIDs []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.Permission], error) {
//				panic("mock out the GetPluralPermissionsWithSd method")
//			},
//			GetPluralPoliciesFunc: func(ctx context.Context, PolicyIDs []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.Policy], error) {
//				panic("mock out the GetPluralPolicies method")
//			},
//			GetPluralPoliciesWithSdFunc: func(ctx context.Context, sd Sd, PolicyIDs []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.Policy], error) {
//				panic("mock out the GetPluralPoliciesWithSd method")
//			},
//			GetPluralPolicyCategoriesFunc: func(ctx context.Context, policyCategoryIDs []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.PolicyCategory], error) {
//				panic("mock out the GetPluralPolicyCategories method")
//			},
//			GetPluralPolicyCategoriesWithSdFunc: func(ctx context.Context, sd Sd, policyCategoryIDs []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.PolicyCategory], error) {
//				panic("mock out the GetPluralPolicyCategoriesWithSd method")
//			},
//			GetPluralRecordTypesFunc: func(ctx context.Context, RecordTypeIDs []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.RecordType], error) {
//				panic("mock out the GetPluralRecordTypes method")
//			},
//			GetPluralRecordTypesWithSdFunc: func(ctx context.Context, sd Sd, RecordTypeIDs []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.RecordType], error) {
//				panic("mock out the GetPluralRecordTypesWithSd method")
//			},
//			GetPoliciesFunc: func(ctx context.Context, where parameter.WherePolicyParam, order parameter.PolicyOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Policy], error) {
//				panic("mock out the GetPolicies method")
//			},
//			GetPoliciesWithCategoryFunc: func(ctx context.Context, where parameter.WherePolicyParam, order parameter.PolicyOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.PolicyWithCategory], error) {
//				panic("mock out the GetPoliciesWithCategory method")
//			},
//			GetPoliciesWithCategoryWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WherePolicyParam, order parameter.PolicyOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.PolicyWithCategory], error) {
//				panic("mock out the GetPoliciesWithCategoryWithSd method")
//			},
//			GetPoliciesWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WherePolicyParam, order parameter.PolicyOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Policy], error) {
//				panic("mock out the GetPoliciesWithSd method")
//			},
//			GetPolicyCategoriesFunc: func(ctx context.Context, where parameter.WherePolicyCategoryParam, order parameter.PolicyCategoryOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.PolicyCategory], error) {
//				panic("mock out the GetPolicyCategories method")
//			},
//			GetPolicyCategoriesWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WherePolicyCategoryParam, order parameter.PolicyCategoryOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.PolicyCategory], error) {
//				panic("mock out the GetPolicyCategoriesWithSd method")
//			},
//			GetRecordTypesFunc: func(ctx context.Context, where parameter.WhereRecordTypeParam, order parameter.RecordTypeOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.RecordType], error) {
//				panic("mock out the GetRecordTypes method")
//			},
//			GetRecordTypesWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereRecordTypeParam, order parameter.RecordTypeOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.RecordType], error) {
//				panic("mock out the GetRecordTypesWithSd method")
//			},
//			PluralDeleteAbsencesFunc: func(ctx context.Context, absenceIDs []uuid.UUID) error {
//				panic("mock out the PluralDeleteAbsences method")
//			},
//			PluralDeleteAbsencesWithSdFunc: func(ctx context.Context, sd Sd, absenceIDs []uuid.UUID) error {
//				panic("mock out the PluralDeleteAbsencesWithSd method")
//			},
//			PluralDeleteAttendStatusesFunc: func(ctx context.Context, attendStatusIDs []uuid.UUID) error {
//				panic("mock out the PluralDeleteAttendStatuses method")
//			},
//			PluralDeleteAttendStatusesWithSdFunc: func(ctx context.Context, sd Sd, attendStatusIDs []uuid.UUID) error {
//				panic("mock out the PluralDeleteAttendStatusesWithSd method")
//			},
//			PluralDeleteAttendanceTypesFunc: func(ctx context.Context, attendanceTypeIDs []uuid.UUID) error {
//				panic("mock out the PluralDeleteAttendanceTypes method")
//			},
//			PluralDeleteAttendanceTypesWithSdFunc: func(ctx context.Context, sd Sd, attendanceTypeIDs []uuid.UUID) error {
//				panic("mock out the PluralDeleteAttendanceTypesWithSd method")
//			},
//			PluralDeleteEventTypesFunc: func(ctx context.Context, eventTypeIDs []uuid.UUID) error {
//				panic("mock out the PluralDeleteEventTypes method")
//			},
//			PluralDeleteEventTypesWithSdFunc: func(ctx context.Context, sd Sd, eventTypeIDs []uuid.UUID) error {
//				panic("mock out the PluralDeleteEventTypesWithSd method")
//			},
//			PluralDeleteMimeTypesFunc: func(ctx context.Context, mimeTypeIDs []uuid.UUID) error {
//				panic("mock out the PluralDeleteMimeTypes method")
//			},
//			PluralDeleteMimeTypesWithSdFunc: func(ctx context.Context, sd Sd, mimeTypeIDs []uuid.UUID) error {
//				panic("mock out the PluralDeleteMimeTypesWithSd method")
//			},
//			PluralDeletePermissionCategoriesFunc: func(ctx context.Context, permissionCategoryIDs []uuid.UUID) error {
//				panic("mock out the PluralDeletePermissionCategories method")
//			},
//			PluralDeletePermissionCategoriesWithSdFunc: func(ctx context.Context, sd Sd, permissionCategoryIDs []uuid.UUID) error {
//				panic("mock out the PluralDeletePermissionCategoriesWithSd method")
//			},
//			PluralDeletePermissionsFunc: func(ctx context.Context, permissionIDs []uuid.UUID) error {
//				panic("mock out the PluralDeletePermissions method")
//			},
//			PluralDeletePermissionsWithSdFunc: func(ctx context.Context, sd Sd, permissionIDs []uuid.UUID) error {
//				panic("mock out the PluralDeletePermissionsWithSd method")
//			},
//			PluralDeletePoliciesFunc: func(ctx context.Context, policyIDs []uuid.UUID) error {
//				panic("mock out the PluralDeletePolicies method")
//			},
//			PluralDeletePoliciesWithSdFunc: func(ctx context.Context, sd Sd, policyIDs []uuid.UUID) error {
//				panic("mock out the PluralDeletePoliciesWithSd method")
//			},
//			PluralDeletePolicyCategoriesFunc: func(ctx context.Context, policyCategoryIDs []uuid.UUID) error {
//				panic("mock out the PluralDeletePolicyCategories method")
//			},
//			PluralDeletePolicyCategoriesWithSdFunc: func(ctx context.Context, sd Sd, policyCategoryIDs []uuid.UUID) error {
//				panic("mock out the PluralDeletePolicyCategoriesWithSd method")
//			},
//			PluralDeleteRecordTypesFunc: func(ctx context.Context, recordTypeIDs []uuid.UUID) error {
//				panic("mock out the PluralDeleteRecordTypes method")
//			},
//			PluralDeleteRecordTypesWithSdFunc: func(ctx context.Context, sd Sd, recordTypeIDs []uuid.UUID) error {
//				panic("mock out the PluralDeleteRecordTypesWithSd method")
//			},
//			RollbackFunc: func(contextMoqParam context.Context, sd Sd) error {
//				panic("mock out the Rollback method")
//			},
//			UpdateAttendStatusFunc: func(ctx context.Context, attendStatusID uuid.UUID, param parameter.UpdateAttendStatusParams) (entity.AttendStatus, error) {
//				panic("mock out the UpdateAttendStatus method")
//			},
//			UpdateAttendStatusByKeyFunc: func(ctx context.Context, key string, param parameter.UpdateAttendStatusByKeyParams) (entity.AttendStatus, error) {
//				panic("mock out the UpdateAttendStatusByKey method")
//			},
//			UpdateAttendStatusByKeyWithSdFunc: func(ctx context.Context, sd Sd, key string, param parameter.UpdateAttendStatusByKeyParams) (entity.AttendStatus, error) {
//				panic("mock out the UpdateAttendStatusByKeyWithSd method")
//			},
//			UpdateAttendStatusWithSdFunc: func(ctx context.Context, sd Sd, attendStatusID uuid.UUID, param parameter.UpdateAttendStatusParams) (entity.AttendStatus, error) {
//				panic("mock out the UpdateAttendStatusWithSd method")
//			},
//			UpdateAttendanceTypeFunc: func(ctx context.Context, attendanceTypeID uuid.UUID, param parameter.UpdateAttendanceTypeParams) (entity.AttendanceType, error) {
//				panic("mock out the UpdateAttendanceType method")
//			},
//			UpdateAttendanceTypeByKeyFunc: func(ctx context.Context, key string, param parameter.UpdateAttendanceTypeByKeyParams) (entity.AttendanceType, error) {
//				panic("mock out the UpdateAttendanceTypeByKey method")
//			},
//			UpdateAttendanceTypeByKeyWithSdFunc: func(ctx context.Context, sd Sd, key string, param parameter.UpdateAttendanceTypeByKeyParams) (entity.AttendanceType, error) {
//				panic("mock out the UpdateAttendanceTypeByKeyWithSd method")
//			},
//			UpdateAttendanceTypeWithSdFunc: func(ctx context.Context, sd Sd, attendanceTypeID uuid.UUID, param parameter.UpdateAttendanceTypeParams) (entity.AttendanceType, error) {
//				panic("mock out the UpdateAttendanceTypeWithSd method")
//			},
//			UpdateEventTypeFunc: func(ctx context.Context, eventTypeID uuid.UUID, param parameter.UpdateEventTypeParams) (entity.EventType, error) {
//				panic("mock out the UpdateEventType method")
//			},
//			UpdateEventTypeByKeyFunc: func(ctx context.Context, key string, param parameter.UpdateEventTypeByKeyParams) (entity.EventType, error) {
//				panic("mock out the UpdateEventTypeByKey method")
//			},
//			UpdateEventTypeByKeyWithSdFunc: func(ctx context.Context, sd Sd, key string, param parameter.UpdateEventTypeByKeyParams) (entity.EventType, error) {
//				panic("mock out the UpdateEventTypeByKeyWithSd method")
//			},
//			UpdateEventTypeWithSdFunc: func(ctx context.Context, sd Sd, eventTypeID uuid.UUID, param parameter.UpdateEventTypeParams) (entity.EventType, error) {
//				panic("mock out the UpdateEventTypeWithSd method")
//			},
//			UpdateMimeTypeFunc: func(ctx context.Context, mimeTypeID uuid.UUID, param parameter.UpdateMimeTypeParams) (entity.MimeType, error) {
//				panic("mock out the UpdateMimeType method")
//			},
//			UpdateMimeTypeByKeyFunc: func(ctx context.Context, key string, param parameter.UpdateMimeTypeByKeyParams) (entity.MimeType, error) {
//				panic("mock out the UpdateMimeTypeByKey method")
//			},
//			UpdateMimeTypeByKeyWithSdFunc: func(ctx context.Context, sd Sd, key string, param parameter.UpdateMimeTypeByKeyParams) (entity.MimeType, error) {
//				panic("mock out the UpdateMimeTypeByKeyWithSd method")
//			},
//			UpdateMimeTypeWithSdFunc: func(ctx context.Context, sd Sd, mimeTypeID uuid.UUID, param parameter.UpdateMimeTypeParams) (entity.MimeType, error) {
//				panic("mock out the UpdateMimeTypeWithSd method")
//			},
//			UpdatePermissionFunc: func(ctx context.Context, permissionID uuid.UUID, param parameter.UpdatePermissionParams) (entity.Permission, error) {
//				panic("mock out the UpdatePermission method")
//			},
//			UpdatePermissionByKeyFunc: func(ctx context.Context, key string, param parameter.UpdatePermissionByKeyParams) (entity.Permission, error) {
//				panic("mock out the UpdatePermissionByKey method")
//			},
//			UpdatePermissionByKeyWithSdFunc: func(ctx context.Context, sd Sd, key string, param parameter.UpdatePermissionByKeyParams) (entity.Permission, error) {
//				panic("mock out the UpdatePermissionByKeyWithSd method")
//			},
//			UpdatePermissionCategoryFunc: func(ctx context.Context, permissionCategoryID uuid.UUID, param parameter.UpdatePermissionCategoryParams) (entity.PermissionCategory, error) {
//				panic("mock out the UpdatePermissionCategory method")
//			},
//			UpdatePermissionCategoryByKeyFunc: func(ctx context.Context, key string, param parameter.UpdatePermissionCategoryByKeyParams) (entity.PermissionCategory, error) {
//				panic("mock out the UpdatePermissionCategoryByKey method")
//			},
//			UpdatePermissionCategoryByKeyWithSdFunc: func(ctx context.Context, sd Sd, key string, param parameter.UpdatePermissionCategoryByKeyParams) (entity.PermissionCategory, error) {
//				panic("mock out the UpdatePermissionCategoryByKeyWithSd method")
//			},
//			UpdatePermissionCategoryWithSdFunc: func(ctx context.Context, sd Sd, permissionCategoryID uuid.UUID, param parameter.UpdatePermissionCategoryParams) (entity.PermissionCategory, error) {
//				panic("mock out the UpdatePermissionCategoryWithSd method")
//			},
//			UpdatePermissionWithSdFunc: func(ctx context.Context, sd Sd, permissionID uuid.UUID, param parameter.UpdatePermissionParams) (entity.Permission, error) {
//				panic("mock out the UpdatePermissionWithSd method")
//			},
//			UpdatePolicyFunc: func(ctx context.Context, policyID uuid.UUID, param parameter.UpdatePolicyParams) (entity.Policy, error) {
//				panic("mock out the UpdatePolicy method")
//			},
//			UpdatePolicyByKeyFunc: func(ctx context.Context, key string, param parameter.UpdatePolicyByKeyParams) (entity.Policy, error) {
//				panic("mock out the UpdatePolicyByKey method")
//			},
//			UpdatePolicyByKeyWithSdFunc: func(ctx context.Context, sd Sd, key string, param parameter.UpdatePolicyByKeyParams) (entity.Policy, error) {
//				panic("mock out the UpdatePolicyByKeyWithSd method")
//			},
//			UpdatePolicyCategoryFunc: func(ctx context.Context, policyCategoryID uuid.UUID, param parameter.UpdatePolicyCategoryParams) (entity.PolicyCategory, error) {
//				panic("mock out the UpdatePolicyCategory method")
//			},
//			UpdatePolicyCategoryByKeyFunc: func(ctx context.Context, key string, param parameter.UpdatePolicyCategoryByKeyParams) (entity.PolicyCategory, error) {
//				panic("mock out the UpdatePolicyCategoryByKey method")
//			},
//			UpdatePolicyCategoryByKeyWithSdFunc: func(ctx context.Context, sd Sd, key string, param parameter.UpdatePolicyCategoryByKeyParams) (entity.PolicyCategory, error) {
//				panic("mock out the UpdatePolicyCategoryByKeyWithSd method")
//			},
//			UpdatePolicyCategoryWithSdFunc: func(ctx context.Context, sd Sd, policyCategoryID uuid.UUID, param parameter.UpdatePolicyCategoryParams) (entity.PolicyCategory, error) {
//				panic("mock out the UpdatePolicyCategoryWithSd method")
//			},
//			UpdatePolicyWithSdFunc: func(ctx context.Context, sd Sd, policyID uuid.UUID, param parameter.UpdatePolicyParams) (entity.Policy, error) {
//				panic("mock out the UpdatePolicyWithSd method")
//			},
//			UpdateRecordTypeFunc: func(ctx context.Context, recordTypeID uuid.UUID, param parameter.UpdateRecordTypeParams) (entity.RecordType, error) {
//				panic("mock out the UpdateRecordType method")
//			},
//			UpdateRecordTypeByKeyFunc: func(ctx context.Context, key string, param parameter.UpdateRecordTypeByKeyParams) (entity.RecordType, error) {
//				panic("mock out the UpdateRecordTypeByKey method")
//			},
//			UpdateRecordTypeByKeyWithSdFunc: func(ctx context.Context, sd Sd, key string, param parameter.UpdateRecordTypeByKeyParams) (entity.RecordType, error) {
//				panic("mock out the UpdateRecordTypeByKeyWithSd method")
//			},
//			UpdateRecordTypeWithSdFunc: func(ctx context.Context, sd Sd, recordTypeID uuid.UUID, param parameter.UpdateRecordTypeParams) (entity.RecordType, error) {
//				panic("mock out the UpdateRecordTypeWithSd method")
//			},
//		}
//
//		// use mockedStore in code that requires Store
//		// and then make assertions.
//
//	}
type StoreMock struct {
	// BeginFunc mocks the Begin method.
	BeginFunc func(contextMoqParam context.Context) (Sd, error)

	// CleanupFunc mocks the Cleanup method.
	CleanupFunc func(contextMoqParam context.Context) error

	// CommitFunc mocks the Commit method.
	CommitFunc func(contextMoqParam context.Context, sd Sd) error

	// CountAbsencesFunc mocks the CountAbsences method.
	CountAbsencesFunc func(ctx context.Context) (int64, error)

	// CountAbsencesWithSdFunc mocks the CountAbsencesWithSd method.
	CountAbsencesWithSdFunc func(ctx context.Context, sd Sd) (int64, error)

	// CountAttendStatusesFunc mocks the CountAttendStatuses method.
	CountAttendStatusesFunc func(ctx context.Context, where parameter.WhereAttendStatusParam) (int64, error)

	// CountAttendStatusesWithSdFunc mocks the CountAttendStatusesWithSd method.
	CountAttendStatusesWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereAttendStatusParam) (int64, error)

	// CountAttendanceTypesFunc mocks the CountAttendanceTypes method.
	CountAttendanceTypesFunc func(ctx context.Context, where parameter.WhereAttendanceTypeParam) (int64, error)

	// CountAttendanceTypesWithSdFunc mocks the CountAttendanceTypesWithSd method.
	CountAttendanceTypesWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereAttendanceTypeParam) (int64, error)

	// CountEventTypesFunc mocks the CountEventTypes method.
	CountEventTypesFunc func(ctx context.Context, where parameter.WhereEventTypeParam) (int64, error)

	// CountEventTypesWithSdFunc mocks the CountEventTypesWithSd method.
	CountEventTypesWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereEventTypeParam) (int64, error)

	// CountMimeTypesFunc mocks the CountMimeTypes method.
	CountMimeTypesFunc func(ctx context.Context, where parameter.WhereMimeTypeParam) (int64, error)

	// CountMimeTypesWithSdFunc mocks the CountMimeTypesWithSd method.
	CountMimeTypesWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereMimeTypeParam) (int64, error)

	// CountPermissionCategoriesFunc mocks the CountPermissionCategories method.
	CountPermissionCategoriesFunc func(ctx context.Context, where parameter.WherePermissionCategoryParam) (int64, error)

	// CountPermissionCategoriesWithSdFunc mocks the CountPermissionCategoriesWithSd method.
	CountPermissionCategoriesWithSdFunc func(ctx context.Context, sd Sd, where parameter.WherePermissionCategoryParam) (int64, error)

	// CountPermissionsFunc mocks the CountPermissions method.
	CountPermissionsFunc func(ctx context.Context, where parameter.WherePermissionParam) (int64, error)

	// CountPermissionsWithSdFunc mocks the CountPermissionsWithSd method.
	CountPermissionsWithSdFunc func(ctx context.Context, sd Sd, where parameter.WherePermissionParam) (int64, error)

	// CountPoliciesFunc mocks the CountPolicies method.
	CountPoliciesFunc func(ctx context.Context, where parameter.WherePolicyParam) (int64, error)

	// CountPoliciesWithSdFunc mocks the CountPoliciesWithSd method.
	CountPoliciesWithSdFunc func(ctx context.Context, sd Sd, where parameter.WherePolicyParam) (int64, error)

	// CountPolicyCategoriesFunc mocks the CountPolicyCategories method.
	CountPolicyCategoriesFunc func(ctx context.Context, where parameter.WherePolicyCategoryParam) (int64, error)

	// CountPolicyCategoriesWithSdFunc mocks the CountPolicyCategoriesWithSd method.
	CountPolicyCategoriesWithSdFunc func(ctx context.Context, sd Sd, where parameter.WherePolicyCategoryParam) (int64, error)

	// CountRecordTypesFunc mocks the CountRecordTypes method.
	CountRecordTypesFunc func(ctx context.Context, where parameter.WhereRecordTypeParam) (int64, error)

	// CountRecordTypesWithSdFunc mocks the CountRecordTypesWithSd method.
	CountRecordTypesWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereRecordTypeParam) (int64, error)

	// CreateAbsenceFunc mocks the CreateAbsence method.
	CreateAbsenceFunc func(ctx context.Context, param parameter.CreateAbsenceParam) (entity.Absence, error)

	// CreateAbsenceWithSdFunc mocks the CreateAbsenceWithSd method.
	CreateAbsenceWithSdFunc func(ctx context.Context, sd Sd, param parameter.CreateAbsenceParam) (entity.Absence, error)

	// CreateAbsencesFunc mocks the CreateAbsences method.
	CreateAbsencesFunc func(ctx context.Context, params []parameter.CreateAbsenceParam) (int64, error)

	// CreateAbsencesWithSdFunc mocks the CreateAbsencesWithSd method.
	CreateAbsencesWithSdFunc func(ctx context.Context, sd Sd, params []parameter.CreateAbsenceParam) (int64, error)

	// CreateAttendStatusFunc mocks the CreateAttendStatus method.
	CreateAttendStatusFunc func(ctx context.Context, param parameter.CreateAttendStatusParam) (entity.AttendStatus, error)

	// CreateAttendStatusWithSdFunc mocks the CreateAttendStatusWithSd method.
	CreateAttendStatusWithSdFunc func(ctx context.Context, sd Sd, param parameter.CreateAttendStatusParam) (entity.AttendStatus, error)

	// CreateAttendStatusesFunc mocks the CreateAttendStatuses method.
	CreateAttendStatusesFunc func(ctx context.Context, params []parameter.CreateAttendStatusParam) (int64, error)

	// CreateAttendStatusesWithSdFunc mocks the CreateAttendStatusesWithSd method.
	CreateAttendStatusesWithSdFunc func(ctx context.Context, sd Sd, params []parameter.CreateAttendStatusParam) (int64, error)

	// CreateAttendanceTypeFunc mocks the CreateAttendanceType method.
	CreateAttendanceTypeFunc func(ctx context.Context, param parameter.CreateAttendanceTypeParam) (entity.AttendanceType, error)

	// CreateAttendanceTypeWithSdFunc mocks the CreateAttendanceTypeWithSd method.
	CreateAttendanceTypeWithSdFunc func(ctx context.Context, sd Sd, param parameter.CreateAttendanceTypeParam) (entity.AttendanceType, error)

	// CreateAttendanceTypesFunc mocks the CreateAttendanceTypes method.
	CreateAttendanceTypesFunc func(ctx context.Context, params []parameter.CreateAttendanceTypeParam) (int64, error)

	// CreateAttendanceTypesWithSdFunc mocks the CreateAttendanceTypesWithSd method.
	CreateAttendanceTypesWithSdFunc func(ctx context.Context, sd Sd, params []parameter.CreateAttendanceTypeParam) (int64, error)

	// CreateEventTypeFunc mocks the CreateEventType method.
	CreateEventTypeFunc func(ctx context.Context, param parameter.CreateEventTypeParam) (entity.EventType, error)

	// CreateEventTypeWithSdFunc mocks the CreateEventTypeWithSd method.
	CreateEventTypeWithSdFunc func(ctx context.Context, sd Sd, param parameter.CreateEventTypeParam) (entity.EventType, error)

	// CreateEventTypesFunc mocks the CreateEventTypes method.
	CreateEventTypesFunc func(ctx context.Context, params []parameter.CreateEventTypeParam) (int64, error)

	// CreateEventTypesWithSdFunc mocks the CreateEventTypesWithSd method.
	CreateEventTypesWithSdFunc func(ctx context.Context, sd Sd, params []parameter.CreateEventTypeParam) (int64, error)

	// CreateMimeTypeFunc mocks the CreateMimeType method.
	CreateMimeTypeFunc func(ctx context.Context, param parameter.CreateMimeTypeParam) (entity.MimeType, error)

	// CreateMimeTypeWithSdFunc mocks the CreateMimeTypeWithSd method.
	CreateMimeTypeWithSdFunc func(ctx context.Context, sd Sd, param parameter.CreateMimeTypeParam) (entity.MimeType, error)

	// CreateMimeTypesFunc mocks the CreateMimeTypes method.
	CreateMimeTypesFunc func(ctx context.Context, params []parameter.CreateMimeTypeParam) (int64, error)

	// CreateMimeTypesWithSdFunc mocks the CreateMimeTypesWithSd method.
	CreateMimeTypesWithSdFunc func(ctx context.Context, sd Sd, params []parameter.CreateMimeTypeParam) (int64, error)

	// CreatePermissionFunc mocks the CreatePermission method.
	CreatePermissionFunc func(ctx context.Context, param parameter.CreatePermissionParam) (entity.Permission, error)

	// CreatePermissionCategoriesFunc mocks the CreatePermissionCategories method.
	CreatePermissionCategoriesFunc func(ctx context.Context, params []parameter.CreatePermissionCategoryParam) (int64, error)

	// CreatePermissionCategoriesWithSdFunc mocks the CreatePermissionCategoriesWithSd method.
	CreatePermissionCategoriesWithSdFunc func(ctx context.Context, sd Sd, params []parameter.CreatePermissionCategoryParam) (int64, error)

	// CreatePermissionCategoryFunc mocks the CreatePermissionCategory method.
	CreatePermissionCategoryFunc func(ctx context.Context, param parameter.CreatePermissionCategoryParam) (entity.PermissionCategory, error)

	// CreatePermissionCategoryWithSdFunc mocks the CreatePermissionCategoryWithSd method.
	CreatePermissionCategoryWithSdFunc func(ctx context.Context, sd Sd, param parameter.CreatePermissionCategoryParam) (entity.PermissionCategory, error)

	// CreatePermissionWithSdFunc mocks the CreatePermissionWithSd method.
	CreatePermissionWithSdFunc func(ctx context.Context, sd Sd, param parameter.CreatePermissionParam) (entity.Permission, error)

	// CreatePermissionsFunc mocks the CreatePermissions method.
	CreatePermissionsFunc func(ctx context.Context, params []parameter.CreatePermissionParam) (int64, error)

	// CreatePermissionsWithSdFunc mocks the CreatePermissionsWithSd method.
	CreatePermissionsWithSdFunc func(ctx context.Context, sd Sd, params []parameter.CreatePermissionParam) (int64, error)

	// CreatePoliciesFunc mocks the CreatePolicies method.
	CreatePoliciesFunc func(ctx context.Context, params []parameter.CreatePolicyParam) (int64, error)

	// CreatePoliciesWithSdFunc mocks the CreatePoliciesWithSd method.
	CreatePoliciesWithSdFunc func(ctx context.Context, sd Sd, params []parameter.CreatePolicyParam) (int64, error)

	// CreatePolicyFunc mocks the CreatePolicy method.
	CreatePolicyFunc func(ctx context.Context, param parameter.CreatePolicyParam) (entity.Policy, error)

	// CreatePolicyCategoriesFunc mocks the CreatePolicyCategories method.
	CreatePolicyCategoriesFunc func(ctx context.Context, params []parameter.CreatePolicyCategoryParam) (int64, error)

	// CreatePolicyCategoriesWithSdFunc mocks the CreatePolicyCategoriesWithSd method.
	CreatePolicyCategoriesWithSdFunc func(ctx context.Context, sd Sd, params []parameter.CreatePolicyCategoryParam) (int64, error)

	// CreatePolicyCategoryFunc mocks the CreatePolicyCategory method.
	CreatePolicyCategoryFunc func(ctx context.Context, param parameter.CreatePolicyCategoryParam) (entity.PolicyCategory, error)

	// CreatePolicyCategoryWithSdFunc mocks the CreatePolicyCategoryWithSd method.
	CreatePolicyCategoryWithSdFunc func(ctx context.Context, sd Sd, param parameter.CreatePolicyCategoryParam) (entity.PolicyCategory, error)

	// CreatePolicyWithSdFunc mocks the CreatePolicyWithSd method.
	CreatePolicyWithSdFunc func(ctx context.Context, sd Sd, param parameter.CreatePolicyParam) (entity.Policy, error)

	// CreateRecordTypeFunc mocks the CreateRecordType method.
	CreateRecordTypeFunc func(ctx context.Context, param parameter.CreateRecordTypeParam) (entity.RecordType, error)

	// CreateRecordTypeWithSdFunc mocks the CreateRecordTypeWithSd method.
	CreateRecordTypeWithSdFunc func(ctx context.Context, sd Sd, param parameter.CreateRecordTypeParam) (entity.RecordType, error)

	// CreateRecordTypesFunc mocks the CreateRecordTypes method.
	CreateRecordTypesFunc func(ctx context.Context, params []parameter.CreateRecordTypeParam) (int64, error)

	// CreateRecordTypesWithSdFunc mocks the CreateRecordTypesWithSd method.
	CreateRecordTypesWithSdFunc func(ctx context.Context, sd Sd, params []parameter.CreateRecordTypeParam) (int64, error)

	// DeleteAbsenceFunc mocks the DeleteAbsence method.
	DeleteAbsenceFunc func(ctx context.Context, absenceID uuid.UUID) error

	// DeleteAbsenceWithSdFunc mocks the DeleteAbsenceWithSd method.
	DeleteAbsenceWithSdFunc func(ctx context.Context, sd Sd, absenceID uuid.UUID) error

	// DeleteAttendStatusFunc mocks the DeleteAttendStatus method.
	DeleteAttendStatusFunc func(ctx context.Context, attendStatusID uuid.UUID) error

	// DeleteAttendStatusByKeyFunc mocks the DeleteAttendStatusByKey method.
	DeleteAttendStatusByKeyFunc func(ctx context.Context, key string) error

	// DeleteAttendStatusByKeyWithSdFunc mocks the DeleteAttendStatusByKeyWithSd method.
	DeleteAttendStatusByKeyWithSdFunc func(ctx context.Context, sd Sd, key string) error

	// DeleteAttendStatusWithSdFunc mocks the DeleteAttendStatusWithSd method.
	DeleteAttendStatusWithSdFunc func(ctx context.Context, sd Sd, attendStatusID uuid.UUID) error

	// DeleteAttendanceTypeFunc mocks the DeleteAttendanceType method.
	DeleteAttendanceTypeFunc func(ctx context.Context, attendanceTypeID uuid.UUID) error

	// DeleteAttendanceTypeByKeyFunc mocks the DeleteAttendanceTypeByKey method.
	DeleteAttendanceTypeByKeyFunc func(ctx context.Context, key string) error

	// DeleteAttendanceTypeByKeyWithSdFunc mocks the DeleteAttendanceTypeByKeyWithSd method.
	DeleteAttendanceTypeByKeyWithSdFunc func(ctx context.Context, sd Sd, key string) error

	// DeleteAttendanceTypeWithSdFunc mocks the DeleteAttendanceTypeWithSd method.
	DeleteAttendanceTypeWithSdFunc func(ctx context.Context, sd Sd, attendanceTypeID uuid.UUID) error

	// DeleteEventTypeFunc mocks the DeleteEventType method.
	DeleteEventTypeFunc func(ctx context.Context, eventTypeID uuid.UUID) error

	// DeleteEventTypeByKeyFunc mocks the DeleteEventTypeByKey method.
	DeleteEventTypeByKeyFunc func(ctx context.Context, key string) error

	// DeleteEventTypeByKeyWithSdFunc mocks the DeleteEventTypeByKeyWithSd method.
	DeleteEventTypeByKeyWithSdFunc func(ctx context.Context, sd Sd, key string) error

	// DeleteEventTypeWithSdFunc mocks the DeleteEventTypeWithSd method.
	DeleteEventTypeWithSdFunc func(ctx context.Context, sd Sd, eventTypeID uuid.UUID) error

	// DeleteMimeTypeFunc mocks the DeleteMimeType method.
	DeleteMimeTypeFunc func(ctx context.Context, mimeTypeID uuid.UUID) error

	// DeleteMimeTypeByKeyFunc mocks the DeleteMimeTypeByKey method.
	DeleteMimeTypeByKeyFunc func(ctx context.Context, key string) error

	// DeleteMimeTypeByKeyWithSdFunc mocks the DeleteMimeTypeByKeyWithSd method.
	DeleteMimeTypeByKeyWithSdFunc func(ctx context.Context, sd Sd, key string) error

	// DeleteMimeTypeWithSdFunc mocks the DeleteMimeTypeWithSd method.
	DeleteMimeTypeWithSdFunc func(ctx context.Context, sd Sd, mimeTypeID uuid.UUID) error

	// DeletePermissionFunc mocks the DeletePermission method.
	DeletePermissionFunc func(ctx context.Context, permissionID uuid.UUID) error

	// DeletePermissionByKeyFunc mocks the DeletePermissionByKey method.
	DeletePermissionByKeyFunc func(ctx context.Context, key string) error

	// DeletePermissionByKeyWithSdFunc mocks the DeletePermissionByKeyWithSd method.
	DeletePermissionByKeyWithSdFunc func(ctx context.Context, sd Sd, key string) error

	// DeletePermissionCategoryFunc mocks the DeletePermissionCategory method.
	DeletePermissionCategoryFunc func(ctx context.Context, permissionCategoryID uuid.UUID) error

	// DeletePermissionCategoryByKeyFunc mocks the DeletePermissionCategoryByKey method.
	DeletePermissionCategoryByKeyFunc func(ctx context.Context, key string) error

	// DeletePermissionCategoryByKeyWithSdFunc mocks the DeletePermissionCategoryByKeyWithSd method.
	DeletePermissionCategoryByKeyWithSdFunc func(ctx context.Context, sd Sd, key string) error

	// DeletePermissionCategoryWithSdFunc mocks the DeletePermissionCategoryWithSd method.
	DeletePermissionCategoryWithSdFunc func(ctx context.Context, sd Sd, permissionCategoryID uuid.UUID) error

	// DeletePermissionWithSdFunc mocks the DeletePermissionWithSd method.
	DeletePermissionWithSdFunc func(ctx context.Context, sd Sd, permissionID uuid.UUID) error

	// DeletePolicyFunc mocks the DeletePolicy method.
	DeletePolicyFunc func(ctx context.Context, policyID uuid.UUID) error

	// DeletePolicyByKeyFunc mocks the DeletePolicyByKey method.
	DeletePolicyByKeyFunc func(ctx context.Context, key string) error

	// DeletePolicyByKeyWithSdFunc mocks the DeletePolicyByKeyWithSd method.
	DeletePolicyByKeyWithSdFunc func(ctx context.Context, sd Sd, key string) error

	// DeletePolicyCategoryFunc mocks the DeletePolicyCategory method.
	DeletePolicyCategoryFunc func(ctx context.Context, policyCategoryID uuid.UUID) error

	// DeletePolicyCategoryByKeyFunc mocks the DeletePolicyCategoryByKey method.
	DeletePolicyCategoryByKeyFunc func(ctx context.Context, key string) error

	// DeletePolicyCategoryByKeyWithSdFunc mocks the DeletePolicyCategoryByKeyWithSd method.
	DeletePolicyCategoryByKeyWithSdFunc func(ctx context.Context, sd Sd, key string) error

	// DeletePolicyCategoryWithSdFunc mocks the DeletePolicyCategoryWithSd method.
	DeletePolicyCategoryWithSdFunc func(ctx context.Context, sd Sd, policyCategoryID uuid.UUID) error

	// DeletePolicyWithSdFunc mocks the DeletePolicyWithSd method.
	DeletePolicyWithSdFunc func(ctx context.Context, sd Sd, policyID uuid.UUID) error

	// DeleteRecordTypeFunc mocks the DeleteRecordType method.
	DeleteRecordTypeFunc func(ctx context.Context, recordTypeID uuid.UUID) error

	// DeleteRecordTypeByKeyFunc mocks the DeleteRecordTypeByKey method.
	DeleteRecordTypeByKeyFunc func(ctx context.Context, key string) error

	// DeleteRecordTypeByKeyWithSdFunc mocks the DeleteRecordTypeByKeyWithSd method.
	DeleteRecordTypeByKeyWithSdFunc func(ctx context.Context, sd Sd, key string) error

	// DeleteRecordTypeWithSdFunc mocks the DeleteRecordTypeWithSd method.
	DeleteRecordTypeWithSdFunc func(ctx context.Context, sd Sd, recordTypeID uuid.UUID) error

	// FindAbsenceByIDFunc mocks the FindAbsenceByID method.
	FindAbsenceByIDFunc func(ctx context.Context, absenceID uuid.UUID) (entity.Absence, error)

	// FindAbsenceByIDWithSdFunc mocks the FindAbsenceByIDWithSd method.
	FindAbsenceByIDWithSdFunc func(ctx context.Context, sd Sd, absenceID uuid.UUID) (entity.Absence, error)

	// FindAttendStatusByIDFunc mocks the FindAttendStatusByID method.
	FindAttendStatusByIDFunc func(ctx context.Context, attendStatusID uuid.UUID) (entity.AttendStatus, error)

	// FindAttendStatusByIDWithSdFunc mocks the FindAttendStatusByIDWithSd method.
	FindAttendStatusByIDWithSdFunc func(ctx context.Context, sd Sd, attendStatusID uuid.UUID) (entity.AttendStatus, error)

	// FindAttendStatusByKeyFunc mocks the FindAttendStatusByKey method.
	FindAttendStatusByKeyFunc func(ctx context.Context, key string) (entity.AttendStatus, error)

	// FindAttendStatusByKeyWithSdFunc mocks the FindAttendStatusByKeyWithSd method.
	FindAttendStatusByKeyWithSdFunc func(ctx context.Context, sd Sd, key string) (entity.AttendStatus, error)

	// FindAttendanceTypeByIDFunc mocks the FindAttendanceTypeByID method.
	FindAttendanceTypeByIDFunc func(ctx context.Context, attendanceTypeID uuid.UUID) (entity.AttendanceType, error)

	// FindAttendanceTypeByIDWithSdFunc mocks the FindAttendanceTypeByIDWithSd method.
	FindAttendanceTypeByIDWithSdFunc func(ctx context.Context, sd Sd, attendanceTypeID uuid.UUID) (entity.AttendanceType, error)

	// FindAttendanceTypeByKeyFunc mocks the FindAttendanceTypeByKey method.
	FindAttendanceTypeByKeyFunc func(ctx context.Context, key string) (entity.AttendanceType, error)

	// FindAttendanceTypeByKeyWithSdFunc mocks the FindAttendanceTypeByKeyWithSd method.
	FindAttendanceTypeByKeyWithSdFunc func(ctx context.Context, sd Sd, key string) (entity.AttendanceType, error)

	// FindEventTypeByIDFunc mocks the FindEventTypeByID method.
	FindEventTypeByIDFunc func(ctx context.Context, eventTypeID uuid.UUID) (entity.EventType, error)

	// FindEventTypeByIDWithSdFunc mocks the FindEventTypeByIDWithSd method.
	FindEventTypeByIDWithSdFunc func(ctx context.Context, sd Sd, eventTypeID uuid.UUID) (entity.EventType, error)

	// FindEventTypeByKeyFunc mocks the FindEventTypeByKey method.
	FindEventTypeByKeyFunc func(ctx context.Context, key string) (entity.EventType, error)

	// FindEventTypeByKeyWithSdFunc mocks the FindEventTypeByKeyWithSd method.
	FindEventTypeByKeyWithSdFunc func(ctx context.Context, sd Sd, key string) (entity.EventType, error)

	// FindMimeTypeByIDFunc mocks the FindMimeTypeByID method.
	FindMimeTypeByIDFunc func(ctx context.Context, mimeTypeID uuid.UUID) (entity.MimeType, error)

	// FindMimeTypeByIDWithSdFunc mocks the FindMimeTypeByIDWithSd method.
	FindMimeTypeByIDWithSdFunc func(ctx context.Context, sd Sd, mimeTypeID uuid.UUID) (entity.MimeType, error)

	// FindMimeTypeByKeyFunc mocks the FindMimeTypeByKey method.
	FindMimeTypeByKeyFunc func(ctx context.Context, key string) (entity.MimeType, error)

	// FindMimeTypeByKeyWithSdFunc mocks the FindMimeTypeByKeyWithSd method.
	FindMimeTypeByKeyWithSdFunc func(ctx context.Context, sd Sd, key string) (entity.MimeType, error)

	// FindPermissionByIDFunc mocks the FindPermissionByID method.
	FindPermissionByIDFunc func(ctx context.Context, permissionID uuid.UUID) (entity.Permission, error)

	// FindPermissionByIDWithCategoryFunc mocks the FindPermissionByIDWithCategory method.
	FindPermissionByIDWithCategoryFunc func(ctx context.Context, permissionID uuid.UUID) (entity.PermissionWithCategory, error)

	// FindPermissionByIDWithCategoryWithSdFunc mocks the FindPermissionByIDWithCategoryWithSd method.
	FindPermissionByIDWithCategoryWithSdFunc func(ctx context.Context, sd Sd, permissionID uuid.UUID) (entity.PermissionWithCategory, error)

	// FindPermissionByIDWithSdFunc mocks the FindPermissionByIDWithSd method.
	FindPermissionByIDWithSdFunc func(ctx context.Context, sd Sd, permissionID uuid.UUID) (entity.Permission, error)

	// FindPermissionByKeyFunc mocks the FindPermissionByKey method.
	FindPermissionByKeyFunc func(ctx context.Context, key string) (entity.Permission, error)

	// FindPermissionByKeyWithCategoryFunc mocks the FindPermissionByKeyWithCategory method.
	FindPermissionByKeyWithCategoryFunc func(ctx context.Context, key string) (entity.PermissionWithCategory, error)

	// FindPermissionByKeyWithCategoryWithSdFunc mocks the FindPermissionByKeyWithCategoryWithSd method.
	FindPermissionByKeyWithCategoryWithSdFunc func(ctx context.Context, sd Sd, key string) (entity.PermissionWithCategory, error)

	// FindPermissionByKeyWithSdFunc mocks the FindPermissionByKeyWithSd method.
	FindPermissionByKeyWithSdFunc func(ctx context.Context, sd Sd, key string) (entity.Permission, error)

	// FindPermissionCategoryByIDFunc mocks the FindPermissionCategoryByID method.
	FindPermissionCategoryByIDFunc func(ctx context.Context, permissionCategoryID uuid.UUID) (entity.PermissionCategory, error)

	// FindPermissionCategoryByIDWithSdFunc mocks the FindPermissionCategoryByIDWithSd method.
	FindPermissionCategoryByIDWithSdFunc func(ctx context.Context, sd Sd, permissionCategoryID uuid.UUID) (entity.PermissionCategory, error)

	// FindPermissionCategoryByKeyFunc mocks the FindPermissionCategoryByKey method.
	FindPermissionCategoryByKeyFunc func(ctx context.Context, key string) (entity.PermissionCategory, error)

	// FindPermissionCategoryByKeyWithSdFunc mocks the FindPermissionCategoryByKeyWithSd method.
	FindPermissionCategoryByKeyWithSdFunc func(ctx context.Context, sd Sd, key string) (entity.PermissionCategory, error)

	// FindPolicyByIDFunc mocks the FindPolicyByID method.
	FindPolicyByIDFunc func(ctx context.Context, policyID uuid.UUID) (entity.Policy, error)

	// FindPolicyByIDWithCategoryFunc mocks the FindPolicyByIDWithCategory method.
	FindPolicyByIDWithCategoryFunc func(ctx context.Context, policyID uuid.UUID) (entity.PolicyWithCategory, error)

	// FindPolicyByIDWithCategoryWithSdFunc mocks the FindPolicyByIDWithCategoryWithSd method.
	FindPolicyByIDWithCategoryWithSdFunc func(ctx context.Context, sd Sd, policyID uuid.UUID) (entity.PolicyWithCategory, error)

	// FindPolicyByIDWithSdFunc mocks the FindPolicyByIDWithSd method.
	FindPolicyByIDWithSdFunc func(ctx context.Context, sd Sd, policyID uuid.UUID) (entity.Policy, error)

	// FindPolicyByKeyFunc mocks the FindPolicyByKey method.
	FindPolicyByKeyFunc func(ctx context.Context, key string) (entity.Policy, error)

	// FindPolicyByKeyWithCategoryFunc mocks the FindPolicyByKeyWithCategory method.
	FindPolicyByKeyWithCategoryFunc func(ctx context.Context, key string) (entity.PolicyWithCategory, error)

	// FindPolicyByKeyWithCategoryWithSdFunc mocks the FindPolicyByKeyWithCategoryWithSd method.
	FindPolicyByKeyWithCategoryWithSdFunc func(ctx context.Context, sd Sd, key string) (entity.PolicyWithCategory, error)

	// FindPolicyByKeyWithSdFunc mocks the FindPolicyByKeyWithSd method.
	FindPolicyByKeyWithSdFunc func(ctx context.Context, sd Sd, key string) (entity.Policy, error)

	// FindPolicyCategoryByIDFunc mocks the FindPolicyCategoryByID method.
	FindPolicyCategoryByIDFunc func(ctx context.Context, policyCategoryID uuid.UUID) (entity.PolicyCategory, error)

	// FindPolicyCategoryByIDWithSdFunc mocks the FindPolicyCategoryByIDWithSd method.
	FindPolicyCategoryByIDWithSdFunc func(ctx context.Context, sd Sd, policyCategoryID uuid.UUID) (entity.PolicyCategory, error)

	// FindPolicyCategoryByKeyFunc mocks the FindPolicyCategoryByKey method.
	FindPolicyCategoryByKeyFunc func(ctx context.Context, key string) (entity.PolicyCategory, error)

	// FindPolicyCategoryByKeyWithSdFunc mocks the FindPolicyCategoryByKeyWithSd method.
	FindPolicyCategoryByKeyWithSdFunc func(ctx context.Context, sd Sd, key string) (entity.PolicyCategory, error)

	// FindRecordTypeByIDFunc mocks the FindRecordTypeByID method.
	FindRecordTypeByIDFunc func(ctx context.Context, recordTypeID uuid.UUID) (entity.RecordType, error)

	// FindRecordTypeByIDWithSdFunc mocks the FindRecordTypeByIDWithSd method.
	FindRecordTypeByIDWithSdFunc func(ctx context.Context, sd Sd, recordTypeID uuid.UUID) (entity.RecordType, error)

	// FindRecordTypeByKeyFunc mocks the FindRecordTypeByKey method.
	FindRecordTypeByKeyFunc func(ctx context.Context, key string) (entity.RecordType, error)

	// FindRecordTypeByKeyWithSdFunc mocks the FindRecordTypeByKeyWithSd method.
	FindRecordTypeByKeyWithSdFunc func(ctx context.Context, sd Sd, key string) (entity.RecordType, error)

	// GetAbsencesFunc mocks the GetAbsences method.
	GetAbsencesFunc func(ctx context.Context, order parameter.AbsenceOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Absence], error)

	// GetAbsencesWithSdFunc mocks the GetAbsencesWithSd method.
	GetAbsencesWithSdFunc func(ctx context.Context, sd Sd, order parameter.AbsenceOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Absence], error)

	// GetAttendStatusesFunc mocks the GetAttendStatuses method.
	GetAttendStatusesFunc func(ctx context.Context, where parameter.WhereAttendStatusParam, order parameter.AttendStatusOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.AttendStatus], error)

	// GetAttendStatusesWithSdFunc mocks the GetAttendStatusesWithSd method.
	GetAttendStatusesWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereAttendStatusParam, order parameter.AttendStatusOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.AttendStatus], error)

	// GetAttendanceTypesFunc mocks the GetAttendanceTypes method.
	GetAttendanceTypesFunc func(ctx context.Context, where parameter.WhereAttendanceTypeParam, order parameter.AttendanceTypeOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.AttendanceType], error)

	// GetAttendanceTypesWithSdFunc mocks the GetAttendanceTypesWithSd method.
	GetAttendanceTypesWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereAttendanceTypeParam, order parameter.AttendanceTypeOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.AttendanceType], error)

	// GetEventTypesFunc mocks the GetEventTypes method.
	GetEventTypesFunc func(ctx context.Context, where parameter.WhereEventTypeParam, order parameter.EventTypeOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.EventType], error)

	// GetEventTypesWithSdFunc mocks the GetEventTypesWithSd method.
	GetEventTypesWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereEventTypeParam, order parameter.EventTypeOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.EventType], error)

	// GetMimeTypesFunc mocks the GetMimeTypes method.
	GetMimeTypesFunc func(ctx context.Context, where parameter.WhereMimeTypeParam, order parameter.MimeTypeOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MimeType], error)

	// GetMimeTypesWithSdFunc mocks the GetMimeTypesWithSd method.
	GetMimeTypesWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereMimeTypeParam, order parameter.MimeTypeOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MimeType], error)

	// GetPermissionCategoriesFunc mocks the GetPermissionCategories method.
	GetPermissionCategoriesFunc func(ctx context.Context, where parameter.WherePermissionCategoryParam, order parameter.PermissionCategoryOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.PermissionCategory], error)

	// GetPermissionCategoriesWithSdFunc mocks the GetPermissionCategoriesWithSd method.
	GetPermissionCategoriesWithSdFunc func(ctx context.Context, sd Sd, where parameter.WherePermissionCategoryParam, order parameter.PermissionCategoryOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.PermissionCategory], error)

	// GetPermissionsFunc mocks the GetPermissions method.
	GetPermissionsFunc func(ctx context.Context, where parameter.WherePermissionParam, order parameter.PermissionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Permission], error)

	// GetPermissionsWithCategoryFunc mocks the GetPermissionsWithCategory method.
	GetPermissionsWithCategoryFunc func(ctx context.Context, where parameter.WherePermissionParam, order parameter.PermissionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.PermissionWithCategory], error)

	// GetPermissionsWithCategoryWithSdFunc mocks the GetPermissionsWithCategoryWithSd method.
	GetPermissionsWithCategoryWithSdFunc func(ctx context.Context, sd Sd, where parameter.WherePermissionParam, order parameter.PermissionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.PermissionWithCategory], error)

	// GetPermissionsWithSdFunc mocks the GetPermissionsWithSd method.
	GetPermissionsWithSdFunc func(ctx context.Context, sd Sd, where parameter.WherePermissionParam, order parameter.PermissionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Permission], error)

	// GetPluralAbsencesFunc mocks the GetPluralAbsences method.
	GetPluralAbsencesFunc func(ctx context.Context, ids []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.Absence], error)

	// GetPluralAbsencesWithSdFunc mocks the GetPluralAbsencesWithSd method.
	GetPluralAbsencesWithSdFunc func(ctx context.Context, sd Sd, ids []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.Absence], error)

	// GetPluralAttendStatusesFunc mocks the GetPluralAttendStatuses method.
	GetPluralAttendStatusesFunc func(ctx context.Context, AttendStatusIDs []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.AttendStatus], error)

	// GetPluralAttendStatusesWithSdFunc mocks the GetPluralAttendStatusesWithSd method.
	GetPluralAttendStatusesWithSdFunc func(ctx context.Context, sd Sd, AttendStatusIDs []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.AttendStatus], error)

	// GetPluralAttendanceTypesFunc mocks the GetPluralAttendanceTypes method.
	GetPluralAttendanceTypesFunc func(ctx context.Context, AttendanceTypeIDs []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.AttendanceType], error)

	// GetPluralAttendanceTypesWithSdFunc mocks the GetPluralAttendanceTypesWithSd method.
	GetPluralAttendanceTypesWithSdFunc func(ctx context.Context, sd Sd, AttendanceTypeIDs []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.AttendanceType], error)

	// GetPluralEventTypesFunc mocks the GetPluralEventTypes method.
	GetPluralEventTypesFunc func(ctx context.Context, EventTypeIDs []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.EventType], error)

	// GetPluralEventTypesWithSdFunc mocks the GetPluralEventTypesWithSd method.
	GetPluralEventTypesWithSdFunc func(ctx context.Context, sd Sd, EventTypeIDs []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.EventType], error)

	// GetPluralMimeTypesFunc mocks the GetPluralMimeTypes method.
	GetPluralMimeTypesFunc func(ctx context.Context, MimeTypeIDs []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.MimeType], error)

	// GetPluralMimeTypesWithSdFunc mocks the GetPluralMimeTypesWithSd method.
	GetPluralMimeTypesWithSdFunc func(ctx context.Context, sd Sd, MimeTypeIDs []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.MimeType], error)

	// GetPluralPermissionCategoriesFunc mocks the GetPluralPermissionCategories method.
	GetPluralPermissionCategoriesFunc func(ctx context.Context, PermissionCategoryIDs []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.PermissionCategory], error)

	// GetPluralPermissionCategoriesWithSdFunc mocks the GetPluralPermissionCategoriesWithSd method.
	GetPluralPermissionCategoriesWithSdFunc func(ctx context.Context, sd Sd, PermissionCategoryIDs []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.PermissionCategory], error)

	// GetPluralPermissionsFunc mocks the GetPluralPermissions method.
	GetPluralPermissionsFunc func(ctx context.Context, PermissionIDs []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.Permission], error)

	// GetPluralPermissionsWithSdFunc mocks the GetPluralPermissionsWithSd method.
	GetPluralPermissionsWithSdFunc func(ctx context.Context, sd Sd, PermissionIDs []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.Permission], error)

	// GetPluralPoliciesFunc mocks the GetPluralPolicies method.
	GetPluralPoliciesFunc func(ctx context.Context, PolicyIDs []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.Policy], error)

	// GetPluralPoliciesWithSdFunc mocks the GetPluralPoliciesWithSd method.
	GetPluralPoliciesWithSdFunc func(ctx context.Context, sd Sd, PolicyIDs []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.Policy], error)

	// GetPluralPolicyCategoriesFunc mocks the GetPluralPolicyCategories method.
	GetPluralPolicyCategoriesFunc func(ctx context.Context, policyCategoryIDs []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.PolicyCategory], error)

	// GetPluralPolicyCategoriesWithSdFunc mocks the GetPluralPolicyCategoriesWithSd method.
	GetPluralPolicyCategoriesWithSdFunc func(ctx context.Context, sd Sd, policyCategoryIDs []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.PolicyCategory], error)

	// GetPluralRecordTypesFunc mocks the GetPluralRecordTypes method.
	GetPluralRecordTypesFunc func(ctx context.Context, RecordTypeIDs []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.RecordType], error)

	// GetPluralRecordTypesWithSdFunc mocks the GetPluralRecordTypesWithSd method.
	GetPluralRecordTypesWithSdFunc func(ctx context.Context, sd Sd, RecordTypeIDs []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.RecordType], error)

	// GetPoliciesFunc mocks the GetPolicies method.
	GetPoliciesFunc func(ctx context.Context, where parameter.WherePolicyParam, order parameter.PolicyOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Policy], error)

	// GetPoliciesWithCategoryFunc mocks the GetPoliciesWithCategory method.
	GetPoliciesWithCategoryFunc func(ctx context.Context, where parameter.WherePolicyParam, order parameter.PolicyOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.PolicyWithCategory], error)

	// GetPoliciesWithCategoryWithSdFunc mocks the GetPoliciesWithCategoryWithSd method.
	GetPoliciesWithCategoryWithSdFunc func(ctx context.Context, sd Sd, where parameter.WherePolicyParam, order parameter.PolicyOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.PolicyWithCategory], error)

	// GetPoliciesWithSdFunc mocks the GetPoliciesWithSd method.
	GetPoliciesWithSdFunc func(ctx context.Context, sd Sd, where parameter.WherePolicyParam, order parameter.PolicyOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Policy], error)

	// GetPolicyCategoriesFunc mocks the GetPolicyCategories method.
	GetPolicyCategoriesFunc func(ctx context.Context, where parameter.WherePolicyCategoryParam, order parameter.PolicyCategoryOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.PolicyCategory], error)

	// GetPolicyCategoriesWithSdFunc mocks the GetPolicyCategoriesWithSd method.
	GetPolicyCategoriesWithSdFunc func(ctx context.Context, sd Sd, where parameter.WherePolicyCategoryParam, order parameter.PolicyCategoryOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.PolicyCategory], error)

	// GetRecordTypesFunc mocks the GetRecordTypes method.
	GetRecordTypesFunc func(ctx context.Context, where parameter.WhereRecordTypeParam, order parameter.RecordTypeOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.RecordType], error)

	// GetRecordTypesWithSdFunc mocks the GetRecordTypesWithSd method.
	GetRecordTypesWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereRecordTypeParam, order parameter.RecordTypeOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.RecordType], error)

	// PluralDeleteAbsencesFunc mocks the PluralDeleteAbsences method.
	PluralDeleteAbsencesFunc func(ctx context.Context, absenceIDs []uuid.UUID) error

	// PluralDeleteAbsencesWithSdFunc mocks the PluralDeleteAbsencesWithSd method.
	PluralDeleteAbsencesWithSdFunc func(ctx context.Context, sd Sd, absenceIDs []uuid.UUID) error

	// PluralDeleteAttendStatusesFunc mocks the PluralDeleteAttendStatuses method.
	PluralDeleteAttendStatusesFunc func(ctx context.Context, attendStatusIDs []uuid.UUID) error

	// PluralDeleteAttendStatusesWithSdFunc mocks the PluralDeleteAttendStatusesWithSd method.
	PluralDeleteAttendStatusesWithSdFunc func(ctx context.Context, sd Sd, attendStatusIDs []uuid.UUID) error

	// PluralDeleteAttendanceTypesFunc mocks the PluralDeleteAttendanceTypes method.
	PluralDeleteAttendanceTypesFunc func(ctx context.Context, attendanceTypeIDs []uuid.UUID) error

	// PluralDeleteAttendanceTypesWithSdFunc mocks the PluralDeleteAttendanceTypesWithSd method.
	PluralDeleteAttendanceTypesWithSdFunc func(ctx context.Context, sd Sd, attendanceTypeIDs []uuid.UUID) error

	// PluralDeleteEventTypesFunc mocks the PluralDeleteEventTypes method.
	PluralDeleteEventTypesFunc func(ctx context.Context, eventTypeIDs []uuid.UUID) error

	// PluralDeleteEventTypesWithSdFunc mocks the PluralDeleteEventTypesWithSd method.
	PluralDeleteEventTypesWithSdFunc func(ctx context.Context, sd Sd, eventTypeIDs []uuid.UUID) error

	// PluralDeleteMimeTypesFunc mocks the PluralDeleteMimeTypes method.
	PluralDeleteMimeTypesFunc func(ctx context.Context, mimeTypeIDs []uuid.UUID) error

	// PluralDeleteMimeTypesWithSdFunc mocks the PluralDeleteMimeTypesWithSd method.
	PluralDeleteMimeTypesWithSdFunc func(ctx context.Context, sd Sd, mimeTypeIDs []uuid.UUID) error

	// PluralDeletePermissionCategoriesFunc mocks the PluralDeletePermissionCategories method.
	PluralDeletePermissionCategoriesFunc func(ctx context.Context, permissionCategoryIDs []uuid.UUID) error

	// PluralDeletePermissionCategoriesWithSdFunc mocks the PluralDeletePermissionCategoriesWithSd method.
	PluralDeletePermissionCategoriesWithSdFunc func(ctx context.Context, sd Sd, permissionCategoryIDs []uuid.UUID) error

	// PluralDeletePermissionsFunc mocks the PluralDeletePermissions method.
	PluralDeletePermissionsFunc func(ctx context.Context, permissionIDs []uuid.UUID) error

	// PluralDeletePermissionsWithSdFunc mocks the PluralDeletePermissionsWithSd method.
	PluralDeletePermissionsWithSdFunc func(ctx context.Context, sd Sd, permissionIDs []uuid.UUID) error

	// PluralDeletePoliciesFunc mocks the PluralDeletePolicies method.
	PluralDeletePoliciesFunc func(ctx context.Context, policyIDs []uuid.UUID) error

	// PluralDeletePoliciesWithSdFunc mocks the PluralDeletePoliciesWithSd method.
	PluralDeletePoliciesWithSdFunc func(ctx context.Context, sd Sd, policyIDs []uuid.UUID) error

	// PluralDeletePolicyCategoriesFunc mocks the PluralDeletePolicyCategories method.
	PluralDeletePolicyCategoriesFunc func(ctx context.Context, policyCategoryIDs []uuid.UUID) error

	// PluralDeletePolicyCategoriesWithSdFunc mocks the PluralDeletePolicyCategoriesWithSd method.
	PluralDeletePolicyCategoriesWithSdFunc func(ctx context.Context, sd Sd, policyCategoryIDs []uuid.UUID) error

	// PluralDeleteRecordTypesFunc mocks the PluralDeleteRecordTypes method.
	PluralDeleteRecordTypesFunc func(ctx context.Context, recordTypeIDs []uuid.UUID) error

	// PluralDeleteRecordTypesWithSdFunc mocks the PluralDeleteRecordTypesWithSd method.
	PluralDeleteRecordTypesWithSdFunc func(ctx context.Context, sd Sd, recordTypeIDs []uuid.UUID) error

	// RollbackFunc mocks the Rollback method.
	RollbackFunc func(contextMoqParam context.Context, sd Sd) error

	// UpdateAttendStatusFunc mocks the UpdateAttendStatus method.
	UpdateAttendStatusFunc func(ctx context.Context, attendStatusID uuid.UUID, param parameter.UpdateAttendStatusParams) (entity.AttendStatus, error)

	// UpdateAttendStatusByKeyFunc mocks the UpdateAttendStatusByKey method.
	UpdateAttendStatusByKeyFunc func(ctx context.Context, key string, param parameter.UpdateAttendStatusByKeyParams) (entity.AttendStatus, error)

	// UpdateAttendStatusByKeyWithSdFunc mocks the UpdateAttendStatusByKeyWithSd method.
	UpdateAttendStatusByKeyWithSdFunc func(ctx context.Context, sd Sd, key string, param parameter.UpdateAttendStatusByKeyParams) (entity.AttendStatus, error)

	// UpdateAttendStatusWithSdFunc mocks the UpdateAttendStatusWithSd method.
	UpdateAttendStatusWithSdFunc func(ctx context.Context, sd Sd, attendStatusID uuid.UUID, param parameter.UpdateAttendStatusParams) (entity.AttendStatus, error)

	// UpdateAttendanceTypeFunc mocks the UpdateAttendanceType method.
	UpdateAttendanceTypeFunc func(ctx context.Context, attendanceTypeID uuid.UUID, param parameter.UpdateAttendanceTypeParams) (entity.AttendanceType, error)

	// UpdateAttendanceTypeByKeyFunc mocks the UpdateAttendanceTypeByKey method.
	UpdateAttendanceTypeByKeyFunc func(ctx context.Context, key string, param parameter.UpdateAttendanceTypeByKeyParams) (entity.AttendanceType, error)

	// UpdateAttendanceTypeByKeyWithSdFunc mocks the UpdateAttendanceTypeByKeyWithSd method.
	UpdateAttendanceTypeByKeyWithSdFunc func(ctx context.Context, sd Sd, key string, param parameter.UpdateAttendanceTypeByKeyParams) (entity.AttendanceType, error)

	// UpdateAttendanceTypeWithSdFunc mocks the UpdateAttendanceTypeWithSd method.
	UpdateAttendanceTypeWithSdFunc func(ctx context.Context, sd Sd, attendanceTypeID uuid.UUID, param parameter.UpdateAttendanceTypeParams) (entity.AttendanceType, error)

	// UpdateEventTypeFunc mocks the UpdateEventType method.
	UpdateEventTypeFunc func(ctx context.Context, eventTypeID uuid.UUID, param parameter.UpdateEventTypeParams) (entity.EventType, error)

	// UpdateEventTypeByKeyFunc mocks the UpdateEventTypeByKey method.
	UpdateEventTypeByKeyFunc func(ctx context.Context, key string, param parameter.UpdateEventTypeByKeyParams) (entity.EventType, error)

	// UpdateEventTypeByKeyWithSdFunc mocks the UpdateEventTypeByKeyWithSd method.
	UpdateEventTypeByKeyWithSdFunc func(ctx context.Context, sd Sd, key string, param parameter.UpdateEventTypeByKeyParams) (entity.EventType, error)

	// UpdateEventTypeWithSdFunc mocks the UpdateEventTypeWithSd method.
	UpdateEventTypeWithSdFunc func(ctx context.Context, sd Sd, eventTypeID uuid.UUID, param parameter.UpdateEventTypeParams) (entity.EventType, error)

	// UpdateMimeTypeFunc mocks the UpdateMimeType method.
	UpdateMimeTypeFunc func(ctx context.Context, mimeTypeID uuid.UUID, param parameter.UpdateMimeTypeParams) (entity.MimeType, error)

	// UpdateMimeTypeByKeyFunc mocks the UpdateMimeTypeByKey method.
	UpdateMimeTypeByKeyFunc func(ctx context.Context, key string, param parameter.UpdateMimeTypeByKeyParams) (entity.MimeType, error)

	// UpdateMimeTypeByKeyWithSdFunc mocks the UpdateMimeTypeByKeyWithSd method.
	UpdateMimeTypeByKeyWithSdFunc func(ctx context.Context, sd Sd, key string, param parameter.UpdateMimeTypeByKeyParams) (entity.MimeType, error)

	// UpdateMimeTypeWithSdFunc mocks the UpdateMimeTypeWithSd method.
	UpdateMimeTypeWithSdFunc func(ctx context.Context, sd Sd, mimeTypeID uuid.UUID, param parameter.UpdateMimeTypeParams) (entity.MimeType, error)

	// UpdatePermissionFunc mocks the UpdatePermission method.
	UpdatePermissionFunc func(ctx context.Context, permissionID uuid.UUID, param parameter.UpdatePermissionParams) (entity.Permission, error)

	// UpdatePermissionByKeyFunc mocks the UpdatePermissionByKey method.
	UpdatePermissionByKeyFunc func(ctx context.Context, key string, param parameter.UpdatePermissionByKeyParams) (entity.Permission, error)

	// UpdatePermissionByKeyWithSdFunc mocks the UpdatePermissionByKeyWithSd method.
	UpdatePermissionByKeyWithSdFunc func(ctx context.Context, sd Sd, key string, param parameter.UpdatePermissionByKeyParams) (entity.Permission, error)

	// UpdatePermissionCategoryFunc mocks the UpdatePermissionCategory method.
	UpdatePermissionCategoryFunc func(ctx context.Context, permissionCategoryID uuid.UUID, param parameter.UpdatePermissionCategoryParams) (entity.PermissionCategory, error)

	// UpdatePermissionCategoryByKeyFunc mocks the UpdatePermissionCategoryByKey method.
	UpdatePermissionCategoryByKeyFunc func(ctx context.Context, key string, param parameter.UpdatePermissionCategoryByKeyParams) (entity.PermissionCategory, error)

	// UpdatePermissionCategoryByKeyWithSdFunc mocks the UpdatePermissionCategoryByKeyWithSd method.
	UpdatePermissionCategoryByKeyWithSdFunc func(ctx context.Context, sd Sd, key string, param parameter.UpdatePermissionCategoryByKeyParams) (entity.PermissionCategory, error)

	// UpdatePermissionCategoryWithSdFunc mocks the UpdatePermissionCategoryWithSd method.
	UpdatePermissionCategoryWithSdFunc func(ctx context.Context, sd Sd, permissionCategoryID uuid.UUID, param parameter.UpdatePermissionCategoryParams) (entity.PermissionCategory, error)

	// UpdatePermissionWithSdFunc mocks the UpdatePermissionWithSd method.
	UpdatePermissionWithSdFunc func(ctx context.Context, sd Sd, permissionID uuid.UUID, param parameter.UpdatePermissionParams) (entity.Permission, error)

	// UpdatePolicyFunc mocks the UpdatePolicy method.
	UpdatePolicyFunc func(ctx context.Context, policyID uuid.UUID, param parameter.UpdatePolicyParams) (entity.Policy, error)

	// UpdatePolicyByKeyFunc mocks the UpdatePolicyByKey method.
	UpdatePolicyByKeyFunc func(ctx context.Context, key string, param parameter.UpdatePolicyByKeyParams) (entity.Policy, error)

	// UpdatePolicyByKeyWithSdFunc mocks the UpdatePolicyByKeyWithSd method.
	UpdatePolicyByKeyWithSdFunc func(ctx context.Context, sd Sd, key string, param parameter.UpdatePolicyByKeyParams) (entity.Policy, error)

	// UpdatePolicyCategoryFunc mocks the UpdatePolicyCategory method.
	UpdatePolicyCategoryFunc func(ctx context.Context, policyCategoryID uuid.UUID, param parameter.UpdatePolicyCategoryParams) (entity.PolicyCategory, error)

	// UpdatePolicyCategoryByKeyFunc mocks the UpdatePolicyCategoryByKey method.
	UpdatePolicyCategoryByKeyFunc func(ctx context.Context, key string, param parameter.UpdatePolicyCategoryByKeyParams) (entity.PolicyCategory, error)

	// UpdatePolicyCategoryByKeyWithSdFunc mocks the UpdatePolicyCategoryByKeyWithSd method.
	UpdatePolicyCategoryByKeyWithSdFunc func(ctx context.Context, sd Sd, key string, param parameter.UpdatePolicyCategoryByKeyParams) (entity.PolicyCategory, error)

	// UpdatePolicyCategoryWithSdFunc mocks the UpdatePolicyCategoryWithSd method.
	UpdatePolicyCategoryWithSdFunc func(ctx context.Context, sd Sd, policyCategoryID uuid.UUID, param parameter.UpdatePolicyCategoryParams) (entity.PolicyCategory, error)

	// UpdatePolicyWithSdFunc mocks the UpdatePolicyWithSd method.
	UpdatePolicyWithSdFunc func(ctx context.Context, sd Sd, policyID uuid.UUID, param parameter.UpdatePolicyParams) (entity.Policy, error)

	// UpdateRecordTypeFunc mocks the UpdateRecordType method.
	UpdateRecordTypeFunc func(ctx context.Context, recordTypeID uuid.UUID, param parameter.UpdateRecordTypeParams) (entity.RecordType, error)

	// UpdateRecordTypeByKeyFunc mocks the UpdateRecordTypeByKey method.
	UpdateRecordTypeByKeyFunc func(ctx context.Context, key string, param parameter.UpdateRecordTypeByKeyParams) (entity.RecordType, error)

	// UpdateRecordTypeByKeyWithSdFunc mocks the UpdateRecordTypeByKeyWithSd method.
	UpdateRecordTypeByKeyWithSdFunc func(ctx context.Context, sd Sd, key string, param parameter.UpdateRecordTypeByKeyParams) (entity.RecordType, error)

	// UpdateRecordTypeWithSdFunc mocks the UpdateRecordTypeWithSd method.
	UpdateRecordTypeWithSdFunc func(ctx context.Context, sd Sd, recordTypeID uuid.UUID, param parameter.UpdateRecordTypeParams) (entity.RecordType, error)

	// calls tracks calls to the methods.
	calls struct {
		// Begin holds details about calls to the Begin method.
		Begin []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
		}
		// Cleanup holds details about calls to the Cleanup method.
		Cleanup []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
		}
		// Commit holds details about calls to the Commit method.
		Commit []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// Sd is the sd argument value.
			Sd Sd
		}
		// CountAbsences holds details about calls to the CountAbsences method.
		CountAbsences []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// CountAbsencesWithSd holds details about calls to the CountAbsencesWithSd method.
		CountAbsencesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
		}
		// CountAttendStatuses holds details about calls to the CountAttendStatuses method.
		CountAttendStatuses []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereAttendStatusParam
		}
		// CountAttendStatusesWithSd holds details about calls to the CountAttendStatusesWithSd method.
		CountAttendStatusesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereAttendStatusParam
		}
		// CountAttendanceTypes holds details about calls to the CountAttendanceTypes method.
		CountAttendanceTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereAttendanceTypeParam
		}
		// CountAttendanceTypesWithSd holds details about calls to the CountAttendanceTypesWithSd method.
		CountAttendanceTypesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereAttendanceTypeParam
		}
		// CountEventTypes holds details about calls to the CountEventTypes method.
		CountEventTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereEventTypeParam
		}
		// CountEventTypesWithSd holds details about calls to the CountEventTypesWithSd method.
		CountEventTypesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereEventTypeParam
		}
		// CountMimeTypes holds details about calls to the CountMimeTypes method.
		CountMimeTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereMimeTypeParam
		}
		// CountMimeTypesWithSd holds details about calls to the CountMimeTypesWithSd method.
		CountMimeTypesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereMimeTypeParam
		}
		// CountPermissionCategories holds details about calls to the CountPermissionCategories method.
		CountPermissionCategories []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WherePermissionCategoryParam
		}
		// CountPermissionCategoriesWithSd holds details about calls to the CountPermissionCategoriesWithSd method.
		CountPermissionCategoriesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WherePermissionCategoryParam
		}
		// CountPermissions holds details about calls to the CountPermissions method.
		CountPermissions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WherePermissionParam
		}
		// CountPermissionsWithSd holds details about calls to the CountPermissionsWithSd method.
		CountPermissionsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WherePermissionParam
		}
		// CountPolicies holds details about calls to the CountPolicies method.
		CountPolicies []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WherePolicyParam
		}
		// CountPoliciesWithSd holds details about calls to the CountPoliciesWithSd method.
		CountPoliciesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WherePolicyParam
		}
		// CountPolicyCategories holds details about calls to the CountPolicyCategories method.
		CountPolicyCategories []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WherePolicyCategoryParam
		}
		// CountPolicyCategoriesWithSd holds details about calls to the CountPolicyCategoriesWithSd method.
		CountPolicyCategoriesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WherePolicyCategoryParam
		}
		// CountRecordTypes holds details about calls to the CountRecordTypes method.
		CountRecordTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereRecordTypeParam
		}
		// CountRecordTypesWithSd holds details about calls to the CountRecordTypesWithSd method.
		CountRecordTypesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereRecordTypeParam
		}
		// CreateAbsence holds details about calls to the CreateAbsence method.
		CreateAbsence []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Param is the param argument value.
			Param parameter.CreateAbsenceParam
		}
		// CreateAbsenceWithSd holds details about calls to the CreateAbsenceWithSd method.
		CreateAbsenceWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Param is the param argument value.
			Param parameter.CreateAbsenceParam
		}
		// CreateAbsences holds details about calls to the CreateAbsences method.
		CreateAbsences []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params []parameter.CreateAbsenceParam
		}
		// CreateAbsencesWithSd holds details about calls to the CreateAbsencesWithSd method.
		CreateAbsencesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Params is the params argument value.
			Params []parameter.CreateAbsenceParam
		}
		// CreateAttendStatus holds details about calls to the CreateAttendStatus method.
		CreateAttendStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Param is the param argument value.
			Param parameter.CreateAttendStatusParam
		}
		// CreateAttendStatusWithSd holds details about calls to the CreateAttendStatusWithSd method.
		CreateAttendStatusWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Param is the param argument value.
			Param parameter.CreateAttendStatusParam
		}
		// CreateAttendStatuses holds details about calls to the CreateAttendStatuses method.
		CreateAttendStatuses []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params []parameter.CreateAttendStatusParam
		}
		// CreateAttendStatusesWithSd holds details about calls to the CreateAttendStatusesWithSd method.
		CreateAttendStatusesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Params is the params argument value.
			Params []parameter.CreateAttendStatusParam
		}
		// CreateAttendanceType holds details about calls to the CreateAttendanceType method.
		CreateAttendanceType []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Param is the param argument value.
			Param parameter.CreateAttendanceTypeParam
		}
		// CreateAttendanceTypeWithSd holds details about calls to the CreateAttendanceTypeWithSd method.
		CreateAttendanceTypeWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Param is the param argument value.
			Param parameter.CreateAttendanceTypeParam
		}
		// CreateAttendanceTypes holds details about calls to the CreateAttendanceTypes method.
		CreateAttendanceTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params []parameter.CreateAttendanceTypeParam
		}
		// CreateAttendanceTypesWithSd holds details about calls to the CreateAttendanceTypesWithSd method.
		CreateAttendanceTypesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Params is the params argument value.
			Params []parameter.CreateAttendanceTypeParam
		}
		// CreateEventType holds details about calls to the CreateEventType method.
		CreateEventType []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Param is the param argument value.
			Param parameter.CreateEventTypeParam
		}
		// CreateEventTypeWithSd holds details about calls to the CreateEventTypeWithSd method.
		CreateEventTypeWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Param is the param argument value.
			Param parameter.CreateEventTypeParam
		}
		// CreateEventTypes holds details about calls to the CreateEventTypes method.
		CreateEventTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params []parameter.CreateEventTypeParam
		}
		// CreateEventTypesWithSd holds details about calls to the CreateEventTypesWithSd method.
		CreateEventTypesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Params is the params argument value.
			Params []parameter.CreateEventTypeParam
		}
		// CreateMimeType holds details about calls to the CreateMimeType method.
		CreateMimeType []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Param is the param argument value.
			Param parameter.CreateMimeTypeParam
		}
		// CreateMimeTypeWithSd holds details about calls to the CreateMimeTypeWithSd method.
		CreateMimeTypeWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Param is the param argument value.
			Param parameter.CreateMimeTypeParam
		}
		// CreateMimeTypes holds details about calls to the CreateMimeTypes method.
		CreateMimeTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params []parameter.CreateMimeTypeParam
		}
		// CreateMimeTypesWithSd holds details about calls to the CreateMimeTypesWithSd method.
		CreateMimeTypesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Params is the params argument value.
			Params []parameter.CreateMimeTypeParam
		}
		// CreatePermission holds details about calls to the CreatePermission method.
		CreatePermission []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Param is the param argument value.
			Param parameter.CreatePermissionParam
		}
		// CreatePermissionCategories holds details about calls to the CreatePermissionCategories method.
		CreatePermissionCategories []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params []parameter.CreatePermissionCategoryParam
		}
		// CreatePermissionCategoriesWithSd holds details about calls to the CreatePermissionCategoriesWithSd method.
		CreatePermissionCategoriesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Params is the params argument value.
			Params []parameter.CreatePermissionCategoryParam
		}
		// CreatePermissionCategory holds details about calls to the CreatePermissionCategory method.
		CreatePermissionCategory []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Param is the param argument value.
			Param parameter.CreatePermissionCategoryParam
		}
		// CreatePermissionCategoryWithSd holds details about calls to the CreatePermissionCategoryWithSd method.
		CreatePermissionCategoryWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Param is the param argument value.
			Param parameter.CreatePermissionCategoryParam
		}
		// CreatePermissionWithSd holds details about calls to the CreatePermissionWithSd method.
		CreatePermissionWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Param is the param argument value.
			Param parameter.CreatePermissionParam
		}
		// CreatePermissions holds details about calls to the CreatePermissions method.
		CreatePermissions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params []parameter.CreatePermissionParam
		}
		// CreatePermissionsWithSd holds details about calls to the CreatePermissionsWithSd method.
		CreatePermissionsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Params is the params argument value.
			Params []parameter.CreatePermissionParam
		}
		// CreatePolicies holds details about calls to the CreatePolicies method.
		CreatePolicies []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params []parameter.CreatePolicyParam
		}
		// CreatePoliciesWithSd holds details about calls to the CreatePoliciesWithSd method.
		CreatePoliciesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Params is the params argument value.
			Params []parameter.CreatePolicyParam
		}
		// CreatePolicy holds details about calls to the CreatePolicy method.
		CreatePolicy []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Param is the param argument value.
			Param parameter.CreatePolicyParam
		}
		// CreatePolicyCategories holds details about calls to the CreatePolicyCategories method.
		CreatePolicyCategories []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params []parameter.CreatePolicyCategoryParam
		}
		// CreatePolicyCategoriesWithSd holds details about calls to the CreatePolicyCategoriesWithSd method.
		CreatePolicyCategoriesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Params is the params argument value.
			Params []parameter.CreatePolicyCategoryParam
		}
		// CreatePolicyCategory holds details about calls to the CreatePolicyCategory method.
		CreatePolicyCategory []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Param is the param argument value.
			Param parameter.CreatePolicyCategoryParam
		}
		// CreatePolicyCategoryWithSd holds details about calls to the CreatePolicyCategoryWithSd method.
		CreatePolicyCategoryWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Param is the param argument value.
			Param parameter.CreatePolicyCategoryParam
		}
		// CreatePolicyWithSd holds details about calls to the CreatePolicyWithSd method.
		CreatePolicyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Param is the param argument value.
			Param parameter.CreatePolicyParam
		}
		// CreateRecordType holds details about calls to the CreateRecordType method.
		CreateRecordType []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Param is the param argument value.
			Param parameter.CreateRecordTypeParam
		}
		// CreateRecordTypeWithSd holds details about calls to the CreateRecordTypeWithSd method.
		CreateRecordTypeWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Param is the param argument value.
			Param parameter.CreateRecordTypeParam
		}
		// CreateRecordTypes holds details about calls to the CreateRecordTypes method.
		CreateRecordTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params []parameter.CreateRecordTypeParam
		}
		// CreateRecordTypesWithSd holds details about calls to the CreateRecordTypesWithSd method.
		CreateRecordTypesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Params is the params argument value.
			Params []parameter.CreateRecordTypeParam
		}
		// DeleteAbsence holds details about calls to the DeleteAbsence method.
		DeleteAbsence []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AbsenceID is the absenceID argument value.
			AbsenceID uuid.UUID
		}
		// DeleteAbsenceWithSd holds details about calls to the DeleteAbsenceWithSd method.
		DeleteAbsenceWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// AbsenceID is the absenceID argument value.
			AbsenceID uuid.UUID
		}
		// DeleteAttendStatus holds details about calls to the DeleteAttendStatus method.
		DeleteAttendStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AttendStatusID is the attendStatusID argument value.
			AttendStatusID uuid.UUID
		}
		// DeleteAttendStatusByKey holds details about calls to the DeleteAttendStatusByKey method.
		DeleteAttendStatusByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// DeleteAttendStatusByKeyWithSd holds details about calls to the DeleteAttendStatusByKeyWithSd method.
		DeleteAttendStatusByKeyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Key is the key argument value.
			Key string
		}
		// DeleteAttendStatusWithSd holds details about calls to the DeleteAttendStatusWithSd method.
		DeleteAttendStatusWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// AttendStatusID is the attendStatusID argument value.
			AttendStatusID uuid.UUID
		}
		// DeleteAttendanceType holds details about calls to the DeleteAttendanceType method.
		DeleteAttendanceType []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AttendanceTypeID is the attendanceTypeID argument value.
			AttendanceTypeID uuid.UUID
		}
		// DeleteAttendanceTypeByKey holds details about calls to the DeleteAttendanceTypeByKey method.
		DeleteAttendanceTypeByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// DeleteAttendanceTypeByKeyWithSd holds details about calls to the DeleteAttendanceTypeByKeyWithSd method.
		DeleteAttendanceTypeByKeyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Key is the key argument value.
			Key string
		}
		// DeleteAttendanceTypeWithSd holds details about calls to the DeleteAttendanceTypeWithSd method.
		DeleteAttendanceTypeWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// AttendanceTypeID is the attendanceTypeID argument value.
			AttendanceTypeID uuid.UUID
		}
		// DeleteEventType holds details about calls to the DeleteEventType method.
		DeleteEventType []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// EventTypeID is the eventTypeID argument value.
			EventTypeID uuid.UUID
		}
		// DeleteEventTypeByKey holds details about calls to the DeleteEventTypeByKey method.
		DeleteEventTypeByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// DeleteEventTypeByKeyWithSd holds details about calls to the DeleteEventTypeByKeyWithSd method.
		DeleteEventTypeByKeyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Key is the key argument value.
			Key string
		}
		// DeleteEventTypeWithSd holds details about calls to the DeleteEventTypeWithSd method.
		DeleteEventTypeWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// EventTypeID is the eventTypeID argument value.
			EventTypeID uuid.UUID
		}
		// DeleteMimeType holds details about calls to the DeleteMimeType method.
		DeleteMimeType []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MimeTypeID is the mimeTypeID argument value.
			MimeTypeID uuid.UUID
		}
		// DeleteMimeTypeByKey holds details about calls to the DeleteMimeTypeByKey method.
		DeleteMimeTypeByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// DeleteMimeTypeByKeyWithSd holds details about calls to the DeleteMimeTypeByKeyWithSd method.
		DeleteMimeTypeByKeyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Key is the key argument value.
			Key string
		}
		// DeleteMimeTypeWithSd holds details about calls to the DeleteMimeTypeWithSd method.
		DeleteMimeTypeWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MimeTypeID is the mimeTypeID argument value.
			MimeTypeID uuid.UUID
		}
		// DeletePermission holds details about calls to the DeletePermission method.
		DeletePermission []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PermissionID is the permissionID argument value.
			PermissionID uuid.UUID
		}
		// DeletePermissionByKey holds details about calls to the DeletePermissionByKey method.
		DeletePermissionByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// DeletePermissionByKeyWithSd holds details about calls to the DeletePermissionByKeyWithSd method.
		DeletePermissionByKeyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Key is the key argument value.
			Key string
		}
		// DeletePermissionCategory holds details about calls to the DeletePermissionCategory method.
		DeletePermissionCategory []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PermissionCategoryID is the permissionCategoryID argument value.
			PermissionCategoryID uuid.UUID
		}
		// DeletePermissionCategoryByKey holds details about calls to the DeletePermissionCategoryByKey method.
		DeletePermissionCategoryByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// DeletePermissionCategoryByKeyWithSd holds details about calls to the DeletePermissionCategoryByKeyWithSd method.
		DeletePermissionCategoryByKeyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Key is the key argument value.
			Key string
		}
		// DeletePermissionCategoryWithSd holds details about calls to the DeletePermissionCategoryWithSd method.
		DeletePermissionCategoryWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// PermissionCategoryID is the permissionCategoryID argument value.
			PermissionCategoryID uuid.UUID
		}
		// DeletePermissionWithSd holds details about calls to the DeletePermissionWithSd method.
		DeletePermissionWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// PermissionID is the permissionID argument value.
			PermissionID uuid.UUID
		}
		// DeletePolicy holds details about calls to the DeletePolicy method.
		DeletePolicy []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PolicyID is the policyID argument value.
			PolicyID uuid.UUID
		}
		// DeletePolicyByKey holds details about calls to the DeletePolicyByKey method.
		DeletePolicyByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// DeletePolicyByKeyWithSd holds details about calls to the DeletePolicyByKeyWithSd method.
		DeletePolicyByKeyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Key is the key argument value.
			Key string
		}
		// DeletePolicyCategory holds details about calls to the DeletePolicyCategory method.
		DeletePolicyCategory []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PolicyCategoryID is the policyCategoryID argument value.
			PolicyCategoryID uuid.UUID
		}
		// DeletePolicyCategoryByKey holds details about calls to the DeletePolicyCategoryByKey method.
		DeletePolicyCategoryByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// DeletePolicyCategoryByKeyWithSd holds details about calls to the DeletePolicyCategoryByKeyWithSd method.
		DeletePolicyCategoryByKeyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Key is the key argument value.
			Key string
		}
		// DeletePolicyCategoryWithSd holds details about calls to the DeletePolicyCategoryWithSd method.
		DeletePolicyCategoryWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// PolicyCategoryID is the policyCategoryID argument value.
			PolicyCategoryID uuid.UUID
		}
		// DeletePolicyWithSd holds details about calls to the DeletePolicyWithSd method.
		DeletePolicyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// PolicyID is the policyID argument value.
			PolicyID uuid.UUID
		}
		// DeleteRecordType holds details about calls to the DeleteRecordType method.
		DeleteRecordType []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// RecordTypeID is the recordTypeID argument value.
			RecordTypeID uuid.UUID
		}
		// DeleteRecordTypeByKey holds details about calls to the DeleteRecordTypeByKey method.
		DeleteRecordTypeByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// DeleteRecordTypeByKeyWithSd holds details about calls to the DeleteRecordTypeByKeyWithSd method.
		DeleteRecordTypeByKeyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Key is the key argument value.
			Key string
		}
		// DeleteRecordTypeWithSd holds details about calls to the DeleteRecordTypeWithSd method.
		DeleteRecordTypeWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// RecordTypeID is the recordTypeID argument value.
			RecordTypeID uuid.UUID
		}
		// FindAbsenceByID holds details about calls to the FindAbsenceByID method.
		FindAbsenceByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AbsenceID is the absenceID argument value.
			AbsenceID uuid.UUID
		}
		// FindAbsenceByIDWithSd holds details about calls to the FindAbsenceByIDWithSd method.
		FindAbsenceByIDWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// AbsenceID is the absenceID argument value.
			AbsenceID uuid.UUID
		}
		// FindAttendStatusByID holds details about calls to the FindAttendStatusByID method.
		FindAttendStatusByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AttendStatusID is the attendStatusID argument value.
			AttendStatusID uuid.UUID
		}
		// FindAttendStatusByIDWithSd holds details about calls to the FindAttendStatusByIDWithSd method.
		FindAttendStatusByIDWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// AttendStatusID is the attendStatusID argument value.
			AttendStatusID uuid.UUID
		}
		// FindAttendStatusByKey holds details about calls to the FindAttendStatusByKey method.
		FindAttendStatusByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// FindAttendStatusByKeyWithSd holds details about calls to the FindAttendStatusByKeyWithSd method.
		FindAttendStatusByKeyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Key is the key argument value.
			Key string
		}
		// FindAttendanceTypeByID holds details about calls to the FindAttendanceTypeByID method.
		FindAttendanceTypeByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AttendanceTypeID is the attendanceTypeID argument value.
			AttendanceTypeID uuid.UUID
		}
		// FindAttendanceTypeByIDWithSd holds details about calls to the FindAttendanceTypeByIDWithSd method.
		FindAttendanceTypeByIDWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// AttendanceTypeID is the attendanceTypeID argument value.
			AttendanceTypeID uuid.UUID
		}
		// FindAttendanceTypeByKey holds details about calls to the FindAttendanceTypeByKey method.
		FindAttendanceTypeByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// FindAttendanceTypeByKeyWithSd holds details about calls to the FindAttendanceTypeByKeyWithSd method.
		FindAttendanceTypeByKeyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Key is the key argument value.
			Key string
		}
		// FindEventTypeByID holds details about calls to the FindEventTypeByID method.
		FindEventTypeByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// EventTypeID is the eventTypeID argument value.
			EventTypeID uuid.UUID
		}
		// FindEventTypeByIDWithSd holds details about calls to the FindEventTypeByIDWithSd method.
		FindEventTypeByIDWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// EventTypeID is the eventTypeID argument value.
			EventTypeID uuid.UUID
		}
		// FindEventTypeByKey holds details about calls to the FindEventTypeByKey method.
		FindEventTypeByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// FindEventTypeByKeyWithSd holds details about calls to the FindEventTypeByKeyWithSd method.
		FindEventTypeByKeyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Key is the key argument value.
			Key string
		}
		// FindMimeTypeByID holds details about calls to the FindMimeTypeByID method.
		FindMimeTypeByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MimeTypeID is the mimeTypeID argument value.
			MimeTypeID uuid.UUID
		}
		// FindMimeTypeByIDWithSd holds details about calls to the FindMimeTypeByIDWithSd method.
		FindMimeTypeByIDWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MimeTypeID is the mimeTypeID argument value.
			MimeTypeID uuid.UUID
		}
		// FindMimeTypeByKey holds details about calls to the FindMimeTypeByKey method.
		FindMimeTypeByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// FindMimeTypeByKeyWithSd holds details about calls to the FindMimeTypeByKeyWithSd method.
		FindMimeTypeByKeyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Key is the key argument value.
			Key string
		}
		// FindPermissionByID holds details about calls to the FindPermissionByID method.
		FindPermissionByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PermissionID is the permissionID argument value.
			PermissionID uuid.UUID
		}
		// FindPermissionByIDWithCategory holds details about calls to the FindPermissionByIDWithCategory method.
		FindPermissionByIDWithCategory []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PermissionID is the permissionID argument value.
			PermissionID uuid.UUID
		}
		// FindPermissionByIDWithCategoryWithSd holds details about calls to the FindPermissionByIDWithCategoryWithSd method.
		FindPermissionByIDWithCategoryWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// PermissionID is the permissionID argument value.
			PermissionID uuid.UUID
		}
		// FindPermissionByIDWithSd holds details about calls to the FindPermissionByIDWithSd method.
		FindPermissionByIDWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// PermissionID is the permissionID argument value.
			PermissionID uuid.UUID
		}
		// FindPermissionByKey holds details about calls to the FindPermissionByKey method.
		FindPermissionByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// FindPermissionByKeyWithCategory holds details about calls to the FindPermissionByKeyWithCategory method.
		FindPermissionByKeyWithCategory []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// FindPermissionByKeyWithCategoryWithSd holds details about calls to the FindPermissionByKeyWithCategoryWithSd method.
		FindPermissionByKeyWithCategoryWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Key is the key argument value.
			Key string
		}
		// FindPermissionByKeyWithSd holds details about calls to the FindPermissionByKeyWithSd method.
		FindPermissionByKeyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Key is the key argument value.
			Key string
		}
		// FindPermissionCategoryByID holds details about calls to the FindPermissionCategoryByID method.
		FindPermissionCategoryByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PermissionCategoryID is the permissionCategoryID argument value.
			PermissionCategoryID uuid.UUID
		}
		// FindPermissionCategoryByIDWithSd holds details about calls to the FindPermissionCategoryByIDWithSd method.
		FindPermissionCategoryByIDWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// PermissionCategoryID is the permissionCategoryID argument value.
			PermissionCategoryID uuid.UUID
		}
		// FindPermissionCategoryByKey holds details about calls to the FindPermissionCategoryByKey method.
		FindPermissionCategoryByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// FindPermissionCategoryByKeyWithSd holds details about calls to the FindPermissionCategoryByKeyWithSd method.
		FindPermissionCategoryByKeyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Key is the key argument value.
			Key string
		}
		// FindPolicyByID holds details about calls to the FindPolicyByID method.
		FindPolicyByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PolicyID is the policyID argument value.
			PolicyID uuid.UUID
		}
		// FindPolicyByIDWithCategory holds details about calls to the FindPolicyByIDWithCategory method.
		FindPolicyByIDWithCategory []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PolicyID is the policyID argument value.
			PolicyID uuid.UUID
		}
		// FindPolicyByIDWithCategoryWithSd holds details about calls to the FindPolicyByIDWithCategoryWithSd method.
		FindPolicyByIDWithCategoryWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// PolicyID is the policyID argument value.
			PolicyID uuid.UUID
		}
		// FindPolicyByIDWithSd holds details about calls to the FindPolicyByIDWithSd method.
		FindPolicyByIDWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// PolicyID is the policyID argument value.
			PolicyID uuid.UUID
		}
		// FindPolicyByKey holds details about calls to the FindPolicyByKey method.
		FindPolicyByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// FindPolicyByKeyWithCategory holds details about calls to the FindPolicyByKeyWithCategory method.
		FindPolicyByKeyWithCategory []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// FindPolicyByKeyWithCategoryWithSd holds details about calls to the FindPolicyByKeyWithCategoryWithSd method.
		FindPolicyByKeyWithCategoryWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Key is the key argument value.
			Key string
		}
		// FindPolicyByKeyWithSd holds details about calls to the FindPolicyByKeyWithSd method.
		FindPolicyByKeyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Key is the key argument value.
			Key string
		}
		// FindPolicyCategoryByID holds details about calls to the FindPolicyCategoryByID method.
		FindPolicyCategoryByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PolicyCategoryID is the policyCategoryID argument value.
			PolicyCategoryID uuid.UUID
		}
		// FindPolicyCategoryByIDWithSd holds details about calls to the FindPolicyCategoryByIDWithSd method.
		FindPolicyCategoryByIDWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// PolicyCategoryID is the policyCategoryID argument value.
			PolicyCategoryID uuid.UUID
		}
		// FindPolicyCategoryByKey holds details about calls to the FindPolicyCategoryByKey method.
		FindPolicyCategoryByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// FindPolicyCategoryByKeyWithSd holds details about calls to the FindPolicyCategoryByKeyWithSd method.
		FindPolicyCategoryByKeyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Key is the key argument value.
			Key string
		}
		// FindRecordTypeByID holds details about calls to the FindRecordTypeByID method.
		FindRecordTypeByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// RecordTypeID is the recordTypeID argument value.
			RecordTypeID uuid.UUID
		}
		// FindRecordTypeByIDWithSd holds details about calls to the FindRecordTypeByIDWithSd method.
		FindRecordTypeByIDWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// RecordTypeID is the recordTypeID argument value.
			RecordTypeID uuid.UUID
		}
		// FindRecordTypeByKey holds details about calls to the FindRecordTypeByKey method.
		FindRecordTypeByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// FindRecordTypeByKeyWithSd holds details about calls to the FindRecordTypeByKeyWithSd method.
		FindRecordTypeByKeyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Key is the key argument value.
			Key string
		}
		// GetAbsences holds details about calls to the GetAbsences method.
		GetAbsences []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Order is the order argument value.
			Order parameter.AbsenceOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetAbsencesWithSd holds details about calls to the GetAbsencesWithSd method.
		GetAbsencesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Order is the order argument value.
			Order parameter.AbsenceOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetAttendStatuses holds details about calls to the GetAttendStatuses method.
		GetAttendStatuses []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereAttendStatusParam
			// Order is the order argument value.
			Order parameter.AttendStatusOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetAttendStatusesWithSd holds details about calls to the GetAttendStatusesWithSd method.
		GetAttendStatusesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereAttendStatusParam
			// Order is the order argument value.
			Order parameter.AttendStatusOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetAttendanceTypes holds details about calls to the GetAttendanceTypes method.
		GetAttendanceTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereAttendanceTypeParam
			// Order is the order argument value.
			Order parameter.AttendanceTypeOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetAttendanceTypesWithSd holds details about calls to the GetAttendanceTypesWithSd method.
		GetAttendanceTypesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereAttendanceTypeParam
			// Order is the order argument value.
			Order parameter.AttendanceTypeOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetEventTypes holds details about calls to the GetEventTypes method.
		GetEventTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereEventTypeParam
			// Order is the order argument value.
			Order parameter.EventTypeOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetEventTypesWithSd holds details about calls to the GetEventTypesWithSd method.
		GetEventTypesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereEventTypeParam
			// Order is the order argument value.
			Order parameter.EventTypeOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetMimeTypes holds details about calls to the GetMimeTypes method.
		GetMimeTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereMimeTypeParam
			// Order is the order argument value.
			Order parameter.MimeTypeOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetMimeTypesWithSd holds details about calls to the GetMimeTypesWithSd method.
		GetMimeTypesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereMimeTypeParam
			// Order is the order argument value.
			Order parameter.MimeTypeOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetPermissionCategories holds details about calls to the GetPermissionCategories method.
		GetPermissionCategories []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WherePermissionCategoryParam
			// Order is the order argument value.
			Order parameter.PermissionCategoryOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetPermissionCategoriesWithSd holds details about calls to the GetPermissionCategoriesWithSd method.
		GetPermissionCategoriesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WherePermissionCategoryParam
			// Order is the order argument value.
			Order parameter.PermissionCategoryOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetPermissions holds details about calls to the GetPermissions method.
		GetPermissions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WherePermissionParam
			// Order is the order argument value.
			Order parameter.PermissionOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetPermissionsWithCategory holds details about calls to the GetPermissionsWithCategory method.
		GetPermissionsWithCategory []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WherePermissionParam
			// Order is the order argument value.
			Order parameter.PermissionOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetPermissionsWithCategoryWithSd holds details about calls to the GetPermissionsWithCategoryWithSd method.
		GetPermissionsWithCategoryWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WherePermissionParam
			// Order is the order argument value.
			Order parameter.PermissionOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetPermissionsWithSd holds details about calls to the GetPermissionsWithSd method.
		GetPermissionsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WherePermissionParam
			// Order is the order argument value.
			Order parameter.PermissionOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetPluralAbsences holds details about calls to the GetPluralAbsences method.
		GetPluralAbsences []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Ids is the ids argument value.
			Ids []uuid.UUID
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralAbsencesWithSd holds details about calls to the GetPluralAbsencesWithSd method.
		GetPluralAbsencesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Ids is the ids argument value.
			Ids []uuid.UUID
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralAttendStatuses holds details about calls to the GetPluralAttendStatuses method.
		GetPluralAttendStatuses []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AttendStatusIDs is the AttendStatusIDs argument value.
			AttendStatusIDs []uuid.UUID
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralAttendStatusesWithSd holds details about calls to the GetPluralAttendStatusesWithSd method.
		GetPluralAttendStatusesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// AttendStatusIDs is the AttendStatusIDs argument value.
			AttendStatusIDs []uuid.UUID
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralAttendanceTypes holds details about calls to the GetPluralAttendanceTypes method.
		GetPluralAttendanceTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AttendanceTypeIDs is the AttendanceTypeIDs argument value.
			AttendanceTypeIDs []uuid.UUID
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralAttendanceTypesWithSd holds details about calls to the GetPluralAttendanceTypesWithSd method.
		GetPluralAttendanceTypesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// AttendanceTypeIDs is the AttendanceTypeIDs argument value.
			AttendanceTypeIDs []uuid.UUID
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralEventTypes holds details about calls to the GetPluralEventTypes method.
		GetPluralEventTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// EventTypeIDs is the EventTypeIDs argument value.
			EventTypeIDs []uuid.UUID
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralEventTypesWithSd holds details about calls to the GetPluralEventTypesWithSd method.
		GetPluralEventTypesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// EventTypeIDs is the EventTypeIDs argument value.
			EventTypeIDs []uuid.UUID
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralMimeTypes holds details about calls to the GetPluralMimeTypes method.
		GetPluralMimeTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MimeTypeIDs is the MimeTypeIDs argument value.
			MimeTypeIDs []uuid.UUID
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralMimeTypesWithSd holds details about calls to the GetPluralMimeTypesWithSd method.
		GetPluralMimeTypesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MimeTypeIDs is the MimeTypeIDs argument value.
			MimeTypeIDs []uuid.UUID
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralPermissionCategories holds details about calls to the GetPluralPermissionCategories method.
		GetPluralPermissionCategories []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PermissionCategoryIDs is the PermissionCategoryIDs argument value.
			PermissionCategoryIDs []uuid.UUID
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralPermissionCategoriesWithSd holds details about calls to the GetPluralPermissionCategoriesWithSd method.
		GetPluralPermissionCategoriesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// PermissionCategoryIDs is the PermissionCategoryIDs argument value.
			PermissionCategoryIDs []uuid.UUID
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralPermissions holds details about calls to the GetPluralPermissions method.
		GetPluralPermissions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PermissionIDs is the PermissionIDs argument value.
			PermissionIDs []uuid.UUID
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralPermissionsWithSd holds details about calls to the GetPluralPermissionsWithSd method.
		GetPluralPermissionsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// PermissionIDs is the PermissionIDs argument value.
			PermissionIDs []uuid.UUID
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralPolicies holds details about calls to the GetPluralPolicies method.
		GetPluralPolicies []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PolicyIDs is the PolicyIDs argument value.
			PolicyIDs []uuid.UUID
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralPoliciesWithSd holds details about calls to the GetPluralPoliciesWithSd method.
		GetPluralPoliciesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// PolicyIDs is the PolicyIDs argument value.
			PolicyIDs []uuid.UUID
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralPolicyCategories holds details about calls to the GetPluralPolicyCategories method.
		GetPluralPolicyCategories []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PolicyCategoryIDs is the policyCategoryIDs argument value.
			PolicyCategoryIDs []uuid.UUID
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralPolicyCategoriesWithSd holds details about calls to the GetPluralPolicyCategoriesWithSd method.
		GetPluralPolicyCategoriesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// PolicyCategoryIDs is the policyCategoryIDs argument value.
			PolicyCategoryIDs []uuid.UUID
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralRecordTypes holds details about calls to the GetPluralRecordTypes method.
		GetPluralRecordTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// RecordTypeIDs is the RecordTypeIDs argument value.
			RecordTypeIDs []uuid.UUID
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralRecordTypesWithSd holds details about calls to the GetPluralRecordTypesWithSd method.
		GetPluralRecordTypesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// RecordTypeIDs is the RecordTypeIDs argument value.
			RecordTypeIDs []uuid.UUID
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPolicies holds details about calls to the GetPolicies method.
		GetPolicies []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WherePolicyParam
			// Order is the order argument value.
			Order parameter.PolicyOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetPoliciesWithCategory holds details about calls to the GetPoliciesWithCategory method.
		GetPoliciesWithCategory []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WherePolicyParam
			// Order is the order argument value.
			Order parameter.PolicyOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetPoliciesWithCategoryWithSd holds details about calls to the GetPoliciesWithCategoryWithSd method.
		GetPoliciesWithCategoryWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WherePolicyParam
			// Order is the order argument value.
			Order parameter.PolicyOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetPoliciesWithSd holds details about calls to the GetPoliciesWithSd method.
		GetPoliciesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WherePolicyParam
			// Order is the order argument value.
			Order parameter.PolicyOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetPolicyCategories holds details about calls to the GetPolicyCategories method.
		GetPolicyCategories []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WherePolicyCategoryParam
			// Order is the order argument value.
			Order parameter.PolicyCategoryOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetPolicyCategoriesWithSd holds details about calls to the GetPolicyCategoriesWithSd method.
		GetPolicyCategoriesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WherePolicyCategoryParam
			// Order is the order argument value.
			Order parameter.PolicyCategoryOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetRecordTypes holds details about calls to the GetRecordTypes method.
		GetRecordTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereRecordTypeParam
			// Order is the order argument value.
			Order parameter.RecordTypeOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetRecordTypesWithSd holds details about calls to the GetRecordTypesWithSd method.
		GetRecordTypesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereRecordTypeParam
			// Order is the order argument value.
			Order parameter.RecordTypeOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// PluralDeleteAbsences holds details about calls to the PluralDeleteAbsences method.
		PluralDeleteAbsences []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AbsenceIDs is the absenceIDs argument value.
			AbsenceIDs []uuid.UUID
		}
		// PluralDeleteAbsencesWithSd holds details about calls to the PluralDeleteAbsencesWithSd method.
		PluralDeleteAbsencesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// AbsenceIDs is the absenceIDs argument value.
			AbsenceIDs []uuid.UUID
		}
		// PluralDeleteAttendStatuses holds details about calls to the PluralDeleteAttendStatuses method.
		PluralDeleteAttendStatuses []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AttendStatusIDs is the attendStatusIDs argument value.
			AttendStatusIDs []uuid.UUID
		}
		// PluralDeleteAttendStatusesWithSd holds details about calls to the PluralDeleteAttendStatusesWithSd method.
		PluralDeleteAttendStatusesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// AttendStatusIDs is the attendStatusIDs argument value.
			AttendStatusIDs []uuid.UUID
		}
		// PluralDeleteAttendanceTypes holds details about calls to the PluralDeleteAttendanceTypes method.
		PluralDeleteAttendanceTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AttendanceTypeIDs is the attendanceTypeIDs argument value.
			AttendanceTypeIDs []uuid.UUID
		}
		// PluralDeleteAttendanceTypesWithSd holds details about calls to the PluralDeleteAttendanceTypesWithSd method.
		PluralDeleteAttendanceTypesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// AttendanceTypeIDs is the attendanceTypeIDs argument value.
			AttendanceTypeIDs []uuid.UUID
		}
		// PluralDeleteEventTypes holds details about calls to the PluralDeleteEventTypes method.
		PluralDeleteEventTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// EventTypeIDs is the eventTypeIDs argument value.
			EventTypeIDs []uuid.UUID
		}
		// PluralDeleteEventTypesWithSd holds details about calls to the PluralDeleteEventTypesWithSd method.
		PluralDeleteEventTypesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// EventTypeIDs is the eventTypeIDs argument value.
			EventTypeIDs []uuid.UUID
		}
		// PluralDeleteMimeTypes holds details about calls to the PluralDeleteMimeTypes method.
		PluralDeleteMimeTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MimeTypeIDs is the mimeTypeIDs argument value.
			MimeTypeIDs []uuid.UUID
		}
		// PluralDeleteMimeTypesWithSd holds details about calls to the PluralDeleteMimeTypesWithSd method.
		PluralDeleteMimeTypesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MimeTypeIDs is the mimeTypeIDs argument value.
			MimeTypeIDs []uuid.UUID
		}
		// PluralDeletePermissionCategories holds details about calls to the PluralDeletePermissionCategories method.
		PluralDeletePermissionCategories []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PermissionCategoryIDs is the permissionCategoryIDs argument value.
			PermissionCategoryIDs []uuid.UUID
		}
		// PluralDeletePermissionCategoriesWithSd holds details about calls to the PluralDeletePermissionCategoriesWithSd method.
		PluralDeletePermissionCategoriesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// PermissionCategoryIDs is the permissionCategoryIDs argument value.
			PermissionCategoryIDs []uuid.UUID
		}
		// PluralDeletePermissions holds details about calls to the PluralDeletePermissions method.
		PluralDeletePermissions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PermissionIDs is the permissionIDs argument value.
			PermissionIDs []uuid.UUID
		}
		// PluralDeletePermissionsWithSd holds details about calls to the PluralDeletePermissionsWithSd method.
		PluralDeletePermissionsWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// PermissionIDs is the permissionIDs argument value.
			PermissionIDs []uuid.UUID
		}
		// PluralDeletePolicies holds details about calls to the PluralDeletePolicies method.
		PluralDeletePolicies []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PolicyIDs is the policyIDs argument value.
			PolicyIDs []uuid.UUID
		}
		// PluralDeletePoliciesWithSd holds details about calls to the PluralDeletePoliciesWithSd method.
		PluralDeletePoliciesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// PolicyIDs is the policyIDs argument value.
			PolicyIDs []uuid.UUID
		}
		// PluralDeletePolicyCategories holds details about calls to the PluralDeletePolicyCategories method.
		PluralDeletePolicyCategories []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PolicyCategoryIDs is the policyCategoryIDs argument value.
			PolicyCategoryIDs []uuid.UUID
		}
		// PluralDeletePolicyCategoriesWithSd holds details about calls to the PluralDeletePolicyCategoriesWithSd method.
		PluralDeletePolicyCategoriesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// PolicyCategoryIDs is the policyCategoryIDs argument value.
			PolicyCategoryIDs []uuid.UUID
		}
		// PluralDeleteRecordTypes holds details about calls to the PluralDeleteRecordTypes method.
		PluralDeleteRecordTypes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// RecordTypeIDs is the recordTypeIDs argument value.
			RecordTypeIDs []uuid.UUID
		}
		// PluralDeleteRecordTypesWithSd holds details about calls to the PluralDeleteRecordTypesWithSd method.
		PluralDeleteRecordTypesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// RecordTypeIDs is the recordTypeIDs argument value.
			RecordTypeIDs []uuid.UUID
		}
		// Rollback holds details about calls to the Rollback method.
		Rollback []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// Sd is the sd argument value.
			Sd Sd
		}
		// UpdateAttendStatus holds details about calls to the UpdateAttendStatus method.
		UpdateAttendStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AttendStatusID is the attendStatusID argument value.
			AttendStatusID uuid.UUID
			// Param is the param argument value.
			Param parameter.UpdateAttendStatusParams
		}
		// UpdateAttendStatusByKey holds details about calls to the UpdateAttendStatusByKey method.
		UpdateAttendStatusByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
			// Param is the param argument value.
			Param parameter.UpdateAttendStatusByKeyParams
		}
		// UpdateAttendStatusByKeyWithSd holds details about calls to the UpdateAttendStatusByKeyWithSd method.
		UpdateAttendStatusByKeyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Key is the key argument value.
			Key string
			// Param is the param argument value.
			Param parameter.UpdateAttendStatusByKeyParams
		}
		// UpdateAttendStatusWithSd holds details about calls to the UpdateAttendStatusWithSd method.
		UpdateAttendStatusWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// AttendStatusID is the attendStatusID argument value.
			AttendStatusID uuid.UUID
			// Param is the param argument value.
			Param parameter.UpdateAttendStatusParams
		}
		// UpdateAttendanceType holds details about calls to the UpdateAttendanceType method.
		UpdateAttendanceType []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AttendanceTypeID is the attendanceTypeID argument value.
			AttendanceTypeID uuid.UUID
			// Param is the param argument value.
			Param parameter.UpdateAttendanceTypeParams
		}
		// UpdateAttendanceTypeByKey holds details about calls to the UpdateAttendanceTypeByKey method.
		UpdateAttendanceTypeByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
			// Param is the param argument value.
			Param parameter.UpdateAttendanceTypeByKeyParams
		}
		// UpdateAttendanceTypeByKeyWithSd holds details about calls to the UpdateAttendanceTypeByKeyWithSd method.
		UpdateAttendanceTypeByKeyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Key is the key argument value.
			Key string
			// Param is the param argument value.
			Param parameter.UpdateAttendanceTypeByKeyParams
		}
		// UpdateAttendanceTypeWithSd holds details about calls to the UpdateAttendanceTypeWithSd method.
		UpdateAttendanceTypeWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// AttendanceTypeID is the attendanceTypeID argument value.
			AttendanceTypeID uuid.UUID
			// Param is the param argument value.
			Param parameter.UpdateAttendanceTypeParams
		}
		// UpdateEventType holds details about calls to the UpdateEventType method.
		UpdateEventType []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// EventTypeID is the eventTypeID argument value.
			EventTypeID uuid.UUID
			// Param is the param argument value.
			Param parameter.UpdateEventTypeParams
		}
		// UpdateEventTypeByKey holds details about calls to the UpdateEventTypeByKey method.
		UpdateEventTypeByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
			// Param is the param argument value.
			Param parameter.UpdateEventTypeByKeyParams
		}
		// UpdateEventTypeByKeyWithSd holds details about calls to the UpdateEventTypeByKeyWithSd method.
		UpdateEventTypeByKeyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Key is the key argument value.
			Key string
			// Param is the param argument value.
			Param parameter.UpdateEventTypeByKeyParams
		}
		// UpdateEventTypeWithSd holds details about calls to the UpdateEventTypeWithSd method.
		UpdateEventTypeWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// EventTypeID is the eventTypeID argument value.
			EventTypeID uuid.UUID
			// Param is the param argument value.
			Param parameter.UpdateEventTypeParams
		}
		// UpdateMimeType holds details about calls to the UpdateMimeType method.
		UpdateMimeType []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MimeTypeID is the mimeTypeID argument value.
			MimeTypeID uuid.UUID
			// Param is the param argument value.
			Param parameter.UpdateMimeTypeParams
		}
		// UpdateMimeTypeByKey holds details about calls to the UpdateMimeTypeByKey method.
		UpdateMimeTypeByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
			// Param is the param argument value.
			Param parameter.UpdateMimeTypeByKeyParams
		}
		// UpdateMimeTypeByKeyWithSd holds details about calls to the UpdateMimeTypeByKeyWithSd method.
		UpdateMimeTypeByKeyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Key is the key argument value.
			Key string
			// Param is the param argument value.
			Param parameter.UpdateMimeTypeByKeyParams
		}
		// UpdateMimeTypeWithSd holds details about calls to the UpdateMimeTypeWithSd method.
		UpdateMimeTypeWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// MimeTypeID is the mimeTypeID argument value.
			MimeTypeID uuid.UUID
			// Param is the param argument value.
			Param parameter.UpdateMimeTypeParams
		}
		// UpdatePermission holds details about calls to the UpdatePermission method.
		UpdatePermission []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PermissionID is the permissionID argument value.
			PermissionID uuid.UUID
			// Param is the param argument value.
			Param parameter.UpdatePermissionParams
		}
		// UpdatePermissionByKey holds details about calls to the UpdatePermissionByKey method.
		UpdatePermissionByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
			// Param is the param argument value.
			Param parameter.UpdatePermissionByKeyParams
		}
		// UpdatePermissionByKeyWithSd holds details about calls to the UpdatePermissionByKeyWithSd method.
		UpdatePermissionByKeyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Key is the key argument value.
			Key string
			// Param is the param argument value.
			Param parameter.UpdatePermissionByKeyParams
		}
		// UpdatePermissionCategory holds details about calls to the UpdatePermissionCategory method.
		UpdatePermissionCategory []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PermissionCategoryID is the permissionCategoryID argument value.
			PermissionCategoryID uuid.UUID
			// Param is the param argument value.
			Param parameter.UpdatePermissionCategoryParams
		}
		// UpdatePermissionCategoryByKey holds details about calls to the UpdatePermissionCategoryByKey method.
		UpdatePermissionCategoryByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
			// Param is the param argument value.
			Param parameter.UpdatePermissionCategoryByKeyParams
		}
		// UpdatePermissionCategoryByKeyWithSd holds details about calls to the UpdatePermissionCategoryByKeyWithSd method.
		UpdatePermissionCategoryByKeyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Key is the key argument value.
			Key string
			// Param is the param argument value.
			Param parameter.UpdatePermissionCategoryByKeyParams
		}
		// UpdatePermissionCategoryWithSd holds details about calls to the UpdatePermissionCategoryWithSd method.
		UpdatePermissionCategoryWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// PermissionCategoryID is the permissionCategoryID argument value.
			PermissionCategoryID uuid.UUID
			// Param is the param argument value.
			Param parameter.UpdatePermissionCategoryParams
		}
		// UpdatePermissionWithSd holds details about calls to the UpdatePermissionWithSd method.
		UpdatePermissionWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// PermissionID is the permissionID argument value.
			PermissionID uuid.UUID
			// Param is the param argument value.
			Param parameter.UpdatePermissionParams
		}
		// UpdatePolicy holds details about calls to the UpdatePolicy method.
		UpdatePolicy []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PolicyID is the policyID argument value.
			PolicyID uuid.UUID
			// Param is the param argument value.
			Param parameter.UpdatePolicyParams
		}
		// UpdatePolicyByKey holds details about calls to the UpdatePolicyByKey method.
		UpdatePolicyByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
			// Param is the param argument value.
			Param parameter.UpdatePolicyByKeyParams
		}
		// UpdatePolicyByKeyWithSd holds details about calls to the UpdatePolicyByKeyWithSd method.
		UpdatePolicyByKeyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Key is the key argument value.
			Key string
			// Param is the param argument value.
			Param parameter.UpdatePolicyByKeyParams
		}
		// UpdatePolicyCategory holds details about calls to the UpdatePolicyCategory method.
		UpdatePolicyCategory []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// PolicyCategoryID is the policyCategoryID argument value.
			PolicyCategoryID uuid.UUID
			// Param is the param argument value.
			Param parameter.UpdatePolicyCategoryParams
		}
		// UpdatePolicyCategoryByKey holds details about calls to the UpdatePolicyCategoryByKey method.
		UpdatePolicyCategoryByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
			// Param is the param argument value.
			Param parameter.UpdatePolicyCategoryByKeyParams
		}
		// UpdatePolicyCategoryByKeyWithSd holds details about calls to the UpdatePolicyCategoryByKeyWithSd method.
		UpdatePolicyCategoryByKeyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Key is the key argument value.
			Key string
			// Param is the param argument value.
			Param parameter.UpdatePolicyCategoryByKeyParams
		}
		// UpdatePolicyCategoryWithSd holds details about calls to the UpdatePolicyCategoryWithSd method.
		UpdatePolicyCategoryWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// PolicyCategoryID is the policyCategoryID argument value.
			PolicyCategoryID uuid.UUID
			// Param is the param argument value.
			Param parameter.UpdatePolicyCategoryParams
		}
		// UpdatePolicyWithSd holds details about calls to the UpdatePolicyWithSd method.
		UpdatePolicyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// PolicyID is the policyID argument value.
			PolicyID uuid.UUID
			// Param is the param argument value.
			Param parameter.UpdatePolicyParams
		}
		// UpdateRecordType holds details about calls to the UpdateRecordType method.
		UpdateRecordType []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// RecordTypeID is the recordTypeID argument value.
			RecordTypeID uuid.UUID
			// Param is the param argument value.
			Param parameter.UpdateRecordTypeParams
		}
		// UpdateRecordTypeByKey holds details about calls to the UpdateRecordTypeByKey method.
		UpdateRecordTypeByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
			// Param is the param argument value.
			Param parameter.UpdateRecordTypeByKeyParams
		}
		// UpdateRecordTypeByKeyWithSd holds details about calls to the UpdateRecordTypeByKeyWithSd method.
		UpdateRecordTypeByKeyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Key is the key argument value.
			Key string
			// Param is the param argument value.
			Param parameter.UpdateRecordTypeByKeyParams
		}
		// UpdateRecordTypeWithSd holds details about calls to the UpdateRecordTypeWithSd method.
		UpdateRecordTypeWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// RecordTypeID is the recordTypeID argument value.
			RecordTypeID uuid.UUID
			// Param is the param argument value.
			Param parameter.UpdateRecordTypeParams
		}
	}
	lockBegin                                  sync.RWMutex
	lockCleanup                                sync.RWMutex
	lockCommit                                 sync.RWMutex
	lockCountAbsences                          sync.RWMutex
	lockCountAbsencesWithSd                    sync.RWMutex
	lockCountAttendStatuses                    sync.RWMutex
	lockCountAttendStatusesWithSd              sync.RWMutex
	lockCountAttendanceTypes                   sync.RWMutex
	lockCountAttendanceTypesWithSd             sync.RWMutex
	lockCountEventTypes                        sync.RWMutex
	lockCountEventTypesWithSd                  sync.RWMutex
	lockCountMimeTypes                         sync.RWMutex
	lockCountMimeTypesWithSd                   sync.RWMutex
	lockCountPermissionCategories              sync.RWMutex
	lockCountPermissionCategoriesWithSd        sync.RWMutex
	lockCountPermissions                       sync.RWMutex
	lockCountPermissionsWithSd                 sync.RWMutex
	lockCountPolicies                          sync.RWMutex
	lockCountPoliciesWithSd                    sync.RWMutex
	lockCountPolicyCategories                  sync.RWMutex
	lockCountPolicyCategoriesWithSd            sync.RWMutex
	lockCountRecordTypes                       sync.RWMutex
	lockCountRecordTypesWithSd                 sync.RWMutex
	lockCreateAbsence                          sync.RWMutex
	lockCreateAbsenceWithSd                    sync.RWMutex
	lockCreateAbsences                         sync.RWMutex
	lockCreateAbsencesWithSd                   sync.RWMutex
	lockCreateAttendStatus                     sync.RWMutex
	lockCreateAttendStatusWithSd               sync.RWMutex
	lockCreateAttendStatuses                   sync.RWMutex
	lockCreateAttendStatusesWithSd             sync.RWMutex
	lockCreateAttendanceType                   sync.RWMutex
	lockCreateAttendanceTypeWithSd             sync.RWMutex
	lockCreateAttendanceTypes                  sync.RWMutex
	lockCreateAttendanceTypesWithSd            sync.RWMutex
	lockCreateEventType                        sync.RWMutex
	lockCreateEventTypeWithSd                  sync.RWMutex
	lockCreateEventTypes                       sync.RWMutex
	lockCreateEventTypesWithSd                 sync.RWMutex
	lockCreateMimeType                         sync.RWMutex
	lockCreateMimeTypeWithSd                   sync.RWMutex
	lockCreateMimeTypes                        sync.RWMutex
	lockCreateMimeTypesWithSd                  sync.RWMutex
	lockCreatePermission                       sync.RWMutex
	lockCreatePermissionCategories             sync.RWMutex
	lockCreatePermissionCategoriesWithSd       sync.RWMutex
	lockCreatePermissionCategory               sync.RWMutex
	lockCreatePermissionCategoryWithSd         sync.RWMutex
	lockCreatePermissionWithSd                 sync.RWMutex
	lockCreatePermissions                      sync.RWMutex
	lockCreatePermissionsWithSd                sync.RWMutex
	lockCreatePolicies                         sync.RWMutex
	lockCreatePoliciesWithSd                   sync.RWMutex
	lockCreatePolicy                           sync.RWMutex
	lockCreatePolicyCategories                 sync.RWMutex
	lockCreatePolicyCategoriesWithSd           sync.RWMutex
	lockCreatePolicyCategory                   sync.RWMutex
	lockCreatePolicyCategoryWithSd             sync.RWMutex
	lockCreatePolicyWithSd                     sync.RWMutex
	lockCreateRecordType                       sync.RWMutex
	lockCreateRecordTypeWithSd                 sync.RWMutex
	lockCreateRecordTypes                      sync.RWMutex
	lockCreateRecordTypesWithSd                sync.RWMutex
	lockDeleteAbsence                          sync.RWMutex
	lockDeleteAbsenceWithSd                    sync.RWMutex
	lockDeleteAttendStatus                     sync.RWMutex
	lockDeleteAttendStatusByKey                sync.RWMutex
	lockDeleteAttendStatusByKeyWithSd          sync.RWMutex
	lockDeleteAttendStatusWithSd               sync.RWMutex
	lockDeleteAttendanceType                   sync.RWMutex
	lockDeleteAttendanceTypeByKey              sync.RWMutex
	lockDeleteAttendanceTypeByKeyWithSd        sync.RWMutex
	lockDeleteAttendanceTypeWithSd             sync.RWMutex
	lockDeleteEventType                        sync.RWMutex
	lockDeleteEventTypeByKey                   sync.RWMutex
	lockDeleteEventTypeByKeyWithSd             sync.RWMutex
	lockDeleteEventTypeWithSd                  sync.RWMutex
	lockDeleteMimeType                         sync.RWMutex
	lockDeleteMimeTypeByKey                    sync.RWMutex
	lockDeleteMimeTypeByKeyWithSd              sync.RWMutex
	lockDeleteMimeTypeWithSd                   sync.RWMutex
	lockDeletePermission                       sync.RWMutex
	lockDeletePermissionByKey                  sync.RWMutex
	lockDeletePermissionByKeyWithSd            sync.RWMutex
	lockDeletePermissionCategory               sync.RWMutex
	lockDeletePermissionCategoryByKey          sync.RWMutex
	lockDeletePermissionCategoryByKeyWithSd    sync.RWMutex
	lockDeletePermissionCategoryWithSd         sync.RWMutex
	lockDeletePermissionWithSd                 sync.RWMutex
	lockDeletePolicy                           sync.RWMutex
	lockDeletePolicyByKey                      sync.RWMutex
	lockDeletePolicyByKeyWithSd                sync.RWMutex
	lockDeletePolicyCategory                   sync.RWMutex
	lockDeletePolicyCategoryByKey              sync.RWMutex
	lockDeletePolicyCategoryByKeyWithSd        sync.RWMutex
	lockDeletePolicyCategoryWithSd             sync.RWMutex
	lockDeletePolicyWithSd                     sync.RWMutex
	lockDeleteRecordType                       sync.RWMutex
	lockDeleteRecordTypeByKey                  sync.RWMutex
	lockDeleteRecordTypeByKeyWithSd            sync.RWMutex
	lockDeleteRecordTypeWithSd                 sync.RWMutex
	lockFindAbsenceByID                        sync.RWMutex
	lockFindAbsenceByIDWithSd                  sync.RWMutex
	lockFindAttendStatusByID                   sync.RWMutex
	lockFindAttendStatusByIDWithSd             sync.RWMutex
	lockFindAttendStatusByKey                  sync.RWMutex
	lockFindAttendStatusByKeyWithSd            sync.RWMutex
	lockFindAttendanceTypeByID                 sync.RWMutex
	lockFindAttendanceTypeByIDWithSd           sync.RWMutex
	lockFindAttendanceTypeByKey                sync.RWMutex
	lockFindAttendanceTypeByKeyWithSd          sync.RWMutex
	lockFindEventTypeByID                      sync.RWMutex
	lockFindEventTypeByIDWithSd                sync.RWMutex
	lockFindEventTypeByKey                     sync.RWMutex
	lockFindEventTypeByKeyWithSd               sync.RWMutex
	lockFindMimeTypeByID                       sync.RWMutex
	lockFindMimeTypeByIDWithSd                 sync.RWMutex
	lockFindMimeTypeByKey                      sync.RWMutex
	lockFindMimeTypeByKeyWithSd                sync.RWMutex
	lockFindPermissionByID                     sync.RWMutex
	lockFindPermissionByIDWithCategory         sync.RWMutex
	lockFindPermissionByIDWithCategoryWithSd   sync.RWMutex
	lockFindPermissionByIDWithSd               sync.RWMutex
	lockFindPermissionByKey                    sync.RWMutex
	lockFindPermissionByKeyWithCategory        sync.RWMutex
	lockFindPermissionByKeyWithCategoryWithSd  sync.RWMutex
	lockFindPermissionByKeyWithSd              sync.RWMutex
	lockFindPermissionCategoryByID             sync.RWMutex
	lockFindPermissionCategoryByIDWithSd       sync.RWMutex
	lockFindPermissionCategoryByKey            sync.RWMutex
	lockFindPermissionCategoryByKeyWithSd      sync.RWMutex
	lockFindPolicyByID                         sync.RWMutex
	lockFindPolicyByIDWithCategory             sync.RWMutex
	lockFindPolicyByIDWithCategoryWithSd       sync.RWMutex
	lockFindPolicyByIDWithSd                   sync.RWMutex
	lockFindPolicyByKey                        sync.RWMutex
	lockFindPolicyByKeyWithCategory            sync.RWMutex
	lockFindPolicyByKeyWithCategoryWithSd      sync.RWMutex
	lockFindPolicyByKeyWithSd                  sync.RWMutex
	lockFindPolicyCategoryByID                 sync.RWMutex
	lockFindPolicyCategoryByIDWithSd           sync.RWMutex
	lockFindPolicyCategoryByKey                sync.RWMutex
	lockFindPolicyCategoryByKeyWithSd          sync.RWMutex
	lockFindRecordTypeByID                     sync.RWMutex
	lockFindRecordTypeByIDWithSd               sync.RWMutex
	lockFindRecordTypeByKey                    sync.RWMutex
	lockFindRecordTypeByKeyWithSd              sync.RWMutex
	lockGetAbsences                            sync.RWMutex
	lockGetAbsencesWithSd                      sync.RWMutex
	lockGetAttendStatuses                      sync.RWMutex
	lockGetAttendStatusesWithSd                sync.RWMutex
	lockGetAttendanceTypes                     sync.RWMutex
	lockGetAttendanceTypesWithSd               sync.RWMutex
	lockGetEventTypes                          sync.RWMutex
	lockGetEventTypesWithSd                    sync.RWMutex
	lockGetMimeTypes                           sync.RWMutex
	lockGetMimeTypesWithSd                     sync.RWMutex
	lockGetPermissionCategories                sync.RWMutex
	lockGetPermissionCategoriesWithSd          sync.RWMutex
	lockGetPermissions                         sync.RWMutex
	lockGetPermissionsWithCategory             sync.RWMutex
	lockGetPermissionsWithCategoryWithSd       sync.RWMutex
	lockGetPermissionsWithSd                   sync.RWMutex
	lockGetPluralAbsences                      sync.RWMutex
	lockGetPluralAbsencesWithSd                sync.RWMutex
	lockGetPluralAttendStatuses                sync.RWMutex
	lockGetPluralAttendStatusesWithSd          sync.RWMutex
	lockGetPluralAttendanceTypes               sync.RWMutex
	lockGetPluralAttendanceTypesWithSd         sync.RWMutex
	lockGetPluralEventTypes                    sync.RWMutex
	lockGetPluralEventTypesWithSd              sync.RWMutex
	lockGetPluralMimeTypes                     sync.RWMutex
	lockGetPluralMimeTypesWithSd               sync.RWMutex
	lockGetPluralPermissionCategories          sync.RWMutex
	lockGetPluralPermissionCategoriesWithSd    sync.RWMutex
	lockGetPluralPermissions                   sync.RWMutex
	lockGetPluralPermissionsWithSd             sync.RWMutex
	lockGetPluralPolicies                      sync.RWMutex
	lockGetPluralPoliciesWithSd                sync.RWMutex
	lockGetPluralPolicyCategories              sync.RWMutex
	lockGetPluralPolicyCategoriesWithSd        sync.RWMutex
	lockGetPluralRecordTypes                   sync.RWMutex
	lockGetPluralRecordTypesWithSd             sync.RWMutex
	lockGetPolicies                            sync.RWMutex
	lockGetPoliciesWithCategory                sync.RWMutex
	lockGetPoliciesWithCategoryWithSd          sync.RWMutex
	lockGetPoliciesWithSd                      sync.RWMutex
	lockGetPolicyCategories                    sync.RWMutex
	lockGetPolicyCategoriesWithSd              sync.RWMutex
	lockGetRecordTypes                         sync.RWMutex
	lockGetRecordTypesWithSd                   sync.RWMutex
	lockPluralDeleteAbsences                   sync.RWMutex
	lockPluralDeleteAbsencesWithSd             sync.RWMutex
	lockPluralDeleteAttendStatuses             sync.RWMutex
	lockPluralDeleteAttendStatusesWithSd       sync.RWMutex
	lockPluralDeleteAttendanceTypes            sync.RWMutex
	lockPluralDeleteAttendanceTypesWithSd      sync.RWMutex
	lockPluralDeleteEventTypes                 sync.RWMutex
	lockPluralDeleteEventTypesWithSd           sync.RWMutex
	lockPluralDeleteMimeTypes                  sync.RWMutex
	lockPluralDeleteMimeTypesWithSd            sync.RWMutex
	lockPluralDeletePermissionCategories       sync.RWMutex
	lockPluralDeletePermissionCategoriesWithSd sync.RWMutex
	lockPluralDeletePermissions                sync.RWMutex
	lockPluralDeletePermissionsWithSd          sync.RWMutex
	lockPluralDeletePolicies                   sync.RWMutex
	lockPluralDeletePoliciesWithSd             sync.RWMutex
	lockPluralDeletePolicyCategories           sync.RWMutex
	lockPluralDeletePolicyCategoriesWithSd     sync.RWMutex
	lockPluralDeleteRecordTypes                sync.RWMutex
	lockPluralDeleteRecordTypesWithSd          sync.RWMutex
	lockRollback                               sync.RWMutex
	lockUpdateAttendStatus                     sync.RWMutex
	lockUpdateAttendStatusByKey                sync.RWMutex
	lockUpdateAttendStatusByKeyWithSd          sync.RWMutex
	lockUpdateAttendStatusWithSd               sync.RWMutex
	lockUpdateAttendanceType                   sync.RWMutex
	lockUpdateAttendanceTypeByKey              sync.RWMutex
	lockUpdateAttendanceTypeByKeyWithSd        sync.RWMutex
	lockUpdateAttendanceTypeWithSd             sync.RWMutex
	lockUpdateEventType                        sync.RWMutex
	lockUpdateEventTypeByKey                   sync.RWMutex
	lockUpdateEventTypeByKeyWithSd             sync.RWMutex
	lockUpdateEventTypeWithSd                  sync.RWMutex
	lockUpdateMimeType                         sync.RWMutex
	lockUpdateMimeTypeByKey                    sync.RWMutex
	lockUpdateMimeTypeByKeyWithSd              sync.RWMutex
	lockUpdateMimeTypeWithSd                   sync.RWMutex
	lockUpdatePermission                       sync.RWMutex
	lockUpdatePermissionByKey                  sync.RWMutex
	lockUpdatePermissionByKeyWithSd            sync.RWMutex
	lockUpdatePermissionCategory               sync.RWMutex
	lockUpdatePermissionCategoryByKey          sync.RWMutex
	lockUpdatePermissionCategoryByKeyWithSd    sync.RWMutex
	lockUpdatePermissionCategoryWithSd         sync.RWMutex
	lockUpdatePermissionWithSd                 sync.RWMutex
	lockUpdatePolicy                           sync.RWMutex
	lockUpdatePolicyByKey                      sync.RWMutex
	lockUpdatePolicyByKeyWithSd                sync.RWMutex
	lockUpdatePolicyCategory                   sync.RWMutex
	lockUpdatePolicyCategoryByKey              sync.RWMutex
	lockUpdatePolicyCategoryByKeyWithSd        sync.RWMutex
	lockUpdatePolicyCategoryWithSd             sync.RWMutex
	lockUpdatePolicyWithSd                     sync.RWMutex
	lockUpdateRecordType                       sync.RWMutex
	lockUpdateRecordTypeByKey                  sync.RWMutex
	lockUpdateRecordTypeByKeyWithSd            sync.RWMutex
	lockUpdateRecordTypeWithSd                 sync.RWMutex
}

// Begin calls BeginFunc.
func (mock *StoreMock) Begin(contextMoqParam context.Context) (Sd, error) {
	if mock.BeginFunc == nil {
		panic("StoreMock.BeginFunc: method is nil but Store.Begin was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
	}{
		ContextMoqParam: contextMoqParam,
	}
	mock.lockBegin.Lock()
	mock.calls.Begin = append(mock.calls.Begin, callInfo)
	mock.lockBegin.Unlock()
	return mock.BeginFunc(contextMoqParam)
}

// BeginCalls gets all the calls that were made to Begin.
// Check the length with:
//
//	len(mockedStore.BeginCalls())
func (mock *StoreMock) BeginCalls() []struct {
	ContextMoqParam context.Context
} {
	var calls []struct {
		ContextMoqParam context.Context
	}
	mock.lockBegin.RLock()
	calls = mock.calls.Begin
	mock.lockBegin.RUnlock()
	return calls
}

// Cleanup calls CleanupFunc.
func (mock *StoreMock) Cleanup(contextMoqParam context.Context) error {
	if mock.CleanupFunc == nil {
		panic("StoreMock.CleanupFunc: method is nil but Store.Cleanup was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
	}{
		ContextMoqParam: contextMoqParam,
	}
	mock.lockCleanup.Lock()
	mock.calls.Cleanup = append(mock.calls.Cleanup, callInfo)
	mock.lockCleanup.Unlock()
	return mock.CleanupFunc(contextMoqParam)
}

// CleanupCalls gets all the calls that were made to Cleanup.
// Check the length with:
//
//	len(mockedStore.CleanupCalls())
func (mock *StoreMock) CleanupCalls() []struct {
	ContextMoqParam context.Context
} {
	var calls []struct {
		ContextMoqParam context.Context
	}
	mock.lockCleanup.RLock()
	calls = mock.calls.Cleanup
	mock.lockCleanup.RUnlock()
	return calls
}

// Commit calls CommitFunc.
func (mock *StoreMock) Commit(contextMoqParam context.Context, sd Sd) error {
	if mock.CommitFunc == nil {
		panic("StoreMock.CommitFunc: method is nil but Store.Commit was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		Sd              Sd
	}{
		ContextMoqParam: contextMoqParam,
		Sd:              sd,
	}
	mock.lockCommit.Lock()
	mock.calls.Commit = append(mock.calls.Commit, callInfo)
	mock.lockCommit.Unlock()
	return mock.CommitFunc(contextMoqParam, sd)
}

// CommitCalls gets all the calls that were made to Commit.
// Check the length with:
//
//	len(mockedStore.CommitCalls())
func (mock *StoreMock) CommitCalls() []struct {
	ContextMoqParam context.Context
	Sd              Sd
} {
	var calls []struct {
		ContextMoqParam context.Context
		Sd              Sd
	}
	mock.lockCommit.RLock()
	calls = mock.calls.Commit
	mock.lockCommit.RUnlock()
	return calls
}

// CountAbsences calls CountAbsencesFunc.
func (mock *StoreMock) CountAbsences(ctx context.Context) (int64, error) {
	if mock.CountAbsencesFunc == nil {
		panic("StoreMock.CountAbsencesFunc: method is nil but Store.CountAbsences was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockCountAbsences.Lock()
	mock.calls.CountAbsences = append(mock.calls.CountAbsences, callInfo)
	mock.lockCountAbsences.Unlock()
	return mock.CountAbsencesFunc(ctx)
}

// CountAbsencesCalls gets all the calls that were made to CountAbsences.
// Check the length with:
//
//	len(mockedStore.CountAbsencesCalls())
func (mock *StoreMock) CountAbsencesCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockCountAbsences.RLock()
	calls = mock.calls.CountAbsences
	mock.lockCountAbsences.RUnlock()
	return calls
}

// CountAbsencesWithSd calls CountAbsencesWithSdFunc.
func (mock *StoreMock) CountAbsencesWithSd(ctx context.Context, sd Sd) (int64, error) {
	if mock.CountAbsencesWithSdFunc == nil {
		panic("StoreMock.CountAbsencesWithSdFunc: method is nil but Store.CountAbsencesWithSd was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Sd  Sd
	}{
		Ctx: ctx,
		Sd:  sd,
	}
	mock.lockCountAbsencesWithSd.Lock()
	mock.calls.CountAbsencesWithSd = append(mock.calls.CountAbsencesWithSd, callInfo)
	mock.lockCountAbsencesWithSd.Unlock()
	return mock.CountAbsencesWithSdFunc(ctx, sd)
}

// CountAbsencesWithSdCalls gets all the calls that were made to CountAbsencesWithSd.
// Check the length with:
//
//	len(mockedStore.CountAbsencesWithSdCalls())
func (mock *StoreMock) CountAbsencesWithSdCalls() []struct {
	Ctx context.Context
	Sd  Sd
} {
	var calls []struct {
		Ctx context.Context
		Sd  Sd
	}
	mock.lockCountAbsencesWithSd.RLock()
	calls = mock.calls.CountAbsencesWithSd
	mock.lockCountAbsencesWithSd.RUnlock()
	return calls
}

// CountAttendStatuses calls CountAttendStatusesFunc.
func (mock *StoreMock) CountAttendStatuses(ctx context.Context, where parameter.WhereAttendStatusParam) (int64, error) {
	if mock.CountAttendStatusesFunc == nil {
		panic("StoreMock.CountAttendStatusesFunc: method is nil but Store.CountAttendStatuses was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereAttendStatusParam
	}{
		Ctx:   ctx,
		Where: where,
	}
	mock.lockCountAttendStatuses.Lock()
	mock.calls.CountAttendStatuses = append(mock.calls.CountAttendStatuses, callInfo)
	mock.lockCountAttendStatuses.Unlock()
	return mock.CountAttendStatusesFunc(ctx, where)
}

// CountAttendStatusesCalls gets all the calls that were made to CountAttendStatuses.
// Check the length with:
//
//	len(mockedStore.CountAttendStatusesCalls())
func (mock *StoreMock) CountAttendStatusesCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereAttendStatusParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereAttendStatusParam
	}
	mock.lockCountAttendStatuses.RLock()
	calls = mock.calls.CountAttendStatuses
	mock.lockCountAttendStatuses.RUnlock()
	return calls
}

// CountAttendStatusesWithSd calls CountAttendStatusesWithSdFunc.
func (mock *StoreMock) CountAttendStatusesWithSd(ctx context.Context, sd Sd, where parameter.WhereAttendStatusParam) (int64, error) {
	if mock.CountAttendStatusesWithSdFunc == nil {
		panic("StoreMock.CountAttendStatusesWithSdFunc: method is nil but Store.CountAttendStatusesWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereAttendStatusParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
	}
	mock.lockCountAttendStatusesWithSd.Lock()
	mock.calls.CountAttendStatusesWithSd = append(mock.calls.CountAttendStatusesWithSd, callInfo)
	mock.lockCountAttendStatusesWithSd.Unlock()
	return mock.CountAttendStatusesWithSdFunc(ctx, sd, where)
}

// CountAttendStatusesWithSdCalls gets all the calls that were made to CountAttendStatusesWithSd.
// Check the length with:
//
//	len(mockedStore.CountAttendStatusesWithSdCalls())
func (mock *StoreMock) CountAttendStatusesWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereAttendStatusParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereAttendStatusParam
	}
	mock.lockCountAttendStatusesWithSd.RLock()
	calls = mock.calls.CountAttendStatusesWithSd
	mock.lockCountAttendStatusesWithSd.RUnlock()
	return calls
}

// CountAttendanceTypes calls CountAttendanceTypesFunc.
func (mock *StoreMock) CountAttendanceTypes(ctx context.Context, where parameter.WhereAttendanceTypeParam) (int64, error) {
	if mock.CountAttendanceTypesFunc == nil {
		panic("StoreMock.CountAttendanceTypesFunc: method is nil but Store.CountAttendanceTypes was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereAttendanceTypeParam
	}{
		Ctx:   ctx,
		Where: where,
	}
	mock.lockCountAttendanceTypes.Lock()
	mock.calls.CountAttendanceTypes = append(mock.calls.CountAttendanceTypes, callInfo)
	mock.lockCountAttendanceTypes.Unlock()
	return mock.CountAttendanceTypesFunc(ctx, where)
}

// CountAttendanceTypesCalls gets all the calls that were made to CountAttendanceTypes.
// Check the length with:
//
//	len(mockedStore.CountAttendanceTypesCalls())
func (mock *StoreMock) CountAttendanceTypesCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereAttendanceTypeParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereAttendanceTypeParam
	}
	mock.lockCountAttendanceTypes.RLock()
	calls = mock.calls.CountAttendanceTypes
	mock.lockCountAttendanceTypes.RUnlock()
	return calls
}

// CountAttendanceTypesWithSd calls CountAttendanceTypesWithSdFunc.
func (mock *StoreMock) CountAttendanceTypesWithSd(ctx context.Context, sd Sd, where parameter.WhereAttendanceTypeParam) (int64, error) {
	if mock.CountAttendanceTypesWithSdFunc == nil {
		panic("StoreMock.CountAttendanceTypesWithSdFunc: method is nil but Store.CountAttendanceTypesWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereAttendanceTypeParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
	}
	mock.lockCountAttendanceTypesWithSd.Lock()
	mock.calls.CountAttendanceTypesWithSd = append(mock.calls.CountAttendanceTypesWithSd, callInfo)
	mock.lockCountAttendanceTypesWithSd.Unlock()
	return mock.CountAttendanceTypesWithSdFunc(ctx, sd, where)
}

// CountAttendanceTypesWithSdCalls gets all the calls that were made to CountAttendanceTypesWithSd.
// Check the length with:
//
//	len(mockedStore.CountAttendanceTypesWithSdCalls())
func (mock *StoreMock) CountAttendanceTypesWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereAttendanceTypeParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereAttendanceTypeParam
	}
	mock.lockCountAttendanceTypesWithSd.RLock()
	calls = mock.calls.CountAttendanceTypesWithSd
	mock.lockCountAttendanceTypesWithSd.RUnlock()
	return calls
}

// CountEventTypes calls CountEventTypesFunc.
func (mock *StoreMock) CountEventTypes(ctx context.Context, where parameter.WhereEventTypeParam) (int64, error) {
	if mock.CountEventTypesFunc == nil {
		panic("StoreMock.CountEventTypesFunc: method is nil but Store.CountEventTypes was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereEventTypeParam
	}{
		Ctx:   ctx,
		Where: where,
	}
	mock.lockCountEventTypes.Lock()
	mock.calls.CountEventTypes = append(mock.calls.CountEventTypes, callInfo)
	mock.lockCountEventTypes.Unlock()
	return mock.CountEventTypesFunc(ctx, where)
}

// CountEventTypesCalls gets all the calls that were made to CountEventTypes.
// Check the length with:
//
//	len(mockedStore.CountEventTypesCalls())
func (mock *StoreMock) CountEventTypesCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereEventTypeParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereEventTypeParam
	}
	mock.lockCountEventTypes.RLock()
	calls = mock.calls.CountEventTypes
	mock.lockCountEventTypes.RUnlock()
	return calls
}

// CountEventTypesWithSd calls CountEventTypesWithSdFunc.
func (mock *StoreMock) CountEventTypesWithSd(ctx context.Context, sd Sd, where parameter.WhereEventTypeParam) (int64, error) {
	if mock.CountEventTypesWithSdFunc == nil {
		panic("StoreMock.CountEventTypesWithSdFunc: method is nil but Store.CountEventTypesWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereEventTypeParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
	}
	mock.lockCountEventTypesWithSd.Lock()
	mock.calls.CountEventTypesWithSd = append(mock.calls.CountEventTypesWithSd, callInfo)
	mock.lockCountEventTypesWithSd.Unlock()
	return mock.CountEventTypesWithSdFunc(ctx, sd, where)
}

// CountEventTypesWithSdCalls gets all the calls that were made to CountEventTypesWithSd.
// Check the length with:
//
//	len(mockedStore.CountEventTypesWithSdCalls())
func (mock *StoreMock) CountEventTypesWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereEventTypeParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereEventTypeParam
	}
	mock.lockCountEventTypesWithSd.RLock()
	calls = mock.calls.CountEventTypesWithSd
	mock.lockCountEventTypesWithSd.RUnlock()
	return calls
}

// CountMimeTypes calls CountMimeTypesFunc.
func (mock *StoreMock) CountMimeTypes(ctx context.Context, where parameter.WhereMimeTypeParam) (int64, error) {
	if mock.CountMimeTypesFunc == nil {
		panic("StoreMock.CountMimeTypesFunc: method is nil but Store.CountMimeTypes was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereMimeTypeParam
	}{
		Ctx:   ctx,
		Where: where,
	}
	mock.lockCountMimeTypes.Lock()
	mock.calls.CountMimeTypes = append(mock.calls.CountMimeTypes, callInfo)
	mock.lockCountMimeTypes.Unlock()
	return mock.CountMimeTypesFunc(ctx, where)
}

// CountMimeTypesCalls gets all the calls that were made to CountMimeTypes.
// Check the length with:
//
//	len(mockedStore.CountMimeTypesCalls())
func (mock *StoreMock) CountMimeTypesCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereMimeTypeParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereMimeTypeParam
	}
	mock.lockCountMimeTypes.RLock()
	calls = mock.calls.CountMimeTypes
	mock.lockCountMimeTypes.RUnlock()
	return calls
}

// CountMimeTypesWithSd calls CountMimeTypesWithSdFunc.
func (mock *StoreMock) CountMimeTypesWithSd(ctx context.Context, sd Sd, where parameter.WhereMimeTypeParam) (int64, error) {
	if mock.CountMimeTypesWithSdFunc == nil {
		panic("StoreMock.CountMimeTypesWithSdFunc: method is nil but Store.CountMimeTypesWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereMimeTypeParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
	}
	mock.lockCountMimeTypesWithSd.Lock()
	mock.calls.CountMimeTypesWithSd = append(mock.calls.CountMimeTypesWithSd, callInfo)
	mock.lockCountMimeTypesWithSd.Unlock()
	return mock.CountMimeTypesWithSdFunc(ctx, sd, where)
}

// CountMimeTypesWithSdCalls gets all the calls that were made to CountMimeTypesWithSd.
// Check the length with:
//
//	len(mockedStore.CountMimeTypesWithSdCalls())
func (mock *StoreMock) CountMimeTypesWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereMimeTypeParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereMimeTypeParam
	}
	mock.lockCountMimeTypesWithSd.RLock()
	calls = mock.calls.CountMimeTypesWithSd
	mock.lockCountMimeTypesWithSd.RUnlock()
	return calls
}

// CountPermissionCategories calls CountPermissionCategoriesFunc.
func (mock *StoreMock) CountPermissionCategories(ctx context.Context, where parameter.WherePermissionCategoryParam) (int64, error) {
	if mock.CountPermissionCategoriesFunc == nil {
		panic("StoreMock.CountPermissionCategoriesFunc: method is nil but Store.CountPermissionCategories was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WherePermissionCategoryParam
	}{
		Ctx:   ctx,
		Where: where,
	}
	mock.lockCountPermissionCategories.Lock()
	mock.calls.CountPermissionCategories = append(mock.calls.CountPermissionCategories, callInfo)
	mock.lockCountPermissionCategories.Unlock()
	return mock.CountPermissionCategoriesFunc(ctx, where)
}

// CountPermissionCategoriesCalls gets all the calls that were made to CountPermissionCategories.
// Check the length with:
//
//	len(mockedStore.CountPermissionCategoriesCalls())
func (mock *StoreMock) CountPermissionCategoriesCalls() []struct {
	Ctx   context.Context
	Where parameter.WherePermissionCategoryParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WherePermissionCategoryParam
	}
	mock.lockCountPermissionCategories.RLock()
	calls = mock.calls.CountPermissionCategories
	mock.lockCountPermissionCategories.RUnlock()
	return calls
}

// CountPermissionCategoriesWithSd calls CountPermissionCategoriesWithSdFunc.
func (mock *StoreMock) CountPermissionCategoriesWithSd(ctx context.Context, sd Sd, where parameter.WherePermissionCategoryParam) (int64, error) {
	if mock.CountPermissionCategoriesWithSdFunc == nil {
		panic("StoreMock.CountPermissionCategoriesWithSdFunc: method is nil but Store.CountPermissionCategoriesWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WherePermissionCategoryParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
	}
	mock.lockCountPermissionCategoriesWithSd.Lock()
	mock.calls.CountPermissionCategoriesWithSd = append(mock.calls.CountPermissionCategoriesWithSd, callInfo)
	mock.lockCountPermissionCategoriesWithSd.Unlock()
	return mock.CountPermissionCategoriesWithSdFunc(ctx, sd, where)
}

// CountPermissionCategoriesWithSdCalls gets all the calls that were made to CountPermissionCategoriesWithSd.
// Check the length with:
//
//	len(mockedStore.CountPermissionCategoriesWithSdCalls())
func (mock *StoreMock) CountPermissionCategoriesWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WherePermissionCategoryParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WherePermissionCategoryParam
	}
	mock.lockCountPermissionCategoriesWithSd.RLock()
	calls = mock.calls.CountPermissionCategoriesWithSd
	mock.lockCountPermissionCategoriesWithSd.RUnlock()
	return calls
}

// CountPermissions calls CountPermissionsFunc.
func (mock *StoreMock) CountPermissions(ctx context.Context, where parameter.WherePermissionParam) (int64, error) {
	if mock.CountPermissionsFunc == nil {
		panic("StoreMock.CountPermissionsFunc: method is nil but Store.CountPermissions was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WherePermissionParam
	}{
		Ctx:   ctx,
		Where: where,
	}
	mock.lockCountPermissions.Lock()
	mock.calls.CountPermissions = append(mock.calls.CountPermissions, callInfo)
	mock.lockCountPermissions.Unlock()
	return mock.CountPermissionsFunc(ctx, where)
}

// CountPermissionsCalls gets all the calls that were made to CountPermissions.
// Check the length with:
//
//	len(mockedStore.CountPermissionsCalls())
func (mock *StoreMock) CountPermissionsCalls() []struct {
	Ctx   context.Context
	Where parameter.WherePermissionParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WherePermissionParam
	}
	mock.lockCountPermissions.RLock()
	calls = mock.calls.CountPermissions
	mock.lockCountPermissions.RUnlock()
	return calls
}

// CountPermissionsWithSd calls CountPermissionsWithSdFunc.
func (mock *StoreMock) CountPermissionsWithSd(ctx context.Context, sd Sd, where parameter.WherePermissionParam) (int64, error) {
	if mock.CountPermissionsWithSdFunc == nil {
		panic("StoreMock.CountPermissionsWithSdFunc: method is nil but Store.CountPermissionsWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WherePermissionParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
	}
	mock.lockCountPermissionsWithSd.Lock()
	mock.calls.CountPermissionsWithSd = append(mock.calls.CountPermissionsWithSd, callInfo)
	mock.lockCountPermissionsWithSd.Unlock()
	return mock.CountPermissionsWithSdFunc(ctx, sd, where)
}

// CountPermissionsWithSdCalls gets all the calls that were made to CountPermissionsWithSd.
// Check the length with:
//
//	len(mockedStore.CountPermissionsWithSdCalls())
func (mock *StoreMock) CountPermissionsWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WherePermissionParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WherePermissionParam
	}
	mock.lockCountPermissionsWithSd.RLock()
	calls = mock.calls.CountPermissionsWithSd
	mock.lockCountPermissionsWithSd.RUnlock()
	return calls
}

// CountPolicies calls CountPoliciesFunc.
func (mock *StoreMock) CountPolicies(ctx context.Context, where parameter.WherePolicyParam) (int64, error) {
	if mock.CountPoliciesFunc == nil {
		panic("StoreMock.CountPoliciesFunc: method is nil but Store.CountPolicies was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WherePolicyParam
	}{
		Ctx:   ctx,
		Where: where,
	}
	mock.lockCountPolicies.Lock()
	mock.calls.CountPolicies = append(mock.calls.CountPolicies, callInfo)
	mock.lockCountPolicies.Unlock()
	return mock.CountPoliciesFunc(ctx, where)
}

// CountPoliciesCalls gets all the calls that were made to CountPolicies.
// Check the length with:
//
//	len(mockedStore.CountPoliciesCalls())
func (mock *StoreMock) CountPoliciesCalls() []struct {
	Ctx   context.Context
	Where parameter.WherePolicyParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WherePolicyParam
	}
	mock.lockCountPolicies.RLock()
	calls = mock.calls.CountPolicies
	mock.lockCountPolicies.RUnlock()
	return calls
}

// CountPoliciesWithSd calls CountPoliciesWithSdFunc.
func (mock *StoreMock) CountPoliciesWithSd(ctx context.Context, sd Sd, where parameter.WherePolicyParam) (int64, error) {
	if mock.CountPoliciesWithSdFunc == nil {
		panic("StoreMock.CountPoliciesWithSdFunc: method is nil but Store.CountPoliciesWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WherePolicyParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
	}
	mock.lockCountPoliciesWithSd.Lock()
	mock.calls.CountPoliciesWithSd = append(mock.calls.CountPoliciesWithSd, callInfo)
	mock.lockCountPoliciesWithSd.Unlock()
	return mock.CountPoliciesWithSdFunc(ctx, sd, where)
}

// CountPoliciesWithSdCalls gets all the calls that were made to CountPoliciesWithSd.
// Check the length with:
//
//	len(mockedStore.CountPoliciesWithSdCalls())
func (mock *StoreMock) CountPoliciesWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WherePolicyParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WherePolicyParam
	}
	mock.lockCountPoliciesWithSd.RLock()
	calls = mock.calls.CountPoliciesWithSd
	mock.lockCountPoliciesWithSd.RUnlock()
	return calls
}

// CountPolicyCategories calls CountPolicyCategoriesFunc.
func (mock *StoreMock) CountPolicyCategories(ctx context.Context, where parameter.WherePolicyCategoryParam) (int64, error) {
	if mock.CountPolicyCategoriesFunc == nil {
		panic("StoreMock.CountPolicyCategoriesFunc: method is nil but Store.CountPolicyCategories was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WherePolicyCategoryParam
	}{
		Ctx:   ctx,
		Where: where,
	}
	mock.lockCountPolicyCategories.Lock()
	mock.calls.CountPolicyCategories = append(mock.calls.CountPolicyCategories, callInfo)
	mock.lockCountPolicyCategories.Unlock()
	return mock.CountPolicyCategoriesFunc(ctx, where)
}

// CountPolicyCategoriesCalls gets all the calls that were made to CountPolicyCategories.
// Check the length with:
//
//	len(mockedStore.CountPolicyCategoriesCalls())
func (mock *StoreMock) CountPolicyCategoriesCalls() []struct {
	Ctx   context.Context
	Where parameter.WherePolicyCategoryParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WherePolicyCategoryParam
	}
	mock.lockCountPolicyCategories.RLock()
	calls = mock.calls.CountPolicyCategories
	mock.lockCountPolicyCategories.RUnlock()
	return calls
}

// CountPolicyCategoriesWithSd calls CountPolicyCategoriesWithSdFunc.
func (mock *StoreMock) CountPolicyCategoriesWithSd(ctx context.Context, sd Sd, where parameter.WherePolicyCategoryParam) (int64, error) {
	if mock.CountPolicyCategoriesWithSdFunc == nil {
		panic("StoreMock.CountPolicyCategoriesWithSdFunc: method is nil but Store.CountPolicyCategoriesWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WherePolicyCategoryParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
	}
	mock.lockCountPolicyCategoriesWithSd.Lock()
	mock.calls.CountPolicyCategoriesWithSd = append(mock.calls.CountPolicyCategoriesWithSd, callInfo)
	mock.lockCountPolicyCategoriesWithSd.Unlock()
	return mock.CountPolicyCategoriesWithSdFunc(ctx, sd, where)
}

// CountPolicyCategoriesWithSdCalls gets all the calls that were made to CountPolicyCategoriesWithSd.
// Check the length with:
//
//	len(mockedStore.CountPolicyCategoriesWithSdCalls())
func (mock *StoreMock) CountPolicyCategoriesWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WherePolicyCategoryParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WherePolicyCategoryParam
	}
	mock.lockCountPolicyCategoriesWithSd.RLock()
	calls = mock.calls.CountPolicyCategoriesWithSd
	mock.lockCountPolicyCategoriesWithSd.RUnlock()
	return calls
}

// CountRecordTypes calls CountRecordTypesFunc.
func (mock *StoreMock) CountRecordTypes(ctx context.Context, where parameter.WhereRecordTypeParam) (int64, error) {
	if mock.CountRecordTypesFunc == nil {
		panic("StoreMock.CountRecordTypesFunc: method is nil but Store.CountRecordTypes was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereRecordTypeParam
	}{
		Ctx:   ctx,
		Where: where,
	}
	mock.lockCountRecordTypes.Lock()
	mock.calls.CountRecordTypes = append(mock.calls.CountRecordTypes, callInfo)
	mock.lockCountRecordTypes.Unlock()
	return mock.CountRecordTypesFunc(ctx, where)
}

// CountRecordTypesCalls gets all the calls that were made to CountRecordTypes.
// Check the length with:
//
//	len(mockedStore.CountRecordTypesCalls())
func (mock *StoreMock) CountRecordTypesCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereRecordTypeParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereRecordTypeParam
	}
	mock.lockCountRecordTypes.RLock()
	calls = mock.calls.CountRecordTypes
	mock.lockCountRecordTypes.RUnlock()
	return calls
}

// CountRecordTypesWithSd calls CountRecordTypesWithSdFunc.
func (mock *StoreMock) CountRecordTypesWithSd(ctx context.Context, sd Sd, where parameter.WhereRecordTypeParam) (int64, error) {
	if mock.CountRecordTypesWithSdFunc == nil {
		panic("StoreMock.CountRecordTypesWithSdFunc: method is nil but Store.CountRecordTypesWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereRecordTypeParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
	}
	mock.lockCountRecordTypesWithSd.Lock()
	mock.calls.CountRecordTypesWithSd = append(mock.calls.CountRecordTypesWithSd, callInfo)
	mock.lockCountRecordTypesWithSd.Unlock()
	return mock.CountRecordTypesWithSdFunc(ctx, sd, where)
}

// CountRecordTypesWithSdCalls gets all the calls that were made to CountRecordTypesWithSd.
// Check the length with:
//
//	len(mockedStore.CountRecordTypesWithSdCalls())
func (mock *StoreMock) CountRecordTypesWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereRecordTypeParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereRecordTypeParam
	}
	mock.lockCountRecordTypesWithSd.RLock()
	calls = mock.calls.CountRecordTypesWithSd
	mock.lockCountRecordTypesWithSd.RUnlock()
	return calls
}

// CreateAbsence calls CreateAbsenceFunc.
func (mock *StoreMock) CreateAbsence(ctx context.Context, param parameter.CreateAbsenceParam) (entity.Absence, error) {
	if mock.CreateAbsenceFunc == nil {
		panic("StoreMock.CreateAbsenceFunc: method is nil but Store.CreateAbsence was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Param parameter.CreateAbsenceParam
	}{
		Ctx:   ctx,
		Param: param,
	}
	mock.lockCreateAbsence.Lock()
	mock.calls.CreateAbsence = append(mock.calls.CreateAbsence, callInfo)
	mock.lockCreateAbsence.Unlock()
	return mock.CreateAbsenceFunc(ctx, param)
}

// CreateAbsenceCalls gets all the calls that were made to CreateAbsence.
// Check the length with:
//
//	len(mockedStore.CreateAbsenceCalls())
func (mock *StoreMock) CreateAbsenceCalls() []struct {
	Ctx   context.Context
	Param parameter.CreateAbsenceParam
} {
	var calls []struct {
		Ctx   context.Context
		Param parameter.CreateAbsenceParam
	}
	mock.lockCreateAbsence.RLock()
	calls = mock.calls.CreateAbsence
	mock.lockCreateAbsence.RUnlock()
	return calls
}

// CreateAbsenceWithSd calls CreateAbsenceWithSdFunc.
func (mock *StoreMock) CreateAbsenceWithSd(ctx context.Context, sd Sd, param parameter.CreateAbsenceParam) (entity.Absence, error) {
	if mock.CreateAbsenceWithSdFunc == nil {
		panic("StoreMock.CreateAbsenceWithSdFunc: method is nil but Store.CreateAbsenceWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateAbsenceParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Param: param,
	}
	mock.lockCreateAbsenceWithSd.Lock()
	mock.calls.CreateAbsenceWithSd = append(mock.calls.CreateAbsenceWithSd, callInfo)
	mock.lockCreateAbsenceWithSd.Unlock()
	return mock.CreateAbsenceWithSdFunc(ctx, sd, param)
}

// CreateAbsenceWithSdCalls gets all the calls that were made to CreateAbsenceWithSd.
// Check the length with:
//
//	len(mockedStore.CreateAbsenceWithSdCalls())
func (mock *StoreMock) CreateAbsenceWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Param parameter.CreateAbsenceParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateAbsenceParam
	}
	mock.lockCreateAbsenceWithSd.RLock()
	calls = mock.calls.CreateAbsenceWithSd
	mock.lockCreateAbsenceWithSd.RUnlock()
	return calls
}

// CreateAbsences calls CreateAbsencesFunc.
func (mock *StoreMock) CreateAbsences(ctx context.Context, params []parameter.CreateAbsenceParam) (int64, error) {
	if mock.CreateAbsencesFunc == nil {
		panic("StoreMock.CreateAbsencesFunc: method is nil but Store.CreateAbsences was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params []parameter.CreateAbsenceParam
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockCreateAbsences.Lock()
	mock.calls.CreateAbsences = append(mock.calls.CreateAbsences, callInfo)
	mock.lockCreateAbsences.Unlock()
	return mock.CreateAbsencesFunc(ctx, params)
}

// CreateAbsencesCalls gets all the calls that were made to CreateAbsences.
// Check the length with:
//
//	len(mockedStore.CreateAbsencesCalls())
func (mock *StoreMock) CreateAbsencesCalls() []struct {
	Ctx    context.Context
	Params []parameter.CreateAbsenceParam
} {
	var calls []struct {
		Ctx    context.Context
		Params []parameter.CreateAbsenceParam
	}
	mock.lockCreateAbsences.RLock()
	calls = mock.calls.CreateAbsences
	mock.lockCreateAbsences.RUnlock()
	return calls
}

// CreateAbsencesWithSd calls CreateAbsencesWithSdFunc.
func (mock *StoreMock) CreateAbsencesWithSd(ctx context.Context, sd Sd, params []parameter.CreateAbsenceParam) (int64, error) {
	if mock.CreateAbsencesWithSdFunc == nil {
		panic("StoreMock.CreateAbsencesWithSdFunc: method is nil but Store.CreateAbsencesWithSd was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateAbsenceParam
	}{
		Ctx:    ctx,
		Sd:     sd,
		Params: params,
	}
	mock.lockCreateAbsencesWithSd.Lock()
	mock.calls.CreateAbsencesWithSd = append(mock.calls.CreateAbsencesWithSd, callInfo)
	mock.lockCreateAbsencesWithSd.Unlock()
	return mock.CreateAbsencesWithSdFunc(ctx, sd, params)
}

// CreateAbsencesWithSdCalls gets all the calls that were made to CreateAbsencesWithSd.
// Check the length with:
//
//	len(mockedStore.CreateAbsencesWithSdCalls())
func (mock *StoreMock) CreateAbsencesWithSdCalls() []struct {
	Ctx    context.Context
	Sd     Sd
	Params []parameter.CreateAbsenceParam
} {
	var calls []struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateAbsenceParam
	}
	mock.lockCreateAbsencesWithSd.RLock()
	calls = mock.calls.CreateAbsencesWithSd
	mock.lockCreateAbsencesWithSd.RUnlock()
	return calls
}

// CreateAttendStatus calls CreateAttendStatusFunc.
func (mock *StoreMock) CreateAttendStatus(ctx context.Context, param parameter.CreateAttendStatusParam) (entity.AttendStatus, error) {
	if mock.CreateAttendStatusFunc == nil {
		panic("StoreMock.CreateAttendStatusFunc: method is nil but Store.CreateAttendStatus was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Param parameter.CreateAttendStatusParam
	}{
		Ctx:   ctx,
		Param: param,
	}
	mock.lockCreateAttendStatus.Lock()
	mock.calls.CreateAttendStatus = append(mock.calls.CreateAttendStatus, callInfo)
	mock.lockCreateAttendStatus.Unlock()
	return mock.CreateAttendStatusFunc(ctx, param)
}

// CreateAttendStatusCalls gets all the calls that were made to CreateAttendStatus.
// Check the length with:
//
//	len(mockedStore.CreateAttendStatusCalls())
func (mock *StoreMock) CreateAttendStatusCalls() []struct {
	Ctx   context.Context
	Param parameter.CreateAttendStatusParam
} {
	var calls []struct {
		Ctx   context.Context
		Param parameter.CreateAttendStatusParam
	}
	mock.lockCreateAttendStatus.RLock()
	calls = mock.calls.CreateAttendStatus
	mock.lockCreateAttendStatus.RUnlock()
	return calls
}

// CreateAttendStatusWithSd calls CreateAttendStatusWithSdFunc.
func (mock *StoreMock) CreateAttendStatusWithSd(ctx context.Context, sd Sd, param parameter.CreateAttendStatusParam) (entity.AttendStatus, error) {
	if mock.CreateAttendStatusWithSdFunc == nil {
		panic("StoreMock.CreateAttendStatusWithSdFunc: method is nil but Store.CreateAttendStatusWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateAttendStatusParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Param: param,
	}
	mock.lockCreateAttendStatusWithSd.Lock()
	mock.calls.CreateAttendStatusWithSd = append(mock.calls.CreateAttendStatusWithSd, callInfo)
	mock.lockCreateAttendStatusWithSd.Unlock()
	return mock.CreateAttendStatusWithSdFunc(ctx, sd, param)
}

// CreateAttendStatusWithSdCalls gets all the calls that were made to CreateAttendStatusWithSd.
// Check the length with:
//
//	len(mockedStore.CreateAttendStatusWithSdCalls())
func (mock *StoreMock) CreateAttendStatusWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Param parameter.CreateAttendStatusParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateAttendStatusParam
	}
	mock.lockCreateAttendStatusWithSd.RLock()
	calls = mock.calls.CreateAttendStatusWithSd
	mock.lockCreateAttendStatusWithSd.RUnlock()
	return calls
}

// CreateAttendStatuses calls CreateAttendStatusesFunc.
func (mock *StoreMock) CreateAttendStatuses(ctx context.Context, params []parameter.CreateAttendStatusParam) (int64, error) {
	if mock.CreateAttendStatusesFunc == nil {
		panic("StoreMock.CreateAttendStatusesFunc: method is nil but Store.CreateAttendStatuses was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params []parameter.CreateAttendStatusParam
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockCreateAttendStatuses.Lock()
	mock.calls.CreateAttendStatuses = append(mock.calls.CreateAttendStatuses, callInfo)
	mock.lockCreateAttendStatuses.Unlock()
	return mock.CreateAttendStatusesFunc(ctx, params)
}

// CreateAttendStatusesCalls gets all the calls that were made to CreateAttendStatuses.
// Check the length with:
//
//	len(mockedStore.CreateAttendStatusesCalls())
func (mock *StoreMock) CreateAttendStatusesCalls() []struct {
	Ctx    context.Context
	Params []parameter.CreateAttendStatusParam
} {
	var calls []struct {
		Ctx    context.Context
		Params []parameter.CreateAttendStatusParam
	}
	mock.lockCreateAttendStatuses.RLock()
	calls = mock.calls.CreateAttendStatuses
	mock.lockCreateAttendStatuses.RUnlock()
	return calls
}

// CreateAttendStatusesWithSd calls CreateAttendStatusesWithSdFunc.
func (mock *StoreMock) CreateAttendStatusesWithSd(ctx context.Context, sd Sd, params []parameter.CreateAttendStatusParam) (int64, error) {
	if mock.CreateAttendStatusesWithSdFunc == nil {
		panic("StoreMock.CreateAttendStatusesWithSdFunc: method is nil but Store.CreateAttendStatusesWithSd was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateAttendStatusParam
	}{
		Ctx:    ctx,
		Sd:     sd,
		Params: params,
	}
	mock.lockCreateAttendStatusesWithSd.Lock()
	mock.calls.CreateAttendStatusesWithSd = append(mock.calls.CreateAttendStatusesWithSd, callInfo)
	mock.lockCreateAttendStatusesWithSd.Unlock()
	return mock.CreateAttendStatusesWithSdFunc(ctx, sd, params)
}

// CreateAttendStatusesWithSdCalls gets all the calls that were made to CreateAttendStatusesWithSd.
// Check the length with:
//
//	len(mockedStore.CreateAttendStatusesWithSdCalls())
func (mock *StoreMock) CreateAttendStatusesWithSdCalls() []struct {
	Ctx    context.Context
	Sd     Sd
	Params []parameter.CreateAttendStatusParam
} {
	var calls []struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateAttendStatusParam
	}
	mock.lockCreateAttendStatusesWithSd.RLock()
	calls = mock.calls.CreateAttendStatusesWithSd
	mock.lockCreateAttendStatusesWithSd.RUnlock()
	return calls
}

// CreateAttendanceType calls CreateAttendanceTypeFunc.
func (mock *StoreMock) CreateAttendanceType(ctx context.Context, param parameter.CreateAttendanceTypeParam) (entity.AttendanceType, error) {
	if mock.CreateAttendanceTypeFunc == nil {
		panic("StoreMock.CreateAttendanceTypeFunc: method is nil but Store.CreateAttendanceType was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Param parameter.CreateAttendanceTypeParam
	}{
		Ctx:   ctx,
		Param: param,
	}
	mock.lockCreateAttendanceType.Lock()
	mock.calls.CreateAttendanceType = append(mock.calls.CreateAttendanceType, callInfo)
	mock.lockCreateAttendanceType.Unlock()
	return mock.CreateAttendanceTypeFunc(ctx, param)
}

// CreateAttendanceTypeCalls gets all the calls that were made to CreateAttendanceType.
// Check the length with:
//
//	len(mockedStore.CreateAttendanceTypeCalls())
func (mock *StoreMock) CreateAttendanceTypeCalls() []struct {
	Ctx   context.Context
	Param parameter.CreateAttendanceTypeParam
} {
	var calls []struct {
		Ctx   context.Context
		Param parameter.CreateAttendanceTypeParam
	}
	mock.lockCreateAttendanceType.RLock()
	calls = mock.calls.CreateAttendanceType
	mock.lockCreateAttendanceType.RUnlock()
	return calls
}

// CreateAttendanceTypeWithSd calls CreateAttendanceTypeWithSdFunc.
func (mock *StoreMock) CreateAttendanceTypeWithSd(ctx context.Context, sd Sd, param parameter.CreateAttendanceTypeParam) (entity.AttendanceType, error) {
	if mock.CreateAttendanceTypeWithSdFunc == nil {
		panic("StoreMock.CreateAttendanceTypeWithSdFunc: method is nil but Store.CreateAttendanceTypeWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateAttendanceTypeParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Param: param,
	}
	mock.lockCreateAttendanceTypeWithSd.Lock()
	mock.calls.CreateAttendanceTypeWithSd = append(mock.calls.CreateAttendanceTypeWithSd, callInfo)
	mock.lockCreateAttendanceTypeWithSd.Unlock()
	return mock.CreateAttendanceTypeWithSdFunc(ctx, sd, param)
}

// CreateAttendanceTypeWithSdCalls gets all the calls that were made to CreateAttendanceTypeWithSd.
// Check the length with:
//
//	len(mockedStore.CreateAttendanceTypeWithSdCalls())
func (mock *StoreMock) CreateAttendanceTypeWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Param parameter.CreateAttendanceTypeParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateAttendanceTypeParam
	}
	mock.lockCreateAttendanceTypeWithSd.RLock()
	calls = mock.calls.CreateAttendanceTypeWithSd
	mock.lockCreateAttendanceTypeWithSd.RUnlock()
	return calls
}

// CreateAttendanceTypes calls CreateAttendanceTypesFunc.
func (mock *StoreMock) CreateAttendanceTypes(ctx context.Context, params []parameter.CreateAttendanceTypeParam) (int64, error) {
	if mock.CreateAttendanceTypesFunc == nil {
		panic("StoreMock.CreateAttendanceTypesFunc: method is nil but Store.CreateAttendanceTypes was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params []parameter.CreateAttendanceTypeParam
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockCreateAttendanceTypes.Lock()
	mock.calls.CreateAttendanceTypes = append(mock.calls.CreateAttendanceTypes, callInfo)
	mock.lockCreateAttendanceTypes.Unlock()
	return mock.CreateAttendanceTypesFunc(ctx, params)
}

// CreateAttendanceTypesCalls gets all the calls that were made to CreateAttendanceTypes.
// Check the length with:
//
//	len(mockedStore.CreateAttendanceTypesCalls())
func (mock *StoreMock) CreateAttendanceTypesCalls() []struct {
	Ctx    context.Context
	Params []parameter.CreateAttendanceTypeParam
} {
	var calls []struct {
		Ctx    context.Context
		Params []parameter.CreateAttendanceTypeParam
	}
	mock.lockCreateAttendanceTypes.RLock()
	calls = mock.calls.CreateAttendanceTypes
	mock.lockCreateAttendanceTypes.RUnlock()
	return calls
}

// CreateAttendanceTypesWithSd calls CreateAttendanceTypesWithSdFunc.
func (mock *StoreMock) CreateAttendanceTypesWithSd(ctx context.Context, sd Sd, params []parameter.CreateAttendanceTypeParam) (int64, error) {
	if mock.CreateAttendanceTypesWithSdFunc == nil {
		panic("StoreMock.CreateAttendanceTypesWithSdFunc: method is nil but Store.CreateAttendanceTypesWithSd was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateAttendanceTypeParam
	}{
		Ctx:    ctx,
		Sd:     sd,
		Params: params,
	}
	mock.lockCreateAttendanceTypesWithSd.Lock()
	mock.calls.CreateAttendanceTypesWithSd = append(mock.calls.CreateAttendanceTypesWithSd, callInfo)
	mock.lockCreateAttendanceTypesWithSd.Unlock()
	return mock.CreateAttendanceTypesWithSdFunc(ctx, sd, params)
}

// CreateAttendanceTypesWithSdCalls gets all the calls that were made to CreateAttendanceTypesWithSd.
// Check the length with:
//
//	len(mockedStore.CreateAttendanceTypesWithSdCalls())
func (mock *StoreMock) CreateAttendanceTypesWithSdCalls() []struct {
	Ctx    context.Context
	Sd     Sd
	Params []parameter.CreateAttendanceTypeParam
} {
	var calls []struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateAttendanceTypeParam
	}
	mock.lockCreateAttendanceTypesWithSd.RLock()
	calls = mock.calls.CreateAttendanceTypesWithSd
	mock.lockCreateAttendanceTypesWithSd.RUnlock()
	return calls
}

// CreateEventType calls CreateEventTypeFunc.
func (mock *StoreMock) CreateEventType(ctx context.Context, param parameter.CreateEventTypeParam) (entity.EventType, error) {
	if mock.CreateEventTypeFunc == nil {
		panic("StoreMock.CreateEventTypeFunc: method is nil but Store.CreateEventType was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Param parameter.CreateEventTypeParam
	}{
		Ctx:   ctx,
		Param: param,
	}
	mock.lockCreateEventType.Lock()
	mock.calls.CreateEventType = append(mock.calls.CreateEventType, callInfo)
	mock.lockCreateEventType.Unlock()
	return mock.CreateEventTypeFunc(ctx, param)
}

// CreateEventTypeCalls gets all the calls that were made to CreateEventType.
// Check the length with:
//
//	len(mockedStore.CreateEventTypeCalls())
func (mock *StoreMock) CreateEventTypeCalls() []struct {
	Ctx   context.Context
	Param parameter.CreateEventTypeParam
} {
	var calls []struct {
		Ctx   context.Context
		Param parameter.CreateEventTypeParam
	}
	mock.lockCreateEventType.RLock()
	calls = mock.calls.CreateEventType
	mock.lockCreateEventType.RUnlock()
	return calls
}

// CreateEventTypeWithSd calls CreateEventTypeWithSdFunc.
func (mock *StoreMock) CreateEventTypeWithSd(ctx context.Context, sd Sd, param parameter.CreateEventTypeParam) (entity.EventType, error) {
	if mock.CreateEventTypeWithSdFunc == nil {
		panic("StoreMock.CreateEventTypeWithSdFunc: method is nil but Store.CreateEventTypeWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateEventTypeParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Param: param,
	}
	mock.lockCreateEventTypeWithSd.Lock()
	mock.calls.CreateEventTypeWithSd = append(mock.calls.CreateEventTypeWithSd, callInfo)
	mock.lockCreateEventTypeWithSd.Unlock()
	return mock.CreateEventTypeWithSdFunc(ctx, sd, param)
}

// CreateEventTypeWithSdCalls gets all the calls that were made to CreateEventTypeWithSd.
// Check the length with:
//
//	len(mockedStore.CreateEventTypeWithSdCalls())
func (mock *StoreMock) CreateEventTypeWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Param parameter.CreateEventTypeParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateEventTypeParam
	}
	mock.lockCreateEventTypeWithSd.RLock()
	calls = mock.calls.CreateEventTypeWithSd
	mock.lockCreateEventTypeWithSd.RUnlock()
	return calls
}

// CreateEventTypes calls CreateEventTypesFunc.
func (mock *StoreMock) CreateEventTypes(ctx context.Context, params []parameter.CreateEventTypeParam) (int64, error) {
	if mock.CreateEventTypesFunc == nil {
		panic("StoreMock.CreateEventTypesFunc: method is nil but Store.CreateEventTypes was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params []parameter.CreateEventTypeParam
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockCreateEventTypes.Lock()
	mock.calls.CreateEventTypes = append(mock.calls.CreateEventTypes, callInfo)
	mock.lockCreateEventTypes.Unlock()
	return mock.CreateEventTypesFunc(ctx, params)
}

// CreateEventTypesCalls gets all the calls that were made to CreateEventTypes.
// Check the length with:
//
//	len(mockedStore.CreateEventTypesCalls())
func (mock *StoreMock) CreateEventTypesCalls() []struct {
	Ctx    context.Context
	Params []parameter.CreateEventTypeParam
} {
	var calls []struct {
		Ctx    context.Context
		Params []parameter.CreateEventTypeParam
	}
	mock.lockCreateEventTypes.RLock()
	calls = mock.calls.CreateEventTypes
	mock.lockCreateEventTypes.RUnlock()
	return calls
}

// CreateEventTypesWithSd calls CreateEventTypesWithSdFunc.
func (mock *StoreMock) CreateEventTypesWithSd(ctx context.Context, sd Sd, params []parameter.CreateEventTypeParam) (int64, error) {
	if mock.CreateEventTypesWithSdFunc == nil {
		panic("StoreMock.CreateEventTypesWithSdFunc: method is nil but Store.CreateEventTypesWithSd was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateEventTypeParam
	}{
		Ctx:    ctx,
		Sd:     sd,
		Params: params,
	}
	mock.lockCreateEventTypesWithSd.Lock()
	mock.calls.CreateEventTypesWithSd = append(mock.calls.CreateEventTypesWithSd, callInfo)
	mock.lockCreateEventTypesWithSd.Unlock()
	return mock.CreateEventTypesWithSdFunc(ctx, sd, params)
}

// CreateEventTypesWithSdCalls gets all the calls that were made to CreateEventTypesWithSd.
// Check the length with:
//
//	len(mockedStore.CreateEventTypesWithSdCalls())
func (mock *StoreMock) CreateEventTypesWithSdCalls() []struct {
	Ctx    context.Context
	Sd     Sd
	Params []parameter.CreateEventTypeParam
} {
	var calls []struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateEventTypeParam
	}
	mock.lockCreateEventTypesWithSd.RLock()
	calls = mock.calls.CreateEventTypesWithSd
	mock.lockCreateEventTypesWithSd.RUnlock()
	return calls
}

// CreateMimeType calls CreateMimeTypeFunc.
func (mock *StoreMock) CreateMimeType(ctx context.Context, param parameter.CreateMimeTypeParam) (entity.MimeType, error) {
	if mock.CreateMimeTypeFunc == nil {
		panic("StoreMock.CreateMimeTypeFunc: method is nil but Store.CreateMimeType was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Param parameter.CreateMimeTypeParam
	}{
		Ctx:   ctx,
		Param: param,
	}
	mock.lockCreateMimeType.Lock()
	mock.calls.CreateMimeType = append(mock.calls.CreateMimeType, callInfo)
	mock.lockCreateMimeType.Unlock()
	return mock.CreateMimeTypeFunc(ctx, param)
}

// CreateMimeTypeCalls gets all the calls that were made to CreateMimeType.
// Check the length with:
//
//	len(mockedStore.CreateMimeTypeCalls())
func (mock *StoreMock) CreateMimeTypeCalls() []struct {
	Ctx   context.Context
	Param parameter.CreateMimeTypeParam
} {
	var calls []struct {
		Ctx   context.Context
		Param parameter.CreateMimeTypeParam
	}
	mock.lockCreateMimeType.RLock()
	calls = mock.calls.CreateMimeType
	mock.lockCreateMimeType.RUnlock()
	return calls
}

// CreateMimeTypeWithSd calls CreateMimeTypeWithSdFunc.
func (mock *StoreMock) CreateMimeTypeWithSd(ctx context.Context, sd Sd, param parameter.CreateMimeTypeParam) (entity.MimeType, error) {
	if mock.CreateMimeTypeWithSdFunc == nil {
		panic("StoreMock.CreateMimeTypeWithSdFunc: method is nil but Store.CreateMimeTypeWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateMimeTypeParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Param: param,
	}
	mock.lockCreateMimeTypeWithSd.Lock()
	mock.calls.CreateMimeTypeWithSd = append(mock.calls.CreateMimeTypeWithSd, callInfo)
	mock.lockCreateMimeTypeWithSd.Unlock()
	return mock.CreateMimeTypeWithSdFunc(ctx, sd, param)
}

// CreateMimeTypeWithSdCalls gets all the calls that were made to CreateMimeTypeWithSd.
// Check the length with:
//
//	len(mockedStore.CreateMimeTypeWithSdCalls())
func (mock *StoreMock) CreateMimeTypeWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Param parameter.CreateMimeTypeParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateMimeTypeParam
	}
	mock.lockCreateMimeTypeWithSd.RLock()
	calls = mock.calls.CreateMimeTypeWithSd
	mock.lockCreateMimeTypeWithSd.RUnlock()
	return calls
}

// CreateMimeTypes calls CreateMimeTypesFunc.
func (mock *StoreMock) CreateMimeTypes(ctx context.Context, params []parameter.CreateMimeTypeParam) (int64, error) {
	if mock.CreateMimeTypesFunc == nil {
		panic("StoreMock.CreateMimeTypesFunc: method is nil but Store.CreateMimeTypes was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params []parameter.CreateMimeTypeParam
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockCreateMimeTypes.Lock()
	mock.calls.CreateMimeTypes = append(mock.calls.CreateMimeTypes, callInfo)
	mock.lockCreateMimeTypes.Unlock()
	return mock.CreateMimeTypesFunc(ctx, params)
}

// CreateMimeTypesCalls gets all the calls that were made to CreateMimeTypes.
// Check the length with:
//
//	len(mockedStore.CreateMimeTypesCalls())
func (mock *StoreMock) CreateMimeTypesCalls() []struct {
	Ctx    context.Context
	Params []parameter.CreateMimeTypeParam
} {
	var calls []struct {
		Ctx    context.Context
		Params []parameter.CreateMimeTypeParam
	}
	mock.lockCreateMimeTypes.RLock()
	calls = mock.calls.CreateMimeTypes
	mock.lockCreateMimeTypes.RUnlock()
	return calls
}

// CreateMimeTypesWithSd calls CreateMimeTypesWithSdFunc.
func (mock *StoreMock) CreateMimeTypesWithSd(ctx context.Context, sd Sd, params []parameter.CreateMimeTypeParam) (int64, error) {
	if mock.CreateMimeTypesWithSdFunc == nil {
		panic("StoreMock.CreateMimeTypesWithSdFunc: method is nil but Store.CreateMimeTypesWithSd was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateMimeTypeParam
	}{
		Ctx:    ctx,
		Sd:     sd,
		Params: params,
	}
	mock.lockCreateMimeTypesWithSd.Lock()
	mock.calls.CreateMimeTypesWithSd = append(mock.calls.CreateMimeTypesWithSd, callInfo)
	mock.lockCreateMimeTypesWithSd.Unlock()
	return mock.CreateMimeTypesWithSdFunc(ctx, sd, params)
}

// CreateMimeTypesWithSdCalls gets all the calls that were made to CreateMimeTypesWithSd.
// Check the length with:
//
//	len(mockedStore.CreateMimeTypesWithSdCalls())
func (mock *StoreMock) CreateMimeTypesWithSdCalls() []struct {
	Ctx    context.Context
	Sd     Sd
	Params []parameter.CreateMimeTypeParam
} {
	var calls []struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateMimeTypeParam
	}
	mock.lockCreateMimeTypesWithSd.RLock()
	calls = mock.calls.CreateMimeTypesWithSd
	mock.lockCreateMimeTypesWithSd.RUnlock()
	return calls
}

// CreatePermission calls CreatePermissionFunc.
func (mock *StoreMock) CreatePermission(ctx context.Context, param parameter.CreatePermissionParam) (entity.Permission, error) {
	if mock.CreatePermissionFunc == nil {
		panic("StoreMock.CreatePermissionFunc: method is nil but Store.CreatePermission was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Param parameter.CreatePermissionParam
	}{
		Ctx:   ctx,
		Param: param,
	}
	mock.lockCreatePermission.Lock()
	mock.calls.CreatePermission = append(mock.calls.CreatePermission, callInfo)
	mock.lockCreatePermission.Unlock()
	return mock.CreatePermissionFunc(ctx, param)
}

// CreatePermissionCalls gets all the calls that were made to CreatePermission.
// Check the length with:
//
//	len(mockedStore.CreatePermissionCalls())
func (mock *StoreMock) CreatePermissionCalls() []struct {
	Ctx   context.Context
	Param parameter.CreatePermissionParam
} {
	var calls []struct {
		Ctx   context.Context
		Param parameter.CreatePermissionParam
	}
	mock.lockCreatePermission.RLock()
	calls = mock.calls.CreatePermission
	mock.lockCreatePermission.RUnlock()
	return calls
}

// CreatePermissionCategories calls CreatePermissionCategoriesFunc.
func (mock *StoreMock) CreatePermissionCategories(ctx context.Context, params []parameter.CreatePermissionCategoryParam) (int64, error) {
	if mock.CreatePermissionCategoriesFunc == nil {
		panic("StoreMock.CreatePermissionCategoriesFunc: method is nil but Store.CreatePermissionCategories was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params []parameter.CreatePermissionCategoryParam
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockCreatePermissionCategories.Lock()
	mock.calls.CreatePermissionCategories = append(mock.calls.CreatePermissionCategories, callInfo)
	mock.lockCreatePermissionCategories.Unlock()
	return mock.CreatePermissionCategoriesFunc(ctx, params)
}

// CreatePermissionCategoriesCalls gets all the calls that were made to CreatePermissionCategories.
// Check the length with:
//
//	len(mockedStore.CreatePermissionCategoriesCalls())
func (mock *StoreMock) CreatePermissionCategoriesCalls() []struct {
	Ctx    context.Context
	Params []parameter.CreatePermissionCategoryParam
} {
	var calls []struct {
		Ctx    context.Context
		Params []parameter.CreatePermissionCategoryParam
	}
	mock.lockCreatePermissionCategories.RLock()
	calls = mock.calls.CreatePermissionCategories
	mock.lockCreatePermissionCategories.RUnlock()
	return calls
}

// CreatePermissionCategoriesWithSd calls CreatePermissionCategoriesWithSdFunc.
func (mock *StoreMock) CreatePermissionCategoriesWithSd(ctx context.Context, sd Sd, params []parameter.CreatePermissionCategoryParam) (int64, error) {
	if mock.CreatePermissionCategoriesWithSdFunc == nil {
		panic("StoreMock.CreatePermissionCategoriesWithSdFunc: method is nil but Store.CreatePermissionCategoriesWithSd was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreatePermissionCategoryParam
	}{
		Ctx:    ctx,
		Sd:     sd,
		Params: params,
	}
	mock.lockCreatePermissionCategoriesWithSd.Lock()
	mock.calls.CreatePermissionCategoriesWithSd = append(mock.calls.CreatePermissionCategoriesWithSd, callInfo)
	mock.lockCreatePermissionCategoriesWithSd.Unlock()
	return mock.CreatePermissionCategoriesWithSdFunc(ctx, sd, params)
}

// CreatePermissionCategoriesWithSdCalls gets all the calls that were made to CreatePermissionCategoriesWithSd.
// Check the length with:
//
//	len(mockedStore.CreatePermissionCategoriesWithSdCalls())
func (mock *StoreMock) CreatePermissionCategoriesWithSdCalls() []struct {
	Ctx    context.Context
	Sd     Sd
	Params []parameter.CreatePermissionCategoryParam
} {
	var calls []struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreatePermissionCategoryParam
	}
	mock.lockCreatePermissionCategoriesWithSd.RLock()
	calls = mock.calls.CreatePermissionCategoriesWithSd
	mock.lockCreatePermissionCategoriesWithSd.RUnlock()
	return calls
}

// CreatePermissionCategory calls CreatePermissionCategoryFunc.
func (mock *StoreMock) CreatePermissionCategory(ctx context.Context, param parameter.CreatePermissionCategoryParam) (entity.PermissionCategory, error) {
	if mock.CreatePermissionCategoryFunc == nil {
		panic("StoreMock.CreatePermissionCategoryFunc: method is nil but Store.CreatePermissionCategory was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Param parameter.CreatePermissionCategoryParam
	}{
		Ctx:   ctx,
		Param: param,
	}
	mock.lockCreatePermissionCategory.Lock()
	mock.calls.CreatePermissionCategory = append(mock.calls.CreatePermissionCategory, callInfo)
	mock.lockCreatePermissionCategory.Unlock()
	return mock.CreatePermissionCategoryFunc(ctx, param)
}

// CreatePermissionCategoryCalls gets all the calls that were made to CreatePermissionCategory.
// Check the length with:
//
//	len(mockedStore.CreatePermissionCategoryCalls())
func (mock *StoreMock) CreatePermissionCategoryCalls() []struct {
	Ctx   context.Context
	Param parameter.CreatePermissionCategoryParam
} {
	var calls []struct {
		Ctx   context.Context
		Param parameter.CreatePermissionCategoryParam
	}
	mock.lockCreatePermissionCategory.RLock()
	calls = mock.calls.CreatePermissionCategory
	mock.lockCreatePermissionCategory.RUnlock()
	return calls
}

// CreatePermissionCategoryWithSd calls CreatePermissionCategoryWithSdFunc.
func (mock *StoreMock) CreatePermissionCategoryWithSd(ctx context.Context, sd Sd, param parameter.CreatePermissionCategoryParam) (entity.PermissionCategory, error) {
	if mock.CreatePermissionCategoryWithSdFunc == nil {
		panic("StoreMock.CreatePermissionCategoryWithSdFunc: method is nil but Store.CreatePermissionCategoryWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreatePermissionCategoryParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Param: param,
	}
	mock.lockCreatePermissionCategoryWithSd.Lock()
	mock.calls.CreatePermissionCategoryWithSd = append(mock.calls.CreatePermissionCategoryWithSd, callInfo)
	mock.lockCreatePermissionCategoryWithSd.Unlock()
	return mock.CreatePermissionCategoryWithSdFunc(ctx, sd, param)
}

// CreatePermissionCategoryWithSdCalls gets all the calls that were made to CreatePermissionCategoryWithSd.
// Check the length with:
//
//	len(mockedStore.CreatePermissionCategoryWithSdCalls())
func (mock *StoreMock) CreatePermissionCategoryWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Param parameter.CreatePermissionCategoryParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreatePermissionCategoryParam
	}
	mock.lockCreatePermissionCategoryWithSd.RLock()
	calls = mock.calls.CreatePermissionCategoryWithSd
	mock.lockCreatePermissionCategoryWithSd.RUnlock()
	return calls
}

// CreatePermissionWithSd calls CreatePermissionWithSdFunc.
func (mock *StoreMock) CreatePermissionWithSd(ctx context.Context, sd Sd, param parameter.CreatePermissionParam) (entity.Permission, error) {
	if mock.CreatePermissionWithSdFunc == nil {
		panic("StoreMock.CreatePermissionWithSdFunc: method is nil but Store.CreatePermissionWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreatePermissionParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Param: param,
	}
	mock.lockCreatePermissionWithSd.Lock()
	mock.calls.CreatePermissionWithSd = append(mock.calls.CreatePermissionWithSd, callInfo)
	mock.lockCreatePermissionWithSd.Unlock()
	return mock.CreatePermissionWithSdFunc(ctx, sd, param)
}

// CreatePermissionWithSdCalls gets all the calls that were made to CreatePermissionWithSd.
// Check the length with:
//
//	len(mockedStore.CreatePermissionWithSdCalls())
func (mock *StoreMock) CreatePermissionWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Param parameter.CreatePermissionParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreatePermissionParam
	}
	mock.lockCreatePermissionWithSd.RLock()
	calls = mock.calls.CreatePermissionWithSd
	mock.lockCreatePermissionWithSd.RUnlock()
	return calls
}

// CreatePermissions calls CreatePermissionsFunc.
func (mock *StoreMock) CreatePermissions(ctx context.Context, params []parameter.CreatePermissionParam) (int64, error) {
	if mock.CreatePermissionsFunc == nil {
		panic("StoreMock.CreatePermissionsFunc: method is nil but Store.CreatePermissions was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params []parameter.CreatePermissionParam
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockCreatePermissions.Lock()
	mock.calls.CreatePermissions = append(mock.calls.CreatePermissions, callInfo)
	mock.lockCreatePermissions.Unlock()
	return mock.CreatePermissionsFunc(ctx, params)
}

// CreatePermissionsCalls gets all the calls that were made to CreatePermissions.
// Check the length with:
//
//	len(mockedStore.CreatePermissionsCalls())
func (mock *StoreMock) CreatePermissionsCalls() []struct {
	Ctx    context.Context
	Params []parameter.CreatePermissionParam
} {
	var calls []struct {
		Ctx    context.Context
		Params []parameter.CreatePermissionParam
	}
	mock.lockCreatePermissions.RLock()
	calls = mock.calls.CreatePermissions
	mock.lockCreatePermissions.RUnlock()
	return calls
}

// CreatePermissionsWithSd calls CreatePermissionsWithSdFunc.
func (mock *StoreMock) CreatePermissionsWithSd(ctx context.Context, sd Sd, params []parameter.CreatePermissionParam) (int64, error) {
	if mock.CreatePermissionsWithSdFunc == nil {
		panic("StoreMock.CreatePermissionsWithSdFunc: method is nil but Store.CreatePermissionsWithSd was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreatePermissionParam
	}{
		Ctx:    ctx,
		Sd:     sd,
		Params: params,
	}
	mock.lockCreatePermissionsWithSd.Lock()
	mock.calls.CreatePermissionsWithSd = append(mock.calls.CreatePermissionsWithSd, callInfo)
	mock.lockCreatePermissionsWithSd.Unlock()
	return mock.CreatePermissionsWithSdFunc(ctx, sd, params)
}

// CreatePermissionsWithSdCalls gets all the calls that were made to CreatePermissionsWithSd.
// Check the length with:
//
//	len(mockedStore.CreatePermissionsWithSdCalls())
func (mock *StoreMock) CreatePermissionsWithSdCalls() []struct {
	Ctx    context.Context
	Sd     Sd
	Params []parameter.CreatePermissionParam
} {
	var calls []struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreatePermissionParam
	}
	mock.lockCreatePermissionsWithSd.RLock()
	calls = mock.calls.CreatePermissionsWithSd
	mock.lockCreatePermissionsWithSd.RUnlock()
	return calls
}

// CreatePolicies calls CreatePoliciesFunc.
func (mock *StoreMock) CreatePolicies(ctx context.Context, params []parameter.CreatePolicyParam) (int64, error) {
	if mock.CreatePoliciesFunc == nil {
		panic("StoreMock.CreatePoliciesFunc: method is nil but Store.CreatePolicies was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params []parameter.CreatePolicyParam
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockCreatePolicies.Lock()
	mock.calls.CreatePolicies = append(mock.calls.CreatePolicies, callInfo)
	mock.lockCreatePolicies.Unlock()
	return mock.CreatePoliciesFunc(ctx, params)
}

// CreatePoliciesCalls gets all the calls that were made to CreatePolicies.
// Check the length with:
//
//	len(mockedStore.CreatePoliciesCalls())
func (mock *StoreMock) CreatePoliciesCalls() []struct {
	Ctx    context.Context
	Params []parameter.CreatePolicyParam
} {
	var calls []struct {
		Ctx    context.Context
		Params []parameter.CreatePolicyParam
	}
	mock.lockCreatePolicies.RLock()
	calls = mock.calls.CreatePolicies
	mock.lockCreatePolicies.RUnlock()
	return calls
}

// CreatePoliciesWithSd calls CreatePoliciesWithSdFunc.
func (mock *StoreMock) CreatePoliciesWithSd(ctx context.Context, sd Sd, params []parameter.CreatePolicyParam) (int64, error) {
	if mock.CreatePoliciesWithSdFunc == nil {
		panic("StoreMock.CreatePoliciesWithSdFunc: method is nil but Store.CreatePoliciesWithSd was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreatePolicyParam
	}{
		Ctx:    ctx,
		Sd:     sd,
		Params: params,
	}
	mock.lockCreatePoliciesWithSd.Lock()
	mock.calls.CreatePoliciesWithSd = append(mock.calls.CreatePoliciesWithSd, callInfo)
	mock.lockCreatePoliciesWithSd.Unlock()
	return mock.CreatePoliciesWithSdFunc(ctx, sd, params)
}

// CreatePoliciesWithSdCalls gets all the calls that were made to CreatePoliciesWithSd.
// Check the length with:
//
//	len(mockedStore.CreatePoliciesWithSdCalls())
func (mock *StoreMock) CreatePoliciesWithSdCalls() []struct {
	Ctx    context.Context
	Sd     Sd
	Params []parameter.CreatePolicyParam
} {
	var calls []struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreatePolicyParam
	}
	mock.lockCreatePoliciesWithSd.RLock()
	calls = mock.calls.CreatePoliciesWithSd
	mock.lockCreatePoliciesWithSd.RUnlock()
	return calls
}

// CreatePolicy calls CreatePolicyFunc.
func (mock *StoreMock) CreatePolicy(ctx context.Context, param parameter.CreatePolicyParam) (entity.Policy, error) {
	if mock.CreatePolicyFunc == nil {
		panic("StoreMock.CreatePolicyFunc: method is nil but Store.CreatePolicy was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Param parameter.CreatePolicyParam
	}{
		Ctx:   ctx,
		Param: param,
	}
	mock.lockCreatePolicy.Lock()
	mock.calls.CreatePolicy = append(mock.calls.CreatePolicy, callInfo)
	mock.lockCreatePolicy.Unlock()
	return mock.CreatePolicyFunc(ctx, param)
}

// CreatePolicyCalls gets all the calls that were made to CreatePolicy.
// Check the length with:
//
//	len(mockedStore.CreatePolicyCalls())
func (mock *StoreMock) CreatePolicyCalls() []struct {
	Ctx   context.Context
	Param parameter.CreatePolicyParam
} {
	var calls []struct {
		Ctx   context.Context
		Param parameter.CreatePolicyParam
	}
	mock.lockCreatePolicy.RLock()
	calls = mock.calls.CreatePolicy
	mock.lockCreatePolicy.RUnlock()
	return calls
}

// CreatePolicyCategories calls CreatePolicyCategoriesFunc.
func (mock *StoreMock) CreatePolicyCategories(ctx context.Context, params []parameter.CreatePolicyCategoryParam) (int64, error) {
	if mock.CreatePolicyCategoriesFunc == nil {
		panic("StoreMock.CreatePolicyCategoriesFunc: method is nil but Store.CreatePolicyCategories was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params []parameter.CreatePolicyCategoryParam
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockCreatePolicyCategories.Lock()
	mock.calls.CreatePolicyCategories = append(mock.calls.CreatePolicyCategories, callInfo)
	mock.lockCreatePolicyCategories.Unlock()
	return mock.CreatePolicyCategoriesFunc(ctx, params)
}

// CreatePolicyCategoriesCalls gets all the calls that were made to CreatePolicyCategories.
// Check the length with:
//
//	len(mockedStore.CreatePolicyCategoriesCalls())
func (mock *StoreMock) CreatePolicyCategoriesCalls() []struct {
	Ctx    context.Context
	Params []parameter.CreatePolicyCategoryParam
} {
	var calls []struct {
		Ctx    context.Context
		Params []parameter.CreatePolicyCategoryParam
	}
	mock.lockCreatePolicyCategories.RLock()
	calls = mock.calls.CreatePolicyCategories
	mock.lockCreatePolicyCategories.RUnlock()
	return calls
}

// CreatePolicyCategoriesWithSd calls CreatePolicyCategoriesWithSdFunc.
func (mock *StoreMock) CreatePolicyCategoriesWithSd(ctx context.Context, sd Sd, params []parameter.CreatePolicyCategoryParam) (int64, error) {
	if mock.CreatePolicyCategoriesWithSdFunc == nil {
		panic("StoreMock.CreatePolicyCategoriesWithSdFunc: method is nil but Store.CreatePolicyCategoriesWithSd was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreatePolicyCategoryParam
	}{
		Ctx:    ctx,
		Sd:     sd,
		Params: params,
	}
	mock.lockCreatePolicyCategoriesWithSd.Lock()
	mock.calls.CreatePolicyCategoriesWithSd = append(mock.calls.CreatePolicyCategoriesWithSd, callInfo)
	mock.lockCreatePolicyCategoriesWithSd.Unlock()
	return mock.CreatePolicyCategoriesWithSdFunc(ctx, sd, params)
}

// CreatePolicyCategoriesWithSdCalls gets all the calls that were made to CreatePolicyCategoriesWithSd.
// Check the length with:
//
//	len(mockedStore.CreatePolicyCategoriesWithSdCalls())
func (mock *StoreMock) CreatePolicyCategoriesWithSdCalls() []struct {
	Ctx    context.Context
	Sd     Sd
	Params []parameter.CreatePolicyCategoryParam
} {
	var calls []struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreatePolicyCategoryParam
	}
	mock.lockCreatePolicyCategoriesWithSd.RLock()
	calls = mock.calls.CreatePolicyCategoriesWithSd
	mock.lockCreatePolicyCategoriesWithSd.RUnlock()
	return calls
}

// CreatePolicyCategory calls CreatePolicyCategoryFunc.
func (mock *StoreMock) CreatePolicyCategory(ctx context.Context, param parameter.CreatePolicyCategoryParam) (entity.PolicyCategory, error) {
	if mock.CreatePolicyCategoryFunc == nil {
		panic("StoreMock.CreatePolicyCategoryFunc: method is nil but Store.CreatePolicyCategory was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Param parameter.CreatePolicyCategoryParam
	}{
		Ctx:   ctx,
		Param: param,
	}
	mock.lockCreatePolicyCategory.Lock()
	mock.calls.CreatePolicyCategory = append(mock.calls.CreatePolicyCategory, callInfo)
	mock.lockCreatePolicyCategory.Unlock()
	return mock.CreatePolicyCategoryFunc(ctx, param)
}

// CreatePolicyCategoryCalls gets all the calls that were made to CreatePolicyCategory.
// Check the length with:
//
//	len(mockedStore.CreatePolicyCategoryCalls())
func (mock *StoreMock) CreatePolicyCategoryCalls() []struct {
	Ctx   context.Context
	Param parameter.CreatePolicyCategoryParam
} {
	var calls []struct {
		Ctx   context.Context
		Param parameter.CreatePolicyCategoryParam
	}
	mock.lockCreatePolicyCategory.RLock()
	calls = mock.calls.CreatePolicyCategory
	mock.lockCreatePolicyCategory.RUnlock()
	return calls
}

// CreatePolicyCategoryWithSd calls CreatePolicyCategoryWithSdFunc.
func (mock *StoreMock) CreatePolicyCategoryWithSd(ctx context.Context, sd Sd, param parameter.CreatePolicyCategoryParam) (entity.PolicyCategory, error) {
	if mock.CreatePolicyCategoryWithSdFunc == nil {
		panic("StoreMock.CreatePolicyCategoryWithSdFunc: method is nil but Store.CreatePolicyCategoryWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreatePolicyCategoryParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Param: param,
	}
	mock.lockCreatePolicyCategoryWithSd.Lock()
	mock.calls.CreatePolicyCategoryWithSd = append(mock.calls.CreatePolicyCategoryWithSd, callInfo)
	mock.lockCreatePolicyCategoryWithSd.Unlock()
	return mock.CreatePolicyCategoryWithSdFunc(ctx, sd, param)
}

// CreatePolicyCategoryWithSdCalls gets all the calls that were made to CreatePolicyCategoryWithSd.
// Check the length with:
//
//	len(mockedStore.CreatePolicyCategoryWithSdCalls())
func (mock *StoreMock) CreatePolicyCategoryWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Param parameter.CreatePolicyCategoryParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreatePolicyCategoryParam
	}
	mock.lockCreatePolicyCategoryWithSd.RLock()
	calls = mock.calls.CreatePolicyCategoryWithSd
	mock.lockCreatePolicyCategoryWithSd.RUnlock()
	return calls
}

// CreatePolicyWithSd calls CreatePolicyWithSdFunc.
func (mock *StoreMock) CreatePolicyWithSd(ctx context.Context, sd Sd, param parameter.CreatePolicyParam) (entity.Policy, error) {
	if mock.CreatePolicyWithSdFunc == nil {
		panic("StoreMock.CreatePolicyWithSdFunc: method is nil but Store.CreatePolicyWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreatePolicyParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Param: param,
	}
	mock.lockCreatePolicyWithSd.Lock()
	mock.calls.CreatePolicyWithSd = append(mock.calls.CreatePolicyWithSd, callInfo)
	mock.lockCreatePolicyWithSd.Unlock()
	return mock.CreatePolicyWithSdFunc(ctx, sd, param)
}

// CreatePolicyWithSdCalls gets all the calls that were made to CreatePolicyWithSd.
// Check the length with:
//
//	len(mockedStore.CreatePolicyWithSdCalls())
func (mock *StoreMock) CreatePolicyWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Param parameter.CreatePolicyParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreatePolicyParam
	}
	mock.lockCreatePolicyWithSd.RLock()
	calls = mock.calls.CreatePolicyWithSd
	mock.lockCreatePolicyWithSd.RUnlock()
	return calls
}

// CreateRecordType calls CreateRecordTypeFunc.
func (mock *StoreMock) CreateRecordType(ctx context.Context, param parameter.CreateRecordTypeParam) (entity.RecordType, error) {
	if mock.CreateRecordTypeFunc == nil {
		panic("StoreMock.CreateRecordTypeFunc: method is nil but Store.CreateRecordType was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Param parameter.CreateRecordTypeParam
	}{
		Ctx:   ctx,
		Param: param,
	}
	mock.lockCreateRecordType.Lock()
	mock.calls.CreateRecordType = append(mock.calls.CreateRecordType, callInfo)
	mock.lockCreateRecordType.Unlock()
	return mock.CreateRecordTypeFunc(ctx, param)
}

// CreateRecordTypeCalls gets all the calls that were made to CreateRecordType.
// Check the length with:
//
//	len(mockedStore.CreateRecordTypeCalls())
func (mock *StoreMock) CreateRecordTypeCalls() []struct {
	Ctx   context.Context
	Param parameter.CreateRecordTypeParam
} {
	var calls []struct {
		Ctx   context.Context
		Param parameter.CreateRecordTypeParam
	}
	mock.lockCreateRecordType.RLock()
	calls = mock.calls.CreateRecordType
	mock.lockCreateRecordType.RUnlock()
	return calls
}

// CreateRecordTypeWithSd calls CreateRecordTypeWithSdFunc.
func (mock *StoreMock) CreateRecordTypeWithSd(ctx context.Context, sd Sd, param parameter.CreateRecordTypeParam) (entity.RecordType, error) {
	if mock.CreateRecordTypeWithSdFunc == nil {
		panic("StoreMock.CreateRecordTypeWithSdFunc: method is nil but Store.CreateRecordTypeWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateRecordTypeParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Param: param,
	}
	mock.lockCreateRecordTypeWithSd.Lock()
	mock.calls.CreateRecordTypeWithSd = append(mock.calls.CreateRecordTypeWithSd, callInfo)
	mock.lockCreateRecordTypeWithSd.Unlock()
	return mock.CreateRecordTypeWithSdFunc(ctx, sd, param)
}

// CreateRecordTypeWithSdCalls gets all the calls that were made to CreateRecordTypeWithSd.
// Check the length with:
//
//	len(mockedStore.CreateRecordTypeWithSdCalls())
func (mock *StoreMock) CreateRecordTypeWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Param parameter.CreateRecordTypeParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateRecordTypeParam
	}
	mock.lockCreateRecordTypeWithSd.RLock()
	calls = mock.calls.CreateRecordTypeWithSd
	mock.lockCreateRecordTypeWithSd.RUnlock()
	return calls
}

// CreateRecordTypes calls CreateRecordTypesFunc.
func (mock *StoreMock) CreateRecordTypes(ctx context.Context, params []parameter.CreateRecordTypeParam) (int64, error) {
	if mock.CreateRecordTypesFunc == nil {
		panic("StoreMock.CreateRecordTypesFunc: method is nil but Store.CreateRecordTypes was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params []parameter.CreateRecordTypeParam
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockCreateRecordTypes.Lock()
	mock.calls.CreateRecordTypes = append(mock.calls.CreateRecordTypes, callInfo)
	mock.lockCreateRecordTypes.Unlock()
	return mock.CreateRecordTypesFunc(ctx, params)
}

// CreateRecordTypesCalls gets all the calls that were made to CreateRecordTypes.
// Check the length with:
//
//	len(mockedStore.CreateRecordTypesCalls())
func (mock *StoreMock) CreateRecordTypesCalls() []struct {
	Ctx    context.Context
	Params []parameter.CreateRecordTypeParam
} {
	var calls []struct {
		Ctx    context.Context
		Params []parameter.CreateRecordTypeParam
	}
	mock.lockCreateRecordTypes.RLock()
	calls = mock.calls.CreateRecordTypes
	mock.lockCreateRecordTypes.RUnlock()
	return calls
}

// CreateRecordTypesWithSd calls CreateRecordTypesWithSdFunc.
func (mock *StoreMock) CreateRecordTypesWithSd(ctx context.Context, sd Sd, params []parameter.CreateRecordTypeParam) (int64, error) {
	if mock.CreateRecordTypesWithSdFunc == nil {
		panic("StoreMock.CreateRecordTypesWithSdFunc: method is nil but Store.CreateRecordTypesWithSd was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateRecordTypeParam
	}{
		Ctx:    ctx,
		Sd:     sd,
		Params: params,
	}
	mock.lockCreateRecordTypesWithSd.Lock()
	mock.calls.CreateRecordTypesWithSd = append(mock.calls.CreateRecordTypesWithSd, callInfo)
	mock.lockCreateRecordTypesWithSd.Unlock()
	return mock.CreateRecordTypesWithSdFunc(ctx, sd, params)
}

// CreateRecordTypesWithSdCalls gets all the calls that were made to CreateRecordTypesWithSd.
// Check the length with:
//
//	len(mockedStore.CreateRecordTypesWithSdCalls())
func (mock *StoreMock) CreateRecordTypesWithSdCalls() []struct {
	Ctx    context.Context
	Sd     Sd
	Params []parameter.CreateRecordTypeParam
} {
	var calls []struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateRecordTypeParam
	}
	mock.lockCreateRecordTypesWithSd.RLock()
	calls = mock.calls.CreateRecordTypesWithSd
	mock.lockCreateRecordTypesWithSd.RUnlock()
	return calls
}

// DeleteAbsence calls DeleteAbsenceFunc.
func (mock *StoreMock) DeleteAbsence(ctx context.Context, absenceID uuid.UUID) error {
	if mock.DeleteAbsenceFunc == nil {
		panic("StoreMock.DeleteAbsenceFunc: method is nil but Store.DeleteAbsence was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		AbsenceID uuid.UUID
	}{
		Ctx:       ctx,
		AbsenceID: absenceID,
	}
	mock.lockDeleteAbsence.Lock()
	mock.calls.DeleteAbsence = append(mock.calls.DeleteAbsence, callInfo)
	mock.lockDeleteAbsence.Unlock()
	return mock.DeleteAbsenceFunc(ctx, absenceID)
}

// DeleteAbsenceCalls gets all the calls that were made to DeleteAbsence.
// Check the length with:
//
//	len(mockedStore.DeleteAbsenceCalls())
func (mock *StoreMock) DeleteAbsenceCalls() []struct {
	Ctx       context.Context
	AbsenceID uuid.UUID
} {
	var calls []struct {
		Ctx       context.Context
		AbsenceID uuid.UUID
	}
	mock.lockDeleteAbsence.RLock()
	calls = mock.calls.DeleteAbsence
	mock.lockDeleteAbsence.RUnlock()
	return calls
}

// DeleteAbsenceWithSd calls DeleteAbsenceWithSdFunc.
func (mock *StoreMock) DeleteAbsenceWithSd(ctx context.Context, sd Sd, absenceID uuid.UUID) error {
	if mock.DeleteAbsenceWithSdFunc == nil {
		panic("StoreMock.DeleteAbsenceWithSdFunc: method is nil but Store.DeleteAbsenceWithSd was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Sd        Sd
		AbsenceID uuid.UUID
	}{
		Ctx:       ctx,
		Sd:        sd,
		AbsenceID: absenceID,
	}
	mock.lockDeleteAbsenceWithSd.Lock()
	mock.calls.DeleteAbsenceWithSd = append(mock.calls.DeleteAbsenceWithSd, callInfo)
	mock.lockDeleteAbsenceWithSd.Unlock()
	return mock.DeleteAbsenceWithSdFunc(ctx, sd, absenceID)
}

// DeleteAbsenceWithSdCalls gets all the calls that were made to DeleteAbsenceWithSd.
// Check the length with:
//
//	len(mockedStore.DeleteAbsenceWithSdCalls())
func (mock *StoreMock) DeleteAbsenceWithSdCalls() []struct {
	Ctx       context.Context
	Sd        Sd
	AbsenceID uuid.UUID
} {
	var calls []struct {
		Ctx       context.Context
		Sd        Sd
		AbsenceID uuid.UUID
	}
	mock.lockDeleteAbsenceWithSd.RLock()
	calls = mock.calls.DeleteAbsenceWithSd
	mock.lockDeleteAbsenceWithSd.RUnlock()
	return calls
}

// DeleteAttendStatus calls DeleteAttendStatusFunc.
func (mock *StoreMock) DeleteAttendStatus(ctx context.Context, attendStatusID uuid.UUID) error {
	if mock.DeleteAttendStatusFunc == nil {
		panic("StoreMock.DeleteAttendStatusFunc: method is nil but Store.DeleteAttendStatus was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		AttendStatusID uuid.UUID
	}{
		Ctx:            ctx,
		AttendStatusID: attendStatusID,
	}
	mock.lockDeleteAttendStatus.Lock()
	mock.calls.DeleteAttendStatus = append(mock.calls.DeleteAttendStatus, callInfo)
	mock.lockDeleteAttendStatus.Unlock()
	return mock.DeleteAttendStatusFunc(ctx, attendStatusID)
}

// DeleteAttendStatusCalls gets all the calls that were made to DeleteAttendStatus.
// Check the length with:
//
//	len(mockedStore.DeleteAttendStatusCalls())
func (mock *StoreMock) DeleteAttendStatusCalls() []struct {
	Ctx            context.Context
	AttendStatusID uuid.UUID
} {
	var calls []struct {
		Ctx            context.Context
		AttendStatusID uuid.UUID
	}
	mock.lockDeleteAttendStatus.RLock()
	calls = mock.calls.DeleteAttendStatus
	mock.lockDeleteAttendStatus.RUnlock()
	return calls
}

// DeleteAttendStatusByKey calls DeleteAttendStatusByKeyFunc.
func (mock *StoreMock) DeleteAttendStatusByKey(ctx context.Context, key string) error {
	if mock.DeleteAttendStatusByKeyFunc == nil {
		panic("StoreMock.DeleteAttendStatusByKeyFunc: method is nil but Store.DeleteAttendStatusByKey was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockDeleteAttendStatusByKey.Lock()
	mock.calls.DeleteAttendStatusByKey = append(mock.calls.DeleteAttendStatusByKey, callInfo)
	mock.lockDeleteAttendStatusByKey.Unlock()
	return mock.DeleteAttendStatusByKeyFunc(ctx, key)
}

// DeleteAttendStatusByKeyCalls gets all the calls that were made to DeleteAttendStatusByKey.
// Check the length with:
//
//	len(mockedStore.DeleteAttendStatusByKeyCalls())
func (mock *StoreMock) DeleteAttendStatusByKeyCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockDeleteAttendStatusByKey.RLock()
	calls = mock.calls.DeleteAttendStatusByKey
	mock.lockDeleteAttendStatusByKey.RUnlock()
	return calls
}

// DeleteAttendStatusByKeyWithSd calls DeleteAttendStatusByKeyWithSdFunc.
func (mock *StoreMock) DeleteAttendStatusByKeyWithSd(ctx context.Context, sd Sd, key string) error {
	if mock.DeleteAttendStatusByKeyWithSdFunc == nil {
		panic("StoreMock.DeleteAttendStatusByKeyWithSdFunc: method is nil but Store.DeleteAttendStatusByKeyWithSd was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}{
		Ctx: ctx,
		Sd:  sd,
		Key: key,
	}
	mock.lockDeleteAttendStatusByKeyWithSd.Lock()
	mock.calls.DeleteAttendStatusByKeyWithSd = append(mock.calls.DeleteAttendStatusByKeyWithSd, callInfo)
	mock.lockDeleteAttendStatusByKeyWithSd.Unlock()
	return mock.DeleteAttendStatusByKeyWithSdFunc(ctx, sd, key)
}

// DeleteAttendStatusByKeyWithSdCalls gets all the calls that were made to DeleteAttendStatusByKeyWithSd.
// Check the length with:
//
//	len(mockedStore.DeleteAttendStatusByKeyWithSdCalls())
func (mock *StoreMock) DeleteAttendStatusByKeyWithSdCalls() []struct {
	Ctx context.Context
	Sd  Sd
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}
	mock.lockDeleteAttendStatusByKeyWithSd.RLock()
	calls = mock.calls.DeleteAttendStatusByKeyWithSd
	mock.lockDeleteAttendStatusByKeyWithSd.RUnlock()
	return calls
}

// DeleteAttendStatusWithSd calls DeleteAttendStatusWithSdFunc.
func (mock *StoreMock) DeleteAttendStatusWithSd(ctx context.Context, sd Sd, attendStatusID uuid.UUID) error {
	if mock.DeleteAttendStatusWithSdFunc == nil {
		panic("StoreMock.DeleteAttendStatusWithSdFunc: method is nil but Store.DeleteAttendStatusWithSd was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		Sd             Sd
		AttendStatusID uuid.UUID
	}{
		Ctx:            ctx,
		Sd:             sd,
		AttendStatusID: attendStatusID,
	}
	mock.lockDeleteAttendStatusWithSd.Lock()
	mock.calls.DeleteAttendStatusWithSd = append(mock.calls.DeleteAttendStatusWithSd, callInfo)
	mock.lockDeleteAttendStatusWithSd.Unlock()
	return mock.DeleteAttendStatusWithSdFunc(ctx, sd, attendStatusID)
}

// DeleteAttendStatusWithSdCalls gets all the calls that were made to DeleteAttendStatusWithSd.
// Check the length with:
//
//	len(mockedStore.DeleteAttendStatusWithSdCalls())
func (mock *StoreMock) DeleteAttendStatusWithSdCalls() []struct {
	Ctx            context.Context
	Sd             Sd
	AttendStatusID uuid.UUID
} {
	var calls []struct {
		Ctx            context.Context
		Sd             Sd
		AttendStatusID uuid.UUID
	}
	mock.lockDeleteAttendStatusWithSd.RLock()
	calls = mock.calls.DeleteAttendStatusWithSd
	mock.lockDeleteAttendStatusWithSd.RUnlock()
	return calls
}

// DeleteAttendanceType calls DeleteAttendanceTypeFunc.
func (mock *StoreMock) DeleteAttendanceType(ctx context.Context, attendanceTypeID uuid.UUID) error {
	if mock.DeleteAttendanceTypeFunc == nil {
		panic("StoreMock.DeleteAttendanceTypeFunc: method is nil but Store.DeleteAttendanceType was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		AttendanceTypeID uuid.UUID
	}{
		Ctx:              ctx,
		AttendanceTypeID: attendanceTypeID,
	}
	mock.lockDeleteAttendanceType.Lock()
	mock.calls.DeleteAttendanceType = append(mock.calls.DeleteAttendanceType, callInfo)
	mock.lockDeleteAttendanceType.Unlock()
	return mock.DeleteAttendanceTypeFunc(ctx, attendanceTypeID)
}

// DeleteAttendanceTypeCalls gets all the calls that were made to DeleteAttendanceType.
// Check the length with:
//
//	len(mockedStore.DeleteAttendanceTypeCalls())
func (mock *StoreMock) DeleteAttendanceTypeCalls() []struct {
	Ctx              context.Context
	AttendanceTypeID uuid.UUID
} {
	var calls []struct {
		Ctx              context.Context
		AttendanceTypeID uuid.UUID
	}
	mock.lockDeleteAttendanceType.RLock()
	calls = mock.calls.DeleteAttendanceType
	mock.lockDeleteAttendanceType.RUnlock()
	return calls
}

// DeleteAttendanceTypeByKey calls DeleteAttendanceTypeByKeyFunc.
func (mock *StoreMock) DeleteAttendanceTypeByKey(ctx context.Context, key string) error {
	if mock.DeleteAttendanceTypeByKeyFunc == nil {
		panic("StoreMock.DeleteAttendanceTypeByKeyFunc: method is nil but Store.DeleteAttendanceTypeByKey was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockDeleteAttendanceTypeByKey.Lock()
	mock.calls.DeleteAttendanceTypeByKey = append(mock.calls.DeleteAttendanceTypeByKey, callInfo)
	mock.lockDeleteAttendanceTypeByKey.Unlock()
	return mock.DeleteAttendanceTypeByKeyFunc(ctx, key)
}

// DeleteAttendanceTypeByKeyCalls gets all the calls that were made to DeleteAttendanceTypeByKey.
// Check the length with:
//
//	len(mockedStore.DeleteAttendanceTypeByKeyCalls())
func (mock *StoreMock) DeleteAttendanceTypeByKeyCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockDeleteAttendanceTypeByKey.RLock()
	calls = mock.calls.DeleteAttendanceTypeByKey
	mock.lockDeleteAttendanceTypeByKey.RUnlock()
	return calls
}

// DeleteAttendanceTypeByKeyWithSd calls DeleteAttendanceTypeByKeyWithSdFunc.
func (mock *StoreMock) DeleteAttendanceTypeByKeyWithSd(ctx context.Context, sd Sd, key string) error {
	if mock.DeleteAttendanceTypeByKeyWithSdFunc == nil {
		panic("StoreMock.DeleteAttendanceTypeByKeyWithSdFunc: method is nil but Store.DeleteAttendanceTypeByKeyWithSd was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}{
		Ctx: ctx,
		Sd:  sd,
		Key: key,
	}
	mock.lockDeleteAttendanceTypeByKeyWithSd.Lock()
	mock.calls.DeleteAttendanceTypeByKeyWithSd = append(mock.calls.DeleteAttendanceTypeByKeyWithSd, callInfo)
	mock.lockDeleteAttendanceTypeByKeyWithSd.Unlock()
	return mock.DeleteAttendanceTypeByKeyWithSdFunc(ctx, sd, key)
}

// DeleteAttendanceTypeByKeyWithSdCalls gets all the calls that were made to DeleteAttendanceTypeByKeyWithSd.
// Check the length with:
//
//	len(mockedStore.DeleteAttendanceTypeByKeyWithSdCalls())
func (mock *StoreMock) DeleteAttendanceTypeByKeyWithSdCalls() []struct {
	Ctx context.Context
	Sd  Sd
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}
	mock.lockDeleteAttendanceTypeByKeyWithSd.RLock()
	calls = mock.calls.DeleteAttendanceTypeByKeyWithSd
	mock.lockDeleteAttendanceTypeByKeyWithSd.RUnlock()
	return calls
}

// DeleteAttendanceTypeWithSd calls DeleteAttendanceTypeWithSdFunc.
func (mock *StoreMock) DeleteAttendanceTypeWithSd(ctx context.Context, sd Sd, attendanceTypeID uuid.UUID) error {
	if mock.DeleteAttendanceTypeWithSdFunc == nil {
		panic("StoreMock.DeleteAttendanceTypeWithSdFunc: method is nil but Store.DeleteAttendanceTypeWithSd was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		Sd               Sd
		AttendanceTypeID uuid.UUID
	}{
		Ctx:              ctx,
		Sd:               sd,
		AttendanceTypeID: attendanceTypeID,
	}
	mock.lockDeleteAttendanceTypeWithSd.Lock()
	mock.calls.DeleteAttendanceTypeWithSd = append(mock.calls.DeleteAttendanceTypeWithSd, callInfo)
	mock.lockDeleteAttendanceTypeWithSd.Unlock()
	return mock.DeleteAttendanceTypeWithSdFunc(ctx, sd, attendanceTypeID)
}

// DeleteAttendanceTypeWithSdCalls gets all the calls that were made to DeleteAttendanceTypeWithSd.
// Check the length with:
//
//	len(mockedStore.DeleteAttendanceTypeWithSdCalls())
func (mock *StoreMock) DeleteAttendanceTypeWithSdCalls() []struct {
	Ctx              context.Context
	Sd               Sd
	AttendanceTypeID uuid.UUID
} {
	var calls []struct {
		Ctx              context.Context
		Sd               Sd
		AttendanceTypeID uuid.UUID
	}
	mock.lockDeleteAttendanceTypeWithSd.RLock()
	calls = mock.calls.DeleteAttendanceTypeWithSd
	mock.lockDeleteAttendanceTypeWithSd.RUnlock()
	return calls
}

// DeleteEventType calls DeleteEventTypeFunc.
func (mock *StoreMock) DeleteEventType(ctx context.Context, eventTypeID uuid.UUID) error {
	if mock.DeleteEventTypeFunc == nil {
		panic("StoreMock.DeleteEventTypeFunc: method is nil but Store.DeleteEventType was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		EventTypeID uuid.UUID
	}{
		Ctx:         ctx,
		EventTypeID: eventTypeID,
	}
	mock.lockDeleteEventType.Lock()
	mock.calls.DeleteEventType = append(mock.calls.DeleteEventType, callInfo)
	mock.lockDeleteEventType.Unlock()
	return mock.DeleteEventTypeFunc(ctx, eventTypeID)
}

// DeleteEventTypeCalls gets all the calls that were made to DeleteEventType.
// Check the length with:
//
//	len(mockedStore.DeleteEventTypeCalls())
func (mock *StoreMock) DeleteEventTypeCalls() []struct {
	Ctx         context.Context
	EventTypeID uuid.UUID
} {
	var calls []struct {
		Ctx         context.Context
		EventTypeID uuid.UUID
	}
	mock.lockDeleteEventType.RLock()
	calls = mock.calls.DeleteEventType
	mock.lockDeleteEventType.RUnlock()
	return calls
}

// DeleteEventTypeByKey calls DeleteEventTypeByKeyFunc.
func (mock *StoreMock) DeleteEventTypeByKey(ctx context.Context, key string) error {
	if mock.DeleteEventTypeByKeyFunc == nil {
		panic("StoreMock.DeleteEventTypeByKeyFunc: method is nil but Store.DeleteEventTypeByKey was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockDeleteEventTypeByKey.Lock()
	mock.calls.DeleteEventTypeByKey = append(mock.calls.DeleteEventTypeByKey, callInfo)
	mock.lockDeleteEventTypeByKey.Unlock()
	return mock.DeleteEventTypeByKeyFunc(ctx, key)
}

// DeleteEventTypeByKeyCalls gets all the calls that were made to DeleteEventTypeByKey.
// Check the length with:
//
//	len(mockedStore.DeleteEventTypeByKeyCalls())
func (mock *StoreMock) DeleteEventTypeByKeyCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockDeleteEventTypeByKey.RLock()
	calls = mock.calls.DeleteEventTypeByKey
	mock.lockDeleteEventTypeByKey.RUnlock()
	return calls
}

// DeleteEventTypeByKeyWithSd calls DeleteEventTypeByKeyWithSdFunc.
func (mock *StoreMock) DeleteEventTypeByKeyWithSd(ctx context.Context, sd Sd, key string) error {
	if mock.DeleteEventTypeByKeyWithSdFunc == nil {
		panic("StoreMock.DeleteEventTypeByKeyWithSdFunc: method is nil but Store.DeleteEventTypeByKeyWithSd was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}{
		Ctx: ctx,
		Sd:  sd,
		Key: key,
	}
	mock.lockDeleteEventTypeByKeyWithSd.Lock()
	mock.calls.DeleteEventTypeByKeyWithSd = append(mock.calls.DeleteEventTypeByKeyWithSd, callInfo)
	mock.lockDeleteEventTypeByKeyWithSd.Unlock()
	return mock.DeleteEventTypeByKeyWithSdFunc(ctx, sd, key)
}

// DeleteEventTypeByKeyWithSdCalls gets all the calls that were made to DeleteEventTypeByKeyWithSd.
// Check the length with:
//
//	len(mockedStore.DeleteEventTypeByKeyWithSdCalls())
func (mock *StoreMock) DeleteEventTypeByKeyWithSdCalls() []struct {
	Ctx context.Context
	Sd  Sd
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}
	mock.lockDeleteEventTypeByKeyWithSd.RLock()
	calls = mock.calls.DeleteEventTypeByKeyWithSd
	mock.lockDeleteEventTypeByKeyWithSd.RUnlock()
	return calls
}

// DeleteEventTypeWithSd calls DeleteEventTypeWithSdFunc.
func (mock *StoreMock) DeleteEventTypeWithSd(ctx context.Context, sd Sd, eventTypeID uuid.UUID) error {
	if mock.DeleteEventTypeWithSdFunc == nil {
		panic("StoreMock.DeleteEventTypeWithSdFunc: method is nil but Store.DeleteEventTypeWithSd was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Sd          Sd
		EventTypeID uuid.UUID
	}{
		Ctx:         ctx,
		Sd:          sd,
		EventTypeID: eventTypeID,
	}
	mock.lockDeleteEventTypeWithSd.Lock()
	mock.calls.DeleteEventTypeWithSd = append(mock.calls.DeleteEventTypeWithSd, callInfo)
	mock.lockDeleteEventTypeWithSd.Unlock()
	return mock.DeleteEventTypeWithSdFunc(ctx, sd, eventTypeID)
}

// DeleteEventTypeWithSdCalls gets all the calls that were made to DeleteEventTypeWithSd.
// Check the length with:
//
//	len(mockedStore.DeleteEventTypeWithSdCalls())
func (mock *StoreMock) DeleteEventTypeWithSdCalls() []struct {
	Ctx         context.Context
	Sd          Sd
	EventTypeID uuid.UUID
} {
	var calls []struct {
		Ctx         context.Context
		Sd          Sd
		EventTypeID uuid.UUID
	}
	mock.lockDeleteEventTypeWithSd.RLock()
	calls = mock.calls.DeleteEventTypeWithSd
	mock.lockDeleteEventTypeWithSd.RUnlock()
	return calls
}

// DeleteMimeType calls DeleteMimeTypeFunc.
func (mock *StoreMock) DeleteMimeType(ctx context.Context, mimeTypeID uuid.UUID) error {
	if mock.DeleteMimeTypeFunc == nil {
		panic("StoreMock.DeleteMimeTypeFunc: method is nil but Store.DeleteMimeType was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		MimeTypeID uuid.UUID
	}{
		Ctx:        ctx,
		MimeTypeID: mimeTypeID,
	}
	mock.lockDeleteMimeType.Lock()
	mock.calls.DeleteMimeType = append(mock.calls.DeleteMimeType, callInfo)
	mock.lockDeleteMimeType.Unlock()
	return mock.DeleteMimeTypeFunc(ctx, mimeTypeID)
}

// DeleteMimeTypeCalls gets all the calls that were made to DeleteMimeType.
// Check the length with:
//
//	len(mockedStore.DeleteMimeTypeCalls())
func (mock *StoreMock) DeleteMimeTypeCalls() []struct {
	Ctx        context.Context
	MimeTypeID uuid.UUID
} {
	var calls []struct {
		Ctx        context.Context
		MimeTypeID uuid.UUID
	}
	mock.lockDeleteMimeType.RLock()
	calls = mock.calls.DeleteMimeType
	mock.lockDeleteMimeType.RUnlock()
	return calls
}

// DeleteMimeTypeByKey calls DeleteMimeTypeByKeyFunc.
func (mock *StoreMock) DeleteMimeTypeByKey(ctx context.Context, key string) error {
	if mock.DeleteMimeTypeByKeyFunc == nil {
		panic("StoreMock.DeleteMimeTypeByKeyFunc: method is nil but Store.DeleteMimeTypeByKey was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockDeleteMimeTypeByKey.Lock()
	mock.calls.DeleteMimeTypeByKey = append(mock.calls.DeleteMimeTypeByKey, callInfo)
	mock.lockDeleteMimeTypeByKey.Unlock()
	return mock.DeleteMimeTypeByKeyFunc(ctx, key)
}

// DeleteMimeTypeByKeyCalls gets all the calls that were made to DeleteMimeTypeByKey.
// Check the length with:
//
//	len(mockedStore.DeleteMimeTypeByKeyCalls())
func (mock *StoreMock) DeleteMimeTypeByKeyCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockDeleteMimeTypeByKey.RLock()
	calls = mock.calls.DeleteMimeTypeByKey
	mock.lockDeleteMimeTypeByKey.RUnlock()
	return calls
}

// DeleteMimeTypeByKeyWithSd calls DeleteMimeTypeByKeyWithSdFunc.
func (mock *StoreMock) DeleteMimeTypeByKeyWithSd(ctx context.Context, sd Sd, key string) error {
	if mock.DeleteMimeTypeByKeyWithSdFunc == nil {
		panic("StoreMock.DeleteMimeTypeByKeyWithSdFunc: method is nil but Store.DeleteMimeTypeByKeyWithSd was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}{
		Ctx: ctx,
		Sd:  sd,
		Key: key,
	}
	mock.lockDeleteMimeTypeByKeyWithSd.Lock()
	mock.calls.DeleteMimeTypeByKeyWithSd = append(mock.calls.DeleteMimeTypeByKeyWithSd, callInfo)
	mock.lockDeleteMimeTypeByKeyWithSd.Unlock()
	return mock.DeleteMimeTypeByKeyWithSdFunc(ctx, sd, key)
}

// DeleteMimeTypeByKeyWithSdCalls gets all the calls that were made to DeleteMimeTypeByKeyWithSd.
// Check the length with:
//
//	len(mockedStore.DeleteMimeTypeByKeyWithSdCalls())
func (mock *StoreMock) DeleteMimeTypeByKeyWithSdCalls() []struct {
	Ctx context.Context
	Sd  Sd
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}
	mock.lockDeleteMimeTypeByKeyWithSd.RLock()
	calls = mock.calls.DeleteMimeTypeByKeyWithSd
	mock.lockDeleteMimeTypeByKeyWithSd.RUnlock()
	return calls
}

// DeleteMimeTypeWithSd calls DeleteMimeTypeWithSdFunc.
func (mock *StoreMock) DeleteMimeTypeWithSd(ctx context.Context, sd Sd, mimeTypeID uuid.UUID) error {
	if mock.DeleteMimeTypeWithSdFunc == nil {
		panic("StoreMock.DeleteMimeTypeWithSdFunc: method is nil but Store.DeleteMimeTypeWithSd was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Sd         Sd
		MimeTypeID uuid.UUID
	}{
		Ctx:        ctx,
		Sd:         sd,
		MimeTypeID: mimeTypeID,
	}
	mock.lockDeleteMimeTypeWithSd.Lock()
	mock.calls.DeleteMimeTypeWithSd = append(mock.calls.DeleteMimeTypeWithSd, callInfo)
	mock.lockDeleteMimeTypeWithSd.Unlock()
	return mock.DeleteMimeTypeWithSdFunc(ctx, sd, mimeTypeID)
}

// DeleteMimeTypeWithSdCalls gets all the calls that were made to DeleteMimeTypeWithSd.
// Check the length with:
//
//	len(mockedStore.DeleteMimeTypeWithSdCalls())
func (mock *StoreMock) DeleteMimeTypeWithSdCalls() []struct {
	Ctx        context.Context
	Sd         Sd
	MimeTypeID uuid.UUID
} {
	var calls []struct {
		Ctx        context.Context
		Sd         Sd
		MimeTypeID uuid.UUID
	}
	mock.lockDeleteMimeTypeWithSd.RLock()
	calls = mock.calls.DeleteMimeTypeWithSd
	mock.lockDeleteMimeTypeWithSd.RUnlock()
	return calls
}

// DeletePermission calls DeletePermissionFunc.
func (mock *StoreMock) DeletePermission(ctx context.Context, permissionID uuid.UUID) error {
	if mock.DeletePermissionFunc == nil {
		panic("StoreMock.DeletePermissionFunc: method is nil but Store.DeletePermission was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		PermissionID uuid.UUID
	}{
		Ctx:          ctx,
		PermissionID: permissionID,
	}
	mock.lockDeletePermission.Lock()
	mock.calls.DeletePermission = append(mock.calls.DeletePermission, callInfo)
	mock.lockDeletePermission.Unlock()
	return mock.DeletePermissionFunc(ctx, permissionID)
}

// DeletePermissionCalls gets all the calls that were made to DeletePermission.
// Check the length with:
//
//	len(mockedStore.DeletePermissionCalls())
func (mock *StoreMock) DeletePermissionCalls() []struct {
	Ctx          context.Context
	PermissionID uuid.UUID
} {
	var calls []struct {
		Ctx          context.Context
		PermissionID uuid.UUID
	}
	mock.lockDeletePermission.RLock()
	calls = mock.calls.DeletePermission
	mock.lockDeletePermission.RUnlock()
	return calls
}

// DeletePermissionByKey calls DeletePermissionByKeyFunc.
func (mock *StoreMock) DeletePermissionByKey(ctx context.Context, key string) error {
	if mock.DeletePermissionByKeyFunc == nil {
		panic("StoreMock.DeletePermissionByKeyFunc: method is nil but Store.DeletePermissionByKey was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockDeletePermissionByKey.Lock()
	mock.calls.DeletePermissionByKey = append(mock.calls.DeletePermissionByKey, callInfo)
	mock.lockDeletePermissionByKey.Unlock()
	return mock.DeletePermissionByKeyFunc(ctx, key)
}

// DeletePermissionByKeyCalls gets all the calls that were made to DeletePermissionByKey.
// Check the length with:
//
//	len(mockedStore.DeletePermissionByKeyCalls())
func (mock *StoreMock) DeletePermissionByKeyCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockDeletePermissionByKey.RLock()
	calls = mock.calls.DeletePermissionByKey
	mock.lockDeletePermissionByKey.RUnlock()
	return calls
}

// DeletePermissionByKeyWithSd calls DeletePermissionByKeyWithSdFunc.
func (mock *StoreMock) DeletePermissionByKeyWithSd(ctx context.Context, sd Sd, key string) error {
	if mock.DeletePermissionByKeyWithSdFunc == nil {
		panic("StoreMock.DeletePermissionByKeyWithSdFunc: method is nil but Store.DeletePermissionByKeyWithSd was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}{
		Ctx: ctx,
		Sd:  sd,
		Key: key,
	}
	mock.lockDeletePermissionByKeyWithSd.Lock()
	mock.calls.DeletePermissionByKeyWithSd = append(mock.calls.DeletePermissionByKeyWithSd, callInfo)
	mock.lockDeletePermissionByKeyWithSd.Unlock()
	return mock.DeletePermissionByKeyWithSdFunc(ctx, sd, key)
}

// DeletePermissionByKeyWithSdCalls gets all the calls that were made to DeletePermissionByKeyWithSd.
// Check the length with:
//
//	len(mockedStore.DeletePermissionByKeyWithSdCalls())
func (mock *StoreMock) DeletePermissionByKeyWithSdCalls() []struct {
	Ctx context.Context
	Sd  Sd
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}
	mock.lockDeletePermissionByKeyWithSd.RLock()
	calls = mock.calls.DeletePermissionByKeyWithSd
	mock.lockDeletePermissionByKeyWithSd.RUnlock()
	return calls
}

// DeletePermissionCategory calls DeletePermissionCategoryFunc.
func (mock *StoreMock) DeletePermissionCategory(ctx context.Context, permissionCategoryID uuid.UUID) error {
	if mock.DeletePermissionCategoryFunc == nil {
		panic("StoreMock.DeletePermissionCategoryFunc: method is nil but Store.DeletePermissionCategory was just called")
	}
	callInfo := struct {
		Ctx                  context.Context
		PermissionCategoryID uuid.UUID
	}{
		Ctx:                  ctx,
		PermissionCategoryID: permissionCategoryID,
	}
	mock.lockDeletePermissionCategory.Lock()
	mock.calls.DeletePermissionCategory = append(mock.calls.DeletePermissionCategory, callInfo)
	mock.lockDeletePermissionCategory.Unlock()
	return mock.DeletePermissionCategoryFunc(ctx, permissionCategoryID)
}

// DeletePermissionCategoryCalls gets all the calls that were made to DeletePermissionCategory.
// Check the length with:
//
//	len(mockedStore.DeletePermissionCategoryCalls())
func (mock *StoreMock) DeletePermissionCategoryCalls() []struct {
	Ctx                  context.Context
	PermissionCategoryID uuid.UUID
} {
	var calls []struct {
		Ctx                  context.Context
		PermissionCategoryID uuid.UUID
	}
	mock.lockDeletePermissionCategory.RLock()
	calls = mock.calls.DeletePermissionCategory
	mock.lockDeletePermissionCategory.RUnlock()
	return calls
}

// DeletePermissionCategoryByKey calls DeletePermissionCategoryByKeyFunc.
func (mock *StoreMock) DeletePermissionCategoryByKey(ctx context.Context, key string) error {
	if mock.DeletePermissionCategoryByKeyFunc == nil {
		panic("StoreMock.DeletePermissionCategoryByKeyFunc: method is nil but Store.DeletePermissionCategoryByKey was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockDeletePermissionCategoryByKey.Lock()
	mock.calls.DeletePermissionCategoryByKey = append(mock.calls.DeletePermissionCategoryByKey, callInfo)
	mock.lockDeletePermissionCategoryByKey.Unlock()
	return mock.DeletePermissionCategoryByKeyFunc(ctx, key)
}

// DeletePermissionCategoryByKeyCalls gets all the calls that were made to DeletePermissionCategoryByKey.
// Check the length with:
//
//	len(mockedStore.DeletePermissionCategoryByKeyCalls())
func (mock *StoreMock) DeletePermissionCategoryByKeyCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockDeletePermissionCategoryByKey.RLock()
	calls = mock.calls.DeletePermissionCategoryByKey
	mock.lockDeletePermissionCategoryByKey.RUnlock()
	return calls
}

// DeletePermissionCategoryByKeyWithSd calls DeletePermissionCategoryByKeyWithSdFunc.
func (mock *StoreMock) DeletePermissionCategoryByKeyWithSd(ctx context.Context, sd Sd, key string) error {
	if mock.DeletePermissionCategoryByKeyWithSdFunc == nil {
		panic("StoreMock.DeletePermissionCategoryByKeyWithSdFunc: method is nil but Store.DeletePermissionCategoryByKeyWithSd was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}{
		Ctx: ctx,
		Sd:  sd,
		Key: key,
	}
	mock.lockDeletePermissionCategoryByKeyWithSd.Lock()
	mock.calls.DeletePermissionCategoryByKeyWithSd = append(mock.calls.DeletePermissionCategoryByKeyWithSd, callInfo)
	mock.lockDeletePermissionCategoryByKeyWithSd.Unlock()
	return mock.DeletePermissionCategoryByKeyWithSdFunc(ctx, sd, key)
}

// DeletePermissionCategoryByKeyWithSdCalls gets all the calls that were made to DeletePermissionCategoryByKeyWithSd.
// Check the length with:
//
//	len(mockedStore.DeletePermissionCategoryByKeyWithSdCalls())
func (mock *StoreMock) DeletePermissionCategoryByKeyWithSdCalls() []struct {
	Ctx context.Context
	Sd  Sd
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}
	mock.lockDeletePermissionCategoryByKeyWithSd.RLock()
	calls = mock.calls.DeletePermissionCategoryByKeyWithSd
	mock.lockDeletePermissionCategoryByKeyWithSd.RUnlock()
	return calls
}

// DeletePermissionCategoryWithSd calls DeletePermissionCategoryWithSdFunc.
func (mock *StoreMock) DeletePermissionCategoryWithSd(ctx context.Context, sd Sd, permissionCategoryID uuid.UUID) error {
	if mock.DeletePermissionCategoryWithSdFunc == nil {
		panic("StoreMock.DeletePermissionCategoryWithSdFunc: method is nil but Store.DeletePermissionCategoryWithSd was just called")
	}
	callInfo := struct {
		Ctx                  context.Context
		Sd                   Sd
		PermissionCategoryID uuid.UUID
	}{
		Ctx:                  ctx,
		Sd:                   sd,
		PermissionCategoryID: permissionCategoryID,
	}
	mock.lockDeletePermissionCategoryWithSd.Lock()
	mock.calls.DeletePermissionCategoryWithSd = append(mock.calls.DeletePermissionCategoryWithSd, callInfo)
	mock.lockDeletePermissionCategoryWithSd.Unlock()
	return mock.DeletePermissionCategoryWithSdFunc(ctx, sd, permissionCategoryID)
}

// DeletePermissionCategoryWithSdCalls gets all the calls that were made to DeletePermissionCategoryWithSd.
// Check the length with:
//
//	len(mockedStore.DeletePermissionCategoryWithSdCalls())
func (mock *StoreMock) DeletePermissionCategoryWithSdCalls() []struct {
	Ctx                  context.Context
	Sd                   Sd
	PermissionCategoryID uuid.UUID
} {
	var calls []struct {
		Ctx                  context.Context
		Sd                   Sd
		PermissionCategoryID uuid.UUID
	}
	mock.lockDeletePermissionCategoryWithSd.RLock()
	calls = mock.calls.DeletePermissionCategoryWithSd
	mock.lockDeletePermissionCategoryWithSd.RUnlock()
	return calls
}

// DeletePermissionWithSd calls DeletePermissionWithSdFunc.
func (mock *StoreMock) DeletePermissionWithSd(ctx context.Context, sd Sd, permissionID uuid.UUID) error {
	if mock.DeletePermissionWithSdFunc == nil {
		panic("StoreMock.DeletePermissionWithSdFunc: method is nil but Store.DeletePermissionWithSd was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		Sd           Sd
		PermissionID uuid.UUID
	}{
		Ctx:          ctx,
		Sd:           sd,
		PermissionID: permissionID,
	}
	mock.lockDeletePermissionWithSd.Lock()
	mock.calls.DeletePermissionWithSd = append(mock.calls.DeletePermissionWithSd, callInfo)
	mock.lockDeletePermissionWithSd.Unlock()
	return mock.DeletePermissionWithSdFunc(ctx, sd, permissionID)
}

// DeletePermissionWithSdCalls gets all the calls that were made to DeletePermissionWithSd.
// Check the length with:
//
//	len(mockedStore.DeletePermissionWithSdCalls())
func (mock *StoreMock) DeletePermissionWithSdCalls() []struct {
	Ctx          context.Context
	Sd           Sd
	PermissionID uuid.UUID
} {
	var calls []struct {
		Ctx          context.Context
		Sd           Sd
		PermissionID uuid.UUID
	}
	mock.lockDeletePermissionWithSd.RLock()
	calls = mock.calls.DeletePermissionWithSd
	mock.lockDeletePermissionWithSd.RUnlock()
	return calls
}

// DeletePolicy calls DeletePolicyFunc.
func (mock *StoreMock) DeletePolicy(ctx context.Context, policyID uuid.UUID) error {
	if mock.DeletePolicyFunc == nil {
		panic("StoreMock.DeletePolicyFunc: method is nil but Store.DeletePolicy was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		PolicyID uuid.UUID
	}{
		Ctx:      ctx,
		PolicyID: policyID,
	}
	mock.lockDeletePolicy.Lock()
	mock.calls.DeletePolicy = append(mock.calls.DeletePolicy, callInfo)
	mock.lockDeletePolicy.Unlock()
	return mock.DeletePolicyFunc(ctx, policyID)
}

// DeletePolicyCalls gets all the calls that were made to DeletePolicy.
// Check the length with:
//
//	len(mockedStore.DeletePolicyCalls())
func (mock *StoreMock) DeletePolicyCalls() []struct {
	Ctx      context.Context
	PolicyID uuid.UUID
} {
	var calls []struct {
		Ctx      context.Context
		PolicyID uuid.UUID
	}
	mock.lockDeletePolicy.RLock()
	calls = mock.calls.DeletePolicy
	mock.lockDeletePolicy.RUnlock()
	return calls
}

// DeletePolicyByKey calls DeletePolicyByKeyFunc.
func (mock *StoreMock) DeletePolicyByKey(ctx context.Context, key string) error {
	if mock.DeletePolicyByKeyFunc == nil {
		panic("StoreMock.DeletePolicyByKeyFunc: method is nil but Store.DeletePolicyByKey was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockDeletePolicyByKey.Lock()
	mock.calls.DeletePolicyByKey = append(mock.calls.DeletePolicyByKey, callInfo)
	mock.lockDeletePolicyByKey.Unlock()
	return mock.DeletePolicyByKeyFunc(ctx, key)
}

// DeletePolicyByKeyCalls gets all the calls that were made to DeletePolicyByKey.
// Check the length with:
//
//	len(mockedStore.DeletePolicyByKeyCalls())
func (mock *StoreMock) DeletePolicyByKeyCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockDeletePolicyByKey.RLock()
	calls = mock.calls.DeletePolicyByKey
	mock.lockDeletePolicyByKey.RUnlock()
	return calls
}

// DeletePolicyByKeyWithSd calls DeletePolicyByKeyWithSdFunc.
func (mock *StoreMock) DeletePolicyByKeyWithSd(ctx context.Context, sd Sd, key string) error {
	if mock.DeletePolicyByKeyWithSdFunc == nil {
		panic("StoreMock.DeletePolicyByKeyWithSdFunc: method is nil but Store.DeletePolicyByKeyWithSd was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}{
		Ctx: ctx,
		Sd:  sd,
		Key: key,
	}
	mock.lockDeletePolicyByKeyWithSd.Lock()
	mock.calls.DeletePolicyByKeyWithSd = append(mock.calls.DeletePolicyByKeyWithSd, callInfo)
	mock.lockDeletePolicyByKeyWithSd.Unlock()
	return mock.DeletePolicyByKeyWithSdFunc(ctx, sd, key)
}

// DeletePolicyByKeyWithSdCalls gets all the calls that were made to DeletePolicyByKeyWithSd.
// Check the length with:
//
//	len(mockedStore.DeletePolicyByKeyWithSdCalls())
func (mock *StoreMock) DeletePolicyByKeyWithSdCalls() []struct {
	Ctx context.Context
	Sd  Sd
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}
	mock.lockDeletePolicyByKeyWithSd.RLock()
	calls = mock.calls.DeletePolicyByKeyWithSd
	mock.lockDeletePolicyByKeyWithSd.RUnlock()
	return calls
}

// DeletePolicyCategory calls DeletePolicyCategoryFunc.
func (mock *StoreMock) DeletePolicyCategory(ctx context.Context, policyCategoryID uuid.UUID) error {
	if mock.DeletePolicyCategoryFunc == nil {
		panic("StoreMock.DeletePolicyCategoryFunc: method is nil but Store.DeletePolicyCategory was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		PolicyCategoryID uuid.UUID
	}{
		Ctx:              ctx,
		PolicyCategoryID: policyCategoryID,
	}
	mock.lockDeletePolicyCategory.Lock()
	mock.calls.DeletePolicyCategory = append(mock.calls.DeletePolicyCategory, callInfo)
	mock.lockDeletePolicyCategory.Unlock()
	return mock.DeletePolicyCategoryFunc(ctx, policyCategoryID)
}

// DeletePolicyCategoryCalls gets all the calls that were made to DeletePolicyCategory.
// Check the length with:
//
//	len(mockedStore.DeletePolicyCategoryCalls())
func (mock *StoreMock) DeletePolicyCategoryCalls() []struct {
	Ctx              context.Context
	PolicyCategoryID uuid.UUID
} {
	var calls []struct {
		Ctx              context.Context
		PolicyCategoryID uuid.UUID
	}
	mock.lockDeletePolicyCategory.RLock()
	calls = mock.calls.DeletePolicyCategory
	mock.lockDeletePolicyCategory.RUnlock()
	return calls
}

// DeletePolicyCategoryByKey calls DeletePolicyCategoryByKeyFunc.
func (mock *StoreMock) DeletePolicyCategoryByKey(ctx context.Context, key string) error {
	if mock.DeletePolicyCategoryByKeyFunc == nil {
		panic("StoreMock.DeletePolicyCategoryByKeyFunc: method is nil but Store.DeletePolicyCategoryByKey was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockDeletePolicyCategoryByKey.Lock()
	mock.calls.DeletePolicyCategoryByKey = append(mock.calls.DeletePolicyCategoryByKey, callInfo)
	mock.lockDeletePolicyCategoryByKey.Unlock()
	return mock.DeletePolicyCategoryByKeyFunc(ctx, key)
}

// DeletePolicyCategoryByKeyCalls gets all the calls that were made to DeletePolicyCategoryByKey.
// Check the length with:
//
//	len(mockedStore.DeletePolicyCategoryByKeyCalls())
func (mock *StoreMock) DeletePolicyCategoryByKeyCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockDeletePolicyCategoryByKey.RLock()
	calls = mock.calls.DeletePolicyCategoryByKey
	mock.lockDeletePolicyCategoryByKey.RUnlock()
	return calls
}

// DeletePolicyCategoryByKeyWithSd calls DeletePolicyCategoryByKeyWithSdFunc.
func (mock *StoreMock) DeletePolicyCategoryByKeyWithSd(ctx context.Context, sd Sd, key string) error {
	if mock.DeletePolicyCategoryByKeyWithSdFunc == nil {
		panic("StoreMock.DeletePolicyCategoryByKeyWithSdFunc: method is nil but Store.DeletePolicyCategoryByKeyWithSd was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}{
		Ctx: ctx,
		Sd:  sd,
		Key: key,
	}
	mock.lockDeletePolicyCategoryByKeyWithSd.Lock()
	mock.calls.DeletePolicyCategoryByKeyWithSd = append(mock.calls.DeletePolicyCategoryByKeyWithSd, callInfo)
	mock.lockDeletePolicyCategoryByKeyWithSd.Unlock()
	return mock.DeletePolicyCategoryByKeyWithSdFunc(ctx, sd, key)
}

// DeletePolicyCategoryByKeyWithSdCalls gets all the calls that were made to DeletePolicyCategoryByKeyWithSd.
// Check the length with:
//
//	len(mockedStore.DeletePolicyCategoryByKeyWithSdCalls())
func (mock *StoreMock) DeletePolicyCategoryByKeyWithSdCalls() []struct {
	Ctx context.Context
	Sd  Sd
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}
	mock.lockDeletePolicyCategoryByKeyWithSd.RLock()
	calls = mock.calls.DeletePolicyCategoryByKeyWithSd
	mock.lockDeletePolicyCategoryByKeyWithSd.RUnlock()
	return calls
}

// DeletePolicyCategoryWithSd calls DeletePolicyCategoryWithSdFunc.
func (mock *StoreMock) DeletePolicyCategoryWithSd(ctx context.Context, sd Sd, policyCategoryID uuid.UUID) error {
	if mock.DeletePolicyCategoryWithSdFunc == nil {
		panic("StoreMock.DeletePolicyCategoryWithSdFunc: method is nil but Store.DeletePolicyCategoryWithSd was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		Sd               Sd
		PolicyCategoryID uuid.UUID
	}{
		Ctx:              ctx,
		Sd:               sd,
		PolicyCategoryID: policyCategoryID,
	}
	mock.lockDeletePolicyCategoryWithSd.Lock()
	mock.calls.DeletePolicyCategoryWithSd = append(mock.calls.DeletePolicyCategoryWithSd, callInfo)
	mock.lockDeletePolicyCategoryWithSd.Unlock()
	return mock.DeletePolicyCategoryWithSdFunc(ctx, sd, policyCategoryID)
}

// DeletePolicyCategoryWithSdCalls gets all the calls that were made to DeletePolicyCategoryWithSd.
// Check the length with:
//
//	len(mockedStore.DeletePolicyCategoryWithSdCalls())
func (mock *StoreMock) DeletePolicyCategoryWithSdCalls() []struct {
	Ctx              context.Context
	Sd               Sd
	PolicyCategoryID uuid.UUID
} {
	var calls []struct {
		Ctx              context.Context
		Sd               Sd
		PolicyCategoryID uuid.UUID
	}
	mock.lockDeletePolicyCategoryWithSd.RLock()
	calls = mock.calls.DeletePolicyCategoryWithSd
	mock.lockDeletePolicyCategoryWithSd.RUnlock()
	return calls
}

// DeletePolicyWithSd calls DeletePolicyWithSdFunc.
func (mock *StoreMock) DeletePolicyWithSd(ctx context.Context, sd Sd, policyID uuid.UUID) error {
	if mock.DeletePolicyWithSdFunc == nil {
		panic("StoreMock.DeletePolicyWithSdFunc: method is nil but Store.DeletePolicyWithSd was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Sd       Sd
		PolicyID uuid.UUID
	}{
		Ctx:      ctx,
		Sd:       sd,
		PolicyID: policyID,
	}
	mock.lockDeletePolicyWithSd.Lock()
	mock.calls.DeletePolicyWithSd = append(mock.calls.DeletePolicyWithSd, callInfo)
	mock.lockDeletePolicyWithSd.Unlock()
	return mock.DeletePolicyWithSdFunc(ctx, sd, policyID)
}

// DeletePolicyWithSdCalls gets all the calls that were made to DeletePolicyWithSd.
// Check the length with:
//
//	len(mockedStore.DeletePolicyWithSdCalls())
func (mock *StoreMock) DeletePolicyWithSdCalls() []struct {
	Ctx      context.Context
	Sd       Sd
	PolicyID uuid.UUID
} {
	var calls []struct {
		Ctx      context.Context
		Sd       Sd
		PolicyID uuid.UUID
	}
	mock.lockDeletePolicyWithSd.RLock()
	calls = mock.calls.DeletePolicyWithSd
	mock.lockDeletePolicyWithSd.RUnlock()
	return calls
}

// DeleteRecordType calls DeleteRecordTypeFunc.
func (mock *StoreMock) DeleteRecordType(ctx context.Context, recordTypeID uuid.UUID) error {
	if mock.DeleteRecordTypeFunc == nil {
		panic("StoreMock.DeleteRecordTypeFunc: method is nil but Store.DeleteRecordType was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		RecordTypeID uuid.UUID
	}{
		Ctx:          ctx,
		RecordTypeID: recordTypeID,
	}
	mock.lockDeleteRecordType.Lock()
	mock.calls.DeleteRecordType = append(mock.calls.DeleteRecordType, callInfo)
	mock.lockDeleteRecordType.Unlock()
	return mock.DeleteRecordTypeFunc(ctx, recordTypeID)
}

// DeleteRecordTypeCalls gets all the calls that were made to DeleteRecordType.
// Check the length with:
//
//	len(mockedStore.DeleteRecordTypeCalls())
func (mock *StoreMock) DeleteRecordTypeCalls() []struct {
	Ctx          context.Context
	RecordTypeID uuid.UUID
} {
	var calls []struct {
		Ctx          context.Context
		RecordTypeID uuid.UUID
	}
	mock.lockDeleteRecordType.RLock()
	calls = mock.calls.DeleteRecordType
	mock.lockDeleteRecordType.RUnlock()
	return calls
}

// DeleteRecordTypeByKey calls DeleteRecordTypeByKeyFunc.
func (mock *StoreMock) DeleteRecordTypeByKey(ctx context.Context, key string) error {
	if mock.DeleteRecordTypeByKeyFunc == nil {
		panic("StoreMock.DeleteRecordTypeByKeyFunc: method is nil but Store.DeleteRecordTypeByKey was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockDeleteRecordTypeByKey.Lock()
	mock.calls.DeleteRecordTypeByKey = append(mock.calls.DeleteRecordTypeByKey, callInfo)
	mock.lockDeleteRecordTypeByKey.Unlock()
	return mock.DeleteRecordTypeByKeyFunc(ctx, key)
}

// DeleteRecordTypeByKeyCalls gets all the calls that were made to DeleteRecordTypeByKey.
// Check the length with:
//
//	len(mockedStore.DeleteRecordTypeByKeyCalls())
func (mock *StoreMock) DeleteRecordTypeByKeyCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockDeleteRecordTypeByKey.RLock()
	calls = mock.calls.DeleteRecordTypeByKey
	mock.lockDeleteRecordTypeByKey.RUnlock()
	return calls
}

// DeleteRecordTypeByKeyWithSd calls DeleteRecordTypeByKeyWithSdFunc.
func (mock *StoreMock) DeleteRecordTypeByKeyWithSd(ctx context.Context, sd Sd, key string) error {
	if mock.DeleteRecordTypeByKeyWithSdFunc == nil {
		panic("StoreMock.DeleteRecordTypeByKeyWithSdFunc: method is nil but Store.DeleteRecordTypeByKeyWithSd was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}{
		Ctx: ctx,
		Sd:  sd,
		Key: key,
	}
	mock.lockDeleteRecordTypeByKeyWithSd.Lock()
	mock.calls.DeleteRecordTypeByKeyWithSd = append(mock.calls.DeleteRecordTypeByKeyWithSd, callInfo)
	mock.lockDeleteRecordTypeByKeyWithSd.Unlock()
	return mock.DeleteRecordTypeByKeyWithSdFunc(ctx, sd, key)
}

// DeleteRecordTypeByKeyWithSdCalls gets all the calls that were made to DeleteRecordTypeByKeyWithSd.
// Check the length with:
//
//	len(mockedStore.DeleteRecordTypeByKeyWithSdCalls())
func (mock *StoreMock) DeleteRecordTypeByKeyWithSdCalls() []struct {
	Ctx context.Context
	Sd  Sd
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}
	mock.lockDeleteRecordTypeByKeyWithSd.RLock()
	calls = mock.calls.DeleteRecordTypeByKeyWithSd
	mock.lockDeleteRecordTypeByKeyWithSd.RUnlock()
	return calls
}

// DeleteRecordTypeWithSd calls DeleteRecordTypeWithSdFunc.
func (mock *StoreMock) DeleteRecordTypeWithSd(ctx context.Context, sd Sd, recordTypeID uuid.UUID) error {
	if mock.DeleteRecordTypeWithSdFunc == nil {
		panic("StoreMock.DeleteRecordTypeWithSdFunc: method is nil but Store.DeleteRecordTypeWithSd was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		Sd           Sd
		RecordTypeID uuid.UUID
	}{
		Ctx:          ctx,
		Sd:           sd,
		RecordTypeID: recordTypeID,
	}
	mock.lockDeleteRecordTypeWithSd.Lock()
	mock.calls.DeleteRecordTypeWithSd = append(mock.calls.DeleteRecordTypeWithSd, callInfo)
	mock.lockDeleteRecordTypeWithSd.Unlock()
	return mock.DeleteRecordTypeWithSdFunc(ctx, sd, recordTypeID)
}

// DeleteRecordTypeWithSdCalls gets all the calls that were made to DeleteRecordTypeWithSd.
// Check the length with:
//
//	len(mockedStore.DeleteRecordTypeWithSdCalls())
func (mock *StoreMock) DeleteRecordTypeWithSdCalls() []struct {
	Ctx          context.Context
	Sd           Sd
	RecordTypeID uuid.UUID
} {
	var calls []struct {
		Ctx          context.Context
		Sd           Sd
		RecordTypeID uuid.UUID
	}
	mock.lockDeleteRecordTypeWithSd.RLock()
	calls = mock.calls.DeleteRecordTypeWithSd
	mock.lockDeleteRecordTypeWithSd.RUnlock()
	return calls
}

// FindAbsenceByID calls FindAbsenceByIDFunc.
func (mock *StoreMock) FindAbsenceByID(ctx context.Context, absenceID uuid.UUID) (entity.Absence, error) {
	if mock.FindAbsenceByIDFunc == nil {
		panic("StoreMock.FindAbsenceByIDFunc: method is nil but Store.FindAbsenceByID was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		AbsenceID uuid.UUID
	}{
		Ctx:       ctx,
		AbsenceID: absenceID,
	}
	mock.lockFindAbsenceByID.Lock()
	mock.calls.FindAbsenceByID = append(mock.calls.FindAbsenceByID, callInfo)
	mock.lockFindAbsenceByID.Unlock()
	return mock.FindAbsenceByIDFunc(ctx, absenceID)
}

// FindAbsenceByIDCalls gets all the calls that were made to FindAbsenceByID.
// Check the length with:
//
//	len(mockedStore.FindAbsenceByIDCalls())
func (mock *StoreMock) FindAbsenceByIDCalls() []struct {
	Ctx       context.Context
	AbsenceID uuid.UUID
} {
	var calls []struct {
		Ctx       context.Context
		AbsenceID uuid.UUID
	}
	mock.lockFindAbsenceByID.RLock()
	calls = mock.calls.FindAbsenceByID
	mock.lockFindAbsenceByID.RUnlock()
	return calls
}

// FindAbsenceByIDWithSd calls FindAbsenceByIDWithSdFunc.
func (mock *StoreMock) FindAbsenceByIDWithSd(ctx context.Context, sd Sd, absenceID uuid.UUID) (entity.Absence, error) {
	if mock.FindAbsenceByIDWithSdFunc == nil {
		panic("StoreMock.FindAbsenceByIDWithSdFunc: method is nil but Store.FindAbsenceByIDWithSd was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Sd        Sd
		AbsenceID uuid.UUID
	}{
		Ctx:       ctx,
		Sd:        sd,
		AbsenceID: absenceID,
	}
	mock.lockFindAbsenceByIDWithSd.Lock()
	mock.calls.FindAbsenceByIDWithSd = append(mock.calls.FindAbsenceByIDWithSd, callInfo)
	mock.lockFindAbsenceByIDWithSd.Unlock()
	return mock.FindAbsenceByIDWithSdFunc(ctx, sd, absenceID)
}

// FindAbsenceByIDWithSdCalls gets all the calls that were made to FindAbsenceByIDWithSd.
// Check the length with:
//
//	len(mockedStore.FindAbsenceByIDWithSdCalls())
func (mock *StoreMock) FindAbsenceByIDWithSdCalls() []struct {
	Ctx       context.Context
	Sd        Sd
	AbsenceID uuid.UUID
} {
	var calls []struct {
		Ctx       context.Context
		Sd        Sd
		AbsenceID uuid.UUID
	}
	mock.lockFindAbsenceByIDWithSd.RLock()
	calls = mock.calls.FindAbsenceByIDWithSd
	mock.lockFindAbsenceByIDWithSd.RUnlock()
	return calls
}

// FindAttendStatusByID calls FindAttendStatusByIDFunc.
func (mock *StoreMock) FindAttendStatusByID(ctx context.Context, attendStatusID uuid.UUID) (entity.AttendStatus, error) {
	if mock.FindAttendStatusByIDFunc == nil {
		panic("StoreMock.FindAttendStatusByIDFunc: method is nil but Store.FindAttendStatusByID was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		AttendStatusID uuid.UUID
	}{
		Ctx:            ctx,
		AttendStatusID: attendStatusID,
	}
	mock.lockFindAttendStatusByID.Lock()
	mock.calls.FindAttendStatusByID = append(mock.calls.FindAttendStatusByID, callInfo)
	mock.lockFindAttendStatusByID.Unlock()
	return mock.FindAttendStatusByIDFunc(ctx, attendStatusID)
}

// FindAttendStatusByIDCalls gets all the calls that were made to FindAttendStatusByID.
// Check the length with:
//
//	len(mockedStore.FindAttendStatusByIDCalls())
func (mock *StoreMock) FindAttendStatusByIDCalls() []struct {
	Ctx            context.Context
	AttendStatusID uuid.UUID
} {
	var calls []struct {
		Ctx            context.Context
		AttendStatusID uuid.UUID
	}
	mock.lockFindAttendStatusByID.RLock()
	calls = mock.calls.FindAttendStatusByID
	mock.lockFindAttendStatusByID.RUnlock()
	return calls
}

// FindAttendStatusByIDWithSd calls FindAttendStatusByIDWithSdFunc.
func (mock *StoreMock) FindAttendStatusByIDWithSd(ctx context.Context, sd Sd, attendStatusID uuid.UUID) (entity.AttendStatus, error) {
	if mock.FindAttendStatusByIDWithSdFunc == nil {
		panic("StoreMock.FindAttendStatusByIDWithSdFunc: method is nil but Store.FindAttendStatusByIDWithSd was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		Sd             Sd
		AttendStatusID uuid.UUID
	}{
		Ctx:            ctx,
		Sd:             sd,
		AttendStatusID: attendStatusID,
	}
	mock.lockFindAttendStatusByIDWithSd.Lock()
	mock.calls.FindAttendStatusByIDWithSd = append(mock.calls.FindAttendStatusByIDWithSd, callInfo)
	mock.lockFindAttendStatusByIDWithSd.Unlock()
	return mock.FindAttendStatusByIDWithSdFunc(ctx, sd, attendStatusID)
}

// FindAttendStatusByIDWithSdCalls gets all the calls that were made to FindAttendStatusByIDWithSd.
// Check the length with:
//
//	len(mockedStore.FindAttendStatusByIDWithSdCalls())
func (mock *StoreMock) FindAttendStatusByIDWithSdCalls() []struct {
	Ctx            context.Context
	Sd             Sd
	AttendStatusID uuid.UUID
} {
	var calls []struct {
		Ctx            context.Context
		Sd             Sd
		AttendStatusID uuid.UUID
	}
	mock.lockFindAttendStatusByIDWithSd.RLock()
	calls = mock.calls.FindAttendStatusByIDWithSd
	mock.lockFindAttendStatusByIDWithSd.RUnlock()
	return calls
}

// FindAttendStatusByKey calls FindAttendStatusByKeyFunc.
func (mock *StoreMock) FindAttendStatusByKey(ctx context.Context, key string) (entity.AttendStatus, error) {
	if mock.FindAttendStatusByKeyFunc == nil {
		panic("StoreMock.FindAttendStatusByKeyFunc: method is nil but Store.FindAttendStatusByKey was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockFindAttendStatusByKey.Lock()
	mock.calls.FindAttendStatusByKey = append(mock.calls.FindAttendStatusByKey, callInfo)
	mock.lockFindAttendStatusByKey.Unlock()
	return mock.FindAttendStatusByKeyFunc(ctx, key)
}

// FindAttendStatusByKeyCalls gets all the calls that were made to FindAttendStatusByKey.
// Check the length with:
//
//	len(mockedStore.FindAttendStatusByKeyCalls())
func (mock *StoreMock) FindAttendStatusByKeyCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockFindAttendStatusByKey.RLock()
	calls = mock.calls.FindAttendStatusByKey
	mock.lockFindAttendStatusByKey.RUnlock()
	return calls
}

// FindAttendStatusByKeyWithSd calls FindAttendStatusByKeyWithSdFunc.
func (mock *StoreMock) FindAttendStatusByKeyWithSd(ctx context.Context, sd Sd, key string) (entity.AttendStatus, error) {
	if mock.FindAttendStatusByKeyWithSdFunc == nil {
		panic("StoreMock.FindAttendStatusByKeyWithSdFunc: method is nil but Store.FindAttendStatusByKeyWithSd was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}{
		Ctx: ctx,
		Sd:  sd,
		Key: key,
	}
	mock.lockFindAttendStatusByKeyWithSd.Lock()
	mock.calls.FindAttendStatusByKeyWithSd = append(mock.calls.FindAttendStatusByKeyWithSd, callInfo)
	mock.lockFindAttendStatusByKeyWithSd.Unlock()
	return mock.FindAttendStatusByKeyWithSdFunc(ctx, sd, key)
}

// FindAttendStatusByKeyWithSdCalls gets all the calls that were made to FindAttendStatusByKeyWithSd.
// Check the length with:
//
//	len(mockedStore.FindAttendStatusByKeyWithSdCalls())
func (mock *StoreMock) FindAttendStatusByKeyWithSdCalls() []struct {
	Ctx context.Context
	Sd  Sd
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}
	mock.lockFindAttendStatusByKeyWithSd.RLock()
	calls = mock.calls.FindAttendStatusByKeyWithSd
	mock.lockFindAttendStatusByKeyWithSd.RUnlock()
	return calls
}

// FindAttendanceTypeByID calls FindAttendanceTypeByIDFunc.
func (mock *StoreMock) FindAttendanceTypeByID(ctx context.Context, attendanceTypeID uuid.UUID) (entity.AttendanceType, error) {
	if mock.FindAttendanceTypeByIDFunc == nil {
		panic("StoreMock.FindAttendanceTypeByIDFunc: method is nil but Store.FindAttendanceTypeByID was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		AttendanceTypeID uuid.UUID
	}{
		Ctx:              ctx,
		AttendanceTypeID: attendanceTypeID,
	}
	mock.lockFindAttendanceTypeByID.Lock()
	mock.calls.FindAttendanceTypeByID = append(mock.calls.FindAttendanceTypeByID, callInfo)
	mock.lockFindAttendanceTypeByID.Unlock()
	return mock.FindAttendanceTypeByIDFunc(ctx, attendanceTypeID)
}

// FindAttendanceTypeByIDCalls gets all the calls that were made to FindAttendanceTypeByID.
// Check the length with:
//
//	len(mockedStore.FindAttendanceTypeByIDCalls())
func (mock *StoreMock) FindAttendanceTypeByIDCalls() []struct {
	Ctx              context.Context
	AttendanceTypeID uuid.UUID
} {
	var calls []struct {
		Ctx              context.Context
		AttendanceTypeID uuid.UUID
	}
	mock.lockFindAttendanceTypeByID.RLock()
	calls = mock.calls.FindAttendanceTypeByID
	mock.lockFindAttendanceTypeByID.RUnlock()
	return calls
}

// FindAttendanceTypeByIDWithSd calls FindAttendanceTypeByIDWithSdFunc.
func (mock *StoreMock) FindAttendanceTypeByIDWithSd(ctx context.Context, sd Sd, attendanceTypeID uuid.UUID) (entity.AttendanceType, error) {
	if mock.FindAttendanceTypeByIDWithSdFunc == nil {
		panic("StoreMock.FindAttendanceTypeByIDWithSdFunc: method is nil but Store.FindAttendanceTypeByIDWithSd was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		Sd               Sd
		AttendanceTypeID uuid.UUID
	}{
		Ctx:              ctx,
		Sd:               sd,
		AttendanceTypeID: attendanceTypeID,
	}
	mock.lockFindAttendanceTypeByIDWithSd.Lock()
	mock.calls.FindAttendanceTypeByIDWithSd = append(mock.calls.FindAttendanceTypeByIDWithSd, callInfo)
	mock.lockFindAttendanceTypeByIDWithSd.Unlock()
	return mock.FindAttendanceTypeByIDWithSdFunc(ctx, sd, attendanceTypeID)
}

// FindAttendanceTypeByIDWithSdCalls gets all the calls that were made to FindAttendanceTypeByIDWithSd.
// Check the length with:
//
//	len(mockedStore.FindAttendanceTypeByIDWithSdCalls())
func (mock *StoreMock) FindAttendanceTypeByIDWithSdCalls() []struct {
	Ctx              context.Context
	Sd               Sd
	AttendanceTypeID uuid.UUID
} {
	var calls []struct {
		Ctx              context.Context
		Sd               Sd
		AttendanceTypeID uuid.UUID
	}
	mock.lockFindAttendanceTypeByIDWithSd.RLock()
	calls = mock.calls.FindAttendanceTypeByIDWithSd
	mock.lockFindAttendanceTypeByIDWithSd.RUnlock()
	return calls
}

// FindAttendanceTypeByKey calls FindAttendanceTypeByKeyFunc.
func (mock *StoreMock) FindAttendanceTypeByKey(ctx context.Context, key string) (entity.AttendanceType, error) {
	if mock.FindAttendanceTypeByKeyFunc == nil {
		panic("StoreMock.FindAttendanceTypeByKeyFunc: method is nil but Store.FindAttendanceTypeByKey was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockFindAttendanceTypeByKey.Lock()
	mock.calls.FindAttendanceTypeByKey = append(mock.calls.FindAttendanceTypeByKey, callInfo)
	mock.lockFindAttendanceTypeByKey.Unlock()
	return mock.FindAttendanceTypeByKeyFunc(ctx, key)
}

// FindAttendanceTypeByKeyCalls gets all the calls that were made to FindAttendanceTypeByKey.
// Check the length with:
//
//	len(mockedStore.FindAttendanceTypeByKeyCalls())
func (mock *StoreMock) FindAttendanceTypeByKeyCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockFindAttendanceTypeByKey.RLock()
	calls = mock.calls.FindAttendanceTypeByKey
	mock.lockFindAttendanceTypeByKey.RUnlock()
	return calls
}

// FindAttendanceTypeByKeyWithSd calls FindAttendanceTypeByKeyWithSdFunc.
func (mock *StoreMock) FindAttendanceTypeByKeyWithSd(ctx context.Context, sd Sd, key string) (entity.AttendanceType, error) {
	if mock.FindAttendanceTypeByKeyWithSdFunc == nil {
		panic("StoreMock.FindAttendanceTypeByKeyWithSdFunc: method is nil but Store.FindAttendanceTypeByKeyWithSd was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}{
		Ctx: ctx,
		Sd:  sd,
		Key: key,
	}
	mock.lockFindAttendanceTypeByKeyWithSd.Lock()
	mock.calls.FindAttendanceTypeByKeyWithSd = append(mock.calls.FindAttendanceTypeByKeyWithSd, callInfo)
	mock.lockFindAttendanceTypeByKeyWithSd.Unlock()
	return mock.FindAttendanceTypeByKeyWithSdFunc(ctx, sd, key)
}

// FindAttendanceTypeByKeyWithSdCalls gets all the calls that were made to FindAttendanceTypeByKeyWithSd.
// Check the length with:
//
//	len(mockedStore.FindAttendanceTypeByKeyWithSdCalls())
func (mock *StoreMock) FindAttendanceTypeByKeyWithSdCalls() []struct {
	Ctx context.Context
	Sd  Sd
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}
	mock.lockFindAttendanceTypeByKeyWithSd.RLock()
	calls = mock.calls.FindAttendanceTypeByKeyWithSd
	mock.lockFindAttendanceTypeByKeyWithSd.RUnlock()
	return calls
}

// FindEventTypeByID calls FindEventTypeByIDFunc.
func (mock *StoreMock) FindEventTypeByID(ctx context.Context, eventTypeID uuid.UUID) (entity.EventType, error) {
	if mock.FindEventTypeByIDFunc == nil {
		panic("StoreMock.FindEventTypeByIDFunc: method is nil but Store.FindEventTypeByID was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		EventTypeID uuid.UUID
	}{
		Ctx:         ctx,
		EventTypeID: eventTypeID,
	}
	mock.lockFindEventTypeByID.Lock()
	mock.calls.FindEventTypeByID = append(mock.calls.FindEventTypeByID, callInfo)
	mock.lockFindEventTypeByID.Unlock()
	return mock.FindEventTypeByIDFunc(ctx, eventTypeID)
}

// FindEventTypeByIDCalls gets all the calls that were made to FindEventTypeByID.
// Check the length with:
//
//	len(mockedStore.FindEventTypeByIDCalls())
func (mock *StoreMock) FindEventTypeByIDCalls() []struct {
	Ctx         context.Context
	EventTypeID uuid.UUID
} {
	var calls []struct {
		Ctx         context.Context
		EventTypeID uuid.UUID
	}
	mock.lockFindEventTypeByID.RLock()
	calls = mock.calls.FindEventTypeByID
	mock.lockFindEventTypeByID.RUnlock()
	return calls
}

// FindEventTypeByIDWithSd calls FindEventTypeByIDWithSdFunc.
func (mock *StoreMock) FindEventTypeByIDWithSd(ctx context.Context, sd Sd, eventTypeID uuid.UUID) (entity.EventType, error) {
	if mock.FindEventTypeByIDWithSdFunc == nil {
		panic("StoreMock.FindEventTypeByIDWithSdFunc: method is nil but Store.FindEventTypeByIDWithSd was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Sd          Sd
		EventTypeID uuid.UUID
	}{
		Ctx:         ctx,
		Sd:          sd,
		EventTypeID: eventTypeID,
	}
	mock.lockFindEventTypeByIDWithSd.Lock()
	mock.calls.FindEventTypeByIDWithSd = append(mock.calls.FindEventTypeByIDWithSd, callInfo)
	mock.lockFindEventTypeByIDWithSd.Unlock()
	return mock.FindEventTypeByIDWithSdFunc(ctx, sd, eventTypeID)
}

// FindEventTypeByIDWithSdCalls gets all the calls that were made to FindEventTypeByIDWithSd.
// Check the length with:
//
//	len(mockedStore.FindEventTypeByIDWithSdCalls())
func (mock *StoreMock) FindEventTypeByIDWithSdCalls() []struct {
	Ctx         context.Context
	Sd          Sd
	EventTypeID uuid.UUID
} {
	var calls []struct {
		Ctx         context.Context
		Sd          Sd
		EventTypeID uuid.UUID
	}
	mock.lockFindEventTypeByIDWithSd.RLock()
	calls = mock.calls.FindEventTypeByIDWithSd
	mock.lockFindEventTypeByIDWithSd.RUnlock()
	return calls
}

// FindEventTypeByKey calls FindEventTypeByKeyFunc.
func (mock *StoreMock) FindEventTypeByKey(ctx context.Context, key string) (entity.EventType, error) {
	if mock.FindEventTypeByKeyFunc == nil {
		panic("StoreMock.FindEventTypeByKeyFunc: method is nil but Store.FindEventTypeByKey was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockFindEventTypeByKey.Lock()
	mock.calls.FindEventTypeByKey = append(mock.calls.FindEventTypeByKey, callInfo)
	mock.lockFindEventTypeByKey.Unlock()
	return mock.FindEventTypeByKeyFunc(ctx, key)
}

// FindEventTypeByKeyCalls gets all the calls that were made to FindEventTypeByKey.
// Check the length with:
//
//	len(mockedStore.FindEventTypeByKeyCalls())
func (mock *StoreMock) FindEventTypeByKeyCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockFindEventTypeByKey.RLock()
	calls = mock.calls.FindEventTypeByKey
	mock.lockFindEventTypeByKey.RUnlock()
	return calls
}

// FindEventTypeByKeyWithSd calls FindEventTypeByKeyWithSdFunc.
func (mock *StoreMock) FindEventTypeByKeyWithSd(ctx context.Context, sd Sd, key string) (entity.EventType, error) {
	if mock.FindEventTypeByKeyWithSdFunc == nil {
		panic("StoreMock.FindEventTypeByKeyWithSdFunc: method is nil but Store.FindEventTypeByKeyWithSd was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}{
		Ctx: ctx,
		Sd:  sd,
		Key: key,
	}
	mock.lockFindEventTypeByKeyWithSd.Lock()
	mock.calls.FindEventTypeByKeyWithSd = append(mock.calls.FindEventTypeByKeyWithSd, callInfo)
	mock.lockFindEventTypeByKeyWithSd.Unlock()
	return mock.FindEventTypeByKeyWithSdFunc(ctx, sd, key)
}

// FindEventTypeByKeyWithSdCalls gets all the calls that were made to FindEventTypeByKeyWithSd.
// Check the length with:
//
//	len(mockedStore.FindEventTypeByKeyWithSdCalls())
func (mock *StoreMock) FindEventTypeByKeyWithSdCalls() []struct {
	Ctx context.Context
	Sd  Sd
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}
	mock.lockFindEventTypeByKeyWithSd.RLock()
	calls = mock.calls.FindEventTypeByKeyWithSd
	mock.lockFindEventTypeByKeyWithSd.RUnlock()
	return calls
}

// FindMimeTypeByID calls FindMimeTypeByIDFunc.
func (mock *StoreMock) FindMimeTypeByID(ctx context.Context, mimeTypeID uuid.UUID) (entity.MimeType, error) {
	if mock.FindMimeTypeByIDFunc == nil {
		panic("StoreMock.FindMimeTypeByIDFunc: method is nil but Store.FindMimeTypeByID was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		MimeTypeID uuid.UUID
	}{
		Ctx:        ctx,
		MimeTypeID: mimeTypeID,
	}
	mock.lockFindMimeTypeByID.Lock()
	mock.calls.FindMimeTypeByID = append(mock.calls.FindMimeTypeByID, callInfo)
	mock.lockFindMimeTypeByID.Unlock()
	return mock.FindMimeTypeByIDFunc(ctx, mimeTypeID)
}

// FindMimeTypeByIDCalls gets all the calls that were made to FindMimeTypeByID.
// Check the length with:
//
//	len(mockedStore.FindMimeTypeByIDCalls())
func (mock *StoreMock) FindMimeTypeByIDCalls() []struct {
	Ctx        context.Context
	MimeTypeID uuid.UUID
} {
	var calls []struct {
		Ctx        context.Context
		MimeTypeID uuid.UUID
	}
	mock.lockFindMimeTypeByID.RLock()
	calls = mock.calls.FindMimeTypeByID
	mock.lockFindMimeTypeByID.RUnlock()
	return calls
}

// FindMimeTypeByIDWithSd calls FindMimeTypeByIDWithSdFunc.
func (mock *StoreMock) FindMimeTypeByIDWithSd(ctx context.Context, sd Sd, mimeTypeID uuid.UUID) (entity.MimeType, error) {
	if mock.FindMimeTypeByIDWithSdFunc == nil {
		panic("StoreMock.FindMimeTypeByIDWithSdFunc: method is nil but Store.FindMimeTypeByIDWithSd was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Sd         Sd
		MimeTypeID uuid.UUID
	}{
		Ctx:        ctx,
		Sd:         sd,
		MimeTypeID: mimeTypeID,
	}
	mock.lockFindMimeTypeByIDWithSd.Lock()
	mock.calls.FindMimeTypeByIDWithSd = append(mock.calls.FindMimeTypeByIDWithSd, callInfo)
	mock.lockFindMimeTypeByIDWithSd.Unlock()
	return mock.FindMimeTypeByIDWithSdFunc(ctx, sd, mimeTypeID)
}

// FindMimeTypeByIDWithSdCalls gets all the calls that were made to FindMimeTypeByIDWithSd.
// Check the length with:
//
//	len(mockedStore.FindMimeTypeByIDWithSdCalls())
func (mock *StoreMock) FindMimeTypeByIDWithSdCalls() []struct {
	Ctx        context.Context
	Sd         Sd
	MimeTypeID uuid.UUID
} {
	var calls []struct {
		Ctx        context.Context
		Sd         Sd
		MimeTypeID uuid.UUID
	}
	mock.lockFindMimeTypeByIDWithSd.RLock()
	calls = mock.calls.FindMimeTypeByIDWithSd
	mock.lockFindMimeTypeByIDWithSd.RUnlock()
	return calls
}

// FindMimeTypeByKey calls FindMimeTypeByKeyFunc.
func (mock *StoreMock) FindMimeTypeByKey(ctx context.Context, key string) (entity.MimeType, error) {
	if mock.FindMimeTypeByKeyFunc == nil {
		panic("StoreMock.FindMimeTypeByKeyFunc: method is nil but Store.FindMimeTypeByKey was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockFindMimeTypeByKey.Lock()
	mock.calls.FindMimeTypeByKey = append(mock.calls.FindMimeTypeByKey, callInfo)
	mock.lockFindMimeTypeByKey.Unlock()
	return mock.FindMimeTypeByKeyFunc(ctx, key)
}

// FindMimeTypeByKeyCalls gets all the calls that were made to FindMimeTypeByKey.
// Check the length with:
//
//	len(mockedStore.FindMimeTypeByKeyCalls())
func (mock *StoreMock) FindMimeTypeByKeyCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockFindMimeTypeByKey.RLock()
	calls = mock.calls.FindMimeTypeByKey
	mock.lockFindMimeTypeByKey.RUnlock()
	return calls
}

// FindMimeTypeByKeyWithSd calls FindMimeTypeByKeyWithSdFunc.
func (mock *StoreMock) FindMimeTypeByKeyWithSd(ctx context.Context, sd Sd, key string) (entity.MimeType, error) {
	if mock.FindMimeTypeByKeyWithSdFunc == nil {
		panic("StoreMock.FindMimeTypeByKeyWithSdFunc: method is nil but Store.FindMimeTypeByKeyWithSd was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}{
		Ctx: ctx,
		Sd:  sd,
		Key: key,
	}
	mock.lockFindMimeTypeByKeyWithSd.Lock()
	mock.calls.FindMimeTypeByKeyWithSd = append(mock.calls.FindMimeTypeByKeyWithSd, callInfo)
	mock.lockFindMimeTypeByKeyWithSd.Unlock()
	return mock.FindMimeTypeByKeyWithSdFunc(ctx, sd, key)
}

// FindMimeTypeByKeyWithSdCalls gets all the calls that were made to FindMimeTypeByKeyWithSd.
// Check the length with:
//
//	len(mockedStore.FindMimeTypeByKeyWithSdCalls())
func (mock *StoreMock) FindMimeTypeByKeyWithSdCalls() []struct {
	Ctx context.Context
	Sd  Sd
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}
	mock.lockFindMimeTypeByKeyWithSd.RLock()
	calls = mock.calls.FindMimeTypeByKeyWithSd
	mock.lockFindMimeTypeByKeyWithSd.RUnlock()
	return calls
}

// FindPermissionByID calls FindPermissionByIDFunc.
func (mock *StoreMock) FindPermissionByID(ctx context.Context, permissionID uuid.UUID) (entity.Permission, error) {
	if mock.FindPermissionByIDFunc == nil {
		panic("StoreMock.FindPermissionByIDFunc: method is nil but Store.FindPermissionByID was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		PermissionID uuid.UUID
	}{
		Ctx:          ctx,
		PermissionID: permissionID,
	}
	mock.lockFindPermissionByID.Lock()
	mock.calls.FindPermissionByID = append(mock.calls.FindPermissionByID, callInfo)
	mock.lockFindPermissionByID.Unlock()
	return mock.FindPermissionByIDFunc(ctx, permissionID)
}

// FindPermissionByIDCalls gets all the calls that were made to FindPermissionByID.
// Check the length with:
//
//	len(mockedStore.FindPermissionByIDCalls())
func (mock *StoreMock) FindPermissionByIDCalls() []struct {
	Ctx          context.Context
	PermissionID uuid.UUID
} {
	var calls []struct {
		Ctx          context.Context
		PermissionID uuid.UUID
	}
	mock.lockFindPermissionByID.RLock()
	calls = mock.calls.FindPermissionByID
	mock.lockFindPermissionByID.RUnlock()
	return calls
}

// FindPermissionByIDWithCategory calls FindPermissionByIDWithCategoryFunc.
func (mock *StoreMock) FindPermissionByIDWithCategory(ctx context.Context, permissionID uuid.UUID) (entity.PermissionWithCategory, error) {
	if mock.FindPermissionByIDWithCategoryFunc == nil {
		panic("StoreMock.FindPermissionByIDWithCategoryFunc: method is nil but Store.FindPermissionByIDWithCategory was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		PermissionID uuid.UUID
	}{
		Ctx:          ctx,
		PermissionID: permissionID,
	}
	mock.lockFindPermissionByIDWithCategory.Lock()
	mock.calls.FindPermissionByIDWithCategory = append(mock.calls.FindPermissionByIDWithCategory, callInfo)
	mock.lockFindPermissionByIDWithCategory.Unlock()
	return mock.FindPermissionByIDWithCategoryFunc(ctx, permissionID)
}

// FindPermissionByIDWithCategoryCalls gets all the calls that were made to FindPermissionByIDWithCategory.
// Check the length with:
//
//	len(mockedStore.FindPermissionByIDWithCategoryCalls())
func (mock *StoreMock) FindPermissionByIDWithCategoryCalls() []struct {
	Ctx          context.Context
	PermissionID uuid.UUID
} {
	var calls []struct {
		Ctx          context.Context
		PermissionID uuid.UUID
	}
	mock.lockFindPermissionByIDWithCategory.RLock()
	calls = mock.calls.FindPermissionByIDWithCategory
	mock.lockFindPermissionByIDWithCategory.RUnlock()
	return calls
}

// FindPermissionByIDWithCategoryWithSd calls FindPermissionByIDWithCategoryWithSdFunc.
func (mock *StoreMock) FindPermissionByIDWithCategoryWithSd(ctx context.Context, sd Sd, permissionID uuid.UUID) (entity.PermissionWithCategory, error) {
	if mock.FindPermissionByIDWithCategoryWithSdFunc == nil {
		panic("StoreMock.FindPermissionByIDWithCategoryWithSdFunc: method is nil but Store.FindPermissionByIDWithCategoryWithSd was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		Sd           Sd
		PermissionID uuid.UUID
	}{
		Ctx:          ctx,
		Sd:           sd,
		PermissionID: permissionID,
	}
	mock.lockFindPermissionByIDWithCategoryWithSd.Lock()
	mock.calls.FindPermissionByIDWithCategoryWithSd = append(mock.calls.FindPermissionByIDWithCategoryWithSd, callInfo)
	mock.lockFindPermissionByIDWithCategoryWithSd.Unlock()
	return mock.FindPermissionByIDWithCategoryWithSdFunc(ctx, sd, permissionID)
}

// FindPermissionByIDWithCategoryWithSdCalls gets all the calls that were made to FindPermissionByIDWithCategoryWithSd.
// Check the length with:
//
//	len(mockedStore.FindPermissionByIDWithCategoryWithSdCalls())
func (mock *StoreMock) FindPermissionByIDWithCategoryWithSdCalls() []struct {
	Ctx          context.Context
	Sd           Sd
	PermissionID uuid.UUID
} {
	var calls []struct {
		Ctx          context.Context
		Sd           Sd
		PermissionID uuid.UUID
	}
	mock.lockFindPermissionByIDWithCategoryWithSd.RLock()
	calls = mock.calls.FindPermissionByIDWithCategoryWithSd
	mock.lockFindPermissionByIDWithCategoryWithSd.RUnlock()
	return calls
}

// FindPermissionByIDWithSd calls FindPermissionByIDWithSdFunc.
func (mock *StoreMock) FindPermissionByIDWithSd(ctx context.Context, sd Sd, permissionID uuid.UUID) (entity.Permission, error) {
	if mock.FindPermissionByIDWithSdFunc == nil {
		panic("StoreMock.FindPermissionByIDWithSdFunc: method is nil but Store.FindPermissionByIDWithSd was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		Sd           Sd
		PermissionID uuid.UUID
	}{
		Ctx:          ctx,
		Sd:           sd,
		PermissionID: permissionID,
	}
	mock.lockFindPermissionByIDWithSd.Lock()
	mock.calls.FindPermissionByIDWithSd = append(mock.calls.FindPermissionByIDWithSd, callInfo)
	mock.lockFindPermissionByIDWithSd.Unlock()
	return mock.FindPermissionByIDWithSdFunc(ctx, sd, permissionID)
}

// FindPermissionByIDWithSdCalls gets all the calls that were made to FindPermissionByIDWithSd.
// Check the length with:
//
//	len(mockedStore.FindPermissionByIDWithSdCalls())
func (mock *StoreMock) FindPermissionByIDWithSdCalls() []struct {
	Ctx          context.Context
	Sd           Sd
	PermissionID uuid.UUID
} {
	var calls []struct {
		Ctx          context.Context
		Sd           Sd
		PermissionID uuid.UUID
	}
	mock.lockFindPermissionByIDWithSd.RLock()
	calls = mock.calls.FindPermissionByIDWithSd
	mock.lockFindPermissionByIDWithSd.RUnlock()
	return calls
}

// FindPermissionByKey calls FindPermissionByKeyFunc.
func (mock *StoreMock) FindPermissionByKey(ctx context.Context, key string) (entity.Permission, error) {
	if mock.FindPermissionByKeyFunc == nil {
		panic("StoreMock.FindPermissionByKeyFunc: method is nil but Store.FindPermissionByKey was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockFindPermissionByKey.Lock()
	mock.calls.FindPermissionByKey = append(mock.calls.FindPermissionByKey, callInfo)
	mock.lockFindPermissionByKey.Unlock()
	return mock.FindPermissionByKeyFunc(ctx, key)
}

// FindPermissionByKeyCalls gets all the calls that were made to FindPermissionByKey.
// Check the length with:
//
//	len(mockedStore.FindPermissionByKeyCalls())
func (mock *StoreMock) FindPermissionByKeyCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockFindPermissionByKey.RLock()
	calls = mock.calls.FindPermissionByKey
	mock.lockFindPermissionByKey.RUnlock()
	return calls
}

// FindPermissionByKeyWithCategory calls FindPermissionByKeyWithCategoryFunc.
func (mock *StoreMock) FindPermissionByKeyWithCategory(ctx context.Context, key string) (entity.PermissionWithCategory, error) {
	if mock.FindPermissionByKeyWithCategoryFunc == nil {
		panic("StoreMock.FindPermissionByKeyWithCategoryFunc: method is nil but Store.FindPermissionByKeyWithCategory was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockFindPermissionByKeyWithCategory.Lock()
	mock.calls.FindPermissionByKeyWithCategory = append(mock.calls.FindPermissionByKeyWithCategory, callInfo)
	mock.lockFindPermissionByKeyWithCategory.Unlock()
	return mock.FindPermissionByKeyWithCategoryFunc(ctx, key)
}

// FindPermissionByKeyWithCategoryCalls gets all the calls that were made to FindPermissionByKeyWithCategory.
// Check the length with:
//
//	len(mockedStore.FindPermissionByKeyWithCategoryCalls())
func (mock *StoreMock) FindPermissionByKeyWithCategoryCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockFindPermissionByKeyWithCategory.RLock()
	calls = mock.calls.FindPermissionByKeyWithCategory
	mock.lockFindPermissionByKeyWithCategory.RUnlock()
	return calls
}

// FindPermissionByKeyWithCategoryWithSd calls FindPermissionByKeyWithCategoryWithSdFunc.
func (mock *StoreMock) FindPermissionByKeyWithCategoryWithSd(ctx context.Context, sd Sd, key string) (entity.PermissionWithCategory, error) {
	if mock.FindPermissionByKeyWithCategoryWithSdFunc == nil {
		panic("StoreMock.FindPermissionByKeyWithCategoryWithSdFunc: method is nil but Store.FindPermissionByKeyWithCategoryWithSd was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}{
		Ctx: ctx,
		Sd:  sd,
		Key: key,
	}
	mock.lockFindPermissionByKeyWithCategoryWithSd.Lock()
	mock.calls.FindPermissionByKeyWithCategoryWithSd = append(mock.calls.FindPermissionByKeyWithCategoryWithSd, callInfo)
	mock.lockFindPermissionByKeyWithCategoryWithSd.Unlock()
	return mock.FindPermissionByKeyWithCategoryWithSdFunc(ctx, sd, key)
}

// FindPermissionByKeyWithCategoryWithSdCalls gets all the calls that were made to FindPermissionByKeyWithCategoryWithSd.
// Check the length with:
//
//	len(mockedStore.FindPermissionByKeyWithCategoryWithSdCalls())
func (mock *StoreMock) FindPermissionByKeyWithCategoryWithSdCalls() []struct {
	Ctx context.Context
	Sd  Sd
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}
	mock.lockFindPermissionByKeyWithCategoryWithSd.RLock()
	calls = mock.calls.FindPermissionByKeyWithCategoryWithSd
	mock.lockFindPermissionByKeyWithCategoryWithSd.RUnlock()
	return calls
}

// FindPermissionByKeyWithSd calls FindPermissionByKeyWithSdFunc.
func (mock *StoreMock) FindPermissionByKeyWithSd(ctx context.Context, sd Sd, key string) (entity.Permission, error) {
	if mock.FindPermissionByKeyWithSdFunc == nil {
		panic("StoreMock.FindPermissionByKeyWithSdFunc: method is nil but Store.FindPermissionByKeyWithSd was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}{
		Ctx: ctx,
		Sd:  sd,
		Key: key,
	}
	mock.lockFindPermissionByKeyWithSd.Lock()
	mock.calls.FindPermissionByKeyWithSd = append(mock.calls.FindPermissionByKeyWithSd, callInfo)
	mock.lockFindPermissionByKeyWithSd.Unlock()
	return mock.FindPermissionByKeyWithSdFunc(ctx, sd, key)
}

// FindPermissionByKeyWithSdCalls gets all the calls that were made to FindPermissionByKeyWithSd.
// Check the length with:
//
//	len(mockedStore.FindPermissionByKeyWithSdCalls())
func (mock *StoreMock) FindPermissionByKeyWithSdCalls() []struct {
	Ctx context.Context
	Sd  Sd
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}
	mock.lockFindPermissionByKeyWithSd.RLock()
	calls = mock.calls.FindPermissionByKeyWithSd
	mock.lockFindPermissionByKeyWithSd.RUnlock()
	return calls
}

// FindPermissionCategoryByID calls FindPermissionCategoryByIDFunc.
func (mock *StoreMock) FindPermissionCategoryByID(ctx context.Context, permissionCategoryID uuid.UUID) (entity.PermissionCategory, error) {
	if mock.FindPermissionCategoryByIDFunc == nil {
		panic("StoreMock.FindPermissionCategoryByIDFunc: method is nil but Store.FindPermissionCategoryByID was just called")
	}
	callInfo := struct {
		Ctx                  context.Context
		PermissionCategoryID uuid.UUID
	}{
		Ctx:                  ctx,
		PermissionCategoryID: permissionCategoryID,
	}
	mock.lockFindPermissionCategoryByID.Lock()
	mock.calls.FindPermissionCategoryByID = append(mock.calls.FindPermissionCategoryByID, callInfo)
	mock.lockFindPermissionCategoryByID.Unlock()
	return mock.FindPermissionCategoryByIDFunc(ctx, permissionCategoryID)
}

// FindPermissionCategoryByIDCalls gets all the calls that were made to FindPermissionCategoryByID.
// Check the length with:
//
//	len(mockedStore.FindPermissionCategoryByIDCalls())
func (mock *StoreMock) FindPermissionCategoryByIDCalls() []struct {
	Ctx                  context.Context
	PermissionCategoryID uuid.UUID
} {
	var calls []struct {
		Ctx                  context.Context
		PermissionCategoryID uuid.UUID
	}
	mock.lockFindPermissionCategoryByID.RLock()
	calls = mock.calls.FindPermissionCategoryByID
	mock.lockFindPermissionCategoryByID.RUnlock()
	return calls
}

// FindPermissionCategoryByIDWithSd calls FindPermissionCategoryByIDWithSdFunc.
func (mock *StoreMock) FindPermissionCategoryByIDWithSd(ctx context.Context, sd Sd, permissionCategoryID uuid.UUID) (entity.PermissionCategory, error) {
	if mock.FindPermissionCategoryByIDWithSdFunc == nil {
		panic("StoreMock.FindPermissionCategoryByIDWithSdFunc: method is nil but Store.FindPermissionCategoryByIDWithSd was just called")
	}
	callInfo := struct {
		Ctx                  context.Context
		Sd                   Sd
		PermissionCategoryID uuid.UUID
	}{
		Ctx:                  ctx,
		Sd:                   sd,
		PermissionCategoryID: permissionCategoryID,
	}
	mock.lockFindPermissionCategoryByIDWithSd.Lock()
	mock.calls.FindPermissionCategoryByIDWithSd = append(mock.calls.FindPermissionCategoryByIDWithSd, callInfo)
	mock.lockFindPermissionCategoryByIDWithSd.Unlock()
	return mock.FindPermissionCategoryByIDWithSdFunc(ctx, sd, permissionCategoryID)
}

// FindPermissionCategoryByIDWithSdCalls gets all the calls that were made to FindPermissionCategoryByIDWithSd.
// Check the length with:
//
//	len(mockedStore.FindPermissionCategoryByIDWithSdCalls())
func (mock *StoreMock) FindPermissionCategoryByIDWithSdCalls() []struct {
	Ctx                  context.Context
	Sd                   Sd
	PermissionCategoryID uuid.UUID
} {
	var calls []struct {
		Ctx                  context.Context
		Sd                   Sd
		PermissionCategoryID uuid.UUID
	}
	mock.lockFindPermissionCategoryByIDWithSd.RLock()
	calls = mock.calls.FindPermissionCategoryByIDWithSd
	mock.lockFindPermissionCategoryByIDWithSd.RUnlock()
	return calls
}

// FindPermissionCategoryByKey calls FindPermissionCategoryByKeyFunc.
func (mock *StoreMock) FindPermissionCategoryByKey(ctx context.Context, key string) (entity.PermissionCategory, error) {
	if mock.FindPermissionCategoryByKeyFunc == nil {
		panic("StoreMock.FindPermissionCategoryByKeyFunc: method is nil but Store.FindPermissionCategoryByKey was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockFindPermissionCategoryByKey.Lock()
	mock.calls.FindPermissionCategoryByKey = append(mock.calls.FindPermissionCategoryByKey, callInfo)
	mock.lockFindPermissionCategoryByKey.Unlock()
	return mock.FindPermissionCategoryByKeyFunc(ctx, key)
}

// FindPermissionCategoryByKeyCalls gets all the calls that were made to FindPermissionCategoryByKey.
// Check the length with:
//
//	len(mockedStore.FindPermissionCategoryByKeyCalls())
func (mock *StoreMock) FindPermissionCategoryByKeyCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockFindPermissionCategoryByKey.RLock()
	calls = mock.calls.FindPermissionCategoryByKey
	mock.lockFindPermissionCategoryByKey.RUnlock()
	return calls
}

// FindPermissionCategoryByKeyWithSd calls FindPermissionCategoryByKeyWithSdFunc.
func (mock *StoreMock) FindPermissionCategoryByKeyWithSd(ctx context.Context, sd Sd, key string) (entity.PermissionCategory, error) {
	if mock.FindPermissionCategoryByKeyWithSdFunc == nil {
		panic("StoreMock.FindPermissionCategoryByKeyWithSdFunc: method is nil but Store.FindPermissionCategoryByKeyWithSd was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}{
		Ctx: ctx,
		Sd:  sd,
		Key: key,
	}
	mock.lockFindPermissionCategoryByKeyWithSd.Lock()
	mock.calls.FindPermissionCategoryByKeyWithSd = append(mock.calls.FindPermissionCategoryByKeyWithSd, callInfo)
	mock.lockFindPermissionCategoryByKeyWithSd.Unlock()
	return mock.FindPermissionCategoryByKeyWithSdFunc(ctx, sd, key)
}

// FindPermissionCategoryByKeyWithSdCalls gets all the calls that were made to FindPermissionCategoryByKeyWithSd.
// Check the length with:
//
//	len(mockedStore.FindPermissionCategoryByKeyWithSdCalls())
func (mock *StoreMock) FindPermissionCategoryByKeyWithSdCalls() []struct {
	Ctx context.Context
	Sd  Sd
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}
	mock.lockFindPermissionCategoryByKeyWithSd.RLock()
	calls = mock.calls.FindPermissionCategoryByKeyWithSd
	mock.lockFindPermissionCategoryByKeyWithSd.RUnlock()
	return calls
}

// FindPolicyByID calls FindPolicyByIDFunc.
func (mock *StoreMock) FindPolicyByID(ctx context.Context, policyID uuid.UUID) (entity.Policy, error) {
	if mock.FindPolicyByIDFunc == nil {
		panic("StoreMock.FindPolicyByIDFunc: method is nil but Store.FindPolicyByID was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		PolicyID uuid.UUID
	}{
		Ctx:      ctx,
		PolicyID: policyID,
	}
	mock.lockFindPolicyByID.Lock()
	mock.calls.FindPolicyByID = append(mock.calls.FindPolicyByID, callInfo)
	mock.lockFindPolicyByID.Unlock()
	return mock.FindPolicyByIDFunc(ctx, policyID)
}

// FindPolicyByIDCalls gets all the calls that were made to FindPolicyByID.
// Check the length with:
//
//	len(mockedStore.FindPolicyByIDCalls())
func (mock *StoreMock) FindPolicyByIDCalls() []struct {
	Ctx      context.Context
	PolicyID uuid.UUID
} {
	var calls []struct {
		Ctx      context.Context
		PolicyID uuid.UUID
	}
	mock.lockFindPolicyByID.RLock()
	calls = mock.calls.FindPolicyByID
	mock.lockFindPolicyByID.RUnlock()
	return calls
}

// FindPolicyByIDWithCategory calls FindPolicyByIDWithCategoryFunc.
func (mock *StoreMock) FindPolicyByIDWithCategory(ctx context.Context, policyID uuid.UUID) (entity.PolicyWithCategory, error) {
	if mock.FindPolicyByIDWithCategoryFunc == nil {
		panic("StoreMock.FindPolicyByIDWithCategoryFunc: method is nil but Store.FindPolicyByIDWithCategory was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		PolicyID uuid.UUID
	}{
		Ctx:      ctx,
		PolicyID: policyID,
	}
	mock.lockFindPolicyByIDWithCategory.Lock()
	mock.calls.FindPolicyByIDWithCategory = append(mock.calls.FindPolicyByIDWithCategory, callInfo)
	mock.lockFindPolicyByIDWithCategory.Unlock()
	return mock.FindPolicyByIDWithCategoryFunc(ctx, policyID)
}

// FindPolicyByIDWithCategoryCalls gets all the calls that were made to FindPolicyByIDWithCategory.
// Check the length with:
//
//	len(mockedStore.FindPolicyByIDWithCategoryCalls())
func (mock *StoreMock) FindPolicyByIDWithCategoryCalls() []struct {
	Ctx      context.Context
	PolicyID uuid.UUID
} {
	var calls []struct {
		Ctx      context.Context
		PolicyID uuid.UUID
	}
	mock.lockFindPolicyByIDWithCategory.RLock()
	calls = mock.calls.FindPolicyByIDWithCategory
	mock.lockFindPolicyByIDWithCategory.RUnlock()
	return calls
}

// FindPolicyByIDWithCategoryWithSd calls FindPolicyByIDWithCategoryWithSdFunc.
func (mock *StoreMock) FindPolicyByIDWithCategoryWithSd(ctx context.Context, sd Sd, policyID uuid.UUID) (entity.PolicyWithCategory, error) {
	if mock.FindPolicyByIDWithCategoryWithSdFunc == nil {
		panic("StoreMock.FindPolicyByIDWithCategoryWithSdFunc: method is nil but Store.FindPolicyByIDWithCategoryWithSd was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Sd       Sd
		PolicyID uuid.UUID
	}{
		Ctx:      ctx,
		Sd:       sd,
		PolicyID: policyID,
	}
	mock.lockFindPolicyByIDWithCategoryWithSd.Lock()
	mock.calls.FindPolicyByIDWithCategoryWithSd = append(mock.calls.FindPolicyByIDWithCategoryWithSd, callInfo)
	mock.lockFindPolicyByIDWithCategoryWithSd.Unlock()
	return mock.FindPolicyByIDWithCategoryWithSdFunc(ctx, sd, policyID)
}

// FindPolicyByIDWithCategoryWithSdCalls gets all the calls that were made to FindPolicyByIDWithCategoryWithSd.
// Check the length with:
//
//	len(mockedStore.FindPolicyByIDWithCategoryWithSdCalls())
func (mock *StoreMock) FindPolicyByIDWithCategoryWithSdCalls() []struct {
	Ctx      context.Context
	Sd       Sd
	PolicyID uuid.UUID
} {
	var calls []struct {
		Ctx      context.Context
		Sd       Sd
		PolicyID uuid.UUID
	}
	mock.lockFindPolicyByIDWithCategoryWithSd.RLock()
	calls = mock.calls.FindPolicyByIDWithCategoryWithSd
	mock.lockFindPolicyByIDWithCategoryWithSd.RUnlock()
	return calls
}

// FindPolicyByIDWithSd calls FindPolicyByIDWithSdFunc.
func (mock *StoreMock) FindPolicyByIDWithSd(ctx context.Context, sd Sd, policyID uuid.UUID) (entity.Policy, error) {
	if mock.FindPolicyByIDWithSdFunc == nil {
		panic("StoreMock.FindPolicyByIDWithSdFunc: method is nil but Store.FindPolicyByIDWithSd was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Sd       Sd
		PolicyID uuid.UUID
	}{
		Ctx:      ctx,
		Sd:       sd,
		PolicyID: policyID,
	}
	mock.lockFindPolicyByIDWithSd.Lock()
	mock.calls.FindPolicyByIDWithSd = append(mock.calls.FindPolicyByIDWithSd, callInfo)
	mock.lockFindPolicyByIDWithSd.Unlock()
	return mock.FindPolicyByIDWithSdFunc(ctx, sd, policyID)
}

// FindPolicyByIDWithSdCalls gets all the calls that were made to FindPolicyByIDWithSd.
// Check the length with:
//
//	len(mockedStore.FindPolicyByIDWithSdCalls())
func (mock *StoreMock) FindPolicyByIDWithSdCalls() []struct {
	Ctx      context.Context
	Sd       Sd
	PolicyID uuid.UUID
} {
	var calls []struct {
		Ctx      context.Context
		Sd       Sd
		PolicyID uuid.UUID
	}
	mock.lockFindPolicyByIDWithSd.RLock()
	calls = mock.calls.FindPolicyByIDWithSd
	mock.lockFindPolicyByIDWithSd.RUnlock()
	return calls
}

// FindPolicyByKey calls FindPolicyByKeyFunc.
func (mock *StoreMock) FindPolicyByKey(ctx context.Context, key string) (entity.Policy, error) {
	if mock.FindPolicyByKeyFunc == nil {
		panic("StoreMock.FindPolicyByKeyFunc: method is nil but Store.FindPolicyByKey was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockFindPolicyByKey.Lock()
	mock.calls.FindPolicyByKey = append(mock.calls.FindPolicyByKey, callInfo)
	mock.lockFindPolicyByKey.Unlock()
	return mock.FindPolicyByKeyFunc(ctx, key)
}

// FindPolicyByKeyCalls gets all the calls that were made to FindPolicyByKey.
// Check the length with:
//
//	len(mockedStore.FindPolicyByKeyCalls())
func (mock *StoreMock) FindPolicyByKeyCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockFindPolicyByKey.RLock()
	calls = mock.calls.FindPolicyByKey
	mock.lockFindPolicyByKey.RUnlock()
	return calls
}

// FindPolicyByKeyWithCategory calls FindPolicyByKeyWithCategoryFunc.
func (mock *StoreMock) FindPolicyByKeyWithCategory(ctx context.Context, key string) (entity.PolicyWithCategory, error) {
	if mock.FindPolicyByKeyWithCategoryFunc == nil {
		panic("StoreMock.FindPolicyByKeyWithCategoryFunc: method is nil but Store.FindPolicyByKeyWithCategory was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockFindPolicyByKeyWithCategory.Lock()
	mock.calls.FindPolicyByKeyWithCategory = append(mock.calls.FindPolicyByKeyWithCategory, callInfo)
	mock.lockFindPolicyByKeyWithCategory.Unlock()
	return mock.FindPolicyByKeyWithCategoryFunc(ctx, key)
}

// FindPolicyByKeyWithCategoryCalls gets all the calls that were made to FindPolicyByKeyWithCategory.
// Check the length with:
//
//	len(mockedStore.FindPolicyByKeyWithCategoryCalls())
func (mock *StoreMock) FindPolicyByKeyWithCategoryCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockFindPolicyByKeyWithCategory.RLock()
	calls = mock.calls.FindPolicyByKeyWithCategory
	mock.lockFindPolicyByKeyWithCategory.RUnlock()
	return calls
}

// FindPolicyByKeyWithCategoryWithSd calls FindPolicyByKeyWithCategoryWithSdFunc.
func (mock *StoreMock) FindPolicyByKeyWithCategoryWithSd(ctx context.Context, sd Sd, key string) (entity.PolicyWithCategory, error) {
	if mock.FindPolicyByKeyWithCategoryWithSdFunc == nil {
		panic("StoreMock.FindPolicyByKeyWithCategoryWithSdFunc: method is nil but Store.FindPolicyByKeyWithCategoryWithSd was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}{
		Ctx: ctx,
		Sd:  sd,
		Key: key,
	}
	mock.lockFindPolicyByKeyWithCategoryWithSd.Lock()
	mock.calls.FindPolicyByKeyWithCategoryWithSd = append(mock.calls.FindPolicyByKeyWithCategoryWithSd, callInfo)
	mock.lockFindPolicyByKeyWithCategoryWithSd.Unlock()
	return mock.FindPolicyByKeyWithCategoryWithSdFunc(ctx, sd, key)
}

// FindPolicyByKeyWithCategoryWithSdCalls gets all the calls that were made to FindPolicyByKeyWithCategoryWithSd.
// Check the length with:
//
//	len(mockedStore.FindPolicyByKeyWithCategoryWithSdCalls())
func (mock *StoreMock) FindPolicyByKeyWithCategoryWithSdCalls() []struct {
	Ctx context.Context
	Sd  Sd
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}
	mock.lockFindPolicyByKeyWithCategoryWithSd.RLock()
	calls = mock.calls.FindPolicyByKeyWithCategoryWithSd
	mock.lockFindPolicyByKeyWithCategoryWithSd.RUnlock()
	return calls
}

// FindPolicyByKeyWithSd calls FindPolicyByKeyWithSdFunc.
func (mock *StoreMock) FindPolicyByKeyWithSd(ctx context.Context, sd Sd, key string) (entity.Policy, error) {
	if mock.FindPolicyByKeyWithSdFunc == nil {
		panic("StoreMock.FindPolicyByKeyWithSdFunc: method is nil but Store.FindPolicyByKeyWithSd was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}{
		Ctx: ctx,
		Sd:  sd,
		Key: key,
	}
	mock.lockFindPolicyByKeyWithSd.Lock()
	mock.calls.FindPolicyByKeyWithSd = append(mock.calls.FindPolicyByKeyWithSd, callInfo)
	mock.lockFindPolicyByKeyWithSd.Unlock()
	return mock.FindPolicyByKeyWithSdFunc(ctx, sd, key)
}

// FindPolicyByKeyWithSdCalls gets all the calls that were made to FindPolicyByKeyWithSd.
// Check the length with:
//
//	len(mockedStore.FindPolicyByKeyWithSdCalls())
func (mock *StoreMock) FindPolicyByKeyWithSdCalls() []struct {
	Ctx context.Context
	Sd  Sd
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}
	mock.lockFindPolicyByKeyWithSd.RLock()
	calls = mock.calls.FindPolicyByKeyWithSd
	mock.lockFindPolicyByKeyWithSd.RUnlock()
	return calls
}

// FindPolicyCategoryByID calls FindPolicyCategoryByIDFunc.
func (mock *StoreMock) FindPolicyCategoryByID(ctx context.Context, policyCategoryID uuid.UUID) (entity.PolicyCategory, error) {
	if mock.FindPolicyCategoryByIDFunc == nil {
		panic("StoreMock.FindPolicyCategoryByIDFunc: method is nil but Store.FindPolicyCategoryByID was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		PolicyCategoryID uuid.UUID
	}{
		Ctx:              ctx,
		PolicyCategoryID: policyCategoryID,
	}
	mock.lockFindPolicyCategoryByID.Lock()
	mock.calls.FindPolicyCategoryByID = append(mock.calls.FindPolicyCategoryByID, callInfo)
	mock.lockFindPolicyCategoryByID.Unlock()
	return mock.FindPolicyCategoryByIDFunc(ctx, policyCategoryID)
}

// FindPolicyCategoryByIDCalls gets all the calls that were made to FindPolicyCategoryByID.
// Check the length with:
//
//	len(mockedStore.FindPolicyCategoryByIDCalls())
func (mock *StoreMock) FindPolicyCategoryByIDCalls() []struct {
	Ctx              context.Context
	PolicyCategoryID uuid.UUID
} {
	var calls []struct {
		Ctx              context.Context
		PolicyCategoryID uuid.UUID
	}
	mock.lockFindPolicyCategoryByID.RLock()
	calls = mock.calls.FindPolicyCategoryByID
	mock.lockFindPolicyCategoryByID.RUnlock()
	return calls
}

// FindPolicyCategoryByIDWithSd calls FindPolicyCategoryByIDWithSdFunc.
func (mock *StoreMock) FindPolicyCategoryByIDWithSd(ctx context.Context, sd Sd, policyCategoryID uuid.UUID) (entity.PolicyCategory, error) {
	if mock.FindPolicyCategoryByIDWithSdFunc == nil {
		panic("StoreMock.FindPolicyCategoryByIDWithSdFunc: method is nil but Store.FindPolicyCategoryByIDWithSd was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		Sd               Sd
		PolicyCategoryID uuid.UUID
	}{
		Ctx:              ctx,
		Sd:               sd,
		PolicyCategoryID: policyCategoryID,
	}
	mock.lockFindPolicyCategoryByIDWithSd.Lock()
	mock.calls.FindPolicyCategoryByIDWithSd = append(mock.calls.FindPolicyCategoryByIDWithSd, callInfo)
	mock.lockFindPolicyCategoryByIDWithSd.Unlock()
	return mock.FindPolicyCategoryByIDWithSdFunc(ctx, sd, policyCategoryID)
}

// FindPolicyCategoryByIDWithSdCalls gets all the calls that were made to FindPolicyCategoryByIDWithSd.
// Check the length with:
//
//	len(mockedStore.FindPolicyCategoryByIDWithSdCalls())
func (mock *StoreMock) FindPolicyCategoryByIDWithSdCalls() []struct {
	Ctx              context.Context
	Sd               Sd
	PolicyCategoryID uuid.UUID
} {
	var calls []struct {
		Ctx              context.Context
		Sd               Sd
		PolicyCategoryID uuid.UUID
	}
	mock.lockFindPolicyCategoryByIDWithSd.RLock()
	calls = mock.calls.FindPolicyCategoryByIDWithSd
	mock.lockFindPolicyCategoryByIDWithSd.RUnlock()
	return calls
}

// FindPolicyCategoryByKey calls FindPolicyCategoryByKeyFunc.
func (mock *StoreMock) FindPolicyCategoryByKey(ctx context.Context, key string) (entity.PolicyCategory, error) {
	if mock.FindPolicyCategoryByKeyFunc == nil {
		panic("StoreMock.FindPolicyCategoryByKeyFunc: method is nil but Store.FindPolicyCategoryByKey was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockFindPolicyCategoryByKey.Lock()
	mock.calls.FindPolicyCategoryByKey = append(mock.calls.FindPolicyCategoryByKey, callInfo)
	mock.lockFindPolicyCategoryByKey.Unlock()
	return mock.FindPolicyCategoryByKeyFunc(ctx, key)
}

// FindPolicyCategoryByKeyCalls gets all the calls that were made to FindPolicyCategoryByKey.
// Check the length with:
//
//	len(mockedStore.FindPolicyCategoryByKeyCalls())
func (mock *StoreMock) FindPolicyCategoryByKeyCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockFindPolicyCategoryByKey.RLock()
	calls = mock.calls.FindPolicyCategoryByKey
	mock.lockFindPolicyCategoryByKey.RUnlock()
	return calls
}

// FindPolicyCategoryByKeyWithSd calls FindPolicyCategoryByKeyWithSdFunc.
func (mock *StoreMock) FindPolicyCategoryByKeyWithSd(ctx context.Context, sd Sd, key string) (entity.PolicyCategory, error) {
	if mock.FindPolicyCategoryByKeyWithSdFunc == nil {
		panic("StoreMock.FindPolicyCategoryByKeyWithSdFunc: method is nil but Store.FindPolicyCategoryByKeyWithSd was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}{
		Ctx: ctx,
		Sd:  sd,
		Key: key,
	}
	mock.lockFindPolicyCategoryByKeyWithSd.Lock()
	mock.calls.FindPolicyCategoryByKeyWithSd = append(mock.calls.FindPolicyCategoryByKeyWithSd, callInfo)
	mock.lockFindPolicyCategoryByKeyWithSd.Unlock()
	return mock.FindPolicyCategoryByKeyWithSdFunc(ctx, sd, key)
}

// FindPolicyCategoryByKeyWithSdCalls gets all the calls that were made to FindPolicyCategoryByKeyWithSd.
// Check the length with:
//
//	len(mockedStore.FindPolicyCategoryByKeyWithSdCalls())
func (mock *StoreMock) FindPolicyCategoryByKeyWithSdCalls() []struct {
	Ctx context.Context
	Sd  Sd
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}
	mock.lockFindPolicyCategoryByKeyWithSd.RLock()
	calls = mock.calls.FindPolicyCategoryByKeyWithSd
	mock.lockFindPolicyCategoryByKeyWithSd.RUnlock()
	return calls
}

// FindRecordTypeByID calls FindRecordTypeByIDFunc.
func (mock *StoreMock) FindRecordTypeByID(ctx context.Context, recordTypeID uuid.UUID) (entity.RecordType, error) {
	if mock.FindRecordTypeByIDFunc == nil {
		panic("StoreMock.FindRecordTypeByIDFunc: method is nil but Store.FindRecordTypeByID was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		RecordTypeID uuid.UUID
	}{
		Ctx:          ctx,
		RecordTypeID: recordTypeID,
	}
	mock.lockFindRecordTypeByID.Lock()
	mock.calls.FindRecordTypeByID = append(mock.calls.FindRecordTypeByID, callInfo)
	mock.lockFindRecordTypeByID.Unlock()
	return mock.FindRecordTypeByIDFunc(ctx, recordTypeID)
}

// FindRecordTypeByIDCalls gets all the calls that were made to FindRecordTypeByID.
// Check the length with:
//
//	len(mockedStore.FindRecordTypeByIDCalls())
func (mock *StoreMock) FindRecordTypeByIDCalls() []struct {
	Ctx          context.Context
	RecordTypeID uuid.UUID
} {
	var calls []struct {
		Ctx          context.Context
		RecordTypeID uuid.UUID
	}
	mock.lockFindRecordTypeByID.RLock()
	calls = mock.calls.FindRecordTypeByID
	mock.lockFindRecordTypeByID.RUnlock()
	return calls
}

// FindRecordTypeByIDWithSd calls FindRecordTypeByIDWithSdFunc.
func (mock *StoreMock) FindRecordTypeByIDWithSd(ctx context.Context, sd Sd, recordTypeID uuid.UUID) (entity.RecordType, error) {
	if mock.FindRecordTypeByIDWithSdFunc == nil {
		panic("StoreMock.FindRecordTypeByIDWithSdFunc: method is nil but Store.FindRecordTypeByIDWithSd was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		Sd           Sd
		RecordTypeID uuid.UUID
	}{
		Ctx:          ctx,
		Sd:           sd,
		RecordTypeID: recordTypeID,
	}
	mock.lockFindRecordTypeByIDWithSd.Lock()
	mock.calls.FindRecordTypeByIDWithSd = append(mock.calls.FindRecordTypeByIDWithSd, callInfo)
	mock.lockFindRecordTypeByIDWithSd.Unlock()
	return mock.FindRecordTypeByIDWithSdFunc(ctx, sd, recordTypeID)
}

// FindRecordTypeByIDWithSdCalls gets all the calls that were made to FindRecordTypeByIDWithSd.
// Check the length with:
//
//	len(mockedStore.FindRecordTypeByIDWithSdCalls())
func (mock *StoreMock) FindRecordTypeByIDWithSdCalls() []struct {
	Ctx          context.Context
	Sd           Sd
	RecordTypeID uuid.UUID
} {
	var calls []struct {
		Ctx          context.Context
		Sd           Sd
		RecordTypeID uuid.UUID
	}
	mock.lockFindRecordTypeByIDWithSd.RLock()
	calls = mock.calls.FindRecordTypeByIDWithSd
	mock.lockFindRecordTypeByIDWithSd.RUnlock()
	return calls
}

// FindRecordTypeByKey calls FindRecordTypeByKeyFunc.
func (mock *StoreMock) FindRecordTypeByKey(ctx context.Context, key string) (entity.RecordType, error) {
	if mock.FindRecordTypeByKeyFunc == nil {
		panic("StoreMock.FindRecordTypeByKeyFunc: method is nil but Store.FindRecordTypeByKey was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockFindRecordTypeByKey.Lock()
	mock.calls.FindRecordTypeByKey = append(mock.calls.FindRecordTypeByKey, callInfo)
	mock.lockFindRecordTypeByKey.Unlock()
	return mock.FindRecordTypeByKeyFunc(ctx, key)
}

// FindRecordTypeByKeyCalls gets all the calls that were made to FindRecordTypeByKey.
// Check the length with:
//
//	len(mockedStore.FindRecordTypeByKeyCalls())
func (mock *StoreMock) FindRecordTypeByKeyCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockFindRecordTypeByKey.RLock()
	calls = mock.calls.FindRecordTypeByKey
	mock.lockFindRecordTypeByKey.RUnlock()
	return calls
}

// FindRecordTypeByKeyWithSd calls FindRecordTypeByKeyWithSdFunc.
func (mock *StoreMock) FindRecordTypeByKeyWithSd(ctx context.Context, sd Sd, key string) (entity.RecordType, error) {
	if mock.FindRecordTypeByKeyWithSdFunc == nil {
		panic("StoreMock.FindRecordTypeByKeyWithSdFunc: method is nil but Store.FindRecordTypeByKeyWithSd was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}{
		Ctx: ctx,
		Sd:  sd,
		Key: key,
	}
	mock.lockFindRecordTypeByKeyWithSd.Lock()
	mock.calls.FindRecordTypeByKeyWithSd = append(mock.calls.FindRecordTypeByKeyWithSd, callInfo)
	mock.lockFindRecordTypeByKeyWithSd.Unlock()
	return mock.FindRecordTypeByKeyWithSdFunc(ctx, sd, key)
}

// FindRecordTypeByKeyWithSdCalls gets all the calls that were made to FindRecordTypeByKeyWithSd.
// Check the length with:
//
//	len(mockedStore.FindRecordTypeByKeyWithSdCalls())
func (mock *StoreMock) FindRecordTypeByKeyWithSdCalls() []struct {
	Ctx context.Context
	Sd  Sd
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}
	mock.lockFindRecordTypeByKeyWithSd.RLock()
	calls = mock.calls.FindRecordTypeByKeyWithSd
	mock.lockFindRecordTypeByKeyWithSd.RUnlock()
	return calls
}

// GetAbsences calls GetAbsencesFunc.
func (mock *StoreMock) GetAbsences(ctx context.Context, order parameter.AbsenceOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Absence], error) {
	if mock.GetAbsencesFunc == nil {
		panic("StoreMock.GetAbsencesFunc: method is nil but Store.GetAbsences was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Order parameter.AbsenceOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetAbsences.Lock()
	mock.calls.GetAbsences = append(mock.calls.GetAbsences, callInfo)
	mock.lockGetAbsences.Unlock()
	return mock.GetAbsencesFunc(ctx, order, np, cp, wc)
}

// GetAbsencesCalls gets all the calls that were made to GetAbsences.
// Check the length with:
//
//	len(mockedStore.GetAbsencesCalls())
func (mock *StoreMock) GetAbsencesCalls() []struct {
	Ctx   context.Context
	Order parameter.AbsenceOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Order parameter.AbsenceOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetAbsences.RLock()
	calls = mock.calls.GetAbsences
	mock.lockGetAbsences.RUnlock()
	return calls
}

// GetAbsencesWithSd calls GetAbsencesWithSdFunc.
func (mock *StoreMock) GetAbsencesWithSd(ctx context.Context, sd Sd, order parameter.AbsenceOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Absence], error) {
	if mock.GetAbsencesWithSdFunc == nil {
		panic("StoreMock.GetAbsencesWithSdFunc: method is nil but Store.GetAbsencesWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Order parameter.AbsenceOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetAbsencesWithSd.Lock()
	mock.calls.GetAbsencesWithSd = append(mock.calls.GetAbsencesWithSd, callInfo)
	mock.lockGetAbsencesWithSd.Unlock()
	return mock.GetAbsencesWithSdFunc(ctx, sd, order, np, cp, wc)
}

// GetAbsencesWithSdCalls gets all the calls that were made to GetAbsencesWithSd.
// Check the length with:
//
//	len(mockedStore.GetAbsencesWithSdCalls())
func (mock *StoreMock) GetAbsencesWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Order parameter.AbsenceOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Order parameter.AbsenceOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetAbsencesWithSd.RLock()
	calls = mock.calls.GetAbsencesWithSd
	mock.lockGetAbsencesWithSd.RUnlock()
	return calls
}

// GetAttendStatuses calls GetAttendStatusesFunc.
func (mock *StoreMock) GetAttendStatuses(ctx context.Context, where parameter.WhereAttendStatusParam, order parameter.AttendStatusOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.AttendStatus], error) {
	if mock.GetAttendStatusesFunc == nil {
		panic("StoreMock.GetAttendStatusesFunc: method is nil but Store.GetAttendStatuses was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereAttendStatusParam
		Order parameter.AttendStatusOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetAttendStatuses.Lock()
	mock.calls.GetAttendStatuses = append(mock.calls.GetAttendStatuses, callInfo)
	mock.lockGetAttendStatuses.Unlock()
	return mock.GetAttendStatusesFunc(ctx, where, order, np, cp, wc)
}

// GetAttendStatusesCalls gets all the calls that were made to GetAttendStatuses.
// Check the length with:
//
//	len(mockedStore.GetAttendStatusesCalls())
func (mock *StoreMock) GetAttendStatusesCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereAttendStatusParam
	Order parameter.AttendStatusOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereAttendStatusParam
		Order parameter.AttendStatusOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetAttendStatuses.RLock()
	calls = mock.calls.GetAttendStatuses
	mock.lockGetAttendStatuses.RUnlock()
	return calls
}

// GetAttendStatusesWithSd calls GetAttendStatusesWithSdFunc.
func (mock *StoreMock) GetAttendStatusesWithSd(ctx context.Context, sd Sd, where parameter.WhereAttendStatusParam, order parameter.AttendStatusOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.AttendStatus], error) {
	if mock.GetAttendStatusesWithSdFunc == nil {
		panic("StoreMock.GetAttendStatusesWithSdFunc: method is nil but Store.GetAttendStatusesWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereAttendStatusParam
		Order parameter.AttendStatusOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetAttendStatusesWithSd.Lock()
	mock.calls.GetAttendStatusesWithSd = append(mock.calls.GetAttendStatusesWithSd, callInfo)
	mock.lockGetAttendStatusesWithSd.Unlock()
	return mock.GetAttendStatusesWithSdFunc(ctx, sd, where, order, np, cp, wc)
}

// GetAttendStatusesWithSdCalls gets all the calls that were made to GetAttendStatusesWithSd.
// Check the length with:
//
//	len(mockedStore.GetAttendStatusesWithSdCalls())
func (mock *StoreMock) GetAttendStatusesWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereAttendStatusParam
	Order parameter.AttendStatusOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereAttendStatusParam
		Order parameter.AttendStatusOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetAttendStatusesWithSd.RLock()
	calls = mock.calls.GetAttendStatusesWithSd
	mock.lockGetAttendStatusesWithSd.RUnlock()
	return calls
}

// GetAttendanceTypes calls GetAttendanceTypesFunc.
func (mock *StoreMock) GetAttendanceTypes(ctx context.Context, where parameter.WhereAttendanceTypeParam, order parameter.AttendanceTypeOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.AttendanceType], error) {
	if mock.GetAttendanceTypesFunc == nil {
		panic("StoreMock.GetAttendanceTypesFunc: method is nil but Store.GetAttendanceTypes was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereAttendanceTypeParam
		Order parameter.AttendanceTypeOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetAttendanceTypes.Lock()
	mock.calls.GetAttendanceTypes = append(mock.calls.GetAttendanceTypes, callInfo)
	mock.lockGetAttendanceTypes.Unlock()
	return mock.GetAttendanceTypesFunc(ctx, where, order, np, cp, wc)
}

// GetAttendanceTypesCalls gets all the calls that were made to GetAttendanceTypes.
// Check the length with:
//
//	len(mockedStore.GetAttendanceTypesCalls())
func (mock *StoreMock) GetAttendanceTypesCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereAttendanceTypeParam
	Order parameter.AttendanceTypeOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereAttendanceTypeParam
		Order parameter.AttendanceTypeOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetAttendanceTypes.RLock()
	calls = mock.calls.GetAttendanceTypes
	mock.lockGetAttendanceTypes.RUnlock()
	return calls
}

// GetAttendanceTypesWithSd calls GetAttendanceTypesWithSdFunc.
func (mock *StoreMock) GetAttendanceTypesWithSd(ctx context.Context, sd Sd, where parameter.WhereAttendanceTypeParam, order parameter.AttendanceTypeOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.AttendanceType], error) {
	if mock.GetAttendanceTypesWithSdFunc == nil {
		panic("StoreMock.GetAttendanceTypesWithSdFunc: method is nil but Store.GetAttendanceTypesWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereAttendanceTypeParam
		Order parameter.AttendanceTypeOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetAttendanceTypesWithSd.Lock()
	mock.calls.GetAttendanceTypesWithSd = append(mock.calls.GetAttendanceTypesWithSd, callInfo)
	mock.lockGetAttendanceTypesWithSd.Unlock()
	return mock.GetAttendanceTypesWithSdFunc(ctx, sd, where, order, np, cp, wc)
}

// GetAttendanceTypesWithSdCalls gets all the calls that were made to GetAttendanceTypesWithSd.
// Check the length with:
//
//	len(mockedStore.GetAttendanceTypesWithSdCalls())
func (mock *StoreMock) GetAttendanceTypesWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereAttendanceTypeParam
	Order parameter.AttendanceTypeOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereAttendanceTypeParam
		Order parameter.AttendanceTypeOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetAttendanceTypesWithSd.RLock()
	calls = mock.calls.GetAttendanceTypesWithSd
	mock.lockGetAttendanceTypesWithSd.RUnlock()
	return calls
}

// GetEventTypes calls GetEventTypesFunc.
func (mock *StoreMock) GetEventTypes(ctx context.Context, where parameter.WhereEventTypeParam, order parameter.EventTypeOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.EventType], error) {
	if mock.GetEventTypesFunc == nil {
		panic("StoreMock.GetEventTypesFunc: method is nil but Store.GetEventTypes was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereEventTypeParam
		Order parameter.EventTypeOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetEventTypes.Lock()
	mock.calls.GetEventTypes = append(mock.calls.GetEventTypes, callInfo)
	mock.lockGetEventTypes.Unlock()
	return mock.GetEventTypesFunc(ctx, where, order, np, cp, wc)
}

// GetEventTypesCalls gets all the calls that were made to GetEventTypes.
// Check the length with:
//
//	len(mockedStore.GetEventTypesCalls())
func (mock *StoreMock) GetEventTypesCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereEventTypeParam
	Order parameter.EventTypeOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereEventTypeParam
		Order parameter.EventTypeOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetEventTypes.RLock()
	calls = mock.calls.GetEventTypes
	mock.lockGetEventTypes.RUnlock()
	return calls
}

// GetEventTypesWithSd calls GetEventTypesWithSdFunc.
func (mock *StoreMock) GetEventTypesWithSd(ctx context.Context, sd Sd, where parameter.WhereEventTypeParam, order parameter.EventTypeOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.EventType], error) {
	if mock.GetEventTypesWithSdFunc == nil {
		panic("StoreMock.GetEventTypesWithSdFunc: method is nil but Store.GetEventTypesWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereEventTypeParam
		Order parameter.EventTypeOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetEventTypesWithSd.Lock()
	mock.calls.GetEventTypesWithSd = append(mock.calls.GetEventTypesWithSd, callInfo)
	mock.lockGetEventTypesWithSd.Unlock()
	return mock.GetEventTypesWithSdFunc(ctx, sd, where, order, np, cp, wc)
}

// GetEventTypesWithSdCalls gets all the calls that were made to GetEventTypesWithSd.
// Check the length with:
//
//	len(mockedStore.GetEventTypesWithSdCalls())
func (mock *StoreMock) GetEventTypesWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereEventTypeParam
	Order parameter.EventTypeOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereEventTypeParam
		Order parameter.EventTypeOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetEventTypesWithSd.RLock()
	calls = mock.calls.GetEventTypesWithSd
	mock.lockGetEventTypesWithSd.RUnlock()
	return calls
}

// GetMimeTypes calls GetMimeTypesFunc.
func (mock *StoreMock) GetMimeTypes(ctx context.Context, where parameter.WhereMimeTypeParam, order parameter.MimeTypeOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MimeType], error) {
	if mock.GetMimeTypesFunc == nil {
		panic("StoreMock.GetMimeTypesFunc: method is nil but Store.GetMimeTypes was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereMimeTypeParam
		Order parameter.MimeTypeOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetMimeTypes.Lock()
	mock.calls.GetMimeTypes = append(mock.calls.GetMimeTypes, callInfo)
	mock.lockGetMimeTypes.Unlock()
	return mock.GetMimeTypesFunc(ctx, where, order, np, cp, wc)
}

// GetMimeTypesCalls gets all the calls that were made to GetMimeTypes.
// Check the length with:
//
//	len(mockedStore.GetMimeTypesCalls())
func (mock *StoreMock) GetMimeTypesCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereMimeTypeParam
	Order parameter.MimeTypeOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereMimeTypeParam
		Order parameter.MimeTypeOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetMimeTypes.RLock()
	calls = mock.calls.GetMimeTypes
	mock.lockGetMimeTypes.RUnlock()
	return calls
}

// GetMimeTypesWithSd calls GetMimeTypesWithSdFunc.
func (mock *StoreMock) GetMimeTypesWithSd(ctx context.Context, sd Sd, where parameter.WhereMimeTypeParam, order parameter.MimeTypeOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.MimeType], error) {
	if mock.GetMimeTypesWithSdFunc == nil {
		panic("StoreMock.GetMimeTypesWithSdFunc: method is nil but Store.GetMimeTypesWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereMimeTypeParam
		Order parameter.MimeTypeOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetMimeTypesWithSd.Lock()
	mock.calls.GetMimeTypesWithSd = append(mock.calls.GetMimeTypesWithSd, callInfo)
	mock.lockGetMimeTypesWithSd.Unlock()
	return mock.GetMimeTypesWithSdFunc(ctx, sd, where, order, np, cp, wc)
}

// GetMimeTypesWithSdCalls gets all the calls that were made to GetMimeTypesWithSd.
// Check the length with:
//
//	len(mockedStore.GetMimeTypesWithSdCalls())
func (mock *StoreMock) GetMimeTypesWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereMimeTypeParam
	Order parameter.MimeTypeOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereMimeTypeParam
		Order parameter.MimeTypeOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetMimeTypesWithSd.RLock()
	calls = mock.calls.GetMimeTypesWithSd
	mock.lockGetMimeTypesWithSd.RUnlock()
	return calls
}

// GetPermissionCategories calls GetPermissionCategoriesFunc.
func (mock *StoreMock) GetPermissionCategories(ctx context.Context, where parameter.WherePermissionCategoryParam, order parameter.PermissionCategoryOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.PermissionCategory], error) {
	if mock.GetPermissionCategoriesFunc == nil {
		panic("StoreMock.GetPermissionCategoriesFunc: method is nil but Store.GetPermissionCategories was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WherePermissionCategoryParam
		Order parameter.PermissionCategoryOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetPermissionCategories.Lock()
	mock.calls.GetPermissionCategories = append(mock.calls.GetPermissionCategories, callInfo)
	mock.lockGetPermissionCategories.Unlock()
	return mock.GetPermissionCategoriesFunc(ctx, where, order, np, cp, wc)
}

// GetPermissionCategoriesCalls gets all the calls that were made to GetPermissionCategories.
// Check the length with:
//
//	len(mockedStore.GetPermissionCategoriesCalls())
func (mock *StoreMock) GetPermissionCategoriesCalls() []struct {
	Ctx   context.Context
	Where parameter.WherePermissionCategoryParam
	Order parameter.PermissionCategoryOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WherePermissionCategoryParam
		Order parameter.PermissionCategoryOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetPermissionCategories.RLock()
	calls = mock.calls.GetPermissionCategories
	mock.lockGetPermissionCategories.RUnlock()
	return calls
}

// GetPermissionCategoriesWithSd calls GetPermissionCategoriesWithSdFunc.
func (mock *StoreMock) GetPermissionCategoriesWithSd(ctx context.Context, sd Sd, where parameter.WherePermissionCategoryParam, order parameter.PermissionCategoryOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.PermissionCategory], error) {
	if mock.GetPermissionCategoriesWithSdFunc == nil {
		panic("StoreMock.GetPermissionCategoriesWithSdFunc: method is nil but Store.GetPermissionCategoriesWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WherePermissionCategoryParam
		Order parameter.PermissionCategoryOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetPermissionCategoriesWithSd.Lock()
	mock.calls.GetPermissionCategoriesWithSd = append(mock.calls.GetPermissionCategoriesWithSd, callInfo)
	mock.lockGetPermissionCategoriesWithSd.Unlock()
	return mock.GetPermissionCategoriesWithSdFunc(ctx, sd, where, order, np, cp, wc)
}

// GetPermissionCategoriesWithSdCalls gets all the calls that were made to GetPermissionCategoriesWithSd.
// Check the length with:
//
//	len(mockedStore.GetPermissionCategoriesWithSdCalls())
func (mock *StoreMock) GetPermissionCategoriesWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WherePermissionCategoryParam
	Order parameter.PermissionCategoryOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WherePermissionCategoryParam
		Order parameter.PermissionCategoryOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetPermissionCategoriesWithSd.RLock()
	calls = mock.calls.GetPermissionCategoriesWithSd
	mock.lockGetPermissionCategoriesWithSd.RUnlock()
	return calls
}

// GetPermissions calls GetPermissionsFunc.
func (mock *StoreMock) GetPermissions(ctx context.Context, where parameter.WherePermissionParam, order parameter.PermissionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Permission], error) {
	if mock.GetPermissionsFunc == nil {
		panic("StoreMock.GetPermissionsFunc: method is nil but Store.GetPermissions was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WherePermissionParam
		Order parameter.PermissionOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetPermissions.Lock()
	mock.calls.GetPermissions = append(mock.calls.GetPermissions, callInfo)
	mock.lockGetPermissions.Unlock()
	return mock.GetPermissionsFunc(ctx, where, order, np, cp, wc)
}

// GetPermissionsCalls gets all the calls that were made to GetPermissions.
// Check the length with:
//
//	len(mockedStore.GetPermissionsCalls())
func (mock *StoreMock) GetPermissionsCalls() []struct {
	Ctx   context.Context
	Where parameter.WherePermissionParam
	Order parameter.PermissionOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WherePermissionParam
		Order parameter.PermissionOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetPermissions.RLock()
	calls = mock.calls.GetPermissions
	mock.lockGetPermissions.RUnlock()
	return calls
}

// GetPermissionsWithCategory calls GetPermissionsWithCategoryFunc.
func (mock *StoreMock) GetPermissionsWithCategory(ctx context.Context, where parameter.WherePermissionParam, order parameter.PermissionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.PermissionWithCategory], error) {
	if mock.GetPermissionsWithCategoryFunc == nil {
		panic("StoreMock.GetPermissionsWithCategoryFunc: method is nil but Store.GetPermissionsWithCategory was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WherePermissionParam
		Order parameter.PermissionOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetPermissionsWithCategory.Lock()
	mock.calls.GetPermissionsWithCategory = append(mock.calls.GetPermissionsWithCategory, callInfo)
	mock.lockGetPermissionsWithCategory.Unlock()
	return mock.GetPermissionsWithCategoryFunc(ctx, where, order, np, cp, wc)
}

// GetPermissionsWithCategoryCalls gets all the calls that were made to GetPermissionsWithCategory.
// Check the length with:
//
//	len(mockedStore.GetPermissionsWithCategoryCalls())
func (mock *StoreMock) GetPermissionsWithCategoryCalls() []struct {
	Ctx   context.Context
	Where parameter.WherePermissionParam
	Order parameter.PermissionOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WherePermissionParam
		Order parameter.PermissionOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetPermissionsWithCategory.RLock()
	calls = mock.calls.GetPermissionsWithCategory
	mock.lockGetPermissionsWithCategory.RUnlock()
	return calls
}

// GetPermissionsWithCategoryWithSd calls GetPermissionsWithCategoryWithSdFunc.
func (mock *StoreMock) GetPermissionsWithCategoryWithSd(ctx context.Context, sd Sd, where parameter.WherePermissionParam, order parameter.PermissionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.PermissionWithCategory], error) {
	if mock.GetPermissionsWithCategoryWithSdFunc == nil {
		panic("StoreMock.GetPermissionsWithCategoryWithSdFunc: method is nil but Store.GetPermissionsWithCategoryWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WherePermissionParam
		Order parameter.PermissionOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetPermissionsWithCategoryWithSd.Lock()
	mock.calls.GetPermissionsWithCategoryWithSd = append(mock.calls.GetPermissionsWithCategoryWithSd, callInfo)
	mock.lockGetPermissionsWithCategoryWithSd.Unlock()
	return mock.GetPermissionsWithCategoryWithSdFunc(ctx, sd, where, order, np, cp, wc)
}

// GetPermissionsWithCategoryWithSdCalls gets all the calls that were made to GetPermissionsWithCategoryWithSd.
// Check the length with:
//
//	len(mockedStore.GetPermissionsWithCategoryWithSdCalls())
func (mock *StoreMock) GetPermissionsWithCategoryWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WherePermissionParam
	Order parameter.PermissionOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WherePermissionParam
		Order parameter.PermissionOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetPermissionsWithCategoryWithSd.RLock()
	calls = mock.calls.GetPermissionsWithCategoryWithSd
	mock.lockGetPermissionsWithCategoryWithSd.RUnlock()
	return calls
}

// GetPermissionsWithSd calls GetPermissionsWithSdFunc.
func (mock *StoreMock) GetPermissionsWithSd(ctx context.Context, sd Sd, where parameter.WherePermissionParam, order parameter.PermissionOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Permission], error) {
	if mock.GetPermissionsWithSdFunc == nil {
		panic("StoreMock.GetPermissionsWithSdFunc: method is nil but Store.GetPermissionsWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WherePermissionParam
		Order parameter.PermissionOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetPermissionsWithSd.Lock()
	mock.calls.GetPermissionsWithSd = append(mock.calls.GetPermissionsWithSd, callInfo)
	mock.lockGetPermissionsWithSd.Unlock()
	return mock.GetPermissionsWithSdFunc(ctx, sd, where, order, np, cp, wc)
}

// GetPermissionsWithSdCalls gets all the calls that were made to GetPermissionsWithSd.
// Check the length with:
//
//	len(mockedStore.GetPermissionsWithSdCalls())
func (mock *StoreMock) GetPermissionsWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WherePermissionParam
	Order parameter.PermissionOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WherePermissionParam
		Order parameter.PermissionOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetPermissionsWithSd.RLock()
	calls = mock.calls.GetPermissionsWithSd
	mock.lockGetPermissionsWithSd.RUnlock()
	return calls
}

// GetPluralAbsences calls GetPluralAbsencesFunc.
func (mock *StoreMock) GetPluralAbsences(ctx context.Context, ids []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.Absence], error) {
	if mock.GetPluralAbsencesFunc == nil {
		panic("StoreMock.GetPluralAbsencesFunc: method is nil but Store.GetPluralAbsences was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Ids []uuid.UUID
		Np  NumberedPaginationParam
	}{
		Ctx: ctx,
		Ids: ids,
		Np:  np,
	}
	mock.lockGetPluralAbsences.Lock()
	mock.calls.GetPluralAbsences = append(mock.calls.GetPluralAbsences, callInfo)
	mock.lockGetPluralAbsences.Unlock()
	return mock.GetPluralAbsencesFunc(ctx, ids, np)
}

// GetPluralAbsencesCalls gets all the calls that were made to GetPluralAbsences.
// Check the length with:
//
//	len(mockedStore.GetPluralAbsencesCalls())
func (mock *StoreMock) GetPluralAbsencesCalls() []struct {
	Ctx context.Context
	Ids []uuid.UUID
	Np  NumberedPaginationParam
} {
	var calls []struct {
		Ctx context.Context
		Ids []uuid.UUID
		Np  NumberedPaginationParam
	}
	mock.lockGetPluralAbsences.RLock()
	calls = mock.calls.GetPluralAbsences
	mock.lockGetPluralAbsences.RUnlock()
	return calls
}

// GetPluralAbsencesWithSd calls GetPluralAbsencesWithSdFunc.
func (mock *StoreMock) GetPluralAbsencesWithSd(ctx context.Context, sd Sd, ids []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.Absence], error) {
	if mock.GetPluralAbsencesWithSdFunc == nil {
		panic("StoreMock.GetPluralAbsencesWithSdFunc: method is nil but Store.GetPluralAbsencesWithSd was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Sd  Sd
		Ids []uuid.UUID
		Np  NumberedPaginationParam
	}{
		Ctx: ctx,
		Sd:  sd,
		Ids: ids,
		Np:  np,
	}
	mock.lockGetPluralAbsencesWithSd.Lock()
	mock.calls.GetPluralAbsencesWithSd = append(mock.calls.GetPluralAbsencesWithSd, callInfo)
	mock.lockGetPluralAbsencesWithSd.Unlock()
	return mock.GetPluralAbsencesWithSdFunc(ctx, sd, ids, np)
}

// GetPluralAbsencesWithSdCalls gets all the calls that were made to GetPluralAbsencesWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralAbsencesWithSdCalls())
func (mock *StoreMock) GetPluralAbsencesWithSdCalls() []struct {
	Ctx context.Context
	Sd  Sd
	Ids []uuid.UUID
	Np  NumberedPaginationParam
} {
	var calls []struct {
		Ctx context.Context
		Sd  Sd
		Ids []uuid.UUID
		Np  NumberedPaginationParam
	}
	mock.lockGetPluralAbsencesWithSd.RLock()
	calls = mock.calls.GetPluralAbsencesWithSd
	mock.lockGetPluralAbsencesWithSd.RUnlock()
	return calls
}

// GetPluralAttendStatuses calls GetPluralAttendStatusesFunc.
func (mock *StoreMock) GetPluralAttendStatuses(ctx context.Context, AttendStatusIDs []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.AttendStatus], error) {
	if mock.GetPluralAttendStatusesFunc == nil {
		panic("StoreMock.GetPluralAttendStatusesFunc: method is nil but Store.GetPluralAttendStatuses was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		AttendStatusIDs []uuid.UUID
		Np              NumberedPaginationParam
	}{
		Ctx:             ctx,
		AttendStatusIDs: AttendStatusIDs,
		Np:              np,
	}
	mock.lockGetPluralAttendStatuses.Lock()
	mock.calls.GetPluralAttendStatuses = append(mock.calls.GetPluralAttendStatuses, callInfo)
	mock.lockGetPluralAttendStatuses.Unlock()
	return mock.GetPluralAttendStatusesFunc(ctx, AttendStatusIDs, np)
}

// GetPluralAttendStatusesCalls gets all the calls that were made to GetPluralAttendStatuses.
// Check the length with:
//
//	len(mockedStore.GetPluralAttendStatusesCalls())
func (mock *StoreMock) GetPluralAttendStatusesCalls() []struct {
	Ctx             context.Context
	AttendStatusIDs []uuid.UUID
	Np              NumberedPaginationParam
} {
	var calls []struct {
		Ctx             context.Context
		AttendStatusIDs []uuid.UUID
		Np              NumberedPaginationParam
	}
	mock.lockGetPluralAttendStatuses.RLock()
	calls = mock.calls.GetPluralAttendStatuses
	mock.lockGetPluralAttendStatuses.RUnlock()
	return calls
}

// GetPluralAttendStatusesWithSd calls GetPluralAttendStatusesWithSdFunc.
func (mock *StoreMock) GetPluralAttendStatusesWithSd(ctx context.Context, sd Sd, AttendStatusIDs []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.AttendStatus], error) {
	if mock.GetPluralAttendStatusesWithSdFunc == nil {
		panic("StoreMock.GetPluralAttendStatusesWithSdFunc: method is nil but Store.GetPluralAttendStatusesWithSd was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		Sd              Sd
		AttendStatusIDs []uuid.UUID
		Np              NumberedPaginationParam
	}{
		Ctx:             ctx,
		Sd:              sd,
		AttendStatusIDs: AttendStatusIDs,
		Np:              np,
	}
	mock.lockGetPluralAttendStatusesWithSd.Lock()
	mock.calls.GetPluralAttendStatusesWithSd = append(mock.calls.GetPluralAttendStatusesWithSd, callInfo)
	mock.lockGetPluralAttendStatusesWithSd.Unlock()
	return mock.GetPluralAttendStatusesWithSdFunc(ctx, sd, AttendStatusIDs, np)
}

// GetPluralAttendStatusesWithSdCalls gets all the calls that were made to GetPluralAttendStatusesWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralAttendStatusesWithSdCalls())
func (mock *StoreMock) GetPluralAttendStatusesWithSdCalls() []struct {
	Ctx             context.Context
	Sd              Sd
	AttendStatusIDs []uuid.UUID
	Np              NumberedPaginationParam
} {
	var calls []struct {
		Ctx             context.Context
		Sd              Sd
		AttendStatusIDs []uuid.UUID
		Np              NumberedPaginationParam
	}
	mock.lockGetPluralAttendStatusesWithSd.RLock()
	calls = mock.calls.GetPluralAttendStatusesWithSd
	mock.lockGetPluralAttendStatusesWithSd.RUnlock()
	return calls
}

// GetPluralAttendanceTypes calls GetPluralAttendanceTypesFunc.
func (mock *StoreMock) GetPluralAttendanceTypes(ctx context.Context, AttendanceTypeIDs []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.AttendanceType], error) {
	if mock.GetPluralAttendanceTypesFunc == nil {
		panic("StoreMock.GetPluralAttendanceTypesFunc: method is nil but Store.GetPluralAttendanceTypes was just called")
	}
	callInfo := struct {
		Ctx               context.Context
		AttendanceTypeIDs []uuid.UUID
		Np                NumberedPaginationParam
	}{
		Ctx:               ctx,
		AttendanceTypeIDs: AttendanceTypeIDs,
		Np:                np,
	}
	mock.lockGetPluralAttendanceTypes.Lock()
	mock.calls.GetPluralAttendanceTypes = append(mock.calls.GetPluralAttendanceTypes, callInfo)
	mock.lockGetPluralAttendanceTypes.Unlock()
	return mock.GetPluralAttendanceTypesFunc(ctx, AttendanceTypeIDs, np)
}

// GetPluralAttendanceTypesCalls gets all the calls that were made to GetPluralAttendanceTypes.
// Check the length with:
//
//	len(mockedStore.GetPluralAttendanceTypesCalls())
func (mock *StoreMock) GetPluralAttendanceTypesCalls() []struct {
	Ctx               context.Context
	AttendanceTypeIDs []uuid.UUID
	Np                NumberedPaginationParam
} {
	var calls []struct {
		Ctx               context.Context
		AttendanceTypeIDs []uuid.UUID
		Np                NumberedPaginationParam
	}
	mock.lockGetPluralAttendanceTypes.RLock()
	calls = mock.calls.GetPluralAttendanceTypes
	mock.lockGetPluralAttendanceTypes.RUnlock()
	return calls
}

// GetPluralAttendanceTypesWithSd calls GetPluralAttendanceTypesWithSdFunc.
func (mock *StoreMock) GetPluralAttendanceTypesWithSd(ctx context.Context, sd Sd, AttendanceTypeIDs []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.AttendanceType], error) {
	if mock.GetPluralAttendanceTypesWithSdFunc == nil {
		panic("StoreMock.GetPluralAttendanceTypesWithSdFunc: method is nil but Store.GetPluralAttendanceTypesWithSd was just called")
	}
	callInfo := struct {
		Ctx               context.Context
		Sd                Sd
		AttendanceTypeIDs []uuid.UUID
		Np                NumberedPaginationParam
	}{
		Ctx:               ctx,
		Sd:                sd,
		AttendanceTypeIDs: AttendanceTypeIDs,
		Np:                np,
	}
	mock.lockGetPluralAttendanceTypesWithSd.Lock()
	mock.calls.GetPluralAttendanceTypesWithSd = append(mock.calls.GetPluralAttendanceTypesWithSd, callInfo)
	mock.lockGetPluralAttendanceTypesWithSd.Unlock()
	return mock.GetPluralAttendanceTypesWithSdFunc(ctx, sd, AttendanceTypeIDs, np)
}

// GetPluralAttendanceTypesWithSdCalls gets all the calls that were made to GetPluralAttendanceTypesWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralAttendanceTypesWithSdCalls())
func (mock *StoreMock) GetPluralAttendanceTypesWithSdCalls() []struct {
	Ctx               context.Context
	Sd                Sd
	AttendanceTypeIDs []uuid.UUID
	Np                NumberedPaginationParam
} {
	var calls []struct {
		Ctx               context.Context
		Sd                Sd
		AttendanceTypeIDs []uuid.UUID
		Np                NumberedPaginationParam
	}
	mock.lockGetPluralAttendanceTypesWithSd.RLock()
	calls = mock.calls.GetPluralAttendanceTypesWithSd
	mock.lockGetPluralAttendanceTypesWithSd.RUnlock()
	return calls
}

// GetPluralEventTypes calls GetPluralEventTypesFunc.
func (mock *StoreMock) GetPluralEventTypes(ctx context.Context, EventTypeIDs []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.EventType], error) {
	if mock.GetPluralEventTypesFunc == nil {
		panic("StoreMock.GetPluralEventTypesFunc: method is nil but Store.GetPluralEventTypes was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		EventTypeIDs []uuid.UUID
		Np           NumberedPaginationParam
	}{
		Ctx:          ctx,
		EventTypeIDs: EventTypeIDs,
		Np:           np,
	}
	mock.lockGetPluralEventTypes.Lock()
	mock.calls.GetPluralEventTypes = append(mock.calls.GetPluralEventTypes, callInfo)
	mock.lockGetPluralEventTypes.Unlock()
	return mock.GetPluralEventTypesFunc(ctx, EventTypeIDs, np)
}

// GetPluralEventTypesCalls gets all the calls that were made to GetPluralEventTypes.
// Check the length with:
//
//	len(mockedStore.GetPluralEventTypesCalls())
func (mock *StoreMock) GetPluralEventTypesCalls() []struct {
	Ctx          context.Context
	EventTypeIDs []uuid.UUID
	Np           NumberedPaginationParam
} {
	var calls []struct {
		Ctx          context.Context
		EventTypeIDs []uuid.UUID
		Np           NumberedPaginationParam
	}
	mock.lockGetPluralEventTypes.RLock()
	calls = mock.calls.GetPluralEventTypes
	mock.lockGetPluralEventTypes.RUnlock()
	return calls
}

// GetPluralEventTypesWithSd calls GetPluralEventTypesWithSdFunc.
func (mock *StoreMock) GetPluralEventTypesWithSd(ctx context.Context, sd Sd, EventTypeIDs []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.EventType], error) {
	if mock.GetPluralEventTypesWithSdFunc == nil {
		panic("StoreMock.GetPluralEventTypesWithSdFunc: method is nil but Store.GetPluralEventTypesWithSd was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		Sd           Sd
		EventTypeIDs []uuid.UUID
		Np           NumberedPaginationParam
	}{
		Ctx:          ctx,
		Sd:           sd,
		EventTypeIDs: EventTypeIDs,
		Np:           np,
	}
	mock.lockGetPluralEventTypesWithSd.Lock()
	mock.calls.GetPluralEventTypesWithSd = append(mock.calls.GetPluralEventTypesWithSd, callInfo)
	mock.lockGetPluralEventTypesWithSd.Unlock()
	return mock.GetPluralEventTypesWithSdFunc(ctx, sd, EventTypeIDs, np)
}

// GetPluralEventTypesWithSdCalls gets all the calls that were made to GetPluralEventTypesWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralEventTypesWithSdCalls())
func (mock *StoreMock) GetPluralEventTypesWithSdCalls() []struct {
	Ctx          context.Context
	Sd           Sd
	EventTypeIDs []uuid.UUID
	Np           NumberedPaginationParam
} {
	var calls []struct {
		Ctx          context.Context
		Sd           Sd
		EventTypeIDs []uuid.UUID
		Np           NumberedPaginationParam
	}
	mock.lockGetPluralEventTypesWithSd.RLock()
	calls = mock.calls.GetPluralEventTypesWithSd
	mock.lockGetPluralEventTypesWithSd.RUnlock()
	return calls
}

// GetPluralMimeTypes calls GetPluralMimeTypesFunc.
func (mock *StoreMock) GetPluralMimeTypes(ctx context.Context, MimeTypeIDs []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.MimeType], error) {
	if mock.GetPluralMimeTypesFunc == nil {
		panic("StoreMock.GetPluralMimeTypesFunc: method is nil but Store.GetPluralMimeTypes was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		MimeTypeIDs []uuid.UUID
		Np          NumberedPaginationParam
	}{
		Ctx:         ctx,
		MimeTypeIDs: MimeTypeIDs,
		Np:          np,
	}
	mock.lockGetPluralMimeTypes.Lock()
	mock.calls.GetPluralMimeTypes = append(mock.calls.GetPluralMimeTypes, callInfo)
	mock.lockGetPluralMimeTypes.Unlock()
	return mock.GetPluralMimeTypesFunc(ctx, MimeTypeIDs, np)
}

// GetPluralMimeTypesCalls gets all the calls that were made to GetPluralMimeTypes.
// Check the length with:
//
//	len(mockedStore.GetPluralMimeTypesCalls())
func (mock *StoreMock) GetPluralMimeTypesCalls() []struct {
	Ctx         context.Context
	MimeTypeIDs []uuid.UUID
	Np          NumberedPaginationParam
} {
	var calls []struct {
		Ctx         context.Context
		MimeTypeIDs []uuid.UUID
		Np          NumberedPaginationParam
	}
	mock.lockGetPluralMimeTypes.RLock()
	calls = mock.calls.GetPluralMimeTypes
	mock.lockGetPluralMimeTypes.RUnlock()
	return calls
}

// GetPluralMimeTypesWithSd calls GetPluralMimeTypesWithSdFunc.
func (mock *StoreMock) GetPluralMimeTypesWithSd(ctx context.Context, sd Sd, MimeTypeIDs []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.MimeType], error) {
	if mock.GetPluralMimeTypesWithSdFunc == nil {
		panic("StoreMock.GetPluralMimeTypesWithSdFunc: method is nil but Store.GetPluralMimeTypesWithSd was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Sd          Sd
		MimeTypeIDs []uuid.UUID
		Np          NumberedPaginationParam
	}{
		Ctx:         ctx,
		Sd:          sd,
		MimeTypeIDs: MimeTypeIDs,
		Np:          np,
	}
	mock.lockGetPluralMimeTypesWithSd.Lock()
	mock.calls.GetPluralMimeTypesWithSd = append(mock.calls.GetPluralMimeTypesWithSd, callInfo)
	mock.lockGetPluralMimeTypesWithSd.Unlock()
	return mock.GetPluralMimeTypesWithSdFunc(ctx, sd, MimeTypeIDs, np)
}

// GetPluralMimeTypesWithSdCalls gets all the calls that were made to GetPluralMimeTypesWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralMimeTypesWithSdCalls())
func (mock *StoreMock) GetPluralMimeTypesWithSdCalls() []struct {
	Ctx         context.Context
	Sd          Sd
	MimeTypeIDs []uuid.UUID
	Np          NumberedPaginationParam
} {
	var calls []struct {
		Ctx         context.Context
		Sd          Sd
		MimeTypeIDs []uuid.UUID
		Np          NumberedPaginationParam
	}
	mock.lockGetPluralMimeTypesWithSd.RLock()
	calls = mock.calls.GetPluralMimeTypesWithSd
	mock.lockGetPluralMimeTypesWithSd.RUnlock()
	return calls
}

// GetPluralPermissionCategories calls GetPluralPermissionCategoriesFunc.
func (mock *StoreMock) GetPluralPermissionCategories(ctx context.Context, PermissionCategoryIDs []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.PermissionCategory], error) {
	if mock.GetPluralPermissionCategoriesFunc == nil {
		panic("StoreMock.GetPluralPermissionCategoriesFunc: method is nil but Store.GetPluralPermissionCategories was just called")
	}
	callInfo := struct {
		Ctx                   context.Context
		PermissionCategoryIDs []uuid.UUID
		Np                    NumberedPaginationParam
	}{
		Ctx:                   ctx,
		PermissionCategoryIDs: PermissionCategoryIDs,
		Np:                    np,
	}
	mock.lockGetPluralPermissionCategories.Lock()
	mock.calls.GetPluralPermissionCategories = append(mock.calls.GetPluralPermissionCategories, callInfo)
	mock.lockGetPluralPermissionCategories.Unlock()
	return mock.GetPluralPermissionCategoriesFunc(ctx, PermissionCategoryIDs, np)
}

// GetPluralPermissionCategoriesCalls gets all the calls that were made to GetPluralPermissionCategories.
// Check the length with:
//
//	len(mockedStore.GetPluralPermissionCategoriesCalls())
func (mock *StoreMock) GetPluralPermissionCategoriesCalls() []struct {
	Ctx                   context.Context
	PermissionCategoryIDs []uuid.UUID
	Np                    NumberedPaginationParam
} {
	var calls []struct {
		Ctx                   context.Context
		PermissionCategoryIDs []uuid.UUID
		Np                    NumberedPaginationParam
	}
	mock.lockGetPluralPermissionCategories.RLock()
	calls = mock.calls.GetPluralPermissionCategories
	mock.lockGetPluralPermissionCategories.RUnlock()
	return calls
}

// GetPluralPermissionCategoriesWithSd calls GetPluralPermissionCategoriesWithSdFunc.
func (mock *StoreMock) GetPluralPermissionCategoriesWithSd(ctx context.Context, sd Sd, PermissionCategoryIDs []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.PermissionCategory], error) {
	if mock.GetPluralPermissionCategoriesWithSdFunc == nil {
		panic("StoreMock.GetPluralPermissionCategoriesWithSdFunc: method is nil but Store.GetPluralPermissionCategoriesWithSd was just called")
	}
	callInfo := struct {
		Ctx                   context.Context
		Sd                    Sd
		PermissionCategoryIDs []uuid.UUID
		Np                    NumberedPaginationParam
	}{
		Ctx:                   ctx,
		Sd:                    sd,
		PermissionCategoryIDs: PermissionCategoryIDs,
		Np:                    np,
	}
	mock.lockGetPluralPermissionCategoriesWithSd.Lock()
	mock.calls.GetPluralPermissionCategoriesWithSd = append(mock.calls.GetPluralPermissionCategoriesWithSd, callInfo)
	mock.lockGetPluralPermissionCategoriesWithSd.Unlock()
	return mock.GetPluralPermissionCategoriesWithSdFunc(ctx, sd, PermissionCategoryIDs, np)
}

// GetPluralPermissionCategoriesWithSdCalls gets all the calls that were made to GetPluralPermissionCategoriesWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralPermissionCategoriesWithSdCalls())
func (mock *StoreMock) GetPluralPermissionCategoriesWithSdCalls() []struct {
	Ctx                   context.Context
	Sd                    Sd
	PermissionCategoryIDs []uuid.UUID
	Np                    NumberedPaginationParam
} {
	var calls []struct {
		Ctx                   context.Context
		Sd                    Sd
		PermissionCategoryIDs []uuid.UUID
		Np                    NumberedPaginationParam
	}
	mock.lockGetPluralPermissionCategoriesWithSd.RLock()
	calls = mock.calls.GetPluralPermissionCategoriesWithSd
	mock.lockGetPluralPermissionCategoriesWithSd.RUnlock()
	return calls
}

// GetPluralPermissions calls GetPluralPermissionsFunc.
func (mock *StoreMock) GetPluralPermissions(ctx context.Context, PermissionIDs []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.Permission], error) {
	if mock.GetPluralPermissionsFunc == nil {
		panic("StoreMock.GetPluralPermissionsFunc: method is nil but Store.GetPluralPermissions was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		PermissionIDs []uuid.UUID
		Np            NumberedPaginationParam
	}{
		Ctx:           ctx,
		PermissionIDs: PermissionIDs,
		Np:            np,
	}
	mock.lockGetPluralPermissions.Lock()
	mock.calls.GetPluralPermissions = append(mock.calls.GetPluralPermissions, callInfo)
	mock.lockGetPluralPermissions.Unlock()
	return mock.GetPluralPermissionsFunc(ctx, PermissionIDs, np)
}

// GetPluralPermissionsCalls gets all the calls that were made to GetPluralPermissions.
// Check the length with:
//
//	len(mockedStore.GetPluralPermissionsCalls())
func (mock *StoreMock) GetPluralPermissionsCalls() []struct {
	Ctx           context.Context
	PermissionIDs []uuid.UUID
	Np            NumberedPaginationParam
} {
	var calls []struct {
		Ctx           context.Context
		PermissionIDs []uuid.UUID
		Np            NumberedPaginationParam
	}
	mock.lockGetPluralPermissions.RLock()
	calls = mock.calls.GetPluralPermissions
	mock.lockGetPluralPermissions.RUnlock()
	return calls
}

// GetPluralPermissionsWithSd calls GetPluralPermissionsWithSdFunc.
func (mock *StoreMock) GetPluralPermissionsWithSd(ctx context.Context, sd Sd, PermissionIDs []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.Permission], error) {
	if mock.GetPluralPermissionsWithSdFunc == nil {
		panic("StoreMock.GetPluralPermissionsWithSdFunc: method is nil but Store.GetPluralPermissionsWithSd was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		Sd            Sd
		PermissionIDs []uuid.UUID
		Np            NumberedPaginationParam
	}{
		Ctx:           ctx,
		Sd:            sd,
		PermissionIDs: PermissionIDs,
		Np:            np,
	}
	mock.lockGetPluralPermissionsWithSd.Lock()
	mock.calls.GetPluralPermissionsWithSd = append(mock.calls.GetPluralPermissionsWithSd, callInfo)
	mock.lockGetPluralPermissionsWithSd.Unlock()
	return mock.GetPluralPermissionsWithSdFunc(ctx, sd, PermissionIDs, np)
}

// GetPluralPermissionsWithSdCalls gets all the calls that were made to GetPluralPermissionsWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralPermissionsWithSdCalls())
func (mock *StoreMock) GetPluralPermissionsWithSdCalls() []struct {
	Ctx           context.Context
	Sd            Sd
	PermissionIDs []uuid.UUID
	Np            NumberedPaginationParam
} {
	var calls []struct {
		Ctx           context.Context
		Sd            Sd
		PermissionIDs []uuid.UUID
		Np            NumberedPaginationParam
	}
	mock.lockGetPluralPermissionsWithSd.RLock()
	calls = mock.calls.GetPluralPermissionsWithSd
	mock.lockGetPluralPermissionsWithSd.RUnlock()
	return calls
}

// GetPluralPolicies calls GetPluralPoliciesFunc.
func (mock *StoreMock) GetPluralPolicies(ctx context.Context, PolicyIDs []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.Policy], error) {
	if mock.GetPluralPoliciesFunc == nil {
		panic("StoreMock.GetPluralPoliciesFunc: method is nil but Store.GetPluralPolicies was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		PolicyIDs []uuid.UUID
		Np        NumberedPaginationParam
	}{
		Ctx:       ctx,
		PolicyIDs: PolicyIDs,
		Np:        np,
	}
	mock.lockGetPluralPolicies.Lock()
	mock.calls.GetPluralPolicies = append(mock.calls.GetPluralPolicies, callInfo)
	mock.lockGetPluralPolicies.Unlock()
	return mock.GetPluralPoliciesFunc(ctx, PolicyIDs, np)
}

// GetPluralPoliciesCalls gets all the calls that were made to GetPluralPolicies.
// Check the length with:
//
//	len(mockedStore.GetPluralPoliciesCalls())
func (mock *StoreMock) GetPluralPoliciesCalls() []struct {
	Ctx       context.Context
	PolicyIDs []uuid.UUID
	Np        NumberedPaginationParam
} {
	var calls []struct {
		Ctx       context.Context
		PolicyIDs []uuid.UUID
		Np        NumberedPaginationParam
	}
	mock.lockGetPluralPolicies.RLock()
	calls = mock.calls.GetPluralPolicies
	mock.lockGetPluralPolicies.RUnlock()
	return calls
}

// GetPluralPoliciesWithSd calls GetPluralPoliciesWithSdFunc.
func (mock *StoreMock) GetPluralPoliciesWithSd(ctx context.Context, sd Sd, PolicyIDs []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.Policy], error) {
	if mock.GetPluralPoliciesWithSdFunc == nil {
		panic("StoreMock.GetPluralPoliciesWithSdFunc: method is nil but Store.GetPluralPoliciesWithSd was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Sd        Sd
		PolicyIDs []uuid.UUID
		Np        NumberedPaginationParam
	}{
		Ctx:       ctx,
		Sd:        sd,
		PolicyIDs: PolicyIDs,
		Np:        np,
	}
	mock.lockGetPluralPoliciesWithSd.Lock()
	mock.calls.GetPluralPoliciesWithSd = append(mock.calls.GetPluralPoliciesWithSd, callInfo)
	mock.lockGetPluralPoliciesWithSd.Unlock()
	return mock.GetPluralPoliciesWithSdFunc(ctx, sd, PolicyIDs, np)
}

// GetPluralPoliciesWithSdCalls gets all the calls that were made to GetPluralPoliciesWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralPoliciesWithSdCalls())
func (mock *StoreMock) GetPluralPoliciesWithSdCalls() []struct {
	Ctx       context.Context
	Sd        Sd
	PolicyIDs []uuid.UUID
	Np        NumberedPaginationParam
} {
	var calls []struct {
		Ctx       context.Context
		Sd        Sd
		PolicyIDs []uuid.UUID
		Np        NumberedPaginationParam
	}
	mock.lockGetPluralPoliciesWithSd.RLock()
	calls = mock.calls.GetPluralPoliciesWithSd
	mock.lockGetPluralPoliciesWithSd.RUnlock()
	return calls
}

// GetPluralPolicyCategories calls GetPluralPolicyCategoriesFunc.
func (mock *StoreMock) GetPluralPolicyCategories(ctx context.Context, policyCategoryIDs []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.PolicyCategory], error) {
	if mock.GetPluralPolicyCategoriesFunc == nil {
		panic("StoreMock.GetPluralPolicyCategoriesFunc: method is nil but Store.GetPluralPolicyCategories was just called")
	}
	callInfo := struct {
		Ctx               context.Context
		PolicyCategoryIDs []uuid.UUID
		Np                NumberedPaginationParam
	}{
		Ctx:               ctx,
		PolicyCategoryIDs: policyCategoryIDs,
		Np:                np,
	}
	mock.lockGetPluralPolicyCategories.Lock()
	mock.calls.GetPluralPolicyCategories = append(mock.calls.GetPluralPolicyCategories, callInfo)
	mock.lockGetPluralPolicyCategories.Unlock()
	return mock.GetPluralPolicyCategoriesFunc(ctx, policyCategoryIDs, np)
}

// GetPluralPolicyCategoriesCalls gets all the calls that were made to GetPluralPolicyCategories.
// Check the length with:
//
//	len(mockedStore.GetPluralPolicyCategoriesCalls())
func (mock *StoreMock) GetPluralPolicyCategoriesCalls() []struct {
	Ctx               context.Context
	PolicyCategoryIDs []uuid.UUID
	Np                NumberedPaginationParam
} {
	var calls []struct {
		Ctx               context.Context
		PolicyCategoryIDs []uuid.UUID
		Np                NumberedPaginationParam
	}
	mock.lockGetPluralPolicyCategories.RLock()
	calls = mock.calls.GetPluralPolicyCategories
	mock.lockGetPluralPolicyCategories.RUnlock()
	return calls
}

// GetPluralPolicyCategoriesWithSd calls GetPluralPolicyCategoriesWithSdFunc.
func (mock *StoreMock) GetPluralPolicyCategoriesWithSd(ctx context.Context, sd Sd, policyCategoryIDs []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.PolicyCategory], error) {
	if mock.GetPluralPolicyCategoriesWithSdFunc == nil {
		panic("StoreMock.GetPluralPolicyCategoriesWithSdFunc: method is nil but Store.GetPluralPolicyCategoriesWithSd was just called")
	}
	callInfo := struct {
		Ctx               context.Context
		Sd                Sd
		PolicyCategoryIDs []uuid.UUID
		Np                NumberedPaginationParam
	}{
		Ctx:               ctx,
		Sd:                sd,
		PolicyCategoryIDs: policyCategoryIDs,
		Np:                np,
	}
	mock.lockGetPluralPolicyCategoriesWithSd.Lock()
	mock.calls.GetPluralPolicyCategoriesWithSd = append(mock.calls.GetPluralPolicyCategoriesWithSd, callInfo)
	mock.lockGetPluralPolicyCategoriesWithSd.Unlock()
	return mock.GetPluralPolicyCategoriesWithSdFunc(ctx, sd, policyCategoryIDs, np)
}

// GetPluralPolicyCategoriesWithSdCalls gets all the calls that were made to GetPluralPolicyCategoriesWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralPolicyCategoriesWithSdCalls())
func (mock *StoreMock) GetPluralPolicyCategoriesWithSdCalls() []struct {
	Ctx               context.Context
	Sd                Sd
	PolicyCategoryIDs []uuid.UUID
	Np                NumberedPaginationParam
} {
	var calls []struct {
		Ctx               context.Context
		Sd                Sd
		PolicyCategoryIDs []uuid.UUID
		Np                NumberedPaginationParam
	}
	mock.lockGetPluralPolicyCategoriesWithSd.RLock()
	calls = mock.calls.GetPluralPolicyCategoriesWithSd
	mock.lockGetPluralPolicyCategoriesWithSd.RUnlock()
	return calls
}

// GetPluralRecordTypes calls GetPluralRecordTypesFunc.
func (mock *StoreMock) GetPluralRecordTypes(ctx context.Context, RecordTypeIDs []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.RecordType], error) {
	if mock.GetPluralRecordTypesFunc == nil {
		panic("StoreMock.GetPluralRecordTypesFunc: method is nil but Store.GetPluralRecordTypes was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		RecordTypeIDs []uuid.UUID
		Np            NumberedPaginationParam
	}{
		Ctx:           ctx,
		RecordTypeIDs: RecordTypeIDs,
		Np:            np,
	}
	mock.lockGetPluralRecordTypes.Lock()
	mock.calls.GetPluralRecordTypes = append(mock.calls.GetPluralRecordTypes, callInfo)
	mock.lockGetPluralRecordTypes.Unlock()
	return mock.GetPluralRecordTypesFunc(ctx, RecordTypeIDs, np)
}

// GetPluralRecordTypesCalls gets all the calls that were made to GetPluralRecordTypes.
// Check the length with:
//
//	len(mockedStore.GetPluralRecordTypesCalls())
func (mock *StoreMock) GetPluralRecordTypesCalls() []struct {
	Ctx           context.Context
	RecordTypeIDs []uuid.UUID
	Np            NumberedPaginationParam
} {
	var calls []struct {
		Ctx           context.Context
		RecordTypeIDs []uuid.UUID
		Np            NumberedPaginationParam
	}
	mock.lockGetPluralRecordTypes.RLock()
	calls = mock.calls.GetPluralRecordTypes
	mock.lockGetPluralRecordTypes.RUnlock()
	return calls
}

// GetPluralRecordTypesWithSd calls GetPluralRecordTypesWithSdFunc.
func (mock *StoreMock) GetPluralRecordTypesWithSd(ctx context.Context, sd Sd, RecordTypeIDs []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.RecordType], error) {
	if mock.GetPluralRecordTypesWithSdFunc == nil {
		panic("StoreMock.GetPluralRecordTypesWithSdFunc: method is nil but Store.GetPluralRecordTypesWithSd was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		Sd            Sd
		RecordTypeIDs []uuid.UUID
		Np            NumberedPaginationParam
	}{
		Ctx:           ctx,
		Sd:            sd,
		RecordTypeIDs: RecordTypeIDs,
		Np:            np,
	}
	mock.lockGetPluralRecordTypesWithSd.Lock()
	mock.calls.GetPluralRecordTypesWithSd = append(mock.calls.GetPluralRecordTypesWithSd, callInfo)
	mock.lockGetPluralRecordTypesWithSd.Unlock()
	return mock.GetPluralRecordTypesWithSdFunc(ctx, sd, RecordTypeIDs, np)
}

// GetPluralRecordTypesWithSdCalls gets all the calls that were made to GetPluralRecordTypesWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralRecordTypesWithSdCalls())
func (mock *StoreMock) GetPluralRecordTypesWithSdCalls() []struct {
	Ctx           context.Context
	Sd            Sd
	RecordTypeIDs []uuid.UUID
	Np            NumberedPaginationParam
} {
	var calls []struct {
		Ctx           context.Context
		Sd            Sd
		RecordTypeIDs []uuid.UUID
		Np            NumberedPaginationParam
	}
	mock.lockGetPluralRecordTypesWithSd.RLock()
	calls = mock.calls.GetPluralRecordTypesWithSd
	mock.lockGetPluralRecordTypesWithSd.RUnlock()
	return calls
}

// GetPolicies calls GetPoliciesFunc.
func (mock *StoreMock) GetPolicies(ctx context.Context, where parameter.WherePolicyParam, order parameter.PolicyOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Policy], error) {
	if mock.GetPoliciesFunc == nil {
		panic("StoreMock.GetPoliciesFunc: method is nil but Store.GetPolicies was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WherePolicyParam
		Order parameter.PolicyOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetPolicies.Lock()
	mock.calls.GetPolicies = append(mock.calls.GetPolicies, callInfo)
	mock.lockGetPolicies.Unlock()
	return mock.GetPoliciesFunc(ctx, where, order, np, cp, wc)
}

// GetPoliciesCalls gets all the calls that were made to GetPolicies.
// Check the length with:
//
//	len(mockedStore.GetPoliciesCalls())
func (mock *StoreMock) GetPoliciesCalls() []struct {
	Ctx   context.Context
	Where parameter.WherePolicyParam
	Order parameter.PolicyOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WherePolicyParam
		Order parameter.PolicyOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetPolicies.RLock()
	calls = mock.calls.GetPolicies
	mock.lockGetPolicies.RUnlock()
	return calls
}

// GetPoliciesWithCategory calls GetPoliciesWithCategoryFunc.
func (mock *StoreMock) GetPoliciesWithCategory(ctx context.Context, where parameter.WherePolicyParam, order parameter.PolicyOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.PolicyWithCategory], error) {
	if mock.GetPoliciesWithCategoryFunc == nil {
		panic("StoreMock.GetPoliciesWithCategoryFunc: method is nil but Store.GetPoliciesWithCategory was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WherePolicyParam
		Order parameter.PolicyOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetPoliciesWithCategory.Lock()
	mock.calls.GetPoliciesWithCategory = append(mock.calls.GetPoliciesWithCategory, callInfo)
	mock.lockGetPoliciesWithCategory.Unlock()
	return mock.GetPoliciesWithCategoryFunc(ctx, where, order, np, cp, wc)
}

// GetPoliciesWithCategoryCalls gets all the calls that were made to GetPoliciesWithCategory.
// Check the length with:
//
//	len(mockedStore.GetPoliciesWithCategoryCalls())
func (mock *StoreMock) GetPoliciesWithCategoryCalls() []struct {
	Ctx   context.Context
	Where parameter.WherePolicyParam
	Order parameter.PolicyOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WherePolicyParam
		Order parameter.PolicyOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetPoliciesWithCategory.RLock()
	calls = mock.calls.GetPoliciesWithCategory
	mock.lockGetPoliciesWithCategory.RUnlock()
	return calls
}

// GetPoliciesWithCategoryWithSd calls GetPoliciesWithCategoryWithSdFunc.
func (mock *StoreMock) GetPoliciesWithCategoryWithSd(ctx context.Context, sd Sd, where parameter.WherePolicyParam, order parameter.PolicyOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.PolicyWithCategory], error) {
	if mock.GetPoliciesWithCategoryWithSdFunc == nil {
		panic("StoreMock.GetPoliciesWithCategoryWithSdFunc: method is nil but Store.GetPoliciesWithCategoryWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WherePolicyParam
		Order parameter.PolicyOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetPoliciesWithCategoryWithSd.Lock()
	mock.calls.GetPoliciesWithCategoryWithSd = append(mock.calls.GetPoliciesWithCategoryWithSd, callInfo)
	mock.lockGetPoliciesWithCategoryWithSd.Unlock()
	return mock.GetPoliciesWithCategoryWithSdFunc(ctx, sd, where, order, np, cp, wc)
}

// GetPoliciesWithCategoryWithSdCalls gets all the calls that were made to GetPoliciesWithCategoryWithSd.
// Check the length with:
//
//	len(mockedStore.GetPoliciesWithCategoryWithSdCalls())
func (mock *StoreMock) GetPoliciesWithCategoryWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WherePolicyParam
	Order parameter.PolicyOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WherePolicyParam
		Order parameter.PolicyOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetPoliciesWithCategoryWithSd.RLock()
	calls = mock.calls.GetPoliciesWithCategoryWithSd
	mock.lockGetPoliciesWithCategoryWithSd.RUnlock()
	return calls
}

// GetPoliciesWithSd calls GetPoliciesWithSdFunc.
func (mock *StoreMock) GetPoliciesWithSd(ctx context.Context, sd Sd, where parameter.WherePolicyParam, order parameter.PolicyOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Policy], error) {
	if mock.GetPoliciesWithSdFunc == nil {
		panic("StoreMock.GetPoliciesWithSdFunc: method is nil but Store.GetPoliciesWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WherePolicyParam
		Order parameter.PolicyOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetPoliciesWithSd.Lock()
	mock.calls.GetPoliciesWithSd = append(mock.calls.GetPoliciesWithSd, callInfo)
	mock.lockGetPoliciesWithSd.Unlock()
	return mock.GetPoliciesWithSdFunc(ctx, sd, where, order, np, cp, wc)
}

// GetPoliciesWithSdCalls gets all the calls that were made to GetPoliciesWithSd.
// Check the length with:
//
//	len(mockedStore.GetPoliciesWithSdCalls())
func (mock *StoreMock) GetPoliciesWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WherePolicyParam
	Order parameter.PolicyOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WherePolicyParam
		Order parameter.PolicyOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetPoliciesWithSd.RLock()
	calls = mock.calls.GetPoliciesWithSd
	mock.lockGetPoliciesWithSd.RUnlock()
	return calls
}

// GetPolicyCategories calls GetPolicyCategoriesFunc.
func (mock *StoreMock) GetPolicyCategories(ctx context.Context, where parameter.WherePolicyCategoryParam, order parameter.PolicyCategoryOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.PolicyCategory], error) {
	if mock.GetPolicyCategoriesFunc == nil {
		panic("StoreMock.GetPolicyCategoriesFunc: method is nil but Store.GetPolicyCategories was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WherePolicyCategoryParam
		Order parameter.PolicyCategoryOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetPolicyCategories.Lock()
	mock.calls.GetPolicyCategories = append(mock.calls.GetPolicyCategories, callInfo)
	mock.lockGetPolicyCategories.Unlock()
	return mock.GetPolicyCategoriesFunc(ctx, where, order, np, cp, wc)
}

// GetPolicyCategoriesCalls gets all the calls that were made to GetPolicyCategories.
// Check the length with:
//
//	len(mockedStore.GetPolicyCategoriesCalls())
func (mock *StoreMock) GetPolicyCategoriesCalls() []struct {
	Ctx   context.Context
	Where parameter.WherePolicyCategoryParam
	Order parameter.PolicyCategoryOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WherePolicyCategoryParam
		Order parameter.PolicyCategoryOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetPolicyCategories.RLock()
	calls = mock.calls.GetPolicyCategories
	mock.lockGetPolicyCategories.RUnlock()
	return calls
}

// GetPolicyCategoriesWithSd calls GetPolicyCategoriesWithSdFunc.
func (mock *StoreMock) GetPolicyCategoriesWithSd(ctx context.Context, sd Sd, where parameter.WherePolicyCategoryParam, order parameter.PolicyCategoryOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.PolicyCategory], error) {
	if mock.GetPolicyCategoriesWithSdFunc == nil {
		panic("StoreMock.GetPolicyCategoriesWithSdFunc: method is nil but Store.GetPolicyCategoriesWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WherePolicyCategoryParam
		Order parameter.PolicyCategoryOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetPolicyCategoriesWithSd.Lock()
	mock.calls.GetPolicyCategoriesWithSd = append(mock.calls.GetPolicyCategoriesWithSd, callInfo)
	mock.lockGetPolicyCategoriesWithSd.Unlock()
	return mock.GetPolicyCategoriesWithSdFunc(ctx, sd, where, order, np, cp, wc)
}

// GetPolicyCategoriesWithSdCalls gets all the calls that were made to GetPolicyCategoriesWithSd.
// Check the length with:
//
//	len(mockedStore.GetPolicyCategoriesWithSdCalls())
func (mock *StoreMock) GetPolicyCategoriesWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WherePolicyCategoryParam
	Order parameter.PolicyCategoryOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WherePolicyCategoryParam
		Order parameter.PolicyCategoryOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetPolicyCategoriesWithSd.RLock()
	calls = mock.calls.GetPolicyCategoriesWithSd
	mock.lockGetPolicyCategoriesWithSd.RUnlock()
	return calls
}

// GetRecordTypes calls GetRecordTypesFunc.
func (mock *StoreMock) GetRecordTypes(ctx context.Context, where parameter.WhereRecordTypeParam, order parameter.RecordTypeOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.RecordType], error) {
	if mock.GetRecordTypesFunc == nil {
		panic("StoreMock.GetRecordTypesFunc: method is nil but Store.GetRecordTypes was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereRecordTypeParam
		Order parameter.RecordTypeOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetRecordTypes.Lock()
	mock.calls.GetRecordTypes = append(mock.calls.GetRecordTypes, callInfo)
	mock.lockGetRecordTypes.Unlock()
	return mock.GetRecordTypesFunc(ctx, where, order, np, cp, wc)
}

// GetRecordTypesCalls gets all the calls that were made to GetRecordTypes.
// Check the length with:
//
//	len(mockedStore.GetRecordTypesCalls())
func (mock *StoreMock) GetRecordTypesCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereRecordTypeParam
	Order parameter.RecordTypeOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereRecordTypeParam
		Order parameter.RecordTypeOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetRecordTypes.RLock()
	calls = mock.calls.GetRecordTypes
	mock.lockGetRecordTypes.RUnlock()
	return calls
}

// GetRecordTypesWithSd calls GetRecordTypesWithSdFunc.
func (mock *StoreMock) GetRecordTypesWithSd(ctx context.Context, sd Sd, where parameter.WhereRecordTypeParam, order parameter.RecordTypeOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.RecordType], error) {
	if mock.GetRecordTypesWithSdFunc == nil {
		panic("StoreMock.GetRecordTypesWithSdFunc: method is nil but Store.GetRecordTypesWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereRecordTypeParam
		Order parameter.RecordTypeOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetRecordTypesWithSd.Lock()
	mock.calls.GetRecordTypesWithSd = append(mock.calls.GetRecordTypesWithSd, callInfo)
	mock.lockGetRecordTypesWithSd.Unlock()
	return mock.GetRecordTypesWithSdFunc(ctx, sd, where, order, np, cp, wc)
}

// GetRecordTypesWithSdCalls gets all the calls that were made to GetRecordTypesWithSd.
// Check the length with:
//
//	len(mockedStore.GetRecordTypesWithSdCalls())
func (mock *StoreMock) GetRecordTypesWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereRecordTypeParam
	Order parameter.RecordTypeOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereRecordTypeParam
		Order parameter.RecordTypeOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetRecordTypesWithSd.RLock()
	calls = mock.calls.GetRecordTypesWithSd
	mock.lockGetRecordTypesWithSd.RUnlock()
	return calls
}

// PluralDeleteAbsences calls PluralDeleteAbsencesFunc.
func (mock *StoreMock) PluralDeleteAbsences(ctx context.Context, absenceIDs []uuid.UUID) error {
	if mock.PluralDeleteAbsencesFunc == nil {
		panic("StoreMock.PluralDeleteAbsencesFunc: method is nil but Store.PluralDeleteAbsences was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		AbsenceIDs []uuid.UUID
	}{
		Ctx:        ctx,
		AbsenceIDs: absenceIDs,
	}
	mock.lockPluralDeleteAbsences.Lock()
	mock.calls.PluralDeleteAbsences = append(mock.calls.PluralDeleteAbsences, callInfo)
	mock.lockPluralDeleteAbsences.Unlock()
	return mock.PluralDeleteAbsencesFunc(ctx, absenceIDs)
}

// PluralDeleteAbsencesCalls gets all the calls that were made to PluralDeleteAbsences.
// Check the length with:
//
//	len(mockedStore.PluralDeleteAbsencesCalls())
func (mock *StoreMock) PluralDeleteAbsencesCalls() []struct {
	Ctx        context.Context
	AbsenceIDs []uuid.UUID
} {
	var calls []struct {
		Ctx        context.Context
		AbsenceIDs []uuid.UUID
	}
	mock.lockPluralDeleteAbsences.RLock()
	calls = mock.calls.PluralDeleteAbsences
	mock.lockPluralDeleteAbsences.RUnlock()
	return calls
}

// PluralDeleteAbsencesWithSd calls PluralDeleteAbsencesWithSdFunc.
func (mock *StoreMock) PluralDeleteAbsencesWithSd(ctx context.Context, sd Sd, absenceIDs []uuid.UUID) error {
	if mock.PluralDeleteAbsencesWithSdFunc == nil {
		panic("StoreMock.PluralDeleteAbsencesWithSdFunc: method is nil but Store.PluralDeleteAbsencesWithSd was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Sd         Sd
		AbsenceIDs []uuid.UUID
	}{
		Ctx:        ctx,
		Sd:         sd,
		AbsenceIDs: absenceIDs,
	}
	mock.lockPluralDeleteAbsencesWithSd.Lock()
	mock.calls.PluralDeleteAbsencesWithSd = append(mock.calls.PluralDeleteAbsencesWithSd, callInfo)
	mock.lockPluralDeleteAbsencesWithSd.Unlock()
	return mock.PluralDeleteAbsencesWithSdFunc(ctx, sd, absenceIDs)
}

// PluralDeleteAbsencesWithSdCalls gets all the calls that were made to PluralDeleteAbsencesWithSd.
// Check the length with:
//
//	len(mockedStore.PluralDeleteAbsencesWithSdCalls())
func (mock *StoreMock) PluralDeleteAbsencesWithSdCalls() []struct {
	Ctx        context.Context
	Sd         Sd
	AbsenceIDs []uuid.UUID
} {
	var calls []struct {
		Ctx        context.Context
		Sd         Sd
		AbsenceIDs []uuid.UUID
	}
	mock.lockPluralDeleteAbsencesWithSd.RLock()
	calls = mock.calls.PluralDeleteAbsencesWithSd
	mock.lockPluralDeleteAbsencesWithSd.RUnlock()
	return calls
}

// PluralDeleteAttendStatuses calls PluralDeleteAttendStatusesFunc.
func (mock *StoreMock) PluralDeleteAttendStatuses(ctx context.Context, attendStatusIDs []uuid.UUID) error {
	if mock.PluralDeleteAttendStatusesFunc == nil {
		panic("StoreMock.PluralDeleteAttendStatusesFunc: method is nil but Store.PluralDeleteAttendStatuses was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		AttendStatusIDs []uuid.UUID
	}{
		Ctx:             ctx,
		AttendStatusIDs: attendStatusIDs,
	}
	mock.lockPluralDeleteAttendStatuses.Lock()
	mock.calls.PluralDeleteAttendStatuses = append(mock.calls.PluralDeleteAttendStatuses, callInfo)
	mock.lockPluralDeleteAttendStatuses.Unlock()
	return mock.PluralDeleteAttendStatusesFunc(ctx, attendStatusIDs)
}

// PluralDeleteAttendStatusesCalls gets all the calls that were made to PluralDeleteAttendStatuses.
// Check the length with:
//
//	len(mockedStore.PluralDeleteAttendStatusesCalls())
func (mock *StoreMock) PluralDeleteAttendStatusesCalls() []struct {
	Ctx             context.Context
	AttendStatusIDs []uuid.UUID
} {
	var calls []struct {
		Ctx             context.Context
		AttendStatusIDs []uuid.UUID
	}
	mock.lockPluralDeleteAttendStatuses.RLock()
	calls = mock.calls.PluralDeleteAttendStatuses
	mock.lockPluralDeleteAttendStatuses.RUnlock()
	return calls
}

// PluralDeleteAttendStatusesWithSd calls PluralDeleteAttendStatusesWithSdFunc.
func (mock *StoreMock) PluralDeleteAttendStatusesWithSd(ctx context.Context, sd Sd, attendStatusIDs []uuid.UUID) error {
	if mock.PluralDeleteAttendStatusesWithSdFunc == nil {
		panic("StoreMock.PluralDeleteAttendStatusesWithSdFunc: method is nil but Store.PluralDeleteAttendStatusesWithSd was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		Sd              Sd
		AttendStatusIDs []uuid.UUID
	}{
		Ctx:             ctx,
		Sd:              sd,
		AttendStatusIDs: attendStatusIDs,
	}
	mock.lockPluralDeleteAttendStatusesWithSd.Lock()
	mock.calls.PluralDeleteAttendStatusesWithSd = append(mock.calls.PluralDeleteAttendStatusesWithSd, callInfo)
	mock.lockPluralDeleteAttendStatusesWithSd.Unlock()
	return mock.PluralDeleteAttendStatusesWithSdFunc(ctx, sd, attendStatusIDs)
}

// PluralDeleteAttendStatusesWithSdCalls gets all the calls that were made to PluralDeleteAttendStatusesWithSd.
// Check the length with:
//
//	len(mockedStore.PluralDeleteAttendStatusesWithSdCalls())
func (mock *StoreMock) PluralDeleteAttendStatusesWithSdCalls() []struct {
	Ctx             context.Context
	Sd              Sd
	AttendStatusIDs []uuid.UUID
} {
	var calls []struct {
		Ctx             context.Context
		Sd              Sd
		AttendStatusIDs []uuid.UUID
	}
	mock.lockPluralDeleteAttendStatusesWithSd.RLock()
	calls = mock.calls.PluralDeleteAttendStatusesWithSd
	mock.lockPluralDeleteAttendStatusesWithSd.RUnlock()
	return calls
}

// PluralDeleteAttendanceTypes calls PluralDeleteAttendanceTypesFunc.
func (mock *StoreMock) PluralDeleteAttendanceTypes(ctx context.Context, attendanceTypeIDs []uuid.UUID) error {
	if mock.PluralDeleteAttendanceTypesFunc == nil {
		panic("StoreMock.PluralDeleteAttendanceTypesFunc: method is nil but Store.PluralDeleteAttendanceTypes was just called")
	}
	callInfo := struct {
		Ctx               context.Context
		AttendanceTypeIDs []uuid.UUID
	}{
		Ctx:               ctx,
		AttendanceTypeIDs: attendanceTypeIDs,
	}
	mock.lockPluralDeleteAttendanceTypes.Lock()
	mock.calls.PluralDeleteAttendanceTypes = append(mock.calls.PluralDeleteAttendanceTypes, callInfo)
	mock.lockPluralDeleteAttendanceTypes.Unlock()
	return mock.PluralDeleteAttendanceTypesFunc(ctx, attendanceTypeIDs)
}

// PluralDeleteAttendanceTypesCalls gets all the calls that were made to PluralDeleteAttendanceTypes.
// Check the length with:
//
//	len(mockedStore.PluralDeleteAttendanceTypesCalls())
func (mock *StoreMock) PluralDeleteAttendanceTypesCalls() []struct {
	Ctx               context.Context
	AttendanceTypeIDs []uuid.UUID
} {
	var calls []struct {
		Ctx               context.Context
		AttendanceTypeIDs []uuid.UUID
	}
	mock.lockPluralDeleteAttendanceTypes.RLock()
	calls = mock.calls.PluralDeleteAttendanceTypes
	mock.lockPluralDeleteAttendanceTypes.RUnlock()
	return calls
}

// PluralDeleteAttendanceTypesWithSd calls PluralDeleteAttendanceTypesWithSdFunc.
func (mock *StoreMock) PluralDeleteAttendanceTypesWithSd(ctx context.Context, sd Sd, attendanceTypeIDs []uuid.UUID) error {
	if mock.PluralDeleteAttendanceTypesWithSdFunc == nil {
		panic("StoreMock.PluralDeleteAttendanceTypesWithSdFunc: method is nil but Store.PluralDeleteAttendanceTypesWithSd was just called")
	}
	callInfo := struct {
		Ctx               context.Context
		Sd                Sd
		AttendanceTypeIDs []uuid.UUID
	}{
		Ctx:               ctx,
		Sd:                sd,
		AttendanceTypeIDs: attendanceTypeIDs,
	}
	mock.lockPluralDeleteAttendanceTypesWithSd.Lock()
	mock.calls.PluralDeleteAttendanceTypesWithSd = append(mock.calls.PluralDeleteAttendanceTypesWithSd, callInfo)
	mock.lockPluralDeleteAttendanceTypesWithSd.Unlock()
	return mock.PluralDeleteAttendanceTypesWithSdFunc(ctx, sd, attendanceTypeIDs)
}

// PluralDeleteAttendanceTypesWithSdCalls gets all the calls that were made to PluralDeleteAttendanceTypesWithSd.
// Check the length with:
//
//	len(mockedStore.PluralDeleteAttendanceTypesWithSdCalls())
func (mock *StoreMock) PluralDeleteAttendanceTypesWithSdCalls() []struct {
	Ctx               context.Context
	Sd                Sd
	AttendanceTypeIDs []uuid.UUID
} {
	var calls []struct {
		Ctx               context.Context
		Sd                Sd
		AttendanceTypeIDs []uuid.UUID
	}
	mock.lockPluralDeleteAttendanceTypesWithSd.RLock()
	calls = mock.calls.PluralDeleteAttendanceTypesWithSd
	mock.lockPluralDeleteAttendanceTypesWithSd.RUnlock()
	return calls
}

// PluralDeleteEventTypes calls PluralDeleteEventTypesFunc.
func (mock *StoreMock) PluralDeleteEventTypes(ctx context.Context, eventTypeIDs []uuid.UUID) error {
	if mock.PluralDeleteEventTypesFunc == nil {
		panic("StoreMock.PluralDeleteEventTypesFunc: method is nil but Store.PluralDeleteEventTypes was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		EventTypeIDs []uuid.UUID
	}{
		Ctx:          ctx,
		EventTypeIDs: eventTypeIDs,
	}
	mock.lockPluralDeleteEventTypes.Lock()
	mock.calls.PluralDeleteEventTypes = append(mock.calls.PluralDeleteEventTypes, callInfo)
	mock.lockPluralDeleteEventTypes.Unlock()
	return mock.PluralDeleteEventTypesFunc(ctx, eventTypeIDs)
}

// PluralDeleteEventTypesCalls gets all the calls that were made to PluralDeleteEventTypes.
// Check the length with:
//
//	len(mockedStore.PluralDeleteEventTypesCalls())
func (mock *StoreMock) PluralDeleteEventTypesCalls() []struct {
	Ctx          context.Context
	EventTypeIDs []uuid.UUID
} {
	var calls []struct {
		Ctx          context.Context
		EventTypeIDs []uuid.UUID
	}
	mock.lockPluralDeleteEventTypes.RLock()
	calls = mock.calls.PluralDeleteEventTypes
	mock.lockPluralDeleteEventTypes.RUnlock()
	return calls
}

// PluralDeleteEventTypesWithSd calls PluralDeleteEventTypesWithSdFunc.
func (mock *StoreMock) PluralDeleteEventTypesWithSd(ctx context.Context, sd Sd, eventTypeIDs []uuid.UUID) error {
	if mock.PluralDeleteEventTypesWithSdFunc == nil {
		panic("StoreMock.PluralDeleteEventTypesWithSdFunc: method is nil but Store.PluralDeleteEventTypesWithSd was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		Sd           Sd
		EventTypeIDs []uuid.UUID
	}{
		Ctx:          ctx,
		Sd:           sd,
		EventTypeIDs: eventTypeIDs,
	}
	mock.lockPluralDeleteEventTypesWithSd.Lock()
	mock.calls.PluralDeleteEventTypesWithSd = append(mock.calls.PluralDeleteEventTypesWithSd, callInfo)
	mock.lockPluralDeleteEventTypesWithSd.Unlock()
	return mock.PluralDeleteEventTypesWithSdFunc(ctx, sd, eventTypeIDs)
}

// PluralDeleteEventTypesWithSdCalls gets all the calls that were made to PluralDeleteEventTypesWithSd.
// Check the length with:
//
//	len(mockedStore.PluralDeleteEventTypesWithSdCalls())
func (mock *StoreMock) PluralDeleteEventTypesWithSdCalls() []struct {
	Ctx          context.Context
	Sd           Sd
	EventTypeIDs []uuid.UUID
} {
	var calls []struct {
		Ctx          context.Context
		Sd           Sd
		EventTypeIDs []uuid.UUID
	}
	mock.lockPluralDeleteEventTypesWithSd.RLock()
	calls = mock.calls.PluralDeleteEventTypesWithSd
	mock.lockPluralDeleteEventTypesWithSd.RUnlock()
	return calls
}

// PluralDeleteMimeTypes calls PluralDeleteMimeTypesFunc.
func (mock *StoreMock) PluralDeleteMimeTypes(ctx context.Context, mimeTypeIDs []uuid.UUID) error {
	if mock.PluralDeleteMimeTypesFunc == nil {
		panic("StoreMock.PluralDeleteMimeTypesFunc: method is nil but Store.PluralDeleteMimeTypes was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		MimeTypeIDs []uuid.UUID
	}{
		Ctx:         ctx,
		MimeTypeIDs: mimeTypeIDs,
	}
	mock.lockPluralDeleteMimeTypes.Lock()
	mock.calls.PluralDeleteMimeTypes = append(mock.calls.PluralDeleteMimeTypes, callInfo)
	mock.lockPluralDeleteMimeTypes.Unlock()
	return mock.PluralDeleteMimeTypesFunc(ctx, mimeTypeIDs)
}

// PluralDeleteMimeTypesCalls gets all the calls that were made to PluralDeleteMimeTypes.
// Check the length with:
//
//	len(mockedStore.PluralDeleteMimeTypesCalls())
func (mock *StoreMock) PluralDeleteMimeTypesCalls() []struct {
	Ctx         context.Context
	MimeTypeIDs []uuid.UUID
} {
	var calls []struct {
		Ctx         context.Context
		MimeTypeIDs []uuid.UUID
	}
	mock.lockPluralDeleteMimeTypes.RLock()
	calls = mock.calls.PluralDeleteMimeTypes
	mock.lockPluralDeleteMimeTypes.RUnlock()
	return calls
}

// PluralDeleteMimeTypesWithSd calls PluralDeleteMimeTypesWithSdFunc.
func (mock *StoreMock) PluralDeleteMimeTypesWithSd(ctx context.Context, sd Sd, mimeTypeIDs []uuid.UUID) error {
	if mock.PluralDeleteMimeTypesWithSdFunc == nil {
		panic("StoreMock.PluralDeleteMimeTypesWithSdFunc: method is nil but Store.PluralDeleteMimeTypesWithSd was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Sd          Sd
		MimeTypeIDs []uuid.UUID
	}{
		Ctx:         ctx,
		Sd:          sd,
		MimeTypeIDs: mimeTypeIDs,
	}
	mock.lockPluralDeleteMimeTypesWithSd.Lock()
	mock.calls.PluralDeleteMimeTypesWithSd = append(mock.calls.PluralDeleteMimeTypesWithSd, callInfo)
	mock.lockPluralDeleteMimeTypesWithSd.Unlock()
	return mock.PluralDeleteMimeTypesWithSdFunc(ctx, sd, mimeTypeIDs)
}

// PluralDeleteMimeTypesWithSdCalls gets all the calls that were made to PluralDeleteMimeTypesWithSd.
// Check the length with:
//
//	len(mockedStore.PluralDeleteMimeTypesWithSdCalls())
func (mock *StoreMock) PluralDeleteMimeTypesWithSdCalls() []struct {
	Ctx         context.Context
	Sd          Sd
	MimeTypeIDs []uuid.UUID
} {
	var calls []struct {
		Ctx         context.Context
		Sd          Sd
		MimeTypeIDs []uuid.UUID
	}
	mock.lockPluralDeleteMimeTypesWithSd.RLock()
	calls = mock.calls.PluralDeleteMimeTypesWithSd
	mock.lockPluralDeleteMimeTypesWithSd.RUnlock()
	return calls
}

// PluralDeletePermissionCategories calls PluralDeletePermissionCategoriesFunc.
func (mock *StoreMock) PluralDeletePermissionCategories(ctx context.Context, permissionCategoryIDs []uuid.UUID) error {
	if mock.PluralDeletePermissionCategoriesFunc == nil {
		panic("StoreMock.PluralDeletePermissionCategoriesFunc: method is nil but Store.PluralDeletePermissionCategories was just called")
	}
	callInfo := struct {
		Ctx                   context.Context
		PermissionCategoryIDs []uuid.UUID
	}{
		Ctx:                   ctx,
		PermissionCategoryIDs: permissionCategoryIDs,
	}
	mock.lockPluralDeletePermissionCategories.Lock()
	mock.calls.PluralDeletePermissionCategories = append(mock.calls.PluralDeletePermissionCategories, callInfo)
	mock.lockPluralDeletePermissionCategories.Unlock()
	return mock.PluralDeletePermissionCategoriesFunc(ctx, permissionCategoryIDs)
}

// PluralDeletePermissionCategoriesCalls gets all the calls that were made to PluralDeletePermissionCategories.
// Check the length with:
//
//	len(mockedStore.PluralDeletePermissionCategoriesCalls())
func (mock *StoreMock) PluralDeletePermissionCategoriesCalls() []struct {
	Ctx                   context.Context
	PermissionCategoryIDs []uuid.UUID
} {
	var calls []struct {
		Ctx                   context.Context
		PermissionCategoryIDs []uuid.UUID
	}
	mock.lockPluralDeletePermissionCategories.RLock()
	calls = mock.calls.PluralDeletePermissionCategories
	mock.lockPluralDeletePermissionCategories.RUnlock()
	return calls
}

// PluralDeletePermissionCategoriesWithSd calls PluralDeletePermissionCategoriesWithSdFunc.
func (mock *StoreMock) PluralDeletePermissionCategoriesWithSd(ctx context.Context, sd Sd, permissionCategoryIDs []uuid.UUID) error {
	if mock.PluralDeletePermissionCategoriesWithSdFunc == nil {
		panic("StoreMock.PluralDeletePermissionCategoriesWithSdFunc: method is nil but Store.PluralDeletePermissionCategoriesWithSd was just called")
	}
	callInfo := struct {
		Ctx                   context.Context
		Sd                    Sd
		PermissionCategoryIDs []uuid.UUID
	}{
		Ctx:                   ctx,
		Sd:                    sd,
		PermissionCategoryIDs: permissionCategoryIDs,
	}
	mock.lockPluralDeletePermissionCategoriesWithSd.Lock()
	mock.calls.PluralDeletePermissionCategoriesWithSd = append(mock.calls.PluralDeletePermissionCategoriesWithSd, callInfo)
	mock.lockPluralDeletePermissionCategoriesWithSd.Unlock()
	return mock.PluralDeletePermissionCategoriesWithSdFunc(ctx, sd, permissionCategoryIDs)
}

// PluralDeletePermissionCategoriesWithSdCalls gets all the calls that were made to PluralDeletePermissionCategoriesWithSd.
// Check the length with:
//
//	len(mockedStore.PluralDeletePermissionCategoriesWithSdCalls())
func (mock *StoreMock) PluralDeletePermissionCategoriesWithSdCalls() []struct {
	Ctx                   context.Context
	Sd                    Sd
	PermissionCategoryIDs []uuid.UUID
} {
	var calls []struct {
		Ctx                   context.Context
		Sd                    Sd
		PermissionCategoryIDs []uuid.UUID
	}
	mock.lockPluralDeletePermissionCategoriesWithSd.RLock()
	calls = mock.calls.PluralDeletePermissionCategoriesWithSd
	mock.lockPluralDeletePermissionCategoriesWithSd.RUnlock()
	return calls
}

// PluralDeletePermissions calls PluralDeletePermissionsFunc.
func (mock *StoreMock) PluralDeletePermissions(ctx context.Context, permissionIDs []uuid.UUID) error {
	if mock.PluralDeletePermissionsFunc == nil {
		panic("StoreMock.PluralDeletePermissionsFunc: method is nil but Store.PluralDeletePermissions was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		PermissionIDs []uuid.UUID
	}{
		Ctx:           ctx,
		PermissionIDs: permissionIDs,
	}
	mock.lockPluralDeletePermissions.Lock()
	mock.calls.PluralDeletePermissions = append(mock.calls.PluralDeletePermissions, callInfo)
	mock.lockPluralDeletePermissions.Unlock()
	return mock.PluralDeletePermissionsFunc(ctx, permissionIDs)
}

// PluralDeletePermissionsCalls gets all the calls that were made to PluralDeletePermissions.
// Check the length with:
//
//	len(mockedStore.PluralDeletePermissionsCalls())
func (mock *StoreMock) PluralDeletePermissionsCalls() []struct {
	Ctx           context.Context
	PermissionIDs []uuid.UUID
} {
	var calls []struct {
		Ctx           context.Context
		PermissionIDs []uuid.UUID
	}
	mock.lockPluralDeletePermissions.RLock()
	calls = mock.calls.PluralDeletePermissions
	mock.lockPluralDeletePermissions.RUnlock()
	return calls
}

// PluralDeletePermissionsWithSd calls PluralDeletePermissionsWithSdFunc.
func (mock *StoreMock) PluralDeletePermissionsWithSd(ctx context.Context, sd Sd, permissionIDs []uuid.UUID) error {
	if mock.PluralDeletePermissionsWithSdFunc == nil {
		panic("StoreMock.PluralDeletePermissionsWithSdFunc: method is nil but Store.PluralDeletePermissionsWithSd was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		Sd            Sd
		PermissionIDs []uuid.UUID
	}{
		Ctx:           ctx,
		Sd:            sd,
		PermissionIDs: permissionIDs,
	}
	mock.lockPluralDeletePermissionsWithSd.Lock()
	mock.calls.PluralDeletePermissionsWithSd = append(mock.calls.PluralDeletePermissionsWithSd, callInfo)
	mock.lockPluralDeletePermissionsWithSd.Unlock()
	return mock.PluralDeletePermissionsWithSdFunc(ctx, sd, permissionIDs)
}

// PluralDeletePermissionsWithSdCalls gets all the calls that were made to PluralDeletePermissionsWithSd.
// Check the length with:
//
//	len(mockedStore.PluralDeletePermissionsWithSdCalls())
func (mock *StoreMock) PluralDeletePermissionsWithSdCalls() []struct {
	Ctx           context.Context
	Sd            Sd
	PermissionIDs []uuid.UUID
} {
	var calls []struct {
		Ctx           context.Context
		Sd            Sd
		PermissionIDs []uuid.UUID
	}
	mock.lockPluralDeletePermissionsWithSd.RLock()
	calls = mock.calls.PluralDeletePermissionsWithSd
	mock.lockPluralDeletePermissionsWithSd.RUnlock()
	return calls
}

// PluralDeletePolicies calls PluralDeletePoliciesFunc.
func (mock *StoreMock) PluralDeletePolicies(ctx context.Context, policyIDs []uuid.UUID) error {
	if mock.PluralDeletePoliciesFunc == nil {
		panic("StoreMock.PluralDeletePoliciesFunc: method is nil but Store.PluralDeletePolicies was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		PolicyIDs []uuid.UUID
	}{
		Ctx:       ctx,
		PolicyIDs: policyIDs,
	}
	mock.lockPluralDeletePolicies.Lock()
	mock.calls.PluralDeletePolicies = append(mock.calls.PluralDeletePolicies, callInfo)
	mock.lockPluralDeletePolicies.Unlock()
	return mock.PluralDeletePoliciesFunc(ctx, policyIDs)
}

// PluralDeletePoliciesCalls gets all the calls that were made to PluralDeletePolicies.
// Check the length with:
//
//	len(mockedStore.PluralDeletePoliciesCalls())
func (mock *StoreMock) PluralDeletePoliciesCalls() []struct {
	Ctx       context.Context
	PolicyIDs []uuid.UUID
} {
	var calls []struct {
		Ctx       context.Context
		PolicyIDs []uuid.UUID
	}
	mock.lockPluralDeletePolicies.RLock()
	calls = mock.calls.PluralDeletePolicies
	mock.lockPluralDeletePolicies.RUnlock()
	return calls
}

// PluralDeletePoliciesWithSd calls PluralDeletePoliciesWithSdFunc.
func (mock *StoreMock) PluralDeletePoliciesWithSd(ctx context.Context, sd Sd, policyIDs []uuid.UUID) error {
	if mock.PluralDeletePoliciesWithSdFunc == nil {
		panic("StoreMock.PluralDeletePoliciesWithSdFunc: method is nil but Store.PluralDeletePoliciesWithSd was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Sd        Sd
		PolicyIDs []uuid.UUID
	}{
		Ctx:       ctx,
		Sd:        sd,
		PolicyIDs: policyIDs,
	}
	mock.lockPluralDeletePoliciesWithSd.Lock()
	mock.calls.PluralDeletePoliciesWithSd = append(mock.calls.PluralDeletePoliciesWithSd, callInfo)
	mock.lockPluralDeletePoliciesWithSd.Unlock()
	return mock.PluralDeletePoliciesWithSdFunc(ctx, sd, policyIDs)
}

// PluralDeletePoliciesWithSdCalls gets all the calls that were made to PluralDeletePoliciesWithSd.
// Check the length with:
//
//	len(mockedStore.PluralDeletePoliciesWithSdCalls())
func (mock *StoreMock) PluralDeletePoliciesWithSdCalls() []struct {
	Ctx       context.Context
	Sd        Sd
	PolicyIDs []uuid.UUID
} {
	var calls []struct {
		Ctx       context.Context
		Sd        Sd
		PolicyIDs []uuid.UUID
	}
	mock.lockPluralDeletePoliciesWithSd.RLock()
	calls = mock.calls.PluralDeletePoliciesWithSd
	mock.lockPluralDeletePoliciesWithSd.RUnlock()
	return calls
}

// PluralDeletePolicyCategories calls PluralDeletePolicyCategoriesFunc.
func (mock *StoreMock) PluralDeletePolicyCategories(ctx context.Context, policyCategoryIDs []uuid.UUID) error {
	if mock.PluralDeletePolicyCategoriesFunc == nil {
		panic("StoreMock.PluralDeletePolicyCategoriesFunc: method is nil but Store.PluralDeletePolicyCategories was just called")
	}
	callInfo := struct {
		Ctx               context.Context
		PolicyCategoryIDs []uuid.UUID
	}{
		Ctx:               ctx,
		PolicyCategoryIDs: policyCategoryIDs,
	}
	mock.lockPluralDeletePolicyCategories.Lock()
	mock.calls.PluralDeletePolicyCategories = append(mock.calls.PluralDeletePolicyCategories, callInfo)
	mock.lockPluralDeletePolicyCategories.Unlock()
	return mock.PluralDeletePolicyCategoriesFunc(ctx, policyCategoryIDs)
}

// PluralDeletePolicyCategoriesCalls gets all the calls that were made to PluralDeletePolicyCategories.
// Check the length with:
//
//	len(mockedStore.PluralDeletePolicyCategoriesCalls())
func (mock *StoreMock) PluralDeletePolicyCategoriesCalls() []struct {
	Ctx               context.Context
	PolicyCategoryIDs []uuid.UUID
} {
	var calls []struct {
		Ctx               context.Context
		PolicyCategoryIDs []uuid.UUID
	}
	mock.lockPluralDeletePolicyCategories.RLock()
	calls = mock.calls.PluralDeletePolicyCategories
	mock.lockPluralDeletePolicyCategories.RUnlock()
	return calls
}

// PluralDeletePolicyCategoriesWithSd calls PluralDeletePolicyCategoriesWithSdFunc.
func (mock *StoreMock) PluralDeletePolicyCategoriesWithSd(ctx context.Context, sd Sd, policyCategoryIDs []uuid.UUID) error {
	if mock.PluralDeletePolicyCategoriesWithSdFunc == nil {
		panic("StoreMock.PluralDeletePolicyCategoriesWithSdFunc: method is nil but Store.PluralDeletePolicyCategoriesWithSd was just called")
	}
	callInfo := struct {
		Ctx               context.Context
		Sd                Sd
		PolicyCategoryIDs []uuid.UUID
	}{
		Ctx:               ctx,
		Sd:                sd,
		PolicyCategoryIDs: policyCategoryIDs,
	}
	mock.lockPluralDeletePolicyCategoriesWithSd.Lock()
	mock.calls.PluralDeletePolicyCategoriesWithSd = append(mock.calls.PluralDeletePolicyCategoriesWithSd, callInfo)
	mock.lockPluralDeletePolicyCategoriesWithSd.Unlock()
	return mock.PluralDeletePolicyCategoriesWithSdFunc(ctx, sd, policyCategoryIDs)
}

// PluralDeletePolicyCategoriesWithSdCalls gets all the calls that were made to PluralDeletePolicyCategoriesWithSd.
// Check the length with:
//
//	len(mockedStore.PluralDeletePolicyCategoriesWithSdCalls())
func (mock *StoreMock) PluralDeletePolicyCategoriesWithSdCalls() []struct {
	Ctx               context.Context
	Sd                Sd
	PolicyCategoryIDs []uuid.UUID
} {
	var calls []struct {
		Ctx               context.Context
		Sd                Sd
		PolicyCategoryIDs []uuid.UUID
	}
	mock.lockPluralDeletePolicyCategoriesWithSd.RLock()
	calls = mock.calls.PluralDeletePolicyCategoriesWithSd
	mock.lockPluralDeletePolicyCategoriesWithSd.RUnlock()
	return calls
}

// PluralDeleteRecordTypes calls PluralDeleteRecordTypesFunc.
func (mock *StoreMock) PluralDeleteRecordTypes(ctx context.Context, recordTypeIDs []uuid.UUID) error {
	if mock.PluralDeleteRecordTypesFunc == nil {
		panic("StoreMock.PluralDeleteRecordTypesFunc: method is nil but Store.PluralDeleteRecordTypes was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		RecordTypeIDs []uuid.UUID
	}{
		Ctx:           ctx,
		RecordTypeIDs: recordTypeIDs,
	}
	mock.lockPluralDeleteRecordTypes.Lock()
	mock.calls.PluralDeleteRecordTypes = append(mock.calls.PluralDeleteRecordTypes, callInfo)
	mock.lockPluralDeleteRecordTypes.Unlock()
	return mock.PluralDeleteRecordTypesFunc(ctx, recordTypeIDs)
}

// PluralDeleteRecordTypesCalls gets all the calls that were made to PluralDeleteRecordTypes.
// Check the length with:
//
//	len(mockedStore.PluralDeleteRecordTypesCalls())
func (mock *StoreMock) PluralDeleteRecordTypesCalls() []struct {
	Ctx           context.Context
	RecordTypeIDs []uuid.UUID
} {
	var calls []struct {
		Ctx           context.Context
		RecordTypeIDs []uuid.UUID
	}
	mock.lockPluralDeleteRecordTypes.RLock()
	calls = mock.calls.PluralDeleteRecordTypes
	mock.lockPluralDeleteRecordTypes.RUnlock()
	return calls
}

// PluralDeleteRecordTypesWithSd calls PluralDeleteRecordTypesWithSdFunc.
func (mock *StoreMock) PluralDeleteRecordTypesWithSd(ctx context.Context, sd Sd, recordTypeIDs []uuid.UUID) error {
	if mock.PluralDeleteRecordTypesWithSdFunc == nil {
		panic("StoreMock.PluralDeleteRecordTypesWithSdFunc: method is nil but Store.PluralDeleteRecordTypesWithSd was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		Sd            Sd
		RecordTypeIDs []uuid.UUID
	}{
		Ctx:           ctx,
		Sd:            sd,
		RecordTypeIDs: recordTypeIDs,
	}
	mock.lockPluralDeleteRecordTypesWithSd.Lock()
	mock.calls.PluralDeleteRecordTypesWithSd = append(mock.calls.PluralDeleteRecordTypesWithSd, callInfo)
	mock.lockPluralDeleteRecordTypesWithSd.Unlock()
	return mock.PluralDeleteRecordTypesWithSdFunc(ctx, sd, recordTypeIDs)
}

// PluralDeleteRecordTypesWithSdCalls gets all the calls that were made to PluralDeleteRecordTypesWithSd.
// Check the length with:
//
//	len(mockedStore.PluralDeleteRecordTypesWithSdCalls())
func (mock *StoreMock) PluralDeleteRecordTypesWithSdCalls() []struct {
	Ctx           context.Context
	Sd            Sd
	RecordTypeIDs []uuid.UUID
} {
	var calls []struct {
		Ctx           context.Context
		Sd            Sd
		RecordTypeIDs []uuid.UUID
	}
	mock.lockPluralDeleteRecordTypesWithSd.RLock()
	calls = mock.calls.PluralDeleteRecordTypesWithSd
	mock.lockPluralDeleteRecordTypesWithSd.RUnlock()
	return calls
}

// Rollback calls RollbackFunc.
func (mock *StoreMock) Rollback(contextMoqParam context.Context, sd Sd) error {
	if mock.RollbackFunc == nil {
		panic("StoreMock.RollbackFunc: method is nil but Store.Rollback was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		Sd              Sd
	}{
		ContextMoqParam: contextMoqParam,
		Sd:              sd,
	}
	mock.lockRollback.Lock()
	mock.calls.Rollback = append(mock.calls.Rollback, callInfo)
	mock.lockRollback.Unlock()
	return mock.RollbackFunc(contextMoqParam, sd)
}

// RollbackCalls gets all the calls that were made to Rollback.
// Check the length with:
//
//	len(mockedStore.RollbackCalls())
func (mock *StoreMock) RollbackCalls() []struct {
	ContextMoqParam context.Context
	Sd              Sd
} {
	var calls []struct {
		ContextMoqParam context.Context
		Sd              Sd
	}
	mock.lockRollback.RLock()
	calls = mock.calls.Rollback
	mock.lockRollback.RUnlock()
	return calls
}

// UpdateAttendStatus calls UpdateAttendStatusFunc.
func (mock *StoreMock) UpdateAttendStatus(ctx context.Context, attendStatusID uuid.UUID, param parameter.UpdateAttendStatusParams) (entity.AttendStatus, error) {
	if mock.UpdateAttendStatusFunc == nil {
		panic("StoreMock.UpdateAttendStatusFunc: method is nil but Store.UpdateAttendStatus was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		AttendStatusID uuid.UUID
		Param          parameter.UpdateAttendStatusParams
	}{
		Ctx:            ctx,
		AttendStatusID: attendStatusID,
		Param:          param,
	}
	mock.lockUpdateAttendStatus.Lock()
	mock.calls.UpdateAttendStatus = append(mock.calls.UpdateAttendStatus, callInfo)
	mock.lockUpdateAttendStatus.Unlock()
	return mock.UpdateAttendStatusFunc(ctx, attendStatusID, param)
}

// UpdateAttendStatusCalls gets all the calls that were made to UpdateAttendStatus.
// Check the length with:
//
//	len(mockedStore.UpdateAttendStatusCalls())
func (mock *StoreMock) UpdateAttendStatusCalls() []struct {
	Ctx            context.Context
	AttendStatusID uuid.UUID
	Param          parameter.UpdateAttendStatusParams
} {
	var calls []struct {
		Ctx            context.Context
		AttendStatusID uuid.UUID
		Param          parameter.UpdateAttendStatusParams
	}
	mock.lockUpdateAttendStatus.RLock()
	calls = mock.calls.UpdateAttendStatus
	mock.lockUpdateAttendStatus.RUnlock()
	return calls
}

// UpdateAttendStatusByKey calls UpdateAttendStatusByKeyFunc.
func (mock *StoreMock) UpdateAttendStatusByKey(ctx context.Context, key string, param parameter.UpdateAttendStatusByKeyParams) (entity.AttendStatus, error) {
	if mock.UpdateAttendStatusByKeyFunc == nil {
		panic("StoreMock.UpdateAttendStatusByKeyFunc: method is nil but Store.UpdateAttendStatusByKey was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Key   string
		Param parameter.UpdateAttendStatusByKeyParams
	}{
		Ctx:   ctx,
		Key:   key,
		Param: param,
	}
	mock.lockUpdateAttendStatusByKey.Lock()
	mock.calls.UpdateAttendStatusByKey = append(mock.calls.UpdateAttendStatusByKey, callInfo)
	mock.lockUpdateAttendStatusByKey.Unlock()
	return mock.UpdateAttendStatusByKeyFunc(ctx, key, param)
}

// UpdateAttendStatusByKeyCalls gets all the calls that were made to UpdateAttendStatusByKey.
// Check the length with:
//
//	len(mockedStore.UpdateAttendStatusByKeyCalls())
func (mock *StoreMock) UpdateAttendStatusByKeyCalls() []struct {
	Ctx   context.Context
	Key   string
	Param parameter.UpdateAttendStatusByKeyParams
} {
	var calls []struct {
		Ctx   context.Context
		Key   string
		Param parameter.UpdateAttendStatusByKeyParams
	}
	mock.lockUpdateAttendStatusByKey.RLock()
	calls = mock.calls.UpdateAttendStatusByKey
	mock.lockUpdateAttendStatusByKey.RUnlock()
	return calls
}

// UpdateAttendStatusByKeyWithSd calls UpdateAttendStatusByKeyWithSdFunc.
func (mock *StoreMock) UpdateAttendStatusByKeyWithSd(ctx context.Context, sd Sd, key string, param parameter.UpdateAttendStatusByKeyParams) (entity.AttendStatus, error) {
	if mock.UpdateAttendStatusByKeyWithSdFunc == nil {
		panic("StoreMock.UpdateAttendStatusByKeyWithSdFunc: method is nil but Store.UpdateAttendStatusByKeyWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Key   string
		Param parameter.UpdateAttendStatusByKeyParams
	}{
		Ctx:   ctx,
		Sd:    sd,
		Key:   key,
		Param: param,
	}
	mock.lockUpdateAttendStatusByKeyWithSd.Lock()
	mock.calls.UpdateAttendStatusByKeyWithSd = append(mock.calls.UpdateAttendStatusByKeyWithSd, callInfo)
	mock.lockUpdateAttendStatusByKeyWithSd.Unlock()
	return mock.UpdateAttendStatusByKeyWithSdFunc(ctx, sd, key, param)
}

// UpdateAttendStatusByKeyWithSdCalls gets all the calls that were made to UpdateAttendStatusByKeyWithSd.
// Check the length with:
//
//	len(mockedStore.UpdateAttendStatusByKeyWithSdCalls())
func (mock *StoreMock) UpdateAttendStatusByKeyWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Key   string
	Param parameter.UpdateAttendStatusByKeyParams
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Key   string
		Param parameter.UpdateAttendStatusByKeyParams
	}
	mock.lockUpdateAttendStatusByKeyWithSd.RLock()
	calls = mock.calls.UpdateAttendStatusByKeyWithSd
	mock.lockUpdateAttendStatusByKeyWithSd.RUnlock()
	return calls
}

// UpdateAttendStatusWithSd calls UpdateAttendStatusWithSdFunc.
func (mock *StoreMock) UpdateAttendStatusWithSd(ctx context.Context, sd Sd, attendStatusID uuid.UUID, param parameter.UpdateAttendStatusParams) (entity.AttendStatus, error) {
	if mock.UpdateAttendStatusWithSdFunc == nil {
		panic("StoreMock.UpdateAttendStatusWithSdFunc: method is nil but Store.UpdateAttendStatusWithSd was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		Sd             Sd
		AttendStatusID uuid.UUID
		Param          parameter.UpdateAttendStatusParams
	}{
		Ctx:            ctx,
		Sd:             sd,
		AttendStatusID: attendStatusID,
		Param:          param,
	}
	mock.lockUpdateAttendStatusWithSd.Lock()
	mock.calls.UpdateAttendStatusWithSd = append(mock.calls.UpdateAttendStatusWithSd, callInfo)
	mock.lockUpdateAttendStatusWithSd.Unlock()
	return mock.UpdateAttendStatusWithSdFunc(ctx, sd, attendStatusID, param)
}

// UpdateAttendStatusWithSdCalls gets all the calls that were made to UpdateAttendStatusWithSd.
// Check the length with:
//
//	len(mockedStore.UpdateAttendStatusWithSdCalls())
func (mock *StoreMock) UpdateAttendStatusWithSdCalls() []struct {
	Ctx            context.Context
	Sd             Sd
	AttendStatusID uuid.UUID
	Param          parameter.UpdateAttendStatusParams
} {
	var calls []struct {
		Ctx            context.Context
		Sd             Sd
		AttendStatusID uuid.UUID
		Param          parameter.UpdateAttendStatusParams
	}
	mock.lockUpdateAttendStatusWithSd.RLock()
	calls = mock.calls.UpdateAttendStatusWithSd
	mock.lockUpdateAttendStatusWithSd.RUnlock()
	return calls
}

// UpdateAttendanceType calls UpdateAttendanceTypeFunc.
func (mock *StoreMock) UpdateAttendanceType(ctx context.Context, attendanceTypeID uuid.UUID, param parameter.UpdateAttendanceTypeParams) (entity.AttendanceType, error) {
	if mock.UpdateAttendanceTypeFunc == nil {
		panic("StoreMock.UpdateAttendanceTypeFunc: method is nil but Store.UpdateAttendanceType was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		AttendanceTypeID uuid.UUID
		Param            parameter.UpdateAttendanceTypeParams
	}{
		Ctx:              ctx,
		AttendanceTypeID: attendanceTypeID,
		Param:            param,
	}
	mock.lockUpdateAttendanceType.Lock()
	mock.calls.UpdateAttendanceType = append(mock.calls.UpdateAttendanceType, callInfo)
	mock.lockUpdateAttendanceType.Unlock()
	return mock.UpdateAttendanceTypeFunc(ctx, attendanceTypeID, param)
}

// UpdateAttendanceTypeCalls gets all the calls that were made to UpdateAttendanceType.
// Check the length with:
//
//	len(mockedStore.UpdateAttendanceTypeCalls())
func (mock *StoreMock) UpdateAttendanceTypeCalls() []struct {
	Ctx              context.Context
	AttendanceTypeID uuid.UUID
	Param            parameter.UpdateAttendanceTypeParams
} {
	var calls []struct {
		Ctx              context.Context
		AttendanceTypeID uuid.UUID
		Param            parameter.UpdateAttendanceTypeParams
	}
	mock.lockUpdateAttendanceType.RLock()
	calls = mock.calls.UpdateAttendanceType
	mock.lockUpdateAttendanceType.RUnlock()
	return calls
}

// UpdateAttendanceTypeByKey calls UpdateAttendanceTypeByKeyFunc.
func (mock *StoreMock) UpdateAttendanceTypeByKey(ctx context.Context, key string, param parameter.UpdateAttendanceTypeByKeyParams) (entity.AttendanceType, error) {
	if mock.UpdateAttendanceTypeByKeyFunc == nil {
		panic("StoreMock.UpdateAttendanceTypeByKeyFunc: method is nil but Store.UpdateAttendanceTypeByKey was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Key   string
		Param parameter.UpdateAttendanceTypeByKeyParams
	}{
		Ctx:   ctx,
		Key:   key,
		Param: param,
	}
	mock.lockUpdateAttendanceTypeByKey.Lock()
	mock.calls.UpdateAttendanceTypeByKey = append(mock.calls.UpdateAttendanceTypeByKey, callInfo)
	mock.lockUpdateAttendanceTypeByKey.Unlock()
	return mock.UpdateAttendanceTypeByKeyFunc(ctx, key, param)
}

// UpdateAttendanceTypeByKeyCalls gets all the calls that were made to UpdateAttendanceTypeByKey.
// Check the length with:
//
//	len(mockedStore.UpdateAttendanceTypeByKeyCalls())
func (mock *StoreMock) UpdateAttendanceTypeByKeyCalls() []struct {
	Ctx   context.Context
	Key   string
	Param parameter.UpdateAttendanceTypeByKeyParams
} {
	var calls []struct {
		Ctx   context.Context
		Key   string
		Param parameter.UpdateAttendanceTypeByKeyParams
	}
	mock.lockUpdateAttendanceTypeByKey.RLock()
	calls = mock.calls.UpdateAttendanceTypeByKey
	mock.lockUpdateAttendanceTypeByKey.RUnlock()
	return calls
}

// UpdateAttendanceTypeByKeyWithSd calls UpdateAttendanceTypeByKeyWithSdFunc.
func (mock *StoreMock) UpdateAttendanceTypeByKeyWithSd(ctx context.Context, sd Sd, key string, param parameter.UpdateAttendanceTypeByKeyParams) (entity.AttendanceType, error) {
	if mock.UpdateAttendanceTypeByKeyWithSdFunc == nil {
		panic("StoreMock.UpdateAttendanceTypeByKeyWithSdFunc: method is nil but Store.UpdateAttendanceTypeByKeyWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Key   string
		Param parameter.UpdateAttendanceTypeByKeyParams
	}{
		Ctx:   ctx,
		Sd:    sd,
		Key:   key,
		Param: param,
	}
	mock.lockUpdateAttendanceTypeByKeyWithSd.Lock()
	mock.calls.UpdateAttendanceTypeByKeyWithSd = append(mock.calls.UpdateAttendanceTypeByKeyWithSd, callInfo)
	mock.lockUpdateAttendanceTypeByKeyWithSd.Unlock()
	return mock.UpdateAttendanceTypeByKeyWithSdFunc(ctx, sd, key, param)
}

// UpdateAttendanceTypeByKeyWithSdCalls gets all the calls that were made to UpdateAttendanceTypeByKeyWithSd.
// Check the length with:
//
//	len(mockedStore.UpdateAttendanceTypeByKeyWithSdCalls())
func (mock *StoreMock) UpdateAttendanceTypeByKeyWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Key   string
	Param parameter.UpdateAttendanceTypeByKeyParams
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Key   string
		Param parameter.UpdateAttendanceTypeByKeyParams
	}
	mock.lockUpdateAttendanceTypeByKeyWithSd.RLock()
	calls = mock.calls.UpdateAttendanceTypeByKeyWithSd
	mock.lockUpdateAttendanceTypeByKeyWithSd.RUnlock()
	return calls
}

// UpdateAttendanceTypeWithSd calls UpdateAttendanceTypeWithSdFunc.
func (mock *StoreMock) UpdateAttendanceTypeWithSd(ctx context.Context, sd Sd, attendanceTypeID uuid.UUID, param parameter.UpdateAttendanceTypeParams) (entity.AttendanceType, error) {
	if mock.UpdateAttendanceTypeWithSdFunc == nil {
		panic("StoreMock.UpdateAttendanceTypeWithSdFunc: method is nil but Store.UpdateAttendanceTypeWithSd was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		Sd               Sd
		AttendanceTypeID uuid.UUID
		Param            parameter.UpdateAttendanceTypeParams
	}{
		Ctx:              ctx,
		Sd:               sd,
		AttendanceTypeID: attendanceTypeID,
		Param:            param,
	}
	mock.lockUpdateAttendanceTypeWithSd.Lock()
	mock.calls.UpdateAttendanceTypeWithSd = append(mock.calls.UpdateAttendanceTypeWithSd, callInfo)
	mock.lockUpdateAttendanceTypeWithSd.Unlock()
	return mock.UpdateAttendanceTypeWithSdFunc(ctx, sd, attendanceTypeID, param)
}

// UpdateAttendanceTypeWithSdCalls gets all the calls that were made to UpdateAttendanceTypeWithSd.
// Check the length with:
//
//	len(mockedStore.UpdateAttendanceTypeWithSdCalls())
func (mock *StoreMock) UpdateAttendanceTypeWithSdCalls() []struct {
	Ctx              context.Context
	Sd               Sd
	AttendanceTypeID uuid.UUID
	Param            parameter.UpdateAttendanceTypeParams
} {
	var calls []struct {
		Ctx              context.Context
		Sd               Sd
		AttendanceTypeID uuid.UUID
		Param            parameter.UpdateAttendanceTypeParams
	}
	mock.lockUpdateAttendanceTypeWithSd.RLock()
	calls = mock.calls.UpdateAttendanceTypeWithSd
	mock.lockUpdateAttendanceTypeWithSd.RUnlock()
	return calls
}

// UpdateEventType calls UpdateEventTypeFunc.
func (mock *StoreMock) UpdateEventType(ctx context.Context, eventTypeID uuid.UUID, param parameter.UpdateEventTypeParams) (entity.EventType, error) {
	if mock.UpdateEventTypeFunc == nil {
		panic("StoreMock.UpdateEventTypeFunc: method is nil but Store.UpdateEventType was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		EventTypeID uuid.UUID
		Param       parameter.UpdateEventTypeParams
	}{
		Ctx:         ctx,
		EventTypeID: eventTypeID,
		Param:       param,
	}
	mock.lockUpdateEventType.Lock()
	mock.calls.UpdateEventType = append(mock.calls.UpdateEventType, callInfo)
	mock.lockUpdateEventType.Unlock()
	return mock.UpdateEventTypeFunc(ctx, eventTypeID, param)
}

// UpdateEventTypeCalls gets all the calls that were made to UpdateEventType.
// Check the length with:
//
//	len(mockedStore.UpdateEventTypeCalls())
func (mock *StoreMock) UpdateEventTypeCalls() []struct {
	Ctx         context.Context
	EventTypeID uuid.UUID
	Param       parameter.UpdateEventTypeParams
} {
	var calls []struct {
		Ctx         context.Context
		EventTypeID uuid.UUID
		Param       parameter.UpdateEventTypeParams
	}
	mock.lockUpdateEventType.RLock()
	calls = mock.calls.UpdateEventType
	mock.lockUpdateEventType.RUnlock()
	return calls
}

// UpdateEventTypeByKey calls UpdateEventTypeByKeyFunc.
func (mock *StoreMock) UpdateEventTypeByKey(ctx context.Context, key string, param parameter.UpdateEventTypeByKeyParams) (entity.EventType, error) {
	if mock.UpdateEventTypeByKeyFunc == nil {
		panic("StoreMock.UpdateEventTypeByKeyFunc: method is nil but Store.UpdateEventTypeByKey was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Key   string
		Param parameter.UpdateEventTypeByKeyParams
	}{
		Ctx:   ctx,
		Key:   key,
		Param: param,
	}
	mock.lockUpdateEventTypeByKey.Lock()
	mock.calls.UpdateEventTypeByKey = append(mock.calls.UpdateEventTypeByKey, callInfo)
	mock.lockUpdateEventTypeByKey.Unlock()
	return mock.UpdateEventTypeByKeyFunc(ctx, key, param)
}

// UpdateEventTypeByKeyCalls gets all the calls that were made to UpdateEventTypeByKey.
// Check the length with:
//
//	len(mockedStore.UpdateEventTypeByKeyCalls())
func (mock *StoreMock) UpdateEventTypeByKeyCalls() []struct {
	Ctx   context.Context
	Key   string
	Param parameter.UpdateEventTypeByKeyParams
} {
	var calls []struct {
		Ctx   context.Context
		Key   string
		Param parameter.UpdateEventTypeByKeyParams
	}
	mock.lockUpdateEventTypeByKey.RLock()
	calls = mock.calls.UpdateEventTypeByKey
	mock.lockUpdateEventTypeByKey.RUnlock()
	return calls
}

// UpdateEventTypeByKeyWithSd calls UpdateEventTypeByKeyWithSdFunc.
func (mock *StoreMock) UpdateEventTypeByKeyWithSd(ctx context.Context, sd Sd, key string, param parameter.UpdateEventTypeByKeyParams) (entity.EventType, error) {
	if mock.UpdateEventTypeByKeyWithSdFunc == nil {
		panic("StoreMock.UpdateEventTypeByKeyWithSdFunc: method is nil but Store.UpdateEventTypeByKeyWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Key   string
		Param parameter.UpdateEventTypeByKeyParams
	}{
		Ctx:   ctx,
		Sd:    sd,
		Key:   key,
		Param: param,
	}
	mock.lockUpdateEventTypeByKeyWithSd.Lock()
	mock.calls.UpdateEventTypeByKeyWithSd = append(mock.calls.UpdateEventTypeByKeyWithSd, callInfo)
	mock.lockUpdateEventTypeByKeyWithSd.Unlock()
	return mock.UpdateEventTypeByKeyWithSdFunc(ctx, sd, key, param)
}

// UpdateEventTypeByKeyWithSdCalls gets all the calls that were made to UpdateEventTypeByKeyWithSd.
// Check the length with:
//
//	len(mockedStore.UpdateEventTypeByKeyWithSdCalls())
func (mock *StoreMock) UpdateEventTypeByKeyWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Key   string
	Param parameter.UpdateEventTypeByKeyParams
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Key   string
		Param parameter.UpdateEventTypeByKeyParams
	}
	mock.lockUpdateEventTypeByKeyWithSd.RLock()
	calls = mock.calls.UpdateEventTypeByKeyWithSd
	mock.lockUpdateEventTypeByKeyWithSd.RUnlock()
	return calls
}

// UpdateEventTypeWithSd calls UpdateEventTypeWithSdFunc.
func (mock *StoreMock) UpdateEventTypeWithSd(ctx context.Context, sd Sd, eventTypeID uuid.UUID, param parameter.UpdateEventTypeParams) (entity.EventType, error) {
	if mock.UpdateEventTypeWithSdFunc == nil {
		panic("StoreMock.UpdateEventTypeWithSdFunc: method is nil but Store.UpdateEventTypeWithSd was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Sd          Sd
		EventTypeID uuid.UUID
		Param       parameter.UpdateEventTypeParams
	}{
		Ctx:         ctx,
		Sd:          sd,
		EventTypeID: eventTypeID,
		Param:       param,
	}
	mock.lockUpdateEventTypeWithSd.Lock()
	mock.calls.UpdateEventTypeWithSd = append(mock.calls.UpdateEventTypeWithSd, callInfo)
	mock.lockUpdateEventTypeWithSd.Unlock()
	return mock.UpdateEventTypeWithSdFunc(ctx, sd, eventTypeID, param)
}

// UpdateEventTypeWithSdCalls gets all the calls that were made to UpdateEventTypeWithSd.
// Check the length with:
//
//	len(mockedStore.UpdateEventTypeWithSdCalls())
func (mock *StoreMock) UpdateEventTypeWithSdCalls() []struct {
	Ctx         context.Context
	Sd          Sd
	EventTypeID uuid.UUID
	Param       parameter.UpdateEventTypeParams
} {
	var calls []struct {
		Ctx         context.Context
		Sd          Sd
		EventTypeID uuid.UUID
		Param       parameter.UpdateEventTypeParams
	}
	mock.lockUpdateEventTypeWithSd.RLock()
	calls = mock.calls.UpdateEventTypeWithSd
	mock.lockUpdateEventTypeWithSd.RUnlock()
	return calls
}

// UpdateMimeType calls UpdateMimeTypeFunc.
func (mock *StoreMock) UpdateMimeType(ctx context.Context, mimeTypeID uuid.UUID, param parameter.UpdateMimeTypeParams) (entity.MimeType, error) {
	if mock.UpdateMimeTypeFunc == nil {
		panic("StoreMock.UpdateMimeTypeFunc: method is nil but Store.UpdateMimeType was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		MimeTypeID uuid.UUID
		Param      parameter.UpdateMimeTypeParams
	}{
		Ctx:        ctx,
		MimeTypeID: mimeTypeID,
		Param:      param,
	}
	mock.lockUpdateMimeType.Lock()
	mock.calls.UpdateMimeType = append(mock.calls.UpdateMimeType, callInfo)
	mock.lockUpdateMimeType.Unlock()
	return mock.UpdateMimeTypeFunc(ctx, mimeTypeID, param)
}

// UpdateMimeTypeCalls gets all the calls that were made to UpdateMimeType.
// Check the length with:
//
//	len(mockedStore.UpdateMimeTypeCalls())
func (mock *StoreMock) UpdateMimeTypeCalls() []struct {
	Ctx        context.Context
	MimeTypeID uuid.UUID
	Param      parameter.UpdateMimeTypeParams
} {
	var calls []struct {
		Ctx        context.Context
		MimeTypeID uuid.UUID
		Param      parameter.UpdateMimeTypeParams
	}
	mock.lockUpdateMimeType.RLock()
	calls = mock.calls.UpdateMimeType
	mock.lockUpdateMimeType.RUnlock()
	return calls
}

// UpdateMimeTypeByKey calls UpdateMimeTypeByKeyFunc.
func (mock *StoreMock) UpdateMimeTypeByKey(ctx context.Context, key string, param parameter.UpdateMimeTypeByKeyParams) (entity.MimeType, error) {
	if mock.UpdateMimeTypeByKeyFunc == nil {
		panic("StoreMock.UpdateMimeTypeByKeyFunc: method is nil but Store.UpdateMimeTypeByKey was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Key   string
		Param parameter.UpdateMimeTypeByKeyParams
	}{
		Ctx:   ctx,
		Key:   key,
		Param: param,
	}
	mock.lockUpdateMimeTypeByKey.Lock()
	mock.calls.UpdateMimeTypeByKey = append(mock.calls.UpdateMimeTypeByKey, callInfo)
	mock.lockUpdateMimeTypeByKey.Unlock()
	return mock.UpdateMimeTypeByKeyFunc(ctx, key, param)
}

// UpdateMimeTypeByKeyCalls gets all the calls that were made to UpdateMimeTypeByKey.
// Check the length with:
//
//	len(mockedStore.UpdateMimeTypeByKeyCalls())
func (mock *StoreMock) UpdateMimeTypeByKeyCalls() []struct {
	Ctx   context.Context
	Key   string
	Param parameter.UpdateMimeTypeByKeyParams
} {
	var calls []struct {
		Ctx   context.Context
		Key   string
		Param parameter.UpdateMimeTypeByKeyParams
	}
	mock.lockUpdateMimeTypeByKey.RLock()
	calls = mock.calls.UpdateMimeTypeByKey
	mock.lockUpdateMimeTypeByKey.RUnlock()
	return calls
}

// UpdateMimeTypeByKeyWithSd calls UpdateMimeTypeByKeyWithSdFunc.
func (mock *StoreMock) UpdateMimeTypeByKeyWithSd(ctx context.Context, sd Sd, key string, param parameter.UpdateMimeTypeByKeyParams) (entity.MimeType, error) {
	if mock.UpdateMimeTypeByKeyWithSdFunc == nil {
		panic("StoreMock.UpdateMimeTypeByKeyWithSdFunc: method is nil but Store.UpdateMimeTypeByKeyWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Key   string
		Param parameter.UpdateMimeTypeByKeyParams
	}{
		Ctx:   ctx,
		Sd:    sd,
		Key:   key,
		Param: param,
	}
	mock.lockUpdateMimeTypeByKeyWithSd.Lock()
	mock.calls.UpdateMimeTypeByKeyWithSd = append(mock.calls.UpdateMimeTypeByKeyWithSd, callInfo)
	mock.lockUpdateMimeTypeByKeyWithSd.Unlock()
	return mock.UpdateMimeTypeByKeyWithSdFunc(ctx, sd, key, param)
}

// UpdateMimeTypeByKeyWithSdCalls gets all the calls that were made to UpdateMimeTypeByKeyWithSd.
// Check the length with:
//
//	len(mockedStore.UpdateMimeTypeByKeyWithSdCalls())
func (mock *StoreMock) UpdateMimeTypeByKeyWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Key   string
	Param parameter.UpdateMimeTypeByKeyParams
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Key   string
		Param parameter.UpdateMimeTypeByKeyParams
	}
	mock.lockUpdateMimeTypeByKeyWithSd.RLock()
	calls = mock.calls.UpdateMimeTypeByKeyWithSd
	mock.lockUpdateMimeTypeByKeyWithSd.RUnlock()
	return calls
}

// UpdateMimeTypeWithSd calls UpdateMimeTypeWithSdFunc.
func (mock *StoreMock) UpdateMimeTypeWithSd(ctx context.Context, sd Sd, mimeTypeID uuid.UUID, param parameter.UpdateMimeTypeParams) (entity.MimeType, error) {
	if mock.UpdateMimeTypeWithSdFunc == nil {
		panic("StoreMock.UpdateMimeTypeWithSdFunc: method is nil but Store.UpdateMimeTypeWithSd was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Sd         Sd
		MimeTypeID uuid.UUID
		Param      parameter.UpdateMimeTypeParams
	}{
		Ctx:        ctx,
		Sd:         sd,
		MimeTypeID: mimeTypeID,
		Param:      param,
	}
	mock.lockUpdateMimeTypeWithSd.Lock()
	mock.calls.UpdateMimeTypeWithSd = append(mock.calls.UpdateMimeTypeWithSd, callInfo)
	mock.lockUpdateMimeTypeWithSd.Unlock()
	return mock.UpdateMimeTypeWithSdFunc(ctx, sd, mimeTypeID, param)
}

// UpdateMimeTypeWithSdCalls gets all the calls that were made to UpdateMimeTypeWithSd.
// Check the length with:
//
//	len(mockedStore.UpdateMimeTypeWithSdCalls())
func (mock *StoreMock) UpdateMimeTypeWithSdCalls() []struct {
	Ctx        context.Context
	Sd         Sd
	MimeTypeID uuid.UUID
	Param      parameter.UpdateMimeTypeParams
} {
	var calls []struct {
		Ctx        context.Context
		Sd         Sd
		MimeTypeID uuid.UUID
		Param      parameter.UpdateMimeTypeParams
	}
	mock.lockUpdateMimeTypeWithSd.RLock()
	calls = mock.calls.UpdateMimeTypeWithSd
	mock.lockUpdateMimeTypeWithSd.RUnlock()
	return calls
}

// UpdatePermission calls UpdatePermissionFunc.
func (mock *StoreMock) UpdatePermission(ctx context.Context, permissionID uuid.UUID, param parameter.UpdatePermissionParams) (entity.Permission, error) {
	if mock.UpdatePermissionFunc == nil {
		panic("StoreMock.UpdatePermissionFunc: method is nil but Store.UpdatePermission was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		PermissionID uuid.UUID
		Param        parameter.UpdatePermissionParams
	}{
		Ctx:          ctx,
		PermissionID: permissionID,
		Param:        param,
	}
	mock.lockUpdatePermission.Lock()
	mock.calls.UpdatePermission = append(mock.calls.UpdatePermission, callInfo)
	mock.lockUpdatePermission.Unlock()
	return mock.UpdatePermissionFunc(ctx, permissionID, param)
}

// UpdatePermissionCalls gets all the calls that were made to UpdatePermission.
// Check the length with:
//
//	len(mockedStore.UpdatePermissionCalls())
func (mock *StoreMock) UpdatePermissionCalls() []struct {
	Ctx          context.Context
	PermissionID uuid.UUID
	Param        parameter.UpdatePermissionParams
} {
	var calls []struct {
		Ctx          context.Context
		PermissionID uuid.UUID
		Param        parameter.UpdatePermissionParams
	}
	mock.lockUpdatePermission.RLock()
	calls = mock.calls.UpdatePermission
	mock.lockUpdatePermission.RUnlock()
	return calls
}

// UpdatePermissionByKey calls UpdatePermissionByKeyFunc.
func (mock *StoreMock) UpdatePermissionByKey(ctx context.Context, key string, param parameter.UpdatePermissionByKeyParams) (entity.Permission, error) {
	if mock.UpdatePermissionByKeyFunc == nil {
		panic("StoreMock.UpdatePermissionByKeyFunc: method is nil but Store.UpdatePermissionByKey was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Key   string
		Param parameter.UpdatePermissionByKeyParams
	}{
		Ctx:   ctx,
		Key:   key,
		Param: param,
	}
	mock.lockUpdatePermissionByKey.Lock()
	mock.calls.UpdatePermissionByKey = append(mock.calls.UpdatePermissionByKey, callInfo)
	mock.lockUpdatePermissionByKey.Unlock()
	return mock.UpdatePermissionByKeyFunc(ctx, key, param)
}

// UpdatePermissionByKeyCalls gets all the calls that were made to UpdatePermissionByKey.
// Check the length with:
//
//	len(mockedStore.UpdatePermissionByKeyCalls())
func (mock *StoreMock) UpdatePermissionByKeyCalls() []struct {
	Ctx   context.Context
	Key   string
	Param parameter.UpdatePermissionByKeyParams
} {
	var calls []struct {
		Ctx   context.Context
		Key   string
		Param parameter.UpdatePermissionByKeyParams
	}
	mock.lockUpdatePermissionByKey.RLock()
	calls = mock.calls.UpdatePermissionByKey
	mock.lockUpdatePermissionByKey.RUnlock()
	return calls
}

// UpdatePermissionByKeyWithSd calls UpdatePermissionByKeyWithSdFunc.
func (mock *StoreMock) UpdatePermissionByKeyWithSd(ctx context.Context, sd Sd, key string, param parameter.UpdatePermissionByKeyParams) (entity.Permission, error) {
	if mock.UpdatePermissionByKeyWithSdFunc == nil {
		panic("StoreMock.UpdatePermissionByKeyWithSdFunc: method is nil but Store.UpdatePermissionByKeyWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Key   string
		Param parameter.UpdatePermissionByKeyParams
	}{
		Ctx:   ctx,
		Sd:    sd,
		Key:   key,
		Param: param,
	}
	mock.lockUpdatePermissionByKeyWithSd.Lock()
	mock.calls.UpdatePermissionByKeyWithSd = append(mock.calls.UpdatePermissionByKeyWithSd, callInfo)
	mock.lockUpdatePermissionByKeyWithSd.Unlock()
	return mock.UpdatePermissionByKeyWithSdFunc(ctx, sd, key, param)
}

// UpdatePermissionByKeyWithSdCalls gets all the calls that were made to UpdatePermissionByKeyWithSd.
// Check the length with:
//
//	len(mockedStore.UpdatePermissionByKeyWithSdCalls())
func (mock *StoreMock) UpdatePermissionByKeyWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Key   string
	Param parameter.UpdatePermissionByKeyParams
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Key   string
		Param parameter.UpdatePermissionByKeyParams
	}
	mock.lockUpdatePermissionByKeyWithSd.RLock()
	calls = mock.calls.UpdatePermissionByKeyWithSd
	mock.lockUpdatePermissionByKeyWithSd.RUnlock()
	return calls
}

// UpdatePermissionCategory calls UpdatePermissionCategoryFunc.
func (mock *StoreMock) UpdatePermissionCategory(ctx context.Context, permissionCategoryID uuid.UUID, param parameter.UpdatePermissionCategoryParams) (entity.PermissionCategory, error) {
	if mock.UpdatePermissionCategoryFunc == nil {
		panic("StoreMock.UpdatePermissionCategoryFunc: method is nil but Store.UpdatePermissionCategory was just called")
	}
	callInfo := struct {
		Ctx                  context.Context
		PermissionCategoryID uuid.UUID
		Param                parameter.UpdatePermissionCategoryParams
	}{
		Ctx:                  ctx,
		PermissionCategoryID: permissionCategoryID,
		Param:                param,
	}
	mock.lockUpdatePermissionCategory.Lock()
	mock.calls.UpdatePermissionCategory = append(mock.calls.UpdatePermissionCategory, callInfo)
	mock.lockUpdatePermissionCategory.Unlock()
	return mock.UpdatePermissionCategoryFunc(ctx, permissionCategoryID, param)
}

// UpdatePermissionCategoryCalls gets all the calls that were made to UpdatePermissionCategory.
// Check the length with:
//
//	len(mockedStore.UpdatePermissionCategoryCalls())
func (mock *StoreMock) UpdatePermissionCategoryCalls() []struct {
	Ctx                  context.Context
	PermissionCategoryID uuid.UUID
	Param                parameter.UpdatePermissionCategoryParams
} {
	var calls []struct {
		Ctx                  context.Context
		PermissionCategoryID uuid.UUID
		Param                parameter.UpdatePermissionCategoryParams
	}
	mock.lockUpdatePermissionCategory.RLock()
	calls = mock.calls.UpdatePermissionCategory
	mock.lockUpdatePermissionCategory.RUnlock()
	return calls
}

// UpdatePermissionCategoryByKey calls UpdatePermissionCategoryByKeyFunc.
func (mock *StoreMock) UpdatePermissionCategoryByKey(ctx context.Context, key string, param parameter.UpdatePermissionCategoryByKeyParams) (entity.PermissionCategory, error) {
	if mock.UpdatePermissionCategoryByKeyFunc == nil {
		panic("StoreMock.UpdatePermissionCategoryByKeyFunc: method is nil but Store.UpdatePermissionCategoryByKey was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Key   string
		Param parameter.UpdatePermissionCategoryByKeyParams
	}{
		Ctx:   ctx,
		Key:   key,
		Param: param,
	}
	mock.lockUpdatePermissionCategoryByKey.Lock()
	mock.calls.UpdatePermissionCategoryByKey = append(mock.calls.UpdatePermissionCategoryByKey, callInfo)
	mock.lockUpdatePermissionCategoryByKey.Unlock()
	return mock.UpdatePermissionCategoryByKeyFunc(ctx, key, param)
}

// UpdatePermissionCategoryByKeyCalls gets all the calls that were made to UpdatePermissionCategoryByKey.
// Check the length with:
//
//	len(mockedStore.UpdatePermissionCategoryByKeyCalls())
func (mock *StoreMock) UpdatePermissionCategoryByKeyCalls() []struct {
	Ctx   context.Context
	Key   string
	Param parameter.UpdatePermissionCategoryByKeyParams
} {
	var calls []struct {
		Ctx   context.Context
		Key   string
		Param parameter.UpdatePermissionCategoryByKeyParams
	}
	mock.lockUpdatePermissionCategoryByKey.RLock()
	calls = mock.calls.UpdatePermissionCategoryByKey
	mock.lockUpdatePermissionCategoryByKey.RUnlock()
	return calls
}

// UpdatePermissionCategoryByKeyWithSd calls UpdatePermissionCategoryByKeyWithSdFunc.
func (mock *StoreMock) UpdatePermissionCategoryByKeyWithSd(ctx context.Context, sd Sd, key string, param parameter.UpdatePermissionCategoryByKeyParams) (entity.PermissionCategory, error) {
	if mock.UpdatePermissionCategoryByKeyWithSdFunc == nil {
		panic("StoreMock.UpdatePermissionCategoryByKeyWithSdFunc: method is nil but Store.UpdatePermissionCategoryByKeyWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Key   string
		Param parameter.UpdatePermissionCategoryByKeyParams
	}{
		Ctx:   ctx,
		Sd:    sd,
		Key:   key,
		Param: param,
	}
	mock.lockUpdatePermissionCategoryByKeyWithSd.Lock()
	mock.calls.UpdatePermissionCategoryByKeyWithSd = append(mock.calls.UpdatePermissionCategoryByKeyWithSd, callInfo)
	mock.lockUpdatePermissionCategoryByKeyWithSd.Unlock()
	return mock.UpdatePermissionCategoryByKeyWithSdFunc(ctx, sd, key, param)
}

// UpdatePermissionCategoryByKeyWithSdCalls gets all the calls that were made to UpdatePermissionCategoryByKeyWithSd.
// Check the length with:
//
//	len(mockedStore.UpdatePermissionCategoryByKeyWithSdCalls())
func (mock *StoreMock) UpdatePermissionCategoryByKeyWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Key   string
	Param parameter.UpdatePermissionCategoryByKeyParams
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Key   string
		Param parameter.UpdatePermissionCategoryByKeyParams
	}
	mock.lockUpdatePermissionCategoryByKeyWithSd.RLock()
	calls = mock.calls.UpdatePermissionCategoryByKeyWithSd
	mock.lockUpdatePermissionCategoryByKeyWithSd.RUnlock()
	return calls
}

// UpdatePermissionCategoryWithSd calls UpdatePermissionCategoryWithSdFunc.
func (mock *StoreMock) UpdatePermissionCategoryWithSd(ctx context.Context, sd Sd, permissionCategoryID uuid.UUID, param parameter.UpdatePermissionCategoryParams) (entity.PermissionCategory, error) {
	if mock.UpdatePermissionCategoryWithSdFunc == nil {
		panic("StoreMock.UpdatePermissionCategoryWithSdFunc: method is nil but Store.UpdatePermissionCategoryWithSd was just called")
	}
	callInfo := struct {
		Ctx                  context.Context
		Sd                   Sd
		PermissionCategoryID uuid.UUID
		Param                parameter.UpdatePermissionCategoryParams
	}{
		Ctx:                  ctx,
		Sd:                   sd,
		PermissionCategoryID: permissionCategoryID,
		Param:                param,
	}
	mock.lockUpdatePermissionCategoryWithSd.Lock()
	mock.calls.UpdatePermissionCategoryWithSd = append(mock.calls.UpdatePermissionCategoryWithSd, callInfo)
	mock.lockUpdatePermissionCategoryWithSd.Unlock()
	return mock.UpdatePermissionCategoryWithSdFunc(ctx, sd, permissionCategoryID, param)
}

// UpdatePermissionCategoryWithSdCalls gets all the calls that were made to UpdatePermissionCategoryWithSd.
// Check the length with:
//
//	len(mockedStore.UpdatePermissionCategoryWithSdCalls())
func (mock *StoreMock) UpdatePermissionCategoryWithSdCalls() []struct {
	Ctx                  context.Context
	Sd                   Sd
	PermissionCategoryID uuid.UUID
	Param                parameter.UpdatePermissionCategoryParams
} {
	var calls []struct {
		Ctx                  context.Context
		Sd                   Sd
		PermissionCategoryID uuid.UUID
		Param                parameter.UpdatePermissionCategoryParams
	}
	mock.lockUpdatePermissionCategoryWithSd.RLock()
	calls = mock.calls.UpdatePermissionCategoryWithSd
	mock.lockUpdatePermissionCategoryWithSd.RUnlock()
	return calls
}

// UpdatePermissionWithSd calls UpdatePermissionWithSdFunc.
func (mock *StoreMock) UpdatePermissionWithSd(ctx context.Context, sd Sd, permissionID uuid.UUID, param parameter.UpdatePermissionParams) (entity.Permission, error) {
	if mock.UpdatePermissionWithSdFunc == nil {
		panic("StoreMock.UpdatePermissionWithSdFunc: method is nil but Store.UpdatePermissionWithSd was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		Sd           Sd
		PermissionID uuid.UUID
		Param        parameter.UpdatePermissionParams
	}{
		Ctx:          ctx,
		Sd:           sd,
		PermissionID: permissionID,
		Param:        param,
	}
	mock.lockUpdatePermissionWithSd.Lock()
	mock.calls.UpdatePermissionWithSd = append(mock.calls.UpdatePermissionWithSd, callInfo)
	mock.lockUpdatePermissionWithSd.Unlock()
	return mock.UpdatePermissionWithSdFunc(ctx, sd, permissionID, param)
}

// UpdatePermissionWithSdCalls gets all the calls that were made to UpdatePermissionWithSd.
// Check the length with:
//
//	len(mockedStore.UpdatePermissionWithSdCalls())
func (mock *StoreMock) UpdatePermissionWithSdCalls() []struct {
	Ctx          context.Context
	Sd           Sd
	PermissionID uuid.UUID
	Param        parameter.UpdatePermissionParams
} {
	var calls []struct {
		Ctx          context.Context
		Sd           Sd
		PermissionID uuid.UUID
		Param        parameter.UpdatePermissionParams
	}
	mock.lockUpdatePermissionWithSd.RLock()
	calls = mock.calls.UpdatePermissionWithSd
	mock.lockUpdatePermissionWithSd.RUnlock()
	return calls
}

// UpdatePolicy calls UpdatePolicyFunc.
func (mock *StoreMock) UpdatePolicy(ctx context.Context, policyID uuid.UUID, param parameter.UpdatePolicyParams) (entity.Policy, error) {
	if mock.UpdatePolicyFunc == nil {
		panic("StoreMock.UpdatePolicyFunc: method is nil but Store.UpdatePolicy was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		PolicyID uuid.UUID
		Param    parameter.UpdatePolicyParams
	}{
		Ctx:      ctx,
		PolicyID: policyID,
		Param:    param,
	}
	mock.lockUpdatePolicy.Lock()
	mock.calls.UpdatePolicy = append(mock.calls.UpdatePolicy, callInfo)
	mock.lockUpdatePolicy.Unlock()
	return mock.UpdatePolicyFunc(ctx, policyID, param)
}

// UpdatePolicyCalls gets all the calls that were made to UpdatePolicy.
// Check the length with:
//
//	len(mockedStore.UpdatePolicyCalls())
func (mock *StoreMock) UpdatePolicyCalls() []struct {
	Ctx      context.Context
	PolicyID uuid.UUID
	Param    parameter.UpdatePolicyParams
} {
	var calls []struct {
		Ctx      context.Context
		PolicyID uuid.UUID
		Param    parameter.UpdatePolicyParams
	}
	mock.lockUpdatePolicy.RLock()
	calls = mock.calls.UpdatePolicy
	mock.lockUpdatePolicy.RUnlock()
	return calls
}

// UpdatePolicyByKey calls UpdatePolicyByKeyFunc.
func (mock *StoreMock) UpdatePolicyByKey(ctx context.Context, key string, param parameter.UpdatePolicyByKeyParams) (entity.Policy, error) {
	if mock.UpdatePolicyByKeyFunc == nil {
		panic("StoreMock.UpdatePolicyByKeyFunc: method is nil but Store.UpdatePolicyByKey was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Key   string
		Param parameter.UpdatePolicyByKeyParams
	}{
		Ctx:   ctx,
		Key:   key,
		Param: param,
	}
	mock.lockUpdatePolicyByKey.Lock()
	mock.calls.UpdatePolicyByKey = append(mock.calls.UpdatePolicyByKey, callInfo)
	mock.lockUpdatePolicyByKey.Unlock()
	return mock.UpdatePolicyByKeyFunc(ctx, key, param)
}

// UpdatePolicyByKeyCalls gets all the calls that were made to UpdatePolicyByKey.
// Check the length with:
//
//	len(mockedStore.UpdatePolicyByKeyCalls())
func (mock *StoreMock) UpdatePolicyByKeyCalls() []struct {
	Ctx   context.Context
	Key   string
	Param parameter.UpdatePolicyByKeyParams
} {
	var calls []struct {
		Ctx   context.Context
		Key   string
		Param parameter.UpdatePolicyByKeyParams
	}
	mock.lockUpdatePolicyByKey.RLock()
	calls = mock.calls.UpdatePolicyByKey
	mock.lockUpdatePolicyByKey.RUnlock()
	return calls
}

// UpdatePolicyByKeyWithSd calls UpdatePolicyByKeyWithSdFunc.
func (mock *StoreMock) UpdatePolicyByKeyWithSd(ctx context.Context, sd Sd, key string, param parameter.UpdatePolicyByKeyParams) (entity.Policy, error) {
	if mock.UpdatePolicyByKeyWithSdFunc == nil {
		panic("StoreMock.UpdatePolicyByKeyWithSdFunc: method is nil but Store.UpdatePolicyByKeyWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Key   string
		Param parameter.UpdatePolicyByKeyParams
	}{
		Ctx:   ctx,
		Sd:    sd,
		Key:   key,
		Param: param,
	}
	mock.lockUpdatePolicyByKeyWithSd.Lock()
	mock.calls.UpdatePolicyByKeyWithSd = append(mock.calls.UpdatePolicyByKeyWithSd, callInfo)
	mock.lockUpdatePolicyByKeyWithSd.Unlock()
	return mock.UpdatePolicyByKeyWithSdFunc(ctx, sd, key, param)
}

// UpdatePolicyByKeyWithSdCalls gets all the calls that were made to UpdatePolicyByKeyWithSd.
// Check the length with:
//
//	len(mockedStore.UpdatePolicyByKeyWithSdCalls())
func (mock *StoreMock) UpdatePolicyByKeyWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Key   string
	Param parameter.UpdatePolicyByKeyParams
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Key   string
		Param parameter.UpdatePolicyByKeyParams
	}
	mock.lockUpdatePolicyByKeyWithSd.RLock()
	calls = mock.calls.UpdatePolicyByKeyWithSd
	mock.lockUpdatePolicyByKeyWithSd.RUnlock()
	return calls
}

// UpdatePolicyCategory calls UpdatePolicyCategoryFunc.
func (mock *StoreMock) UpdatePolicyCategory(ctx context.Context, policyCategoryID uuid.UUID, param parameter.UpdatePolicyCategoryParams) (entity.PolicyCategory, error) {
	if mock.UpdatePolicyCategoryFunc == nil {
		panic("StoreMock.UpdatePolicyCategoryFunc: method is nil but Store.UpdatePolicyCategory was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		PolicyCategoryID uuid.UUID
		Param            parameter.UpdatePolicyCategoryParams
	}{
		Ctx:              ctx,
		PolicyCategoryID: policyCategoryID,
		Param:            param,
	}
	mock.lockUpdatePolicyCategory.Lock()
	mock.calls.UpdatePolicyCategory = append(mock.calls.UpdatePolicyCategory, callInfo)
	mock.lockUpdatePolicyCategory.Unlock()
	return mock.UpdatePolicyCategoryFunc(ctx, policyCategoryID, param)
}

// UpdatePolicyCategoryCalls gets all the calls that were made to UpdatePolicyCategory.
// Check the length with:
//
//	len(mockedStore.UpdatePolicyCategoryCalls())
func (mock *StoreMock) UpdatePolicyCategoryCalls() []struct {
	Ctx              context.Context
	PolicyCategoryID uuid.UUID
	Param            parameter.UpdatePolicyCategoryParams
} {
	var calls []struct {
		Ctx              context.Context
		PolicyCategoryID uuid.UUID
		Param            parameter.UpdatePolicyCategoryParams
	}
	mock.lockUpdatePolicyCategory.RLock()
	calls = mock.calls.UpdatePolicyCategory
	mock.lockUpdatePolicyCategory.RUnlock()
	return calls
}

// UpdatePolicyCategoryByKey calls UpdatePolicyCategoryByKeyFunc.
func (mock *StoreMock) UpdatePolicyCategoryByKey(ctx context.Context, key string, param parameter.UpdatePolicyCategoryByKeyParams) (entity.PolicyCategory, error) {
	if mock.UpdatePolicyCategoryByKeyFunc == nil {
		panic("StoreMock.UpdatePolicyCategoryByKeyFunc: method is nil but Store.UpdatePolicyCategoryByKey was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Key   string
		Param parameter.UpdatePolicyCategoryByKeyParams
	}{
		Ctx:   ctx,
		Key:   key,
		Param: param,
	}
	mock.lockUpdatePolicyCategoryByKey.Lock()
	mock.calls.UpdatePolicyCategoryByKey = append(mock.calls.UpdatePolicyCategoryByKey, callInfo)
	mock.lockUpdatePolicyCategoryByKey.Unlock()
	return mock.UpdatePolicyCategoryByKeyFunc(ctx, key, param)
}

// UpdatePolicyCategoryByKeyCalls gets all the calls that were made to UpdatePolicyCategoryByKey.
// Check the length with:
//
//	len(mockedStore.UpdatePolicyCategoryByKeyCalls())
func (mock *StoreMock) UpdatePolicyCategoryByKeyCalls() []struct {
	Ctx   context.Context
	Key   string
	Param parameter.UpdatePolicyCategoryByKeyParams
} {
	var calls []struct {
		Ctx   context.Context
		Key   string
		Param parameter.UpdatePolicyCategoryByKeyParams
	}
	mock.lockUpdatePolicyCategoryByKey.RLock()
	calls = mock.calls.UpdatePolicyCategoryByKey
	mock.lockUpdatePolicyCategoryByKey.RUnlock()
	return calls
}

// UpdatePolicyCategoryByKeyWithSd calls UpdatePolicyCategoryByKeyWithSdFunc.
func (mock *StoreMock) UpdatePolicyCategoryByKeyWithSd(ctx context.Context, sd Sd, key string, param parameter.UpdatePolicyCategoryByKeyParams) (entity.PolicyCategory, error) {
	if mock.UpdatePolicyCategoryByKeyWithSdFunc == nil {
		panic("StoreMock.UpdatePolicyCategoryByKeyWithSdFunc: method is nil but Store.UpdatePolicyCategoryByKeyWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Key   string
		Param parameter.UpdatePolicyCategoryByKeyParams
	}{
		Ctx:   ctx,
		Sd:    sd,
		Key:   key,
		Param: param,
	}
	mock.lockUpdatePolicyCategoryByKeyWithSd.Lock()
	mock.calls.UpdatePolicyCategoryByKeyWithSd = append(mock.calls.UpdatePolicyCategoryByKeyWithSd, callInfo)
	mock.lockUpdatePolicyCategoryByKeyWithSd.Unlock()
	return mock.UpdatePolicyCategoryByKeyWithSdFunc(ctx, sd, key, param)
}

// UpdatePolicyCategoryByKeyWithSdCalls gets all the calls that were made to UpdatePolicyCategoryByKeyWithSd.
// Check the length with:
//
//	len(mockedStore.UpdatePolicyCategoryByKeyWithSdCalls())
func (mock *StoreMock) UpdatePolicyCategoryByKeyWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Key   string
	Param parameter.UpdatePolicyCategoryByKeyParams
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Key   string
		Param parameter.UpdatePolicyCategoryByKeyParams
	}
	mock.lockUpdatePolicyCategoryByKeyWithSd.RLock()
	calls = mock.calls.UpdatePolicyCategoryByKeyWithSd
	mock.lockUpdatePolicyCategoryByKeyWithSd.RUnlock()
	return calls
}

// UpdatePolicyCategoryWithSd calls UpdatePolicyCategoryWithSdFunc.
func (mock *StoreMock) UpdatePolicyCategoryWithSd(ctx context.Context, sd Sd, policyCategoryID uuid.UUID, param parameter.UpdatePolicyCategoryParams) (entity.PolicyCategory, error) {
	if mock.UpdatePolicyCategoryWithSdFunc == nil {
		panic("StoreMock.UpdatePolicyCategoryWithSdFunc: method is nil but Store.UpdatePolicyCategoryWithSd was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		Sd               Sd
		PolicyCategoryID uuid.UUID
		Param            parameter.UpdatePolicyCategoryParams
	}{
		Ctx:              ctx,
		Sd:               sd,
		PolicyCategoryID: policyCategoryID,
		Param:            param,
	}
	mock.lockUpdatePolicyCategoryWithSd.Lock()
	mock.calls.UpdatePolicyCategoryWithSd = append(mock.calls.UpdatePolicyCategoryWithSd, callInfo)
	mock.lockUpdatePolicyCategoryWithSd.Unlock()
	return mock.UpdatePolicyCategoryWithSdFunc(ctx, sd, policyCategoryID, param)
}

// UpdatePolicyCategoryWithSdCalls gets all the calls that were made to UpdatePolicyCategoryWithSd.
// Check the length with:
//
//	len(mockedStore.UpdatePolicyCategoryWithSdCalls())
func (mock *StoreMock) UpdatePolicyCategoryWithSdCalls() []struct {
	Ctx              context.Context
	Sd               Sd
	PolicyCategoryID uuid.UUID
	Param            parameter.UpdatePolicyCategoryParams
} {
	var calls []struct {
		Ctx              context.Context
		Sd               Sd
		PolicyCategoryID uuid.UUID
		Param            parameter.UpdatePolicyCategoryParams
	}
	mock.lockUpdatePolicyCategoryWithSd.RLock()
	calls = mock.calls.UpdatePolicyCategoryWithSd
	mock.lockUpdatePolicyCategoryWithSd.RUnlock()
	return calls
}

// UpdatePolicyWithSd calls UpdatePolicyWithSdFunc.
func (mock *StoreMock) UpdatePolicyWithSd(ctx context.Context, sd Sd, policyID uuid.UUID, param parameter.UpdatePolicyParams) (entity.Policy, error) {
	if mock.UpdatePolicyWithSdFunc == nil {
		panic("StoreMock.UpdatePolicyWithSdFunc: method is nil but Store.UpdatePolicyWithSd was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Sd       Sd
		PolicyID uuid.UUID
		Param    parameter.UpdatePolicyParams
	}{
		Ctx:      ctx,
		Sd:       sd,
		PolicyID: policyID,
		Param:    param,
	}
	mock.lockUpdatePolicyWithSd.Lock()
	mock.calls.UpdatePolicyWithSd = append(mock.calls.UpdatePolicyWithSd, callInfo)
	mock.lockUpdatePolicyWithSd.Unlock()
	return mock.UpdatePolicyWithSdFunc(ctx, sd, policyID, param)
}

// UpdatePolicyWithSdCalls gets all the calls that were made to UpdatePolicyWithSd.
// Check the length with:
//
//	len(mockedStore.UpdatePolicyWithSdCalls())
func (mock *StoreMock) UpdatePolicyWithSdCalls() []struct {
	Ctx      context.Context
	Sd       Sd
	PolicyID uuid.UUID
	Param    parameter.UpdatePolicyParams
} {
	var calls []struct {
		Ctx      context.Context
		Sd       Sd
		PolicyID uuid.UUID
		Param    parameter.UpdatePolicyParams
	}
	mock.lockUpdatePolicyWithSd.RLock()
	calls = mock.calls.UpdatePolicyWithSd
	mock.lockUpdatePolicyWithSd.RUnlock()
	return calls
}

// UpdateRecordType calls UpdateRecordTypeFunc.
func (mock *StoreMock) UpdateRecordType(ctx context.Context, recordTypeID uuid.UUID, param parameter.UpdateRecordTypeParams) (entity.RecordType, error) {
	if mock.UpdateRecordTypeFunc == nil {
		panic("StoreMock.UpdateRecordTypeFunc: method is nil but Store.UpdateRecordType was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		RecordTypeID uuid.UUID
		Param        parameter.UpdateRecordTypeParams
	}{
		Ctx:          ctx,
		RecordTypeID: recordTypeID,
		Param:        param,
	}
	mock.lockUpdateRecordType.Lock()
	mock.calls.UpdateRecordType = append(mock.calls.UpdateRecordType, callInfo)
	mock.lockUpdateRecordType.Unlock()
	return mock.UpdateRecordTypeFunc(ctx, recordTypeID, param)
}

// UpdateRecordTypeCalls gets all the calls that were made to UpdateRecordType.
// Check the length with:
//
//	len(mockedStore.UpdateRecordTypeCalls())
func (mock *StoreMock) UpdateRecordTypeCalls() []struct {
	Ctx          context.Context
	RecordTypeID uuid.UUID
	Param        parameter.UpdateRecordTypeParams
} {
	var calls []struct {
		Ctx          context.Context
		RecordTypeID uuid.UUID
		Param        parameter.UpdateRecordTypeParams
	}
	mock.lockUpdateRecordType.RLock()
	calls = mock.calls.UpdateRecordType
	mock.lockUpdateRecordType.RUnlock()
	return calls
}

// UpdateRecordTypeByKey calls UpdateRecordTypeByKeyFunc.
func (mock *StoreMock) UpdateRecordTypeByKey(ctx context.Context, key string, param parameter.UpdateRecordTypeByKeyParams) (entity.RecordType, error) {
	if mock.UpdateRecordTypeByKeyFunc == nil {
		panic("StoreMock.UpdateRecordTypeByKeyFunc: method is nil but Store.UpdateRecordTypeByKey was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Key   string
		Param parameter.UpdateRecordTypeByKeyParams
	}{
		Ctx:   ctx,
		Key:   key,
		Param: param,
	}
	mock.lockUpdateRecordTypeByKey.Lock()
	mock.calls.UpdateRecordTypeByKey = append(mock.calls.UpdateRecordTypeByKey, callInfo)
	mock.lockUpdateRecordTypeByKey.Unlock()
	return mock.UpdateRecordTypeByKeyFunc(ctx, key, param)
}

// UpdateRecordTypeByKeyCalls gets all the calls that were made to UpdateRecordTypeByKey.
// Check the length with:
//
//	len(mockedStore.UpdateRecordTypeByKeyCalls())
func (mock *StoreMock) UpdateRecordTypeByKeyCalls() []struct {
	Ctx   context.Context
	Key   string
	Param parameter.UpdateRecordTypeByKeyParams
} {
	var calls []struct {
		Ctx   context.Context
		Key   string
		Param parameter.UpdateRecordTypeByKeyParams
	}
	mock.lockUpdateRecordTypeByKey.RLock()
	calls = mock.calls.UpdateRecordTypeByKey
	mock.lockUpdateRecordTypeByKey.RUnlock()
	return calls
}

// UpdateRecordTypeByKeyWithSd calls UpdateRecordTypeByKeyWithSdFunc.
func (mock *StoreMock) UpdateRecordTypeByKeyWithSd(ctx context.Context, sd Sd, key string, param parameter.UpdateRecordTypeByKeyParams) (entity.RecordType, error) {
	if mock.UpdateRecordTypeByKeyWithSdFunc == nil {
		panic("StoreMock.UpdateRecordTypeByKeyWithSdFunc: method is nil but Store.UpdateRecordTypeByKeyWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Key   string
		Param parameter.UpdateRecordTypeByKeyParams
	}{
		Ctx:   ctx,
		Sd:    sd,
		Key:   key,
		Param: param,
	}
	mock.lockUpdateRecordTypeByKeyWithSd.Lock()
	mock.calls.UpdateRecordTypeByKeyWithSd = append(mock.calls.UpdateRecordTypeByKeyWithSd, callInfo)
	mock.lockUpdateRecordTypeByKeyWithSd.Unlock()
	return mock.UpdateRecordTypeByKeyWithSdFunc(ctx, sd, key, param)
}

// UpdateRecordTypeByKeyWithSdCalls gets all the calls that were made to UpdateRecordTypeByKeyWithSd.
// Check the length with:
//
//	len(mockedStore.UpdateRecordTypeByKeyWithSdCalls())
func (mock *StoreMock) UpdateRecordTypeByKeyWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Key   string
	Param parameter.UpdateRecordTypeByKeyParams
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Key   string
		Param parameter.UpdateRecordTypeByKeyParams
	}
	mock.lockUpdateRecordTypeByKeyWithSd.RLock()
	calls = mock.calls.UpdateRecordTypeByKeyWithSd
	mock.lockUpdateRecordTypeByKeyWithSd.RUnlock()
	return calls
}

// UpdateRecordTypeWithSd calls UpdateRecordTypeWithSdFunc.
func (mock *StoreMock) UpdateRecordTypeWithSd(ctx context.Context, sd Sd, recordTypeID uuid.UUID, param parameter.UpdateRecordTypeParams) (entity.RecordType, error) {
	if mock.UpdateRecordTypeWithSdFunc == nil {
		panic("StoreMock.UpdateRecordTypeWithSdFunc: method is nil but Store.UpdateRecordTypeWithSd was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		Sd           Sd
		RecordTypeID uuid.UUID
		Param        parameter.UpdateRecordTypeParams
	}{
		Ctx:          ctx,
		Sd:           sd,
		RecordTypeID: recordTypeID,
		Param:        param,
	}
	mock.lockUpdateRecordTypeWithSd.Lock()
	mock.calls.UpdateRecordTypeWithSd = append(mock.calls.UpdateRecordTypeWithSd, callInfo)
	mock.lockUpdateRecordTypeWithSd.Unlock()
	return mock.UpdateRecordTypeWithSdFunc(ctx, sd, recordTypeID, param)
}

// UpdateRecordTypeWithSdCalls gets all the calls that were made to UpdateRecordTypeWithSd.
// Check the length with:
//
//	len(mockedStore.UpdateRecordTypeWithSdCalls())
func (mock *StoreMock) UpdateRecordTypeWithSdCalls() []struct {
	Ctx          context.Context
	Sd           Sd
	RecordTypeID uuid.UUID
	Param        parameter.UpdateRecordTypeParams
} {
	var calls []struct {
		Ctx          context.Context
		Sd           Sd
		RecordTypeID uuid.UUID
		Param        parameter.UpdateRecordTypeParams
	}
	mock.lockUpdateRecordTypeWithSd.RLock()
	calls = mock.calls.UpdateRecordTypeWithSd
	mock.lockUpdateRecordTypeWithSd.RUnlock()
	return calls
}
