// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: attachable_item.sql

package query

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const countAttachableItems = `-- name: CountAttachableItems :one
SELECT COUNT(*) FROM t_attachable_items
`

func (q *Queries) CountAttachableItems(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countAttachableItems)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countAttachableItemsByMimeTypeID = `-- name: CountAttachableItemsByMimeTypeID :one
SELECT COUNT(*) FROM t_attachable_items WHERE mime_type_id = $1
`

func (q *Queries) CountAttachableItemsByMimeTypeID(ctx context.Context, mimeTypeID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countAttachableItemsByMimeTypeID, mimeTypeID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAttachableItem = `-- name: CreateAttachableItem :one
INSERT INTO t_attachable_items (size, mime_type_id) VALUES ($1, $2) RETURNING t_attachable_items_pkey, attachable_item_id, size, mime_type_id
`

type CreateAttachableItemParams struct {
	Size       pgtype.Float8 `json:"size"`
	MimeTypeID uuid.UUID     `json:"mime_type_id"`
}

func (q *Queries) CreateAttachableItem(ctx context.Context, arg CreateAttachableItemParams) (AttachableItem, error) {
	row := q.db.QueryRow(ctx, createAttachableItem, arg.Size, arg.MimeTypeID)
	var i AttachableItem
	err := row.Scan(
		&i.TAttachableItemsPkey,
		&i.AttachableItemID,
		&i.Size,
		&i.MimeTypeID,
	)
	return i, err
}

type CreateAttachableItemsParams struct {
	Size       pgtype.Float8 `json:"size"`
	MimeTypeID uuid.UUID     `json:"mime_type_id"`
}

const deleteAttachableItem = `-- name: DeleteAttachableItem :exec
DELETE FROM t_attachable_items WHERE attachable_item_id = $1
`

func (q *Queries) DeleteAttachableItem(ctx context.Context, attachableItemID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteAttachableItem, attachableItemID)
	return err
}

const findAttachableItemByID = `-- name: FindAttachableItemByID :one
SELECT t_attachable_items_pkey, attachable_item_id, size, mime_type_id FROM t_attachable_items WHERE attachable_item_id = $1
`

func (q *Queries) FindAttachableItemByID(ctx context.Context, attachableItemID uuid.UUID) (AttachableItem, error) {
	row := q.db.QueryRow(ctx, findAttachableItemByID, attachableItemID)
	var i AttachableItem
	err := row.Scan(
		&i.TAttachableItemsPkey,
		&i.AttachableItemID,
		&i.Size,
		&i.MimeTypeID,
	)
	return i, err
}

const findAttachableItemByIDWithMimeType = `-- name: FindAttachableItemByIDWithMimeType :one
SELECT t_attachable_items.t_attachable_items_pkey, t_attachable_items.attachable_item_id, t_attachable_items.size, t_attachable_items.mime_type_id, m_mime_types.m_mime_types_pkey, m_mime_types.mime_type_id, m_mime_types.name, m_mime_types.key FROM t_attachable_items
INNER JOIN m_mime_types ON t_attachable_items.mime_type_id = m_mime_types.mime_type_id
WHERE attachable_item_id = $1
`

type FindAttachableItemByIDWithMimeTypeRow struct {
	AttachableItem AttachableItem `json:"attachable_item"`
	MimeType       MimeType       `json:"mime_type"`
}

func (q *Queries) FindAttachableItemByIDWithMimeType(ctx context.Context, attachableItemID uuid.UUID) (FindAttachableItemByIDWithMimeTypeRow, error) {
	row := q.db.QueryRow(ctx, findAttachableItemByIDWithMimeType, attachableItemID)
	var i FindAttachableItemByIDWithMimeTypeRow
	err := row.Scan(
		&i.AttachableItem.TAttachableItemsPkey,
		&i.AttachableItem.AttachableItemID,
		&i.AttachableItem.Size,
		&i.AttachableItem.MimeTypeID,
		&i.MimeType.MMimeTypesPkey,
		&i.MimeType.MimeTypeID,
		&i.MimeType.Name,
		&i.MimeType.Key,
	)
	return i, err
}

const getAttachableItemsByMimeTypeID = `-- name: GetAttachableItemsByMimeTypeID :many
SELECT t_attachable_items_pkey, attachable_item_id, size, mime_type_id FROM t_attachable_items WHERE mime_type_id = $1
ORDER BY
	t_attachable_items_pkey DESC
LIMIT $2 OFFSET $3
`

type GetAttachableItemsByMimeTypeIDParams struct {
	MimeTypeID uuid.UUID `json:"mime_type_id"`
	Limit      int32     `json:"limit"`
	Offset     int32     `json:"offset"`
}

func (q *Queries) GetAttachableItemsByMimeTypeID(ctx context.Context, arg GetAttachableItemsByMimeTypeIDParams) ([]AttachableItem, error) {
	rows, err := q.db.Query(ctx, getAttachableItemsByMimeTypeID, arg.MimeTypeID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AttachableItem{}
	for rows.Next() {
		var i AttachableItem
		if err := rows.Scan(
			&i.TAttachableItemsPkey,
			&i.AttachableItemID,
			&i.Size,
			&i.MimeTypeID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAttachableItemsByMimeTypeIDWithMimeType = `-- name: GetAttachableItemsByMimeTypeIDWithMimeType :many
SELECT t_attachable_items.t_attachable_items_pkey, t_attachable_items.attachable_item_id, t_attachable_items.size, t_attachable_items.mime_type_id, m_mime_types.m_mime_types_pkey, m_mime_types.mime_type_id, m_mime_types.name, m_mime_types.key FROM t_attachable_items
INNER JOIN m_mime_types ON t_attachable_items.mime_type_id = m_mime_types.mime_type_id
WHERE t_attachable_items.mime_type_id = $1
ORDER BY
	t_attachable_items_pkey DESC
LIMIT $2 OFFSET $3
`

type GetAttachableItemsByMimeTypeIDWithMimeTypeParams struct {
	MimeTypeID uuid.UUID `json:"mime_type_id"`
	Limit      int32     `json:"limit"`
	Offset     int32     `json:"offset"`
}

type GetAttachableItemsByMimeTypeIDWithMimeTypeRow struct {
	AttachableItem AttachableItem `json:"attachable_item"`
	MimeType       MimeType       `json:"mime_type"`
}

func (q *Queries) GetAttachableItemsByMimeTypeIDWithMimeType(ctx context.Context, arg GetAttachableItemsByMimeTypeIDWithMimeTypeParams) ([]GetAttachableItemsByMimeTypeIDWithMimeTypeRow, error) {
	rows, err := q.db.Query(ctx, getAttachableItemsByMimeTypeIDWithMimeType, arg.MimeTypeID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAttachableItemsByMimeTypeIDWithMimeTypeRow{}
	for rows.Next() {
		var i GetAttachableItemsByMimeTypeIDWithMimeTypeRow
		if err := rows.Scan(
			&i.AttachableItem.TAttachableItemsPkey,
			&i.AttachableItem.AttachableItemID,
			&i.AttachableItem.Size,
			&i.AttachableItem.MimeTypeID,
			&i.MimeType.MMimeTypesPkey,
			&i.MimeType.MimeTypeID,
			&i.MimeType.Name,
			&i.MimeType.Key,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
