// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: chat_room_withdraw_action.sql

package query

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const countChatRoomWithdrawActions = `-- name: CountChatRoomWithdrawActions :one
SELECT COUNT(*) FROM t_chat_room_withdraw_actions
`

func (q *Queries) CountChatRoomWithdrawActions(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countChatRoomWithdrawActions)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createChatRoomWithdrawAction = `-- name: CreateChatRoomWithdrawAction :one
INSERT INTO t_chat_room_withdraw_actions (chat_room_action_id, member_id) VALUES ($1, $2) RETURNING t_chat_room_withdraw_actions_pkey, chat_room_withdraw_action_id, chat_room_action_id, member_id
`

type CreateChatRoomWithdrawActionParams struct {
	ChatRoomActionID uuid.UUID   `json:"chat_room_action_id"`
	MemberID         pgtype.UUID `json:"member_id"`
}

func (q *Queries) CreateChatRoomWithdrawAction(ctx context.Context, arg CreateChatRoomWithdrawActionParams) (ChatRoomWithdrawAction, error) {
	row := q.db.QueryRow(ctx, createChatRoomWithdrawAction, arg.ChatRoomActionID, arg.MemberID)
	var i ChatRoomWithdrawAction
	err := row.Scan(
		&i.TChatRoomWithdrawActionsPkey,
		&i.ChatRoomWithdrawActionID,
		&i.ChatRoomActionID,
		&i.MemberID,
	)
	return i, err
}

type CreateChatRoomWithdrawActionsParams struct {
	ChatRoomActionID uuid.UUID   `json:"chat_room_action_id"`
	MemberID         pgtype.UUID `json:"member_id"`
}

const deleteChatRoomWithdrawAction = `-- name: DeleteChatRoomWithdrawAction :execrows
DELETE FROM t_chat_room_withdraw_actions WHERE chat_room_withdraw_action_id = $1
`

func (q *Queries) DeleteChatRoomWithdrawAction(ctx context.Context, chatRoomWithdrawActionID uuid.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, deleteChatRoomWithdrawAction, chatRoomWithdrawActionID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getChatRoomWithdrawActionsOnChatRoom = `-- name: GetChatRoomWithdrawActionsOnChatRoom :many
SELECT t_chat_room_withdraw_actions.t_chat_room_withdraw_actions_pkey, t_chat_room_withdraw_actions.chat_room_withdraw_action_id, t_chat_room_withdraw_actions.chat_room_action_id, t_chat_room_withdraw_actions.member_id,
m_members.name withdraw_member_name, m_members.first_name withdraw_member_first_name, m_members.last_name withdraw_member_last_name, m_members.email withdraw_member_email,
m_members.profile_image_id withdraw_member_profile_image_id
FROM t_chat_room_withdraw_actions
LEFT JOIN m_members ON t_chat_room_withdraw_actions.member_id = m_members.member_id
WHERE EXISTS (
	SELECT 1 FROM t_chat_room_actions WHERE chat_room_action_id = t_chat_room_withdraw_actions.chat_room_action_id AND t_chat_room_actions.chat_room_id = $1
)
ORDER BY
	t_chat_room_withdraw_actions_pkey ASC
`

type GetChatRoomWithdrawActionsOnChatRoomRow struct {
	TChatRoomWithdrawActionsPkey pgtype.Int8 `json:"t_chat_room_withdraw_actions_pkey"`
	ChatRoomWithdrawActionID     uuid.UUID   `json:"chat_room_withdraw_action_id"`
	ChatRoomActionID             uuid.UUID   `json:"chat_room_action_id"`
	MemberID                     pgtype.UUID `json:"member_id"`
	WithdrawMemberName           pgtype.Text `json:"withdraw_member_name"`
	WithdrawMemberFirstName      pgtype.Text `json:"withdraw_member_first_name"`
	WithdrawMemberLastName       pgtype.Text `json:"withdraw_member_last_name"`
	WithdrawMemberEmail          pgtype.Text `json:"withdraw_member_email"`
	WithdrawMemberProfileImageID pgtype.UUID `json:"withdraw_member_profile_image_id"`
}

func (q *Queries) GetChatRoomWithdrawActionsOnChatRoom(ctx context.Context, chatRoomID uuid.UUID) ([]GetChatRoomWithdrawActionsOnChatRoomRow, error) {
	rows, err := q.db.Query(ctx, getChatRoomWithdrawActionsOnChatRoom, chatRoomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetChatRoomWithdrawActionsOnChatRoomRow{}
	for rows.Next() {
		var i GetChatRoomWithdrawActionsOnChatRoomRow
		if err := rows.Scan(
			&i.TChatRoomWithdrawActionsPkey,
			&i.ChatRoomWithdrawActionID,
			&i.ChatRoomActionID,
			&i.MemberID,
			&i.WithdrawMemberName,
			&i.WithdrawMemberFirstName,
			&i.WithdrawMemberLastName,
			&i.WithdrawMemberEmail,
			&i.WithdrawMemberProfileImageID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChatRoomWithdrawActionsOnChatRoomUseKeysetPaginate = `-- name: GetChatRoomWithdrawActionsOnChatRoomUseKeysetPaginate :many
SELECT t_chat_room_withdraw_actions.t_chat_room_withdraw_actions_pkey, t_chat_room_withdraw_actions.chat_room_withdraw_action_id, t_chat_room_withdraw_actions.chat_room_action_id, t_chat_room_withdraw_actions.member_id,
m_members.name withdraw_member_name, m_members.first_name withdraw_member_first_name, m_members.last_name withdraw_member_last_name, m_members.email withdraw_member_email,
m_members.profile_image_id withdraw_member_profile_image_id
FROM t_chat_room_withdraw_actions
LEFT JOIN m_members ON t_chat_room_withdraw_actions.member_id = m_members.member_id
WHERE EXISTS (
	SELECT 1 FROM t_chat_room_actions WHERE chat_room_action_id = t_chat_room_withdraw_actions.chat_room_action_id AND chat_room_id = $1
)
AND
	CASE $3::text
		WHEN 'next' THEN
			t_chat_room_withdraw_actions_pkey > $4::int
		WHEN 'prev' THEN
			t_chat_room_withdraw_actions_pkey < $4::int
	END
ORDER BY
	CASE WHEN $3::text = 'next' THEN t_chat_room_withdraw_actions_pkey END ASC,
	CASE WHEN $3::text = 'prev' THEN t_chat_room_withdraw_actions_pkey END DESC
LIMIT $2
`

type GetChatRoomWithdrawActionsOnChatRoomUseKeysetPaginateParams struct {
	ChatRoomID      uuid.UUID `json:"chat_room_id"`
	Limit           int32     `json:"limit"`
	CursorDirection string    `json:"cursor_direction"`
	Cursor          int32     `json:"cursor"`
}

type GetChatRoomWithdrawActionsOnChatRoomUseKeysetPaginateRow struct {
	TChatRoomWithdrawActionsPkey pgtype.Int8 `json:"t_chat_room_withdraw_actions_pkey"`
	ChatRoomWithdrawActionID     uuid.UUID   `json:"chat_room_withdraw_action_id"`
	ChatRoomActionID             uuid.UUID   `json:"chat_room_action_id"`
	MemberID                     pgtype.UUID `json:"member_id"`
	WithdrawMemberName           pgtype.Text `json:"withdraw_member_name"`
	WithdrawMemberFirstName      pgtype.Text `json:"withdraw_member_first_name"`
	WithdrawMemberLastName       pgtype.Text `json:"withdraw_member_last_name"`
	WithdrawMemberEmail          pgtype.Text `json:"withdraw_member_email"`
	WithdrawMemberProfileImageID pgtype.UUID `json:"withdraw_member_profile_image_id"`
}

func (q *Queries) GetChatRoomWithdrawActionsOnChatRoomUseKeysetPaginate(ctx context.Context, arg GetChatRoomWithdrawActionsOnChatRoomUseKeysetPaginateParams) ([]GetChatRoomWithdrawActionsOnChatRoomUseKeysetPaginateRow, error) {
	rows, err := q.db.Query(ctx, getChatRoomWithdrawActionsOnChatRoomUseKeysetPaginate,
		arg.ChatRoomID,
		arg.Limit,
		arg.CursorDirection,
		arg.Cursor,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetChatRoomWithdrawActionsOnChatRoomUseKeysetPaginateRow{}
	for rows.Next() {
		var i GetChatRoomWithdrawActionsOnChatRoomUseKeysetPaginateRow
		if err := rows.Scan(
			&i.TChatRoomWithdrawActionsPkey,
			&i.ChatRoomWithdrawActionID,
			&i.ChatRoomActionID,
			&i.MemberID,
			&i.WithdrawMemberName,
			&i.WithdrawMemberFirstName,
			&i.WithdrawMemberLastName,
			&i.WithdrawMemberEmail,
			&i.WithdrawMemberProfileImageID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChatRoomWithdrawActionsOnChatRoomUseNumberedPaginate = `-- name: GetChatRoomWithdrawActionsOnChatRoomUseNumberedPaginate :many
SELECT t_chat_room_withdraw_actions.t_chat_room_withdraw_actions_pkey, t_chat_room_withdraw_actions.chat_room_withdraw_action_id, t_chat_room_withdraw_actions.chat_room_action_id, t_chat_room_withdraw_actions.member_id,
m_members.name withdraw_member_name, m_members.first_name withdraw_member_first_name, m_members.last_name withdraw_member_last_name, m_members.email withdraw_member_email,
m_members.profile_image_id withdraw_member_profile_image_id
FROM t_chat_room_withdraw_actions
LEFT JOIN m_members ON t_chat_room_withdraw_actions.member_id = m_members.member_id
WHERE EXISTS (
	SELECT 1 FROM t_chat_room_actions WHERE chat_room_action_id = t_chat_room_withdraw_actions.chat_room_action_id AND chat_room_id = $1
)
ORDER BY
	t_chat_room_withdraw_actions_pkey ASC
LIMIT $2 OFFSET $3
`

type GetChatRoomWithdrawActionsOnChatRoomUseNumberedPaginateParams struct {
	ChatRoomID uuid.UUID `json:"chat_room_id"`
	Limit      int32     `json:"limit"`
	Offset     int32     `json:"offset"`
}

type GetChatRoomWithdrawActionsOnChatRoomUseNumberedPaginateRow struct {
	TChatRoomWithdrawActionsPkey pgtype.Int8 `json:"t_chat_room_withdraw_actions_pkey"`
	ChatRoomWithdrawActionID     uuid.UUID   `json:"chat_room_withdraw_action_id"`
	ChatRoomActionID             uuid.UUID   `json:"chat_room_action_id"`
	MemberID                     pgtype.UUID `json:"member_id"`
	WithdrawMemberName           pgtype.Text `json:"withdraw_member_name"`
	WithdrawMemberFirstName      pgtype.Text `json:"withdraw_member_first_name"`
	WithdrawMemberLastName       pgtype.Text `json:"withdraw_member_last_name"`
	WithdrawMemberEmail          pgtype.Text `json:"withdraw_member_email"`
	WithdrawMemberProfileImageID pgtype.UUID `json:"withdraw_member_profile_image_id"`
}

func (q *Queries) GetChatRoomWithdrawActionsOnChatRoomUseNumberedPaginate(ctx context.Context, arg GetChatRoomWithdrawActionsOnChatRoomUseNumberedPaginateParams) ([]GetChatRoomWithdrawActionsOnChatRoomUseNumberedPaginateRow, error) {
	rows, err := q.db.Query(ctx, getChatRoomWithdrawActionsOnChatRoomUseNumberedPaginate, arg.ChatRoomID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetChatRoomWithdrawActionsOnChatRoomUseNumberedPaginateRow{}
	for rows.Next() {
		var i GetChatRoomWithdrawActionsOnChatRoomUseNumberedPaginateRow
		if err := rows.Scan(
			&i.TChatRoomWithdrawActionsPkey,
			&i.ChatRoomWithdrawActionID,
			&i.ChatRoomActionID,
			&i.MemberID,
			&i.WithdrawMemberName,
			&i.WithdrawMemberFirstName,
			&i.WithdrawMemberLastName,
			&i.WithdrawMemberEmail,
			&i.WithdrawMemberProfileImageID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPluralChatRoomWithdrawActions = `-- name: GetPluralChatRoomWithdrawActions :many
SELECT t_chat_room_withdraw_actions.t_chat_room_withdraw_actions_pkey, t_chat_room_withdraw_actions.chat_room_withdraw_action_id, t_chat_room_withdraw_actions.chat_room_action_id, t_chat_room_withdraw_actions.member_id,
m_members.name withdraw_member_name, m_members.first_name withdraw_member_first_name, m_members.last_name withdraw_member_last_name, m_members.email withdraw_member_email,
m_members.profile_image_id withdraw_member_profile_image_id
FROM t_chat_room_withdraw_actions
LEFT JOIN m_members ON t_chat_room_withdraw_actions.member_id = m_members.member_id
WHERE chat_room_withdraw_action_id = ANY($1::uuid[])
ORDER BY
	t_chat_room_withdraw_actions_pkey ASC
`

type GetPluralChatRoomWithdrawActionsRow struct {
	TChatRoomWithdrawActionsPkey pgtype.Int8 `json:"t_chat_room_withdraw_actions_pkey"`
	ChatRoomWithdrawActionID     uuid.UUID   `json:"chat_room_withdraw_action_id"`
	ChatRoomActionID             uuid.UUID   `json:"chat_room_action_id"`
	MemberID                     pgtype.UUID `json:"member_id"`
	WithdrawMemberName           pgtype.Text `json:"withdraw_member_name"`
	WithdrawMemberFirstName      pgtype.Text `json:"withdraw_member_first_name"`
	WithdrawMemberLastName       pgtype.Text `json:"withdraw_member_last_name"`
	WithdrawMemberEmail          pgtype.Text `json:"withdraw_member_email"`
	WithdrawMemberProfileImageID pgtype.UUID `json:"withdraw_member_profile_image_id"`
}

func (q *Queries) GetPluralChatRoomWithdrawActions(ctx context.Context, chatRoomWithdrawActionIds []uuid.UUID) ([]GetPluralChatRoomWithdrawActionsRow, error) {
	rows, err := q.db.Query(ctx, getPluralChatRoomWithdrawActions, chatRoomWithdrawActionIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPluralChatRoomWithdrawActionsRow{}
	for rows.Next() {
		var i GetPluralChatRoomWithdrawActionsRow
		if err := rows.Scan(
			&i.TChatRoomWithdrawActionsPkey,
			&i.ChatRoomWithdrawActionID,
			&i.ChatRoomActionID,
			&i.MemberID,
			&i.WithdrawMemberName,
			&i.WithdrawMemberFirstName,
			&i.WithdrawMemberLastName,
			&i.WithdrawMemberEmail,
			&i.WithdrawMemberProfileImageID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPluralChatRoomWithdrawActionsUseNumberedPaginate = `-- name: GetPluralChatRoomWithdrawActionsUseNumberedPaginate :many
SELECT t_chat_room_withdraw_actions.t_chat_room_withdraw_actions_pkey, t_chat_room_withdraw_actions.chat_room_withdraw_action_id, t_chat_room_withdraw_actions.chat_room_action_id, t_chat_room_withdraw_actions.member_id,
m_members.name withdraw_member_name, m_members.first_name withdraw_member_first_name, m_members.last_name withdraw_member_last_name, m_members.email withdraw_member_email,
m_members.profile_image_id withdraw_member_profile_image_id
FROM t_chat_room_withdraw_actions
LEFT JOIN m_members ON t_chat_room_withdraw_actions.member_id = m_members.member_id
WHERE chat_room_withdraw_action_id = ANY($3::uuid[])
ORDER BY
	t_chat_room_withdraw_actions_pkey ASC
LIMIT $1 OFFSET $2
`

type GetPluralChatRoomWithdrawActionsUseNumberedPaginateParams struct {
	Limit                     int32       `json:"limit"`
	Offset                    int32       `json:"offset"`
	ChatRoomWithdrawActionIds []uuid.UUID `json:"chat_room_withdraw_action_ids"`
}

type GetPluralChatRoomWithdrawActionsUseNumberedPaginateRow struct {
	TChatRoomWithdrawActionsPkey pgtype.Int8 `json:"t_chat_room_withdraw_actions_pkey"`
	ChatRoomWithdrawActionID     uuid.UUID   `json:"chat_room_withdraw_action_id"`
	ChatRoomActionID             uuid.UUID   `json:"chat_room_action_id"`
	MemberID                     pgtype.UUID `json:"member_id"`
	WithdrawMemberName           pgtype.Text `json:"withdraw_member_name"`
	WithdrawMemberFirstName      pgtype.Text `json:"withdraw_member_first_name"`
	WithdrawMemberLastName       pgtype.Text `json:"withdraw_member_last_name"`
	WithdrawMemberEmail          pgtype.Text `json:"withdraw_member_email"`
	WithdrawMemberProfileImageID pgtype.UUID `json:"withdraw_member_profile_image_id"`
}

func (q *Queries) GetPluralChatRoomWithdrawActionsUseNumberedPaginate(ctx context.Context, arg GetPluralChatRoomWithdrawActionsUseNumberedPaginateParams) ([]GetPluralChatRoomWithdrawActionsUseNumberedPaginateRow, error) {
	rows, err := q.db.Query(ctx, getPluralChatRoomWithdrawActionsUseNumberedPaginate, arg.Limit, arg.Offset, arg.ChatRoomWithdrawActionIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPluralChatRoomWithdrawActionsUseNumberedPaginateRow{}
	for rows.Next() {
		var i GetPluralChatRoomWithdrawActionsUseNumberedPaginateRow
		if err := rows.Scan(
			&i.TChatRoomWithdrawActionsPkey,
			&i.ChatRoomWithdrawActionID,
			&i.ChatRoomActionID,
			&i.MemberID,
			&i.WithdrawMemberName,
			&i.WithdrawMemberFirstName,
			&i.WithdrawMemberLastName,
			&i.WithdrawMemberEmail,
			&i.WithdrawMemberProfileImageID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const pluralDeleteChatRoomWithdrawActions = `-- name: PluralDeleteChatRoomWithdrawActions :execrows
DELETE FROM t_chat_room_withdraw_actions WHERE chat_room_withdraw_action_id = ANY($1::uuid[])
`

func (q *Queries) PluralDeleteChatRoomWithdrawActions(ctx context.Context, chatRoomWithdrawActionIds []uuid.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, pluralDeleteChatRoomWithdrawActions, chatRoomWithdrawActionIds)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
