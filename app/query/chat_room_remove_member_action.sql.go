// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: chat_room_remove_member_action.sql

package query

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const countChatRoomRemoveMemberActions = `-- name: CountChatRoomRemoveMemberActions :one
SELECT COUNT(*) FROM t_chat_room_remove_member_actions
`

func (q *Queries) CountChatRoomRemoveMemberActions(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countChatRoomRemoveMemberActions)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createChatRoomRemoveMemberAction = `-- name: CreateChatRoomRemoveMemberAction :one
INSERT INTO t_chat_room_remove_member_actions (chat_room_action_id, removed_by) VALUES ($1, $2) RETURNING t_chat_room_remove_member_actions_pkey, chat_room_remove_member_action_id, chat_room_action_id, removed_by
`

type CreateChatRoomRemoveMemberActionParams struct {
	ChatRoomActionID uuid.UUID   `json:"chat_room_action_id"`
	RemovedBy        pgtype.UUID `json:"removed_by"`
}

func (q *Queries) CreateChatRoomRemoveMemberAction(ctx context.Context, arg CreateChatRoomRemoveMemberActionParams) (ChatRoomRemoveMemberAction, error) {
	row := q.db.QueryRow(ctx, createChatRoomRemoveMemberAction, arg.ChatRoomActionID, arg.RemovedBy)
	var i ChatRoomRemoveMemberAction
	err := row.Scan(
		&i.TChatRoomRemoveMemberActionsPkey,
		&i.ChatRoomRemoveMemberActionID,
		&i.ChatRoomActionID,
		&i.RemovedBy,
	)
	return i, err
}

type CreateChatRoomRemoveMemberActionsParams struct {
	ChatRoomActionID uuid.UUID   `json:"chat_room_action_id"`
	RemovedBy        pgtype.UUID `json:"removed_by"`
}

const deleteChatRoomRemoveMemberAction = `-- name: DeleteChatRoomRemoveMemberAction :execrows
DELETE FROM t_chat_room_remove_member_actions WHERE chat_room_remove_member_action_id = $1
`

func (q *Queries) DeleteChatRoomRemoveMemberAction(ctx context.Context, chatRoomRemoveMemberActionID uuid.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, deleteChatRoomRemoveMemberAction, chatRoomRemoveMemberActionID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getChatRoomRemoveMemberActionsOnChatRoom = `-- name: GetChatRoomRemoveMemberActionsOnChatRoom :many
SELECT t_chat_room_remove_member_actions.t_chat_room_remove_member_actions_pkey, t_chat_room_remove_member_actions.chat_room_remove_member_action_id, t_chat_room_remove_member_actions.chat_room_action_id, t_chat_room_remove_member_actions.removed_by,
m_members.name remove_member_name, m_members.first_name remove_member_first_name, m_members.last_name remove_member_last_name, m_members.email remove_member_email,
m_members.profile_image_id remove_member_profile_image_id
FROM t_chat_room_remove_member_actions
LEFT JOIN m_members ON t_chat_room_remove_member_actions.removed_by = m_members.member_id
WHERE EXISTS (
	SELECT 1 FROM t_chat_room_actions WHERE chat_room_action_id = t_chat_room_remove_member_actions.chat_room_action_id AND t_chat_room_actions.chat_room_id = $1
)
ORDER BY
	t_chat_room_remove_member_actions_pkey ASC
`

type GetChatRoomRemoveMemberActionsOnChatRoomRow struct {
	TChatRoomRemoveMemberActionsPkey pgtype.Int8 `json:"t_chat_room_remove_member_actions_pkey"`
	ChatRoomRemoveMemberActionID     uuid.UUID   `json:"chat_room_remove_member_action_id"`
	ChatRoomActionID                 uuid.UUID   `json:"chat_room_action_id"`
	RemovedBy                        pgtype.UUID `json:"removed_by"`
	RemoveMemberName                 pgtype.Text `json:"remove_member_name"`
	RemoveMemberFirstName            pgtype.Text `json:"remove_member_first_name"`
	RemoveMemberLastName             pgtype.Text `json:"remove_member_last_name"`
	RemoveMemberEmail                pgtype.Text `json:"remove_member_email"`
	RemoveMemberProfileImageID       pgtype.UUID `json:"remove_member_profile_image_id"`
}

func (q *Queries) GetChatRoomRemoveMemberActionsOnChatRoom(ctx context.Context, chatRoomID uuid.UUID) ([]GetChatRoomRemoveMemberActionsOnChatRoomRow, error) {
	rows, err := q.db.Query(ctx, getChatRoomRemoveMemberActionsOnChatRoom, chatRoomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetChatRoomRemoveMemberActionsOnChatRoomRow{}
	for rows.Next() {
		var i GetChatRoomRemoveMemberActionsOnChatRoomRow
		if err := rows.Scan(
			&i.TChatRoomRemoveMemberActionsPkey,
			&i.ChatRoomRemoveMemberActionID,
			&i.ChatRoomActionID,
			&i.RemovedBy,
			&i.RemoveMemberName,
			&i.RemoveMemberFirstName,
			&i.RemoveMemberLastName,
			&i.RemoveMemberEmail,
			&i.RemoveMemberProfileImageID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChatRoomRemoveMemberActionsOnChatRoomUseKeysetPaginate = `-- name: GetChatRoomRemoveMemberActionsOnChatRoomUseKeysetPaginate :many
SELECT t_chat_room_remove_member_actions.t_chat_room_remove_member_actions_pkey, t_chat_room_remove_member_actions.chat_room_remove_member_action_id, t_chat_room_remove_member_actions.chat_room_action_id, t_chat_room_remove_member_actions.removed_by,
m_members.name remove_member_name, m_members.first_name remove_member_first_name, m_members.last_name remove_member_last_name, m_members.email remove_member_email,
m_members.profile_image_id remove_member_profile_image_id
FROM t_chat_room_remove_member_actions
LEFT JOIN m_members ON t_chat_room_remove_member_actions.removed_by = m_members.member_id
WHERE EXISTS (
	SELECT 1 FROM t_chat_room_actions WHERE chat_room_action_id = t_chat_room_remove_member_actions.chat_room_action_id AND chat_room_id = $1
)
AND
	CASE $3::text
		WHEN 'next' THEN
			t_chat_room_remove_member_actions_pkey > $4::int
		WHEN 'prev' THEN
			t_chat_room_remove_member_actions_pkey < $4::int
	END
ORDER BY
	CASE WHEN $3::text = 'next' THEN t_chat_room_remove_member_actions_pkey END ASC,
	CASE WHEN $3::text = 'prev' THEN t_chat_room_remove_member_actions_pkey END DESC
LIMIT $2
`

type GetChatRoomRemoveMemberActionsOnChatRoomUseKeysetPaginateParams struct {
	ChatRoomID      uuid.UUID `json:"chat_room_id"`
	Limit           int32     `json:"limit"`
	CursorDirection string    `json:"cursor_direction"`
	Cursor          int32     `json:"cursor"`
}

type GetChatRoomRemoveMemberActionsOnChatRoomUseKeysetPaginateRow struct {
	TChatRoomRemoveMemberActionsPkey pgtype.Int8 `json:"t_chat_room_remove_member_actions_pkey"`
	ChatRoomRemoveMemberActionID     uuid.UUID   `json:"chat_room_remove_member_action_id"`
	ChatRoomActionID                 uuid.UUID   `json:"chat_room_action_id"`
	RemovedBy                        pgtype.UUID `json:"removed_by"`
	RemoveMemberName                 pgtype.Text `json:"remove_member_name"`
	RemoveMemberFirstName            pgtype.Text `json:"remove_member_first_name"`
	RemoveMemberLastName             pgtype.Text `json:"remove_member_last_name"`
	RemoveMemberEmail                pgtype.Text `json:"remove_member_email"`
	RemoveMemberProfileImageID       pgtype.UUID `json:"remove_member_profile_image_id"`
}

func (q *Queries) GetChatRoomRemoveMemberActionsOnChatRoomUseKeysetPaginate(ctx context.Context, arg GetChatRoomRemoveMemberActionsOnChatRoomUseKeysetPaginateParams) ([]GetChatRoomRemoveMemberActionsOnChatRoomUseKeysetPaginateRow, error) {
	rows, err := q.db.Query(ctx, getChatRoomRemoveMemberActionsOnChatRoomUseKeysetPaginate,
		arg.ChatRoomID,
		arg.Limit,
		arg.CursorDirection,
		arg.Cursor,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetChatRoomRemoveMemberActionsOnChatRoomUseKeysetPaginateRow{}
	for rows.Next() {
		var i GetChatRoomRemoveMemberActionsOnChatRoomUseKeysetPaginateRow
		if err := rows.Scan(
			&i.TChatRoomRemoveMemberActionsPkey,
			&i.ChatRoomRemoveMemberActionID,
			&i.ChatRoomActionID,
			&i.RemovedBy,
			&i.RemoveMemberName,
			&i.RemoveMemberFirstName,
			&i.RemoveMemberLastName,
			&i.RemoveMemberEmail,
			&i.RemoveMemberProfileImageID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChatRoomRemoveMemberActionsOnChatRoomUseNumberedPaginate = `-- name: GetChatRoomRemoveMemberActionsOnChatRoomUseNumberedPaginate :many
SELECT t_chat_room_remove_member_actions.t_chat_room_remove_member_actions_pkey, t_chat_room_remove_member_actions.chat_room_remove_member_action_id, t_chat_room_remove_member_actions.chat_room_action_id, t_chat_room_remove_member_actions.removed_by,
m_members.name remove_member_name, m_members.first_name remove_member_first_name, m_members.last_name remove_member_last_name, m_members.email remove_member_email,
m_members.profile_image_id remove_member_profile_image_id
FROM t_chat_room_remove_member_actions
LEFT JOIN m_members ON t_chat_room_remove_member_actions.removed_by = m_members.member_id
WHERE EXISTS (
	SELECT 1 FROM t_chat_room_actions WHERE chat_room_action_id = t_chat_room_remove_member_actions.chat_room_action_id AND chat_room_id = $1
)
ORDER BY
	t_chat_room_remove_member_actions_pkey ASC
LIMIT $2 OFFSET $3
`

type GetChatRoomRemoveMemberActionsOnChatRoomUseNumberedPaginateParams struct {
	ChatRoomID uuid.UUID `json:"chat_room_id"`
	Limit      int32     `json:"limit"`
	Offset     int32     `json:"offset"`
}

type GetChatRoomRemoveMemberActionsOnChatRoomUseNumberedPaginateRow struct {
	TChatRoomRemoveMemberActionsPkey pgtype.Int8 `json:"t_chat_room_remove_member_actions_pkey"`
	ChatRoomRemoveMemberActionID     uuid.UUID   `json:"chat_room_remove_member_action_id"`
	ChatRoomActionID                 uuid.UUID   `json:"chat_room_action_id"`
	RemovedBy                        pgtype.UUID `json:"removed_by"`
	RemoveMemberName                 pgtype.Text `json:"remove_member_name"`
	RemoveMemberFirstName            pgtype.Text `json:"remove_member_first_name"`
	RemoveMemberLastName             pgtype.Text `json:"remove_member_last_name"`
	RemoveMemberEmail                pgtype.Text `json:"remove_member_email"`
	RemoveMemberProfileImageID       pgtype.UUID `json:"remove_member_profile_image_id"`
}

func (q *Queries) GetChatRoomRemoveMemberActionsOnChatRoomUseNumberedPaginate(ctx context.Context, arg GetChatRoomRemoveMemberActionsOnChatRoomUseNumberedPaginateParams) ([]GetChatRoomRemoveMemberActionsOnChatRoomUseNumberedPaginateRow, error) {
	rows, err := q.db.Query(ctx, getChatRoomRemoveMemberActionsOnChatRoomUseNumberedPaginate, arg.ChatRoomID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetChatRoomRemoveMemberActionsOnChatRoomUseNumberedPaginateRow{}
	for rows.Next() {
		var i GetChatRoomRemoveMemberActionsOnChatRoomUseNumberedPaginateRow
		if err := rows.Scan(
			&i.TChatRoomRemoveMemberActionsPkey,
			&i.ChatRoomRemoveMemberActionID,
			&i.ChatRoomActionID,
			&i.RemovedBy,
			&i.RemoveMemberName,
			&i.RemoveMemberFirstName,
			&i.RemoveMemberLastName,
			&i.RemoveMemberEmail,
			&i.RemoveMemberProfileImageID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPluralChatRoomRemoveMemberActions = `-- name: GetPluralChatRoomRemoveMemberActions :many
SELECT t_chat_room_remove_member_actions.t_chat_room_remove_member_actions_pkey, t_chat_room_remove_member_actions.chat_room_remove_member_action_id, t_chat_room_remove_member_actions.chat_room_action_id, t_chat_room_remove_member_actions.removed_by,
m_members.name remove_member_name, m_members.first_name remove_member_first_name, m_members.last_name remove_member_last_name, m_members.email remove_member_email,
m_members.profile_image_id remove_member_profile_image_id
FROM t_chat_room_remove_member_actions
LEFT JOIN m_members ON t_chat_room_remove_member_actions.removed_by = m_members.member_id
WHERE chat_room_remove_member_action_id = ANY($1::uuid[])
ORDER BY
	t_chat_room_remove_member_actions_pkey ASC
`

type GetPluralChatRoomRemoveMemberActionsRow struct {
	TChatRoomRemoveMemberActionsPkey pgtype.Int8 `json:"t_chat_room_remove_member_actions_pkey"`
	ChatRoomRemoveMemberActionID     uuid.UUID   `json:"chat_room_remove_member_action_id"`
	ChatRoomActionID                 uuid.UUID   `json:"chat_room_action_id"`
	RemovedBy                        pgtype.UUID `json:"removed_by"`
	RemoveMemberName                 pgtype.Text `json:"remove_member_name"`
	RemoveMemberFirstName            pgtype.Text `json:"remove_member_first_name"`
	RemoveMemberLastName             pgtype.Text `json:"remove_member_last_name"`
	RemoveMemberEmail                pgtype.Text `json:"remove_member_email"`
	RemoveMemberProfileImageID       pgtype.UUID `json:"remove_member_profile_image_id"`
}

func (q *Queries) GetPluralChatRoomRemoveMemberActions(ctx context.Context, chatRoomRemoveMemberActionIds []uuid.UUID) ([]GetPluralChatRoomRemoveMemberActionsRow, error) {
	rows, err := q.db.Query(ctx, getPluralChatRoomRemoveMemberActions, chatRoomRemoveMemberActionIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPluralChatRoomRemoveMemberActionsRow{}
	for rows.Next() {
		var i GetPluralChatRoomRemoveMemberActionsRow
		if err := rows.Scan(
			&i.TChatRoomRemoveMemberActionsPkey,
			&i.ChatRoomRemoveMemberActionID,
			&i.ChatRoomActionID,
			&i.RemovedBy,
			&i.RemoveMemberName,
			&i.RemoveMemberFirstName,
			&i.RemoveMemberLastName,
			&i.RemoveMemberEmail,
			&i.RemoveMemberProfileImageID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPluralChatRoomRemoveMemberActionsUseNumberedPaginate = `-- name: GetPluralChatRoomRemoveMemberActionsUseNumberedPaginate :many
SELECT t_chat_room_remove_member_actions.t_chat_room_remove_member_actions_pkey, t_chat_room_remove_member_actions.chat_room_remove_member_action_id, t_chat_room_remove_member_actions.chat_room_action_id, t_chat_room_remove_member_actions.removed_by,
m_members.name remove_member_name, m_members.first_name remove_member_first_name, m_members.last_name remove_member_last_name, m_members.email remove_member_email,
m_members.profile_image_id remove_member_profile_image_id
FROM t_chat_room_remove_member_actions
LEFT JOIN m_members ON t_chat_room_remove_member_actions.removed_by = m_members.member_id
WHERE chat_room_remove_member_action_id = ANY($3::uuid[])
ORDER BY
	t_chat_room_remove_member_actions_pkey ASC
LIMIT $1 OFFSET $2
`

type GetPluralChatRoomRemoveMemberActionsUseNumberedPaginateParams struct {
	Limit                         int32       `json:"limit"`
	Offset                        int32       `json:"offset"`
	ChatRoomRemoveMemberActionIds []uuid.UUID `json:"chat_room_remove_member_action_ids"`
}

type GetPluralChatRoomRemoveMemberActionsUseNumberedPaginateRow struct {
	TChatRoomRemoveMemberActionsPkey pgtype.Int8 `json:"t_chat_room_remove_member_actions_pkey"`
	ChatRoomRemoveMemberActionID     uuid.UUID   `json:"chat_room_remove_member_action_id"`
	ChatRoomActionID                 uuid.UUID   `json:"chat_room_action_id"`
	RemovedBy                        pgtype.UUID `json:"removed_by"`
	RemoveMemberName                 pgtype.Text `json:"remove_member_name"`
	RemoveMemberFirstName            pgtype.Text `json:"remove_member_first_name"`
	RemoveMemberLastName             pgtype.Text `json:"remove_member_last_name"`
	RemoveMemberEmail                pgtype.Text `json:"remove_member_email"`
	RemoveMemberProfileImageID       pgtype.UUID `json:"remove_member_profile_image_id"`
}

func (q *Queries) GetPluralChatRoomRemoveMemberActionsUseNumberedPaginate(ctx context.Context, arg GetPluralChatRoomRemoveMemberActionsUseNumberedPaginateParams) ([]GetPluralChatRoomRemoveMemberActionsUseNumberedPaginateRow, error) {
	rows, err := q.db.Query(ctx, getPluralChatRoomRemoveMemberActionsUseNumberedPaginate, arg.Limit, arg.Offset, arg.ChatRoomRemoveMemberActionIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPluralChatRoomRemoveMemberActionsUseNumberedPaginateRow{}
	for rows.Next() {
		var i GetPluralChatRoomRemoveMemberActionsUseNumberedPaginateRow
		if err := rows.Scan(
			&i.TChatRoomRemoveMemberActionsPkey,
			&i.ChatRoomRemoveMemberActionID,
			&i.ChatRoomActionID,
			&i.RemovedBy,
			&i.RemoveMemberName,
			&i.RemoveMemberFirstName,
			&i.RemoveMemberLastName,
			&i.RemoveMemberEmail,
			&i.RemoveMemberProfileImageID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const pluralDeleteChatRoomRemoveMemberActions = `-- name: PluralDeleteChatRoomRemoveMemberActions :execrows
DELETE FROM t_chat_room_remove_member_actions WHERE chat_room_remove_member_action_id = ANY($1::uuid[])
`

func (q *Queries) PluralDeleteChatRoomRemoveMemberActions(ctx context.Context, chatRoomRemoveMemberActionIds []uuid.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, pluralDeleteChatRoomRemoveMemberActions, chatRoomRemoveMemberActionIds)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
