// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package store

import (
	"context"
	"github.com/google/uuid"
	"github.com/micro-service-lab/recs-seem-mono-container/app/entity"
	"github.com/micro-service-lab/recs-seem-mono-container/app/parameter"
	"sync"
)

// Ensure, that StoreMock does implement Store.
// If this is not the case, regenerate this file with moq.
var _ Store = &StoreMock{}

// StoreMock is a mock implementation of Store.
//
//	func TestSomethingThatUsesStore(t *testing.T) {
//
//		// make and configure a mocked Store
//		mockedStore := &StoreMock{
//			BeginFunc: func(contextMoqParam context.Context) (Sd, error) {
//				panic("mock out the Begin method")
//			},
//			CleanupFunc: func(contextMoqParam context.Context) error {
//				panic("mock out the Cleanup method")
//			},
//			CommitFunc: func(contextMoqParam context.Context, sd Sd) error {
//				panic("mock out the Commit method")
//			},
//			CountAbsencesFunc: func(ctx context.Context) (int64, error) {
//				panic("mock out the CountAbsences method")
//			},
//			CountAbsencesWithSdFunc: func(ctx context.Context, sd Sd) (int64, error) {
//				panic("mock out the CountAbsencesWithSd method")
//			},
//			CountAttendStatusesFunc: func(ctx context.Context, where parameter.WhereAttendStatusParam) (int64, error) {
//				panic("mock out the CountAttendStatuses method")
//			},
//			CountAttendStatusesWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereAttendStatusParam) (int64, error) {
//				panic("mock out the CountAttendStatusesWithSd method")
//			},
//			CreateAbsenceFunc: func(ctx context.Context, param parameter.CreateAbsenceParam) (entity.Absence, error) {
//				panic("mock out the CreateAbsence method")
//			},
//			CreateAbsenceWithSdFunc: func(ctx context.Context, sd Sd, param parameter.CreateAbsenceParam) (entity.Absence, error) {
//				panic("mock out the CreateAbsenceWithSd method")
//			},
//			CreateAbsencesFunc: func(ctx context.Context, params []parameter.CreateAbsenceParam) (int64, error) {
//				panic("mock out the CreateAbsences method")
//			},
//			CreateAbsencesWithSdFunc: func(ctx context.Context, sd Sd, params []parameter.CreateAbsenceParam) (int64, error) {
//				panic("mock out the CreateAbsencesWithSd method")
//			},
//			CreateAttendStatusFunc: func(ctx context.Context, param parameter.CreateAttendStatusParam) (entity.AttendStatus, error) {
//				panic("mock out the CreateAttendStatus method")
//			},
//			CreateAttendStatusWithSdFunc: func(ctx context.Context, sd Sd, param parameter.CreateAttendStatusParam) (entity.AttendStatus, error) {
//				panic("mock out the CreateAttendStatusWithSd method")
//			},
//			CreateAttendStatusesFunc: func(ctx context.Context, params []parameter.CreateAttendStatusParam) (int64, error) {
//				panic("mock out the CreateAttendStatuses method")
//			},
//			CreateAttendStatusesWithSdFunc: func(ctx context.Context, sd Sd, params []parameter.CreateAttendStatusParam) (int64, error) {
//				panic("mock out the CreateAttendStatusesWithSd method")
//			},
//			DeleteAbsenceFunc: func(ctx context.Context, absenceID uuid.UUID) error {
//				panic("mock out the DeleteAbsence method")
//			},
//			DeleteAbsenceWithSdFunc: func(ctx context.Context, sd Sd, absenceID uuid.UUID) error {
//				panic("mock out the DeleteAbsenceWithSd method")
//			},
//			DeleteAttendStatusFunc: func(ctx context.Context, attendStatusID uuid.UUID) error {
//				panic("mock out the DeleteAttendStatus method")
//			},
//			DeleteAttendStatusByKeyFunc: func(ctx context.Context, key string) error {
//				panic("mock out the DeleteAttendStatusByKey method")
//			},
//			DeleteAttendStatusByKeyWithSdFunc: func(ctx context.Context, sd Sd, key string) error {
//				panic("mock out the DeleteAttendStatusByKeyWithSd method")
//			},
//			DeleteAttendStatusWithSdFunc: func(ctx context.Context, sd Sd, attendStatusID uuid.UUID) error {
//				panic("mock out the DeleteAttendStatusWithSd method")
//			},
//			FindAbsenceByIDFunc: func(ctx context.Context, absenceID uuid.UUID) (entity.Absence, error) {
//				panic("mock out the FindAbsenceByID method")
//			},
//			FindAbsenceByIDWithSdFunc: func(ctx context.Context, sd Sd, absenceID uuid.UUID) (entity.Absence, error) {
//				panic("mock out the FindAbsenceByIDWithSd method")
//			},
//			FindAttendStatusByIDFunc: func(ctx context.Context, attendStatusID uuid.UUID) (entity.AttendStatus, error) {
//				panic("mock out the FindAttendStatusByID method")
//			},
//			FindAttendStatusByIDWithSdFunc: func(ctx context.Context, sd Sd, attendStatusID uuid.UUID) (entity.AttendStatus, error) {
//				panic("mock out the FindAttendStatusByIDWithSd method")
//			},
//			FindAttendStatusByKeyFunc: func(ctx context.Context, key string) (entity.AttendStatus, error) {
//				panic("mock out the FindAttendStatusByKey method")
//			},
//			FindAttendStatusByKeyWithSdFunc: func(ctx context.Context, sd Sd, key string) (entity.AttendStatus, error) {
//				panic("mock out the FindAttendStatusByKeyWithSd method")
//			},
//			GetAbsencesFunc: func(ctx context.Context, order parameter.AbsenceOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Absence], error) {
//				panic("mock out the GetAbsences method")
//			},
//			GetAbsencesWithSdFunc: func(ctx context.Context, sd Sd, order parameter.AbsenceOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Absence], error) {
//				panic("mock out the GetAbsencesWithSd method")
//			},
//			GetAttendStatusesFunc: func(ctx context.Context, where parameter.WhereAttendStatusParam, order parameter.AttendStatusOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.AttendStatus], error) {
//				panic("mock out the GetAttendStatuses method")
//			},
//			GetAttendStatusesWithSdFunc: func(ctx context.Context, sd Sd, where parameter.WhereAttendStatusParam, order parameter.AttendStatusOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.AttendStatus], error) {
//				panic("mock out the GetAttendStatusesWithSd method")
//			},
//			GetPluralAbsencesFunc: func(ctx context.Context, ids []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.Absence], error) {
//				panic("mock out the GetPluralAbsences method")
//			},
//			GetPluralAbsencesWithSdFunc: func(ctx context.Context, sd Sd, ids []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.Absence], error) {
//				panic("mock out the GetPluralAbsencesWithSd method")
//			},
//			GetPluralAttendStatusesFunc: func(ctx context.Context, AttendStatusIDs []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.AttendStatus], error) {
//				panic("mock out the GetPluralAttendStatuses method")
//			},
//			GetPluralAttendStatusesWithSdFunc: func(ctx context.Context, sd Sd, AttendStatusIDs []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.AttendStatus], error) {
//				panic("mock out the GetPluralAttendStatusesWithSd method")
//			},
//			RollbackFunc: func(contextMoqParam context.Context, sd Sd) error {
//				panic("mock out the Rollback method")
//			},
//			UpdateAttendStatusFunc: func(ctx context.Context, attendStatusID uuid.UUID, param parameter.UpdateAttendStatusParams) (entity.AttendStatus, error) {
//				panic("mock out the UpdateAttendStatus method")
//			},
//			UpdateAttendStatusByKeyFunc: func(ctx context.Context, key string, param parameter.UpdateAttendStatusByKeyParams) (entity.AttendStatus, error) {
//				panic("mock out the UpdateAttendStatusByKey method")
//			},
//			UpdateAttendStatusByKeyWithSdFunc: func(ctx context.Context, sd Sd, key string, param parameter.UpdateAttendStatusByKeyParams) (entity.AttendStatus, error) {
//				panic("mock out the UpdateAttendStatusByKeyWithSd method")
//			},
//			UpdateAttendStatusWithSdFunc: func(ctx context.Context, sd Sd, attendStatusID uuid.UUID, param parameter.UpdateAttendStatusParams) (entity.AttendStatus, error) {
//				panic("mock out the UpdateAttendStatusWithSd method")
//			},
//		}
//
//		// use mockedStore in code that requires Store
//		// and then make assertions.
//
//	}
type StoreMock struct {
	// BeginFunc mocks the Begin method.
	BeginFunc func(contextMoqParam context.Context) (Sd, error)

	// CleanupFunc mocks the Cleanup method.
	CleanupFunc func(contextMoqParam context.Context) error

	// CommitFunc mocks the Commit method.
	CommitFunc func(contextMoqParam context.Context, sd Sd) error

	// CountAbsencesFunc mocks the CountAbsences method.
	CountAbsencesFunc func(ctx context.Context) (int64, error)

	// CountAbsencesWithSdFunc mocks the CountAbsencesWithSd method.
	CountAbsencesWithSdFunc func(ctx context.Context, sd Sd) (int64, error)

	// CountAttendStatusesFunc mocks the CountAttendStatuses method.
	CountAttendStatusesFunc func(ctx context.Context, where parameter.WhereAttendStatusParam) (int64, error)

	// CountAttendStatusesWithSdFunc mocks the CountAttendStatusesWithSd method.
	CountAttendStatusesWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereAttendStatusParam) (int64, error)

	// CreateAbsenceFunc mocks the CreateAbsence method.
	CreateAbsenceFunc func(ctx context.Context, param parameter.CreateAbsenceParam) (entity.Absence, error)

	// CreateAbsenceWithSdFunc mocks the CreateAbsenceWithSd method.
	CreateAbsenceWithSdFunc func(ctx context.Context, sd Sd, param parameter.CreateAbsenceParam) (entity.Absence, error)

	// CreateAbsencesFunc mocks the CreateAbsences method.
	CreateAbsencesFunc func(ctx context.Context, params []parameter.CreateAbsenceParam) (int64, error)

	// CreateAbsencesWithSdFunc mocks the CreateAbsencesWithSd method.
	CreateAbsencesWithSdFunc func(ctx context.Context, sd Sd, params []parameter.CreateAbsenceParam) (int64, error)

	// CreateAttendStatusFunc mocks the CreateAttendStatus method.
	CreateAttendStatusFunc func(ctx context.Context, param parameter.CreateAttendStatusParam) (entity.AttendStatus, error)

	// CreateAttendStatusWithSdFunc mocks the CreateAttendStatusWithSd method.
	CreateAttendStatusWithSdFunc func(ctx context.Context, sd Sd, param parameter.CreateAttendStatusParam) (entity.AttendStatus, error)

	// CreateAttendStatusesFunc mocks the CreateAttendStatuses method.
	CreateAttendStatusesFunc func(ctx context.Context, params []parameter.CreateAttendStatusParam) (int64, error)

	// CreateAttendStatusesWithSdFunc mocks the CreateAttendStatusesWithSd method.
	CreateAttendStatusesWithSdFunc func(ctx context.Context, sd Sd, params []parameter.CreateAttendStatusParam) (int64, error)

	// DeleteAbsenceFunc mocks the DeleteAbsence method.
	DeleteAbsenceFunc func(ctx context.Context, absenceID uuid.UUID) error

	// DeleteAbsenceWithSdFunc mocks the DeleteAbsenceWithSd method.
	DeleteAbsenceWithSdFunc func(ctx context.Context, sd Sd, absenceID uuid.UUID) error

	// DeleteAttendStatusFunc mocks the DeleteAttendStatus method.
	DeleteAttendStatusFunc func(ctx context.Context, attendStatusID uuid.UUID) error

	// DeleteAttendStatusByKeyFunc mocks the DeleteAttendStatusByKey method.
	DeleteAttendStatusByKeyFunc func(ctx context.Context, key string) error

	// DeleteAttendStatusByKeyWithSdFunc mocks the DeleteAttendStatusByKeyWithSd method.
	DeleteAttendStatusByKeyWithSdFunc func(ctx context.Context, sd Sd, key string) error

	// DeleteAttendStatusWithSdFunc mocks the DeleteAttendStatusWithSd method.
	DeleteAttendStatusWithSdFunc func(ctx context.Context, sd Sd, attendStatusID uuid.UUID) error

	// FindAbsenceByIDFunc mocks the FindAbsenceByID method.
	FindAbsenceByIDFunc func(ctx context.Context, absenceID uuid.UUID) (entity.Absence, error)

	// FindAbsenceByIDWithSdFunc mocks the FindAbsenceByIDWithSd method.
	FindAbsenceByIDWithSdFunc func(ctx context.Context, sd Sd, absenceID uuid.UUID) (entity.Absence, error)

	// FindAttendStatusByIDFunc mocks the FindAttendStatusByID method.
	FindAttendStatusByIDFunc func(ctx context.Context, attendStatusID uuid.UUID) (entity.AttendStatus, error)

	// FindAttendStatusByIDWithSdFunc mocks the FindAttendStatusByIDWithSd method.
	FindAttendStatusByIDWithSdFunc func(ctx context.Context, sd Sd, attendStatusID uuid.UUID) (entity.AttendStatus, error)

	// FindAttendStatusByKeyFunc mocks the FindAttendStatusByKey method.
	FindAttendStatusByKeyFunc func(ctx context.Context, key string) (entity.AttendStatus, error)

	// FindAttendStatusByKeyWithSdFunc mocks the FindAttendStatusByKeyWithSd method.
	FindAttendStatusByKeyWithSdFunc func(ctx context.Context, sd Sd, key string) (entity.AttendStatus, error)

	// GetAbsencesFunc mocks the GetAbsences method.
	GetAbsencesFunc func(ctx context.Context, order parameter.AbsenceOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Absence], error)

	// GetAbsencesWithSdFunc mocks the GetAbsencesWithSd method.
	GetAbsencesWithSdFunc func(ctx context.Context, sd Sd, order parameter.AbsenceOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Absence], error)

	// GetAttendStatusesFunc mocks the GetAttendStatuses method.
	GetAttendStatusesFunc func(ctx context.Context, where parameter.WhereAttendStatusParam, order parameter.AttendStatusOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.AttendStatus], error)

	// GetAttendStatusesWithSdFunc mocks the GetAttendStatusesWithSd method.
	GetAttendStatusesWithSdFunc func(ctx context.Context, sd Sd, where parameter.WhereAttendStatusParam, order parameter.AttendStatusOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.AttendStatus], error)

	// GetPluralAbsencesFunc mocks the GetPluralAbsences method.
	GetPluralAbsencesFunc func(ctx context.Context, ids []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.Absence], error)

	// GetPluralAbsencesWithSdFunc mocks the GetPluralAbsencesWithSd method.
	GetPluralAbsencesWithSdFunc func(ctx context.Context, sd Sd, ids []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.Absence], error)

	// GetPluralAttendStatusesFunc mocks the GetPluralAttendStatuses method.
	GetPluralAttendStatusesFunc func(ctx context.Context, AttendStatusIDs []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.AttendStatus], error)

	// GetPluralAttendStatusesWithSdFunc mocks the GetPluralAttendStatusesWithSd method.
	GetPluralAttendStatusesWithSdFunc func(ctx context.Context, sd Sd, AttendStatusIDs []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.AttendStatus], error)

	// RollbackFunc mocks the Rollback method.
	RollbackFunc func(contextMoqParam context.Context, sd Sd) error

	// UpdateAttendStatusFunc mocks the UpdateAttendStatus method.
	UpdateAttendStatusFunc func(ctx context.Context, attendStatusID uuid.UUID, param parameter.UpdateAttendStatusParams) (entity.AttendStatus, error)

	// UpdateAttendStatusByKeyFunc mocks the UpdateAttendStatusByKey method.
	UpdateAttendStatusByKeyFunc func(ctx context.Context, key string, param parameter.UpdateAttendStatusByKeyParams) (entity.AttendStatus, error)

	// UpdateAttendStatusByKeyWithSdFunc mocks the UpdateAttendStatusByKeyWithSd method.
	UpdateAttendStatusByKeyWithSdFunc func(ctx context.Context, sd Sd, key string, param parameter.UpdateAttendStatusByKeyParams) (entity.AttendStatus, error)

	// UpdateAttendStatusWithSdFunc mocks the UpdateAttendStatusWithSd method.
	UpdateAttendStatusWithSdFunc func(ctx context.Context, sd Sd, attendStatusID uuid.UUID, param parameter.UpdateAttendStatusParams) (entity.AttendStatus, error)

	// calls tracks calls to the methods.
	calls struct {
		// Begin holds details about calls to the Begin method.
		Begin []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
		}
		// Cleanup holds details about calls to the Cleanup method.
		Cleanup []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
		}
		// Commit holds details about calls to the Commit method.
		Commit []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// Sd is the sd argument value.
			Sd Sd
		}
		// CountAbsences holds details about calls to the CountAbsences method.
		CountAbsences []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// CountAbsencesWithSd holds details about calls to the CountAbsencesWithSd method.
		CountAbsencesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
		}
		// CountAttendStatuses holds details about calls to the CountAttendStatuses method.
		CountAttendStatuses []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereAttendStatusParam
		}
		// CountAttendStatusesWithSd holds details about calls to the CountAttendStatusesWithSd method.
		CountAttendStatusesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereAttendStatusParam
		}
		// CreateAbsence holds details about calls to the CreateAbsence method.
		CreateAbsence []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Param is the param argument value.
			Param parameter.CreateAbsenceParam
		}
		// CreateAbsenceWithSd holds details about calls to the CreateAbsenceWithSd method.
		CreateAbsenceWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Param is the param argument value.
			Param parameter.CreateAbsenceParam
		}
		// CreateAbsences holds details about calls to the CreateAbsences method.
		CreateAbsences []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params []parameter.CreateAbsenceParam
		}
		// CreateAbsencesWithSd holds details about calls to the CreateAbsencesWithSd method.
		CreateAbsencesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Params is the params argument value.
			Params []parameter.CreateAbsenceParam
		}
		// CreateAttendStatus holds details about calls to the CreateAttendStatus method.
		CreateAttendStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Param is the param argument value.
			Param parameter.CreateAttendStatusParam
		}
		// CreateAttendStatusWithSd holds details about calls to the CreateAttendStatusWithSd method.
		CreateAttendStatusWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Param is the param argument value.
			Param parameter.CreateAttendStatusParam
		}
		// CreateAttendStatuses holds details about calls to the CreateAttendStatuses method.
		CreateAttendStatuses []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params []parameter.CreateAttendStatusParam
		}
		// CreateAttendStatusesWithSd holds details about calls to the CreateAttendStatusesWithSd method.
		CreateAttendStatusesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Params is the params argument value.
			Params []parameter.CreateAttendStatusParam
		}
		// DeleteAbsence holds details about calls to the DeleteAbsence method.
		DeleteAbsence []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AbsenceID is the absenceID argument value.
			AbsenceID uuid.UUID
		}
		// DeleteAbsenceWithSd holds details about calls to the DeleteAbsenceWithSd method.
		DeleteAbsenceWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// AbsenceID is the absenceID argument value.
			AbsenceID uuid.UUID
		}
		// DeleteAttendStatus holds details about calls to the DeleteAttendStatus method.
		DeleteAttendStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AttendStatusID is the attendStatusID argument value.
			AttendStatusID uuid.UUID
		}
		// DeleteAttendStatusByKey holds details about calls to the DeleteAttendStatusByKey method.
		DeleteAttendStatusByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// DeleteAttendStatusByKeyWithSd holds details about calls to the DeleteAttendStatusByKeyWithSd method.
		DeleteAttendStatusByKeyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Key is the key argument value.
			Key string
		}
		// DeleteAttendStatusWithSd holds details about calls to the DeleteAttendStatusWithSd method.
		DeleteAttendStatusWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// AttendStatusID is the attendStatusID argument value.
			AttendStatusID uuid.UUID
		}
		// FindAbsenceByID holds details about calls to the FindAbsenceByID method.
		FindAbsenceByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AbsenceID is the absenceID argument value.
			AbsenceID uuid.UUID
		}
		// FindAbsenceByIDWithSd holds details about calls to the FindAbsenceByIDWithSd method.
		FindAbsenceByIDWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// AbsenceID is the absenceID argument value.
			AbsenceID uuid.UUID
		}
		// FindAttendStatusByID holds details about calls to the FindAttendStatusByID method.
		FindAttendStatusByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AttendStatusID is the attendStatusID argument value.
			AttendStatusID uuid.UUID
		}
		// FindAttendStatusByIDWithSd holds details about calls to the FindAttendStatusByIDWithSd method.
		FindAttendStatusByIDWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// AttendStatusID is the attendStatusID argument value.
			AttendStatusID uuid.UUID
		}
		// FindAttendStatusByKey holds details about calls to the FindAttendStatusByKey method.
		FindAttendStatusByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// FindAttendStatusByKeyWithSd holds details about calls to the FindAttendStatusByKeyWithSd method.
		FindAttendStatusByKeyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Key is the key argument value.
			Key string
		}
		// GetAbsences holds details about calls to the GetAbsences method.
		GetAbsences []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Order is the order argument value.
			Order parameter.AbsenceOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetAbsencesWithSd holds details about calls to the GetAbsencesWithSd method.
		GetAbsencesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Order is the order argument value.
			Order parameter.AbsenceOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetAttendStatuses holds details about calls to the GetAttendStatuses method.
		GetAttendStatuses []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Where is the where argument value.
			Where parameter.WhereAttendStatusParam
			// Order is the order argument value.
			Order parameter.AttendStatusOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetAttendStatusesWithSd holds details about calls to the GetAttendStatusesWithSd method.
		GetAttendStatusesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Where is the where argument value.
			Where parameter.WhereAttendStatusParam
			// Order is the order argument value.
			Order parameter.AttendStatusOrderMethod
			// Np is the np argument value.
			Np NumberedPaginationParam
			// Cp is the cp argument value.
			Cp CursorPaginationParam
			// Wc is the wc argument value.
			Wc WithCountParam
		}
		// GetPluralAbsences holds details about calls to the GetPluralAbsences method.
		GetPluralAbsences []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Ids is the ids argument value.
			Ids []uuid.UUID
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralAbsencesWithSd holds details about calls to the GetPluralAbsencesWithSd method.
		GetPluralAbsencesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Ids is the ids argument value.
			Ids []uuid.UUID
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralAttendStatuses holds details about calls to the GetPluralAttendStatuses method.
		GetPluralAttendStatuses []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AttendStatusIDs is the AttendStatusIDs argument value.
			AttendStatusIDs []uuid.UUID
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// GetPluralAttendStatusesWithSd holds details about calls to the GetPluralAttendStatusesWithSd method.
		GetPluralAttendStatusesWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// AttendStatusIDs is the AttendStatusIDs argument value.
			AttendStatusIDs []uuid.UUID
			// Np is the np argument value.
			Np NumberedPaginationParam
		}
		// Rollback holds details about calls to the Rollback method.
		Rollback []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// Sd is the sd argument value.
			Sd Sd
		}
		// UpdateAttendStatus holds details about calls to the UpdateAttendStatus method.
		UpdateAttendStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AttendStatusID is the attendStatusID argument value.
			AttendStatusID uuid.UUID
			// Param is the param argument value.
			Param parameter.UpdateAttendStatusParams
		}
		// UpdateAttendStatusByKey holds details about calls to the UpdateAttendStatusByKey method.
		UpdateAttendStatusByKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
			// Param is the param argument value.
			Param parameter.UpdateAttendStatusByKeyParams
		}
		// UpdateAttendStatusByKeyWithSd holds details about calls to the UpdateAttendStatusByKeyWithSd method.
		UpdateAttendStatusByKeyWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// Key is the key argument value.
			Key string
			// Param is the param argument value.
			Param parameter.UpdateAttendStatusByKeyParams
		}
		// UpdateAttendStatusWithSd holds details about calls to the UpdateAttendStatusWithSd method.
		UpdateAttendStatusWithSd []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Sd is the sd argument value.
			Sd Sd
			// AttendStatusID is the attendStatusID argument value.
			AttendStatusID uuid.UUID
			// Param is the param argument value.
			Param parameter.UpdateAttendStatusParams
		}
	}
	lockBegin                         sync.RWMutex
	lockCleanup                       sync.RWMutex
	lockCommit                        sync.RWMutex
	lockCountAbsences                 sync.RWMutex
	lockCountAbsencesWithSd           sync.RWMutex
	lockCountAttendStatuses           sync.RWMutex
	lockCountAttendStatusesWithSd     sync.RWMutex
	lockCreateAbsence                 sync.RWMutex
	lockCreateAbsenceWithSd           sync.RWMutex
	lockCreateAbsences                sync.RWMutex
	lockCreateAbsencesWithSd          sync.RWMutex
	lockCreateAttendStatus            sync.RWMutex
	lockCreateAttendStatusWithSd      sync.RWMutex
	lockCreateAttendStatuses          sync.RWMutex
	lockCreateAttendStatusesWithSd    sync.RWMutex
	lockDeleteAbsence                 sync.RWMutex
	lockDeleteAbsenceWithSd           sync.RWMutex
	lockDeleteAttendStatus            sync.RWMutex
	lockDeleteAttendStatusByKey       sync.RWMutex
	lockDeleteAttendStatusByKeyWithSd sync.RWMutex
	lockDeleteAttendStatusWithSd      sync.RWMutex
	lockFindAbsenceByID               sync.RWMutex
	lockFindAbsenceByIDWithSd         sync.RWMutex
	lockFindAttendStatusByID          sync.RWMutex
	lockFindAttendStatusByIDWithSd    sync.RWMutex
	lockFindAttendStatusByKey         sync.RWMutex
	lockFindAttendStatusByKeyWithSd   sync.RWMutex
	lockGetAbsences                   sync.RWMutex
	lockGetAbsencesWithSd             sync.RWMutex
	lockGetAttendStatuses             sync.RWMutex
	lockGetAttendStatusesWithSd       sync.RWMutex
	lockGetPluralAbsences             sync.RWMutex
	lockGetPluralAbsencesWithSd       sync.RWMutex
	lockGetPluralAttendStatuses       sync.RWMutex
	lockGetPluralAttendStatusesWithSd sync.RWMutex
	lockRollback                      sync.RWMutex
	lockUpdateAttendStatus            sync.RWMutex
	lockUpdateAttendStatusByKey       sync.RWMutex
	lockUpdateAttendStatusByKeyWithSd sync.RWMutex
	lockUpdateAttendStatusWithSd      sync.RWMutex
}

// Begin calls BeginFunc.
func (mock *StoreMock) Begin(contextMoqParam context.Context) (Sd, error) {
	if mock.BeginFunc == nil {
		panic("StoreMock.BeginFunc: method is nil but Store.Begin was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
	}{
		ContextMoqParam: contextMoqParam,
	}
	mock.lockBegin.Lock()
	mock.calls.Begin = append(mock.calls.Begin, callInfo)
	mock.lockBegin.Unlock()
	return mock.BeginFunc(contextMoqParam)
}

// BeginCalls gets all the calls that were made to Begin.
// Check the length with:
//
//	len(mockedStore.BeginCalls())
func (mock *StoreMock) BeginCalls() []struct {
	ContextMoqParam context.Context
} {
	var calls []struct {
		ContextMoqParam context.Context
	}
	mock.lockBegin.RLock()
	calls = mock.calls.Begin
	mock.lockBegin.RUnlock()
	return calls
}

// Cleanup calls CleanupFunc.
func (mock *StoreMock) Cleanup(contextMoqParam context.Context) error {
	if mock.CleanupFunc == nil {
		panic("StoreMock.CleanupFunc: method is nil but Store.Cleanup was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
	}{
		ContextMoqParam: contextMoqParam,
	}
	mock.lockCleanup.Lock()
	mock.calls.Cleanup = append(mock.calls.Cleanup, callInfo)
	mock.lockCleanup.Unlock()
	return mock.CleanupFunc(contextMoqParam)
}

// CleanupCalls gets all the calls that were made to Cleanup.
// Check the length with:
//
//	len(mockedStore.CleanupCalls())
func (mock *StoreMock) CleanupCalls() []struct {
	ContextMoqParam context.Context
} {
	var calls []struct {
		ContextMoqParam context.Context
	}
	mock.lockCleanup.RLock()
	calls = mock.calls.Cleanup
	mock.lockCleanup.RUnlock()
	return calls
}

// Commit calls CommitFunc.
func (mock *StoreMock) Commit(contextMoqParam context.Context, sd Sd) error {
	if mock.CommitFunc == nil {
		panic("StoreMock.CommitFunc: method is nil but Store.Commit was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		Sd              Sd
	}{
		ContextMoqParam: contextMoqParam,
		Sd:              sd,
	}
	mock.lockCommit.Lock()
	mock.calls.Commit = append(mock.calls.Commit, callInfo)
	mock.lockCommit.Unlock()
	return mock.CommitFunc(contextMoqParam, sd)
}

// CommitCalls gets all the calls that were made to Commit.
// Check the length with:
//
//	len(mockedStore.CommitCalls())
func (mock *StoreMock) CommitCalls() []struct {
	ContextMoqParam context.Context
	Sd              Sd
} {
	var calls []struct {
		ContextMoqParam context.Context
		Sd              Sd
	}
	mock.lockCommit.RLock()
	calls = mock.calls.Commit
	mock.lockCommit.RUnlock()
	return calls
}

// CountAbsences calls CountAbsencesFunc.
func (mock *StoreMock) CountAbsences(ctx context.Context) (int64, error) {
	if mock.CountAbsencesFunc == nil {
		panic("StoreMock.CountAbsencesFunc: method is nil but Store.CountAbsences was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockCountAbsences.Lock()
	mock.calls.CountAbsences = append(mock.calls.CountAbsences, callInfo)
	mock.lockCountAbsences.Unlock()
	return mock.CountAbsencesFunc(ctx)
}

// CountAbsencesCalls gets all the calls that were made to CountAbsences.
// Check the length with:
//
//	len(mockedStore.CountAbsencesCalls())
func (mock *StoreMock) CountAbsencesCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockCountAbsences.RLock()
	calls = mock.calls.CountAbsences
	mock.lockCountAbsences.RUnlock()
	return calls
}

// CountAbsencesWithSd calls CountAbsencesWithSdFunc.
func (mock *StoreMock) CountAbsencesWithSd(ctx context.Context, sd Sd) (int64, error) {
	if mock.CountAbsencesWithSdFunc == nil {
		panic("StoreMock.CountAbsencesWithSdFunc: method is nil but Store.CountAbsencesWithSd was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Sd  Sd
	}{
		Ctx: ctx,
		Sd:  sd,
	}
	mock.lockCountAbsencesWithSd.Lock()
	mock.calls.CountAbsencesWithSd = append(mock.calls.CountAbsencesWithSd, callInfo)
	mock.lockCountAbsencesWithSd.Unlock()
	return mock.CountAbsencesWithSdFunc(ctx, sd)
}

// CountAbsencesWithSdCalls gets all the calls that were made to CountAbsencesWithSd.
// Check the length with:
//
//	len(mockedStore.CountAbsencesWithSdCalls())
func (mock *StoreMock) CountAbsencesWithSdCalls() []struct {
	Ctx context.Context
	Sd  Sd
} {
	var calls []struct {
		Ctx context.Context
		Sd  Sd
	}
	mock.lockCountAbsencesWithSd.RLock()
	calls = mock.calls.CountAbsencesWithSd
	mock.lockCountAbsencesWithSd.RUnlock()
	return calls
}

// CountAttendStatuses calls CountAttendStatusesFunc.
func (mock *StoreMock) CountAttendStatuses(ctx context.Context, where parameter.WhereAttendStatusParam) (int64, error) {
	if mock.CountAttendStatusesFunc == nil {
		panic("StoreMock.CountAttendStatusesFunc: method is nil but Store.CountAttendStatuses was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereAttendStatusParam
	}{
		Ctx:   ctx,
		Where: where,
	}
	mock.lockCountAttendStatuses.Lock()
	mock.calls.CountAttendStatuses = append(mock.calls.CountAttendStatuses, callInfo)
	mock.lockCountAttendStatuses.Unlock()
	return mock.CountAttendStatusesFunc(ctx, where)
}

// CountAttendStatusesCalls gets all the calls that were made to CountAttendStatuses.
// Check the length with:
//
//	len(mockedStore.CountAttendStatusesCalls())
func (mock *StoreMock) CountAttendStatusesCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereAttendStatusParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereAttendStatusParam
	}
	mock.lockCountAttendStatuses.RLock()
	calls = mock.calls.CountAttendStatuses
	mock.lockCountAttendStatuses.RUnlock()
	return calls
}

// CountAttendStatusesWithSd calls CountAttendStatusesWithSdFunc.
func (mock *StoreMock) CountAttendStatusesWithSd(ctx context.Context, sd Sd, where parameter.WhereAttendStatusParam) (int64, error) {
	if mock.CountAttendStatusesWithSdFunc == nil {
		panic("StoreMock.CountAttendStatusesWithSdFunc: method is nil but Store.CountAttendStatusesWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereAttendStatusParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
	}
	mock.lockCountAttendStatusesWithSd.Lock()
	mock.calls.CountAttendStatusesWithSd = append(mock.calls.CountAttendStatusesWithSd, callInfo)
	mock.lockCountAttendStatusesWithSd.Unlock()
	return mock.CountAttendStatusesWithSdFunc(ctx, sd, where)
}

// CountAttendStatusesWithSdCalls gets all the calls that were made to CountAttendStatusesWithSd.
// Check the length with:
//
//	len(mockedStore.CountAttendStatusesWithSdCalls())
func (mock *StoreMock) CountAttendStatusesWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereAttendStatusParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereAttendStatusParam
	}
	mock.lockCountAttendStatusesWithSd.RLock()
	calls = mock.calls.CountAttendStatusesWithSd
	mock.lockCountAttendStatusesWithSd.RUnlock()
	return calls
}

// CreateAbsence calls CreateAbsenceFunc.
func (mock *StoreMock) CreateAbsence(ctx context.Context, param parameter.CreateAbsenceParam) (entity.Absence, error) {
	if mock.CreateAbsenceFunc == nil {
		panic("StoreMock.CreateAbsenceFunc: method is nil but Store.CreateAbsence was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Param parameter.CreateAbsenceParam
	}{
		Ctx:   ctx,
		Param: param,
	}
	mock.lockCreateAbsence.Lock()
	mock.calls.CreateAbsence = append(mock.calls.CreateAbsence, callInfo)
	mock.lockCreateAbsence.Unlock()
	return mock.CreateAbsenceFunc(ctx, param)
}

// CreateAbsenceCalls gets all the calls that were made to CreateAbsence.
// Check the length with:
//
//	len(mockedStore.CreateAbsenceCalls())
func (mock *StoreMock) CreateAbsenceCalls() []struct {
	Ctx   context.Context
	Param parameter.CreateAbsenceParam
} {
	var calls []struct {
		Ctx   context.Context
		Param parameter.CreateAbsenceParam
	}
	mock.lockCreateAbsence.RLock()
	calls = mock.calls.CreateAbsence
	mock.lockCreateAbsence.RUnlock()
	return calls
}

// CreateAbsenceWithSd calls CreateAbsenceWithSdFunc.
func (mock *StoreMock) CreateAbsenceWithSd(ctx context.Context, sd Sd, param parameter.CreateAbsenceParam) (entity.Absence, error) {
	if mock.CreateAbsenceWithSdFunc == nil {
		panic("StoreMock.CreateAbsenceWithSdFunc: method is nil but Store.CreateAbsenceWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateAbsenceParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Param: param,
	}
	mock.lockCreateAbsenceWithSd.Lock()
	mock.calls.CreateAbsenceWithSd = append(mock.calls.CreateAbsenceWithSd, callInfo)
	mock.lockCreateAbsenceWithSd.Unlock()
	return mock.CreateAbsenceWithSdFunc(ctx, sd, param)
}

// CreateAbsenceWithSdCalls gets all the calls that were made to CreateAbsenceWithSd.
// Check the length with:
//
//	len(mockedStore.CreateAbsenceWithSdCalls())
func (mock *StoreMock) CreateAbsenceWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Param parameter.CreateAbsenceParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateAbsenceParam
	}
	mock.lockCreateAbsenceWithSd.RLock()
	calls = mock.calls.CreateAbsenceWithSd
	mock.lockCreateAbsenceWithSd.RUnlock()
	return calls
}

// CreateAbsences calls CreateAbsencesFunc.
func (mock *StoreMock) CreateAbsences(ctx context.Context, params []parameter.CreateAbsenceParam) (int64, error) {
	if mock.CreateAbsencesFunc == nil {
		panic("StoreMock.CreateAbsencesFunc: method is nil but Store.CreateAbsences was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params []parameter.CreateAbsenceParam
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockCreateAbsences.Lock()
	mock.calls.CreateAbsences = append(mock.calls.CreateAbsences, callInfo)
	mock.lockCreateAbsences.Unlock()
	return mock.CreateAbsencesFunc(ctx, params)
}

// CreateAbsencesCalls gets all the calls that were made to CreateAbsences.
// Check the length with:
//
//	len(mockedStore.CreateAbsencesCalls())
func (mock *StoreMock) CreateAbsencesCalls() []struct {
	Ctx    context.Context
	Params []parameter.CreateAbsenceParam
} {
	var calls []struct {
		Ctx    context.Context
		Params []parameter.CreateAbsenceParam
	}
	mock.lockCreateAbsences.RLock()
	calls = mock.calls.CreateAbsences
	mock.lockCreateAbsences.RUnlock()
	return calls
}

// CreateAbsencesWithSd calls CreateAbsencesWithSdFunc.
func (mock *StoreMock) CreateAbsencesWithSd(ctx context.Context, sd Sd, params []parameter.CreateAbsenceParam) (int64, error) {
	if mock.CreateAbsencesWithSdFunc == nil {
		panic("StoreMock.CreateAbsencesWithSdFunc: method is nil but Store.CreateAbsencesWithSd was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateAbsenceParam
	}{
		Ctx:    ctx,
		Sd:     sd,
		Params: params,
	}
	mock.lockCreateAbsencesWithSd.Lock()
	mock.calls.CreateAbsencesWithSd = append(mock.calls.CreateAbsencesWithSd, callInfo)
	mock.lockCreateAbsencesWithSd.Unlock()
	return mock.CreateAbsencesWithSdFunc(ctx, sd, params)
}

// CreateAbsencesWithSdCalls gets all the calls that were made to CreateAbsencesWithSd.
// Check the length with:
//
//	len(mockedStore.CreateAbsencesWithSdCalls())
func (mock *StoreMock) CreateAbsencesWithSdCalls() []struct {
	Ctx    context.Context
	Sd     Sd
	Params []parameter.CreateAbsenceParam
} {
	var calls []struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateAbsenceParam
	}
	mock.lockCreateAbsencesWithSd.RLock()
	calls = mock.calls.CreateAbsencesWithSd
	mock.lockCreateAbsencesWithSd.RUnlock()
	return calls
}

// CreateAttendStatus calls CreateAttendStatusFunc.
func (mock *StoreMock) CreateAttendStatus(ctx context.Context, param parameter.CreateAttendStatusParam) (entity.AttendStatus, error) {
	if mock.CreateAttendStatusFunc == nil {
		panic("StoreMock.CreateAttendStatusFunc: method is nil but Store.CreateAttendStatus was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Param parameter.CreateAttendStatusParam
	}{
		Ctx:   ctx,
		Param: param,
	}
	mock.lockCreateAttendStatus.Lock()
	mock.calls.CreateAttendStatus = append(mock.calls.CreateAttendStatus, callInfo)
	mock.lockCreateAttendStatus.Unlock()
	return mock.CreateAttendStatusFunc(ctx, param)
}

// CreateAttendStatusCalls gets all the calls that were made to CreateAttendStatus.
// Check the length with:
//
//	len(mockedStore.CreateAttendStatusCalls())
func (mock *StoreMock) CreateAttendStatusCalls() []struct {
	Ctx   context.Context
	Param parameter.CreateAttendStatusParam
} {
	var calls []struct {
		Ctx   context.Context
		Param parameter.CreateAttendStatusParam
	}
	mock.lockCreateAttendStatus.RLock()
	calls = mock.calls.CreateAttendStatus
	mock.lockCreateAttendStatus.RUnlock()
	return calls
}

// CreateAttendStatusWithSd calls CreateAttendStatusWithSdFunc.
func (mock *StoreMock) CreateAttendStatusWithSd(ctx context.Context, sd Sd, param parameter.CreateAttendStatusParam) (entity.AttendStatus, error) {
	if mock.CreateAttendStatusWithSdFunc == nil {
		panic("StoreMock.CreateAttendStatusWithSdFunc: method is nil but Store.CreateAttendStatusWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateAttendStatusParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Param: param,
	}
	mock.lockCreateAttendStatusWithSd.Lock()
	mock.calls.CreateAttendStatusWithSd = append(mock.calls.CreateAttendStatusWithSd, callInfo)
	mock.lockCreateAttendStatusWithSd.Unlock()
	return mock.CreateAttendStatusWithSdFunc(ctx, sd, param)
}

// CreateAttendStatusWithSdCalls gets all the calls that were made to CreateAttendStatusWithSd.
// Check the length with:
//
//	len(mockedStore.CreateAttendStatusWithSdCalls())
func (mock *StoreMock) CreateAttendStatusWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Param parameter.CreateAttendStatusParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Param parameter.CreateAttendStatusParam
	}
	mock.lockCreateAttendStatusWithSd.RLock()
	calls = mock.calls.CreateAttendStatusWithSd
	mock.lockCreateAttendStatusWithSd.RUnlock()
	return calls
}

// CreateAttendStatuses calls CreateAttendStatusesFunc.
func (mock *StoreMock) CreateAttendStatuses(ctx context.Context, params []parameter.CreateAttendStatusParam) (int64, error) {
	if mock.CreateAttendStatusesFunc == nil {
		panic("StoreMock.CreateAttendStatusesFunc: method is nil but Store.CreateAttendStatuses was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params []parameter.CreateAttendStatusParam
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockCreateAttendStatuses.Lock()
	mock.calls.CreateAttendStatuses = append(mock.calls.CreateAttendStatuses, callInfo)
	mock.lockCreateAttendStatuses.Unlock()
	return mock.CreateAttendStatusesFunc(ctx, params)
}

// CreateAttendStatusesCalls gets all the calls that were made to CreateAttendStatuses.
// Check the length with:
//
//	len(mockedStore.CreateAttendStatusesCalls())
func (mock *StoreMock) CreateAttendStatusesCalls() []struct {
	Ctx    context.Context
	Params []parameter.CreateAttendStatusParam
} {
	var calls []struct {
		Ctx    context.Context
		Params []parameter.CreateAttendStatusParam
	}
	mock.lockCreateAttendStatuses.RLock()
	calls = mock.calls.CreateAttendStatuses
	mock.lockCreateAttendStatuses.RUnlock()
	return calls
}

// CreateAttendStatusesWithSd calls CreateAttendStatusesWithSdFunc.
func (mock *StoreMock) CreateAttendStatusesWithSd(ctx context.Context, sd Sd, params []parameter.CreateAttendStatusParam) (int64, error) {
	if mock.CreateAttendStatusesWithSdFunc == nil {
		panic("StoreMock.CreateAttendStatusesWithSdFunc: method is nil but Store.CreateAttendStatusesWithSd was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateAttendStatusParam
	}{
		Ctx:    ctx,
		Sd:     sd,
		Params: params,
	}
	mock.lockCreateAttendStatusesWithSd.Lock()
	mock.calls.CreateAttendStatusesWithSd = append(mock.calls.CreateAttendStatusesWithSd, callInfo)
	mock.lockCreateAttendStatusesWithSd.Unlock()
	return mock.CreateAttendStatusesWithSdFunc(ctx, sd, params)
}

// CreateAttendStatusesWithSdCalls gets all the calls that were made to CreateAttendStatusesWithSd.
// Check the length with:
//
//	len(mockedStore.CreateAttendStatusesWithSdCalls())
func (mock *StoreMock) CreateAttendStatusesWithSdCalls() []struct {
	Ctx    context.Context
	Sd     Sd
	Params []parameter.CreateAttendStatusParam
} {
	var calls []struct {
		Ctx    context.Context
		Sd     Sd
		Params []parameter.CreateAttendStatusParam
	}
	mock.lockCreateAttendStatusesWithSd.RLock()
	calls = mock.calls.CreateAttendStatusesWithSd
	mock.lockCreateAttendStatusesWithSd.RUnlock()
	return calls
}

// DeleteAbsence calls DeleteAbsenceFunc.
func (mock *StoreMock) DeleteAbsence(ctx context.Context, absenceID uuid.UUID) error {
	if mock.DeleteAbsenceFunc == nil {
		panic("StoreMock.DeleteAbsenceFunc: method is nil but Store.DeleteAbsence was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		AbsenceID uuid.UUID
	}{
		Ctx:       ctx,
		AbsenceID: absenceID,
	}
	mock.lockDeleteAbsence.Lock()
	mock.calls.DeleteAbsence = append(mock.calls.DeleteAbsence, callInfo)
	mock.lockDeleteAbsence.Unlock()
	return mock.DeleteAbsenceFunc(ctx, absenceID)
}

// DeleteAbsenceCalls gets all the calls that were made to DeleteAbsence.
// Check the length with:
//
//	len(mockedStore.DeleteAbsenceCalls())
func (mock *StoreMock) DeleteAbsenceCalls() []struct {
	Ctx       context.Context
	AbsenceID uuid.UUID
} {
	var calls []struct {
		Ctx       context.Context
		AbsenceID uuid.UUID
	}
	mock.lockDeleteAbsence.RLock()
	calls = mock.calls.DeleteAbsence
	mock.lockDeleteAbsence.RUnlock()
	return calls
}

// DeleteAbsenceWithSd calls DeleteAbsenceWithSdFunc.
func (mock *StoreMock) DeleteAbsenceWithSd(ctx context.Context, sd Sd, absenceID uuid.UUID) error {
	if mock.DeleteAbsenceWithSdFunc == nil {
		panic("StoreMock.DeleteAbsenceWithSdFunc: method is nil but Store.DeleteAbsenceWithSd was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Sd        Sd
		AbsenceID uuid.UUID
	}{
		Ctx:       ctx,
		Sd:        sd,
		AbsenceID: absenceID,
	}
	mock.lockDeleteAbsenceWithSd.Lock()
	mock.calls.DeleteAbsenceWithSd = append(mock.calls.DeleteAbsenceWithSd, callInfo)
	mock.lockDeleteAbsenceWithSd.Unlock()
	return mock.DeleteAbsenceWithSdFunc(ctx, sd, absenceID)
}

// DeleteAbsenceWithSdCalls gets all the calls that were made to DeleteAbsenceWithSd.
// Check the length with:
//
//	len(mockedStore.DeleteAbsenceWithSdCalls())
func (mock *StoreMock) DeleteAbsenceWithSdCalls() []struct {
	Ctx       context.Context
	Sd        Sd
	AbsenceID uuid.UUID
} {
	var calls []struct {
		Ctx       context.Context
		Sd        Sd
		AbsenceID uuid.UUID
	}
	mock.lockDeleteAbsenceWithSd.RLock()
	calls = mock.calls.DeleteAbsenceWithSd
	mock.lockDeleteAbsenceWithSd.RUnlock()
	return calls
}

// DeleteAttendStatus calls DeleteAttendStatusFunc.
func (mock *StoreMock) DeleteAttendStatus(ctx context.Context, attendStatusID uuid.UUID) error {
	if mock.DeleteAttendStatusFunc == nil {
		panic("StoreMock.DeleteAttendStatusFunc: method is nil but Store.DeleteAttendStatus was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		AttendStatusID uuid.UUID
	}{
		Ctx:            ctx,
		AttendStatusID: attendStatusID,
	}
	mock.lockDeleteAttendStatus.Lock()
	mock.calls.DeleteAttendStatus = append(mock.calls.DeleteAttendStatus, callInfo)
	mock.lockDeleteAttendStatus.Unlock()
	return mock.DeleteAttendStatusFunc(ctx, attendStatusID)
}

// DeleteAttendStatusCalls gets all the calls that were made to DeleteAttendStatus.
// Check the length with:
//
//	len(mockedStore.DeleteAttendStatusCalls())
func (mock *StoreMock) DeleteAttendStatusCalls() []struct {
	Ctx            context.Context
	AttendStatusID uuid.UUID
} {
	var calls []struct {
		Ctx            context.Context
		AttendStatusID uuid.UUID
	}
	mock.lockDeleteAttendStatus.RLock()
	calls = mock.calls.DeleteAttendStatus
	mock.lockDeleteAttendStatus.RUnlock()
	return calls
}

// DeleteAttendStatusByKey calls DeleteAttendStatusByKeyFunc.
func (mock *StoreMock) DeleteAttendStatusByKey(ctx context.Context, key string) error {
	if mock.DeleteAttendStatusByKeyFunc == nil {
		panic("StoreMock.DeleteAttendStatusByKeyFunc: method is nil but Store.DeleteAttendStatusByKey was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockDeleteAttendStatusByKey.Lock()
	mock.calls.DeleteAttendStatusByKey = append(mock.calls.DeleteAttendStatusByKey, callInfo)
	mock.lockDeleteAttendStatusByKey.Unlock()
	return mock.DeleteAttendStatusByKeyFunc(ctx, key)
}

// DeleteAttendStatusByKeyCalls gets all the calls that were made to DeleteAttendStatusByKey.
// Check the length with:
//
//	len(mockedStore.DeleteAttendStatusByKeyCalls())
func (mock *StoreMock) DeleteAttendStatusByKeyCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockDeleteAttendStatusByKey.RLock()
	calls = mock.calls.DeleteAttendStatusByKey
	mock.lockDeleteAttendStatusByKey.RUnlock()
	return calls
}

// DeleteAttendStatusByKeyWithSd calls DeleteAttendStatusByKeyWithSdFunc.
func (mock *StoreMock) DeleteAttendStatusByKeyWithSd(ctx context.Context, sd Sd, key string) error {
	if mock.DeleteAttendStatusByKeyWithSdFunc == nil {
		panic("StoreMock.DeleteAttendStatusByKeyWithSdFunc: method is nil but Store.DeleteAttendStatusByKeyWithSd was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}{
		Ctx: ctx,
		Sd:  sd,
		Key: key,
	}
	mock.lockDeleteAttendStatusByKeyWithSd.Lock()
	mock.calls.DeleteAttendStatusByKeyWithSd = append(mock.calls.DeleteAttendStatusByKeyWithSd, callInfo)
	mock.lockDeleteAttendStatusByKeyWithSd.Unlock()
	return mock.DeleteAttendStatusByKeyWithSdFunc(ctx, sd, key)
}

// DeleteAttendStatusByKeyWithSdCalls gets all the calls that were made to DeleteAttendStatusByKeyWithSd.
// Check the length with:
//
//	len(mockedStore.DeleteAttendStatusByKeyWithSdCalls())
func (mock *StoreMock) DeleteAttendStatusByKeyWithSdCalls() []struct {
	Ctx context.Context
	Sd  Sd
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}
	mock.lockDeleteAttendStatusByKeyWithSd.RLock()
	calls = mock.calls.DeleteAttendStatusByKeyWithSd
	mock.lockDeleteAttendStatusByKeyWithSd.RUnlock()
	return calls
}

// DeleteAttendStatusWithSd calls DeleteAttendStatusWithSdFunc.
func (mock *StoreMock) DeleteAttendStatusWithSd(ctx context.Context, sd Sd, attendStatusID uuid.UUID) error {
	if mock.DeleteAttendStatusWithSdFunc == nil {
		panic("StoreMock.DeleteAttendStatusWithSdFunc: method is nil but Store.DeleteAttendStatusWithSd was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		Sd             Sd
		AttendStatusID uuid.UUID
	}{
		Ctx:            ctx,
		Sd:             sd,
		AttendStatusID: attendStatusID,
	}
	mock.lockDeleteAttendStatusWithSd.Lock()
	mock.calls.DeleteAttendStatusWithSd = append(mock.calls.DeleteAttendStatusWithSd, callInfo)
	mock.lockDeleteAttendStatusWithSd.Unlock()
	return mock.DeleteAttendStatusWithSdFunc(ctx, sd, attendStatusID)
}

// DeleteAttendStatusWithSdCalls gets all the calls that were made to DeleteAttendStatusWithSd.
// Check the length with:
//
//	len(mockedStore.DeleteAttendStatusWithSdCalls())
func (mock *StoreMock) DeleteAttendStatusWithSdCalls() []struct {
	Ctx            context.Context
	Sd             Sd
	AttendStatusID uuid.UUID
} {
	var calls []struct {
		Ctx            context.Context
		Sd             Sd
		AttendStatusID uuid.UUID
	}
	mock.lockDeleteAttendStatusWithSd.RLock()
	calls = mock.calls.DeleteAttendStatusWithSd
	mock.lockDeleteAttendStatusWithSd.RUnlock()
	return calls
}

// FindAbsenceByID calls FindAbsenceByIDFunc.
func (mock *StoreMock) FindAbsenceByID(ctx context.Context, absenceID uuid.UUID) (entity.Absence, error) {
	if mock.FindAbsenceByIDFunc == nil {
		panic("StoreMock.FindAbsenceByIDFunc: method is nil but Store.FindAbsenceByID was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		AbsenceID uuid.UUID
	}{
		Ctx:       ctx,
		AbsenceID: absenceID,
	}
	mock.lockFindAbsenceByID.Lock()
	mock.calls.FindAbsenceByID = append(mock.calls.FindAbsenceByID, callInfo)
	mock.lockFindAbsenceByID.Unlock()
	return mock.FindAbsenceByIDFunc(ctx, absenceID)
}

// FindAbsenceByIDCalls gets all the calls that were made to FindAbsenceByID.
// Check the length with:
//
//	len(mockedStore.FindAbsenceByIDCalls())
func (mock *StoreMock) FindAbsenceByIDCalls() []struct {
	Ctx       context.Context
	AbsenceID uuid.UUID
} {
	var calls []struct {
		Ctx       context.Context
		AbsenceID uuid.UUID
	}
	mock.lockFindAbsenceByID.RLock()
	calls = mock.calls.FindAbsenceByID
	mock.lockFindAbsenceByID.RUnlock()
	return calls
}

// FindAbsenceByIDWithSd calls FindAbsenceByIDWithSdFunc.
func (mock *StoreMock) FindAbsenceByIDWithSd(ctx context.Context, sd Sd, absenceID uuid.UUID) (entity.Absence, error) {
	if mock.FindAbsenceByIDWithSdFunc == nil {
		panic("StoreMock.FindAbsenceByIDWithSdFunc: method is nil but Store.FindAbsenceByIDWithSd was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Sd        Sd
		AbsenceID uuid.UUID
	}{
		Ctx:       ctx,
		Sd:        sd,
		AbsenceID: absenceID,
	}
	mock.lockFindAbsenceByIDWithSd.Lock()
	mock.calls.FindAbsenceByIDWithSd = append(mock.calls.FindAbsenceByIDWithSd, callInfo)
	mock.lockFindAbsenceByIDWithSd.Unlock()
	return mock.FindAbsenceByIDWithSdFunc(ctx, sd, absenceID)
}

// FindAbsenceByIDWithSdCalls gets all the calls that were made to FindAbsenceByIDWithSd.
// Check the length with:
//
//	len(mockedStore.FindAbsenceByIDWithSdCalls())
func (mock *StoreMock) FindAbsenceByIDWithSdCalls() []struct {
	Ctx       context.Context
	Sd        Sd
	AbsenceID uuid.UUID
} {
	var calls []struct {
		Ctx       context.Context
		Sd        Sd
		AbsenceID uuid.UUID
	}
	mock.lockFindAbsenceByIDWithSd.RLock()
	calls = mock.calls.FindAbsenceByIDWithSd
	mock.lockFindAbsenceByIDWithSd.RUnlock()
	return calls
}

// FindAttendStatusByID calls FindAttendStatusByIDFunc.
func (mock *StoreMock) FindAttendStatusByID(ctx context.Context, attendStatusID uuid.UUID) (entity.AttendStatus, error) {
	if mock.FindAttendStatusByIDFunc == nil {
		panic("StoreMock.FindAttendStatusByIDFunc: method is nil but Store.FindAttendStatusByID was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		AttendStatusID uuid.UUID
	}{
		Ctx:            ctx,
		AttendStatusID: attendStatusID,
	}
	mock.lockFindAttendStatusByID.Lock()
	mock.calls.FindAttendStatusByID = append(mock.calls.FindAttendStatusByID, callInfo)
	mock.lockFindAttendStatusByID.Unlock()
	return mock.FindAttendStatusByIDFunc(ctx, attendStatusID)
}

// FindAttendStatusByIDCalls gets all the calls that were made to FindAttendStatusByID.
// Check the length with:
//
//	len(mockedStore.FindAttendStatusByIDCalls())
func (mock *StoreMock) FindAttendStatusByIDCalls() []struct {
	Ctx            context.Context
	AttendStatusID uuid.UUID
} {
	var calls []struct {
		Ctx            context.Context
		AttendStatusID uuid.UUID
	}
	mock.lockFindAttendStatusByID.RLock()
	calls = mock.calls.FindAttendStatusByID
	mock.lockFindAttendStatusByID.RUnlock()
	return calls
}

// FindAttendStatusByIDWithSd calls FindAttendStatusByIDWithSdFunc.
func (mock *StoreMock) FindAttendStatusByIDWithSd(ctx context.Context, sd Sd, attendStatusID uuid.UUID) (entity.AttendStatus, error) {
	if mock.FindAttendStatusByIDWithSdFunc == nil {
		panic("StoreMock.FindAttendStatusByIDWithSdFunc: method is nil but Store.FindAttendStatusByIDWithSd was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		Sd             Sd
		AttendStatusID uuid.UUID
	}{
		Ctx:            ctx,
		Sd:             sd,
		AttendStatusID: attendStatusID,
	}
	mock.lockFindAttendStatusByIDWithSd.Lock()
	mock.calls.FindAttendStatusByIDWithSd = append(mock.calls.FindAttendStatusByIDWithSd, callInfo)
	mock.lockFindAttendStatusByIDWithSd.Unlock()
	return mock.FindAttendStatusByIDWithSdFunc(ctx, sd, attendStatusID)
}

// FindAttendStatusByIDWithSdCalls gets all the calls that were made to FindAttendStatusByIDWithSd.
// Check the length with:
//
//	len(mockedStore.FindAttendStatusByIDWithSdCalls())
func (mock *StoreMock) FindAttendStatusByIDWithSdCalls() []struct {
	Ctx            context.Context
	Sd             Sd
	AttendStatusID uuid.UUID
} {
	var calls []struct {
		Ctx            context.Context
		Sd             Sd
		AttendStatusID uuid.UUID
	}
	mock.lockFindAttendStatusByIDWithSd.RLock()
	calls = mock.calls.FindAttendStatusByIDWithSd
	mock.lockFindAttendStatusByIDWithSd.RUnlock()
	return calls
}

// FindAttendStatusByKey calls FindAttendStatusByKeyFunc.
func (mock *StoreMock) FindAttendStatusByKey(ctx context.Context, key string) (entity.AttendStatus, error) {
	if mock.FindAttendStatusByKeyFunc == nil {
		panic("StoreMock.FindAttendStatusByKeyFunc: method is nil but Store.FindAttendStatusByKey was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockFindAttendStatusByKey.Lock()
	mock.calls.FindAttendStatusByKey = append(mock.calls.FindAttendStatusByKey, callInfo)
	mock.lockFindAttendStatusByKey.Unlock()
	return mock.FindAttendStatusByKeyFunc(ctx, key)
}

// FindAttendStatusByKeyCalls gets all the calls that were made to FindAttendStatusByKey.
// Check the length with:
//
//	len(mockedStore.FindAttendStatusByKeyCalls())
func (mock *StoreMock) FindAttendStatusByKeyCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockFindAttendStatusByKey.RLock()
	calls = mock.calls.FindAttendStatusByKey
	mock.lockFindAttendStatusByKey.RUnlock()
	return calls
}

// FindAttendStatusByKeyWithSd calls FindAttendStatusByKeyWithSdFunc.
func (mock *StoreMock) FindAttendStatusByKeyWithSd(ctx context.Context, sd Sd, key string) (entity.AttendStatus, error) {
	if mock.FindAttendStatusByKeyWithSdFunc == nil {
		panic("StoreMock.FindAttendStatusByKeyWithSdFunc: method is nil but Store.FindAttendStatusByKeyWithSd was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}{
		Ctx: ctx,
		Sd:  sd,
		Key: key,
	}
	mock.lockFindAttendStatusByKeyWithSd.Lock()
	mock.calls.FindAttendStatusByKeyWithSd = append(mock.calls.FindAttendStatusByKeyWithSd, callInfo)
	mock.lockFindAttendStatusByKeyWithSd.Unlock()
	return mock.FindAttendStatusByKeyWithSdFunc(ctx, sd, key)
}

// FindAttendStatusByKeyWithSdCalls gets all the calls that were made to FindAttendStatusByKeyWithSd.
// Check the length with:
//
//	len(mockedStore.FindAttendStatusByKeyWithSdCalls())
func (mock *StoreMock) FindAttendStatusByKeyWithSdCalls() []struct {
	Ctx context.Context
	Sd  Sd
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Sd  Sd
		Key string
	}
	mock.lockFindAttendStatusByKeyWithSd.RLock()
	calls = mock.calls.FindAttendStatusByKeyWithSd
	mock.lockFindAttendStatusByKeyWithSd.RUnlock()
	return calls
}

// GetAbsences calls GetAbsencesFunc.
func (mock *StoreMock) GetAbsences(ctx context.Context, order parameter.AbsenceOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Absence], error) {
	if mock.GetAbsencesFunc == nil {
		panic("StoreMock.GetAbsencesFunc: method is nil but Store.GetAbsences was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Order parameter.AbsenceOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetAbsences.Lock()
	mock.calls.GetAbsences = append(mock.calls.GetAbsences, callInfo)
	mock.lockGetAbsences.Unlock()
	return mock.GetAbsencesFunc(ctx, order, np, cp, wc)
}

// GetAbsencesCalls gets all the calls that were made to GetAbsences.
// Check the length with:
//
//	len(mockedStore.GetAbsencesCalls())
func (mock *StoreMock) GetAbsencesCalls() []struct {
	Ctx   context.Context
	Order parameter.AbsenceOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Order parameter.AbsenceOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetAbsences.RLock()
	calls = mock.calls.GetAbsences
	mock.lockGetAbsences.RUnlock()
	return calls
}

// GetAbsencesWithSd calls GetAbsencesWithSdFunc.
func (mock *StoreMock) GetAbsencesWithSd(ctx context.Context, sd Sd, order parameter.AbsenceOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.Absence], error) {
	if mock.GetAbsencesWithSdFunc == nil {
		panic("StoreMock.GetAbsencesWithSdFunc: method is nil but Store.GetAbsencesWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Order parameter.AbsenceOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetAbsencesWithSd.Lock()
	mock.calls.GetAbsencesWithSd = append(mock.calls.GetAbsencesWithSd, callInfo)
	mock.lockGetAbsencesWithSd.Unlock()
	return mock.GetAbsencesWithSdFunc(ctx, sd, order, np, cp, wc)
}

// GetAbsencesWithSdCalls gets all the calls that were made to GetAbsencesWithSd.
// Check the length with:
//
//	len(mockedStore.GetAbsencesWithSdCalls())
func (mock *StoreMock) GetAbsencesWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Order parameter.AbsenceOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Order parameter.AbsenceOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetAbsencesWithSd.RLock()
	calls = mock.calls.GetAbsencesWithSd
	mock.lockGetAbsencesWithSd.RUnlock()
	return calls
}

// GetAttendStatuses calls GetAttendStatusesFunc.
func (mock *StoreMock) GetAttendStatuses(ctx context.Context, where parameter.WhereAttendStatusParam, order parameter.AttendStatusOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.AttendStatus], error) {
	if mock.GetAttendStatusesFunc == nil {
		panic("StoreMock.GetAttendStatusesFunc: method is nil but Store.GetAttendStatuses was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Where parameter.WhereAttendStatusParam
		Order parameter.AttendStatusOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetAttendStatuses.Lock()
	mock.calls.GetAttendStatuses = append(mock.calls.GetAttendStatuses, callInfo)
	mock.lockGetAttendStatuses.Unlock()
	return mock.GetAttendStatusesFunc(ctx, where, order, np, cp, wc)
}

// GetAttendStatusesCalls gets all the calls that were made to GetAttendStatuses.
// Check the length with:
//
//	len(mockedStore.GetAttendStatusesCalls())
func (mock *StoreMock) GetAttendStatusesCalls() []struct {
	Ctx   context.Context
	Where parameter.WhereAttendStatusParam
	Order parameter.AttendStatusOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Where parameter.WhereAttendStatusParam
		Order parameter.AttendStatusOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetAttendStatuses.RLock()
	calls = mock.calls.GetAttendStatuses
	mock.lockGetAttendStatuses.RUnlock()
	return calls
}

// GetAttendStatusesWithSd calls GetAttendStatusesWithSdFunc.
func (mock *StoreMock) GetAttendStatusesWithSd(ctx context.Context, sd Sd, where parameter.WhereAttendStatusParam, order parameter.AttendStatusOrderMethod, np NumberedPaginationParam, cp CursorPaginationParam, wc WithCountParam) (ListResult[entity.AttendStatus], error) {
	if mock.GetAttendStatusesWithSdFunc == nil {
		panic("StoreMock.GetAttendStatusesWithSdFunc: method is nil but Store.GetAttendStatusesWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereAttendStatusParam
		Order parameter.AttendStatusOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}{
		Ctx:   ctx,
		Sd:    sd,
		Where: where,
		Order: order,
		Np:    np,
		Cp:    cp,
		Wc:    wc,
	}
	mock.lockGetAttendStatusesWithSd.Lock()
	mock.calls.GetAttendStatusesWithSd = append(mock.calls.GetAttendStatusesWithSd, callInfo)
	mock.lockGetAttendStatusesWithSd.Unlock()
	return mock.GetAttendStatusesWithSdFunc(ctx, sd, where, order, np, cp, wc)
}

// GetAttendStatusesWithSdCalls gets all the calls that were made to GetAttendStatusesWithSd.
// Check the length with:
//
//	len(mockedStore.GetAttendStatusesWithSdCalls())
func (mock *StoreMock) GetAttendStatusesWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Where parameter.WhereAttendStatusParam
	Order parameter.AttendStatusOrderMethod
	Np    NumberedPaginationParam
	Cp    CursorPaginationParam
	Wc    WithCountParam
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Where parameter.WhereAttendStatusParam
		Order parameter.AttendStatusOrderMethod
		Np    NumberedPaginationParam
		Cp    CursorPaginationParam
		Wc    WithCountParam
	}
	mock.lockGetAttendStatusesWithSd.RLock()
	calls = mock.calls.GetAttendStatusesWithSd
	mock.lockGetAttendStatusesWithSd.RUnlock()
	return calls
}

// GetPluralAbsences calls GetPluralAbsencesFunc.
func (mock *StoreMock) GetPluralAbsences(ctx context.Context, ids []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.Absence], error) {
	if mock.GetPluralAbsencesFunc == nil {
		panic("StoreMock.GetPluralAbsencesFunc: method is nil but Store.GetPluralAbsences was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Ids []uuid.UUID
		Np  NumberedPaginationParam
	}{
		Ctx: ctx,
		Ids: ids,
		Np:  np,
	}
	mock.lockGetPluralAbsences.Lock()
	mock.calls.GetPluralAbsences = append(mock.calls.GetPluralAbsences, callInfo)
	mock.lockGetPluralAbsences.Unlock()
	return mock.GetPluralAbsencesFunc(ctx, ids, np)
}

// GetPluralAbsencesCalls gets all the calls that were made to GetPluralAbsences.
// Check the length with:
//
//	len(mockedStore.GetPluralAbsencesCalls())
func (mock *StoreMock) GetPluralAbsencesCalls() []struct {
	Ctx context.Context
	Ids []uuid.UUID
	Np  NumberedPaginationParam
} {
	var calls []struct {
		Ctx context.Context
		Ids []uuid.UUID
		Np  NumberedPaginationParam
	}
	mock.lockGetPluralAbsences.RLock()
	calls = mock.calls.GetPluralAbsences
	mock.lockGetPluralAbsences.RUnlock()
	return calls
}

// GetPluralAbsencesWithSd calls GetPluralAbsencesWithSdFunc.
func (mock *StoreMock) GetPluralAbsencesWithSd(ctx context.Context, sd Sd, ids []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.Absence], error) {
	if mock.GetPluralAbsencesWithSdFunc == nil {
		panic("StoreMock.GetPluralAbsencesWithSdFunc: method is nil but Store.GetPluralAbsencesWithSd was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Sd  Sd
		Ids []uuid.UUID
		Np  NumberedPaginationParam
	}{
		Ctx: ctx,
		Sd:  sd,
		Ids: ids,
		Np:  np,
	}
	mock.lockGetPluralAbsencesWithSd.Lock()
	mock.calls.GetPluralAbsencesWithSd = append(mock.calls.GetPluralAbsencesWithSd, callInfo)
	mock.lockGetPluralAbsencesWithSd.Unlock()
	return mock.GetPluralAbsencesWithSdFunc(ctx, sd, ids, np)
}

// GetPluralAbsencesWithSdCalls gets all the calls that were made to GetPluralAbsencesWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralAbsencesWithSdCalls())
func (mock *StoreMock) GetPluralAbsencesWithSdCalls() []struct {
	Ctx context.Context
	Sd  Sd
	Ids []uuid.UUID
	Np  NumberedPaginationParam
} {
	var calls []struct {
		Ctx context.Context
		Sd  Sd
		Ids []uuid.UUID
		Np  NumberedPaginationParam
	}
	mock.lockGetPluralAbsencesWithSd.RLock()
	calls = mock.calls.GetPluralAbsencesWithSd
	mock.lockGetPluralAbsencesWithSd.RUnlock()
	return calls
}

// GetPluralAttendStatuses calls GetPluralAttendStatusesFunc.
func (mock *StoreMock) GetPluralAttendStatuses(ctx context.Context, AttendStatusIDs []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.AttendStatus], error) {
	if mock.GetPluralAttendStatusesFunc == nil {
		panic("StoreMock.GetPluralAttendStatusesFunc: method is nil but Store.GetPluralAttendStatuses was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		AttendStatusIDs []uuid.UUID
		Np              NumberedPaginationParam
	}{
		Ctx:             ctx,
		AttendStatusIDs: AttendStatusIDs,
		Np:              np,
	}
	mock.lockGetPluralAttendStatuses.Lock()
	mock.calls.GetPluralAttendStatuses = append(mock.calls.GetPluralAttendStatuses, callInfo)
	mock.lockGetPluralAttendStatuses.Unlock()
	return mock.GetPluralAttendStatusesFunc(ctx, AttendStatusIDs, np)
}

// GetPluralAttendStatusesCalls gets all the calls that were made to GetPluralAttendStatuses.
// Check the length with:
//
//	len(mockedStore.GetPluralAttendStatusesCalls())
func (mock *StoreMock) GetPluralAttendStatusesCalls() []struct {
	Ctx             context.Context
	AttendStatusIDs []uuid.UUID
	Np              NumberedPaginationParam
} {
	var calls []struct {
		Ctx             context.Context
		AttendStatusIDs []uuid.UUID
		Np              NumberedPaginationParam
	}
	mock.lockGetPluralAttendStatuses.RLock()
	calls = mock.calls.GetPluralAttendStatuses
	mock.lockGetPluralAttendStatuses.RUnlock()
	return calls
}

// GetPluralAttendStatusesWithSd calls GetPluralAttendStatusesWithSdFunc.
func (mock *StoreMock) GetPluralAttendStatusesWithSd(ctx context.Context, sd Sd, AttendStatusIDs []uuid.UUID, np NumberedPaginationParam) (ListResult[entity.AttendStatus], error) {
	if mock.GetPluralAttendStatusesWithSdFunc == nil {
		panic("StoreMock.GetPluralAttendStatusesWithSdFunc: method is nil but Store.GetPluralAttendStatusesWithSd was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		Sd              Sd
		AttendStatusIDs []uuid.UUID
		Np              NumberedPaginationParam
	}{
		Ctx:             ctx,
		Sd:              sd,
		AttendStatusIDs: AttendStatusIDs,
		Np:              np,
	}
	mock.lockGetPluralAttendStatusesWithSd.Lock()
	mock.calls.GetPluralAttendStatusesWithSd = append(mock.calls.GetPluralAttendStatusesWithSd, callInfo)
	mock.lockGetPluralAttendStatusesWithSd.Unlock()
	return mock.GetPluralAttendStatusesWithSdFunc(ctx, sd, AttendStatusIDs, np)
}

// GetPluralAttendStatusesWithSdCalls gets all the calls that were made to GetPluralAttendStatusesWithSd.
// Check the length with:
//
//	len(mockedStore.GetPluralAttendStatusesWithSdCalls())
func (mock *StoreMock) GetPluralAttendStatusesWithSdCalls() []struct {
	Ctx             context.Context
	Sd              Sd
	AttendStatusIDs []uuid.UUID
	Np              NumberedPaginationParam
} {
	var calls []struct {
		Ctx             context.Context
		Sd              Sd
		AttendStatusIDs []uuid.UUID
		Np              NumberedPaginationParam
	}
	mock.lockGetPluralAttendStatusesWithSd.RLock()
	calls = mock.calls.GetPluralAttendStatusesWithSd
	mock.lockGetPluralAttendStatusesWithSd.RUnlock()
	return calls
}

// Rollback calls RollbackFunc.
func (mock *StoreMock) Rollback(contextMoqParam context.Context, sd Sd) error {
	if mock.RollbackFunc == nil {
		panic("StoreMock.RollbackFunc: method is nil but Store.Rollback was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		Sd              Sd
	}{
		ContextMoqParam: contextMoqParam,
		Sd:              sd,
	}
	mock.lockRollback.Lock()
	mock.calls.Rollback = append(mock.calls.Rollback, callInfo)
	mock.lockRollback.Unlock()
	return mock.RollbackFunc(contextMoqParam, sd)
}

// RollbackCalls gets all the calls that were made to Rollback.
// Check the length with:
//
//	len(mockedStore.RollbackCalls())
func (mock *StoreMock) RollbackCalls() []struct {
	ContextMoqParam context.Context
	Sd              Sd
} {
	var calls []struct {
		ContextMoqParam context.Context
		Sd              Sd
	}
	mock.lockRollback.RLock()
	calls = mock.calls.Rollback
	mock.lockRollback.RUnlock()
	return calls
}

// UpdateAttendStatus calls UpdateAttendStatusFunc.
func (mock *StoreMock) UpdateAttendStatus(ctx context.Context, attendStatusID uuid.UUID, param parameter.UpdateAttendStatusParams) (entity.AttendStatus, error) {
	if mock.UpdateAttendStatusFunc == nil {
		panic("StoreMock.UpdateAttendStatusFunc: method is nil but Store.UpdateAttendStatus was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		AttendStatusID uuid.UUID
		Param          parameter.UpdateAttendStatusParams
	}{
		Ctx:            ctx,
		AttendStatusID: attendStatusID,
		Param:          param,
	}
	mock.lockUpdateAttendStatus.Lock()
	mock.calls.UpdateAttendStatus = append(mock.calls.UpdateAttendStatus, callInfo)
	mock.lockUpdateAttendStatus.Unlock()
	return mock.UpdateAttendStatusFunc(ctx, attendStatusID, param)
}

// UpdateAttendStatusCalls gets all the calls that were made to UpdateAttendStatus.
// Check the length with:
//
//	len(mockedStore.UpdateAttendStatusCalls())
func (mock *StoreMock) UpdateAttendStatusCalls() []struct {
	Ctx            context.Context
	AttendStatusID uuid.UUID
	Param          parameter.UpdateAttendStatusParams
} {
	var calls []struct {
		Ctx            context.Context
		AttendStatusID uuid.UUID
		Param          parameter.UpdateAttendStatusParams
	}
	mock.lockUpdateAttendStatus.RLock()
	calls = mock.calls.UpdateAttendStatus
	mock.lockUpdateAttendStatus.RUnlock()
	return calls
}

// UpdateAttendStatusByKey calls UpdateAttendStatusByKeyFunc.
func (mock *StoreMock) UpdateAttendStatusByKey(ctx context.Context, key string, param parameter.UpdateAttendStatusByKeyParams) (entity.AttendStatus, error) {
	if mock.UpdateAttendStatusByKeyFunc == nil {
		panic("StoreMock.UpdateAttendStatusByKeyFunc: method is nil but Store.UpdateAttendStatusByKey was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Key   string
		Param parameter.UpdateAttendStatusByKeyParams
	}{
		Ctx:   ctx,
		Key:   key,
		Param: param,
	}
	mock.lockUpdateAttendStatusByKey.Lock()
	mock.calls.UpdateAttendStatusByKey = append(mock.calls.UpdateAttendStatusByKey, callInfo)
	mock.lockUpdateAttendStatusByKey.Unlock()
	return mock.UpdateAttendStatusByKeyFunc(ctx, key, param)
}

// UpdateAttendStatusByKeyCalls gets all the calls that were made to UpdateAttendStatusByKey.
// Check the length with:
//
//	len(mockedStore.UpdateAttendStatusByKeyCalls())
func (mock *StoreMock) UpdateAttendStatusByKeyCalls() []struct {
	Ctx   context.Context
	Key   string
	Param parameter.UpdateAttendStatusByKeyParams
} {
	var calls []struct {
		Ctx   context.Context
		Key   string
		Param parameter.UpdateAttendStatusByKeyParams
	}
	mock.lockUpdateAttendStatusByKey.RLock()
	calls = mock.calls.UpdateAttendStatusByKey
	mock.lockUpdateAttendStatusByKey.RUnlock()
	return calls
}

// UpdateAttendStatusByKeyWithSd calls UpdateAttendStatusByKeyWithSdFunc.
func (mock *StoreMock) UpdateAttendStatusByKeyWithSd(ctx context.Context, sd Sd, key string, param parameter.UpdateAttendStatusByKeyParams) (entity.AttendStatus, error) {
	if mock.UpdateAttendStatusByKeyWithSdFunc == nil {
		panic("StoreMock.UpdateAttendStatusByKeyWithSdFunc: method is nil but Store.UpdateAttendStatusByKeyWithSd was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Sd    Sd
		Key   string
		Param parameter.UpdateAttendStatusByKeyParams
	}{
		Ctx:   ctx,
		Sd:    sd,
		Key:   key,
		Param: param,
	}
	mock.lockUpdateAttendStatusByKeyWithSd.Lock()
	mock.calls.UpdateAttendStatusByKeyWithSd = append(mock.calls.UpdateAttendStatusByKeyWithSd, callInfo)
	mock.lockUpdateAttendStatusByKeyWithSd.Unlock()
	return mock.UpdateAttendStatusByKeyWithSdFunc(ctx, sd, key, param)
}

// UpdateAttendStatusByKeyWithSdCalls gets all the calls that were made to UpdateAttendStatusByKeyWithSd.
// Check the length with:
//
//	len(mockedStore.UpdateAttendStatusByKeyWithSdCalls())
func (mock *StoreMock) UpdateAttendStatusByKeyWithSdCalls() []struct {
	Ctx   context.Context
	Sd    Sd
	Key   string
	Param parameter.UpdateAttendStatusByKeyParams
} {
	var calls []struct {
		Ctx   context.Context
		Sd    Sd
		Key   string
		Param parameter.UpdateAttendStatusByKeyParams
	}
	mock.lockUpdateAttendStatusByKeyWithSd.RLock()
	calls = mock.calls.UpdateAttendStatusByKeyWithSd
	mock.lockUpdateAttendStatusByKeyWithSd.RUnlock()
	return calls
}

// UpdateAttendStatusWithSd calls UpdateAttendStatusWithSdFunc.
func (mock *StoreMock) UpdateAttendStatusWithSd(ctx context.Context, sd Sd, attendStatusID uuid.UUID, param parameter.UpdateAttendStatusParams) (entity.AttendStatus, error) {
	if mock.UpdateAttendStatusWithSdFunc == nil {
		panic("StoreMock.UpdateAttendStatusWithSdFunc: method is nil but Store.UpdateAttendStatusWithSd was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		Sd             Sd
		AttendStatusID uuid.UUID
		Param          parameter.UpdateAttendStatusParams
	}{
		Ctx:            ctx,
		Sd:             sd,
		AttendStatusID: attendStatusID,
		Param:          param,
	}
	mock.lockUpdateAttendStatusWithSd.Lock()
	mock.calls.UpdateAttendStatusWithSd = append(mock.calls.UpdateAttendStatusWithSd, callInfo)
	mock.lockUpdateAttendStatusWithSd.Unlock()
	return mock.UpdateAttendStatusWithSdFunc(ctx, sd, attendStatusID, param)
}

// UpdateAttendStatusWithSdCalls gets all the calls that were made to UpdateAttendStatusWithSd.
// Check the length with:
//
//	len(mockedStore.UpdateAttendStatusWithSdCalls())
func (mock *StoreMock) UpdateAttendStatusWithSdCalls() []struct {
	Ctx            context.Context
	Sd             Sd
	AttendStatusID uuid.UUID
	Param          parameter.UpdateAttendStatusParams
} {
	var calls []struct {
		Ctx            context.Context
		Sd             Sd
		AttendStatusID uuid.UUID
		Param          parameter.UpdateAttendStatusParams
	}
	mock.lockUpdateAttendStatusWithSd.RLock()
	calls = mock.calls.UpdateAttendStatusWithSd
	mock.lockUpdateAttendStatusWithSd.RUnlock()
	return calls
}
