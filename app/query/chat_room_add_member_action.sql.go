// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: chat_room_add_member_action.sql

package query

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const countChatRoomAddMemberActions = `-- name: CountChatRoomAddMemberActions :one
SELECT COUNT(*) FROM t_chat_room_add_member_actions
`

func (q *Queries) CountChatRoomAddMemberActions(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countChatRoomAddMemberActions)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createChatRoomAddMemberAction = `-- name: CreateChatRoomAddMemberAction :one
INSERT INTO t_chat_room_add_member_actions (chat_room_action_id, added_by) VALUES ($1, $2) RETURNING t_chat_room_add_member_actions_pkey, chat_room_add_member_action_id, chat_room_action_id, added_by
`

type CreateChatRoomAddMemberActionParams struct {
	ChatRoomActionID uuid.UUID   `json:"chat_room_action_id"`
	AddedBy          pgtype.UUID `json:"added_by"`
}

func (q *Queries) CreateChatRoomAddMemberAction(ctx context.Context, arg CreateChatRoomAddMemberActionParams) (ChatRoomAddMemberAction, error) {
	row := q.db.QueryRow(ctx, createChatRoomAddMemberAction, arg.ChatRoomActionID, arg.AddedBy)
	var i ChatRoomAddMemberAction
	err := row.Scan(
		&i.TChatRoomAddMemberActionsPkey,
		&i.ChatRoomAddMemberActionID,
		&i.ChatRoomActionID,
		&i.AddedBy,
	)
	return i, err
}

type CreateChatRoomAddMemberActionsParams struct {
	ChatRoomActionID uuid.UUID   `json:"chat_room_action_id"`
	AddedBy          pgtype.UUID `json:"added_by"`
}

const deleteChatRoomAddMemberAction = `-- name: DeleteChatRoomAddMemberAction :execrows
DELETE FROM t_chat_room_add_member_actions WHERE chat_room_add_member_action_id = $1
`

func (q *Queries) DeleteChatRoomAddMemberAction(ctx context.Context, chatRoomAddMemberActionID uuid.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, deleteChatRoomAddMemberAction, chatRoomAddMemberActionID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getChatRoomAddMemberActionsOnChatRoom = `-- name: GetChatRoomAddMemberActionsOnChatRoom :many
SELECT t_chat_room_add_member_actions.t_chat_room_add_member_actions_pkey, t_chat_room_add_member_actions.chat_room_add_member_action_id, t_chat_room_add_member_actions.chat_room_action_id, t_chat_room_add_member_actions.added_by,
m_members.name add_member_name, m_members.first_name add_member_first_name, m_members.last_name add_member_last_name, m_members.email add_member_email,
m_members.profile_image_id add_member_profile_image_id, m_members.grade_id add_member_grade_id, m_members.group_id add_member_group_id
FROM t_chat_room_add_member_actions
LEFT JOIN m_members ON t_chat_room_add_member_actions.added_by = m_members.member_id
WHERE EXISTS (
	SELECT 1 FROM t_chat_room_actions WHERE chat_room_action_id = t_chat_room_add_member_actions.chat_room_action_id AND t_chat_room_actions.chat_room_id = $1
)
ORDER BY
	t_chat_room_add_member_actions_pkey ASC
`

type GetChatRoomAddMemberActionsOnChatRoomRow struct {
	TChatRoomAddMemberActionsPkey pgtype.Int8 `json:"t_chat_room_add_member_actions_pkey"`
	ChatRoomAddMemberActionID     uuid.UUID   `json:"chat_room_add_member_action_id"`
	ChatRoomActionID              uuid.UUID   `json:"chat_room_action_id"`
	AddedBy                       pgtype.UUID `json:"added_by"`
	AddMemberName                 pgtype.Text `json:"add_member_name"`
	AddMemberFirstName            pgtype.Text `json:"add_member_first_name"`
	AddMemberLastName             pgtype.Text `json:"add_member_last_name"`
	AddMemberEmail                pgtype.Text `json:"add_member_email"`
	AddMemberProfileImageID       pgtype.UUID `json:"add_member_profile_image_id"`
	AddMemberGradeID              pgtype.UUID `json:"add_member_grade_id"`
	AddMemberGroupID              pgtype.UUID `json:"add_member_group_id"`
}

func (q *Queries) GetChatRoomAddMemberActionsOnChatRoom(ctx context.Context, chatRoomID uuid.UUID) ([]GetChatRoomAddMemberActionsOnChatRoomRow, error) {
	rows, err := q.db.Query(ctx, getChatRoomAddMemberActionsOnChatRoom, chatRoomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetChatRoomAddMemberActionsOnChatRoomRow{}
	for rows.Next() {
		var i GetChatRoomAddMemberActionsOnChatRoomRow
		if err := rows.Scan(
			&i.TChatRoomAddMemberActionsPkey,
			&i.ChatRoomAddMemberActionID,
			&i.ChatRoomActionID,
			&i.AddedBy,
			&i.AddMemberName,
			&i.AddMemberFirstName,
			&i.AddMemberLastName,
			&i.AddMemberEmail,
			&i.AddMemberProfileImageID,
			&i.AddMemberGradeID,
			&i.AddMemberGroupID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChatRoomAddMemberActionsOnChatRoomUseKeysetPaginate = `-- name: GetChatRoomAddMemberActionsOnChatRoomUseKeysetPaginate :many
SELECT t_chat_room_add_member_actions.t_chat_room_add_member_actions_pkey, t_chat_room_add_member_actions.chat_room_add_member_action_id, t_chat_room_add_member_actions.chat_room_action_id, t_chat_room_add_member_actions.added_by,
m_members.name add_member_name, m_members.first_name add_member_first_name, m_members.last_name add_member_last_name, m_members.email add_member_email,
m_members.profile_image_id add_member_profile_image_id, m_members.grade_id add_member_grade_id, m_members.group_id add_member_group_id
FROM t_chat_room_add_member_actions
LEFT JOIN m_members ON t_chat_room_add_member_actions.added_by = m_members.member_id
WHERE EXISTS (
	SELECT 1 FROM t_chat_room_actions WHERE chat_room_action_id = t_chat_room_add_member_actions.chat_room_action_id AND chat_room_id = $1
)
AND
	CASE $3::text
		WHEN 'next' THEN
			t_chat_room_add_member_actions_pkey > $4::int
		WHEN 'prev' THEN
			t_chat_room_add_member_actions_pkey < $4::int
	END
ORDER BY
	CASE WHEN $3::text = 'next' THEN t_chat_room_add_member_actions_pkey END ASC,
	CASE WHEN $3::text = 'prev' THEN t_chat_room_add_member_actions_pkey END DESC
LIMIT $2
`

type GetChatRoomAddMemberActionsOnChatRoomUseKeysetPaginateParams struct {
	ChatRoomID      uuid.UUID `json:"chat_room_id"`
	Limit           int32     `json:"limit"`
	CursorDirection string    `json:"cursor_direction"`
	Cursor          int32     `json:"cursor"`
}

type GetChatRoomAddMemberActionsOnChatRoomUseKeysetPaginateRow struct {
	TChatRoomAddMemberActionsPkey pgtype.Int8 `json:"t_chat_room_add_member_actions_pkey"`
	ChatRoomAddMemberActionID     uuid.UUID   `json:"chat_room_add_member_action_id"`
	ChatRoomActionID              uuid.UUID   `json:"chat_room_action_id"`
	AddedBy                       pgtype.UUID `json:"added_by"`
	AddMemberName                 pgtype.Text `json:"add_member_name"`
	AddMemberFirstName            pgtype.Text `json:"add_member_first_name"`
	AddMemberLastName             pgtype.Text `json:"add_member_last_name"`
	AddMemberEmail                pgtype.Text `json:"add_member_email"`
	AddMemberProfileImageID       pgtype.UUID `json:"add_member_profile_image_id"`
	AddMemberGradeID              pgtype.UUID `json:"add_member_grade_id"`
	AddMemberGroupID              pgtype.UUID `json:"add_member_group_id"`
}

func (q *Queries) GetChatRoomAddMemberActionsOnChatRoomUseKeysetPaginate(ctx context.Context, arg GetChatRoomAddMemberActionsOnChatRoomUseKeysetPaginateParams) ([]GetChatRoomAddMemberActionsOnChatRoomUseKeysetPaginateRow, error) {
	rows, err := q.db.Query(ctx, getChatRoomAddMemberActionsOnChatRoomUseKeysetPaginate,
		arg.ChatRoomID,
		arg.Limit,
		arg.CursorDirection,
		arg.Cursor,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetChatRoomAddMemberActionsOnChatRoomUseKeysetPaginateRow{}
	for rows.Next() {
		var i GetChatRoomAddMemberActionsOnChatRoomUseKeysetPaginateRow
		if err := rows.Scan(
			&i.TChatRoomAddMemberActionsPkey,
			&i.ChatRoomAddMemberActionID,
			&i.ChatRoomActionID,
			&i.AddedBy,
			&i.AddMemberName,
			&i.AddMemberFirstName,
			&i.AddMemberLastName,
			&i.AddMemberEmail,
			&i.AddMemberProfileImageID,
			&i.AddMemberGradeID,
			&i.AddMemberGroupID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChatRoomAddMemberActionsOnChatRoomUseNumberedPaginate = `-- name: GetChatRoomAddMemberActionsOnChatRoomUseNumberedPaginate :many
SELECT t_chat_room_add_member_actions.t_chat_room_add_member_actions_pkey, t_chat_room_add_member_actions.chat_room_add_member_action_id, t_chat_room_add_member_actions.chat_room_action_id, t_chat_room_add_member_actions.added_by,
m_members.name add_member_name, m_members.first_name add_member_first_name, m_members.last_name add_member_last_name, m_members.email add_member_email,
m_members.profile_image_id add_member_profile_image_id, m_members.grade_id add_member_grade_id, m_members.group_id add_member_group_id
FROM t_chat_room_add_member_actions
LEFT JOIN m_members ON t_chat_room_add_member_actions.added_by = m_members.member_id
WHERE EXISTS (
	SELECT 1 FROM t_chat_room_actions WHERE chat_room_action_id = t_chat_room_add_member_actions.chat_room_action_id AND chat_room_id = $1
)
ORDER BY
	t_chat_room_add_member_actions_pkey ASC
LIMIT $2 OFFSET $3
`

type GetChatRoomAddMemberActionsOnChatRoomUseNumberedPaginateParams struct {
	ChatRoomID uuid.UUID `json:"chat_room_id"`
	Limit      int32     `json:"limit"`
	Offset     int32     `json:"offset"`
}

type GetChatRoomAddMemberActionsOnChatRoomUseNumberedPaginateRow struct {
	TChatRoomAddMemberActionsPkey pgtype.Int8 `json:"t_chat_room_add_member_actions_pkey"`
	ChatRoomAddMemberActionID     uuid.UUID   `json:"chat_room_add_member_action_id"`
	ChatRoomActionID              uuid.UUID   `json:"chat_room_action_id"`
	AddedBy                       pgtype.UUID `json:"added_by"`
	AddMemberName                 pgtype.Text `json:"add_member_name"`
	AddMemberFirstName            pgtype.Text `json:"add_member_first_name"`
	AddMemberLastName             pgtype.Text `json:"add_member_last_name"`
	AddMemberEmail                pgtype.Text `json:"add_member_email"`
	AddMemberProfileImageID       pgtype.UUID `json:"add_member_profile_image_id"`
	AddMemberGradeID              pgtype.UUID `json:"add_member_grade_id"`
	AddMemberGroupID              pgtype.UUID `json:"add_member_group_id"`
}

func (q *Queries) GetChatRoomAddMemberActionsOnChatRoomUseNumberedPaginate(ctx context.Context, arg GetChatRoomAddMemberActionsOnChatRoomUseNumberedPaginateParams) ([]GetChatRoomAddMemberActionsOnChatRoomUseNumberedPaginateRow, error) {
	rows, err := q.db.Query(ctx, getChatRoomAddMemberActionsOnChatRoomUseNumberedPaginate, arg.ChatRoomID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetChatRoomAddMemberActionsOnChatRoomUseNumberedPaginateRow{}
	for rows.Next() {
		var i GetChatRoomAddMemberActionsOnChatRoomUseNumberedPaginateRow
		if err := rows.Scan(
			&i.TChatRoomAddMemberActionsPkey,
			&i.ChatRoomAddMemberActionID,
			&i.ChatRoomActionID,
			&i.AddedBy,
			&i.AddMemberName,
			&i.AddMemberFirstName,
			&i.AddMemberLastName,
			&i.AddMemberEmail,
			&i.AddMemberProfileImageID,
			&i.AddMemberGradeID,
			&i.AddMemberGroupID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPluralChatRoomAddMemberActions = `-- name: GetPluralChatRoomAddMemberActions :many
SELECT t_chat_room_add_member_actions.t_chat_room_add_member_actions_pkey, t_chat_room_add_member_actions.chat_room_add_member_action_id, t_chat_room_add_member_actions.chat_room_action_id, t_chat_room_add_member_actions.added_by,
m_members.name add_member_name, m_members.first_name add_member_first_name, m_members.last_name add_member_last_name, m_members.email add_member_email,
m_members.profile_image_id add_member_profile_image_id, m_members.grade_id add_member_grade_id, m_members.group_id add_member_group_id
FROM t_chat_room_add_member_actions
LEFT JOIN m_members ON t_chat_room_add_member_actions.added_by = m_members.member_id
WHERE chat_room_add_member_action_id = ANY($1::uuid[])
ORDER BY
	t_chat_room_add_member_actions_pkey ASC
`

type GetPluralChatRoomAddMemberActionsRow struct {
	TChatRoomAddMemberActionsPkey pgtype.Int8 `json:"t_chat_room_add_member_actions_pkey"`
	ChatRoomAddMemberActionID     uuid.UUID   `json:"chat_room_add_member_action_id"`
	ChatRoomActionID              uuid.UUID   `json:"chat_room_action_id"`
	AddedBy                       pgtype.UUID `json:"added_by"`
	AddMemberName                 pgtype.Text `json:"add_member_name"`
	AddMemberFirstName            pgtype.Text `json:"add_member_first_name"`
	AddMemberLastName             pgtype.Text `json:"add_member_last_name"`
	AddMemberEmail                pgtype.Text `json:"add_member_email"`
	AddMemberProfileImageID       pgtype.UUID `json:"add_member_profile_image_id"`
	AddMemberGradeID              pgtype.UUID `json:"add_member_grade_id"`
	AddMemberGroupID              pgtype.UUID `json:"add_member_group_id"`
}

func (q *Queries) GetPluralChatRoomAddMemberActions(ctx context.Context, chatRoomAddMemberActionIds []uuid.UUID) ([]GetPluralChatRoomAddMemberActionsRow, error) {
	rows, err := q.db.Query(ctx, getPluralChatRoomAddMemberActions, chatRoomAddMemberActionIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPluralChatRoomAddMemberActionsRow{}
	for rows.Next() {
		var i GetPluralChatRoomAddMemberActionsRow
		if err := rows.Scan(
			&i.TChatRoomAddMemberActionsPkey,
			&i.ChatRoomAddMemberActionID,
			&i.ChatRoomActionID,
			&i.AddedBy,
			&i.AddMemberName,
			&i.AddMemberFirstName,
			&i.AddMemberLastName,
			&i.AddMemberEmail,
			&i.AddMemberProfileImageID,
			&i.AddMemberGradeID,
			&i.AddMemberGroupID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPluralChatRoomAddMemberActionsUseNumberedPaginate = `-- name: GetPluralChatRoomAddMemberActionsUseNumberedPaginate :many
SELECT t_chat_room_add_member_actions.t_chat_room_add_member_actions_pkey, t_chat_room_add_member_actions.chat_room_add_member_action_id, t_chat_room_add_member_actions.chat_room_action_id, t_chat_room_add_member_actions.added_by,
m_members.name add_member_name, m_members.first_name add_member_first_name, m_members.last_name add_member_last_name, m_members.email add_member_email,
m_members.profile_image_id add_member_profile_image_id, m_members.grade_id add_member_grade_id, m_members.group_id add_member_group_id
FROM t_chat_room_add_member_actions
LEFT JOIN m_members ON t_chat_room_add_member_actions.added_by = m_members.member_id
WHERE chat_room_add_member_action_id = ANY($3::uuid[])
ORDER BY
	t_chat_room_add_member_actions_pkey ASC
LIMIT $1 OFFSET $2
`

type GetPluralChatRoomAddMemberActionsUseNumberedPaginateParams struct {
	Limit                      int32       `json:"limit"`
	Offset                     int32       `json:"offset"`
	ChatRoomAddMemberActionIds []uuid.UUID `json:"chat_room_add_member_action_ids"`
}

type GetPluralChatRoomAddMemberActionsUseNumberedPaginateRow struct {
	TChatRoomAddMemberActionsPkey pgtype.Int8 `json:"t_chat_room_add_member_actions_pkey"`
	ChatRoomAddMemberActionID     uuid.UUID   `json:"chat_room_add_member_action_id"`
	ChatRoomActionID              uuid.UUID   `json:"chat_room_action_id"`
	AddedBy                       pgtype.UUID `json:"added_by"`
	AddMemberName                 pgtype.Text `json:"add_member_name"`
	AddMemberFirstName            pgtype.Text `json:"add_member_first_name"`
	AddMemberLastName             pgtype.Text `json:"add_member_last_name"`
	AddMemberEmail                pgtype.Text `json:"add_member_email"`
	AddMemberProfileImageID       pgtype.UUID `json:"add_member_profile_image_id"`
	AddMemberGradeID              pgtype.UUID `json:"add_member_grade_id"`
	AddMemberGroupID              pgtype.UUID `json:"add_member_group_id"`
}

func (q *Queries) GetPluralChatRoomAddMemberActionsUseNumberedPaginate(ctx context.Context, arg GetPluralChatRoomAddMemberActionsUseNumberedPaginateParams) ([]GetPluralChatRoomAddMemberActionsUseNumberedPaginateRow, error) {
	rows, err := q.db.Query(ctx, getPluralChatRoomAddMemberActionsUseNumberedPaginate, arg.Limit, arg.Offset, arg.ChatRoomAddMemberActionIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPluralChatRoomAddMemberActionsUseNumberedPaginateRow{}
	for rows.Next() {
		var i GetPluralChatRoomAddMemberActionsUseNumberedPaginateRow
		if err := rows.Scan(
			&i.TChatRoomAddMemberActionsPkey,
			&i.ChatRoomAddMemberActionID,
			&i.ChatRoomActionID,
			&i.AddedBy,
			&i.AddMemberName,
			&i.AddMemberFirstName,
			&i.AddMemberLastName,
			&i.AddMemberEmail,
			&i.AddMemberProfileImageID,
			&i.AddMemberGradeID,
			&i.AddMemberGroupID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const pluralDeleteChatRoomAddMemberActions = `-- name: PluralDeleteChatRoomAddMemberActions :execrows
DELETE FROM t_chat_room_add_member_actions WHERE chat_room_add_member_action_id = ANY($1::uuid[])
`

func (q *Queries) PluralDeleteChatRoomAddMemberActions(ctx context.Context, chatRoomAddMemberActionIds []uuid.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, pluralDeleteChatRoomAddMemberActions, chatRoomAddMemberActionIds)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
