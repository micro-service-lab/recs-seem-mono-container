// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: chat_room_delete_message_action.sql

package query

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const countChatRoomDeleteMessageActions = `-- name: CountChatRoomDeleteMessageActions :one
SELECT COUNT(*) FROM t_chat_room_delete_message_actions
`

func (q *Queries) CountChatRoomDeleteMessageActions(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countChatRoomDeleteMessageActions)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createChatRoomDeleteMessageAction = `-- name: CreateChatRoomDeleteMessageAction :one
INSERT INTO t_chat_room_delete_message_actions (chat_room_action_id, deleted_by) VALUES ($1, $2) RETURNING t_chat_room_delete_message_actions_pkey, chat_room_delete_message_action_id, chat_room_action_id, deleted_by
`

type CreateChatRoomDeleteMessageActionParams struct {
	ChatRoomActionID uuid.UUID   `json:"chat_room_action_id"`
	DeletedBy        pgtype.UUID `json:"deleted_by"`
}

func (q *Queries) CreateChatRoomDeleteMessageAction(ctx context.Context, arg CreateChatRoomDeleteMessageActionParams) (TChatRoomDeleteMessageAction, error) {
	row := q.db.QueryRow(ctx, createChatRoomDeleteMessageAction, arg.ChatRoomActionID, arg.DeletedBy)
	var i TChatRoomDeleteMessageAction
	err := row.Scan(
		&i.TChatRoomDeleteMessageActionsPkey,
		&i.ChatRoomDeleteMessageActionID,
		&i.ChatRoomActionID,
		&i.DeletedBy,
	)
	return i, err
}

type CreateChatRoomDeleteMessageActionsParams struct {
	ChatRoomActionID uuid.UUID   `json:"chat_room_action_id"`
	DeletedBy        pgtype.UUID `json:"deleted_by"`
}

const deleteChatRoomDeleteMessageAction = `-- name: DeleteChatRoomDeleteMessageAction :execrows
DELETE FROM t_chat_room_delete_message_actions WHERE chat_room_delete_message_action_id = $1
`

func (q *Queries) DeleteChatRoomDeleteMessageAction(ctx context.Context, chatRoomDeleteMessageActionID uuid.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, deleteChatRoomDeleteMessageAction, chatRoomDeleteMessageActionID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const getChatRoomDeleteMessageActionsOnChatRoom = `-- name: GetChatRoomDeleteMessageActionsOnChatRoom :many
SELECT t_chat_room_delete_message_actions.t_chat_room_delete_message_actions_pkey, t_chat_room_delete_message_actions.chat_room_delete_message_action_id, t_chat_room_delete_message_actions.chat_room_action_id, t_chat_room_delete_message_actions.deleted_by,
m_members.name delete_message_member_name, m_members.first_name delete_message_member_first_name, m_members.last_name delete_message_member_last_name, m_members.email delete_message_member_email,
m_members.profile_image_id delete_message_member_profile_image_id
FROM t_chat_room_delete_message_actions
LEFT JOIN m_members ON t_chat_room_delete_message_actions.deleted_by = m_members.member_id
WHERE EXISTS (
	SELECT 1 FROM t_chat_room_actions WHERE chat_room_action_id = t_chat_room_delete_message_actions.chat_room_action_id AND t_chat_room_actions.chat_room_id = $1
)
ORDER BY
	t_chat_room_delete_message_actions_pkey ASC
`

type GetChatRoomDeleteMessageActionsOnChatRoomRow struct {
	TChatRoomDeleteMessageActionsPkey pgtype.Int8 `json:"t_chat_room_delete_message_actions_pkey"`
	ChatRoomDeleteMessageActionID     uuid.UUID   `json:"chat_room_delete_message_action_id"`
	ChatRoomActionID                  uuid.UUID   `json:"chat_room_action_id"`
	DeletedBy                         pgtype.UUID `json:"deleted_by"`
	DeleteMessageMemberName           pgtype.Text `json:"delete_message_member_name"`
	DeleteMessageMemberFirstName      pgtype.Text `json:"delete_message_member_first_name"`
	DeleteMessageMemberLastName       pgtype.Text `json:"delete_message_member_last_name"`
	DeleteMessageMemberEmail          pgtype.Text `json:"delete_message_member_email"`
	DeleteMessageMemberProfileImageID pgtype.UUID `json:"delete_message_member_profile_image_id"`
}

func (q *Queries) GetChatRoomDeleteMessageActionsOnChatRoom(ctx context.Context, chatRoomID uuid.UUID) ([]GetChatRoomDeleteMessageActionsOnChatRoomRow, error) {
	rows, err := q.db.Query(ctx, getChatRoomDeleteMessageActionsOnChatRoom, chatRoomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetChatRoomDeleteMessageActionsOnChatRoomRow{}
	for rows.Next() {
		var i GetChatRoomDeleteMessageActionsOnChatRoomRow
		if err := rows.Scan(
			&i.TChatRoomDeleteMessageActionsPkey,
			&i.ChatRoomDeleteMessageActionID,
			&i.ChatRoomActionID,
			&i.DeletedBy,
			&i.DeleteMessageMemberName,
			&i.DeleteMessageMemberFirstName,
			&i.DeleteMessageMemberLastName,
			&i.DeleteMessageMemberEmail,
			&i.DeleteMessageMemberProfileImageID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChatRoomDeleteMessageActionsOnChatRoomUseKeysetPaginate = `-- name: GetChatRoomDeleteMessageActionsOnChatRoomUseKeysetPaginate :many
SELECT t_chat_room_delete_message_actions.t_chat_room_delete_message_actions_pkey, t_chat_room_delete_message_actions.chat_room_delete_message_action_id, t_chat_room_delete_message_actions.chat_room_action_id, t_chat_room_delete_message_actions.deleted_by,
m_members.name delete_message_member_name, m_members.first_name delete_message_member_first_name, m_members.last_name delete_message_member_last_name, m_members.email delete_message_member_email,
m_members.profile_image_id delete_message_member_profile_image_id
FROM t_chat_room_delete_message_actions
LEFT JOIN m_members ON t_chat_room_delete_message_actions.deleted_by = m_members.member_id
WHERE EXISTS (
	SELECT 1 FROM t_chat_room_actions WHERE chat_room_action_id = t_chat_room_delete_message_actions.chat_room_action_id AND chat_room_id = $1
)
AND
	CASE $3::text
		WHEN 'next' THEN
			t_chat_room_delete_message_actions_pkey > $4::int
		WHEN 'prev' THEN
			t_chat_room_delete_message_actions_pkey < $4::int
	END
ORDER BY
	CASE WHEN $3::text = 'next' THEN t_chat_room_delete_message_actions_pkey END ASC,
	CASE WHEN $3::text = 'prev' THEN t_chat_room_delete_message_actions_pkey END DESC
LIMIT $2
`

type GetChatRoomDeleteMessageActionsOnChatRoomUseKeysetPaginateParams struct {
	ChatRoomID      uuid.UUID `json:"chat_room_id"`
	Limit           int32     `json:"limit"`
	CursorDirection string    `json:"cursor_direction"`
	Cursor          int32     `json:"cursor"`
}

type GetChatRoomDeleteMessageActionsOnChatRoomUseKeysetPaginateRow struct {
	TChatRoomDeleteMessageActionsPkey pgtype.Int8 `json:"t_chat_room_delete_message_actions_pkey"`
	ChatRoomDeleteMessageActionID     uuid.UUID   `json:"chat_room_delete_message_action_id"`
	ChatRoomActionID                  uuid.UUID   `json:"chat_room_action_id"`
	DeletedBy                         pgtype.UUID `json:"deleted_by"`
	DeleteMessageMemberName           pgtype.Text `json:"delete_message_member_name"`
	DeleteMessageMemberFirstName      pgtype.Text `json:"delete_message_member_first_name"`
	DeleteMessageMemberLastName       pgtype.Text `json:"delete_message_member_last_name"`
	DeleteMessageMemberEmail          pgtype.Text `json:"delete_message_member_email"`
	DeleteMessageMemberProfileImageID pgtype.UUID `json:"delete_message_member_profile_image_id"`
}

func (q *Queries) GetChatRoomDeleteMessageActionsOnChatRoomUseKeysetPaginate(ctx context.Context, arg GetChatRoomDeleteMessageActionsOnChatRoomUseKeysetPaginateParams) ([]GetChatRoomDeleteMessageActionsOnChatRoomUseKeysetPaginateRow, error) {
	rows, err := q.db.Query(ctx, getChatRoomDeleteMessageActionsOnChatRoomUseKeysetPaginate,
		arg.ChatRoomID,
		arg.Limit,
		arg.CursorDirection,
		arg.Cursor,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetChatRoomDeleteMessageActionsOnChatRoomUseKeysetPaginateRow{}
	for rows.Next() {
		var i GetChatRoomDeleteMessageActionsOnChatRoomUseKeysetPaginateRow
		if err := rows.Scan(
			&i.TChatRoomDeleteMessageActionsPkey,
			&i.ChatRoomDeleteMessageActionID,
			&i.ChatRoomActionID,
			&i.DeletedBy,
			&i.DeleteMessageMemberName,
			&i.DeleteMessageMemberFirstName,
			&i.DeleteMessageMemberLastName,
			&i.DeleteMessageMemberEmail,
			&i.DeleteMessageMemberProfileImageID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChatRoomDeleteMessageActionsOnChatRoomUseNumberedPaginate = `-- name: GetChatRoomDeleteMessageActionsOnChatRoomUseNumberedPaginate :many
SELECT t_chat_room_delete_message_actions.t_chat_room_delete_message_actions_pkey, t_chat_room_delete_message_actions.chat_room_delete_message_action_id, t_chat_room_delete_message_actions.chat_room_action_id, t_chat_room_delete_message_actions.deleted_by,
m_members.name delete_message_member_name, m_members.first_name delete_message_member_first_name, m_members.last_name delete_message_member_last_name, m_members.email delete_message_member_email,
m_members.profile_image_id delete_message_member_profile_image_id
FROM t_chat_room_delete_message_actions
LEFT JOIN m_members ON t_chat_room_delete_message_actions.deleted_by = m_members.member_id
WHERE EXISTS (
	SELECT 1 FROM t_chat_room_actions WHERE chat_room_action_id = t_chat_room_delete_message_actions.chat_room_action_id AND chat_room_id = $1
)
ORDER BY
	t_chat_room_delete_message_actions_pkey ASC
LIMIT $2 OFFSET $3
`

type GetChatRoomDeleteMessageActionsOnChatRoomUseNumberedPaginateParams struct {
	ChatRoomID uuid.UUID `json:"chat_room_id"`
	Limit      int32     `json:"limit"`
	Offset     int32     `json:"offset"`
}

type GetChatRoomDeleteMessageActionsOnChatRoomUseNumberedPaginateRow struct {
	TChatRoomDeleteMessageActionsPkey pgtype.Int8 `json:"t_chat_room_delete_message_actions_pkey"`
	ChatRoomDeleteMessageActionID     uuid.UUID   `json:"chat_room_delete_message_action_id"`
	ChatRoomActionID                  uuid.UUID   `json:"chat_room_action_id"`
	DeletedBy                         pgtype.UUID `json:"deleted_by"`
	DeleteMessageMemberName           pgtype.Text `json:"delete_message_member_name"`
	DeleteMessageMemberFirstName      pgtype.Text `json:"delete_message_member_first_name"`
	DeleteMessageMemberLastName       pgtype.Text `json:"delete_message_member_last_name"`
	DeleteMessageMemberEmail          pgtype.Text `json:"delete_message_member_email"`
	DeleteMessageMemberProfileImageID pgtype.UUID `json:"delete_message_member_profile_image_id"`
}

func (q *Queries) GetChatRoomDeleteMessageActionsOnChatRoomUseNumberedPaginate(ctx context.Context, arg GetChatRoomDeleteMessageActionsOnChatRoomUseNumberedPaginateParams) ([]GetChatRoomDeleteMessageActionsOnChatRoomUseNumberedPaginateRow, error) {
	rows, err := q.db.Query(ctx, getChatRoomDeleteMessageActionsOnChatRoomUseNumberedPaginate, arg.ChatRoomID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetChatRoomDeleteMessageActionsOnChatRoomUseNumberedPaginateRow{}
	for rows.Next() {
		var i GetChatRoomDeleteMessageActionsOnChatRoomUseNumberedPaginateRow
		if err := rows.Scan(
			&i.TChatRoomDeleteMessageActionsPkey,
			&i.ChatRoomDeleteMessageActionID,
			&i.ChatRoomActionID,
			&i.DeletedBy,
			&i.DeleteMessageMemberName,
			&i.DeleteMessageMemberFirstName,
			&i.DeleteMessageMemberLastName,
			&i.DeleteMessageMemberEmail,
			&i.DeleteMessageMemberProfileImageID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPluralChatRoomDeleteMessageActions = `-- name: GetPluralChatRoomDeleteMessageActions :many
SELECT t_chat_room_delete_message_actions.t_chat_room_delete_message_actions_pkey, t_chat_room_delete_message_actions.chat_room_delete_message_action_id, t_chat_room_delete_message_actions.chat_room_action_id, t_chat_room_delete_message_actions.deleted_by,
m_members.name delete_message_member_name, m_members.first_name delete_message_member_first_name, m_members.last_name delete_message_member_last_name, m_members.email delete_message_member_email,
m_members.profile_image_id delete_message_member_profile_image_id
FROM t_chat_room_delete_message_actions
LEFT JOIN m_members ON t_chat_room_delete_message_actions.deleted_by = m_members.member_id
WHERE chat_room_delete_message_action_id = ANY($1::uuid[])
ORDER BY
	t_chat_room_delete_message_actions_pkey ASC
`

type GetPluralChatRoomDeleteMessageActionsRow struct {
	TChatRoomDeleteMessageActionsPkey pgtype.Int8 `json:"t_chat_room_delete_message_actions_pkey"`
	ChatRoomDeleteMessageActionID     uuid.UUID   `json:"chat_room_delete_message_action_id"`
	ChatRoomActionID                  uuid.UUID   `json:"chat_room_action_id"`
	DeletedBy                         pgtype.UUID `json:"deleted_by"`
	DeleteMessageMemberName           pgtype.Text `json:"delete_message_member_name"`
	DeleteMessageMemberFirstName      pgtype.Text `json:"delete_message_member_first_name"`
	DeleteMessageMemberLastName       pgtype.Text `json:"delete_message_member_last_name"`
	DeleteMessageMemberEmail          pgtype.Text `json:"delete_message_member_email"`
	DeleteMessageMemberProfileImageID pgtype.UUID `json:"delete_message_member_profile_image_id"`
}

func (q *Queries) GetPluralChatRoomDeleteMessageActions(ctx context.Context, chatRoomDeleteMessageActionIds []uuid.UUID) ([]GetPluralChatRoomDeleteMessageActionsRow, error) {
	rows, err := q.db.Query(ctx, getPluralChatRoomDeleteMessageActions, chatRoomDeleteMessageActionIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPluralChatRoomDeleteMessageActionsRow{}
	for rows.Next() {
		var i GetPluralChatRoomDeleteMessageActionsRow
		if err := rows.Scan(
			&i.TChatRoomDeleteMessageActionsPkey,
			&i.ChatRoomDeleteMessageActionID,
			&i.ChatRoomActionID,
			&i.DeletedBy,
			&i.DeleteMessageMemberName,
			&i.DeleteMessageMemberFirstName,
			&i.DeleteMessageMemberLastName,
			&i.DeleteMessageMemberEmail,
			&i.DeleteMessageMemberProfileImageID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPluralChatRoomDeleteMessageActionsUseNumberedPaginate = `-- name: GetPluralChatRoomDeleteMessageActionsUseNumberedPaginate :many
SELECT t_chat_room_delete_message_actions.t_chat_room_delete_message_actions_pkey, t_chat_room_delete_message_actions.chat_room_delete_message_action_id, t_chat_room_delete_message_actions.chat_room_action_id, t_chat_room_delete_message_actions.deleted_by,
m_members.name delete_message_member_name, m_members.first_name delete_message_member_first_name, m_members.last_name delete_message_member_last_name, m_members.email delete_message_member_email,
m_members.profile_image_id delete_message_member_profile_image_id
FROM t_chat_room_delete_message_actions
LEFT JOIN m_members ON t_chat_room_delete_message_actions.deleted_by = m_members.member_id
WHERE chat_room_delete_message_action_id = ANY($3::uuid[])
ORDER BY
	t_chat_room_delete_message_actions_pkey ASC
LIMIT $1 OFFSET $2
`

type GetPluralChatRoomDeleteMessageActionsUseNumberedPaginateParams struct {
	Limit                          int32       `json:"limit"`
	Offset                         int32       `json:"offset"`
	ChatRoomDeleteMessageActionIds []uuid.UUID `json:"chat_room_delete_message_action_ids"`
}

type GetPluralChatRoomDeleteMessageActionsUseNumberedPaginateRow struct {
	TChatRoomDeleteMessageActionsPkey pgtype.Int8 `json:"t_chat_room_delete_message_actions_pkey"`
	ChatRoomDeleteMessageActionID     uuid.UUID   `json:"chat_room_delete_message_action_id"`
	ChatRoomActionID                  uuid.UUID   `json:"chat_room_action_id"`
	DeletedBy                         pgtype.UUID `json:"deleted_by"`
	DeleteMessageMemberName           pgtype.Text `json:"delete_message_member_name"`
	DeleteMessageMemberFirstName      pgtype.Text `json:"delete_message_member_first_name"`
	DeleteMessageMemberLastName       pgtype.Text `json:"delete_message_member_last_name"`
	DeleteMessageMemberEmail          pgtype.Text `json:"delete_message_member_email"`
	DeleteMessageMemberProfileImageID pgtype.UUID `json:"delete_message_member_profile_image_id"`
}

func (q *Queries) GetPluralChatRoomDeleteMessageActionsUseNumberedPaginate(ctx context.Context, arg GetPluralChatRoomDeleteMessageActionsUseNumberedPaginateParams) ([]GetPluralChatRoomDeleteMessageActionsUseNumberedPaginateRow, error) {
	rows, err := q.db.Query(ctx, getPluralChatRoomDeleteMessageActionsUseNumberedPaginate, arg.Limit, arg.Offset, arg.ChatRoomDeleteMessageActionIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPluralChatRoomDeleteMessageActionsUseNumberedPaginateRow{}
	for rows.Next() {
		var i GetPluralChatRoomDeleteMessageActionsUseNumberedPaginateRow
		if err := rows.Scan(
			&i.TChatRoomDeleteMessageActionsPkey,
			&i.ChatRoomDeleteMessageActionID,
			&i.ChatRoomActionID,
			&i.DeletedBy,
			&i.DeleteMessageMemberName,
			&i.DeleteMessageMemberFirstName,
			&i.DeleteMessageMemberLastName,
			&i.DeleteMessageMemberEmail,
			&i.DeleteMessageMemberProfileImageID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const pluralDeleteChatRoomDeleteMessageActions = `-- name: PluralDeleteChatRoomDeleteMessageActions :execrows
DELETE FROM t_chat_room_delete_message_actions WHERE chat_room_delete_message_action_id = ANY($1::uuid[])
`

func (q *Queries) PluralDeleteChatRoomDeleteMessageActions(ctx context.Context, chatRoomDeleteMessageActionIds []uuid.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, pluralDeleteChatRoomDeleteMessageActions, chatRoomDeleteMessageActionIds)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
