// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: grade.sql

package query

import (
	"context"

	"github.com/google/uuid"
)

const countGradesByOrganizationID = `-- name: CountGradesByOrganizationID :one
SELECT COUNT(*) FROM m_grades WHERE organization_id = $1
`

func (q *Queries) CountGradesByOrganizationID(ctx context.Context, organizationID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countGradesByOrganizationID, organizationID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createGrade = `-- name: CreateGrade :one
INSERT INTO m_grades (key, organization_id) VALUES ($1, $2) RETURNING m_grades_pkey, grade_id, key, organization_id
`

type CreateGradeParams struct {
	Key            string    `json:"key"`
	OrganizationID uuid.UUID `json:"organization_id"`
}

func (q *Queries) CreateGrade(ctx context.Context, arg CreateGradeParams) (Grade, error) {
	row := q.db.QueryRow(ctx, createGrade, arg.Key, arg.OrganizationID)
	var i Grade
	err := row.Scan(
		&i.MGradesPkey,
		&i.GradeID,
		&i.Key,
		&i.OrganizationID,
	)
	return i, err
}

type CreateGradesParams struct {
	Key            string    `json:"key"`
	OrganizationID uuid.UUID `json:"organization_id"`
}

const deleteGrade = `-- name: DeleteGrade :exec
DELETE FROM m_grades WHERE grade_id = $1
`

func (q *Queries) DeleteGrade(ctx context.Context, gradeID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteGrade, gradeID)
	return err
}

const findGradeByID = `-- name: FindGradeByID :one
SELECT m_grades_pkey, grade_id, key, organization_id FROM m_grades WHERE grade_id = $1
`

func (q *Queries) FindGradeByID(ctx context.Context, gradeID uuid.UUID) (Grade, error) {
	row := q.db.QueryRow(ctx, findGradeByID, gradeID)
	var i Grade
	err := row.Scan(
		&i.MGradesPkey,
		&i.GradeID,
		&i.Key,
		&i.OrganizationID,
	)
	return i, err
}

const findGradeByIDWithOrganization = `-- name: FindGradeByIDWithOrganization :one
SELECT m_grades.m_grades_pkey, m_grades.grade_id, m_grades.key, m_grades.organization_id, m_organizations.m_organizations_pkey, m_organizations.organization_id, m_organizations.name, m_organizations.description, m_organizations.is_personal, m_organizations.is_whole, m_organizations.created_at, m_organizations.updated_at FROM m_grades
INNER JOIN m_organizations ON m_grades.organization_id = m_organizations.organization_id
WHERE grade_id = $1
`

type FindGradeByIDWithOrganizationRow struct {
	Grade        Grade        `json:"grade"`
	Organization Organization `json:"organization"`
}

func (q *Queries) FindGradeByIDWithOrganization(ctx context.Context, gradeID uuid.UUID) (FindGradeByIDWithOrganizationRow, error) {
	row := q.db.QueryRow(ctx, findGradeByIDWithOrganization, gradeID)
	var i FindGradeByIDWithOrganizationRow
	err := row.Scan(
		&i.Grade.MGradesPkey,
		&i.Grade.GradeID,
		&i.Grade.Key,
		&i.Grade.OrganizationID,
		&i.Organization.MOrganizationsPkey,
		&i.Organization.OrganizationID,
		&i.Organization.Name,
		&i.Organization.Description,
		&i.Organization.IsPersonal,
		&i.Organization.IsWhole,
		&i.Organization.CreatedAt,
		&i.Organization.UpdatedAt,
	)
	return i, err
}

const findGradeByKey = `-- name: FindGradeByKey :one
SELECT m_grades_pkey, grade_id, key, organization_id FROM m_grades WHERE key = $1
`

func (q *Queries) FindGradeByKey(ctx context.Context, key string) (Grade, error) {
	row := q.db.QueryRow(ctx, findGradeByKey, key)
	var i Grade
	err := row.Scan(
		&i.MGradesPkey,
		&i.GradeID,
		&i.Key,
		&i.OrganizationID,
	)
	return i, err
}

const findGradeByKeyWithOrganization = `-- name: FindGradeByKeyWithOrganization :one
SELECT m_grades.m_grades_pkey, m_grades.grade_id, m_grades.key, m_grades.organization_id, m_organizations.m_organizations_pkey, m_organizations.organization_id, m_organizations.name, m_organizations.description, m_organizations.is_personal, m_organizations.is_whole, m_organizations.created_at, m_organizations.updated_at FROM m_grades
INNER JOIN m_organizations ON m_grades.organization_id = m_organizations.organization_id
WHERE key = $1
`

type FindGradeByKeyWithOrganizationRow struct {
	Grade        Grade        `json:"grade"`
	Organization Organization `json:"organization"`
}

func (q *Queries) FindGradeByKeyWithOrganization(ctx context.Context, key string) (FindGradeByKeyWithOrganizationRow, error) {
	row := q.db.QueryRow(ctx, findGradeByKeyWithOrganization, key)
	var i FindGradeByKeyWithOrganizationRow
	err := row.Scan(
		&i.Grade.MGradesPkey,
		&i.Grade.GradeID,
		&i.Grade.Key,
		&i.Grade.OrganizationID,
		&i.Organization.MOrganizationsPkey,
		&i.Organization.OrganizationID,
		&i.Organization.Name,
		&i.Organization.Description,
		&i.Organization.IsPersonal,
		&i.Organization.IsWhole,
		&i.Organization.CreatedAt,
		&i.Organization.UpdatedAt,
	)
	return i, err
}

const getGradesByOrganizationID = `-- name: GetGradesByOrganizationID :many
SELECT m_grades_pkey, grade_id, key, organization_id FROM m_grades WHERE organization_id = $1
ORDER BY
	m_grades_pkey DESC
LIMIT $2 OFFSET $3
`

type GetGradesByOrganizationIDParams struct {
	OrganizationID uuid.UUID `json:"organization_id"`
	Limit          int32     `json:"limit"`
	Offset         int32     `json:"offset"`
}

func (q *Queries) GetGradesByOrganizationID(ctx context.Context, arg GetGradesByOrganizationIDParams) ([]Grade, error) {
	rows, err := q.db.Query(ctx, getGradesByOrganizationID, arg.OrganizationID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Grade{}
	for rows.Next() {
		var i Grade
		if err := rows.Scan(
			&i.MGradesPkey,
			&i.GradeID,
			&i.Key,
			&i.OrganizationID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGradesByOrganizationIDWithOrganization = `-- name: GetGradesByOrganizationIDWithOrganization :many
SELECT m_grades.m_grades_pkey, m_grades.grade_id, m_grades.key, m_grades.organization_id, m_organizations.m_organizations_pkey, m_organizations.organization_id, m_organizations.name, m_organizations.description, m_organizations.is_personal, m_organizations.is_whole, m_organizations.created_at, m_organizations.updated_at FROM m_grades
INNER JOIN m_organizations ON m_grades.organization_id = m_organizations.organization_id
WHERE m_grades.organization_id = $1
ORDER BY
	CASE WHEN $4::text = 'name' THEN m_grades.name END ASC,
	m_grades_pkey DESC
LIMIT $2 OFFSET $3
`

type GetGradesByOrganizationIDWithOrganizationParams struct {
	OrganizationID uuid.UUID `json:"organization_id"`
	Limit          int32     `json:"limit"`
	Offset         int32     `json:"offset"`
	OrderMethod    string    `json:"order_method"`
}

type GetGradesByOrganizationIDWithOrganizationRow struct {
	Grade        Grade        `json:"grade"`
	Organization Organization `json:"organization"`
}

func (q *Queries) GetGradesByOrganizationIDWithOrganization(ctx context.Context, arg GetGradesByOrganizationIDWithOrganizationParams) ([]GetGradesByOrganizationIDWithOrganizationRow, error) {
	rows, err := q.db.Query(ctx, getGradesByOrganizationIDWithOrganization,
		arg.OrganizationID,
		arg.Limit,
		arg.Offset,
		arg.OrderMethod,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetGradesByOrganizationIDWithOrganizationRow{}
	for rows.Next() {
		var i GetGradesByOrganizationIDWithOrganizationRow
		if err := rows.Scan(
			&i.Grade.MGradesPkey,
			&i.Grade.GradeID,
			&i.Grade.Key,
			&i.Grade.OrganizationID,
			&i.Organization.MOrganizationsPkey,
			&i.Organization.OrganizationID,
			&i.Organization.Name,
			&i.Organization.Description,
			&i.Organization.IsPersonal,
			&i.Organization.IsWhole,
			&i.Organization.CreatedAt,
			&i.Organization.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
