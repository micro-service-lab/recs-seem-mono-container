// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: early_leaving.sql

package query

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const countEarlyLeavings = `-- name: CountEarlyLeavings :one
SELECT COUNT(*) FROM t_early_leavings
`

func (q *Queries) CountEarlyLeavings(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countEarlyLeavings)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createEarlyLeaving = `-- name: CreateEarlyLeaving :one
INSERT INTO t_early_leavings (attendance_id, leave_time) VALUES ($1, $2) RETURNING t_early_leavings_pkey, early_leaving_id, attendance_id, leave_time
`

type CreateEarlyLeavingParams struct {
	AttendanceID uuid.UUID `json:"attendance_id"`
	LeaveTime    time.Time `json:"leave_time"`
}

func (q *Queries) CreateEarlyLeaving(ctx context.Context, arg CreateEarlyLeavingParams) (EarlyLeaving, error) {
	row := q.db.QueryRow(ctx, createEarlyLeaving, arg.AttendanceID, arg.LeaveTime)
	var i EarlyLeaving
	err := row.Scan(
		&i.TEarlyLeavingsPkey,
		&i.EarlyLeavingID,
		&i.AttendanceID,
		&i.LeaveTime,
	)
	return i, err
}

type CreateEarlyLeavingsParams struct {
	AttendanceID uuid.UUID `json:"attendance_id"`
	LeaveTime    time.Time `json:"leave_time"`
}

const deleteEarlyLeaving = `-- name: DeleteEarlyLeaving :exec
DELETE FROM t_early_leavings WHERE early_leaving_id = $1
`

func (q *Queries) DeleteEarlyLeaving(ctx context.Context, earlyLeavingID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteEarlyLeaving, earlyLeavingID)
	return err
}

const findEarlyLeavingByID = `-- name: FindEarlyLeavingByID :one
SELECT t_early_leavings_pkey, early_leaving_id, attendance_id, leave_time FROM t_early_leavings WHERE early_leaving_id = $1
`

func (q *Queries) FindEarlyLeavingByID(ctx context.Context, earlyLeavingID uuid.UUID) (EarlyLeaving, error) {
	row := q.db.QueryRow(ctx, findEarlyLeavingByID, earlyLeavingID)
	var i EarlyLeaving
	err := row.Scan(
		&i.TEarlyLeavingsPkey,
		&i.EarlyLeavingID,
		&i.AttendanceID,
		&i.LeaveTime,
	)
	return i, err
}

const getEarlyLeavings = `-- name: GetEarlyLeavings :many
SELECT t_early_leavings_pkey, early_leaving_id, attendance_id, leave_time FROM t_early_leavings
ORDER BY
	t_early_leavings_pkey DESC
LIMIT $1 OFFSET $2
`

type GetEarlyLeavingsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetEarlyLeavings(ctx context.Context, arg GetEarlyLeavingsParams) ([]EarlyLeaving, error) {
	rows, err := q.db.Query(ctx, getEarlyLeavings, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EarlyLeaving{}
	for rows.Next() {
		var i EarlyLeaving
		if err := rows.Scan(
			&i.TEarlyLeavingsPkey,
			&i.EarlyLeavingID,
			&i.AttendanceID,
			&i.LeaveTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
